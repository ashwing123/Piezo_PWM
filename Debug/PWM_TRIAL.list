
PWM_TRIAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d344  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  0800d580  0800d580  0001d580  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800d7b8  0800d7b8  0001d7b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800d7c0  0800d7c0  0001d7c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800d7c4  0800d7c4  0001d7c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  0800d7c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000970  20000070  0800d838  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200009e0  0800d838  000209e0  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00027d11  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00004326  00000000  00000000  00047db7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f68  00000000  00000000  0004c0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001dc0  00000000  00000000  0004e048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ad9d  00000000  00000000  0004fe08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00028d5e  00000000  00000000  0008aba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016ddca  00000000  00000000  000b3903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002216cd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009650  00000000  00000000  00221720  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000070 	.word	0x20000070
 8000254:	00000000 	.word	0x00000000
 8000258:	0800d564 	.word	0x0800d564

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000074 	.word	0x20000074
 8000274:	0800d564 	.word	0x0800d564

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	; 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2f>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b68:	bf24      	itt	cs
 8000b6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b72:	d90d      	bls.n	8000b90 <__aeabi_d2f+0x30>
 8000b74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b88:	bf08      	it	eq
 8000b8a:	f020 0001 	biceq.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b94:	d121      	bne.n	8000bda <__aeabi_d2f+0x7a>
 8000b96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b9a:	bfbc      	itt	lt
 8000b9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	4770      	bxlt	lr
 8000ba2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000baa:	f1c2 0218 	rsb	r2, r2, #24
 8000bae:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bba:	bf18      	it	ne
 8000bbc:	f040 0001 	orrne.w	r0, r0, #1
 8000bc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bcc:	ea40 000c 	orr.w	r0, r0, ip
 8000bd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd8:	e7cc      	b.n	8000b74 <__aeabi_d2f+0x14>
 8000bda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bde:	d107      	bne.n	8000bf0 <__aeabi_d2f+0x90>
 8000be0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be4:	bf1e      	ittt	ne
 8000be6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bee:	4770      	bxne	lr
 8000bf0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__aeabi_uldivmod>:
 8000c00:	b953      	cbnz	r3, 8000c18 <__aeabi_uldivmod+0x18>
 8000c02:	b94a      	cbnz	r2, 8000c18 <__aeabi_uldivmod+0x18>
 8000c04:	2900      	cmp	r1, #0
 8000c06:	bf08      	it	eq
 8000c08:	2800      	cmpeq	r0, #0
 8000c0a:	bf1c      	itt	ne
 8000c0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c10:	f04f 30ff 	movne.w	r0, #4294967295
 8000c14:	f000 b982 	b.w	8000f1c <__aeabi_idiv0>
 8000c18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c20:	f000 f806 	bl	8000c30 <__udivmoddi4>
 8000c24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c2c:	b004      	add	sp, #16
 8000c2e:	4770      	bx	lr

08000c30 <__udivmoddi4>:
 8000c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c34:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000c36:	4604      	mov	r4, r0
 8000c38:	460f      	mov	r7, r1
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d148      	bne.n	8000cd0 <__udivmoddi4+0xa0>
 8000c3e:	428a      	cmp	r2, r1
 8000c40:	4694      	mov	ip, r2
 8000c42:	d961      	bls.n	8000d08 <__udivmoddi4+0xd8>
 8000c44:	fab2 f382 	clz	r3, r2
 8000c48:	b143      	cbz	r3, 8000c5c <__udivmoddi4+0x2c>
 8000c4a:	f1c3 0120 	rsb	r1, r3, #32
 8000c4e:	409f      	lsls	r7, r3
 8000c50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c54:	409c      	lsls	r4, r3
 8000c56:	fa20 f101 	lsr.w	r1, r0, r1
 8000c5a:	430f      	orrs	r7, r1
 8000c5c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000c60:	fa1f fe8c 	uxth.w	lr, ip
 8000c64:	0c22      	lsrs	r2, r4, #16
 8000c66:	fbb7 f6f1 	udiv	r6, r7, r1
 8000c6a:	fb01 7716 	mls	r7, r1, r6, r7
 8000c6e:	fb06 f00e 	mul.w	r0, r6, lr
 8000c72:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c76:	4290      	cmp	r0, r2
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x5c>
 8000c7a:	eb1c 0202 	adds.w	r2, ip, r2
 8000c7e:	f106 37ff 	add.w	r7, r6, #4294967295
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x5a>
 8000c84:	4290      	cmp	r0, r2
 8000c86:	f200 8137 	bhi.w	8000ef8 <__udivmoddi4+0x2c8>
 8000c8a:	463e      	mov	r6, r7
 8000c8c:	1a12      	subs	r2, r2, r0
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb2 f0f1 	udiv	r0, r2, r1
 8000c94:	fb01 2210 	mls	r2, r1, r0, r2
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x86>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cac:	d202      	bcs.n	8000cb4 <__udivmoddi4+0x84>
 8000cae:	45a6      	cmp	lr, r4
 8000cb0:	f200 811c 	bhi.w	8000eec <__udivmoddi4+0x2bc>
 8000cb4:	4610      	mov	r0, r2
 8000cb6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cba:	eba4 040e 	sub.w	r4, r4, lr
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0x9a>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c5 4300 	strd	r4, r3, [r5]
 8000cca:	4631      	mov	r1, r6
 8000ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cd0:	428b      	cmp	r3, r1
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0xb8>
 8000cd4:	2d00      	cmp	r5, #0
 8000cd6:	f000 80fd 	beq.w	8000ed4 <__udivmoddi4+0x2a4>
 8000cda:	2600      	movs	r6, #0
 8000cdc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce0:	4630      	mov	r0, r6
 8000ce2:	4631      	mov	r1, r6
 8000ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ce8:	fab3 f683 	clz	r6, r3
 8000cec:	2e00      	cmp	r6, #0
 8000cee:	d14b      	bne.n	8000d88 <__udivmoddi4+0x158>
 8000cf0:	428b      	cmp	r3, r1
 8000cf2:	f0c0 80f2 	bcc.w	8000eda <__udivmoddi4+0x2aa>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f240 80ef 	bls.w	8000eda <__udivmoddi4+0x2aa>
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	2d00      	cmp	r5, #0
 8000d00:	d0e3      	beq.n	8000cca <__udivmoddi4+0x9a>
 8000d02:	e9c5 4700 	strd	r4, r7, [r5]
 8000d06:	e7e0      	b.n	8000cca <__udivmoddi4+0x9a>
 8000d08:	b902      	cbnz	r2, 8000d0c <__udivmoddi4+0xdc>
 8000d0a:	deff      	udf	#255	; 0xff
 8000d0c:	fab2 f382 	clz	r3, r2
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	f040 809d 	bne.w	8000e50 <__udivmoddi4+0x220>
 8000d16:	1a89      	subs	r1, r1, r2
 8000d18:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000d1c:	b297      	uxth	r7, r2
 8000d1e:	2601      	movs	r6, #1
 8000d20:	0c20      	lsrs	r0, r4, #16
 8000d22:	fbb1 f2fe 	udiv	r2, r1, lr
 8000d26:	fb0e 1112 	mls	r1, lr, r2, r1
 8000d2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2e:	fb07 f002 	mul.w	r0, r7, r2
 8000d32:	4288      	cmp	r0, r1
 8000d34:	d90f      	bls.n	8000d56 <__udivmoddi4+0x126>
 8000d36:	eb1c 0101 	adds.w	r1, ip, r1
 8000d3a:	f102 38ff 	add.w	r8, r2, #4294967295
 8000d3e:	bf2c      	ite	cs
 8000d40:	f04f 0901 	movcs.w	r9, #1
 8000d44:	f04f 0900 	movcc.w	r9, #0
 8000d48:	4288      	cmp	r0, r1
 8000d4a:	d903      	bls.n	8000d54 <__udivmoddi4+0x124>
 8000d4c:	f1b9 0f00 	cmp.w	r9, #0
 8000d50:	f000 80cf 	beq.w	8000ef2 <__udivmoddi4+0x2c2>
 8000d54:	4642      	mov	r2, r8
 8000d56:	1a09      	subs	r1, r1, r0
 8000d58:	b2a4      	uxth	r4, r4
 8000d5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d62:	fb00 f707 	mul.w	r7, r0, r7
 8000d66:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d6a:	42a7      	cmp	r7, r4
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x150>
 8000d6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d72:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0x14e>
 8000d78:	42a7      	cmp	r7, r4
 8000d7a:	f200 80b4 	bhi.w	8000ee6 <__udivmoddi4+0x2b6>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	1be4      	subs	r4, r4, r7
 8000d82:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000d86:	e79b      	b.n	8000cc0 <__udivmoddi4+0x90>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa01 f406 	lsl.w	r4, r1, r6
 8000d92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d96:	40f9      	lsrs	r1, r7
 8000d98:	40b2      	lsls	r2, r6
 8000d9a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	431c      	orrs	r4, r3
 8000da8:	fa1f fe8c 	uxth.w	lr, ip
 8000dac:	fa00 f306 	lsl.w	r3, r0, r6
 8000db0:	0c20      	lsrs	r0, r4, #16
 8000db2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000db6:	fb09 1118 	mls	r1, r9, r8, r1
 8000dba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbe:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc2:	4288      	cmp	r0, r1
 8000dc4:	d90f      	bls.n	8000de6 <__udivmoddi4+0x1b6>
 8000dc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dca:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dce:	bf2c      	ite	cs
 8000dd0:	f04f 0b01 	movcs.w	fp, #1
 8000dd4:	f04f 0b00 	movcc.w	fp, #0
 8000dd8:	4288      	cmp	r0, r1
 8000dda:	d903      	bls.n	8000de4 <__udivmoddi4+0x1b4>
 8000ddc:	f1bb 0f00 	cmp.w	fp, #0
 8000de0:	f000 808d 	beq.w	8000efe <__udivmoddi4+0x2ce>
 8000de4:	46d0      	mov	r8, sl
 8000de6:	1a09      	subs	r1, r1, r0
 8000de8:	b2a4      	uxth	r4, r4
 8000dea:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dee:	fb09 1110 	mls	r1, r9, r0, r1
 8000df2:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df6:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dfa:	458e      	cmp	lr, r1
 8000dfc:	d907      	bls.n	8000e0e <__udivmoddi4+0x1de>
 8000dfe:	eb1c 0101 	adds.w	r1, ip, r1
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d201      	bcs.n	8000e0c <__udivmoddi4+0x1dc>
 8000e08:	458e      	cmp	lr, r1
 8000e0a:	d87f      	bhi.n	8000f0c <__udivmoddi4+0x2dc>
 8000e0c:	4620      	mov	r0, r4
 8000e0e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	fba0 9802 	umull	r9, r8, r0, r2
 8000e1a:	4541      	cmp	r1, r8
 8000e1c:	464c      	mov	r4, r9
 8000e1e:	46c6      	mov	lr, r8
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0x1f8>
 8000e22:	d106      	bne.n	8000e32 <__udivmoddi4+0x202>
 8000e24:	454b      	cmp	r3, r9
 8000e26:	d204      	bcs.n	8000e32 <__udivmoddi4+0x202>
 8000e28:	3801      	subs	r0, #1
 8000e2a:	ebb9 0402 	subs.w	r4, r9, r2
 8000e2e:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d070      	beq.n	8000f18 <__udivmoddi4+0x2e8>
 8000e36:	1b1a      	subs	r2, r3, r4
 8000e38:	eb61 010e 	sbc.w	r1, r1, lr
 8000e3c:	fa22 f306 	lsr.w	r3, r2, r6
 8000e40:	fa01 f707 	lsl.w	r7, r1, r7
 8000e44:	40f1      	lsrs	r1, r6
 8000e46:	2600      	movs	r6, #0
 8000e48:	431f      	orrs	r7, r3
 8000e4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e4e:	e73c      	b.n	8000cca <__udivmoddi4+0x9a>
 8000e50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e54:	f1c3 0020 	rsb	r0, r3, #32
 8000e58:	fa01 f203 	lsl.w	r2, r1, r3
 8000e5c:	fa21 f600 	lsr.w	r6, r1, r0
 8000e60:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e64:	fa24 f100 	lsr.w	r1, r4, r0
 8000e68:	fa1f f78c 	uxth.w	r7, ip
 8000e6c:	409c      	lsls	r4, r3
 8000e6e:	4311      	orrs	r1, r2
 8000e70:	fbb6 f0fe 	udiv	r0, r6, lr
 8000e74:	0c0a      	lsrs	r2, r1, #16
 8000e76:	fb0e 6610 	mls	r6, lr, r0, r6
 8000e7a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000e7e:	fb00 f607 	mul.w	r6, r0, r7
 8000e82:	4296      	cmp	r6, r2
 8000e84:	d90e      	bls.n	8000ea4 <__udivmoddi4+0x274>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8e:	bf2c      	ite	cs
 8000e90:	f04f 0901 	movcs.w	r9, #1
 8000e94:	f04f 0900 	movcc.w	r9, #0
 8000e98:	4296      	cmp	r6, r2
 8000e9a:	d902      	bls.n	8000ea2 <__udivmoddi4+0x272>
 8000e9c:	f1b9 0f00 	cmp.w	r9, #0
 8000ea0:	d031      	beq.n	8000f06 <__udivmoddi4+0x2d6>
 8000ea2:	4640      	mov	r0, r8
 8000ea4:	1b92      	subs	r2, r2, r6
 8000ea6:	b289      	uxth	r1, r1
 8000ea8:	fbb2 f6fe 	udiv	r6, r2, lr
 8000eac:	fb0e 2216 	mls	r2, lr, r6, r2
 8000eb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000eb4:	fb06 f207 	mul.w	r2, r6, r7
 8000eb8:	428a      	cmp	r2, r1
 8000eba:	d907      	bls.n	8000ecc <__udivmoddi4+0x29c>
 8000ebc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ec4:	d201      	bcs.n	8000eca <__udivmoddi4+0x29a>
 8000ec6:	428a      	cmp	r2, r1
 8000ec8:	d823      	bhi.n	8000f12 <__udivmoddi4+0x2e2>
 8000eca:	4646      	mov	r6, r8
 8000ecc:	1a89      	subs	r1, r1, r2
 8000ece:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ed2:	e725      	b.n	8000d20 <__udivmoddi4+0xf0>
 8000ed4:	462e      	mov	r6, r5
 8000ed6:	4628      	mov	r0, r5
 8000ed8:	e6f7      	b.n	8000cca <__udivmoddi4+0x9a>
 8000eda:	1a84      	subs	r4, r0, r2
 8000edc:	eb61 0303 	sbc.w	r3, r1, r3
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	461f      	mov	r7, r3
 8000ee4:	e70b      	b.n	8000cfe <__udivmoddi4+0xce>
 8000ee6:	4464      	add	r4, ip
 8000ee8:	3802      	subs	r0, #2
 8000eea:	e749      	b.n	8000d80 <__udivmoddi4+0x150>
 8000eec:	4464      	add	r4, ip
 8000eee:	3802      	subs	r0, #2
 8000ef0:	e6e1      	b.n	8000cb6 <__udivmoddi4+0x86>
 8000ef2:	3a02      	subs	r2, #2
 8000ef4:	4461      	add	r1, ip
 8000ef6:	e72e      	b.n	8000d56 <__udivmoddi4+0x126>
 8000ef8:	3e02      	subs	r6, #2
 8000efa:	4462      	add	r2, ip
 8000efc:	e6c6      	b.n	8000c8c <__udivmoddi4+0x5c>
 8000efe:	f1a8 0802 	sub.w	r8, r8, #2
 8000f02:	4461      	add	r1, ip
 8000f04:	e76f      	b.n	8000de6 <__udivmoddi4+0x1b6>
 8000f06:	3802      	subs	r0, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	e7cb      	b.n	8000ea4 <__udivmoddi4+0x274>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	e77d      	b.n	8000e0e <__udivmoddi4+0x1de>
 8000f12:	3e02      	subs	r6, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	e7d9      	b.n	8000ecc <__udivmoddi4+0x29c>
 8000f18:	462e      	mov	r6, r5
 8000f1a:	e6d6      	b.n	8000cca <__udivmoddi4+0x9a>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <MX_TIM3_Init>:


TIM_HandleTypeDef htim3;
//TIM3 initialization function
void MX_TIM3_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	; 0x28
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f32:	463b      	mov	r3, r7
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
 8000f40:	615a      	str	r2, [r3, #20]
 8000f42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f44:	4b21      	ldr	r3, [pc, #132]	; (8000fcc <MX_TIM3_Init+0xac>)
 8000f46:	4a22      	ldr	r2, [pc, #136]	; (8000fd0 <MX_TIM3_Init+0xb0>)
 8000f48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64;
 8000f4a:	4b20      	ldr	r3, [pc, #128]	; (8000fcc <MX_TIM3_Init+0xac>)
 8000f4c:	2240      	movs	r2, #64	; 0x40
 8000f4e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f50:	4b1e      	ldr	r3, [pc, #120]	; (8000fcc <MX_TIM3_Init+0xac>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000f56:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <MX_TIM3_Init+0xac>)
 8000f58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f5c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5e:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <MX_TIM3_Init+0xac>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f64:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <MX_TIM3_Init+0xac>)
 8000f66:	2280      	movs	r2, #128	; 0x80
 8000f68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f6a:	4818      	ldr	r0, [pc, #96]	; (8000fcc <MX_TIM3_Init+0xac>)
 8000f6c:	f007 fff8 	bl	8008f60 <HAL_TIM_PWM_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000f76:	f000 ff93 	bl	8001ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f82:	f107 031c 	add.w	r3, r7, #28
 8000f86:	4619      	mov	r1, r3
 8000f88:	4810      	ldr	r0, [pc, #64]	; (8000fcc <MX_TIM3_Init+0xac>)
 8000f8a:	f009 f94f 	bl	800a22c <HAL_TIMEx_MasterConfigSynchronization>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000f94:	f000 ff84 	bl	8001ea0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f98:	2360      	movs	r3, #96	; 0x60
 8000f9a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fa8:	463b      	mov	r3, r7
 8000faa:	2208      	movs	r2, #8
 8000fac:	4619      	mov	r1, r3
 8000fae:	4807      	ldr	r0, [pc, #28]	; (8000fcc <MX_TIM3_Init+0xac>)
 8000fb0:	f008 fb00 	bl	80095b4 <HAL_TIM_PWM_ConfigChannel>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000fba:	f000 ff71 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000fbe:	4803      	ldr	r0, [pc, #12]	; (8000fcc <MX_TIM3_Init+0xac>)
 8000fc0:	f001 fb90 	bl	80026e4 <HAL_TIM_MspPostInit>

}
 8000fc4:	bf00      	nop
 8000fc6:	3728      	adds	r7, #40	; 0x28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	2000008c 	.word	0x2000008c
 8000fd0:	40000400 	.word	0x40000400

08000fd4 <piezo_init>:

void piezo_init(void) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	MX_TIM3_Init();
 8000fd8:	f7ff ffa2 	bl	8000f20 <MX_TIM3_Init>
	HAL_TIM_Base_Start(&htim3);
 8000fdc:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <piezo_init+0x20>)
 8000fde:	f007 ff27 	bl	8008e30 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe8:	4803      	ldr	r0, [pc, #12]	; (8000ff8 <piezo_init+0x24>)
 8000fea:	f002 fa3f 	bl	800346c <HAL_GPIO_WritePin>
}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	2000008c 	.word	0x2000008c
 8000ff8:	42020000 	.word	0x42020000
 8000ffc:	00000000 	.word	0x00000000

08001000 <get_freq_from_note>:
/*
 * function name: get_freq_from_note
 * purpose: convert a string representing a note & octave to its corresponding frequency
 * input: string representing a note (see NOTES array below for possible notes) followed by an octave (ex A#3).
 */
float get_freq_from_note(char note[]) {
 8001000:	b5b0      	push	{r4, r5, r7, lr}
 8001002:	b08e      	sub	sp, #56	; 0x38
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
	char NOTES[12][2] = {"A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"};
 8001008:	4b4b      	ldr	r3, [pc, #300]	; (8001138 <get_freq_from_note+0x138>)
 800100a:	f107 0410 	add.w	r4, r7, #16
 800100e:	461d      	mov	r5, r3
 8001010:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001014:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001018:	e884 0003 	stmia.w	r4, {r0, r1}
	int octave;
	char curr_note[2];
	int note_len = strlen(note);
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f7ff f92b 	bl	8000278 <strlen>
 8001022:	4603      	mov	r3, r0
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28
	if (note_len == 3) {
 8001026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001028:	2b03      	cmp	r3, #3
 800102a:	d10c      	bne.n	8001046 <get_freq_from_note+0x46>
		octave = (int) note[2] - '0';
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3302      	adds	r3, #2
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	3b30      	subs	r3, #48	; 0x30
 8001034:	637b      	str	r3, [r7, #52]	; 0x34
		strncpy(curr_note, note, 2);
 8001036:	f107 030c 	add.w	r3, r7, #12
 800103a:	2202      	movs	r2, #2
 800103c:	6879      	ldr	r1, [r7, #4]
 800103e:	4618      	mov	r0, r3
 8001040:	f00a fbac 	bl	800b79c <strncpy>
 8001044:	e012      	b.n	800106c <get_freq_from_note+0x6c>
	} else if (note_len == 2) {
 8001046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001048:	2b02      	cmp	r3, #2
 800104a:	d10c      	bne.n	8001066 <get_freq_from_note+0x66>
		octave = (int) note[1] - '0';
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3301      	adds	r3, #1
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	3b30      	subs	r3, #48	; 0x30
 8001054:	637b      	str	r3, [r7, #52]	; 0x34
		strncpy(curr_note, note, 1);
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	2201      	movs	r2, #1
 800105c:	6879      	ldr	r1, [r7, #4]
 800105e:	4618      	mov	r0, r3
 8001060:	f00a fb9c 	bl	800b79c <strncpy>
 8001064:	e002      	b.n	800106c <get_freq_from_note+0x6c>
	} else {
		return 0;
 8001066:	f04f 0300 	mov.w	r3, #0
 800106a:	e05a      	b.n	8001122 <get_freq_from_note+0x122>
	}
	int keyIndex = 0;
 800106c:	2300      	movs	r3, #0
 800106e:	633b      	str	r3, [r7, #48]	; 0x30
	for (int i = 0; i < NUM_NOTES; i++) {
 8001070:	2300      	movs	r3, #0
 8001072:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001074:	e013      	b.n	800109e <get_freq_from_note+0x9e>
		if (strncmp(curr_note, NOTES[i], 2) == 0) {
 8001076:	f107 0210 	add.w	r2, r7, #16
 800107a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	18d1      	adds	r1, r2, r3
 8001080:	f107 030c 	add.w	r3, r7, #12
 8001084:	2202      	movs	r2, #2
 8001086:	4618      	mov	r0, r3
 8001088:	f00a fb74 	bl	800b774 <strncmp>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d102      	bne.n	8001098 <get_freq_from_note+0x98>
			keyIndex = i;
 8001092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001094:	633b      	str	r3, [r7, #48]	; 0x30
			break;
 8001096:	e005      	b.n	80010a4 <get_freq_from_note+0xa4>
	for (int i = 0; i < NUM_NOTES; i++) {
 8001098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800109a:	3301      	adds	r3, #1
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800109e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a0:	2b0b      	cmp	r3, #11
 80010a2:	dde8      	ble.n	8001076 <get_freq_from_note+0x76>
		}
	}
	//@source: https://gist.github.com/stuartmemo/3766449#file-note-to-frequency
	if (keyIndex < 3) {
 80010a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	dc0c      	bgt.n	80010c4 <get_freq_from_note+0xc4>
		keyIndex = keyIndex + 12 + ((octave - 1) * 12) + 1;
 80010aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ac:	f103 010c 	add.w	r1, r3, #12
 80010b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010b2:	1e5a      	subs	r2, r3, #1
 80010b4:	4613      	mov	r3, r2
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	4413      	add	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	440b      	add	r3, r1
 80010be:	3301      	adds	r3, #1
 80010c0:	633b      	str	r3, [r7, #48]	; 0x30
 80010c2:	e00a      	b.n	80010da <get_freq_from_note+0xda>
	} else {
		keyIndex = keyIndex + ((octave - 1) * 12) + 1;
 80010c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010c6:	1e5a      	subs	r2, r3, #1
 80010c8:	4613      	mov	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4413      	add	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	461a      	mov	r2, r3
 80010d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010d4:	4413      	add	r3, r2
 80010d6:	3301      	adds	r3, #1
 80010d8:	633b      	str	r3, [r7, #48]	; 0x30
	}
	// Return frequency of note
	return 440 * pow(2, ((float) (keyIndex - 49)) / 12);
 80010da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010dc:	3b31      	subs	r3, #49	; 0x31
 80010de:	ee07 3a90 	vmov	s15, r3
 80010e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010e6:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 80010ea:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010ee:	ee16 0a90 	vmov	r0, s13
 80010f2:	f7ff fa2d 	bl	8000550 <__aeabi_f2d>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	ec43 2b11 	vmov	d1, r2, r3
 80010fe:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8001130 <get_freq_from_note+0x130>
 8001102:	f00b fb0d 	bl	800c720 <pow>
 8001106:	ec51 0b10 	vmov	r0, r1, d0
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <get_freq_from_note+0x13c>)
 8001110:	f7ff fa76 	bl	8000600 <__aeabi_dmul>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4610      	mov	r0, r2
 800111a:	4619      	mov	r1, r3
 800111c:	f7ff fd20 	bl	8000b60 <__aeabi_d2f>
 8001120:	4603      	mov	r3, r0
}
 8001122:	ee07 3a90 	vmov	s15, r3
 8001126:	eeb0 0a67 	vmov.f32	s0, s15
 800112a:	3738      	adds	r7, #56	; 0x38
 800112c:	46bd      	mov	sp, r7
 800112e:	bdb0      	pop	{r4, r5, r7, pc}
 8001130:	00000000 	.word	0x00000000
 8001134:	40000000 	.word	0x40000000
 8001138:	0800d580 	.word	0x0800d580
 800113c:	407b8000 	.word	0x407b8000

08001140 <pause_pwm>:
/*
 * function name: pause_pwm
 * purpose: make the duty cycle 0 so no output is provided for the specified duration
 * input: duration of pause in ms
 */
void pause_pwm(int duration_in_ms) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <pause_pwm+0x20>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2200      	movs	r2, #0
 800114e:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_Delay(duration_in_ms);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4618      	mov	r0, r3
 8001154:	f001 fe02 	bl	8002d5c <HAL_Delay>
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	2000008c 	.word	0x2000008c

08001164 <play_frequency>:
/*
 * function name: play_frequency
 * purpose: plays a frequency, for a duration that corresponds to the beat and the tempo
 * input: the beat length, the frequency, the beats per second (tempo)
 */
void play_frequency(float note_beat_length, float frequency, float beats_per_sec) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	ed87 0a03 	vstr	s0, [r7, #12]
 800116e:	edc7 0a02 	vstr	s1, [r7, #8]
 8001172:	ed87 1a01 	vstr	s2, [r7, #4]
	int note_duration_ms = (note_beat_length/beats_per_sec)*1000;
 8001176:	edd7 6a03 	vldr	s13, [r7, #12]
 800117a:	ed97 7a01 	vldr	s14, [r7, #4]
 800117e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001182:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001208 <play_frequency+0xa4>
 8001186:	ee67 7a87 	vmul.f32	s15, s15, s14
 800118a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800118e:	ee17 3a90 	vmov	r3, s15
 8001192:	617b      	str	r3, [r7, #20]
	if (frequency == 0) {
 8001194:	edd7 7a02 	vldr	s15, [r7, #8]
 8001198:	eef5 7a40 	vcmp.f32	s15, #0.0
 800119c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a0:	d103      	bne.n	80011aa <play_frequency+0x46>
		pause_pwm(note_duration_ms);
 80011a2:	6978      	ldr	r0, [r7, #20]
 80011a4:	f7ff ffcc 	bl	8001140 <pause_pwm>
		//delaying so the note holds
		HAL_Delay(note_duration_ms);
		//small pause after note
		pause_pwm((int) (50/(beats_per_sec)));
	}
}
 80011a8:	e029      	b.n	80011fe <play_frequency+0x9a>
		int arr_val = (int) (CLOCKFREQ/frequency);
 80011aa:	eddf 6a18 	vldr	s13, [pc, #96]	; 800120c <play_frequency+0xa8>
 80011ae:	ed97 7a02 	vldr	s14, [r7, #8]
 80011b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ba:	ee17 3a90 	vmov	r3, s15
 80011be:	613b      	str	r3, [r7, #16]
		__HAL_TIM_SET_AUTORELOAD(&htim3, arr_val);
 80011c0:	4b13      	ldr	r3, [pc, #76]	; (8001210 <play_frequency+0xac>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	62da      	str	r2, [r3, #44]	; 0x2c
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	4a11      	ldr	r2, [pc, #68]	; (8001210 <play_frequency+0xac>)
 80011cc:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, arr_val / 2);
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	0fda      	lsrs	r2, r3, #31
 80011d2:	4413      	add	r3, r2
 80011d4:	105b      	asrs	r3, r3, #1
 80011d6:	461a      	mov	r2, r3
 80011d8:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <play_frequency+0xac>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_Delay(note_duration_ms);
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f001 fdbb 	bl	8002d5c <HAL_Delay>
		pause_pwm((int) (50/(beats_per_sec)));
 80011e6:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8001214 <play_frequency+0xb0>
 80011ea:	ed97 7a01 	vldr	s14, [r7, #4]
 80011ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011f6:	ee17 0a90 	vmov	r0, s15
 80011fa:	f7ff ffa1 	bl	8001140 <pause_pwm>
}
 80011fe:	bf00      	nop
 8001200:	3718      	adds	r7, #24
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	447a0000 	.word	0x447a0000
 800120c:	49742400 	.word	0x49742400
 8001210:	2000008c 	.word	0x2000008c
 8001214:	42480000 	.word	0x42480000

08001218 <play_frequency_array>:
void play_frequency_array(float beats[], float frequencies[], int tempo, int song_len) {
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
 8001224:	603b      	str	r3, [r7, #0]
	float beats_per_sec = tempo/60;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4a17      	ldr	r2, [pc, #92]	; (8001288 <play_frequency_array+0x70>)
 800122a:	fb82 1203 	smull	r1, r2, r2, r3
 800122e:	441a      	add	r2, r3
 8001230:	1152      	asrs	r2, r2, #5
 8001232:	17db      	asrs	r3, r3, #31
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	ee07 3a90 	vmov	s15, r3
 800123a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800123e:	edc7 7a04 	vstr	s15, [r7, #16]
	for (int i = 0; i < song_len; i++) {
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	e016      	b.n	8001276 <play_frequency_array+0x5e>
		play_frequency(beats[i], frequencies[i], beats_per_sec);
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	68fa      	ldr	r2, [r7, #12]
 800124e:	4413      	add	r3, r2
 8001250:	edd3 7a00 	vldr	s15, [r3]
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	68ba      	ldr	r2, [r7, #8]
 800125a:	4413      	add	r3, r2
 800125c:	ed93 7a00 	vldr	s14, [r3]
 8001260:	ed97 1a04 	vldr	s2, [r7, #16]
 8001264:	eef0 0a47 	vmov.f32	s1, s14
 8001268:	eeb0 0a67 	vmov.f32	s0, s15
 800126c:	f7ff ff7a 	bl	8001164 <play_frequency>
	for (int i = 0; i < song_len; i++) {
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	3301      	adds	r3, #1
 8001274:	617b      	str	r3, [r7, #20]
 8001276:	697a      	ldr	r2, [r7, #20]
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	429a      	cmp	r2, r3
 800127c:	dbe4      	blt.n	8001248 <play_frequency_array+0x30>
	}
}
 800127e:	bf00      	nop
 8001280:	bf00      	nop
 8001282:	3718      	adds	r7, #24
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	88888889 	.word	0x88888889

0800128c <play_tune>:

void play_tune(float beats[], char *song_notes, int tempo) {
 800128c:	b580      	push	{r7, lr}
 800128e:	b0ec      	sub	sp, #432	; 0x1b0
 8001290:	af00      	add	r7, sp, #0
 8001292:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001296:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800129a:	6018      	str	r0, [r3, #0]
 800129c:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80012a0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80012a4:	6019      	str	r1, [r3, #0]
 80012a6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80012aa:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80012ae:	601a      	str	r2, [r3, #0]
	int note_num = 0;
 80012b0:	2300      	movs	r3, #0
 80012b2:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	float freq_arr[100];
	char *context = NULL;
 80012b6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80012ba:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
	char *space_split = strtok_r(song_notes, " ", &context);
 80012c2:	f107 0214 	add.w	r2, r7, #20
 80012c6:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80012ca:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80012ce:	4924      	ldr	r1, [pc, #144]	; (8001360 <play_tune+0xd4>)
 80012d0:	6818      	ldr	r0, [r3, #0]
 80012d2:	f00a fa9e 	bl	800b812 <strtok_r>
 80012d6:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
	while (space_split != NULL) {
 80012da:	e022      	b.n	8001322 <play_tune+0x96>
		printf("%s", space_split);
 80012dc:	f8d7 11a8 	ldr.w	r1, [r7, #424]	; 0x1a8
 80012e0:	4820      	ldr	r0, [pc, #128]	; (8001364 <play_tune+0xd8>)
 80012e2:	f00a fa2f 	bl	800b744 <iprintf>
		freq_arr[note_num] = get_freq_from_note(space_split);
 80012e6:	f8d7 01a8 	ldr.w	r0, [r7, #424]	; 0x1a8
 80012ea:	f7ff fe89 	bl	8001000 <get_freq_from_note>
 80012ee:	eef0 7a40 	vmov.f32	s15, s0
 80012f2:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80012f6:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 80012fa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4413      	add	r3, r2
 8001302:	edc3 7a00 	vstr	s15, [r3]
		note_num += 1;
 8001306:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800130a:	3301      	adds	r3, #1
 800130c:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
		space_split = strtok_r(NULL, " ", &context);
 8001310:	f107 0314 	add.w	r3, r7, #20
 8001314:	461a      	mov	r2, r3
 8001316:	4912      	ldr	r1, [pc, #72]	; (8001360 <play_tune+0xd4>)
 8001318:	2000      	movs	r0, #0
 800131a:	f00a fa7a 	bl	800b812 <strtok_r>
 800131e:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
	while (space_split != NULL) {
 8001322:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001326:	2b00      	cmp	r3, #0
 8001328:	d1d8      	bne.n	80012dc <play_tune+0x50>
	}
	piezo_init();
 800132a:	f7ff fe53 	bl	8000fd4 <piezo_init>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800132e:	2108      	movs	r1, #8
 8001330:	480d      	ldr	r0, [pc, #52]	; (8001368 <play_tune+0xdc>)
 8001332:	f007 fe6d 	bl	8009010 <HAL_TIM_PWM_Start>
	play_frequency_array(beats, freq_arr, tempo, note_num);
 8001336:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800133a:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 800133e:	f107 0118 	add.w	r1, r7, #24
 8001342:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001346:	f5a3 70d2 	sub.w	r0, r3, #420	; 0x1a4
 800134a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800134e:	6812      	ldr	r2, [r2, #0]
 8001350:	6800      	ldr	r0, [r0, #0]
 8001352:	f7ff ff61 	bl	8001218 <play_frequency_array>
}
 8001356:	bf00      	nop
 8001358:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	0800d598 	.word	0x0800d598
 8001364:	0800d59c 	.word	0x0800d59c
 8001368:	2000008c 	.word	0x2000008c

0800136c <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8001374:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <LL_AHB2_GRP1_EnableClock+0x34>)
 8001376:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800137a:	4909      	ldr	r1, [pc, #36]	; (80013a0 <LL_AHB2_GRP1_EnableClock+0x34>)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	4313      	orrs	r3, r2
 8001380:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <LL_AHB2_GRP1_EnableClock+0x34>)
 8001386:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4013      	ands	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001390:	68fb      	ldr	r3, [r7, #12]
}
 8001392:	bf00      	nop
 8001394:	3714      	adds	r7, #20
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	46020c00 	.word	0x46020c00

080013a4 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80013ac:	4b0a      	ldr	r3, [pc, #40]	; (80013d8 <LL_APB1_GRP2_EnableClock+0x34>)
 80013ae:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80013b2:	4909      	ldr	r1, [pc, #36]	; (80013d8 <LL_APB1_GRP2_EnableClock+0x34>)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <LL_APB1_GRP2_EnableClock+0x34>)
 80013be:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4013      	ands	r3, r2
 80013c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013c8:	68fb      	ldr	r3, [r7, #12]
}
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	46020c00 	.word	0x46020c00

080013dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013dc:	b5b0      	push	{r4, r5, r7, lr}
 80013de:	b094      	sub	sp, #80	; 0x50
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e2:	f001 fc37 	bl	8002c54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e6:	f000 f841 	bl	800146c <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80013ea:	f000 f89e 	bl	800152a <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ee:	f000 fbd5 	bl	8001b9c <MX_GPIO_Init>
  MX_ADF1_Init();
 80013f2:	f000 f8a9 	bl	8001548 <MX_ADF1_Init>
  MX_I2C1_Init();
 80013f6:	f000 f8f3 	bl	80015e0 <MX_I2C1_Init>
  MX_I2C2_Init();
 80013fa:	f000 f931 	bl	8001660 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 80013fe:	f000 f96f 	bl	80016e0 <MX_OCTOSPI1_Init>
  MX_OCTOSPI2_Init();
 8001402:	f000 f9e7 	bl	80017d4 <MX_OCTOSPI2_Init>
  MX_SPI2_Init();
 8001406:	f000 fa61 	bl	80018cc <MX_SPI2_Init>
  MX_UART4_Init();
 800140a:	f000 facd 	bl	80019a8 <MX_UART4_Init>
  MX_USART1_UART_Init();
 800140e:	f000 fb17 	bl	8001a40 <MX_USART1_UART_Init>
  MX_UCPD1_Init();
 8001412:	f000 fb61 	bl	8001ad8 <MX_UCPD1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001416:	f000 fb95 	bl	8001b44 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  piezo_init();
 800141a:	f7ff fddb 	bl	8000fd4 <piezo_init>

  //int beat_dur[] = {1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2};
  //char twinkle_twinkle_notes[] = "C4 C4 G4 G4 A4 A4 G4 F4 F4 E4 E4 D4 D4 C4 G4 G4 F4 F4 E4 E4 D4 G4 G4 F4 F4 E4 E4 D4 C4 C4 G4 G4 A4 A4 G4 F4 F4 E4 E4 D4 D4 C4 ";
  char xfiles_notes[] = "A3 C4 E4 F4 0 A4 E4 D4 E4 G4 E4";
 800141e:	4b11      	ldr	r3, [pc, #68]	; (8001464 <main+0x88>)
 8001420:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8001424:	461d      	mov	r5, r3
 8001426:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001428:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800142a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800142e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  float xfiles_beats[] = {0.5, 0.5, 0.5, 1, 1, 1, 1, 1, 1, 1, 2};
 8001432:	4b0d      	ldr	r3, [pc, #52]	; (8001468 <main+0x8c>)
 8001434:	1d3c      	adds	r4, r7, #4
 8001436:	461d      	mov	r5, r3
 8001438:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800143a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800143c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800143e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001440:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001444:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	play_tune(xfiles_beats, xfiles_notes, 180);
 8001448:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800144c:	1d3b      	adds	r3, r7, #4
 800144e:	22b4      	movs	r2, #180	; 0xb4
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ff1b 	bl	800128c <play_tune>
	break;
 8001456:	bf00      	nop
 8001458:	2300      	movs	r3, #0
    /* USER CODE END WHILE */
  }
    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 800145a:	4618      	mov	r0, r3
 800145c:	3750      	adds	r7, #80	; 0x50
 800145e:	46bd      	mov	sp, r7
 8001460:	bdb0      	pop	{r4, r5, r7, pc}
 8001462:	bf00      	nop
 8001464:	0800d5a0 	.word	0x0800d5a0
 8001468:	0800d5c0 	.word	0x0800d5c0

0800146c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b09e      	sub	sp, #120	; 0x78
 8001470:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001472:	f107 0318 	add.w	r3, r7, #24
 8001476:	2260      	movs	r2, #96	; 0x60
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f00a f95a 	bl	800b734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001480:	463b      	mov	r3, r7
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
 800148c:	611a      	str	r2, [r3, #16]
 800148e:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8001490:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001494:	f003 fb90 	bl	8004bb8 <HAL_PWREx_ControlVoltageScaling>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SystemClock_Config+0x36>
  {
    Error_Handler();
 800149e:	f000 fcff 	bl	8001ea0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 80014a2:	2330      	movs	r3, #48	; 0x30
 80014a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80014a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014ac:	2301      	movs	r3, #1
 80014ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80014b0:	2310      	movs	r3, #16
 80014b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014b8:	2302      	movs	r3, #2
 80014ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80014bc:	2301      	movs	r3, #1
 80014be:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 80014c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014c4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 80014c6:	2303      	movs	r3, #3
 80014c8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 80014ca:	2308      	movs	r3, #8
 80014cc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80014ce:	2302      	movs	r3, #2
 80014d0:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014d2:	2302      	movs	r3, #2
 80014d4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014d6:	2302      	movs	r3, #2
 80014d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80014da:	230c      	movs	r3, #12
 80014dc:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014e2:	f107 0318 	add.w	r3, r7, #24
 80014e6:	4618      	mov	r0, r3
 80014e8:	f003 fc58 	bl	8004d9c <HAL_RCC_OscConfig>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80014f2:	f000 fcd5 	bl	8001ea0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014f6:	231f      	movs	r3, #31
 80014f8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014fa:	2303      	movs	r3, #3
 80014fc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014fe:	2300      	movs	r3, #0
 8001500:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001502:	2300      	movs	r3, #0
 8001504:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800150a:	2300      	movs	r3, #0
 800150c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800150e:	463b      	mov	r3, r7
 8001510:	2102      	movs	r1, #2
 8001512:	4618      	mov	r0, r3
 8001514:	f004 fb18 	bl	8005b48 <HAL_RCC_ClockConfig>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800151e:	f000 fcbf 	bl	8001ea0 <Error_Handler>
  }
}
 8001522:	bf00      	nop
 8001524:	3778      	adds	r7, #120	; 0x78
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 800152e:	f003 fc25 	bl	8004d7c <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8001532:	2002      	movs	r0, #2
 8001534:	f003 fbc2 	bl	8004cbc <HAL_PWREx_ConfigSupply>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <SystemPower_Config+0x18>
  {
    Error_Handler();
 800153e:	f000 fcaf 	bl	8001ea0 <Error_Handler>
  }
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
	...

08001548 <MX_ADF1_Init>:
  * @brief ADF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADF1_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END ADF1_Init 1 */

  /**
    AdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  AdfHandle0.Instance = ADF1_Filter0;
 800154c:	4b21      	ldr	r3, [pc, #132]	; (80015d4 <MX_ADF1_Init+0x8c>)
 800154e:	4a22      	ldr	r2, [pc, #136]	; (80015d8 <MX_ADF1_Init+0x90>)
 8001550:	601a      	str	r2, [r3, #0]
  AdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 8001552:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <MX_ADF1_Init+0x8c>)
 8001554:	2201      	movs	r2, #1
 8001556:	609a      	str	r2, [r3, #8]
  AdfHandle0.Init.CommonParam.OutputClock.Activation = DISABLE;
 8001558:	4b1e      	ldr	r3, [pc, #120]	; (80015d4 <MX_ADF1_Init+0x8c>)
 800155a:	2200      	movs	r2, #0
 800155c:	731a      	strb	r2, [r3, #12]
  AdfHandle0.Init.SerialInterface.Activation = ENABLE;
 800155e:	4b1d      	ldr	r3, [pc, #116]	; (80015d4 <MX_ADF1_Init+0x8c>)
 8001560:	2201      	movs	r2, #1
 8001562:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  AdfHandle0.Init.SerialInterface.ClockSource = MDF_SITF_CCK0_SOURCE;
 8001566:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <MX_ADF1_Init+0x8c>)
 8001568:	2200      	movs	r2, #0
 800156a:	62da      	str	r2, [r3, #44]	; 0x2c
  AdfHandle0.Init.SerialInterface.Threshold = 4;
 800156c:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <MX_ADF1_Init+0x8c>)
 800156e:	2204      	movs	r2, #4
 8001570:	631a      	str	r2, [r3, #48]	; 0x30
  AdfHandle0.Init.FilterBistream = MDF_BITSTREAM0_FALLING;
 8001572:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <MX_ADF1_Init+0x8c>)
 8001574:	2201      	movs	r2, #1
 8001576:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_MDF_Init(&AdfHandle0) != HAL_OK)
 8001578:	4816      	ldr	r0, [pc, #88]	; (80015d4 <MX_ADF1_Init+0x8c>)
 800157a:	f002 f8b5 	bl	80036e8 <HAL_MDF_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_ADF1_Init+0x40>
  {
    Error_Handler();
 8001584:	f000 fc8c 	bl	8001ea0 <Error_Handler>
  /**
    AdfFilterConfig0 structure initialization

    WARNING : only structure is filled, no specific init function call for filter
  */
  AdfFilterConfig0.DataSource = MDF_DATA_SOURCE_BSMX;
 8001588:	4b14      	ldr	r3, [pc, #80]	; (80015dc <MX_ADF1_Init+0x94>)
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
  AdfFilterConfig0.Delay = 0;
 800158e:	4b13      	ldr	r3, [pc, #76]	; (80015dc <MX_ADF1_Init+0x94>)
 8001590:	2200      	movs	r2, #0
 8001592:	605a      	str	r2, [r3, #4]
  AdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC4;
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <MX_ADF1_Init+0x94>)
 8001596:	2240      	movs	r2, #64	; 0x40
 8001598:	609a      	str	r2, [r3, #8]
  AdfFilterConfig0.DecimationRatio = 2;
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <MX_ADF1_Init+0x94>)
 800159c:	2202      	movs	r2, #2
 800159e:	60da      	str	r2, [r3, #12]
  AdfFilterConfig0.Gain = 0;
 80015a0:	4b0e      	ldr	r3, [pc, #56]	; (80015dc <MX_ADF1_Init+0x94>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	615a      	str	r2, [r3, #20]
  AdfFilterConfig0.ReshapeFilter.Activation = DISABLE;
 80015a6:	4b0d      	ldr	r3, [pc, #52]	; (80015dc <MX_ADF1_Init+0x94>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	761a      	strb	r2, [r3, #24]
  AdfFilterConfig0.HighPassFilter.Activation = DISABLE;
 80015ac:	4b0b      	ldr	r3, [pc, #44]	; (80015dc <MX_ADF1_Init+0x94>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	f883 2020 	strb.w	r2, [r3, #32]
  AdfFilterConfig0.SoundActivity.Activation = DISABLE;
 80015b4:	4b09      	ldr	r3, [pc, #36]	; (80015dc <MX_ADF1_Init+0x94>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  AdfFilterConfig0.AcquisitionMode = MDF_MODE_ASYNC_CONT;
 80015bc:	4b07      	ldr	r3, [pc, #28]	; (80015dc <MX_ADF1_Init+0x94>)
 80015be:	2200      	movs	r2, #0
 80015c0:	665a      	str	r2, [r3, #100]	; 0x64
  AdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <MX_ADF1_Init+0x94>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	669a      	str	r2, [r3, #104]	; 0x68
  AdfFilterConfig0.DiscardSamples = 0;
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <MX_ADF1_Init+0x94>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	66da      	str	r2, [r3, #108]	; 0x6c
  /* USER CODE BEGIN ADF1_Init 2 */

  /* USER CODE END ADF1_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	200000d8 	.word	0x200000d8
 80015d8:	46024080 	.word	0x46024080
 80015dc:	2000011c 	.word	0x2000011c

080015e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <MX_I2C1_Init+0x74>)
 80015e6:	4a1c      	ldr	r2, [pc, #112]	; (8001658 <MX_I2C1_Init+0x78>)
 80015e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80015ea:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <MX_I2C1_Init+0x74>)
 80015ec:	4a1b      	ldr	r2, [pc, #108]	; (800165c <MX_I2C1_Init+0x7c>)
 80015ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015f0:	4b18      	ldr	r3, [pc, #96]	; (8001654 <MX_I2C1_Init+0x74>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015f6:	4b17      	ldr	r3, [pc, #92]	; (8001654 <MX_I2C1_Init+0x74>)
 80015f8:	2201      	movs	r2, #1
 80015fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015fc:	4b15      	ldr	r3, [pc, #84]	; (8001654 <MX_I2C1_Init+0x74>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <MX_I2C1_Init+0x74>)
 8001604:	2200      	movs	r2, #0
 8001606:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001608:	4b12      	ldr	r3, [pc, #72]	; (8001654 <MX_I2C1_Init+0x74>)
 800160a:	2200      	movs	r2, #0
 800160c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800160e:	4b11      	ldr	r3, [pc, #68]	; (8001654 <MX_I2C1_Init+0x74>)
 8001610:	2200      	movs	r2, #0
 8001612:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001614:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <MX_I2C1_Init+0x74>)
 8001616:	2200      	movs	r2, #0
 8001618:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800161a:	480e      	ldr	r0, [pc, #56]	; (8001654 <MX_I2C1_Init+0x74>)
 800161c:	f001 ff3e 	bl	800349c <HAL_I2C_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001626:	f000 fc3b 	bl	8001ea0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800162a:	2100      	movs	r1, #0
 800162c:	4809      	ldr	r0, [pc, #36]	; (8001654 <MX_I2C1_Init+0x74>)
 800162e:	f001 ffc4 	bl	80035ba <HAL_I2CEx_ConfigAnalogFilter>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d001      	beq.n	800163c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001638:	f000 fc32 	bl	8001ea0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800163c:	2100      	movs	r1, #0
 800163e:	4805      	ldr	r0, [pc, #20]	; (8001654 <MX_I2C1_Init+0x74>)
 8001640:	f002 f806 	bl	8003650 <HAL_I2CEx_ConfigDigitalFilter>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800164a:	f000 fc29 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000198 	.word	0x20000198
 8001658:	40005400 	.word	0x40005400
 800165c:	10707dbc 	.word	0x10707dbc

08001660 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001664:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <MX_I2C2_Init+0x74>)
 8001666:	4a1c      	ldr	r2, [pc, #112]	; (80016d8 <MX_I2C2_Init+0x78>)
 8001668:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 800166a:	4b1a      	ldr	r3, [pc, #104]	; (80016d4 <MX_I2C2_Init+0x74>)
 800166c:	4a1b      	ldr	r2, [pc, #108]	; (80016dc <MX_I2C2_Init+0x7c>)
 800166e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001670:	4b18      	ldr	r3, [pc, #96]	; (80016d4 <MX_I2C2_Init+0x74>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001676:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <MX_I2C2_Init+0x74>)
 8001678:	2201      	movs	r2, #1
 800167a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800167c:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <MX_I2C2_Init+0x74>)
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001682:	4b14      	ldr	r3, [pc, #80]	; (80016d4 <MX_I2C2_Init+0x74>)
 8001684:	2200      	movs	r2, #0
 8001686:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001688:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <MX_I2C2_Init+0x74>)
 800168a:	2200      	movs	r2, #0
 800168c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800168e:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <MX_I2C2_Init+0x74>)
 8001690:	2200      	movs	r2, #0
 8001692:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <MX_I2C2_Init+0x74>)
 8001696:	2200      	movs	r2, #0
 8001698:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800169a:	480e      	ldr	r0, [pc, #56]	; (80016d4 <MX_I2C2_Init+0x74>)
 800169c:	f001 fefe 	bl	800349c <HAL_I2C_Init>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80016a6:	f000 fbfb 	bl	8001ea0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016aa:	2100      	movs	r1, #0
 80016ac:	4809      	ldr	r0, [pc, #36]	; (80016d4 <MX_I2C2_Init+0x74>)
 80016ae:	f001 ff84 	bl	80035ba <HAL_I2CEx_ConfigAnalogFilter>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80016b8:	f000 fbf2 	bl	8001ea0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80016bc:	2100      	movs	r1, #0
 80016be:	4805      	ldr	r0, [pc, #20]	; (80016d4 <MX_I2C2_Init+0x74>)
 80016c0:	f001 ffc6 	bl	8003650 <HAL_I2CEx_ConfigDigitalFilter>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80016ca:	f000 fbe9 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200001e4 	.word	0x200001e4
 80016d8:	40005800 	.word	0x40005800
 80016dc:	10707dbc 	.word	0x10707dbc

080016e0 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b088      	sub	sp, #32
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80016e6:	f107 0308 	add.w	r3, r7, #8
 80016ea:	2200      	movs	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
 80016ee:	605a      	str	r2, [r3, #4]
 80016f0:	609a      	str	r2, [r3, #8]
 80016f2:	60da      	str	r2, [r3, #12]
 80016f4:	611a      	str	r2, [r3, #16]
 80016f6:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 80016f8:	463b      	mov	r3, r7
 80016fa:	2200      	movs	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001700:	4b31      	ldr	r3, [pc, #196]	; (80017c8 <MX_OCTOSPI1_Init+0xe8>)
 8001702:	4a32      	ldr	r2, [pc, #200]	; (80017cc <MX_OCTOSPI1_Init+0xec>)
 8001704:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8001706:	4b30      	ldr	r3, [pc, #192]	; (80017c8 <MX_OCTOSPI1_Init+0xe8>)
 8001708:	2201      	movs	r2, #1
 800170a:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 800170c:	4b2e      	ldr	r3, [pc, #184]	; (80017c8 <MX_OCTOSPI1_Init+0xe8>)
 800170e:	2200      	movs	r2, #0
 8001710:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_APMEMORY;
 8001712:	4b2d      	ldr	r3, [pc, #180]	; (80017c8 <MX_OCTOSPI1_Init+0xe8>)
 8001714:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001718:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 24;
 800171a:	4b2b      	ldr	r3, [pc, #172]	; (80017c8 <MX_OCTOSPI1_Init+0xe8>)
 800171c:	2218      	movs	r2, #24
 800171e:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001720:	4b29      	ldr	r3, [pc, #164]	; (80017c8 <MX_OCTOSPI1_Init+0xe8>)
 8001722:	2201      	movs	r2, #1
 8001724:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001726:	4b28      	ldr	r3, [pc, #160]	; (80017c8 <MX_OCTOSPI1_Init+0xe8>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 800172c:	4b26      	ldr	r3, [pc, #152]	; (80017c8 <MX_OCTOSPI1_Init+0xe8>)
 800172e:	2200      	movs	r2, #0
 8001730:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001732:	4b25      	ldr	r3, [pc, #148]	; (80017c8 <MX_OCTOSPI1_Init+0xe8>)
 8001734:	2200      	movs	r2, #0
 8001736:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 2;
 8001738:	4b23      	ldr	r3, [pc, #140]	; (80017c8 <MX_OCTOSPI1_Init+0xe8>)
 800173a:	2202      	movs	r2, #2
 800173c:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800173e:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <MX_OCTOSPI1_Init+0xe8>)
 8001740:	2200      	movs	r2, #0
 8001742:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8001744:	4b20      	ldr	r3, [pc, #128]	; (80017c8 <MX_OCTOSPI1_Init+0xe8>)
 8001746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800174a:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 10;
 800174c:	4b1e      	ldr	r3, [pc, #120]	; (80017c8 <MX_OCTOSPI1_Init+0xe8>)
 800174e:	220a      	movs	r2, #10
 8001750:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 8001752:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <MX_OCTOSPI1_Init+0xe8>)
 8001754:	2200      	movs	r2, #0
 8001756:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8001758:	4b1b      	ldr	r3, [pc, #108]	; (80017c8 <MX_OCTOSPI1_Init+0xe8>)
 800175a:	2200      	movs	r2, #0
 800175c:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 100;
 800175e:	4b1a      	ldr	r3, [pc, #104]	; (80017c8 <MX_OCTOSPI1_Init+0xe8>)
 8001760:	2264      	movs	r2, #100	; 0x64
 8001762:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8001764:	4818      	ldr	r0, [pc, #96]	; (80017c8 <MX_OCTOSPI1_Init+0xe8>)
 8001766:	f002 f96b 	bl	8003a40 <HAL_OSPI_Init>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <MX_OCTOSPI1_Init+0x94>
  {
    Error_Handler();
 8001770:	f000 fb96 	bl	8001ea0 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8001774:	2301      	movs	r3, #1
 8001776:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.DQSPort = 1;
 8001778:	2301      	movs	r3, #1
 800177a:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.NCSPort = 1;
 800177c:	2301      	movs	r3, #1
 800177e:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001780:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001784:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8001786:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <MX_OCTOSPI1_Init+0xf0>)
 8001788:	61bb      	str	r3, [r7, #24]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800178a:	f107 0308 	add.w	r3, r7, #8
 800178e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001792:	4619      	mov	r1, r3
 8001794:	480c      	ldr	r0, [pc, #48]	; (80017c8 <MX_OCTOSPI1_Init+0xe8>)
 8001796:	f002 fa93 	bl	8003cc0 <HAL_OSPIM_Config>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_OCTOSPI1_Init+0xc4>
  {
    Error_Handler();
 80017a0:	f000 fb7e 	bl	8001ea0 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 80017ac:	463b      	mov	r3, r7
 80017ae:	4619      	mov	r1, r3
 80017b0:	4805      	ldr	r0, [pc, #20]	; (80017c8 <MX_OCTOSPI1_Init+0xe8>)
 80017b2:	f003 f871 	bl	8004898 <HAL_OSPI_DLYB_SetConfig>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <MX_OCTOSPI1_Init+0xe0>
  {
    Error_Handler();
 80017bc:	f000 fb70 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80017c0:	bf00      	nop
 80017c2:	3720      	adds	r7, #32
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000230 	.word	0x20000230
 80017cc:	420d1400 	.word	0x420d1400
 80017d0:	01000001 	.word	0x01000001

080017d4 <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b088      	sub	sp, #32
 80017d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80017da:	f107 0308 	add.w	r3, r7, #8
 80017de:	2200      	movs	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
 80017e2:	605a      	str	r2, [r3, #4]
 80017e4:	609a      	str	r2, [r3, #8]
 80017e6:	60da      	str	r2, [r3, #12]
 80017e8:	611a      	str	r2, [r3, #16]
 80017ea:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 80017ec:	463b      	mov	r3, r7
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 80017f4:	4b31      	ldr	r3, [pc, #196]	; (80018bc <MX_OCTOSPI2_Init+0xe8>)
 80017f6:	4a32      	ldr	r2, [pc, #200]	; (80018c0 <MX_OCTOSPI2_Init+0xec>)
 80017f8:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 4;
 80017fa:	4b30      	ldr	r3, [pc, #192]	; (80018bc <MX_OCTOSPI2_Init+0xe8>)
 80017fc:	2204      	movs	r2, #4
 80017fe:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001800:	4b2e      	ldr	r3, [pc, #184]	; (80018bc <MX_OCTOSPI2_Init+0xe8>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8001806:	4b2d      	ldr	r3, [pc, #180]	; (80018bc <MX_OCTOSPI2_Init+0xe8>)
 8001808:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800180c:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 26;
 800180e:	4b2b      	ldr	r3, [pc, #172]	; (80018bc <MX_OCTOSPI2_Init+0xe8>)
 8001810:	221a      	movs	r2, #26
 8001812:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 2;
 8001814:	4b29      	ldr	r3, [pc, #164]	; (80018bc <MX_OCTOSPI2_Init+0xe8>)
 8001816:	2202      	movs	r2, #2
 8001818:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800181a:	4b28      	ldr	r3, [pc, #160]	; (80018bc <MX_OCTOSPI2_Init+0xe8>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001820:	4b26      	ldr	r3, [pc, #152]	; (80018bc <MX_OCTOSPI2_Init+0xe8>)
 8001822:	2200      	movs	r2, #0
 8001824:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8001826:	4b25      	ldr	r3, [pc, #148]	; (80018bc <MX_OCTOSPI2_Init+0xe8>)
 8001828:	2200      	movs	r2, #0
 800182a:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 4;
 800182c:	4b23      	ldr	r3, [pc, #140]	; (80018bc <MX_OCTOSPI2_Init+0xe8>)
 800182e:	2204      	movs	r2, #4
 8001830:	625a      	str	r2, [r3, #36]	; 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001832:	4b22      	ldr	r3, [pc, #136]	; (80018bc <MX_OCTOSPI2_Init+0xe8>)
 8001834:	2200      	movs	r2, #0
 8001836:	629a      	str	r2, [r3, #40]	; 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8001838:	4b20      	ldr	r3, [pc, #128]	; (80018bc <MX_OCTOSPI2_Init+0xe8>)
 800183a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800183e:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 8001840:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <MX_OCTOSPI2_Init+0xe8>)
 8001842:	2200      	movs	r2, #0
 8001844:	631a      	str	r2, [r3, #48]	; 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 8001846:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <MX_OCTOSPI2_Init+0xe8>)
 8001848:	2200      	movs	r2, #0
 800184a:	635a      	str	r2, [r3, #52]	; 0x34
  hospi2.Init.MaxTran = 0;
 800184c:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <MX_OCTOSPI2_Init+0xe8>)
 800184e:	2200      	movs	r2, #0
 8001850:	639a      	str	r2, [r3, #56]	; 0x38
  hospi2.Init.Refresh = 0;
 8001852:	4b1a      	ldr	r3, [pc, #104]	; (80018bc <MX_OCTOSPI2_Init+0xe8>)
 8001854:	2200      	movs	r2, #0
 8001856:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8001858:	4818      	ldr	r0, [pc, #96]	; (80018bc <MX_OCTOSPI2_Init+0xe8>)
 800185a:	f002 f8f1 	bl	8003a40 <HAL_OSPI_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_OCTOSPI2_Init+0x94>
  {
    Error_Handler();
 8001864:	f000 fb1c 	bl	8001ea0 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 2;
 8001868:	2302      	movs	r3, #2
 800186a:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.DQSPort = 2;
 800186c:	2302      	movs	r3, #2
 800186e:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.NCSPort = 2;
 8001870:	2302      	movs	r3, #2
 8001872:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8001874:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <MX_OCTOSPI2_Init+0xf0>)
 8001876:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8001878:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <MX_OCTOSPI2_Init+0xf4>)
 800187a:	61bb      	str	r3, [r7, #24]
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800187c:	f107 0308 	add.w	r3, r7, #8
 8001880:	f241 3288 	movw	r2, #5000	; 0x1388
 8001884:	4619      	mov	r1, r3
 8001886:	480d      	ldr	r0, [pc, #52]	; (80018bc <MX_OCTOSPI2_Init+0xe8>)
 8001888:	f002 fa1a 	bl	8003cc0 <HAL_OSPIM_Config>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_OCTOSPI2_Init+0xc2>
  {
    Error_Handler();
 8001892:	f000 fb05 	bl	8001ea0 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8001896:	2300      	movs	r3, #0
 8001898:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 800189a:	2300      	movs	r3, #0
 800189c:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi2, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 800189e:	463b      	mov	r3, r7
 80018a0:	4619      	mov	r1, r3
 80018a2:	4806      	ldr	r0, [pc, #24]	; (80018bc <MX_OCTOSPI2_Init+0xe8>)
 80018a4:	f002 fff8 	bl	8004898 <HAL_OSPI_DLYB_SetConfig>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_OCTOSPI2_Init+0xde>
  {
    Error_Handler();
 80018ae:	f000 faf7 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 80018b2:	bf00      	nop
 80018b4:	3720      	adds	r7, #32
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	2000028c 	.word	0x2000028c
 80018c0:	420d2400 	.word	0x420d2400
 80018c4:	00010002 	.word	0x00010002
 80018c8:	01000002 	.word	0x01000002

080018cc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80018d2:	1d3b      	adds	r3, r7, #4
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80018dc:	4b30      	ldr	r3, [pc, #192]	; (80019a0 <MX_SPI2_Init+0xd4>)
 80018de:	4a31      	ldr	r2, [pc, #196]	; (80019a4 <MX_SPI2_Init+0xd8>)
 80018e0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018e2:	4b2f      	ldr	r3, [pc, #188]	; (80019a0 <MX_SPI2_Init+0xd4>)
 80018e4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80018e8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80018ea:	4b2d      	ldr	r3, [pc, #180]	; (80019a0 <MX_SPI2_Init+0xd4>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80018f0:	4b2b      	ldr	r3, [pc, #172]	; (80019a0 <MX_SPI2_Init+0xd4>)
 80018f2:	2203      	movs	r2, #3
 80018f4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018f6:	4b2a      	ldr	r3, [pc, #168]	; (80019a0 <MX_SPI2_Init+0xd4>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018fc:	4b28      	ldr	r3, [pc, #160]	; (80019a0 <MX_SPI2_Init+0xd4>)
 80018fe:	2200      	movs	r2, #0
 8001900:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001902:	4b27      	ldr	r3, [pc, #156]	; (80019a0 <MX_SPI2_Init+0xd4>)
 8001904:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001908:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800190a:	4b25      	ldr	r3, [pc, #148]	; (80019a0 <MX_SPI2_Init+0xd4>)
 800190c:	2200      	movs	r2, #0
 800190e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001910:	4b23      	ldr	r3, [pc, #140]	; (80019a0 <MX_SPI2_Init+0xd4>)
 8001912:	2200      	movs	r2, #0
 8001914:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001916:	4b22      	ldr	r3, [pc, #136]	; (80019a0 <MX_SPI2_Init+0xd4>)
 8001918:	2200      	movs	r2, #0
 800191a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800191c:	4b20      	ldr	r3, [pc, #128]	; (80019a0 <MX_SPI2_Init+0xd4>)
 800191e:	2200      	movs	r2, #0
 8001920:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8001922:	4b1f      	ldr	r3, [pc, #124]	; (80019a0 <MX_SPI2_Init+0xd4>)
 8001924:	2207      	movs	r2, #7
 8001926:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001928:	4b1d      	ldr	r3, [pc, #116]	; (80019a0 <MX_SPI2_Init+0xd4>)
 800192a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800192e:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001930:	4b1b      	ldr	r3, [pc, #108]	; (80019a0 <MX_SPI2_Init+0xd4>)
 8001932:	2200      	movs	r2, #0
 8001934:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001936:	4b1a      	ldr	r3, [pc, #104]	; (80019a0 <MX_SPI2_Init+0xd4>)
 8001938:	2200      	movs	r2, #0
 800193a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800193c:	4b18      	ldr	r3, [pc, #96]	; (80019a0 <MX_SPI2_Init+0xd4>)
 800193e:	2200      	movs	r2, #0
 8001940:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001942:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <MX_SPI2_Init+0xd4>)
 8001944:	2200      	movs	r2, #0
 8001946:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001948:	4b15      	ldr	r3, [pc, #84]	; (80019a0 <MX_SPI2_Init+0xd4>)
 800194a:	2200      	movs	r2, #0
 800194c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800194e:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <MX_SPI2_Init+0xd4>)
 8001950:	2200      	movs	r2, #0
 8001952:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <MX_SPI2_Init+0xd4>)
 8001956:	2200      	movs	r2, #0
 8001958:	659a      	str	r2, [r3, #88]	; 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <MX_SPI2_Init+0xd4>)
 800195c:	2200      	movs	r2, #0
 800195e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001960:	4b0f      	ldr	r3, [pc, #60]	; (80019a0 <MX_SPI2_Init+0xd4>)
 8001962:	2200      	movs	r2, #0
 8001964:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001966:	480e      	ldr	r0, [pc, #56]	; (80019a0 <MX_SPI2_Init+0xd4>)
 8001968:	f007 f90e 	bl	8008b88 <HAL_SPI_Init>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_SPI2_Init+0xaa>
  {
    Error_Handler();
 8001972:	f000 fa95 	bl	8001ea0 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001976:	2300      	movs	r3, #0
 8001978:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 800197a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800197e:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001980:	2300      	movs	r3, #0
 8001982:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001984:	1d3b      	adds	r3, r7, #4
 8001986:	4619      	mov	r1, r3
 8001988:	4805      	ldr	r0, [pc, #20]	; (80019a0 <MX_SPI2_Init+0xd4>)
 800198a:	f007 fa10 	bl	8008dae <HAL_SPIEx_SetConfigAutonomousMode>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_SPI2_Init+0xcc>
  {
    Error_Handler();
 8001994:	f000 fa84 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001998:	bf00      	nop
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	200002e8 	.word	0x200002e8
 80019a4:	40003800 	.word	0x40003800

080019a8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80019ac:	4b22      	ldr	r3, [pc, #136]	; (8001a38 <MX_UART4_Init+0x90>)
 80019ae:	4a23      	ldr	r2, [pc, #140]	; (8001a3c <MX_UART4_Init+0x94>)
 80019b0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80019b2:	4b21      	ldr	r3, [pc, #132]	; (8001a38 <MX_UART4_Init+0x90>)
 80019b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019b8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80019ba:	4b1f      	ldr	r3, [pc, #124]	; (8001a38 <MX_UART4_Init+0x90>)
 80019bc:	2200      	movs	r2, #0
 80019be:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80019c0:	4b1d      	ldr	r3, [pc, #116]	; (8001a38 <MX_UART4_Init+0x90>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80019c6:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <MX_UART4_Init+0x90>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80019cc:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <MX_UART4_Init+0x90>)
 80019ce:	220c      	movs	r2, #12
 80019d0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019d2:	4b19      	ldr	r3, [pc, #100]	; (8001a38 <MX_UART4_Init+0x90>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d8:	4b17      	ldr	r3, [pc, #92]	; (8001a38 <MX_UART4_Init+0x90>)
 80019da:	2200      	movs	r2, #0
 80019dc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019de:	4b16      	ldr	r3, [pc, #88]	; (8001a38 <MX_UART4_Init+0x90>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019e4:	4b14      	ldr	r3, [pc, #80]	; (8001a38 <MX_UART4_Init+0x90>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019ea:	4b13      	ldr	r3, [pc, #76]	; (8001a38 <MX_UART4_Init+0x90>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80019f0:	4811      	ldr	r0, [pc, #68]	; (8001a38 <MX_UART4_Init+0x90>)
 80019f2:	f008 fd23 	bl	800a43c <HAL_UART_Init>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 80019fc:	f000 fa50 	bl	8001ea0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a00:	2100      	movs	r1, #0
 8001a02:	480d      	ldr	r0, [pc, #52]	; (8001a38 <MX_UART4_Init+0x90>)
 8001a04:	f009 f8fa 	bl	800abfc <HAL_UARTEx_SetTxFifoThreshold>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001a0e:	f000 fa47 	bl	8001ea0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a12:	2100      	movs	r1, #0
 8001a14:	4808      	ldr	r0, [pc, #32]	; (8001a38 <MX_UART4_Init+0x90>)
 8001a16:	f009 f92f 	bl	800ac78 <HAL_UARTEx_SetRxFifoThreshold>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001a20:	f000 fa3e 	bl	8001ea0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001a24:	4804      	ldr	r0, [pc, #16]	; (8001a38 <MX_UART4_Init+0x90>)
 8001a26:	f009 f8b0 	bl	800ab8a <HAL_UARTEx_DisableFifoMode>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d001      	beq.n	8001a34 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001a30:	f000 fa36 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a34:	bf00      	nop
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	20000378 	.word	0x20000378
 8001a3c:	40004c00 	.word	0x40004c00

08001a40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a44:	4b22      	ldr	r3, [pc, #136]	; (8001ad0 <MX_USART1_UART_Init+0x90>)
 8001a46:	4a23      	ldr	r2, [pc, #140]	; (8001ad4 <MX_USART1_UART_Init+0x94>)
 8001a48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a4a:	4b21      	ldr	r3, [pc, #132]	; (8001ad0 <MX_USART1_UART_Init+0x90>)
 8001a4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a52:	4b1f      	ldr	r3, [pc, #124]	; (8001ad0 <MX_USART1_UART_Init+0x90>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a58:	4b1d      	ldr	r3, [pc, #116]	; (8001ad0 <MX_USART1_UART_Init+0x90>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a5e:	4b1c      	ldr	r3, [pc, #112]	; (8001ad0 <MX_USART1_UART_Init+0x90>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a64:	4b1a      	ldr	r3, [pc, #104]	; (8001ad0 <MX_USART1_UART_Init+0x90>)
 8001a66:	220c      	movs	r2, #12
 8001a68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a6a:	4b19      	ldr	r3, [pc, #100]	; (8001ad0 <MX_USART1_UART_Init+0x90>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a70:	4b17      	ldr	r3, [pc, #92]	; (8001ad0 <MX_USART1_UART_Init+0x90>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a76:	4b16      	ldr	r3, [pc, #88]	; (8001ad0 <MX_USART1_UART_Init+0x90>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a7c:	4b14      	ldr	r3, [pc, #80]	; (8001ad0 <MX_USART1_UART_Init+0x90>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a82:	4b13      	ldr	r3, [pc, #76]	; (8001ad0 <MX_USART1_UART_Init+0x90>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a88:	4811      	ldr	r0, [pc, #68]	; (8001ad0 <MX_USART1_UART_Init+0x90>)
 8001a8a:	f008 fcd7 	bl	800a43c <HAL_UART_Init>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a94:	f000 fa04 	bl	8001ea0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a98:	2100      	movs	r1, #0
 8001a9a:	480d      	ldr	r0, [pc, #52]	; (8001ad0 <MX_USART1_UART_Init+0x90>)
 8001a9c:	f009 f8ae 	bl	800abfc <HAL_UARTEx_SetTxFifoThreshold>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001aa6:	f000 f9fb 	bl	8001ea0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001aaa:	2100      	movs	r1, #0
 8001aac:	4808      	ldr	r0, [pc, #32]	; (8001ad0 <MX_USART1_UART_Init+0x90>)
 8001aae:	f009 f8e3 	bl	800ac78 <HAL_UARTEx_SetRxFifoThreshold>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001ab8:	f000 f9f2 	bl	8001ea0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001abc:	4804      	ldr	r0, [pc, #16]	; (8001ad0 <MX_USART1_UART_Init+0x90>)
 8001abe:	f009 f864 	bl	800ab8a <HAL_UARTEx_DisableFifoMode>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001ac8:	f000 f9ea 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000408 	.word	0x20000408
 8001ad4:	40013800 	.word	0x40013800

08001ad8 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ade:	463b      	mov	r3, r7
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
 8001aec:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8001aee:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001af2:	f7ff fc57 	bl	80013a4 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001af6:	2001      	movs	r0, #1
 8001af8:	f7ff fc38 	bl	800136c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001afc:	2002      	movs	r0, #2
 8001afe:	f7ff fc35 	bl	800136c <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PA15 (JTDI)   ------> UCPD1_CC1
  PB15   ------> UCPD1_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001b02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b06:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b10:	463b      	mov	r3, r7
 8001b12:	4619      	mov	r1, r3
 8001b14:	4809      	ldr	r0, [pc, #36]	; (8001b3c <MX_UCPD1_Init+0x64>)
 8001b16:	f009 faa5 	bl	800b064 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b1e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001b20:	2303      	movs	r3, #3
 8001b22:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b24:	2300      	movs	r3, #0
 8001b26:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b28:	463b      	mov	r3, r7
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4804      	ldr	r0, [pc, #16]	; (8001b40 <MX_UCPD1_Init+0x68>)
 8001b2e:	f009 fa99 	bl	800b064 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001b32:	bf00      	nop
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	42020000 	.word	0x42020000
 8001b40:	42020400 	.word	0x42020400

08001b44 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001b48:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001b4a:	4a13      	ldr	r2, [pc, #76]	; (8001b98 <MX_USB_OTG_FS_PCD_Init+0x54>)
 8001b4c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001b50:	2206      	movs	r2, #6
 8001b52:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001b54:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001b56:	2202      	movs	r2, #2
 8001b58:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001b66:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001b6c:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001b72:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001b7e:	4805      	ldr	r0, [pc, #20]	; (8001b94 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001b80:	f002 fed2 	bl	8004928 <HAL_PCD_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_USB_OTG_FS_PCD_Init+0x4a>
  {
    Error_Handler();
 8001b8a:	f000 f989 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000498 	.word	0x20000498
 8001b98:	42040000 	.word	0x42040000

08001b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b08e      	sub	sp, #56	; 0x38
 8001ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	605a      	str	r2, [r3, #4]
 8001bac:	609a      	str	r2, [r3, #8]
 8001bae:	60da      	str	r2, [r3, #12]
 8001bb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bb2:	4bb2      	ldr	r3, [pc, #712]	; (8001e7c <MX_GPIO_Init+0x2e0>)
 8001bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bb8:	4ab0      	ldr	r2, [pc, #704]	; (8001e7c <MX_GPIO_Init+0x2e0>)
 8001bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bbe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001bc2:	4bae      	ldr	r3, [pc, #696]	; (8001e7c <MX_GPIO_Init+0x2e0>)
 8001bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bcc:	623b      	str	r3, [r7, #32]
 8001bce:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd0:	4baa      	ldr	r3, [pc, #680]	; (8001e7c <MX_GPIO_Init+0x2e0>)
 8001bd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bd6:	4aa9      	ldr	r2, [pc, #676]	; (8001e7c <MX_GPIO_Init+0x2e0>)
 8001bd8:	f043 0304 	orr.w	r3, r3, #4
 8001bdc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001be0:	4ba6      	ldr	r3, [pc, #664]	; (8001e7c <MX_GPIO_Init+0x2e0>)
 8001be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	61fb      	str	r3, [r7, #28]
 8001bec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bee:	4ba3      	ldr	r3, [pc, #652]	; (8001e7c <MX_GPIO_Init+0x2e0>)
 8001bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bf4:	4aa1      	ldr	r2, [pc, #644]	; (8001e7c <MX_GPIO_Init+0x2e0>)
 8001bf6:	f043 0301 	orr.w	r3, r3, #1
 8001bfa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001bfe:	4b9f      	ldr	r3, [pc, #636]	; (8001e7c <MX_GPIO_Init+0x2e0>)
 8001c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	61bb      	str	r3, [r7, #24]
 8001c0a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001c0c:	4b9b      	ldr	r3, [pc, #620]	; (8001e7c <MX_GPIO_Init+0x2e0>)
 8001c0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c12:	4a9a      	ldr	r2, [pc, #616]	; (8001e7c <MX_GPIO_Init+0x2e0>)
 8001c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c18:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c1c:	4b97      	ldr	r3, [pc, #604]	; (8001e7c <MX_GPIO_Init+0x2e0>)
 8001c1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c26:	617b      	str	r3, [r7, #20]
 8001c28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c2a:	4b94      	ldr	r3, [pc, #592]	; (8001e7c <MX_GPIO_Init+0x2e0>)
 8001c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c30:	4a92      	ldr	r2, [pc, #584]	; (8001e7c <MX_GPIO_Init+0x2e0>)
 8001c32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c36:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c3a:	4b90      	ldr	r3, [pc, #576]	; (8001e7c <MX_GPIO_Init+0x2e0>)
 8001c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c48:	4b8c      	ldr	r3, [pc, #560]	; (8001e7c <MX_GPIO_Init+0x2e0>)
 8001c4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c4e:	4a8b      	ldr	r2, [pc, #556]	; (8001e7c <MX_GPIO_Init+0x2e0>)
 8001c50:	f043 0302 	orr.w	r3, r3, #2
 8001c54:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c58:	4b88      	ldr	r3, [pc, #544]	; (8001e7c <MX_GPIO_Init+0x2e0>)
 8001c5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c66:	4b85      	ldr	r3, [pc, #532]	; (8001e7c <MX_GPIO_Init+0x2e0>)
 8001c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c6c:	4a83      	ldr	r2, [pc, #524]	; (8001e7c <MX_GPIO_Init+0x2e0>)
 8001c6e:	f043 0308 	orr.w	r3, r3, #8
 8001c72:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c76:	4b81      	ldr	r3, [pc, #516]	; (8001e7c <MX_GPIO_Init+0x2e0>)
 8001c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c84:	4b7d      	ldr	r3, [pc, #500]	; (8001e7c <MX_GPIO_Init+0x2e0>)
 8001c86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c8a:	4a7c      	ldr	r2, [pc, #496]	; (8001e7c <MX_GPIO_Init+0x2e0>)
 8001c8c:	f043 0310 	orr.w	r3, r3, #16
 8001c90:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c94:	4b79      	ldr	r3, [pc, #484]	; (8001e7c <MX_GPIO_Init+0x2e0>)
 8001c96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c9a:	f003 0310 	and.w	r3, r3, #16
 8001c9e:	607b      	str	r3, [r7, #4]
 8001ca0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ca2:	4b76      	ldr	r3, [pc, #472]	; (8001e7c <MX_GPIO_Init+0x2e0>)
 8001ca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ca8:	4a74      	ldr	r2, [pc, #464]	; (8001e7c <MX_GPIO_Init+0x2e0>)
 8001caa:	f043 0320 	orr.w	r3, r3, #32
 8001cae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001cb2:	4b72      	ldr	r3, [pc, #456]	; (8001e7c <MX_GPIO_Init+0x2e0>)
 8001cb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cb8:	f003 0320 	and.w	r3, r3, #32
 8001cbc:	603b      	str	r3, [r7, #0]
 8001cbe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_PWR_GPIO_Port, UCPD_PWR_Pin, GPIO_PIN_RESET);
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2120      	movs	r1, #32
 8001cc4:	486e      	ldr	r0, [pc, #440]	; (8001e80 <MX_GPIO_Init+0x2e4>)
 8001cc6:	f001 fbd1 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin, GPIO_PIN_RESET);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	21c2      	movs	r1, #194	; 0xc2
 8001cce:	486d      	ldr	r0, [pc, #436]	; (8001e84 <MX_GPIO_Init+0x2e8>)
 8001cd0:	f001 fbcc 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WRLS_WKUP_B_GPIO_Port, WRLS_WKUP_B_Pin, GPIO_PIN_RESET);
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	2140      	movs	r1, #64	; 0x40
 8001cd8:	486b      	ldr	r0, [pc, #428]	; (8001e88 <MX_GPIO_Init+0x2ec>)
 8001cda:	f001 fbc7 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin, GPIO_PIN_RESET);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8001ce4:	4869      	ldr	r0, [pc, #420]	; (8001e8c <MX_GPIO_Init+0x2f0>)
 8001ce6:	f001 fbc1 	bl	800346c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WRLS_FLOW_Pin Mems_VLX_GPIO_Pin Mems_INT_LPS22HH_Pin */
  GPIO_InitStruct.Pin = WRLS_FLOW_Pin|Mems_VLX_GPIO_Pin|Mems_INT_LPS22HH_Pin;
 8001cea:	f248 0324 	movw	r3, #32804	; 0x8024
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001cf8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4862      	ldr	r0, [pc, #392]	; (8001e88 <MX_GPIO_Init+0x2ec>)
 8001d00:	f001 f9dc 	bl	80030bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3_BOOT0_Pin */
  GPIO_InitStruct.Pin = PH3_BOOT0_Pin;
 8001d04:	2308      	movs	r3, #8
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PH3_BOOT0_GPIO_Port, &GPIO_InitStruct);
 8001d10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d14:	4619      	mov	r1, r3
 8001d16:	485b      	ldr	r0, [pc, #364]	; (8001e84 <MX_GPIO_Init+0x2e8>)
 8001d18:	f001 f9d0 	bl	80030bc <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_PWR_Pin */
  GPIO_InitStruct.Pin = UCPD_PWR_Pin;
 8001d1c:	2320      	movs	r3, #32
 8001d1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d20:	2301      	movs	r3, #1
 8001d22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(UCPD_PWR_GPIO_Port, &GPIO_InitStruct);
 8001d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d30:	4619      	mov	r1, r3
 8001d32:	4853      	ldr	r0, [pc, #332]	; (8001e80 <MX_GPIO_Init+0x2e4>)
 8001d34:	f001 f9c2 	bl	80030bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PH13_Pin */
  GPIO_InitStruct.Pin = PH13_Pin;
 8001d38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PH13_GPIO_Port, &GPIO_InitStruct);
 8001d46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	484d      	ldr	r0, [pc, #308]	; (8001e84 <MX_GPIO_Init+0x2e8>)
 8001d4e:	f001 f9b5 	bl	80030bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Button_Pin */
  GPIO_InitStruct.Pin = USER_Button_Pin;
 8001d52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Button_GPIO_Port, &GPIO_InitStruct);
 8001d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d64:	4619      	mov	r1, r3
 8001d66:	484a      	ldr	r0, [pc, #296]	; (8001e90 <MX_GPIO_Init+0x2f4>)
 8001d68:	f001 f9a8 	bl	80030bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin Mems_VL53_xshut_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin;
 8001d6c:	23c2      	movs	r3, #194	; 0xc2
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d70:	2301      	movs	r3, #1
 8001d72:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d80:	4619      	mov	r1, r3
 8001d82:	4840      	ldr	r0, [pc, #256]	; (8001e84 <MX_GPIO_Init+0x2e8>)
 8001d84:	f001 f99a 	bl	80030bc <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CCK1_Pin */
  GPIO_InitStruct.Pin = MIC_CCK1_Pin;
 8001d88:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d96:	2300      	movs	r3, #0
 8001d98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8001d9a:	2306      	movs	r3, #6
 8001d9c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_CCK1_GPIO_Port, &GPIO_InitStruct);
 8001d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da2:	4619      	mov	r1, r3
 8001da4:	4839      	ldr	r0, [pc, #228]	; (8001e8c <MX_GPIO_Init+0x2f0>)
 8001da6:	f001 f989 	bl	80030bc <HAL_GPIO_Init>

  /*Configure GPIO pin : WRLS_WKUP_B_Pin */
  GPIO_InitStruct.Pin = WRLS_WKUP_B_Pin;
 8001daa:	2340      	movs	r3, #64	; 0x40
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dae:	2301      	movs	r3, #1
 8001db0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db6:	2300      	movs	r3, #0
 8001db8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WRLS_WKUP_B_GPIO_Port, &GPIO_InitStruct);
 8001dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4831      	ldr	r0, [pc, #196]	; (8001e88 <MX_GPIO_Init+0x2ec>)
 8001dc2:	f001 f97b 	bl	80030bc <HAL_GPIO_Init>

  /*Configure GPIO pins : WRLS_NOTIFY_Pin Mems_INT_IIS2MDC_Pin USB_IANA_Pin Mems_INT_IIS2MDCD9_Pin */
  GPIO_InitStruct.Pin = WRLS_NOTIFY_Pin|Mems_INT_IIS2MDC_Pin|USB_IANA_Pin|Mems_INT_IIS2MDCD9_Pin;
 8001dc6:	f44f 43cc 	mov.w	r3, #26112	; 0x6600
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd8:	4619      	mov	r1, r3
 8001dda:	482e      	ldr	r0, [pc, #184]	; (8001e94 <MX_GPIO_Init+0x2f8>)
 8001ddc:	f001 f96e 	bl	80030bc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_UCPD_FLT_Pin Mems_ISM330DLC_INT1_Pin */
  GPIO_InitStruct.Pin = USB_UCPD_FLT_Pin|Mems_ISM330DLC_INT1_Pin;
 8001de0:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001de4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001de6:	2300      	movs	r3, #0
 8001de8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001df2:	4619      	mov	r1, r3
 8001df4:	4828      	ldr	r0, [pc, #160]	; (8001e98 <MX_GPIO_Init+0x2fc>)
 8001df6:	f001 f961 	bl	80030bc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_SENSE_Pin;
 8001dfa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dfe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e00:	2300      	movs	r3, #0
 8001e02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	481f      	ldr	r0, [pc, #124]	; (8001e8c <MX_GPIO_Init+0x2f0>)
 8001e10:	f001 f954 	bl	80030bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e14:	2304      	movs	r3, #4
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e20:	2300      	movs	r3, #0
 8001e22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e24:	2301      	movs	r3, #1
 8001e26:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	481b      	ldr	r0, [pc, #108]	; (8001e9c <MX_GPIO_Init+0x300>)
 8001e30:	f001 f944 	bl	80030bc <HAL_GPIO_Init>

  /*Configure GPIO pins : Mems_STSAFE_RESET_Pin WRLS_WKUP_W_Pin */
  GPIO_InitStruct.Pin = Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin;
 8001e34:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e42:	2300      	movs	r3, #0
 8001e44:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	480f      	ldr	r0, [pc, #60]	; (8001e8c <MX_GPIO_Init+0x2f0>)
 8001e4e:	f001 f935 	bl	80030bc <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_SDIN0_Pin */
  GPIO_InitStruct.Pin = MIC_SDIN0_Pin;
 8001e52:	2302      	movs	r3, #2
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8001e62:	2306      	movs	r3, #6
 8001e64:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_SDIN0_GPIO_Port, &GPIO_InitStruct);
 8001e66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4804      	ldr	r0, [pc, #16]	; (8001e80 <MX_GPIO_Init+0x2e4>)
 8001e6e:	f001 f925 	bl	80030bc <HAL_GPIO_Init>

}
 8001e72:	bf00      	nop
 8001e74:	3738      	adds	r7, #56	; 0x38
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	46020c00 	.word	0x46020c00
 8001e80:	42020400 	.word	0x42020400
 8001e84:	42021c00 	.word	0x42021c00
 8001e88:	42021800 	.word	0x42021800
 8001e8c:	42021400 	.word	0x42021400
 8001e90:	42020800 	.word	0x42020800
 8001e94:	42020c00 	.word	0x42020c00
 8001e98:	42021000 	.word	0x42021000
 8001e9c:	42020000 	.word	0x42020000

08001ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea4:	b672      	cpsid	i
}
 8001ea6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ea8:	e7fe      	b.n	8001ea8 <Error_Handler+0x8>
	...

08001eac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <HAL_MspInit+0x30>)
 8001eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb8:	4a08      	ldr	r2, [pc, #32]	; (8001edc <HAL_MspInit+0x30>)
 8001eba:	f043 0304 	orr.w	r3, r3, #4
 8001ebe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001ec2:	4b06      	ldr	r3, [pc, #24]	; (8001edc <HAL_MspInit+0x30>)
 8001ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ec8:	f003 0304 	and.w	r3, r3, #4
 8001ecc:	607b      	str	r3, [r7, #4]
 8001ece:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	46020c00 	.word	0x46020c00

08001ee0 <HAL_MDF_MspInit>:
* This function configures the hardware resources used in this example
* @param hmdf: MDF handle pointer
* @retval None
*/
void HAL_MDF_MspInit(MDF_HandleTypeDef* hmdf)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b0bc      	sub	sp, #240	; 0xf0
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
 8001ef2:	609a      	str	r2, [r3, #8]
 8001ef4:	60da      	str	r2, [r3, #12]
 8001ef6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ef8:	f107 0310 	add.w	r3, r7, #16
 8001efc:	22c8      	movs	r2, #200	; 0xc8
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f009 fc17 	bl	800b734 <memset>
  if(IS_ADF_INSTANCE(hmdf->Instance))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a27      	ldr	r2, [pc, #156]	; (8001fa8 <HAL_MDF_MspInit+0xc8>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d146      	bne.n	8001f9e <HAL_MDF_MspInit+0xbe>

  /* USER CODE END ADF1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADF1;
 8001f10:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f14:	f04f 0300 	mov.w	r3, #0
 8001f18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Adf1ClockSelection = RCC_ADF1CLKSOURCE_HCLK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f22:	f107 0310 	add.w	r3, r7, #16
 8001f26:	4618      	mov	r0, r3
 8001f28:	f004 f9e4 	bl	80062f4 <HAL_RCCEx_PeriphCLKConfig>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_MDF_MspInit+0x56>
    {
      Error_Handler();
 8001f32:	f7ff ffb5 	bl	8001ea0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADF1_CLK_ENABLE();
 8001f36:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <HAL_MDF_MspInit+0xcc>)
 8001f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f3c:	4a1b      	ldr	r2, [pc, #108]	; (8001fac <HAL_MDF_MspInit+0xcc>)
 8001f3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001f46:	4b19      	ldr	r3, [pc, #100]	; (8001fac <HAL_MDF_MspInit+0xcc>)
 8001f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f54:	4b15      	ldr	r3, [pc, #84]	; (8001fac <HAL_MDF_MspInit+0xcc>)
 8001f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f5a:	4a14      	ldr	r2, [pc, #80]	; (8001fac <HAL_MDF_MspInit+0xcc>)
 8001f5c:	f043 0310 	orr.w	r3, r3, #16
 8001f60:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f64:	4b11      	ldr	r3, [pc, #68]	; (8001fac <HAL_MDF_MspInit+0xcc>)
 8001f66:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f6a:	f003 0310 	and.w	r3, r3, #16
 8001f6e:	60bb      	str	r3, [r7, #8]
 8001f70:	68bb      	ldr	r3, [r7, #8]
    /**ADF1 GPIO Configuration
    PE10     ------> ADF1_SDI0
    PE9     ------> ADF1_CCK0
    */
    GPIO_InitStruct.Pin = MIC_SDINx_Pin|MIC_CCK0_Pin;
 8001f72:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7a:	2302      	movs	r3, #2
 8001f7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f86:	2300      	movs	r3, #0
 8001f88:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f92:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001f96:	4619      	mov	r1, r3
 8001f98:	4805      	ldr	r0, [pc, #20]	; (8001fb0 <HAL_MDF_MspInit+0xd0>)
 8001f9a:	f001 f88f 	bl	80030bc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADF1_MspInit 1 */

  /* USER CODE END ADF1_MspInit 1 */
  }

}
 8001f9e:	bf00      	nop
 8001fa0:	37f0      	adds	r7, #240	; 0xf0
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	46024080 	.word	0x46024080
 8001fac:	46020c00 	.word	0x46020c00
 8001fb0:	42021000 	.word	0x42021000

08001fb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b0be      	sub	sp, #248	; 0xf8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fbc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	601a      	str	r2, [r3, #0]
 8001fc4:	605a      	str	r2, [r3, #4]
 8001fc6:	609a      	str	r2, [r3, #8]
 8001fc8:	60da      	str	r2, [r3, #12]
 8001fca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fcc:	f107 0318 	add.w	r3, r7, #24
 8001fd0:	22c8      	movs	r2, #200	; 0xc8
 8001fd2:	2100      	movs	r1, #0
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f009 fbad 	bl	800b734 <memset>
  if(hi2c->Instance==I2C1)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a4d      	ldr	r2, [pc, #308]	; (8002114 <HAL_I2C_MspInit+0x160>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d147      	bne.n	8002074 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001fe4:	f04f 0240 	mov.w	r2, #64	; 0x40
 8001fe8:	f04f 0300 	mov.w	r3, #0
 8001fec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ff6:	f107 0318 	add.w	r3, r7, #24
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f004 f97a 	bl	80062f4 <HAL_RCCEx_PeriphCLKConfig>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002006:	f7ff ff4b 	bl	8001ea0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800200a:	4b43      	ldr	r3, [pc, #268]	; (8002118 <HAL_I2C_MspInit+0x164>)
 800200c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002010:	4a41      	ldr	r2, [pc, #260]	; (8002118 <HAL_I2C_MspInit+0x164>)
 8002012:	f043 0302 	orr.w	r3, r3, #2
 8002016:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800201a:	4b3f      	ldr	r3, [pc, #252]	; (8002118 <HAL_I2C_MspInit+0x164>)
 800201c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	617b      	str	r3, [r7, #20]
 8002026:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8002028:	f44f 7340 	mov.w	r3, #768	; 0x300
 800202c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002030:	2312      	movs	r3, #18
 8002032:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203c:	2300      	movs	r3, #0
 800203e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002042:	2304      	movs	r3, #4
 8002044:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002048:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800204c:	4619      	mov	r1, r3
 800204e:	4833      	ldr	r0, [pc, #204]	; (800211c <HAL_I2C_MspInit+0x168>)
 8002050:	f001 f834 	bl	80030bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002054:	4b30      	ldr	r3, [pc, #192]	; (8002118 <HAL_I2C_MspInit+0x164>)
 8002056:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800205a:	4a2f      	ldr	r2, [pc, #188]	; (8002118 <HAL_I2C_MspInit+0x164>)
 800205c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002060:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002064:	4b2c      	ldr	r3, [pc, #176]	; (8002118 <HAL_I2C_MspInit+0x164>)
 8002066:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800206a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800206e:	613b      	str	r3, [r7, #16]
 8002070:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002072:	e04a      	b.n	800210a <HAL_I2C_MspInit+0x156>
  else if(hi2c->Instance==I2C2)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a29      	ldr	r2, [pc, #164]	; (8002120 <HAL_I2C_MspInit+0x16c>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d145      	bne.n	800210a <HAL_I2C_MspInit+0x156>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800207e:	f04f 0280 	mov.w	r2, #128	; 0x80
 8002082:	f04f 0300 	mov.w	r3, #0
 8002086:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800208a:	2300      	movs	r3, #0
 800208c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002090:	f107 0318 	add.w	r3, r7, #24
 8002094:	4618      	mov	r0, r3
 8002096:	f004 f92d 	bl	80062f4 <HAL_RCCEx_PeriphCLKConfig>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 80020a0:	f7ff fefe 	bl	8001ea0 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80020a4:	4b1c      	ldr	r3, [pc, #112]	; (8002118 <HAL_I2C_MspInit+0x164>)
 80020a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020aa:	4a1b      	ldr	r2, [pc, #108]	; (8002118 <HAL_I2C_MspInit+0x164>)
 80020ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020b0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80020b4:	4b18      	ldr	r3, [pc, #96]	; (8002118 <HAL_I2C_MspInit+0x164>)
 80020b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020be:	60fb      	str	r3, [r7, #12]
 80020c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80020c2:	2330      	movs	r3, #48	; 0x30
 80020c4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020c8:	2312      	movs	r3, #18
 80020ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d4:	2300      	movs	r3, #0
 80020d6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80020da:	2304      	movs	r3, #4
 80020dc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80020e0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020e4:	4619      	mov	r1, r3
 80020e6:	480f      	ldr	r0, [pc, #60]	; (8002124 <HAL_I2C_MspInit+0x170>)
 80020e8:	f000 ffe8 	bl	80030bc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020ec:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <HAL_I2C_MspInit+0x164>)
 80020ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80020f2:	4a09      	ldr	r2, [pc, #36]	; (8002118 <HAL_I2C_MspInit+0x164>)
 80020f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020f8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80020fc:	4b06      	ldr	r3, [pc, #24]	; (8002118 <HAL_I2C_MspInit+0x164>)
 80020fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002106:	60bb      	str	r3, [r7, #8]
 8002108:	68bb      	ldr	r3, [r7, #8]
}
 800210a:	bf00      	nop
 800210c:	37f8      	adds	r7, #248	; 0xf8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40005400 	.word	0x40005400
 8002118:	46020c00 	.word	0x46020c00
 800211c:	42020400 	.word	0x42020400
 8002120:	40005800 	.word	0x40005800
 8002124:	42021c00 	.word	0x42021c00

08002128 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b0c6      	sub	sp, #280	; 0x118
 800212c:	af00      	add	r7, sp, #0
 800212e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002132:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002136:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002138:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002148:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800214c:	22c8      	movs	r2, #200	; 0xc8
 800214e:	2100      	movs	r1, #0
 8002150:	4618      	mov	r0, r3
 8002152:	f009 faef 	bl	800b734 <memset>
  if(hospi->Instance==OCTOSPI1)
 8002156:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800215a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a96      	ldr	r2, [pc, #600]	; (80023bc <HAL_OSPI_MspInit+0x294>)
 8002164:	4293      	cmp	r3, r2
 8002166:	f040 813b 	bne.w	80023e0 <HAL_OSPI_MspInit+0x2b8>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800216a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800216e:	f04f 0300 	mov.w	r3, #0
 8002172:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8002176:	2300      	movs	r3, #0
 8002178:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800217c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002180:	4618      	mov	r0, r3
 8002182:	f004 f8b7 	bl	80062f4 <HAL_RCCEx_PeriphCLKConfig>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 800218c:	f7ff fe88 	bl	8001ea0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8002190:	4b8b      	ldr	r3, [pc, #556]	; (80023c0 <HAL_OSPI_MspInit+0x298>)
 8002192:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002196:	4a8a      	ldr	r2, [pc, #552]	; (80023c0 <HAL_OSPI_MspInit+0x298>)
 8002198:	f043 0310 	orr.w	r3, r3, #16
 800219c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021a0:	4b87      	ldr	r3, [pc, #540]	; (80023c0 <HAL_OSPI_MspInit+0x298>)
 80021a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a6:	f003 0310 	and.w	r3, r3, #16
 80021aa:	637b      	str	r3, [r7, #52]	; 0x34
 80021ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80021ae:	4b84      	ldr	r3, [pc, #528]	; (80023c0 <HAL_OSPI_MspInit+0x298>)
 80021b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021b4:	4a82      	ldr	r2, [pc, #520]	; (80023c0 <HAL_OSPI_MspInit+0x298>)
 80021b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80021be:	4b80      	ldr	r3, [pc, #512]	; (80023c0 <HAL_OSPI_MspInit+0x298>)
 80021c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021c8:	633b      	str	r3, [r7, #48]	; 0x30
 80021ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021cc:	4b7c      	ldr	r3, [pc, #496]	; (80023c0 <HAL_OSPI_MspInit+0x298>)
 80021ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021d2:	4a7b      	ldr	r2, [pc, #492]	; (80023c0 <HAL_OSPI_MspInit+0x298>)
 80021d4:	f043 0310 	orr.w	r3, r3, #16
 80021d8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80021dc:	4b78      	ldr	r3, [pc, #480]	; (80023c0 <HAL_OSPI_MspInit+0x298>)
 80021de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021e2:	f003 0310 	and.w	r3, r3, #16
 80021e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80021e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021ea:	4b75      	ldr	r3, [pc, #468]	; (80023c0 <HAL_OSPI_MspInit+0x298>)
 80021ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021f0:	4a73      	ldr	r2, [pc, #460]	; (80023c0 <HAL_OSPI_MspInit+0x298>)
 80021f2:	f043 0308 	orr.w	r3, r3, #8
 80021f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80021fa:	4b71      	ldr	r3, [pc, #452]	; (80023c0 <HAL_OSPI_MspInit+0x298>)
 80021fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002200:	f003 0308 	and.w	r3, r3, #8
 8002204:	62bb      	str	r3, [r7, #40]	; 0x28
 8002206:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002208:	4b6d      	ldr	r3, [pc, #436]	; (80023c0 <HAL_OSPI_MspInit+0x298>)
 800220a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800220e:	4a6c      	ldr	r2, [pc, #432]	; (80023c0 <HAL_OSPI_MspInit+0x298>)
 8002210:	f043 0320 	orr.w	r3, r3, #32
 8002214:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002218:	4b69      	ldr	r3, [pc, #420]	; (80023c0 <HAL_OSPI_MspInit+0x298>)
 800221a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800221e:	f003 0320 	and.w	r3, r3, #32
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
 8002224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002226:	4b66      	ldr	r3, [pc, #408]	; (80023c0 <HAL_OSPI_MspInit+0x298>)
 8002228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800222c:	4a64      	ldr	r2, [pc, #400]	; (80023c0 <HAL_OSPI_MspInit+0x298>)
 800222e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002232:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002236:	4b62      	ldr	r3, [pc, #392]	; (80023c0 <HAL_OSPI_MspInit+0x298>)
 8002238:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800223c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002240:	623b      	str	r3, [r7, #32]
 8002242:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002244:	4b5e      	ldr	r3, [pc, #376]	; (80023c0 <HAL_OSPI_MspInit+0x298>)
 8002246:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800224a:	4a5d      	ldr	r2, [pc, #372]	; (80023c0 <HAL_OSPI_MspInit+0x298>)
 800224c:	f043 0304 	orr.w	r3, r3, #4
 8002250:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002254:	4b5a      	ldr	r3, [pc, #360]	; (80023c0 <HAL_OSPI_MspInit+0x298>)
 8002256:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800225a:	f003 0304 	and.w	r3, r3, #4
 800225e:	61fb      	str	r3, [r7, #28]
 8002260:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002262:	4b57      	ldr	r3, [pc, #348]	; (80023c0 <HAL_OSPI_MspInit+0x298>)
 8002264:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002268:	4a55      	ldr	r2, [pc, #340]	; (80023c0 <HAL_OSPI_MspInit+0x298>)
 800226a:	f043 0302 	orr.w	r3, r3, #2
 800226e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002272:	4b53      	ldr	r3, [pc, #332]	; (80023c0 <HAL_OSPI_MspInit+0x298>)
 8002274:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002278:	f003 0202 	and.w	r2, r3, #2
 800227c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002280:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002284:	601a      	str	r2, [r3, #0]
 8002286:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800228a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800228e:	681b      	ldr	r3, [r3, #0]
    PF6     ------> OCTOSPIM_P1_IO3
    PC3     ------> OCTOSPIM_P1_IO6
    PB10     ------> OCTOSPIM_P1_CLK
    PB11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = OCTOSPI_R_IO5_Pin;
 8002290:	2301      	movs	r3, #1
 8002292:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002296:	2302      	movs	r3, #2
 8002298:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229c:	2300      	movs	r3, #0
 800229e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a2:	2303      	movs	r3, #3
 80022a4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80022a8:	2303      	movs	r3, #3
 80022aa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_R_IO5_GPIO_Port, &GPIO_InitStruct);
 80022ae:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80022b2:	4619      	mov	r1, r3
 80022b4:	4843      	ldr	r0, [pc, #268]	; (80023c4 <HAL_OSPI_MspInit+0x29c>)
 80022b6:	f000 ff01 	bl	80030bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_DQS_Pin;
 80022ba:	2308      	movs	r3, #8
 80022bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c0:	2302      	movs	r3, #2
 80022c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022cc:	2303      	movs	r3, #3
 80022ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80022d2:	2303      	movs	r3, #3
 80022d4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_R_DQS_GPIO_Port, &GPIO_InitStruct);
 80022d8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80022dc:	4619      	mov	r1, r3
 80022de:	483a      	ldr	r0, [pc, #232]	; (80023c8 <HAL_OSPI_MspInit+0x2a0>)
 80022e0:	f000 feec 	bl	80030bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO7_Pin;
 80022e4:	2380      	movs	r3, #128	; 0x80
 80022e6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ea:	2302      	movs	r3, #2
 80022ec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f0:	2300      	movs	r3, #0
 80022f2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f6:	2303      	movs	r3, #3
 80022f8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80022fc:	230a      	movs	r3, #10
 80022fe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_R_IO7_GPIO_Port, &GPIO_InitStruct);
 8002302:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002306:	4619      	mov	r1, r3
 8002308:	4830      	ldr	r0, [pc, #192]	; (80023cc <HAL_OSPI_MspInit+0x2a4>)
 800230a:	f000 fed7 	bl	80030bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO0_Pin|OCTOSPI_R_IO2_Pin|OCTOSPI_R_IO1_Pin|OCTOSPI_R_IO3_Pin;
 800230e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002312:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231c:	2300      	movs	r3, #0
 800231e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002322:	2303      	movs	r3, #3
 8002324:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8002328:	230a      	movs	r3, #10
 800232a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800232e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002332:	4619      	mov	r1, r3
 8002334:	4826      	ldr	r0, [pc, #152]	; (80023d0 <HAL_OSPI_MspInit+0x2a8>)
 8002336:	f000 fec1 	bl	80030bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO4_Pin;
 800233a:	2304      	movs	r3, #4
 800233c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002340:	2302      	movs	r3, #2
 8002342:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002346:	2300      	movs	r3, #0
 8002348:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234c:	2303      	movs	r3, #3
 800234e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8002352:	2303      	movs	r3, #3
 8002354:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_R_IO4_GPIO_Port, &GPIO_InitStruct);
 8002358:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800235c:	4619      	mov	r1, r3
 800235e:	481d      	ldr	r0, [pc, #116]	; (80023d4 <HAL_OSPI_MspInit+0x2ac>)
 8002360:	f000 feac 	bl	80030bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO6_Pin;
 8002364:	2308      	movs	r3, #8
 8002366:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236a:	2302      	movs	r3, #2
 800236c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002370:	2300      	movs	r3, #0
 8002372:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002376:	2303      	movs	r3, #3
 8002378:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800237c:	230a      	movs	r3, #10
 800237e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_R_IO6_GPIO_Port, &GPIO_InitStruct);
 8002382:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002386:	4619      	mov	r1, r3
 8002388:	4813      	ldr	r0, [pc, #76]	; (80023d8 <HAL_OSPI_MspInit+0x2b0>)
 800238a:	f000 fe97 	bl	80030bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_CLK_P_Pin|OCTOSPI_R_NCS_Pin;
 800238e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002392:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002396:	2302      	movs	r3, #2
 8002398:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239c:	2300      	movs	r3, #0
 800239e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a2:	2303      	movs	r3, #3
 80023a4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80023a8:	230a      	movs	r3, #10
 80023aa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ae:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80023b2:	4619      	mov	r1, r3
 80023b4:	4809      	ldr	r0, [pc, #36]	; (80023dc <HAL_OSPI_MspInit+0x2b4>)
 80023b6:	f000 fe81 	bl	80030bc <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 80023ba:	e0cb      	b.n	8002554 <HAL_OSPI_MspInit+0x42c>
 80023bc:	420d1400 	.word	0x420d1400
 80023c0:	46020c00 	.word	0x46020c00
 80023c4:	42022000 	.word	0x42022000
 80023c8:	42021000 	.word	0x42021000
 80023cc:	42020c00 	.word	0x42020c00
 80023d0:	42021400 	.word	0x42021400
 80023d4:	42021c00 	.word	0x42021c00
 80023d8:	42020800 	.word	0x42020800
 80023dc:	42020400 	.word	0x42020400
  else if(hospi->Instance==OCTOSPI2)
 80023e0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80023e4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a5c      	ldr	r2, [pc, #368]	; (8002560 <HAL_OSPI_MspInit+0x438>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	f040 80b0 	bne.w	8002554 <HAL_OSPI_MspInit+0x42c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80023f4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80023f8:	f04f 0300 	mov.w	r3, #0
 80023fc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8002400:	2300      	movs	r3, #0
 8002402:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002406:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800240a:	4618      	mov	r0, r3
 800240c:	f003 ff72 	bl	80062f4 <HAL_RCCEx_PeriphCLKConfig>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <HAL_OSPI_MspInit+0x2f2>
      Error_Handler();
 8002416:	f7ff fd43 	bl	8001ea0 <Error_Handler>
    __HAL_RCC_OSPI2_CLK_ENABLE();
 800241a:	4b52      	ldr	r3, [pc, #328]	; (8002564 <HAL_OSPI_MspInit+0x43c>)
 800241c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002420:	4a50      	ldr	r2, [pc, #320]	; (8002564 <HAL_OSPI_MspInit+0x43c>)
 8002422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002426:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800242a:	4b4e      	ldr	r3, [pc, #312]	; (8002564 <HAL_OSPI_MspInit+0x43c>)
 800242c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002430:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002434:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002438:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002442:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002446:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002448:	4b46      	ldr	r3, [pc, #280]	; (8002564 <HAL_OSPI_MspInit+0x43c>)
 800244a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800244e:	4a45      	ldr	r2, [pc, #276]	; (8002564 <HAL_OSPI_MspInit+0x43c>)
 8002450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002454:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002458:	4b42      	ldr	r3, [pc, #264]	; (8002564 <HAL_OSPI_MspInit+0x43c>)
 800245a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800245e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002462:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002466:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002470:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002474:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002476:	4b3b      	ldr	r3, [pc, #236]	; (8002564 <HAL_OSPI_MspInit+0x43c>)
 8002478:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800247c:	4a39      	ldr	r2, [pc, #228]	; (8002564 <HAL_OSPI_MspInit+0x43c>)
 800247e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002482:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002486:	4b37      	ldr	r3, [pc, #220]	; (8002564 <HAL_OSPI_MspInit+0x43c>)
 8002488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800248c:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8002490:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002494:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800249e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80024a2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80024a4:	4b2f      	ldr	r3, [pc, #188]	; (8002564 <HAL_OSPI_MspInit+0x43c>)
 80024a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024aa:	4a2e      	ldr	r2, [pc, #184]	; (8002564 <HAL_OSPI_MspInit+0x43c>)
 80024ac:	f043 0320 	orr.w	r3, r3, #32
 80024b0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80024b4:	4b2b      	ldr	r3, [pc, #172]	; (8002564 <HAL_OSPI_MspInit+0x43c>)
 80024b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024ba:	f003 0220 	and.w	r2, r3, #32
 80024be:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80024c2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80024cc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80024d0:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = OCTOSPI_F_NCS_Pin;
 80024d2:	2320      	movs	r3, #32
 80024d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d8:	2302      	movs	r3, #2
 80024da:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e4:	2303      	movs	r3, #3
 80024e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 80024ea:	2305      	movs	r3, #5
 80024ec:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_F_NCS_GPIO_Port, &GPIO_InitStruct);
 80024f0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80024f4:	4619      	mov	r1, r3
 80024f6:	481c      	ldr	r0, [pc, #112]	; (8002568 <HAL_OSPI_MspInit+0x440>)
 80024f8:	f000 fde0 	bl	80030bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCTOSPI_F_IO7_Pin|OCTOSPI_F_IO5_Pin|OCTOSPI_F_IO6_Pin|OCTOSPI_F_IO4_Pin;
 80024fc:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8002500:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002504:	2302      	movs	r3, #2
 8002506:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250a:	2300      	movs	r3, #0
 800250c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002510:	2303      	movs	r3, #3
 8002512:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8002516:	2305      	movs	r3, #5
 8002518:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800251c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002520:	4619      	mov	r1, r3
 8002522:	4812      	ldr	r0, [pc, #72]	; (800256c <HAL_OSPI_MspInit+0x444>)
 8002524:	f000 fdca 	bl	80030bc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCTOSPI_F_IO0_Pin|OCTOSPI_F_IO1_Pin|OCTOSPI_F_IO2_Pin|OCTOSPI_F_IO3_Pin
 8002528:	f241 031f 	movw	r3, #4127	; 0x101f
 800252c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002530:	2302      	movs	r3, #2
 8002532:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253c:	2303      	movs	r3, #3
 800253e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8002542:	2305      	movs	r3, #5
 8002544:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002548:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800254c:	4619      	mov	r1, r3
 800254e:	4808      	ldr	r0, [pc, #32]	; (8002570 <HAL_OSPI_MspInit+0x448>)
 8002550:	f000 fdb4 	bl	80030bc <HAL_GPIO_Init>
}
 8002554:	bf00      	nop
 8002556:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	420d2400 	.word	0x420d2400
 8002564:	46020c00 	.word	0x46020c00
 8002568:	42022000 	.word	0x42022000
 800256c:	42021c00 	.word	0x42021c00
 8002570:	42021400 	.word	0x42021400

08002574 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b0be      	sub	sp, #248	; 0xf8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800257c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800258c:	f107 0318 	add.w	r3, r7, #24
 8002590:	22c8      	movs	r2, #200	; 0xc8
 8002592:	2100      	movs	r1, #0
 8002594:	4618      	mov	r0, r3
 8002596:	f009 f8cd 	bl	800b734 <memset>
  if(hspi->Instance==SPI2)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a39      	ldr	r2, [pc, #228]	; (8002684 <HAL_SPI_MspInit+0x110>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d16b      	bne.n	800267c <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80025a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025a8:	f04f 0300 	mov.w	r3, #0
 80025ac:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 80025b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025b8:	f107 0318 	add.w	r3, r7, #24
 80025bc:	4618      	mov	r0, r3
 80025be:	f003 fe99 	bl	80062f4 <HAL_RCCEx_PeriphCLKConfig>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 80025c8:	f7ff fc6a 	bl	8001ea0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025cc:	4b2e      	ldr	r3, [pc, #184]	; (8002688 <HAL_SPI_MspInit+0x114>)
 80025ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80025d2:	4a2d      	ldr	r2, [pc, #180]	; (8002688 <HAL_SPI_MspInit+0x114>)
 80025d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025d8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80025dc:	4b2a      	ldr	r3, [pc, #168]	; (8002688 <HAL_SPI_MspInit+0x114>)
 80025de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80025e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025e6:	617b      	str	r3, [r7, #20]
 80025e8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025ea:	4b27      	ldr	r3, [pc, #156]	; (8002688 <HAL_SPI_MspInit+0x114>)
 80025ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025f0:	4a25      	ldr	r2, [pc, #148]	; (8002688 <HAL_SPI_MspInit+0x114>)
 80025f2:	f043 0308 	orr.w	r3, r3, #8
 80025f6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80025fa:	4b23      	ldr	r3, [pc, #140]	; (8002688 <HAL_SPI_MspInit+0x114>)
 80025fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002600:	f003 0308 	and.w	r3, r3, #8
 8002604:	613b      	str	r3, [r7, #16]
 8002606:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002608:	4b1f      	ldr	r3, [pc, #124]	; (8002688 <HAL_SPI_MspInit+0x114>)
 800260a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800260e:	4a1e      	ldr	r2, [pc, #120]	; (8002688 <HAL_SPI_MspInit+0x114>)
 8002610:	f043 0302 	orr.w	r3, r3, #2
 8002614:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002618:	4b1b      	ldr	r3, [pc, #108]	; (8002688 <HAL_SPI_MspInit+0x114>)
 800261a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	68fb      	ldr	r3, [r7, #12]
    PD4     ------> SPI2_MOSI
    PD3     ------> SPI2_MISO
    PD1     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = WRLS_SPI2_MOSI_Pin|WRLS_SPI2_MISO_Pin|WRLS_SPI2_SCK_Pin;
 8002626:	231a      	movs	r3, #26
 8002628:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262c:	2302      	movs	r3, #2
 800262e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002638:	2300      	movs	r3, #0
 800263a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800263e:	2305      	movs	r3, #5
 8002640:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002644:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002648:	4619      	mov	r1, r3
 800264a:	4810      	ldr	r0, [pc, #64]	; (800268c <HAL_SPI_MspInit+0x118>)
 800264c:	f000 fd36 	bl	80030bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WRLS_SPI2_NSS_Pin;
 8002650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002654:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002658:	2302      	movs	r3, #2
 800265a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002664:	2300      	movs	r3, #0
 8002666:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800266a:	2305      	movs	r3, #5
 800266c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(WRLS_SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8002670:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002674:	4619      	mov	r1, r3
 8002676:	4806      	ldr	r0, [pc, #24]	; (8002690 <HAL_SPI_MspInit+0x11c>)
 8002678:	f000 fd20 	bl	80030bc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800267c:	bf00      	nop
 800267e:	37f8      	adds	r7, #248	; 0xf8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40003800 	.word	0x40003800
 8002688:	46020c00 	.word	0x46020c00
 800268c:	42020c00 	.word	0x42020c00
 8002690:	42020400 	.word	0x42020400

08002694 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a0e      	ldr	r2, [pc, #56]	; (80026dc <HAL_TIM_PWM_MspInit+0x48>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d116      	bne.n	80026d4 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026a6:	4b0e      	ldr	r3, [pc, #56]	; (80026e0 <HAL_TIM_PWM_MspInit+0x4c>)
 80026a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026ac:	4a0c      	ldr	r2, [pc, #48]	; (80026e0 <HAL_TIM_PWM_MspInit+0x4c>)
 80026ae:	f043 0302 	orr.w	r3, r3, #2
 80026b2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80026b6:	4b0a      	ldr	r3, [pc, #40]	; (80026e0 <HAL_TIM_PWM_MspInit+0x4c>)
 80026b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	60fb      	str	r3, [r7, #12]
 80026c2:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026c4:	2200      	movs	r2, #0
 80026c6:	2100      	movs	r1, #0
 80026c8:	202e      	movs	r0, #46	; 0x2e
 80026ca:	f000 fc46 	bl	8002f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026ce:	202e      	movs	r0, #46	; 0x2e
 80026d0:	f000 fc5d 	bl	8002f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80026d4:	bf00      	nop
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40000400 	.word	0x40000400
 80026e0:	46020c00 	.word	0x46020c00

080026e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b088      	sub	sp, #32
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ec:	f107 030c 	add.w	r3, r7, #12
 80026f0:	2200      	movs	r2, #0
 80026f2:	601a      	str	r2, [r3, #0]
 80026f4:	605a      	str	r2, [r3, #4]
 80026f6:	609a      	str	r2, [r3, #8]
 80026f8:	60da      	str	r2, [r3, #12]
 80026fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a12      	ldr	r2, [pc, #72]	; (800274c <HAL_TIM_MspPostInit+0x68>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d11e      	bne.n	8002744 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002706:	4b12      	ldr	r3, [pc, #72]	; (8002750 <HAL_TIM_MspPostInit+0x6c>)
 8002708:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800270c:	4a10      	ldr	r2, [pc, #64]	; (8002750 <HAL_TIM_MspPostInit+0x6c>)
 800270e:	f043 0310 	orr.w	r3, r3, #16
 8002712:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002716:	4b0e      	ldr	r3, [pc, #56]	; (8002750 <HAL_TIM_MspPostInit+0x6c>)
 8002718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	60bb      	str	r3, [r7, #8]
 8002722:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE5     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002724:	2320      	movs	r3, #32
 8002726:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002728:	2302      	movs	r3, #2
 800272a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272c:	2300      	movs	r3, #0
 800272e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002730:	2300      	movs	r3, #0
 8002732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002734:	2302      	movs	r3, #2
 8002736:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002738:	f107 030c 	add.w	r3, r7, #12
 800273c:	4619      	mov	r1, r3
 800273e:	4805      	ldr	r0, [pc, #20]	; (8002754 <HAL_TIM_MspPostInit+0x70>)
 8002740:	f000 fcbc 	bl	80030bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002744:	bf00      	nop
 8002746:	3720      	adds	r7, #32
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	40000400 	.word	0x40000400
 8002750:	46020c00 	.word	0x46020c00
 8002754:	42021000 	.word	0x42021000

08002758 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b0be      	sub	sp, #248	; 0xf8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002760:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	605a      	str	r2, [r3, #4]
 800276a:	609a      	str	r2, [r3, #8]
 800276c:	60da      	str	r2, [r3, #12]
 800276e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002770:	f107 0318 	add.w	r3, r7, #24
 8002774:	22c8      	movs	r2, #200	; 0xc8
 8002776:	2100      	movs	r1, #0
 8002778:	4618      	mov	r0, r3
 800277a:	f008 ffdb 	bl	800b734 <memset>
  if(huart->Instance==UART4)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a4c      	ldr	r2, [pc, #304]	; (80028b4 <HAL_UART_MspInit+0x15c>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d146      	bne.n	8002816 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002788:	f04f 0208 	mov.w	r2, #8
 800278c:	f04f 0300 	mov.w	r3, #0
 8002790:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002794:	2300      	movs	r3, #0
 8002796:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002798:	f107 0318 	add.w	r3, r7, #24
 800279c:	4618      	mov	r0, r3
 800279e:	f003 fda9 	bl	80062f4 <HAL_RCCEx_PeriphCLKConfig>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80027a8:	f7ff fb7a 	bl	8001ea0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80027ac:	4b42      	ldr	r3, [pc, #264]	; (80028b8 <HAL_UART_MspInit+0x160>)
 80027ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027b2:	4a41      	ldr	r2, [pc, #260]	; (80028b8 <HAL_UART_MspInit+0x160>)
 80027b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80027b8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80027bc:	4b3e      	ldr	r3, [pc, #248]	; (80028b8 <HAL_UART_MspInit+0x160>)
 80027be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ca:	4b3b      	ldr	r3, [pc, #236]	; (80028b8 <HAL_UART_MspInit+0x160>)
 80027cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027d0:	4a39      	ldr	r2, [pc, #228]	; (80028b8 <HAL_UART_MspInit+0x160>)
 80027d2:	f043 0304 	orr.w	r3, r3, #4
 80027d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80027da:	4b37      	ldr	r3, [pc, #220]	; (80028b8 <HAL_UART_MspInit+0x160>)
 80027dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	613b      	str	r3, [r7, #16]
 80027e6:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = WRLS_UART4_RX_Pin|WRLS_UART4_TX_Pin;
 80027e8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80027ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f0:	2302      	movs	r3, #2
 80027f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fc:	2300      	movs	r3, #0
 80027fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002802:	2308      	movs	r3, #8
 8002804:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002808:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800280c:	4619      	mov	r1, r3
 800280e:	482b      	ldr	r0, [pc, #172]	; (80028bc <HAL_UART_MspInit+0x164>)
 8002810:	f000 fc54 	bl	80030bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002814:	e04a      	b.n	80028ac <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART1)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a29      	ldr	r2, [pc, #164]	; (80028c0 <HAL_UART_MspInit+0x168>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d145      	bne.n	80028ac <HAL_UART_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002820:	f04f 0201 	mov.w	r2, #1
 8002824:	f04f 0300 	mov.w	r3, #0
 8002828:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800282c:	2300      	movs	r3, #0
 800282e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002830:	f107 0318 	add.w	r3, r7, #24
 8002834:	4618      	mov	r0, r3
 8002836:	f003 fd5d 	bl	80062f4 <HAL_RCCEx_PeriphCLKConfig>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_UART_MspInit+0xec>
      Error_Handler();
 8002840:	f7ff fb2e 	bl	8001ea0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002844:	4b1c      	ldr	r3, [pc, #112]	; (80028b8 <HAL_UART_MspInit+0x160>)
 8002846:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800284a:	4a1b      	ldr	r2, [pc, #108]	; (80028b8 <HAL_UART_MspInit+0x160>)
 800284c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002850:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8002854:	4b18      	ldr	r3, [pc, #96]	; (80028b8 <HAL_UART_MspInit+0x160>)
 8002856:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800285a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002862:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <HAL_UART_MspInit+0x160>)
 8002864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002868:	4a13      	ldr	r2, [pc, #76]	; (80028b8 <HAL_UART_MspInit+0x160>)
 800286a:	f043 0301 	orr.w	r3, r3, #1
 800286e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002872:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <HAL_UART_MspInit+0x160>)
 8002874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8002880:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002884:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002888:	2302      	movs	r3, #2
 800288a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288e:	2300      	movs	r3, #0
 8002890:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002894:	2300      	movs	r3, #0
 8002896:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800289a:	2307      	movs	r3, #7
 800289c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028a0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80028a4:	4619      	mov	r1, r3
 80028a6:	4807      	ldr	r0, [pc, #28]	; (80028c4 <HAL_UART_MspInit+0x16c>)
 80028a8:	f000 fc08 	bl	80030bc <HAL_GPIO_Init>
}
 80028ac:	bf00      	nop
 80028ae:	37f8      	adds	r7, #248	; 0xf8
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	40004c00 	.word	0x40004c00
 80028b8:	46020c00 	.word	0x46020c00
 80028bc:	42020800 	.word	0x42020800
 80028c0:	40013800 	.word	0x40013800
 80028c4:	42020000 	.word	0x42020000

080028c8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b0be      	sub	sp, #248	; 0xf8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80028d4:	2200      	movs	r2, #0
 80028d6:	601a      	str	r2, [r3, #0]
 80028d8:	605a      	str	r2, [r3, #4]
 80028da:	609a      	str	r2, [r3, #8]
 80028dc:	60da      	str	r2, [r3, #12]
 80028de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028e0:	f107 0318 	add.w	r3, r7, #24
 80028e4:	22c8      	movs	r2, #200	; 0xc8
 80028e6:	2100      	movs	r1, #0
 80028e8:	4618      	mov	r0, r3
 80028ea:	f008 ff23 	bl	800b734 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a38      	ldr	r2, [pc, #224]	; (80029d4 <HAL_PCD_MspInit+0x10c>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d169      	bne.n	80029cc <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80028f8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8002904:	2300      	movs	r3, #0
 8002906:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800290a:	f107 0318 	add.w	r3, r7, #24
 800290e:	4618      	mov	r0, r3
 8002910:	f003 fcf0 	bl	80062f4 <HAL_RCCEx_PeriphCLKConfig>
 8002914:	4603      	mov	r3, r0
 8002916:	2b00      	cmp	r3, #0
 8002918:	d001      	beq.n	800291e <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 800291a:	f7ff fac1 	bl	8001ea0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800291e:	4b2e      	ldr	r3, [pc, #184]	; (80029d8 <HAL_PCD_MspInit+0x110>)
 8002920:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002924:	4a2c      	ldr	r2, [pc, #176]	; (80029d8 <HAL_PCD_MspInit+0x110>)
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800292e:	4b2a      	ldr	r3, [pc, #168]	; (80029d8 <HAL_PCD_MspInit+0x110>)
 8002930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	617b      	str	r3, [r7, #20]
 800293a:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_C_P_Pin|USB_C_PA11_Pin;
 800293c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002940:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002944:	2302      	movs	r3, #2
 8002946:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800294a:	2300      	movs	r3, #0
 800294c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002950:	2300      	movs	r3, #0
 8002952:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002956:	230a      	movs	r3, #10
 8002958:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800295c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002960:	4619      	mov	r1, r3
 8002962:	481e      	ldr	r0, [pc, #120]	; (80029dc <HAL_PCD_MspInit+0x114>)
 8002964:	f000 fbaa 	bl	80030bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002968:	4b1b      	ldr	r3, [pc, #108]	; (80029d8 <HAL_PCD_MspInit+0x110>)
 800296a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800296e:	4a1a      	ldr	r2, [pc, #104]	; (80029d8 <HAL_PCD_MspInit+0x110>)
 8002970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002974:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002978:	4b17      	ldr	r3, [pc, #92]	; (80029d8 <HAL_PCD_MspInit+0x110>)
 800297a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800297e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002982:	613b      	str	r3, [r7, #16]
 8002984:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002986:	4b14      	ldr	r3, [pc, #80]	; (80029d8 <HAL_PCD_MspInit+0x110>)
 8002988:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800298c:	f003 0304 	and.w	r3, r3, #4
 8002990:	2b00      	cmp	r3, #0
 8002992:	d119      	bne.n	80029c8 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002994:	4b10      	ldr	r3, [pc, #64]	; (80029d8 <HAL_PCD_MspInit+0x110>)
 8002996:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800299a:	4a0f      	ldr	r2, [pc, #60]	; (80029d8 <HAL_PCD_MspInit+0x110>)
 800299c:	f043 0304 	orr.w	r3, r3, #4
 80029a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80029a4:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <HAL_PCD_MspInit+0x110>)
 80029a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029aa:	f003 0304 	and.w	r3, r3, #4
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80029b2:	f002 f9d3 	bl	8004d5c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80029b6:	4b08      	ldr	r3, [pc, #32]	; (80029d8 <HAL_PCD_MspInit+0x110>)
 80029b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029bc:	4a06      	ldr	r2, [pc, #24]	; (80029d8 <HAL_PCD_MspInit+0x110>)
 80029be:	f023 0304 	bic.w	r3, r3, #4
 80029c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80029c6:	e001      	b.n	80029cc <HAL_PCD_MspInit+0x104>
      HAL_PWREx_EnableVddUSB();
 80029c8:	f002 f9c8 	bl	8004d5c <HAL_PWREx_EnableVddUSB>
}
 80029cc:	bf00      	nop
 80029ce:	37f8      	adds	r7, #248	; 0xf8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	42040000 	.word	0x42040000
 80029d8:	46020c00 	.word	0x46020c00
 80029dc:	42020000 	.word	0x42020000

080029e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029e4:	e7fe      	b.n	80029e4 <NMI_Handler+0x4>

080029e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029e6:	b480      	push	{r7}
 80029e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029ea:	e7fe      	b.n	80029ea <HardFault_Handler+0x4>

080029ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029f0:	e7fe      	b.n	80029f0 <MemManage_Handler+0x4>

080029f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029f2:	b480      	push	{r7}
 80029f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029f6:	e7fe      	b.n	80029f6 <BusFault_Handler+0x4>

080029f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029fc:	e7fe      	b.n	80029fc <UsageFault_Handler+0x4>

080029fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029fe:	b480      	push	{r7}
 8002a00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a02:	bf00      	nop
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a10:	bf00      	nop
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a1e:	bf00      	nop
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a2c:	f000 f976 	bl	8002d1c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a30:	bf00      	nop
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a38:	4802      	ldr	r0, [pc, #8]	; (8002a44 <TIM3_IRQHandler+0x10>)
 8002a3a:	f006 fc3b 	bl	80092b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	2000008c 	.word	0x2000008c

08002a48 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b086      	sub	sp, #24
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]
 8002a58:	e00a      	b.n	8002a70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a5a:	e000      	b.n	8002a5e <_read+0x16>
 8002a5c:	bf00      	nop
 8002a5e:	4601      	mov	r1, r0
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	1c5a      	adds	r2, r3, #1
 8002a64:	60ba      	str	r2, [r7, #8]
 8002a66:	b2ca      	uxtb	r2, r1
 8002a68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	617b      	str	r3, [r7, #20]
 8002a70:	697a      	ldr	r2, [r7, #20]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	dbf0      	blt.n	8002a5a <_read+0x12>
	}

return len;
 8002a78:	687b      	ldr	r3, [r7, #4]
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3718      	adds	r7, #24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}

08002a82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b086      	sub	sp, #24
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	60f8      	str	r0, [r7, #12]
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	e009      	b.n	8002aa8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	60ba      	str	r2, [r7, #8]
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	e000      	b.n	8002aa2 <_write+0x20>
 8002aa0:	bf00      	nop
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	dbf1      	blt.n	8002a94 <_write+0x12>
	}
	return len;
 8002ab0:	687b      	ldr	r3, [r7, #4]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3718      	adds	r7, #24
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <_close>:

int _close(int file)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
	return -1;
 8002ac2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	370c      	adds	r7, #12
 8002aca:	46bd      	mov	sp, r7
 8002acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad0:	4770      	bx	lr

08002ad2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ae2:	605a      	str	r2, [r3, #4]
	return 0;
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	370c      	adds	r7, #12
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr

08002af2 <_isatty>:

int _isatty(int file)
{
 8002af2:	b480      	push	{r7}
 8002af4:	b083      	sub	sp, #12
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
	return 1;
 8002afa:	2301      	movs	r3, #1
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
	return 0;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
	...

08002b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b2c:	4a14      	ldr	r2, [pc, #80]	; (8002b80 <_sbrk+0x5c>)
 8002b2e:	4b15      	ldr	r3, [pc, #84]	; (8002b84 <_sbrk+0x60>)
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b38:	4b13      	ldr	r3, [pc, #76]	; (8002b88 <_sbrk+0x64>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d102      	bne.n	8002b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b40:	4b11      	ldr	r3, [pc, #68]	; (8002b88 <_sbrk+0x64>)
 8002b42:	4a12      	ldr	r2, [pc, #72]	; (8002b8c <_sbrk+0x68>)
 8002b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b46:	4b10      	ldr	r3, [pc, #64]	; (8002b88 <_sbrk+0x64>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d207      	bcs.n	8002b64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b54:	f008 fdc4 	bl	800b6e0 <__errno>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	220c      	movs	r2, #12
 8002b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b62:	e009      	b.n	8002b78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b64:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <_sbrk+0x64>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b6a:	4b07      	ldr	r3, [pc, #28]	; (8002b88 <_sbrk+0x64>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4413      	add	r3, r2
 8002b72:	4a05      	ldr	r2, [pc, #20]	; (8002b88 <_sbrk+0x64>)
 8002b74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b76:	68fb      	ldr	r3, [r7, #12]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	200c0000 	.word	0x200c0000
 8002b84:	00000400 	.word	0x00000400
 8002b88:	200009a4 	.word	0x200009a4
 8002b8c:	200009e0 	.word	0x200009e0

08002b90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002b94:	4b18      	ldr	r3, [pc, #96]	; (8002bf8 <SystemInit+0x68>)
 8002b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9a:	4a17      	ldr	r2, [pc, #92]	; (8002bf8 <SystemInit+0x68>)
 8002b9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ba0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002ba4:	4b15      	ldr	r3, [pc, #84]	; (8002bfc <SystemInit+0x6c>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002baa:	4b14      	ldr	r3, [pc, #80]	; (8002bfc <SystemInit+0x6c>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002bb0:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <SystemInit+0x6c>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002bb6:	4b11      	ldr	r3, [pc, #68]	; (8002bfc <SystemInit+0x6c>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002bbc:	4b0f      	ldr	r3, [pc, #60]	; (8002bfc <SystemInit+0x6c>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a0e      	ldr	r2, [pc, #56]	; (8002bfc <SystemInit+0x6c>)
 8002bc2:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002bc6:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002bca:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	; (8002bfc <SystemInit+0x6c>)
 8002bce:	2200      	movs	r2, #0
 8002bd0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002bd2:	4b0a      	ldr	r3, [pc, #40]	; (8002bfc <SystemInit+0x6c>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a09      	ldr	r2, [pc, #36]	; (8002bfc <SystemInit+0x6c>)
 8002bd8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bdc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002bde:	4b07      	ldr	r3, [pc, #28]	; (8002bfc <SystemInit+0x6c>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002be4:	4b04      	ldr	r3, [pc, #16]	; (8002bf8 <SystemInit+0x68>)
 8002be6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002bea:	609a      	str	r2, [r3, #8]
  #endif
}
 8002bec:	bf00      	nop
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	e000ed00 	.word	0xe000ed00
 8002bfc:	46020c00 	.word	0x46020c00

08002c00 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002c00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c38 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002c04:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002c06:	e003      	b.n	8002c10 <LoopCopyDataInit>

08002c08 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002c08:	4b0c      	ldr	r3, [pc, #48]	; (8002c3c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002c0a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002c0c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002c0e:	3104      	adds	r1, #4

08002c10 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002c10:	480b      	ldr	r0, [pc, #44]	; (8002c40 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002c12:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002c14:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002c16:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002c18:	d3f6      	bcc.n	8002c08 <CopyDataInit>
	ldr	r2, =_sbss
 8002c1a:	4a0b      	ldr	r2, [pc, #44]	; (8002c48 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002c1c:	e002      	b.n	8002c24 <LoopFillZerobss>

08002c1e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002c1e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002c20:	f842 3b04 	str.w	r3, [r2], #4

08002c24 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002c24:	4b09      	ldr	r3, [pc, #36]	; (8002c4c <LoopForever+0x16>)
	cmp	r2, r3
 8002c26:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002c28:	d3f9      	bcc.n	8002c1e <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c2a:	f7ff ffb1 	bl	8002b90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c2e:	f008 fd5d 	bl	800b6ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c32:	f7fe fbd3 	bl	80013dc <main>

08002c36 <LoopForever>:

LoopForever:
    b LoopForever
 8002c36:	e7fe      	b.n	8002c36 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002c38:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8002c3c:	0800d7c8 	.word	0x0800d7c8
	ldr	r0, =_sdata
 8002c40:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002c44:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8002c48:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8002c4c:	200009e0 	.word	0x200009e0

08002c50 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c50:	e7fe      	b.n	8002c50 <ADC1_IRQHandler>
	...

08002c54 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c58:	4b11      	ldr	r3, [pc, #68]	; (8002ca0 <HAL_Init+0x4c>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a10      	ldr	r2, [pc, #64]	; (8002ca0 <HAL_Init+0x4c>)
 8002c5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c64:	2003      	movs	r0, #3
 8002c66:	f000 f96d 	bl	8002f44 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002c6a:	f003 f95f 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <HAL_Init+0x50>)
 8002c72:	6a1b      	ldr	r3, [r3, #32]
 8002c74:	f003 030f 	and.w	r3, r3, #15
 8002c78:	490b      	ldr	r1, [pc, #44]	; (8002ca8 <HAL_Init+0x54>)
 8002c7a:	5ccb      	ldrb	r3, [r1, r3]
 8002c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c80:	4a0a      	ldr	r2, [pc, #40]	; (8002cac <HAL_Init+0x58>)
 8002c82:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c84:	200f      	movs	r0, #15
 8002c86:	f000 f813 	bl	8002cb0 <HAL_InitTick>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e002      	b.n	8002c9a <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002c94:	f7ff f90a 	bl	8001eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	40022000 	.word	0x40022000
 8002ca4:	46020c00 	.word	0x46020c00
 8002ca8:	0800d5ec 	.word	0x0800d5ec
 8002cac:	20000000 	.word	0x20000000

08002cb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002cb8:	4b15      	ldr	r3, [pc, #84]	; (8002d10 <HAL_InitTick+0x60>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e021      	b.n	8002d08 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002cc4:	4b13      	ldr	r3, [pc, #76]	; (8002d14 <HAL_InitTick+0x64>)
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	4b11      	ldr	r3, [pc, #68]	; (8002d10 <HAL_InitTick+0x60>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	4619      	mov	r1, r3
 8002cce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 f965 	bl	8002faa <HAL_SYSTICK_Config>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e00e      	b.n	8002d08 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2b0f      	cmp	r3, #15
 8002cee:	d80a      	bhi.n	8002d06 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8002cf8:	f000 f92f 	bl	8002f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cfc:	4a06      	ldr	r2, [pc, #24]	; (8002d18 <HAL_InitTick+0x68>)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
 8002d04:	e000      	b.n	8002d08 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3708      	adds	r7, #8
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	20000008 	.word	0x20000008
 8002d14:	20000000 	.word	0x20000000
 8002d18:	20000004 	.word	0x20000004

08002d1c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d20:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <HAL_IncTick+0x20>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	461a      	mov	r2, r3
 8002d26:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <HAL_IncTick+0x24>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	4a04      	ldr	r2, [pc, #16]	; (8002d40 <HAL_IncTick+0x24>)
 8002d2e:	6013      	str	r3, [r2, #0]
}
 8002d30:	bf00      	nop
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	20000008 	.word	0x20000008
 8002d40:	200009a8 	.word	0x200009a8

08002d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return uwTick;
 8002d48:	4b03      	ldr	r3, [pc, #12]	; (8002d58 <HAL_GetTick+0x14>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	200009a8 	.word	0x200009a8

08002d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d64:	f7ff ffee 	bl	8002d44 <HAL_GetTick>
 8002d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d74:	d005      	beq.n	8002d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d76:	4b0a      	ldr	r3, [pc, #40]	; (8002da0 <HAL_Delay+0x44>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4413      	add	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d82:	bf00      	nop
 8002d84:	f7ff ffde 	bl	8002d44 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d8f7      	bhi.n	8002d84 <HAL_Delay+0x28>
  {
  }
}
 8002d94:	bf00      	nop
 8002d96:	bf00      	nop
 8002d98:	3710      	adds	r7, #16
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	20000008 	.word	0x20000008

08002da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002db4:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <__NVIC_SetPriorityGrouping+0x44>)
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dd6:	4a04      	ldr	r2, [pc, #16]	; (8002de8 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	60d3      	str	r3, [r2, #12]
}
 8002ddc:	bf00      	nop
 8002dde:	3714      	adds	r7, #20
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	e000ed00 	.word	0xe000ed00

08002dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dec:	b480      	push	{r7}
 8002dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002df0:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <__NVIC_GetPriorityGrouping+0x18>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	0a1b      	lsrs	r3, r3, #8
 8002df6:	f003 0307 	and.w	r3, r3, #7
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	db0b      	blt.n	8002e32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	f003 021f 	and.w	r2, r3, #31
 8002e20:	4907      	ldr	r1, [pc, #28]	; (8002e40 <__NVIC_EnableIRQ+0x38>)
 8002e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e26:	095b      	lsrs	r3, r3, #5
 8002e28:	2001      	movs	r0, #1
 8002e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	e000e100 	.word	0xe000e100

08002e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	6039      	str	r1, [r7, #0]
 8002e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	db0a      	blt.n	8002e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	b2da      	uxtb	r2, r3
 8002e5c:	490c      	ldr	r1, [pc, #48]	; (8002e90 <__NVIC_SetPriority+0x4c>)
 8002e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e62:	0112      	lsls	r2, r2, #4
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	440b      	add	r3, r1
 8002e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e6c:	e00a      	b.n	8002e84 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	b2da      	uxtb	r2, r3
 8002e72:	4908      	ldr	r1, [pc, #32]	; (8002e94 <__NVIC_SetPriority+0x50>)
 8002e74:	79fb      	ldrb	r3, [r7, #7]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	3b04      	subs	r3, #4
 8002e7c:	0112      	lsls	r2, r2, #4
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	440b      	add	r3, r1
 8002e82:	761a      	strb	r2, [r3, #24]
}
 8002e84:	bf00      	nop
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr
 8002e90:	e000e100 	.word	0xe000e100
 8002e94:	e000ed00 	.word	0xe000ed00

08002e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b089      	sub	sp, #36	; 0x24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	f1c3 0307 	rsb	r3, r3, #7
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	bf28      	it	cs
 8002eb6:	2304      	movcs	r3, #4
 8002eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	2b06      	cmp	r3, #6
 8002ec0:	d902      	bls.n	8002ec8 <NVIC_EncodePriority+0x30>
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	3b03      	subs	r3, #3
 8002ec6:	e000      	b.n	8002eca <NVIC_EncodePriority+0x32>
 8002ec8:	2300      	movs	r3, #0
 8002eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43da      	mvns	r2, r3
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	401a      	ands	r2, r3
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eea:	43d9      	mvns	r1, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef0:	4313      	orrs	r3, r2
         );
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3724      	adds	r7, #36	; 0x24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
	...

08002f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f10:	d301      	bcc.n	8002f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f12:	2301      	movs	r3, #1
 8002f14:	e00f      	b.n	8002f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f16:	4a0a      	ldr	r2, [pc, #40]	; (8002f40 <SysTick_Config+0x40>)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f1e:	210f      	movs	r1, #15
 8002f20:	f04f 30ff 	mov.w	r0, #4294967295
 8002f24:	f7ff ff8e 	bl	8002e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f28:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <SysTick_Config+0x40>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f2e:	4b04      	ldr	r3, [pc, #16]	; (8002f40 <SysTick_Config+0x40>)
 8002f30:	2207      	movs	r2, #7
 8002f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	e000e010 	.word	0xe000e010

08002f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff ff29 	bl	8002da4 <__NVIC_SetPriorityGrouping>
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b086      	sub	sp, #24
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	4603      	mov	r3, r0
 8002f62:	60b9      	str	r1, [r7, #8]
 8002f64:	607a      	str	r2, [r7, #4]
 8002f66:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f68:	f7ff ff40 	bl	8002dec <__NVIC_GetPriorityGrouping>
 8002f6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	68b9      	ldr	r1, [r7, #8]
 8002f72:	6978      	ldr	r0, [r7, #20]
 8002f74:	f7ff ff90 	bl	8002e98 <NVIC_EncodePriority>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff ff5f 	bl	8002e44 <__NVIC_SetPriority>
}
 8002f86:	bf00      	nop
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b082      	sub	sp, #8
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	4603      	mov	r3, r0
 8002f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f7ff ff33 	bl	8002e08 <__NVIC_EnableIRQ>
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b082      	sub	sp, #8
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7ff ffa4 	bl	8002f00 <SysTick_Config>
 8002fb8:	4603      	mov	r3, r0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b084      	sub	sp, #16
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8002fca:	f7ff febb 	bl	8002d44 <HAL_GetTick>
 8002fce:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e06b      	b.n	80030b2 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d008      	beq.n	8002ff8 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2220      	movs	r2, #32
 8002fea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e05c      	b.n	80030b2 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	695a      	ldr	r2, [r3, #20]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f042 0204 	orr.w	r2, r2, #4
 8003006:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2205      	movs	r2, #5
 800300c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003010:	e020      	b.n	8003054 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003012:	f7ff fe97 	bl	8002d44 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b05      	cmp	r3, #5
 800301e:	d919      	bls.n	8003054 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003024:	f043 0210 	orr.w	r2, r3, #16
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2203      	movs	r2, #3
 8003030:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003044:	2201      	movs	r2, #1
 8003046:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e02e      	b.n	80030b2 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0d7      	beq.n	8003012 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695a      	ldr	r2, [r3, #20]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f042 0202 	orr.w	r2, r2, #2
 8003070:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2204      	movs	r2, #4
 8003076:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8003082:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003094:	2b00      	cmp	r3, #0
 8003096:	d007      	beq.n	80030a8 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800309c:	2201      	movs	r2, #1
 800309e:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2200      	movs	r2, #0
 80030a6:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3710      	adds	r7, #16
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
	...

080030bc <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80030bc:	b480      	push	{r7}
 80030be:	b089      	sub	sp, #36	; 0x24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
 80030c4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80030ce:	e1ba      	b.n	8003446 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	2101      	movs	r1, #1
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	fa01 f303 	lsl.w	r3, r1, r3
 80030dc:	4013      	ands	r3, r2
 80030de:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 81aa 	beq.w	8003440 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a55      	ldr	r2, [pc, #340]	; (8003244 <HAL_GPIO_Init+0x188>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d15d      	bne.n	80031b0 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80030fa:	2201      	movs	r2, #1
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003102:	43db      	mvns	r3, r3
 8003104:	69fa      	ldr	r2, [r7, #28]
 8003106:	4013      	ands	r3, r2
 8003108:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f003 0201 	and.w	r2, r3, #1
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	69fa      	ldr	r2, [r7, #28]
 800311a:	4313      	orrs	r3, r2
 800311c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69fa      	ldr	r2, [r7, #28]
 8003122:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003124:	4a48      	ldr	r2, [pc, #288]	; (8003248 <HAL_GPIO_Init+0x18c>)
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800312c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800312e:	4a46      	ldr	r2, [pc, #280]	; (8003248 <HAL_GPIO_Init+0x18c>)
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	4413      	add	r3, r2
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	08da      	lsrs	r2, r3, #3
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	3208      	adds	r2, #8
 8003142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003146:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	220f      	movs	r2, #15
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	43db      	mvns	r3, r3
 8003158:	69fa      	ldr	r2, [r7, #28]
 800315a:	4013      	ands	r3, r2
 800315c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	220b      	movs	r2, #11
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	69fa      	ldr	r2, [r7, #28]
 800316e:	4313      	orrs	r3, r2
 8003170:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	08da      	lsrs	r2, r3, #3
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	3208      	adds	r2, #8
 800317a:	69f9      	ldr	r1, [r7, #28]
 800317c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	2203      	movs	r2, #3
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	69fa      	ldr	r2, [r7, #28]
 8003194:	4013      	ands	r3, r2
 8003196:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	2202      	movs	r2, #2
 800319e:	fa02 f303 	lsl.w	r3, r2, r3
 80031a2:	69fa      	ldr	r2, [r7, #28]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	69fa      	ldr	r2, [r7, #28]
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	e067      	b.n	8003280 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d003      	beq.n	80031c0 <HAL_GPIO_Init+0x104>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	2b12      	cmp	r3, #18
 80031be:	d145      	bne.n	800324c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	08da      	lsrs	r2, r3, #3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	3208      	adds	r2, #8
 80031c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031cc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	220f      	movs	r2, #15
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	43db      	mvns	r3, r3
 80031de:	69fa      	ldr	r2, [r7, #28]
 80031e0:	4013      	ands	r3, r2
 80031e2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	f003 020f 	and.w	r2, r3, #15
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	fa02 f303 	lsl.w	r3, r2, r3
 80031f8:	69fa      	ldr	r2, [r7, #28]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	08da      	lsrs	r2, r3, #3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	3208      	adds	r2, #8
 8003206:	69f9      	ldr	r1, [r7, #28]
 8003208:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	2203      	movs	r2, #3
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	43db      	mvns	r3, r3
 800321e:	69fa      	ldr	r2, [r7, #28]
 8003220:	4013      	ands	r3, r2
 8003222:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f003 0203 	and.w	r2, r3, #3
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	69fa      	ldr	r2, [r7, #28]
 8003236:	4313      	orrs	r3, r2
 8003238:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	69fa      	ldr	r2, [r7, #28]
 800323e:	601a      	str	r2, [r3, #0]
 8003240:	e01e      	b.n	8003280 <HAL_GPIO_Init+0x1c4>
 8003242:	bf00      	nop
 8003244:	46020000 	.word	0x46020000
 8003248:	0800d644 	.word	0x0800d644
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	2203      	movs	r2, #3
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	43db      	mvns	r3, r3
 800325e:	69fa      	ldr	r2, [r7, #28]
 8003260:	4013      	ands	r3, r2
 8003262:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	f003 0203 	and.w	r2, r3, #3
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	69fa      	ldr	r2, [r7, #28]
 8003276:	4313      	orrs	r3, r2
 8003278:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	69fa      	ldr	r2, [r7, #28]
 800327e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d00b      	beq.n	80032a0 <HAL_GPIO_Init+0x1e4>
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	2b02      	cmp	r3, #2
 800328e:	d007      	beq.n	80032a0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003294:	2b11      	cmp	r3, #17
 8003296:	d003      	beq.n	80032a0 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	2b12      	cmp	r3, #18
 800329e:	d130      	bne.n	8003302 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	2203      	movs	r2, #3
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	43db      	mvns	r3, r3
 80032b2:	69fa      	ldr	r2, [r7, #28]
 80032b4:	4013      	ands	r3, r2
 80032b6:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	69fa      	ldr	r2, [r7, #28]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	69fa      	ldr	r2, [r7, #28]
 80032ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80032d6:	2201      	movs	r2, #1
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	fa02 f303 	lsl.w	r3, r2, r3
 80032de:	43db      	mvns	r3, r3
 80032e0:	69fa      	ldr	r2, [r7, #28]
 80032e2:	4013      	ands	r3, r2
 80032e4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	091b      	lsrs	r3, r3, #4
 80032ec:	f003 0201 	and.w	r2, r3, #1
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	fa02 f303 	lsl.w	r3, r2, r3
 80032f6:	69fa      	ldr	r2, [r7, #28]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	69fa      	ldr	r2, [r7, #28]
 8003300:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b03      	cmp	r3, #3
 8003308:	d017      	beq.n	800333a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	2203      	movs	r2, #3
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	43db      	mvns	r3, r3
 800331c:	69fa      	ldr	r2, [r7, #28]
 800331e:	4013      	ands	r3, r2
 8003320:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	689a      	ldr	r2, [r3, #8]
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	69fa      	ldr	r2, [r7, #28]
 8003330:	4313      	orrs	r3, r2
 8003332:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	69fa      	ldr	r2, [r7, #28]
 8003338:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d07c      	beq.n	8003440 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003346:	4a47      	ldr	r2, [pc, #284]	; (8003464 <HAL_GPIO_Init+0x3a8>)
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	089b      	lsrs	r3, r3, #2
 800334c:	3318      	adds	r3, #24
 800334e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003352:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f003 0303 	and.w	r3, r3, #3
 800335a:	00db      	lsls	r3, r3, #3
 800335c:	220f      	movs	r2, #15
 800335e:	fa02 f303 	lsl.w	r3, r2, r3
 8003362:	43db      	mvns	r3, r3
 8003364:	69fa      	ldr	r2, [r7, #28]
 8003366:	4013      	ands	r3, r2
 8003368:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	0a9a      	lsrs	r2, r3, #10
 800336e:	4b3e      	ldr	r3, [pc, #248]	; (8003468 <HAL_GPIO_Init+0x3ac>)
 8003370:	4013      	ands	r3, r2
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	f002 0203 	and.w	r2, r2, #3
 8003378:	00d2      	lsls	r2, r2, #3
 800337a:	4093      	lsls	r3, r2
 800337c:	69fa      	ldr	r2, [r7, #28]
 800337e:	4313      	orrs	r3, r2
 8003380:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003382:	4938      	ldr	r1, [pc, #224]	; (8003464 <HAL_GPIO_Init+0x3a8>)
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	089b      	lsrs	r3, r3, #2
 8003388:	3318      	adds	r3, #24
 800338a:	69fa      	ldr	r2, [r7, #28]
 800338c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003390:	4b34      	ldr	r3, [pc, #208]	; (8003464 <HAL_GPIO_Init+0x3a8>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	43db      	mvns	r3, r3
 800339a:	69fa      	ldr	r2, [r7, #28]
 800339c:	4013      	ands	r3, r2
 800339e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d003      	beq.n	80033b4 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80033ac:	69fa      	ldr	r2, [r7, #28]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80033b4:	4a2b      	ldr	r2, [pc, #172]	; (8003464 <HAL_GPIO_Init+0x3a8>)
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80033ba:	4b2a      	ldr	r3, [pc, #168]	; (8003464 <HAL_GPIO_Init+0x3a8>)
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	43db      	mvns	r3, r3
 80033c4:	69fa      	ldr	r2, [r7, #28]
 80033c6:	4013      	ands	r3, r2
 80033c8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d003      	beq.n	80033de <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80033d6:	69fa      	ldr	r2, [r7, #28]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	4313      	orrs	r3, r2
 80033dc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80033de:	4a21      	ldr	r2, [pc, #132]	; (8003464 <HAL_GPIO_Init+0x3a8>)
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80033e4:	4b1f      	ldr	r3, [pc, #124]	; (8003464 <HAL_GPIO_Init+0x3a8>)
 80033e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033ea:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	43db      	mvns	r3, r3
 80033f0:	69fa      	ldr	r2, [r7, #28]
 80033f2:	4013      	ands	r3, r2
 80033f4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8003402:	69fa      	ldr	r2, [r7, #28]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	4313      	orrs	r3, r2
 8003408:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800340a:	4a16      	ldr	r2, [pc, #88]	; (8003464 <HAL_GPIO_Init+0x3a8>)
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8003412:	4b14      	ldr	r3, [pc, #80]	; (8003464 <HAL_GPIO_Init+0x3a8>)
 8003414:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003418:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	43db      	mvns	r3, r3
 800341e:	69fa      	ldr	r2, [r7, #28]
 8003420:	4013      	ands	r3, r2
 8003422:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8003430:	69fa      	ldr	r2, [r7, #28]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4313      	orrs	r3, r2
 8003436:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003438:	4a0a      	ldr	r2, [pc, #40]	; (8003464 <HAL_GPIO_Init+0x3a8>)
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	3301      	adds	r3, #1
 8003444:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	fa22 f303 	lsr.w	r3, r2, r3
 8003450:	2b00      	cmp	r3, #0
 8003452:	f47f ae3d 	bne.w	80030d0 <HAL_GPIO_Init+0x14>
  }
}
 8003456:	bf00      	nop
 8003458:	bf00      	nop
 800345a:	3724      	adds	r7, #36	; 0x24
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	46022000 	.word	0x46022000
 8003468:	002f7f7f 	.word	0x002f7f7f

0800346c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	460b      	mov	r3, r1
 8003476:	807b      	strh	r3, [r7, #2]
 8003478:	4613      	mov	r3, r2
 800347a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800347c:	787b      	ldrb	r3, [r7, #1]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003482:	887a      	ldrh	r2, [r7, #2]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003488:	e002      	b.n	8003490 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800348a:	887a      	ldrh	r2, [r7, #2]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d101      	bne.n	80034ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e081      	b.n	80035b2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d106      	bne.n	80034c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80034c2:	6878      	ldr	r0, [r7, #4]
 80034c4:	f7fe fd76 	bl	8001fb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2224      	movs	r2, #36	; 0x24
 80034cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0201 	bic.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d107      	bne.n	8003516 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003512:	609a      	str	r2, [r3, #8]
 8003514:	e006      	b.n	8003524 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003522:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	2b02      	cmp	r3, #2
 800352a:	d104      	bne.n	8003536 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003534:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6812      	ldr	r2, [r2, #0]
 8003540:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003544:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003548:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	68da      	ldr	r2, [r3, #12]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003558:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691a      	ldr	r2, [r3, #16]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	69d9      	ldr	r1, [r3, #28]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a1a      	ldr	r2, [r3, #32]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0201 	orr.w	r2, r2, #1
 8003592:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2220      	movs	r2, #32
 800359e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
 80035c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b20      	cmp	r3, #32
 80035ce:	d138      	bne.n	8003642 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d101      	bne.n	80035de <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80035da:	2302      	movs	r3, #2
 80035dc:	e032      	b.n	8003644 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2224      	movs	r2, #36	; 0x24
 80035ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f022 0201 	bic.w	r2, r2, #1
 80035fc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800360c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6819      	ldr	r1, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f042 0201 	orr.w	r2, r2, #1
 800362c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2220      	movs	r2, #32
 8003632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	e000      	b.n	8003644 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003642:	2302      	movs	r3, #2
  }
}
 8003644:	4618      	mov	r0, r3
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b20      	cmp	r3, #32
 8003664:	d139      	bne.n	80036da <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800366c:	2b01      	cmp	r3, #1
 800366e:	d101      	bne.n	8003674 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003670:	2302      	movs	r3, #2
 8003672:	e033      	b.n	80036dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2224      	movs	r2, #36	; 0x24
 8003680:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f022 0201 	bic.w	r2, r2, #1
 8003692:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036a2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	021b      	lsls	r3, r3, #8
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f042 0201 	orr.w	r2, r2, #1
 80036c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	e000      	b.n	80036dc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80036da:	2302      	movs	r3, #2
  }
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3714      	adds	r7, #20
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036f0:	2300      	movs	r3, #0
 80036f2:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d102      	bne.n	8003700 <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	73fb      	strb	r3, [r7, #15]
 80036fe:	e141      	b.n	8003984 <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4618      	mov	r0, r3
 8003706:	f000 f947 	bl	8003998 <MDF_GetHandleNumberFromInstance>
 800370a:	4603      	mov	r3, r0
 800370c:	4a86      	ldr	r2, [pc, #536]	; (8003928 <HAL_MDF_Init+0x240>)
 800370e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d002      	beq.n	800371c <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	73fb      	strb	r3, [r7, #15]
 800371a:	e133      	b.n	8003984 <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f7fe fbdf 	bl	8001ee0 <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8003722:	4b82      	ldr	r3, [pc, #520]	; (800392c <HAL_MDF_Init+0x244>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d11d      	bne.n	8003766 <HAL_MDF_Init+0x7e>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a80      	ldr	r2, [pc, #512]	; (8003930 <HAL_MDF_Init+0x248>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d023      	beq.n	800377c <HAL_MDF_Init+0x94>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a7e      	ldr	r2, [pc, #504]	; (8003934 <HAL_MDF_Init+0x24c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d01e      	beq.n	800377c <HAL_MDF_Init+0x94>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a7d      	ldr	r2, [pc, #500]	; (8003938 <HAL_MDF_Init+0x250>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d019      	beq.n	800377c <HAL_MDF_Init+0x94>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a7b      	ldr	r2, [pc, #492]	; (800393c <HAL_MDF_Init+0x254>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d014      	beq.n	800377c <HAL_MDF_Init+0x94>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a7a      	ldr	r2, [pc, #488]	; (8003940 <HAL_MDF_Init+0x258>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d00f      	beq.n	800377c <HAL_MDF_Init+0x94>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a78      	ldr	r2, [pc, #480]	; (8003944 <HAL_MDF_Init+0x25c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d00a      	beq.n	800377c <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8003766:	4b78      	ldr	r3, [pc, #480]	; (8003948 <HAL_MDF_Init+0x260>)
 8003768:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 800376a:	2b00      	cmp	r3, #0
 800376c:	f040 8090 	bne.w	8003890 <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a75      	ldr	r2, [pc, #468]	; (800394c <HAL_MDF_Init+0x264>)
 8003776:	4293      	cmp	r3, r2
 8003778:	f040 808a 	bne.w	8003890 <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a72      	ldr	r2, [pc, #456]	; (800394c <HAL_MDF_Init+0x264>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d101      	bne.n	800378a <HAL_MDF_Init+0xa2>
 8003786:	4b72      	ldr	r3, [pc, #456]	; (8003950 <HAL_MDF_Init+0x268>)
 8003788:	e000      	b.n	800378c <HAL_MDF_Init+0xa4>
 800378a:	4b72      	ldr	r3, [pc, #456]	; (8003954 <HAL_MDF_Init+0x26c>)
 800378c:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	da02      	bge.n	800379c <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	73fb      	strb	r3, [r7, #15]
 800379a:	e079      	b.n	8003890 <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a63      	ldr	r2, [pc, #396]	; (8003930 <HAL_MDF_Init+0x248>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d018      	beq.n	80037d8 <HAL_MDF_Init+0xf0>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a62      	ldr	r2, [pc, #392]	; (8003934 <HAL_MDF_Init+0x24c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d013      	beq.n	80037d8 <HAL_MDF_Init+0xf0>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a60      	ldr	r2, [pc, #384]	; (8003938 <HAL_MDF_Init+0x250>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d00e      	beq.n	80037d8 <HAL_MDF_Init+0xf0>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a5f      	ldr	r2, [pc, #380]	; (800393c <HAL_MDF_Init+0x254>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d009      	beq.n	80037d8 <HAL_MDF_Init+0xf0>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a5d      	ldr	r2, [pc, #372]	; (8003940 <HAL_MDF_Init+0x258>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d004      	beq.n	80037d8 <HAL_MDF_Init+0xf0>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a5c      	ldr	r2, [pc, #368]	; (8003944 <HAL_MDF_Init+0x25c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d10d      	bne.n	80037f4 <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	011b      	lsls	r3, r3, #4
 80037ee:	431a      	orrs	r2, r3
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2200      	movs	r2, #0
 80037f8:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	3b01      	subs	r3, #1
 8003804:	061b      	lsls	r3, r3, #24
 8003806:	431a      	orrs	r2, r3
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	7b1b      	ldrb	r3, [r3, #12]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d137      	bne.n	8003884 <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	685a      	ldr	r2, [r3, #4]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	3b01      	subs	r3, #1
 800381e:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8003824:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
 800382c:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 800382e:	431a      	orrs	r2, r3
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	7e1b      	ldrb	r3, [r3, #24]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d123      	bne.n	8003884 <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a3b      	ldr	r2, [pc, #236]	; (8003930 <HAL_MDF_Init+0x248>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d012      	beq.n	800386c <HAL_MDF_Init+0x184>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a3a      	ldr	r2, [pc, #232]	; (8003934 <HAL_MDF_Init+0x24c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d00d      	beq.n	800386c <HAL_MDF_Init+0x184>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a38      	ldr	r2, [pc, #224]	; (8003938 <HAL_MDF_Init+0x250>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d008      	beq.n	800386c <HAL_MDF_Init+0x184>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a37      	ldr	r2, [pc, #220]	; (800393c <HAL_MDF_Init+0x254>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d003      	beq.n	800386c <HAL_MDF_Init+0x184>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a35      	ldr	r2, [pc, #212]	; (8003940 <HAL_MDF_Init+0x258>)
 800386a:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	685a      	ldr	r2, [r3, #4]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8003878:	430b      	orrs	r3, r1
 800387a:	4313      	orrs	r3, r2
 800387c:	f043 0210 	orr.w	r2, r3, #16
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f043 0201 	orr.w	r2, r3, #1
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
 8003890:	7bfb      	ldrb	r3, [r7, #15]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d128      	bne.n	80038e8 <HAL_MDF_Init+0x200>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800389c:	2b01      	cmp	r3, #1
 800389e:	d123      	bne.n	80038e8 <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	da02      	bge.n	80038b0 <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	73fb      	strb	r3, [r7, #15]
 80038ae:	e01b      	b.n	80038e8 <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6819      	ldr	r1, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 80038c8:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ce:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 0201 	orr.w	r2, r2, #1
 80038e6:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d14a      	bne.n	8003984 <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685a      	ldr	r2, [r3, #4]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 021f 	bic.w	r2, r2, #31
 80038fc:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6859      	ldr	r1, [r3, #4]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a0d      	ldr	r2, [pc, #52]	; (800394c <HAL_MDF_Init+0x264>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d11e      	bne.n	8003958 <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
 800391a:	4b0b      	ldr	r3, [pc, #44]	; (8003948 <HAL_MDF_Init+0x260>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	3301      	adds	r3, #1
 8003920:	4a09      	ldr	r2, [pc, #36]	; (8003948 <HAL_MDF_Init+0x260>)
 8003922:	6013      	str	r3, [r2, #0]
 8003924:	e01d      	b.n	8003962 <HAL_MDF_Init+0x27a>
 8003926:	bf00      	nop
 8003928:	200009b4 	.word	0x200009b4
 800392c:	200009ac 	.word	0x200009ac
 8003930:	40025080 	.word	0x40025080
 8003934:	40025100 	.word	0x40025100
 8003938:	40025180 	.word	0x40025180
 800393c:	40025200 	.word	0x40025200
 8003940:	40025280 	.word	0x40025280
 8003944:	40025300 	.word	0x40025300
 8003948:	200009b0 	.word	0x200009b0
 800394c:	46024080 	.word	0x46024080
 8003950:	46024000 	.word	0x46024000
 8003954:	40025000 	.word	0x40025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
 8003958:	4b0d      	ldr	r3, [pc, #52]	; (8003990 <HAL_MDF_Init+0x2a8>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	3301      	adds	r3, #1
 800395e:	4a0c      	ldr	r2, [pc, #48]	; (8003990 <HAL_MDF_Init+0x2a8>)
 8003960:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4618      	mov	r0, r3
 8003968:	f000 f816 	bl	8003998 <MDF_GetHandleNumberFromInstance>
 800396c:	4602      	mov	r2, r0
 800396e:	4909      	ldr	r1, [pc, #36]	; (8003994 <HAL_MDF_Init+0x2ac>)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	641a      	str	r2, [r3, #64]	; 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      }
    }
  }

  /* Return function status */
  return status;
 8003984:	7bfb      	ldrb	r3, [r7, #15]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	200009ac 	.word	0x200009ac
 8003994:	200009b4 	.word	0x200009b4

08003998 <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a19      	ldr	r2, [pc, #100]	; (8003a08 <MDF_GetHandleNumberFromInstance+0x70>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d102      	bne.n	80039ae <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
 80039a8:	2300      	movs	r3, #0
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	e024      	b.n	80039f8 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a16      	ldr	r2, [pc, #88]	; (8003a0c <MDF_GetHandleNumberFromInstance+0x74>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d102      	bne.n	80039bc <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
 80039b6:	2301      	movs	r3, #1
 80039b8:	60fb      	str	r3, [r7, #12]
 80039ba:	e01d      	b.n	80039f8 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter2)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a14      	ldr	r2, [pc, #80]	; (8003a10 <MDF_GetHandleNumberFromInstance+0x78>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d102      	bne.n	80039ca <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
 80039c4:	2302      	movs	r3, #2
 80039c6:	60fb      	str	r3, [r7, #12]
 80039c8:	e016      	b.n	80039f8 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a11      	ldr	r2, [pc, #68]	; (8003a14 <MDF_GetHandleNumberFromInstance+0x7c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d102      	bne.n	80039d8 <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
 80039d2:	2303      	movs	r3, #3
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	e00f      	b.n	80039f8 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	4a0f      	ldr	r2, [pc, #60]	; (8003a18 <MDF_GetHandleNumberFromInstance+0x80>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d102      	bne.n	80039e6 <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
 80039e0:	2304      	movs	r3, #4
 80039e2:	60fb      	str	r3, [r7, #12]
 80039e4:	e008      	b.n	80039f8 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a0c      	ldr	r2, [pc, #48]	; (8003a1c <MDF_GetHandleNumberFromInstance+0x84>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d102      	bne.n	80039f4 <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
 80039ee:	2305      	movs	r3, #5
 80039f0:	60fb      	str	r3, [r7, #12]
 80039f2:	e001      	b.n	80039f8 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
 80039f4:	2306      	movs	r3, #6
 80039f6:	60fb      	str	r3, [r7, #12]
  }

  return handle_number;
 80039f8:	68fb      	ldr	r3, [r7, #12]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	40025080 	.word	0x40025080
 8003a0c:	40025100 	.word	0x40025100
 8003a10:	40025180 	.word	0x40025180
 8003a14:	40025200 	.word	0x40025200
 8003a18:	40025280 	.word	0x40025280
 8003a1c:	40025300 	.word	0x40025300

08003a20 <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b083      	sub	sp, #12
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f043 0201 	orr.w	r2, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	601a      	str	r2, [r3, #0]
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af02      	add	r7, sp, #8
 8003a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8003a4c:	f7ff f97a 	bl	8002d44 <HAL_GetTick>
 8003a50:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d102      	bne.n	8003a5e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	73fb      	strb	r3, [r7, #15]
 8003a5c:	e0a5      	b.n	8003baa <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f040 809e 	bne.w	8003baa <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f7fe fb5a 	bl	8002128 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003a74:	f241 3188 	movw	r1, #5000	; 0x1388
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 f912 	bl	8003ca2 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	4b4b      	ldr	r3, [pc, #300]	; (8003bb4 <HAL_OSPI_Init+0x174>)
 8003a86:	4013      	ands	r3, r2
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	68d1      	ldr	r1, [r2, #12]
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6912      	ldr	r2, [r2, #16]
 8003a90:	3a01      	subs	r2, #1
 8003a92:	0412      	lsls	r2, r2, #16
 8003a94:	4311      	orrs	r1, r2
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	6952      	ldr	r2, [r2, #20]
 8003a9a:	3a01      	subs	r2, #1
 8003a9c:	0212      	lsls	r2, r2, #8
 8003a9e:	4311      	orrs	r1, r2
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003aa4:	4311      	orrs	r1, r2
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	69d2      	ldr	r2, [r2, #28]
 8003aaa:	4311      	orrs	r1, r2
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	6812      	ldr	r2, [r2, #0]
 8003ab0:	430b      	orrs	r3, r1
 8003ab2:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a1a      	ldr	r2, [r3, #32]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ae4:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	3b01      	subs	r3, #1
 8003af6:	021a      	lsls	r2, r3, #8
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b04:	9300      	str	r3, [sp, #0]
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	2120      	movs	r1, #32
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 fdc9 	bl	80046a4 <OSPI_WaitFlagStateUntilTimeout>
 8003b12:	4603      	mov	r3, r0
 8003b14:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d146      	bne.n	8003baa <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	1e5a      	subs	r2, r3, #1
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	430a      	orrs	r2, r1
 8003b32:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689a      	ldr	r2, [r3, #8]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003b52:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f042 0201 	orr.w	r2, r2, #1
 8003b78:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d107      	bne.n	8003b92 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f042 0202 	orr.w	r2, r2, #2
 8003b90:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68db      	ldr	r3, [r3, #12]
 8003b96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b9a:	d103      	bne.n	8003ba4 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	651a      	str	r2, [r3, #80]	; 0x50
 8003ba2:	e002      	b.n	8003baa <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3710      	adds	r7, #16
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	f8e0c0f4 	.word	0xf8e0c0f4

08003bb8 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b088      	sub	sp, #32
 8003bbc:	af02      	add	r7, sp, #8
 8003bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8003bc4:	f7ff f8be 	bl	8002d44 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bce:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d104      	bne.n	8003be4 <HAL_OSPI_Abort+0x2c>
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d052      	beq.n	8003c8a <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0304 	and.w	r3, r3, #4
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d014      	beq.n	8003c1c <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 0204 	bic.w	r2, r2, #4
 8003c00:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7ff f9db 	bl	8002fc2 <HAL_DMA_Abort>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8003c10:	7dfb      	ldrb	r3, [r7, #23]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2204      	movs	r2, #4
 8003c1a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	f003 0320 	and.w	r3, r3, #32
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d02b      	beq.n	8003c82 <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f042 0202 	orr.w	r2, r2, #2
 8003c38:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	2201      	movs	r2, #1
 8003c44:	2102      	movs	r1, #2
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 fd2c 	bl	80046a4 <OSPI_WaitFlagStateUntilTimeout>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8003c50:	7dfb      	ldrb	r3, [r7, #23]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d11f      	bne.n	8003c96 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2202      	movs	r2, #2
 8003c5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c62:	9300      	str	r3, [sp, #0]
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	2200      	movs	r2, #0
 8003c68:	2120      	movs	r1, #32
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 fd1a 	bl	80046a4 <OSPI_WaitFlagStateUntilTimeout>
 8003c70:	4603      	mov	r3, r0
 8003c72:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8003c74:	7dfb      	ldrb	r3, [r7, #23]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d10d      	bne.n	8003c96 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8003c80:	e009      	b.n	8003c96 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2202      	movs	r2, #2
 8003c86:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8003c88:	e005      	b.n	8003c96 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2210      	movs	r2, #16
 8003c92:	655a      	str	r2, [r3, #84]	; 0x54
 8003c94:	e000      	b.n	8003c98 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8003c96:	bf00      	nop
  }

  /* Return function status */
  return status;
 8003c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3718      	adds	r7, #24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003ca2:	b480      	push	{r7}
 8003ca4:	b083      	sub	sp, #12
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
 8003caa:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 8003cb2:	2300      	movs	r3, #0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	370c      	adds	r7, #12
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b094      	sub	sp, #80	; 0x50
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a9d      	ldr	r2, [pc, #628]	; (8003f54 <HAL_OSPIM_Config+0x294>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d105      	bne.n	8003cee <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8003cec:	e004      	b.n	8003cf8 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003cfe:	e01d      	b.n	8003d3c <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8003d00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d04:	3301      	adds	r3, #1
 8003d06:	b2d8      	uxtb	r0, r3
 8003d08:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8003d0c:	f107 0114 	add.w	r1, r7, #20
 8003d10:	4613      	mov	r3, r2
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	4413      	add	r3, r2
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	440b      	add	r3, r1
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	f000 fd02 	bl	8004724 <OSPIM_GetConfig>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d005      	beq.n	8003d32 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2208      	movs	r2, #8
 8003d30:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003d32:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d36:	3301      	adds	r3, #1
 8003d38:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003d3c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d9dd      	bls.n	8003d00 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8003d44:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f040 849e 	bne.w	800468a <HAL_OSPIM_Config+0x9ca>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003d4e:	4b81      	ldr	r3, [pc, #516]	; (8003f54 <HAL_OSPIM_Config+0x294>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00b      	beq.n	8003d72 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003d5a:	4b7e      	ldr	r3, [pc, #504]	; (8003f54 <HAL_OSPIM_Config+0x294>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a7d      	ldr	r2, [pc, #500]	; (8003f54 <HAL_OSPIM_Config+0x294>)
 8003d60:	f023 0301 	bic.w	r3, r3, #1
 8003d64:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8003d66:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003d6a:	f043 0301 	orr.w	r3, r3, #1
 8003d6e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8003d72:	4b79      	ldr	r3, [pc, #484]	; (8003f58 <HAL_OSPIM_Config+0x298>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00b      	beq.n	8003d96 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003d7e:	4b76      	ldr	r3, [pc, #472]	; (8003f58 <HAL_OSPIM_Config+0x298>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a75      	ldr	r2, [pc, #468]	; (8003f58 <HAL_OSPIM_Config+0x298>)
 8003d84:	f023 0301 	bic.w	r3, r3, #1
 8003d88:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8003d8a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003d8e:	f043 0302 	orr.w	r3, r3, #2
 8003d92:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8003d96:	4971      	ldr	r1, [pc, #452]	; (8003f5c <HAL_OSPIM_Config+0x29c>)
 8003d98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	005b      	lsls	r3, r3, #1
 8003d9e:	4413      	add	r3, r2
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	3350      	adds	r3, #80	; 0x50
 8003da4:	443b      	add	r3, r7
 8003da6:	3b34      	subs	r3, #52	; 0x34
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	3b01      	subs	r3, #1
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	440b      	add	r3, r1
 8003db0:	6859      	ldr	r1, [r3, #4]
 8003db2:	486a      	ldr	r0, [pc, #424]	; (8003f5c <HAL_OSPIM_Config+0x29c>)
 8003db4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003db6:	4613      	mov	r3, r2
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	4413      	add	r3, r2
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	3350      	adds	r3, #80	; 0x50
 8003dc0:	443b      	add	r3, r7
 8003dc2:	3b34      	subs	r3, #52	; 0x34
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	3b01      	subs	r3, #1
 8003dc8:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003dcc:	009b      	lsls	r3, r3, #2
 8003dce:	4403      	add	r3, r0
 8003dd0:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8003dd2:	4b62      	ldr	r3, [pc, #392]	; (8003f5c <HAL_OSPIM_Config+0x29c>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	f000 80c0 	beq.w	8003f60 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8003de0:	4b5e      	ldr	r3, [pc, #376]	; (8003f5c <HAL_OSPIM_Config+0x29c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a5d      	ldr	r2, [pc, #372]	; (8003f5c <HAL_OSPIM_Config+0x29c>)
 8003de6:	f023 0301 	bic.w	r3, r3, #1
 8003dea:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8003dec:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	f040 8162 	bne.w	80040ba <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8003df6:	4959      	ldr	r1, [pc, #356]	; (8003f5c <HAL_OSPIM_Config+0x29c>)
 8003df8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	005b      	lsls	r3, r3, #1
 8003e00:	4413      	add	r3, r2
 8003e02:	00db      	lsls	r3, r3, #3
 8003e04:	3350      	adds	r3, #80	; 0x50
 8003e06:	443b      	add	r3, r7
 8003e08:	3b3c      	subs	r3, #60	; 0x3c
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	440b      	add	r3, r1
 8003e12:	6859      	ldr	r1, [r3, #4]
 8003e14:	4851      	ldr	r0, [pc, #324]	; (8003f5c <HAL_OSPIM_Config+0x29c>)
 8003e16:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	4413      	add	r3, r2
 8003e20:	00db      	lsls	r3, r3, #3
 8003e22:	3350      	adds	r3, #80	; 0x50
 8003e24:	443b      	add	r3, r7
 8003e26:	3b3c      	subs	r3, #60	; 0x3c
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	f041 0202 	orr.w	r2, r1, #2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4403      	add	r3, r0
 8003e34:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8003e36:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	4413      	add	r3, r2
 8003e40:	00db      	lsls	r3, r3, #3
 8003e42:	3350      	adds	r3, #80	; 0x50
 8003e44:	443b      	add	r3, r7
 8003e46:	3b38      	subs	r3, #56	; 0x38
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d01f      	beq.n	8003e8e <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8003e4e:	4943      	ldr	r1, [pc, #268]	; (8003f5c <HAL_OSPIM_Config+0x29c>)
 8003e50:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003e54:	4613      	mov	r3, r2
 8003e56:	005b      	lsls	r3, r3, #1
 8003e58:	4413      	add	r3, r2
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	3350      	adds	r3, #80	; 0x50
 8003e5e:	443b      	add	r3, r7
 8003e60:	3b38      	subs	r3, #56	; 0x38
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	3b01      	subs	r3, #1
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	6859      	ldr	r1, [r3, #4]
 8003e6c:	483b      	ldr	r0, [pc, #236]	; (8003f5c <HAL_OSPIM_Config+0x29c>)
 8003e6e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003e72:	4613      	mov	r3, r2
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	4413      	add	r3, r2
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	3350      	adds	r3, #80	; 0x50
 8003e7c:	443b      	add	r3, r7
 8003e7e:	3b38      	subs	r3, #56	; 0x38
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	3b01      	subs	r3, #1
 8003e84:	f041 0220 	orr.w	r2, r1, #32
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4403      	add	r3, r0
 8003e8c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003e8e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003e92:	4613      	mov	r3, r2
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	4413      	add	r3, r2
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	3350      	adds	r3, #80	; 0x50
 8003e9c:	443b      	add	r3, r7
 8003e9e:	3b30      	subs	r3, #48	; 0x30
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d023      	beq.n	8003eee <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003ea6:	492d      	ldr	r1, [pc, #180]	; (8003f5c <HAL_OSPIM_Config+0x29c>)
 8003ea8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003eac:	4613      	mov	r3, r2
 8003eae:	005b      	lsls	r3, r3, #1
 8003eb0:	4413      	add	r3, r2
 8003eb2:	00db      	lsls	r3, r3, #3
 8003eb4:	3350      	adds	r3, #80	; 0x50
 8003eb6:	443b      	add	r3, r7
 8003eb8:	3b30      	subs	r3, #48	; 0x30
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	440b      	add	r3, r1
 8003ec6:	6859      	ldr	r1, [r3, #4]
 8003ec8:	4824      	ldr	r0, [pc, #144]	; (8003f5c <HAL_OSPIM_Config+0x29c>)
 8003eca:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003ece:	4613      	mov	r3, r2
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	4413      	add	r3, r2
 8003ed4:	00db      	lsls	r3, r3, #3
 8003ed6:	3350      	adds	r3, #80	; 0x50
 8003ed8:	443b      	add	r3, r7
 8003eda:	3b30      	subs	r3, #48	; 0x30
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4403      	add	r3, r0
 8003eec:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003eee:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003ef2:	4613      	mov	r3, r2
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	4413      	add	r3, r2
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	3350      	adds	r3, #80	; 0x50
 8003efc:	443b      	add	r3, r7
 8003efe:	3b2c      	subs	r3, #44	; 0x2c
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	f000 80d9 	beq.w	80040ba <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003f08:	4914      	ldr	r1, [pc, #80]	; (8003f5c <HAL_OSPIM_Config+0x29c>)
 8003f0a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003f0e:	4613      	mov	r3, r2
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	4413      	add	r3, r2
 8003f14:	00db      	lsls	r3, r3, #3
 8003f16:	3350      	adds	r3, #80	; 0x50
 8003f18:	443b      	add	r3, r7
 8003f1a:	3b2c      	subs	r3, #44	; 0x2c
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	6859      	ldr	r1, [r3, #4]
 8003f2a:	480c      	ldr	r0, [pc, #48]	; (8003f5c <HAL_OSPIM_Config+0x29c>)
 8003f2c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003f30:	4613      	mov	r3, r2
 8003f32:	005b      	lsls	r3, r3, #1
 8003f34:	4413      	add	r3, r2
 8003f36:	00db      	lsls	r3, r3, #3
 8003f38:	3350      	adds	r3, #80	; 0x50
 8003f3a:	443b      	add	r3, r7
 8003f3c:	3b2c      	subs	r3, #44	; 0x2c
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	3b01      	subs	r3, #1
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	4403      	add	r3, r0
 8003f4e:	605a      	str	r2, [r3, #4]
 8003f50:	e0b3      	b.n	80040ba <HAL_OSPIM_Config+0x3fa>
 8003f52:	bf00      	nop
 8003f54:	420d1400 	.word	0x420d1400
 8003f58:	420d2400 	.word	0x420d2400
 8003f5c:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8003f60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f62:	4613      	mov	r3, r2
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	4413      	add	r3, r2
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	3350      	adds	r3, #80	; 0x50
 8003f6c:	443b      	add	r3, r7
 8003f6e:	3b3c      	subs	r3, #60	; 0x3c
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f000 80a1 	beq.w	80040ba <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8003f78:	4993      	ldr	r1, [pc, #588]	; (80041c8 <HAL_OSPIM_Config+0x508>)
 8003f7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	4413      	add	r3, r2
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	3350      	adds	r3, #80	; 0x50
 8003f86:	443b      	add	r3, r7
 8003f88:	3b3c      	subs	r3, #60	; 0x3c
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	3b01      	subs	r3, #1
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	440b      	add	r3, r1
 8003f92:	6859      	ldr	r1, [r3, #4]
 8003f94:	488c      	ldr	r0, [pc, #560]	; (80041c8 <HAL_OSPIM_Config+0x508>)
 8003f96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f98:	4613      	mov	r3, r2
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	4413      	add	r3, r2
 8003f9e:	00db      	lsls	r3, r3, #3
 8003fa0:	3350      	adds	r3, #80	; 0x50
 8003fa2:	443b      	add	r3, r7
 8003fa4:	3b3c      	subs	r3, #60	; 0x3c
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	f021 0201 	bic.w	r2, r1, #1
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4403      	add	r3, r0
 8003fb2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8003fb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	4413      	add	r3, r2
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	3350      	adds	r3, #80	; 0x50
 8003fc0:	443b      	add	r3, r7
 8003fc2:	3b38      	subs	r3, #56	; 0x38
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d01d      	beq.n	8004006 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8003fca:	497f      	ldr	r1, [pc, #508]	; (80041c8 <HAL_OSPIM_Config+0x508>)
 8003fcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fce:	4613      	mov	r3, r2
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	4413      	add	r3, r2
 8003fd4:	00db      	lsls	r3, r3, #3
 8003fd6:	3350      	adds	r3, #80	; 0x50
 8003fd8:	443b      	add	r3, r7
 8003fda:	3b38      	subs	r3, #56	; 0x38
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	440b      	add	r3, r1
 8003fe4:	6859      	ldr	r1, [r3, #4]
 8003fe6:	4878      	ldr	r0, [pc, #480]	; (80041c8 <HAL_OSPIM_Config+0x508>)
 8003fe8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fea:	4613      	mov	r3, r2
 8003fec:	005b      	lsls	r3, r3, #1
 8003fee:	4413      	add	r3, r2
 8003ff0:	00db      	lsls	r3, r3, #3
 8003ff2:	3350      	adds	r3, #80	; 0x50
 8003ff4:	443b      	add	r3, r7
 8003ff6:	3b38      	subs	r3, #56	; 0x38
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	f021 0210 	bic.w	r2, r1, #16
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4403      	add	r3, r0
 8004004:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004006:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004008:	4613      	mov	r3, r2
 800400a:	005b      	lsls	r3, r3, #1
 800400c:	4413      	add	r3, r2
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	3350      	adds	r3, #80	; 0x50
 8004012:	443b      	add	r3, r7
 8004014:	3b30      	subs	r3, #48	; 0x30
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d021      	beq.n	8004060 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800401c:	496a      	ldr	r1, [pc, #424]	; (80041c8 <HAL_OSPIM_Config+0x508>)
 800401e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004020:	4613      	mov	r3, r2
 8004022:	005b      	lsls	r3, r3, #1
 8004024:	4413      	add	r3, r2
 8004026:	00db      	lsls	r3, r3, #3
 8004028:	3350      	adds	r3, #80	; 0x50
 800402a:	443b      	add	r3, r7
 800402c:	3b30      	subs	r3, #48	; 0x30
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3b01      	subs	r3, #1
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	440b      	add	r3, r1
 800403a:	6859      	ldr	r1, [r3, #4]
 800403c:	4862      	ldr	r0, [pc, #392]	; (80041c8 <HAL_OSPIM_Config+0x508>)
 800403e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004040:	4613      	mov	r3, r2
 8004042:	005b      	lsls	r3, r3, #1
 8004044:	4413      	add	r3, r2
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	3350      	adds	r3, #80	; 0x50
 800404a:	443b      	add	r3, r7
 800404c:	3b30      	subs	r3, #48	; 0x30
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	3b01      	subs	r3, #1
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4403      	add	r3, r0
 800405e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004060:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004062:	4613      	mov	r3, r2
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	4413      	add	r3, r2
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	3350      	adds	r3, #80	; 0x50
 800406c:	443b      	add	r3, r7
 800406e:	3b2c      	subs	r3, #44	; 0x2c
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d021      	beq.n	80040ba <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8004076:	4954      	ldr	r1, [pc, #336]	; (80041c8 <HAL_OSPIM_Config+0x508>)
 8004078:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800407a:	4613      	mov	r3, r2
 800407c:	005b      	lsls	r3, r3, #1
 800407e:	4413      	add	r3, r2
 8004080:	00db      	lsls	r3, r3, #3
 8004082:	3350      	adds	r3, #80	; 0x50
 8004084:	443b      	add	r3, r7
 8004086:	3b2c      	subs	r3, #44	; 0x2c
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3b01      	subs	r3, #1
 800408c:	f003 0301 	and.w	r3, r3, #1
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	440b      	add	r3, r1
 8004094:	6859      	ldr	r1, [r3, #4]
 8004096:	484c      	ldr	r0, [pc, #304]	; (80041c8 <HAL_OSPIM_Config+0x508>)
 8004098:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800409a:	4613      	mov	r3, r2
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	4413      	add	r3, r2
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	3350      	adds	r3, #80	; 0x50
 80040a4:	443b      	add	r3, r7
 80040a6:	3b2c      	subs	r3, #44	; 0x2c
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	3b01      	subs	r3, #1
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4403      	add	r3, r0
 80040b8:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	6819      	ldr	r1, [r3, #0]
 80040be:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80040c2:	4613      	mov	r3, r2
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	4413      	add	r3, r2
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	3350      	adds	r3, #80	; 0x50
 80040cc:	443b      	add	r3, r7
 80040ce:	3b3c      	subs	r3, #60	; 0x3c
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4299      	cmp	r1, r3
 80040d4:	d038      	beq.n	8004148 <HAL_OSPIM_Config+0x488>
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	6859      	ldr	r1, [r3, #4]
 80040da:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80040de:	4613      	mov	r3, r2
 80040e0:	005b      	lsls	r3, r3, #1
 80040e2:	4413      	add	r3, r2
 80040e4:	00db      	lsls	r3, r3, #3
 80040e6:	3350      	adds	r3, #80	; 0x50
 80040e8:	443b      	add	r3, r7
 80040ea:	3b38      	subs	r3, #56	; 0x38
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4299      	cmp	r1, r3
 80040f0:	d02a      	beq.n	8004148 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	6899      	ldr	r1, [r3, #8]
 80040f6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80040fa:	4613      	mov	r3, r2
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	4413      	add	r3, r2
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	3350      	adds	r3, #80	; 0x50
 8004104:	443b      	add	r3, r7
 8004106:	3b34      	subs	r3, #52	; 0x34
 8004108:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800410a:	4299      	cmp	r1, r3
 800410c:	d01c      	beq.n	8004148 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	68d9      	ldr	r1, [r3, #12]
 8004112:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004116:	4613      	mov	r3, r2
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	4413      	add	r3, r2
 800411c:	00db      	lsls	r3, r3, #3
 800411e:	3350      	adds	r3, #80	; 0x50
 8004120:	443b      	add	r3, r7
 8004122:	3b30      	subs	r3, #48	; 0x30
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4299      	cmp	r1, r3
 8004128:	d00e      	beq.n	8004148 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	6919      	ldr	r1, [r3, #16]
 800412e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004132:	4613      	mov	r3, r2
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	4413      	add	r3, r2
 8004138:	00db      	lsls	r3, r3, #3
 800413a:	3350      	adds	r3, #80	; 0x50
 800413c:	443b      	add	r3, r7
 800413e:	3b2c      	subs	r3, #44	; 0x2c
 8004140:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004142:	4299      	cmp	r1, r3
 8004144:	f040 810e 	bne.w	8004364 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	6819      	ldr	r1, [r3, #0]
 800414c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004150:	4613      	mov	r3, r2
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	4413      	add	r3, r2
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	3350      	adds	r3, #80	; 0x50
 800415a:	443b      	add	r3, r7
 800415c:	3b3c      	subs	r3, #60	; 0x3c
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4299      	cmp	r1, r3
 8004162:	d133      	bne.n	80041cc <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	6859      	ldr	r1, [r3, #4]
 8004168:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800416c:	4613      	mov	r3, r2
 800416e:	005b      	lsls	r3, r3, #1
 8004170:	4413      	add	r3, r2
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	3350      	adds	r3, #80	; 0x50
 8004176:	443b      	add	r3, r7
 8004178:	3b38      	subs	r3, #56	; 0x38
 800417a:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800417c:	4299      	cmp	r1, r3
 800417e:	d125      	bne.n	80041cc <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	68d9      	ldr	r1, [r3, #12]
 8004184:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004188:	4613      	mov	r3, r2
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	4413      	add	r3, r2
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	3350      	adds	r3, #80	; 0x50
 8004192:	443b      	add	r3, r7
 8004194:	3b30      	subs	r3, #48	; 0x30
 8004196:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8004198:	4299      	cmp	r1, r3
 800419a:	d117      	bne.n	80041cc <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	6919      	ldr	r1, [r3, #16]
 80041a0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80041a4:	4613      	mov	r3, r2
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	4413      	add	r3, r2
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	3350      	adds	r3, #80	; 0x50
 80041ae:	443b      	add	r3, r7
 80041b0:	3b2c      	subs	r3, #44	; 0x2c
 80041b2:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80041b4:	4299      	cmp	r1, r3
 80041b6:	d109      	bne.n	80041cc <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80041b8:	4b03      	ldr	r3, [pc, #12]	; (80041c8 <HAL_OSPIM_Config+0x508>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a02      	ldr	r2, [pc, #8]	; (80041c8 <HAL_OSPIM_Config+0x508>)
 80041be:	f043 0301 	orr.w	r3, r3, #1
 80041c2:	6013      	str	r3, [r2, #0]
 80041c4:	e0ce      	b.n	8004364 <HAL_OSPIM_Config+0x6a4>
 80041c6:	bf00      	nop
 80041c8:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80041cc:	49a4      	ldr	r1, [pc, #656]	; (8004460 <HAL_OSPIM_Config+0x7a0>)
 80041ce:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80041d2:	4613      	mov	r3, r2
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	4413      	add	r3, r2
 80041d8:	00db      	lsls	r3, r3, #3
 80041da:	3350      	adds	r3, #80	; 0x50
 80041dc:	443b      	add	r3, r7
 80041de:	3b3c      	subs	r3, #60	; 0x3c
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	3b01      	subs	r3, #1
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	440b      	add	r3, r1
 80041e8:	6859      	ldr	r1, [r3, #4]
 80041ea:	489d      	ldr	r0, [pc, #628]	; (8004460 <HAL_OSPIM_Config+0x7a0>)
 80041ec:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80041f0:	4613      	mov	r3, r2
 80041f2:	005b      	lsls	r3, r3, #1
 80041f4:	4413      	add	r3, r2
 80041f6:	00db      	lsls	r3, r3, #3
 80041f8:	3350      	adds	r3, #80	; 0x50
 80041fa:	443b      	add	r3, r7
 80041fc:	3b3c      	subs	r3, #60	; 0x3c
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3b01      	subs	r3, #1
 8004202:	f021 0201 	bic.w	r2, r1, #1
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4403      	add	r3, r0
 800420a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800420c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004210:	4613      	mov	r3, r2
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	4413      	add	r3, r2
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	3350      	adds	r3, #80	; 0x50
 800421a:	443b      	add	r3, r7
 800421c:	3b38      	subs	r3, #56	; 0x38
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d01f      	beq.n	8004264 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004224:	498e      	ldr	r1, [pc, #568]	; (8004460 <HAL_OSPIM_Config+0x7a0>)
 8004226:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800422a:	4613      	mov	r3, r2
 800422c:	005b      	lsls	r3, r3, #1
 800422e:	4413      	add	r3, r2
 8004230:	00db      	lsls	r3, r3, #3
 8004232:	3350      	adds	r3, #80	; 0x50
 8004234:	443b      	add	r3, r7
 8004236:	3b38      	subs	r3, #56	; 0x38
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3b01      	subs	r3, #1
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	440b      	add	r3, r1
 8004240:	6859      	ldr	r1, [r3, #4]
 8004242:	4887      	ldr	r0, [pc, #540]	; (8004460 <HAL_OSPIM_Config+0x7a0>)
 8004244:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004248:	4613      	mov	r3, r2
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	4413      	add	r3, r2
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	3350      	adds	r3, #80	; 0x50
 8004252:	443b      	add	r3, r7
 8004254:	3b38      	subs	r3, #56	; 0x38
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	3b01      	subs	r3, #1
 800425a:	f021 0210 	bic.w	r2, r1, #16
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4403      	add	r3, r0
 8004262:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004264:	497e      	ldr	r1, [pc, #504]	; (8004460 <HAL_OSPIM_Config+0x7a0>)
 8004266:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800426a:	4613      	mov	r3, r2
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	4413      	add	r3, r2
 8004270:	00db      	lsls	r3, r3, #3
 8004272:	3350      	adds	r3, #80	; 0x50
 8004274:	443b      	add	r3, r7
 8004276:	3b34      	subs	r3, #52	; 0x34
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	3b01      	subs	r3, #1
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	440b      	add	r3, r1
 8004280:	6859      	ldr	r1, [r3, #4]
 8004282:	4877      	ldr	r0, [pc, #476]	; (8004460 <HAL_OSPIM_Config+0x7a0>)
 8004284:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004288:	4613      	mov	r3, r2
 800428a:	005b      	lsls	r3, r3, #1
 800428c:	4413      	add	r3, r2
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	3350      	adds	r3, #80	; 0x50
 8004292:	443b      	add	r3, r7
 8004294:	3b34      	subs	r3, #52	; 0x34
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	3b01      	subs	r3, #1
 800429a:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4403      	add	r3, r0
 80042a2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80042a4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80042a8:	4613      	mov	r3, r2
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	4413      	add	r3, r2
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	3350      	adds	r3, #80	; 0x50
 80042b2:	443b      	add	r3, r7
 80042b4:	3b30      	subs	r3, #48	; 0x30
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d023      	beq.n	8004304 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80042bc:	4968      	ldr	r1, [pc, #416]	; (8004460 <HAL_OSPIM_Config+0x7a0>)
 80042be:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80042c2:	4613      	mov	r3, r2
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	4413      	add	r3, r2
 80042c8:	00db      	lsls	r3, r3, #3
 80042ca:	3350      	adds	r3, #80	; 0x50
 80042cc:	443b      	add	r3, r7
 80042ce:	3b30      	subs	r3, #48	; 0x30
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	440b      	add	r3, r1
 80042dc:	6859      	ldr	r1, [r3, #4]
 80042de:	4860      	ldr	r0, [pc, #384]	; (8004460 <HAL_OSPIM_Config+0x7a0>)
 80042e0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80042e4:	4613      	mov	r3, r2
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	4413      	add	r3, r2
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	3350      	adds	r3, #80	; 0x50
 80042ee:	443b      	add	r3, r7
 80042f0:	3b30      	subs	r3, #48	; 0x30
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	3b01      	subs	r3, #1
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4403      	add	r3, r0
 8004302:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004304:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004308:	4613      	mov	r3, r2
 800430a:	005b      	lsls	r3, r3, #1
 800430c:	4413      	add	r3, r2
 800430e:	00db      	lsls	r3, r3, #3
 8004310:	3350      	adds	r3, #80	; 0x50
 8004312:	443b      	add	r3, r7
 8004314:	3b2c      	subs	r3, #44	; 0x2c
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d023      	beq.n	8004364 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800431c:	4950      	ldr	r1, [pc, #320]	; (8004460 <HAL_OSPIM_Config+0x7a0>)
 800431e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004322:	4613      	mov	r3, r2
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	4413      	add	r3, r2
 8004328:	00db      	lsls	r3, r3, #3
 800432a:	3350      	adds	r3, #80	; 0x50
 800432c:	443b      	add	r3, r7
 800432e:	3b2c      	subs	r3, #44	; 0x2c
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	3b01      	subs	r3, #1
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	440b      	add	r3, r1
 800433c:	6859      	ldr	r1, [r3, #4]
 800433e:	4848      	ldr	r0, [pc, #288]	; (8004460 <HAL_OSPIM_Config+0x7a0>)
 8004340:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004344:	4613      	mov	r3, r2
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	4413      	add	r3, r2
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	3350      	adds	r3, #80	; 0x50
 800434e:	443b      	add	r3, r7
 8004350:	3b2c      	subs	r3, #44	; 0x2c
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	3b01      	subs	r3, #1
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4403      	add	r3, r0
 8004362:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8004364:	4a3e      	ldr	r2, [pc, #248]	; (8004460 <HAL_OSPIM_Config+0x7a0>)
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	689b      	ldr	r3, [r3, #8]
 800436a:	3b01      	subs	r3, #1
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4413      	add	r3, r2
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004378:	025b      	lsls	r3, r3, #9
 800437a:	431a      	orrs	r2, r3
 800437c:	4938      	ldr	r1, [pc, #224]	; (8004460 <HAL_OSPIM_Config+0x7a0>)
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	3b01      	subs	r3, #1
 8004384:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	440b      	add	r3, r1
 800438c:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d018      	beq.n	80043c8 <HAL_OSPIM_Config+0x708>
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800439e:	d813      	bhi.n	80043c8 <HAL_OSPIM_Config+0x708>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	695b      	ldr	r3, [r3, #20]
 80043a4:	1e5a      	subs	r2, r3, #1
 80043a6:	4b2e      	ldr	r3, [pc, #184]	; (8004460 <HAL_OSPIM_Config+0x7a0>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	0c1b      	lsrs	r3, r3, #16
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d90a      	bls.n	80043c8 <HAL_OSPIM_Config+0x708>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 80043b2:	4b2b      	ldr	r3, [pc, #172]	; (8004460 <HAL_OSPIM_Config+0x7a0>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	3b01      	subs	r3, #1
 80043c0:	041b      	lsls	r3, r3, #16
 80043c2:	4927      	ldr	r1, [pc, #156]	; (8004460 <HAL_OSPIM_Config+0x7a0>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80043c8:	4b25      	ldr	r3, [pc, #148]	; (8004460 <HAL_OSPIM_Config+0x7a0>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0301 	and.w	r3, r3, #1
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	f000 809a 	beq.w	800450a <HAL_OSPIM_Config+0x84a>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 80043d6:	4a22      	ldr	r2, [pc, #136]	; (8004460 <HAL_OSPIM_Config+0x7a0>)
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	3b01      	subs	r3, #1
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4413      	add	r3, r2
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f023 0203 	bic.w	r2, r3, #3
 80043e8:	491d      	ldr	r1, [pc, #116]	; (8004460 <HAL_OSPIM_Config+0x7a0>)
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	3b01      	subs	r3, #1
 80043f0:	f042 0201 	orr.w	r2, r2, #1
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	440b      	add	r3, r1
 80043f8:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d011      	beq.n	8004426 <HAL_OSPIM_Config+0x766>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8004402:	4a17      	ldr	r2, [pc, #92]	; (8004460 <HAL_OSPIM_Config+0x7a0>)
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	3b01      	subs	r3, #1
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004414:	4912      	ldr	r1, [pc, #72]	; (8004460 <HAL_OSPIM_Config+0x7a0>)
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	3b01      	subs	r3, #1
 800441c:	f042 0210 	orr.w	r2, r2, #16
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	440b      	add	r3, r1
 8004424:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d018      	beq.n	8004464 <HAL_OSPIM_Config+0x7a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004432:	4a0b      	ldr	r2, [pc, #44]	; (8004460 <HAL_OSPIM_Config+0x7a0>)
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	3b01      	subs	r3, #1
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	4413      	add	r3, r2
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004448:	4905      	ldr	r1, [pc, #20]	; (8004460 <HAL_OSPIM_Config+0x7a0>)
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	3b01      	subs	r3, #1
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004458:	009b      	lsls	r3, r3, #2
 800445a:	440b      	add	r3, r1
 800445c:	605a      	str	r2, [r3, #4]
 800445e:	e01b      	b.n	8004498 <HAL_OSPIM_Config+0x7d8>
 8004460:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	68db      	ldr	r3, [r3, #12]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d015      	beq.n	8004498 <HAL_OSPIM_Config+0x7d8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800446c:	4a8a      	ldr	r2, [pc, #552]	; (8004698 <HAL_OSPIM_Config+0x9d8>)
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	3b01      	subs	r3, #1
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004482:	4985      	ldr	r1, [pc, #532]	; (8004698 <HAL_OSPIM_Config+0x9d8>)
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	3b01      	subs	r3, #1
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	440b      	add	r3, r1
 8004496:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d016      	beq.n	80044d2 <HAL_OSPIM_Config+0x812>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80044a4:	4a7c      	ldr	r2, [pc, #496]	; (8004698 <HAL_OSPIM_Config+0x9d8>)
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	3b01      	subs	r3, #1
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	4413      	add	r3, r2
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80044ba:	4977      	ldr	r1, [pc, #476]	; (8004698 <HAL_OSPIM_Config+0x9d8>)
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	3b01      	subs	r3, #1
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	440b      	add	r3, r1
 80044ce:	605a      	str	r2, [r3, #4]
 80044d0:	e0c3      	b.n	800465a <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	f000 80bf 	beq.w	800465a <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80044dc:	4a6e      	ldr	r2, [pc, #440]	; (8004698 <HAL_OSPIM_Config+0x9d8>)
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	f003 0301 	and.w	r3, r3, #1
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80044f2:	4969      	ldr	r1, [pc, #420]	; (8004698 <HAL_OSPIM_Config+0x9d8>)
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	3b01      	subs	r3, #1
 80044fa:	f003 0301 	and.w	r3, r3, #1
 80044fe:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	440b      	add	r3, r1
 8004506:	605a      	str	r2, [r3, #4]
 8004508:	e0a7      	b.n	800465a <HAL_OSPIM_Config+0x99a>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800450a:	4a63      	ldr	r2, [pc, #396]	; (8004698 <HAL_OSPIM_Config+0x9d8>)
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	3b01      	subs	r3, #1
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f023 0203 	bic.w	r2, r3, #3
 800451c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	431a      	orrs	r2, r3
 8004522:	495d      	ldr	r1, [pc, #372]	; (8004698 <HAL_OSPIM_Config+0x9d8>)
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3b01      	subs	r3, #1
 800452a:	f042 0201 	orr.w	r2, r2, #1
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	440b      	add	r3, r1
 8004532:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d014      	beq.n	8004566 <HAL_OSPIM_Config+0x8a6>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800453c:	4a56      	ldr	r2, [pc, #344]	; (8004698 <HAL_OSPIM_Config+0x9d8>)
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	3b01      	subs	r3, #1
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	4413      	add	r3, r2
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800454e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004550:	015b      	lsls	r3, r3, #5
 8004552:	431a      	orrs	r2, r3
 8004554:	4950      	ldr	r1, [pc, #320]	; (8004698 <HAL_OSPIM_Config+0x9d8>)
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	3b01      	subs	r3, #1
 800455c:	f042 0210 	orr.w	r2, r2, #16
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	440b      	add	r3, r1
 8004564:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d019      	beq.n	80045a6 <HAL_OSPIM_Config+0x8e6>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004572:	4a49      	ldr	r2, [pc, #292]	; (8004698 <HAL_OSPIM_Config+0x9d8>)
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	3b01      	subs	r3, #1
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4413      	add	r3, r2
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004588:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800458a:	049b      	lsls	r3, r3, #18
 800458c:	431a      	orrs	r2, r3
 800458e:	4942      	ldr	r1, [pc, #264]	; (8004698 <HAL_OSPIM_Config+0x9d8>)
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	3b01      	subs	r3, #1
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	440b      	add	r3, r1
 80045a2:	605a      	str	r2, [r3, #4]
 80045a4:	e01c      	b.n	80045e0 <HAL_OSPIM_Config+0x920>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d018      	beq.n	80045e0 <HAL_OSPIM_Config+0x920>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80045ae:	4a3a      	ldr	r2, [pc, #232]	; (8004698 <HAL_OSPIM_Config+0x9d8>)
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	3b01      	subs	r3, #1
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	4413      	add	r3, r2
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80045c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045c6:	069b      	lsls	r3, r3, #26
 80045c8:	431a      	orrs	r2, r3
 80045ca:	4933      	ldr	r1, [pc, #204]	; (8004698 <HAL_OSPIM_Config+0x9d8>)
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	3b01      	subs	r3, #1
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d019      	beq.n	8004620 <HAL_OSPIM_Config+0x960>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80045ec:	4a2a      	ldr	r2, [pc, #168]	; (8004698 <HAL_OSPIM_Config+0x9d8>)
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	3b01      	subs	r3, #1
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004604:	049b      	lsls	r3, r3, #18
 8004606:	431a      	orrs	r2, r3
 8004608:	4923      	ldr	r1, [pc, #140]	; (8004698 <HAL_OSPIM_Config+0x9d8>)
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	691b      	ldr	r3, [r3, #16]
 800460e:	3b01      	subs	r3, #1
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	440b      	add	r3, r1
 800461c:	605a      	str	r2, [r3, #4]
 800461e:	e01c      	b.n	800465a <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	691b      	ldr	r3, [r3, #16]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d018      	beq.n	800465a <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004628:	4a1b      	ldr	r2, [pc, #108]	; (8004698 <HAL_OSPIM_Config+0x9d8>)
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	691b      	ldr	r3, [r3, #16]
 800462e:	3b01      	subs	r3, #1
 8004630:	f003 0301 	and.w	r3, r3, #1
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800463e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004640:	069b      	lsls	r3, r3, #26
 8004642:	431a      	orrs	r2, r3
 8004644:	4914      	ldr	r1, [pc, #80]	; (8004698 <HAL_OSPIM_Config+0x9d8>)
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	3b01      	subs	r3, #1
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8004654:	009b      	lsls	r3, r3, #2
 8004656:	440b      	add	r3, r1
 8004658:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800465a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d005      	beq.n	8004672 <HAL_OSPIM_Config+0x9b2>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004666:	4b0d      	ldr	r3, [pc, #52]	; (800469c <HAL_OSPIM_Config+0x9dc>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a0c      	ldr	r2, [pc, #48]	; (800469c <HAL_OSPIM_Config+0x9dc>)
 800466c:	f043 0301 	orr.w	r3, r3, #1
 8004670:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8004672:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004676:	f003 0302 	and.w	r3, r3, #2
 800467a:	2b00      	cmp	r3, #0
 800467c:	d005      	beq.n	800468a <HAL_OSPIM_Config+0x9ca>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800467e:	4b08      	ldr	r3, [pc, #32]	; (80046a0 <HAL_OSPIM_Config+0x9e0>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a07      	ldr	r2, [pc, #28]	; (80046a0 <HAL_OSPIM_Config+0x9e0>)
 8004684:	f043 0301 	orr.w	r3, r3, #1
 8004688:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800468a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800468e:	4618      	mov	r0, r3
 8004690:	3750      	adds	r7, #80	; 0x50
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	420c4000 	.word	0x420c4000
 800469c:	420d1400 	.word	0x420d1400
 80046a0:	420d2400 	.word	0x420d2400

080046a4 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	603b      	str	r3, [r7, #0]
 80046b0:	4613      	mov	r3, r2
 80046b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80046b4:	e022      	b.n	80046fc <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046bc:	d01e      	beq.n	80046fc <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046be:	f7fe fb41 	bl	8002d44 <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d302      	bcc.n	80046d4 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d113      	bne.n	80046fc <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6a1a      	ldr	r2, [r3, #32]
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	401a      	ands	r2, r3
 80046de:	79fb      	ldrb	r3, [r7, #7]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d00b      	beq.n	80046fc <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046ea:	651a      	str	r2, [r3, #80]	; 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f0:	f043 0201 	orr.w	r2, r3, #1
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	655a      	str	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e00e      	b.n	800471a <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	6a1a      	ldr	r2, [r3, #32]
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	4013      	ands	r3, r2
 8004706:	2b00      	cmp	r3, #0
 8004708:	bf14      	ite	ne
 800470a:	2301      	movne	r3, #1
 800470c:	2300      	moveq	r3, #0
 800470e:	b2db      	uxtb	r3, r3
 8004710:	461a      	mov	r2, r3
 8004712:	79fb      	ldrb	r3, [r7, #7]
 8004714:	429a      	cmp	r2, r3
 8004716:	d1ce      	bne.n	80046b6 <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004718:	2300      	movs	r3, #0
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}
	...

08004724 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8004724:	b480      	push	{r7}
 8004726:	b087      	sub	sp, #28
 8004728:	af00      	add	r7, sp, #0
 800472a:	4603      	mov	r3, r0
 800472c:	6039      	str	r1, [r7, #0]
 800472e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004730:	2300      	movs	r3, #0
 8004732:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8004734:	2300      	movs	r3, #0
 8004736:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8004738:	79fb      	ldrb	r3, [r7, #7]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d005      	beq.n	800474a <OSPIM_GetConfig+0x26>
 800473e:	79fb      	ldrb	r3, [r7, #7]
 8004740:	2b02      	cmp	r3, #2
 8004742:	d802      	bhi.n	800474a <OSPIM_GetConfig+0x26>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d102      	bne.n	8004750 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	75fb      	strb	r3, [r7, #23]
 800474e:	e098      	b.n	8004882 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2200      	movs	r2, #0
 800475a:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	2200      	movs	r2, #0
 8004760:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2200      	movs	r2, #0
 8004766:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	2200      	movs	r2, #0
 800476c:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800476e:	79fb      	ldrb	r3, [r7, #7]
 8004770:	2b02      	cmp	r3, #2
 8004772:	d10b      	bne.n	800478c <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8004774:	4b46      	ldr	r3, [pc, #280]	; (8004890 <OSPIM_GetConfig+0x16c>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	2b00      	cmp	r3, #0
 800477e:	d102      	bne.n	8004786 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8004780:	4b44      	ldr	r3, [pc, #272]	; (8004894 <OSPIM_GetConfig+0x170>)
 8004782:	613b      	str	r3, [r7, #16]
 8004784:	e002      	b.n	800478c <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8004786:	f44f 7300 	mov.w	r3, #512	; 0x200
 800478a:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800478c:	2300      	movs	r3, #0
 800478e:	60fb      	str	r3, [r7, #12]
 8004790:	e074      	b.n	800487c <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8004792:	4a3f      	ldr	r2, [pc, #252]	; (8004890 <OSPIM_GetConfig+0x16c>)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	4413      	add	r3, r2
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	f003 0301 	and.w	r3, r3, #1
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00a      	beq.n	80047be <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	4053      	eors	r3, r2
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d103      	bne.n	80047be <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	1c5a      	adds	r2, r3, #1
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	f003 0310 	and.w	r3, r3, #16
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d00a      	beq.n	80047de <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	4053      	eors	r3, r2
 80047ce:	f003 0320 	and.w	r3, r3, #32
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d103      	bne.n	80047de <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	1c5a      	adds	r2, r3, #1
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00a      	beq.n	80047fe <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	4053      	eors	r3, r2
 80047ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d103      	bne.n	80047fe <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	1c5a      	adds	r2, r3, #1
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004804:	2b00      	cmp	r3, #0
 8004806:	d018      	beq.n	800483a <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	4053      	eors	r3, r2
 800480e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d111      	bne.n	800483a <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d106      	bne.n	800482e <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	3301      	adds	r3, #1
 8004824:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	60da      	str	r2, [r3, #12]
 800482c:	e005      	b.n	800483a <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	3301      	adds	r3, #1
 8004832:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d018      	beq.n	8004876 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	4053      	eors	r3, r2
 800484a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d111      	bne.n	8004876 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8004852:	68bb      	ldr	r3, [r7, #8]
 8004854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d106      	bne.n	800486a <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	3301      	adds	r3, #1
 8004860:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	611a      	str	r2, [r3, #16]
 8004868:	e005      	b.n	8004876 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	3301      	adds	r3, #1
 800486e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	3301      	adds	r3, #1
 800487a:	60fb      	str	r3, [r7, #12]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d987      	bls.n	8004792 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8004882:	7dfb      	ldrb	r3, [r7, #23]
}
 8004884:	4618      	mov	r0, r3
 8004886:	371c      	adds	r7, #28
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr
 8004890:	420c4000 	.word	0x420c4000
 8004894:	04040222 	.word	0x04040222

08004898 <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689a      	ldr	r2, [r3, #8]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f042 0202 	orr.w	r2, r2, #2
 80048b4:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2208      	movs	r2, #8
 80048ba:	651a      	str	r2, [r3, #80]	; 0x50

  if (hospi->Instance == OCTOSPI1)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a15      	ldr	r2, [pc, #84]	; (8004918 <HAL_OSPI_DLYB_SetConfig+0x80>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d109      	bne.n	80048da <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 80048c6:	4815      	ldr	r0, [pc, #84]	; (800491c <HAL_OSPI_DLYB_SetConfig+0x84>)
 80048c8:	f7ff f8aa 	bl	8003a20 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 80048cc:	6839      	ldr	r1, [r7, #0]
 80048ce:	4813      	ldr	r0, [pc, #76]	; (800491c <HAL_OSPI_DLYB_SetConfig+0x84>)
 80048d0:	f006 fa5e 	bl	800ad90 <LL_DLYB_SetDelay>
    status = HAL_OK;
 80048d4:	2300      	movs	r3, #0
 80048d6:	73fb      	strb	r3, [r7, #15]
 80048d8:	e00d      	b.n	80048f6 <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

  else if (hospi->Instance == OCTOSPI2)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a10      	ldr	r2, [pc, #64]	; (8004920 <HAL_OSPI_DLYB_SetConfig+0x88>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d108      	bne.n	80048f6 <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 80048e4:	480f      	ldr	r0, [pc, #60]	; (8004924 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 80048e6:	f7ff f89b 	bl	8003a20 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 80048ea:	6839      	ldr	r1, [r7, #0]
 80048ec:	480d      	ldr	r0, [pc, #52]	; (8004924 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 80048ee:	f006 fa4f 	bl	800ad90 <LL_DLYB_SetDelay>
    status = HAL_OK;
 80048f2:	2300      	movs	r3, #0
 80048f4:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7ff f95e 	bl	8003bb8 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	689a      	ldr	r2, [r3, #8]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f022 0202 	bic.w	r2, r2, #2
 800490a:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 800490c:	7bfb      	ldrb	r3, [r7, #15]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3710      	adds	r7, #16
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	420d1400 	.word	0x420d1400
 800491c:	420cf000 	.word	0x420cf000
 8004920:	420d2400 	.word	0x420d2400
 8004924:	420cf400 	.word	0x420cf400

08004928 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800492a:	b08f      	sub	sp, #60	; 0x3c
 800492c:	af0a      	add	r7, sp, #40	; 0x28
 800492e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2b00      	cmp	r3, #0
 8004934:	d101      	bne.n	800493a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	e116      	b.n	8004b68 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004946:	b2db      	uxtb	r3, r3
 8004948:	2b00      	cmp	r3, #0
 800494a:	d106      	bne.n	800495a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f7fd ffb7 	bl	80028c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2203      	movs	r2, #3
 800495e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496a:	2b00      	cmp	r3, #0
 800496c:	d102      	bne.n	8004974 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4618      	mov	r0, r3
 800497a:	f006 fc25 	bl	800b1c8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	603b      	str	r3, [r7, #0]
 8004984:	687e      	ldr	r6, [r7, #4]
 8004986:	466d      	mov	r5, sp
 8004988:	f106 0410 	add.w	r4, r6, #16
 800498c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800498e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004990:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004992:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004994:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004998:	e885 0003 	stmia.w	r5, {r0, r1}
 800499c:	1d33      	adds	r3, r6, #4
 800499e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049a0:	6838      	ldr	r0, [r7, #0]
 80049a2:	f006 fbe5 	bl	800b170 <USB_CoreInit>
 80049a6:	4603      	mov	r3, r0
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d005      	beq.n	80049b8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2202      	movs	r2, #2
 80049b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e0d7      	b.n	8004b68 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2100      	movs	r1, #0
 80049be:	4618      	mov	r0, r3
 80049c0:	f006 fc13 	bl	800b1ea <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049c4:	2300      	movs	r3, #0
 80049c6:	73fb      	strb	r3, [r7, #15]
 80049c8:	e04a      	b.n	8004a60 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80049ca:	7bfa      	ldrb	r2, [r7, #15]
 80049cc:	6879      	ldr	r1, [r7, #4]
 80049ce:	4613      	mov	r3, r2
 80049d0:	00db      	lsls	r3, r3, #3
 80049d2:	4413      	add	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	440b      	add	r3, r1
 80049d8:	333d      	adds	r3, #61	; 0x3d
 80049da:	2201      	movs	r2, #1
 80049dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80049de:	7bfa      	ldrb	r2, [r7, #15]
 80049e0:	6879      	ldr	r1, [r7, #4]
 80049e2:	4613      	mov	r3, r2
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	4413      	add	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	440b      	add	r3, r1
 80049ec:	333c      	adds	r3, #60	; 0x3c
 80049ee:	7bfa      	ldrb	r2, [r7, #15]
 80049f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80049f2:	7bfa      	ldrb	r2, [r7, #15]
 80049f4:	7bfb      	ldrb	r3, [r7, #15]
 80049f6:	b298      	uxth	r0, r3
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	4613      	mov	r3, r2
 80049fc:	00db      	lsls	r3, r3, #3
 80049fe:	4413      	add	r3, r2
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	440b      	add	r3, r1
 8004a04:	3344      	adds	r3, #68	; 0x44
 8004a06:	4602      	mov	r2, r0
 8004a08:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004a0a:	7bfa      	ldrb	r2, [r7, #15]
 8004a0c:	6879      	ldr	r1, [r7, #4]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	00db      	lsls	r3, r3, #3
 8004a12:	4413      	add	r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	440b      	add	r3, r1
 8004a18:	3340      	adds	r3, #64	; 0x40
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004a1e:	7bfa      	ldrb	r2, [r7, #15]
 8004a20:	6879      	ldr	r1, [r7, #4]
 8004a22:	4613      	mov	r3, r2
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	4413      	add	r3, r2
 8004a28:	009b      	lsls	r3, r3, #2
 8004a2a:	440b      	add	r3, r1
 8004a2c:	3348      	adds	r3, #72	; 0x48
 8004a2e:	2200      	movs	r2, #0
 8004a30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004a32:	7bfa      	ldrb	r2, [r7, #15]
 8004a34:	6879      	ldr	r1, [r7, #4]
 8004a36:	4613      	mov	r3, r2
 8004a38:	00db      	lsls	r3, r3, #3
 8004a3a:	4413      	add	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	440b      	add	r3, r1
 8004a40:	334c      	adds	r3, #76	; 0x4c
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004a46:	7bfa      	ldrb	r2, [r7, #15]
 8004a48:	6879      	ldr	r1, [r7, #4]
 8004a4a:	4613      	mov	r3, r2
 8004a4c:	00db      	lsls	r3, r3, #3
 8004a4e:	4413      	add	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	440b      	add	r3, r1
 8004a54:	3354      	adds	r3, #84	; 0x54
 8004a56:	2200      	movs	r2, #0
 8004a58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a5a:	7bfb      	ldrb	r3, [r7, #15]
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	73fb      	strb	r3, [r7, #15]
 8004a60:	7bfa      	ldrb	r2, [r7, #15]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d3af      	bcc.n	80049ca <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	73fb      	strb	r3, [r7, #15]
 8004a6e:	e044      	b.n	8004afa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a70:	7bfa      	ldrb	r2, [r7, #15]
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	4613      	mov	r3, r2
 8004a76:	00db      	lsls	r3, r3, #3
 8004a78:	4413      	add	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004a82:	2200      	movs	r2, #0
 8004a84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a86:	7bfa      	ldrb	r2, [r7, #15]
 8004a88:	6879      	ldr	r1, [r7, #4]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	4413      	add	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	440b      	add	r3, r1
 8004a94:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004a98:	7bfa      	ldrb	r2, [r7, #15]
 8004a9a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a9c:	7bfa      	ldrb	r2, [r7, #15]
 8004a9e:	6879      	ldr	r1, [r7, #4]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	00db      	lsls	r3, r3, #3
 8004aa4:	4413      	add	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	440b      	add	r3, r1
 8004aaa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004aae:	2200      	movs	r2, #0
 8004ab0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ab2:	7bfa      	ldrb	r2, [r7, #15]
 8004ab4:	6879      	ldr	r1, [r7, #4]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	4413      	add	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	440b      	add	r3, r1
 8004ac0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ac8:	7bfa      	ldrb	r2, [r7, #15]
 8004aca:	6879      	ldr	r1, [r7, #4]
 8004acc:	4613      	mov	r3, r2
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	4413      	add	r3, r2
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	440b      	add	r3, r1
 8004ad6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004ada:	2200      	movs	r2, #0
 8004adc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004ade:	7bfa      	ldrb	r2, [r7, #15]
 8004ae0:	6879      	ldr	r1, [r7, #4]
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	00db      	lsls	r3, r3, #3
 8004ae6:	4413      	add	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	440b      	add	r3, r1
 8004aec:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004af0:	2200      	movs	r2, #0
 8004af2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004af4:	7bfb      	ldrb	r3, [r7, #15]
 8004af6:	3301      	adds	r3, #1
 8004af8:	73fb      	strb	r3, [r7, #15]
 8004afa:	7bfa      	ldrb	r2, [r7, #15]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d3b5      	bcc.n	8004a70 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	603b      	str	r3, [r7, #0]
 8004b0a:	687e      	ldr	r6, [r7, #4]
 8004b0c:	466d      	mov	r5, sp
 8004b0e:	f106 0410 	add.w	r4, r6, #16
 8004b12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004b1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004b22:	1d33      	adds	r3, r6, #4
 8004b24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b26:	6838      	ldr	r0, [r7, #0]
 8004b28:	f006 fbac 	bl	800b284 <USB_DevInit>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d005      	beq.n	8004b3e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2202      	movs	r2, #2
 8004b36:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e014      	b.n	8004b68 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d102      	bne.n	8004b5c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 f80a 	bl	8004b70 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4618      	mov	r0, r3
 8004b62:	f006 fd5a 	bl	800b61a <USB_DevDisconnect>

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3714      	adds	r7, #20
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b70 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba2:	f043 0303 	orr.w	r3, r3, #3
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004bc0:	4b34      	ldr	r3, [pc, #208]	; (8004c94 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004bc8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d101      	bne.n	8004bd6 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	e057      	b.n	8004c86 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bdc:	d90a      	bls.n	8004bf4 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004bde:	4b2d      	ldr	r3, [pc, #180]	; (8004c94 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	4a2a      	ldr	r2, [pc, #168]	; (8004c94 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bf0:	60d3      	str	r3, [r2, #12]
 8004bf2:	e007      	b.n	8004c04 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004bf4:	4b27      	ldr	r3, [pc, #156]	; (8004c94 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004bfc:	4925      	ldr	r1, [pc, #148]	; (8004c94 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004c04:	4b24      	ldr	r3, [pc, #144]	; (8004c98 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a24      	ldr	r2, [pc, #144]	; (8004c9c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c0e:	099b      	lsrs	r3, r3, #6
 8004c10:	2232      	movs	r2, #50	; 0x32
 8004c12:	fb02 f303 	mul.w	r3, r2, r3
 8004c16:	4a21      	ldr	r2, [pc, #132]	; (8004c9c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004c18:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1c:	099b      	lsrs	r3, r3, #6
 8004c1e:	3301      	adds	r3, #1
 8004c20:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004c22:	e002      	b.n	8004c2a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	3b01      	subs	r3, #1
 8004c28:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004c2a:	4b1a      	ldr	r3, [pc, #104]	; (8004c94 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d102      	bne.n	8004c3c <HAL_PWREx_ControlVoltageScaling+0x84>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1f3      	bne.n	8004c24 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d01b      	beq.n	8004c7a <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004c42:	4b15      	ldr	r3, [pc, #84]	; (8004c98 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a15      	ldr	r2, [pc, #84]	; (8004c9c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004c48:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4c:	099b      	lsrs	r3, r3, #6
 8004c4e:	2232      	movs	r2, #50	; 0x32
 8004c50:	fb02 f303 	mul.w	r3, r2, r3
 8004c54:	4a11      	ldr	r2, [pc, #68]	; (8004c9c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004c56:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5a:	099b      	lsrs	r3, r3, #6
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004c60:	e002      	b.n	8004c68 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	3b01      	subs	r3, #1
 8004c66:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004c68:	4b0a      	ldr	r3, [pc, #40]	; (8004c94 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d102      	bne.n	8004c7a <HAL_PWREx_ControlVoltageScaling+0xc2>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1f3      	bne.n	8004c62 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d101      	bne.n	8004c84 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e000      	b.n	8004c86 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	46020800 	.word	0x46020800
 8004c98:	20000000 	.word	0x20000000
 8004c9c:	10624dd3 	.word	0x10624dd3

08004ca0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004ca4:	4b04      	ldr	r3, [pc, #16]	; (8004cb8 <HAL_PWREx_GetVoltageRange+0x18>)
 8004ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	46020800 	.word	0x46020800

08004cbc <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004cc4:	4b22      	ldr	r3, [pc, #136]	; (8004d50 <HAL_PWREx_ConfigSupply+0x94>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a22      	ldr	r2, [pc, #136]	; (8004d54 <HAL_PWREx_ConfigSupply+0x98>)
 8004cca:	fba2 2303 	umull	r2, r3, r2, r3
 8004cce:	099b      	lsrs	r3, r3, #6
 8004cd0:	2232      	movs	r2, #50	; 0x32
 8004cd2:	fb02 f303 	mul.w	r3, r2, r3
 8004cd6:	4a1f      	ldr	r2, [pc, #124]	; (8004d54 <HAL_PWREx_ConfigSupply+0x98>)
 8004cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004cdc:	099b      	lsrs	r3, r3, #6
 8004cde:	3301      	adds	r3, #1
 8004ce0:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d113      	bne.n	8004d10 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004ce8:	4b1b      	ldr	r3, [pc, #108]	; (8004d58 <HAL_PWREx_ConfigSupply+0x9c>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	4a1a      	ldr	r2, [pc, #104]	; (8004d58 <HAL_PWREx_ConfigSupply+0x9c>)
 8004cee:	f023 0302 	bic.w	r3, r3, #2
 8004cf2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004cf4:	e002      	b.n	8004cfc <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004cfc:	4b16      	ldr	r3, [pc, #88]	; (8004d58 <HAL_PWREx_ConfigSupply+0x9c>)
 8004cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d00:	f003 0302 	and.w	r3, r3, #2
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d116      	bne.n	8004d36 <HAL_PWREx_ConfigSupply+0x7a>
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d1f3      	bne.n	8004cf6 <HAL_PWREx_ConfigSupply+0x3a>
 8004d0e:	e012      	b.n	8004d36 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004d10:	4b11      	ldr	r3, [pc, #68]	; (8004d58 <HAL_PWREx_ConfigSupply+0x9c>)
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	4a10      	ldr	r2, [pc, #64]	; (8004d58 <HAL_PWREx_ConfigSupply+0x9c>)
 8004d16:	f043 0302 	orr.w	r3, r3, #2
 8004d1a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004d1c:	e002      	b.n	8004d24 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	3b01      	subs	r3, #1
 8004d22:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004d24:	4b0c      	ldr	r3, [pc, #48]	; (8004d58 <HAL_PWREx_ConfigSupply+0x9c>)
 8004d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d102      	bne.n	8004d36 <HAL_PWREx_ConfigSupply+0x7a>
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1f3      	bne.n	8004d1e <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e000      	b.n	8004d42 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	20000000 	.word	0x20000000
 8004d54:	10624dd3 	.word	0x10624dd3
 8004d58:	46020800 	.word	0x46020800

08004d5c <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8004d60:	4b05      	ldr	r3, [pc, #20]	; (8004d78 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	4a04      	ldr	r2, [pc, #16]	; (8004d78 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d6a:	6113      	str	r3, [r2, #16]
}
 8004d6c:	bf00      	nop
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	46020800 	.word	0x46020800

08004d7c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004d80:	4b05      	ldr	r3, [pc, #20]	; (8004d98 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	4a04      	ldr	r2, [pc, #16]	; (8004d98 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004d86:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d8a:	6113      	str	r3, [r2, #16]
}
 8004d8c:	bf00      	nop
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	46020800 	.word	0x46020800

08004d9c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b08e      	sub	sp, #56	; 0x38
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004da4:	2300      	movs	r3, #0
 8004da6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d102      	bne.n	8004db6 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	f000 bec3 	b.w	8005b3c <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004db6:	4b9c      	ldr	r3, [pc, #624]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004db8:	69db      	ldr	r3, [r3, #28]
 8004dba:	f003 030c 	and.w	r3, r3, #12
 8004dbe:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dc0:	4b99      	ldr	r3, [pc, #612]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004dc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc4:	f003 0303 	and.w	r3, r3, #3
 8004dc8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0310 	and.w	r3, r3, #16
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 8172 	beq.w	80050bc <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d007      	beq.n	8004dee <HAL_RCC_OscConfig+0x52>
 8004dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de0:	2b0c      	cmp	r3, #12
 8004de2:	f040 80e4 	bne.w	8004fae <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de8:	2b01      	cmp	r3, #1
 8004dea:	f040 80e0 	bne.w	8004fae <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004dee:	4b8e      	ldr	r3, [pc, #568]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f003 0304 	and.w	r3, r3, #4
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d006      	beq.n	8004e08 <HAL_RCC_OscConfig+0x6c>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	69db      	ldr	r3, [r3, #28]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d102      	bne.n	8004e08 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	f000 be9a 	b.w	8005b3c <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e0c:	4b86      	ldr	r3, [pc, #536]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d004      	beq.n	8004e22 <HAL_RCC_OscConfig+0x86>
 8004e18:	4b83      	ldr	r3, [pc, #524]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004e20:	e005      	b.n	8004e2e <HAL_RCC_OscConfig+0x92>
 8004e22:	4b81      	ldr	r3, [pc, #516]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004e24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004e28:	041b      	lsls	r3, r3, #16
 8004e2a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d255      	bcs.n	8004ede <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d10a      	bne.n	8004e4e <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f001 f9d3 	bl	80061e8 <RCC_SetFlashLatencyFromMSIRange>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d002      	beq.n	8004e4e <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	f000 be77 	b.w	8005b3c <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004e4e:	4b76      	ldr	r3, [pc, #472]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	4a75      	ldr	r2, [pc, #468]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004e54:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e58:	6093      	str	r3, [r2, #8]
 8004e5a:	4b73      	ldr	r3, [pc, #460]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e66:	4970      	ldr	r1, [pc, #448]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e70:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004e74:	d309      	bcc.n	8004e8a <HAL_RCC_OscConfig+0xee>
 8004e76:	4b6c      	ldr	r3, [pc, #432]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	f023 021f 	bic.w	r2, r3, #31
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	4969      	ldr	r1, [pc, #420]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	60cb      	str	r3, [r1, #12]
 8004e88:	e07e      	b.n	8004f88 <HAL_RCC_OscConfig+0x1ec>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	da0a      	bge.n	8004ea8 <HAL_RCC_OscConfig+0x10c>
 8004e92:	4b65      	ldr	r3, [pc, #404]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a1b      	ldr	r3, [r3, #32]
 8004e9e:	015b      	lsls	r3, r3, #5
 8004ea0:	4961      	ldr	r1, [pc, #388]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	60cb      	str	r3, [r1, #12]
 8004ea6:	e06f      	b.n	8004f88 <HAL_RCC_OscConfig+0x1ec>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb0:	d30a      	bcc.n	8004ec8 <HAL_RCC_OscConfig+0x12c>
 8004eb2:	4b5d      	ldr	r3, [pc, #372]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	029b      	lsls	r3, r3, #10
 8004ec0:	4959      	ldr	r1, [pc, #356]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	60cb      	str	r3, [r1, #12]
 8004ec6:	e05f      	b.n	8004f88 <HAL_RCC_OscConfig+0x1ec>
 8004ec8:	4b57      	ldr	r3, [pc, #348]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	03db      	lsls	r3, r3, #15
 8004ed6:	4954      	ldr	r1, [pc, #336]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	60cb      	str	r3, [r1, #12]
 8004edc:	e054      	b.n	8004f88 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004ede:	4b52      	ldr	r3, [pc, #328]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	4a51      	ldr	r2, [pc, #324]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004ee4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ee8:	6093      	str	r3, [r2, #8]
 8004eea:	4b4f      	ldr	r3, [pc, #316]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef6:	494c      	ldr	r1, [pc, #304]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004f04:	d309      	bcc.n	8004f1a <HAL_RCC_OscConfig+0x17e>
 8004f06:	4b48      	ldr	r3, [pc, #288]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	f023 021f 	bic.w	r2, r3, #31
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	4945      	ldr	r1, [pc, #276]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	60cb      	str	r3, [r1, #12]
 8004f18:	e028      	b.n	8004f6c <HAL_RCC_OscConfig+0x1d0>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	da0a      	bge.n	8004f38 <HAL_RCC_OscConfig+0x19c>
 8004f22:	4b41      	ldr	r3, [pc, #260]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	015b      	lsls	r3, r3, #5
 8004f30:	493d      	ldr	r1, [pc, #244]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	60cb      	str	r3, [r1, #12]
 8004f36:	e019      	b.n	8004f6c <HAL_RCC_OscConfig+0x1d0>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f40:	d30a      	bcc.n	8004f58 <HAL_RCC_OscConfig+0x1bc>
 8004f42:	4b39      	ldr	r3, [pc, #228]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004f44:	68db      	ldr	r3, [r3, #12]
 8004f46:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a1b      	ldr	r3, [r3, #32]
 8004f4e:	029b      	lsls	r3, r3, #10
 8004f50:	4935      	ldr	r1, [pc, #212]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60cb      	str	r3, [r1, #12]
 8004f56:	e009      	b.n	8004f6c <HAL_RCC_OscConfig+0x1d0>
 8004f58:	4b33      	ldr	r3, [pc, #204]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	03db      	lsls	r3, r3, #15
 8004f66:	4930      	ldr	r1, [pc, #192]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d10a      	bne.n	8004f88 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f76:	4618      	mov	r0, r3
 8004f78:	f001 f936 	bl	80061e8 <RCC_SetFlashLatencyFromMSIRange>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d002      	beq.n	8004f88 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8004f82:	2301      	movs	r3, #1
 8004f84:	f000 bdda 	b.w	8005b3c <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004f88:	f001 f8d8 	bl	800613c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004f8c:	4b27      	ldr	r3, [pc, #156]	; (800502c <HAL_RCC_OscConfig+0x290>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7fd fe8d 	bl	8002cb0 <HAL_InitTick>
 8004f96:	4603      	mov	r3, r0
 8004f98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8004f9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 808a 	beq.w	80050ba <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8004fa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004faa:	f000 bdc7 	b.w	8005b3c <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	69db      	ldr	r3, [r3, #28]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d066      	beq.n	8005084 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004fb6:	4b1c      	ldr	r3, [pc, #112]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a1b      	ldr	r2, [pc, #108]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004fbc:	f043 0301 	orr.w	r3, r3, #1
 8004fc0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004fc2:	f7fd febf 	bl	8002d44 <HAL_GetTick>
 8004fc6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004fc8:	e009      	b.n	8004fde <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004fca:	f7fd febb 	bl	8002d44 <HAL_GetTick>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd2:	1ad3      	subs	r3, r2, r3
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	d902      	bls.n	8004fde <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	f000 bdaf 	b.w	8005b3c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004fde:	4b12      	ldr	r3, [pc, #72]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0304 	and.w	r3, r3, #4
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d0ef      	beq.n	8004fca <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004fea:	4b0f      	ldr	r3, [pc, #60]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	4a0e      	ldr	r2, [pc, #56]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004ff0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ff4:	6093      	str	r3, [r2, #8]
 8004ff6:	4b0c      	ldr	r3, [pc, #48]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005002:	4909      	ldr	r1, [pc, #36]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8005004:	4313      	orrs	r3, r2
 8005006:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005010:	d30e      	bcc.n	8005030 <HAL_RCC_OscConfig+0x294>
 8005012:	4b05      	ldr	r3, [pc, #20]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	f023 021f 	bic.w	r2, r3, #31
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a1b      	ldr	r3, [r3, #32]
 800501e:	4902      	ldr	r1, [pc, #8]	; (8005028 <HAL_RCC_OscConfig+0x28c>)
 8005020:	4313      	orrs	r3, r2
 8005022:	60cb      	str	r3, [r1, #12]
 8005024:	e04a      	b.n	80050bc <HAL_RCC_OscConfig+0x320>
 8005026:	bf00      	nop
 8005028:	46020c00 	.word	0x46020c00
 800502c:	20000004 	.word	0x20000004
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005034:	2b00      	cmp	r3, #0
 8005036:	da0a      	bge.n	800504e <HAL_RCC_OscConfig+0x2b2>
 8005038:	4b9b      	ldr	r3, [pc, #620]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a1b      	ldr	r3, [r3, #32]
 8005044:	015b      	lsls	r3, r3, #5
 8005046:	4998      	ldr	r1, [pc, #608]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 8005048:	4313      	orrs	r3, r2
 800504a:	60cb      	str	r3, [r1, #12]
 800504c:	e036      	b.n	80050bc <HAL_RCC_OscConfig+0x320>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005052:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005056:	d30a      	bcc.n	800506e <HAL_RCC_OscConfig+0x2d2>
 8005058:	4b93      	ldr	r3, [pc, #588]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 800505a:	68db      	ldr	r3, [r3, #12]
 800505c:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	029b      	lsls	r3, r3, #10
 8005066:	4990      	ldr	r1, [pc, #576]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 8005068:	4313      	orrs	r3, r2
 800506a:	60cb      	str	r3, [r1, #12]
 800506c:	e026      	b.n	80050bc <HAL_RCC_OscConfig+0x320>
 800506e:	4b8e      	ldr	r3, [pc, #568]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a1b      	ldr	r3, [r3, #32]
 800507a:	03db      	lsls	r3, r3, #15
 800507c:	498a      	ldr	r1, [pc, #552]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 800507e:	4313      	orrs	r3, r2
 8005080:	60cb      	str	r3, [r1, #12]
 8005082:	e01b      	b.n	80050bc <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8005084:	4b88      	ldr	r3, [pc, #544]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a87      	ldr	r2, [pc, #540]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 800508a:	f023 0301 	bic.w	r3, r3, #1
 800508e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005090:	f7fd fe58 	bl	8002d44 <HAL_GetTick>
 8005094:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005096:	e009      	b.n	80050ac <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005098:	f7fd fe54 	bl	8002d44 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d902      	bls.n	80050ac <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	f000 bd48 	b.w	8005b3c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80050ac:	4b7e      	ldr	r3, [pc, #504]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1ef      	bne.n	8005098 <HAL_RCC_OscConfig+0x2fc>
 80050b8:	e000      	b.n	80050bc <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80050ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 8094 	beq.w	80051f2 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80050ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050cc:	2b08      	cmp	r3, #8
 80050ce:	d005      	beq.n	80050dc <HAL_RCC_OscConfig+0x340>
 80050d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d2:	2b0c      	cmp	r3, #12
 80050d4:	d110      	bne.n	80050f8 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80050d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d8:	2b03      	cmp	r3, #3
 80050da:	d10d      	bne.n	80050f8 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050dc:	4b72      	ldr	r3, [pc, #456]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 8083 	beq.w	80051f0 <HAL_RCC_OscConfig+0x454>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d17e      	bne.n	80051f0 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	f000 bd22 	b.w	8005b3c <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005100:	d106      	bne.n	8005110 <HAL_RCC_OscConfig+0x374>
 8005102:	4b69      	ldr	r3, [pc, #420]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a68      	ldr	r2, [pc, #416]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 8005108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	e041      	b.n	8005194 <HAL_RCC_OscConfig+0x3f8>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005118:	d112      	bne.n	8005140 <HAL_RCC_OscConfig+0x3a4>
 800511a:	4b63      	ldr	r3, [pc, #396]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a62      	ldr	r2, [pc, #392]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 8005120:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005124:	6013      	str	r3, [r2, #0]
 8005126:	4b60      	ldr	r3, [pc, #384]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a5f      	ldr	r2, [pc, #380]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 800512c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005130:	6013      	str	r3, [r2, #0]
 8005132:	4b5d      	ldr	r3, [pc, #372]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a5c      	ldr	r2, [pc, #368]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 8005138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800513c:	6013      	str	r3, [r2, #0]
 800513e:	e029      	b.n	8005194 <HAL_RCC_OscConfig+0x3f8>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8005148:	d112      	bne.n	8005170 <HAL_RCC_OscConfig+0x3d4>
 800514a:	4b57      	ldr	r3, [pc, #348]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a56      	ldr	r2, [pc, #344]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 8005150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005154:	6013      	str	r3, [r2, #0]
 8005156:	4b54      	ldr	r3, [pc, #336]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a53      	ldr	r2, [pc, #332]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 800515c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005160:	6013      	str	r3, [r2, #0]
 8005162:	4b51      	ldr	r3, [pc, #324]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a50      	ldr	r2, [pc, #320]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 8005168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800516c:	6013      	str	r3, [r2, #0]
 800516e:	e011      	b.n	8005194 <HAL_RCC_OscConfig+0x3f8>
 8005170:	4b4d      	ldr	r3, [pc, #308]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a4c      	ldr	r2, [pc, #304]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 8005176:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800517a:	6013      	str	r3, [r2, #0]
 800517c:	4b4a      	ldr	r3, [pc, #296]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a49      	ldr	r2, [pc, #292]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 8005182:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005186:	6013      	str	r3, [r2, #0]
 8005188:	4b47      	ldr	r3, [pc, #284]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a46      	ldr	r2, [pc, #280]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 800518e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005192:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d014      	beq.n	80051c6 <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 800519c:	f7fd fdd2 	bl	8002d44 <HAL_GetTick>
 80051a0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051a2:	e009      	b.n	80051b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051a4:	f7fd fdce 	bl	8002d44 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b64      	cmp	r3, #100	; 0x64
 80051b0:	d902      	bls.n	80051b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	f000 bcc2 	b.w	8005b3c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051b8:	4b3b      	ldr	r3, [pc, #236]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0ef      	beq.n	80051a4 <HAL_RCC_OscConfig+0x408>
 80051c4:	e015      	b.n	80051f2 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80051c6:	f7fd fdbd 	bl	8002d44 <HAL_GetTick>
 80051ca:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051cc:	e009      	b.n	80051e2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051ce:	f7fd fdb9 	bl	8002d44 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	2b64      	cmp	r3, #100	; 0x64
 80051da:	d902      	bls.n	80051e2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	f000 bcad 	b.w	8005b3c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051e2:	4b31      	ldr	r3, [pc, #196]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1ef      	bne.n	80051ce <HAL_RCC_OscConfig+0x432>
 80051ee:	e000      	b.n	80051f2 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d066      	beq.n	80052cc <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80051fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005200:	2b04      	cmp	r3, #4
 8005202:	d005      	beq.n	8005210 <HAL_RCC_OscConfig+0x474>
 8005204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005206:	2b0c      	cmp	r3, #12
 8005208:	d11a      	bne.n	8005240 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800520a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520c:	2b02      	cmp	r3, #2
 800520e:	d117      	bne.n	8005240 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005210:	4b25      	ldr	r3, [pc, #148]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005218:	2b00      	cmp	r3, #0
 800521a:	d006      	beq.n	800522a <HAL_RCC_OscConfig+0x48e>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d102      	bne.n	800522a <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	f000 bc89 	b.w	8005b3c <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800522a:	4b1f      	ldr	r3, [pc, #124]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	041b      	lsls	r3, r3, #16
 8005238:	491b      	ldr	r1, [pc, #108]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 800523a:	4313      	orrs	r3, r2
 800523c:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800523e:	e045      	b.n	80052cc <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d024      	beq.n	8005292 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8005248:	4b17      	ldr	r3, [pc, #92]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a16      	ldr	r2, [pc, #88]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 800524e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005252:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005254:	f7fd fd76 	bl	8002d44 <HAL_GetTick>
 8005258:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800525a:	e009      	b.n	8005270 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800525c:	f7fd fd72 	bl	8002d44 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d902      	bls.n	8005270 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	f000 bc66 	b.w	8005b3c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005270:	4b0d      	ldr	r3, [pc, #52]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005278:	2b00      	cmp	r3, #0
 800527a:	d0ef      	beq.n	800525c <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800527c:	4b0a      	ldr	r3, [pc, #40]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	691b      	ldr	r3, [r3, #16]
 8005288:	041b      	lsls	r3, r3, #16
 800528a:	4907      	ldr	r1, [pc, #28]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 800528c:	4313      	orrs	r3, r2
 800528e:	610b      	str	r3, [r1, #16]
 8005290:	e01c      	b.n	80052cc <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8005292:	4b05      	ldr	r3, [pc, #20]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a04      	ldr	r2, [pc, #16]	; (80052a8 <HAL_RCC_OscConfig+0x50c>)
 8005298:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800529c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800529e:	f7fd fd51 	bl	8002d44 <HAL_GetTick>
 80052a2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052a4:	e00c      	b.n	80052c0 <HAL_RCC_OscConfig+0x524>
 80052a6:	bf00      	nop
 80052a8:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052ac:	f7fd fd4a 	bl	8002d44 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d902      	bls.n	80052c0 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	f000 bc3e 	b.w	8005b3c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052c0:	4baf      	ldr	r3, [pc, #700]	; (8005580 <HAL_RCC_OscConfig+0x7e4>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1ef      	bne.n	80052ac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0308 	and.w	r3, r3, #8
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	f000 80c7 	beq.w	8005468 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80052da:	2300      	movs	r3, #0
 80052dc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052e0:	4ba7      	ldr	r3, [pc, #668]	; (8005580 <HAL_RCC_OscConfig+0x7e4>)
 80052e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052e6:	f003 0304 	and.w	r3, r3, #4
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d111      	bne.n	8005312 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ee:	4ba4      	ldr	r3, [pc, #656]	; (8005580 <HAL_RCC_OscConfig+0x7e4>)
 80052f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052f4:	4aa2      	ldr	r2, [pc, #648]	; (8005580 <HAL_RCC_OscConfig+0x7e4>)
 80052f6:	f043 0304 	orr.w	r3, r3, #4
 80052fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80052fe:	4ba0      	ldr	r3, [pc, #640]	; (8005580 <HAL_RCC_OscConfig+0x7e4>)
 8005300:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	617b      	str	r3, [r7, #20]
 800530a:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 800530c:	2301      	movs	r3, #1
 800530e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005312:	4b9c      	ldr	r3, [pc, #624]	; (8005584 <HAL_RCC_OscConfig+0x7e8>)
 8005314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005316:	f003 0301 	and.w	r3, r3, #1
 800531a:	2b00      	cmp	r3, #0
 800531c:	d118      	bne.n	8005350 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800531e:	4b99      	ldr	r3, [pc, #612]	; (8005584 <HAL_RCC_OscConfig+0x7e8>)
 8005320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005322:	4a98      	ldr	r2, [pc, #608]	; (8005584 <HAL_RCC_OscConfig+0x7e8>)
 8005324:	f043 0301 	orr.w	r3, r3, #1
 8005328:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800532a:	f7fd fd0b 	bl	8002d44 <HAL_GetTick>
 800532e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005330:	e008      	b.n	8005344 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005332:	f7fd fd07 	bl	8002d44 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	2b02      	cmp	r3, #2
 800533e:	d901      	bls.n	8005344 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8005340:	2303      	movs	r3, #3
 8005342:	e3fb      	b.n	8005b3c <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005344:	4b8f      	ldr	r3, [pc, #572]	; (8005584 <HAL_RCC_OscConfig+0x7e8>)
 8005346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005348:	f003 0301 	and.w	r3, r3, #1
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0f0      	beq.n	8005332 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	695b      	ldr	r3, [r3, #20]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d05f      	beq.n	8005418 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8005358:	4b89      	ldr	r3, [pc, #548]	; (8005580 <HAL_RCC_OscConfig+0x7e4>)
 800535a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800535e:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	699a      	ldr	r2, [r3, #24]
 8005364:	6a3b      	ldr	r3, [r7, #32]
 8005366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800536a:	429a      	cmp	r2, r3
 800536c:	d037      	beq.n	80053de <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800536e:	6a3b      	ldr	r3, [r7, #32]
 8005370:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d006      	beq.n	8005386 <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e3da      	b.n	8005b3c <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8005386:	6a3b      	ldr	r3, [r7, #32]
 8005388:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d01b      	beq.n	80053c8 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8005390:	4b7b      	ldr	r3, [pc, #492]	; (8005580 <HAL_RCC_OscConfig+0x7e4>)
 8005392:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005396:	4a7a      	ldr	r2, [pc, #488]	; (8005580 <HAL_RCC_OscConfig+0x7e4>)
 8005398:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800539c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 80053a0:	f7fd fcd0 	bl	8002d44 <HAL_GetTick>
 80053a4:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80053a6:	e008      	b.n	80053ba <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053a8:	f7fd fccc 	bl	8002d44 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e3c0      	b.n	8005b3c <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80053ba:	4b71      	ldr	r3, [pc, #452]	; (8005580 <HAL_RCC_OscConfig+0x7e4>)
 80053bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1ef      	bne.n	80053a8 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80053c8:	4b6d      	ldr	r3, [pc, #436]	; (8005580 <HAL_RCC_OscConfig+0x7e4>)
 80053ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053ce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	699b      	ldr	r3, [r3, #24]
 80053d6:	496a      	ldr	r1, [pc, #424]	; (8005580 <HAL_RCC_OscConfig+0x7e4>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80053de:	4b68      	ldr	r3, [pc, #416]	; (8005580 <HAL_RCC_OscConfig+0x7e4>)
 80053e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053e4:	4a66      	ldr	r2, [pc, #408]	; (8005580 <HAL_RCC_OscConfig+0x7e4>)
 80053e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053ea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80053ee:	f7fd fca9 	bl	8002d44 <HAL_GetTick>
 80053f2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80053f4:	e008      	b.n	8005408 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053f6:	f7fd fca5 	bl	8002d44 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	2b02      	cmp	r3, #2
 8005402:	d901      	bls.n	8005408 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8005404:	2303      	movs	r3, #3
 8005406:	e399      	b.n	8005b3c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005408:	4b5d      	ldr	r3, [pc, #372]	; (8005580 <HAL_RCC_OscConfig+0x7e4>)
 800540a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800540e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d0ef      	beq.n	80053f6 <HAL_RCC_OscConfig+0x65a>
 8005416:	e01b      	b.n	8005450 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8005418:	4b59      	ldr	r3, [pc, #356]	; (8005580 <HAL_RCC_OscConfig+0x7e4>)
 800541a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800541e:	4a58      	ldr	r2, [pc, #352]	; (8005580 <HAL_RCC_OscConfig+0x7e4>)
 8005420:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8005424:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8005428:	f7fd fc8c 	bl	8002d44 <HAL_GetTick>
 800542c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005430:	f7fd fc88 	bl	8002d44 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e37c      	b.n	8005b3c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005442:	4b4f      	ldr	r3, [pc, #316]	; (8005580 <HAL_RCC_OscConfig+0x7e4>)
 8005444:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005448:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1ef      	bne.n	8005430 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005450:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005454:	2b01      	cmp	r3, #1
 8005456:	d107      	bne.n	8005468 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005458:	4b49      	ldr	r3, [pc, #292]	; (8005580 <HAL_RCC_OscConfig+0x7e4>)
 800545a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800545e:	4a48      	ldr	r2, [pc, #288]	; (8005580 <HAL_RCC_OscConfig+0x7e4>)
 8005460:	f023 0304 	bic.w	r3, r3, #4
 8005464:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	f000 8112 	beq.w	800569a <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8005476:	2300      	movs	r3, #0
 8005478:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800547c:	4b40      	ldr	r3, [pc, #256]	; (8005580 <HAL_RCC_OscConfig+0x7e4>)
 800547e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005482:	f003 0304 	and.w	r3, r3, #4
 8005486:	2b00      	cmp	r3, #0
 8005488:	d111      	bne.n	80054ae <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800548a:	4b3d      	ldr	r3, [pc, #244]	; (8005580 <HAL_RCC_OscConfig+0x7e4>)
 800548c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005490:	4a3b      	ldr	r2, [pc, #236]	; (8005580 <HAL_RCC_OscConfig+0x7e4>)
 8005492:	f043 0304 	orr.w	r3, r3, #4
 8005496:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800549a:	4b39      	ldr	r3, [pc, #228]	; (8005580 <HAL_RCC_OscConfig+0x7e4>)
 800549c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	613b      	str	r3, [r7, #16]
 80054a6:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80054a8:	2301      	movs	r3, #1
 80054aa:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80054ae:	4b35      	ldr	r3, [pc, #212]	; (8005584 <HAL_RCC_OscConfig+0x7e8>)
 80054b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d118      	bne.n	80054ec <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80054ba:	4b32      	ldr	r3, [pc, #200]	; (8005584 <HAL_RCC_OscConfig+0x7e8>)
 80054bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054be:	4a31      	ldr	r2, [pc, #196]	; (8005584 <HAL_RCC_OscConfig+0x7e8>)
 80054c0:	f043 0301 	orr.w	r3, r3, #1
 80054c4:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054c6:	f7fd fc3d 	bl	8002d44 <HAL_GetTick>
 80054ca:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80054cc:	e008      	b.n	80054e0 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ce:	f7fd fc39 	bl	8002d44 <HAL_GetTick>
 80054d2:	4602      	mov	r2, r0
 80054d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d6:	1ad3      	subs	r3, r2, r3
 80054d8:	2b02      	cmp	r3, #2
 80054da:	d901      	bls.n	80054e0 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e32d      	b.n	8005b3c <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80054e0:	4b28      	ldr	r3, [pc, #160]	; (8005584 <HAL_RCC_OscConfig+0x7e8>)
 80054e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e4:	f003 0301 	and.w	r3, r3, #1
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0f0      	beq.n	80054ce <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d01f      	beq.n	8005538 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f003 0304 	and.w	r3, r3, #4
 8005500:	2b00      	cmp	r3, #0
 8005502:	d010      	beq.n	8005526 <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005504:	4b1e      	ldr	r3, [pc, #120]	; (8005580 <HAL_RCC_OscConfig+0x7e4>)
 8005506:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800550a:	4a1d      	ldr	r2, [pc, #116]	; (8005580 <HAL_RCC_OscConfig+0x7e4>)
 800550c:	f043 0304 	orr.w	r3, r3, #4
 8005510:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005514:	4b1a      	ldr	r3, [pc, #104]	; (8005580 <HAL_RCC_OscConfig+0x7e4>)
 8005516:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800551a:	4a19      	ldr	r2, [pc, #100]	; (8005580 <HAL_RCC_OscConfig+0x7e4>)
 800551c:	f043 0301 	orr.w	r3, r3, #1
 8005520:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005524:	e018      	b.n	8005558 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005526:	4b16      	ldr	r3, [pc, #88]	; (8005580 <HAL_RCC_OscConfig+0x7e4>)
 8005528:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800552c:	4a14      	ldr	r2, [pc, #80]	; (8005580 <HAL_RCC_OscConfig+0x7e4>)
 800552e:	f043 0301 	orr.w	r3, r3, #1
 8005532:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005536:	e00f      	b.n	8005558 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005538:	4b11      	ldr	r3, [pc, #68]	; (8005580 <HAL_RCC_OscConfig+0x7e4>)
 800553a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800553e:	4a10      	ldr	r2, [pc, #64]	; (8005580 <HAL_RCC_OscConfig+0x7e4>)
 8005540:	f023 0301 	bic.w	r3, r3, #1
 8005544:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005548:	4b0d      	ldr	r3, [pc, #52]	; (8005580 <HAL_RCC_OscConfig+0x7e4>)
 800554a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800554e:	4a0c      	ldr	r2, [pc, #48]	; (8005580 <HAL_RCC_OscConfig+0x7e4>)
 8005550:	f023 0304 	bic.w	r3, r3, #4
 8005554:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	689b      	ldr	r3, [r3, #8]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d058      	beq.n	8005612 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8005560:	f7fd fbf0 	bl	8002d44 <HAL_GetTick>
 8005564:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005566:	e00f      	b.n	8005588 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005568:	f7fd fbec 	bl	8002d44 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	f241 3288 	movw	r2, #5000	; 0x1388
 8005576:	4293      	cmp	r3, r2
 8005578:	d906      	bls.n	8005588 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e2de      	b.n	8005b3c <HAL_RCC_OscConfig+0xda0>
 800557e:	bf00      	nop
 8005580:	46020c00 	.word	0x46020c00
 8005584:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005588:	4b9c      	ldr	r3, [pc, #624]	; (80057fc <HAL_RCC_OscConfig+0xa60>)
 800558a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800558e:	f003 0302 	and.w	r3, r3, #2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d0e8      	beq.n	8005568 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d01b      	beq.n	80055da <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80055a2:	4b96      	ldr	r3, [pc, #600]	; (80057fc <HAL_RCC_OscConfig+0xa60>)
 80055a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055a8:	4a94      	ldr	r2, [pc, #592]	; (80057fc <HAL_RCC_OscConfig+0xa60>)
 80055aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80055b2:	e00a      	b.n	80055ca <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055b4:	f7fd fbc6 	bl	8002d44 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d901      	bls.n	80055ca <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 80055c6:	2303      	movs	r3, #3
 80055c8:	e2b8      	b.n	8005b3c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80055ca:	4b8c      	ldr	r3, [pc, #560]	; (80057fc <HAL_RCC_OscConfig+0xa60>)
 80055cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d0ed      	beq.n	80055b4 <HAL_RCC_OscConfig+0x818>
 80055d8:	e053      	b.n	8005682 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80055da:	4b88      	ldr	r3, [pc, #544]	; (80057fc <HAL_RCC_OscConfig+0xa60>)
 80055dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055e0:	4a86      	ldr	r2, [pc, #536]	; (80057fc <HAL_RCC_OscConfig+0xa60>)
 80055e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80055ea:	e00a      	b.n	8005602 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ec:	f7fd fbaa 	bl	8002d44 <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e29c      	b.n	8005b3c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005602:	4b7e      	ldr	r3, [pc, #504]	; (80057fc <HAL_RCC_OscConfig+0xa60>)
 8005604:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005608:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800560c:	2b00      	cmp	r3, #0
 800560e:	d1ed      	bne.n	80055ec <HAL_RCC_OscConfig+0x850>
 8005610:	e037      	b.n	8005682 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8005612:	f7fd fb97 	bl	8002d44 <HAL_GetTick>
 8005616:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005618:	e00a      	b.n	8005630 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800561a:	f7fd fb93 	bl	8002d44 <HAL_GetTick>
 800561e:	4602      	mov	r2, r0
 8005620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	f241 3288 	movw	r2, #5000	; 0x1388
 8005628:	4293      	cmp	r3, r2
 800562a:	d901      	bls.n	8005630 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e285      	b.n	8005b3c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005630:	4b72      	ldr	r3, [pc, #456]	; (80057fc <HAL_RCC_OscConfig+0xa60>)
 8005632:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005636:	f003 0302 	and.w	r3, r3, #2
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1ed      	bne.n	800561a <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800563e:	4b6f      	ldr	r3, [pc, #444]	; (80057fc <HAL_RCC_OscConfig+0xa60>)
 8005640:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005648:	2b00      	cmp	r3, #0
 800564a:	d01a      	beq.n	8005682 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800564c:	4b6b      	ldr	r3, [pc, #428]	; (80057fc <HAL_RCC_OscConfig+0xa60>)
 800564e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005652:	4a6a      	ldr	r2, [pc, #424]	; (80057fc <HAL_RCC_OscConfig+0xa60>)
 8005654:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005658:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800565c:	e00a      	b.n	8005674 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800565e:	f7fd fb71 	bl	8002d44 <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	f241 3288 	movw	r2, #5000	; 0x1388
 800566c:	4293      	cmp	r3, r2
 800566e:	d901      	bls.n	8005674 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e263      	b.n	8005b3c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005674:	4b61      	ldr	r3, [pc, #388]	; (80057fc <HAL_RCC_OscConfig+0xa60>)
 8005676:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800567a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1ed      	bne.n	800565e <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005682:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005686:	2b01      	cmp	r3, #1
 8005688:	d107      	bne.n	800569a <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800568a:	4b5c      	ldr	r3, [pc, #368]	; (80057fc <HAL_RCC_OscConfig+0xa60>)
 800568c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005690:	4a5a      	ldr	r2, [pc, #360]	; (80057fc <HAL_RCC_OscConfig+0xa60>)
 8005692:	f023 0304 	bic.w	r3, r3, #4
 8005696:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f003 0320 	and.w	r3, r3, #32
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d036      	beq.n	8005714 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d019      	beq.n	80056e2 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80056ae:	4b53      	ldr	r3, [pc, #332]	; (80057fc <HAL_RCC_OscConfig+0xa60>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a52      	ldr	r2, [pc, #328]	; (80057fc <HAL_RCC_OscConfig+0xa60>)
 80056b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80056b8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80056ba:	f7fd fb43 	bl	8002d44 <HAL_GetTick>
 80056be:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80056c0:	e008      	b.n	80056d4 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056c2:	f7fd fb3f 	bl	8002d44 <HAL_GetTick>
 80056c6:	4602      	mov	r2, r0
 80056c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ca:	1ad3      	subs	r3, r2, r3
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d901      	bls.n	80056d4 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 80056d0:	2303      	movs	r3, #3
 80056d2:	e233      	b.n	8005b3c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80056d4:	4b49      	ldr	r3, [pc, #292]	; (80057fc <HAL_RCC_OscConfig+0xa60>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d0f0      	beq.n	80056c2 <HAL_RCC_OscConfig+0x926>
 80056e0:	e018      	b.n	8005714 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80056e2:	4b46      	ldr	r3, [pc, #280]	; (80057fc <HAL_RCC_OscConfig+0xa60>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a45      	ldr	r2, [pc, #276]	; (80057fc <HAL_RCC_OscConfig+0xa60>)
 80056e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80056ec:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80056ee:	f7fd fb29 	bl	8002d44 <HAL_GetTick>
 80056f2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80056f4:	e008      	b.n	8005708 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056f6:	f7fd fb25 	bl	8002d44 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b02      	cmp	r3, #2
 8005702:	d901      	bls.n	8005708 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e219      	b.n	8005b3c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005708:	4b3c      	ldr	r3, [pc, #240]	; (80057fc <HAL_RCC_OscConfig+0xa60>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1f0      	bne.n	80056f6 <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800571c:	2b00      	cmp	r3, #0
 800571e:	d036      	beq.n	800578e <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005724:	2b00      	cmp	r3, #0
 8005726:	d019      	beq.n	800575c <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8005728:	4b34      	ldr	r3, [pc, #208]	; (80057fc <HAL_RCC_OscConfig+0xa60>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a33      	ldr	r2, [pc, #204]	; (80057fc <HAL_RCC_OscConfig+0xa60>)
 800572e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005732:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005734:	f7fd fb06 	bl	8002d44 <HAL_GetTick>
 8005738:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800573a:	e008      	b.n	800574e <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800573c:	f7fd fb02 	bl	8002d44 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b02      	cmp	r3, #2
 8005748:	d901      	bls.n	800574e <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	e1f6      	b.n	8005b3c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800574e:	4b2b      	ldr	r3, [pc, #172]	; (80057fc <HAL_RCC_OscConfig+0xa60>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005756:	2b00      	cmp	r3, #0
 8005758:	d0f0      	beq.n	800573c <HAL_RCC_OscConfig+0x9a0>
 800575a:	e018      	b.n	800578e <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800575c:	4b27      	ldr	r3, [pc, #156]	; (80057fc <HAL_RCC_OscConfig+0xa60>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a26      	ldr	r2, [pc, #152]	; (80057fc <HAL_RCC_OscConfig+0xa60>)
 8005762:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005766:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005768:	f7fd faec 	bl	8002d44 <HAL_GetTick>
 800576c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800576e:	e008      	b.n	8005782 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005770:	f7fd fae8 	bl	8002d44 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b02      	cmp	r3, #2
 800577c:	d901      	bls.n	8005782 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e1dc      	b.n	8005b3c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005782:	4b1e      	ldr	r3, [pc, #120]	; (80057fc <HAL_RCC_OscConfig+0xa60>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d1f0      	bne.n	8005770 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005796:	2b00      	cmp	r3, #0
 8005798:	d07f      	beq.n	800589a <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d062      	beq.n	8005868 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 80057a2:	4b16      	ldr	r3, [pc, #88]	; (80057fc <HAL_RCC_OscConfig+0xa60>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	4a15      	ldr	r2, [pc, #84]	; (80057fc <HAL_RCC_OscConfig+0xa60>)
 80057a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80057ac:	6093      	str	r3, [r2, #8]
 80057ae:	4b13      	ldr	r3, [pc, #76]	; (80057fc <HAL_RCC_OscConfig+0xa60>)
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057ba:	4910      	ldr	r1, [pc, #64]	; (80057fc <HAL_RCC_OscConfig+0xa60>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80057c8:	d309      	bcc.n	80057de <HAL_RCC_OscConfig+0xa42>
 80057ca:	4b0c      	ldr	r3, [pc, #48]	; (80057fc <HAL_RCC_OscConfig+0xa60>)
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	f023 021f 	bic.w	r2, r3, #31
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	4909      	ldr	r1, [pc, #36]	; (80057fc <HAL_RCC_OscConfig+0xa60>)
 80057d8:	4313      	orrs	r3, r2
 80057da:	60cb      	str	r3, [r1, #12]
 80057dc:	e02a      	b.n	8005834 <HAL_RCC_OscConfig+0xa98>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	da0c      	bge.n	8005800 <HAL_RCC_OscConfig+0xa64>
 80057e6:	4b05      	ldr	r3, [pc, #20]	; (80057fc <HAL_RCC_OscConfig+0xa60>)
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	015b      	lsls	r3, r3, #5
 80057f4:	4901      	ldr	r1, [pc, #4]	; (80057fc <HAL_RCC_OscConfig+0xa60>)
 80057f6:	4313      	orrs	r3, r2
 80057f8:	60cb      	str	r3, [r1, #12]
 80057fa:	e01b      	b.n	8005834 <HAL_RCC_OscConfig+0xa98>
 80057fc:	46020c00 	.word	0x46020c00
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005808:	d30a      	bcc.n	8005820 <HAL_RCC_OscConfig+0xa84>
 800580a:	4ba5      	ldr	r3, [pc, #660]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 800580c:	68db      	ldr	r3, [r3, #12]
 800580e:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a1b      	ldr	r3, [r3, #32]
 8005816:	029b      	lsls	r3, r3, #10
 8005818:	49a1      	ldr	r1, [pc, #644]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 800581a:	4313      	orrs	r3, r2
 800581c:	60cb      	str	r3, [r1, #12]
 800581e:	e009      	b.n	8005834 <HAL_RCC_OscConfig+0xa98>
 8005820:	4b9f      	ldr	r3, [pc, #636]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a1b      	ldr	r3, [r3, #32]
 800582c:	03db      	lsls	r3, r3, #15
 800582e:	499c      	ldr	r1, [pc, #624]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 8005830:	4313      	orrs	r3, r2
 8005832:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8005834:	4b9a      	ldr	r3, [pc, #616]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4a99      	ldr	r2, [pc, #612]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 800583a:	f043 0310 	orr.w	r3, r3, #16
 800583e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005840:	f7fd fa80 	bl	8002d44 <HAL_GetTick>
 8005844:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005846:	e008      	b.n	800585a <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005848:	f7fd fa7c 	bl	8002d44 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	2b02      	cmp	r3, #2
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e170      	b.n	8005b3c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800585a:	4b91      	ldr	r3, [pc, #580]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0320 	and.w	r3, r3, #32
 8005862:	2b00      	cmp	r3, #0
 8005864:	d0f0      	beq.n	8005848 <HAL_RCC_OscConfig+0xaac>
 8005866:	e018      	b.n	800589a <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8005868:	4b8d      	ldr	r3, [pc, #564]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a8c      	ldr	r2, [pc, #560]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 800586e:	f023 0310 	bic.w	r3, r3, #16
 8005872:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005874:	f7fd fa66 	bl	8002d44 <HAL_GetTick>
 8005878:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800587a:	e008      	b.n	800588e <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800587c:	f7fd fa62 	bl	8002d44 <HAL_GetTick>
 8005880:	4602      	mov	r2, r0
 8005882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005884:	1ad3      	subs	r3, r2, r3
 8005886:	2b02      	cmp	r3, #2
 8005888:	d901      	bls.n	800588e <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e156      	b.n	8005b3c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800588e:	4b84      	ldr	r3, [pc, #528]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f003 0320 	and.w	r3, r3, #32
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1f0      	bne.n	800587c <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589e:	2b00      	cmp	r3, #0
 80058a0:	f000 814b 	beq.w	8005b3a <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 80058a4:	2300      	movs	r3, #0
 80058a6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80058aa:	4b7d      	ldr	r3, [pc, #500]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 80058ac:	69db      	ldr	r3, [r3, #28]
 80058ae:	f003 030c 	and.w	r3, r3, #12
 80058b2:	2b0c      	cmp	r3, #12
 80058b4:	f000 80fa 	beq.w	8005aac <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058bc:	2b02      	cmp	r3, #2
 80058be:	f040 80cc 	bne.w	8005a5a <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80058c2:	4b77      	ldr	r3, [pc, #476]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a76      	ldr	r2, [pc, #472]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 80058c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058cc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80058ce:	f7fd fa39 	bl	8002d44 <HAL_GetTick>
 80058d2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80058d4:	e008      	b.n	80058e8 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058d6:	f7fd fa35 	bl	8002d44 <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d901      	bls.n	80058e8 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e129      	b.n	8005b3c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80058e8:	4b6d      	ldr	r3, [pc, #436]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1f0      	bne.n	80058d6 <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80058f4:	4b6a      	ldr	r3, [pc, #424]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 80058f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058fa:	f003 0304 	and.w	r3, r3, #4
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d111      	bne.n	8005926 <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8005902:	4b67      	ldr	r3, [pc, #412]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 8005904:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005908:	4a65      	ldr	r2, [pc, #404]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 800590a:	f043 0304 	orr.w	r3, r3, #4
 800590e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005912:	4b63      	ldr	r3, [pc, #396]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 8005914:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005918:	f003 0304 	and.w	r3, r3, #4
 800591c:	60fb      	str	r3, [r7, #12]
 800591e:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8005920:	2301      	movs	r3, #1
 8005922:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8005926:	4b5f      	ldr	r3, [pc, #380]	; (8005aa4 <HAL_RCC_OscConfig+0xd08>)
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800592e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005932:	d102      	bne.n	800593a <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8005934:	2301      	movs	r3, #1
 8005936:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800593a:	4b5a      	ldr	r3, [pc, #360]	; (8005aa4 <HAL_RCC_OscConfig+0xd08>)
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	4a59      	ldr	r2, [pc, #356]	; (8005aa4 <HAL_RCC_OscConfig+0xd08>)
 8005940:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005944:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8005946:	4b56      	ldr	r3, [pc, #344]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 8005948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800594e:	f023 0303 	bic.w	r3, r3, #3
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005956:	687a      	ldr	r2, [r7, #4]
 8005958:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800595a:	3a01      	subs	r2, #1
 800595c:	0212      	lsls	r2, r2, #8
 800595e:	4311      	orrs	r1, r2
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005964:	430a      	orrs	r2, r1
 8005966:	494e      	ldr	r1, [pc, #312]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 8005968:	4313      	orrs	r3, r2
 800596a:	628b      	str	r3, [r1, #40]	; 0x28
 800596c:	4b4c      	ldr	r3, [pc, #304]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 800596e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005970:	4b4d      	ldr	r3, [pc, #308]	; (8005aa8 <HAL_RCC_OscConfig+0xd0c>)
 8005972:	4013      	ands	r3, r2
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005978:	3a01      	subs	r2, #1
 800597a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005982:	3a01      	subs	r2, #1
 8005984:	0252      	lsls	r2, r2, #9
 8005986:	b292      	uxth	r2, r2
 8005988:	4311      	orrs	r1, r2
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800598e:	3a01      	subs	r2, #1
 8005990:	0412      	lsls	r2, r2, #16
 8005992:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005996:	4311      	orrs	r1, r2
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800599c:	3a01      	subs	r2, #1
 800599e:	0612      	lsls	r2, r2, #24
 80059a0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80059a4:	430a      	orrs	r2, r1
 80059a6:	493e      	ldr	r1, [pc, #248]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 80059ac:	4b3c      	ldr	r3, [pc, #240]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 80059ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059b0:	4a3b      	ldr	r2, [pc, #236]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 80059b2:	f023 0310 	bic.w	r3, r3, #16
 80059b6:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80059b8:	4b39      	ldr	r3, [pc, #228]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 80059ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059c0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80059c8:	00d2      	lsls	r2, r2, #3
 80059ca:	4935      	ldr	r1, [pc, #212]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 80059d0:	4b33      	ldr	r3, [pc, #204]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 80059d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d4:	4a32      	ldr	r2, [pc, #200]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 80059d6:	f043 0310 	orr.w	r3, r3, #16
 80059da:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80059dc:	4b30      	ldr	r3, [pc, #192]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 80059de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e0:	f023 020c 	bic.w	r2, r3, #12
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059e8:	492d      	ldr	r1, [pc, #180]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 80059ea:	4313      	orrs	r3, r2
 80059ec:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 80059ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d105      	bne.n	8005a02 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80059f6:	4b2b      	ldr	r3, [pc, #172]	; (8005aa4 <HAL_RCC_OscConfig+0xd08>)
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	4a2a      	ldr	r2, [pc, #168]	; (8005aa4 <HAL_RCC_OscConfig+0xd08>)
 80059fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a00:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8005a02:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d107      	bne.n	8005a1a <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8005a0a:	4b25      	ldr	r3, [pc, #148]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 8005a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a10:	4a23      	ldr	r2, [pc, #140]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 8005a12:	f023 0304 	bic.w	r3, r3, #4
 8005a16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005a1a:	4b21      	ldr	r3, [pc, #132]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 8005a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1e:	4a20      	ldr	r2, [pc, #128]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 8005a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a24:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8005a26:	4b1e      	ldr	r3, [pc, #120]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a1d      	ldr	r2, [pc, #116]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 8005a2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a30:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005a32:	f7fd f987 	bl	8002d44 <HAL_GetTick>
 8005a36:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005a38:	e008      	b.n	8005a4c <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a3a:	f7fd f983 	bl	8002d44 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d901      	bls.n	8005a4c <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e077      	b.n	8005b3c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005a4c:	4b14      	ldr	r3, [pc, #80]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0f0      	beq.n	8005a3a <HAL_RCC_OscConfig+0xc9e>
 8005a58:	e06f      	b.n	8005b3a <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005a5a:	4b11      	ldr	r3, [pc, #68]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a10      	ldr	r2, [pc, #64]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 8005a60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a64:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005a66:	f7fd f96d 	bl	8002d44 <HAL_GetTick>
 8005a6a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005a6c:	e008      	b.n	8005a80 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a6e:	f7fd f969 	bl	8002d44 <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d901      	bls.n	8005a80 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8005a7c:	2303      	movs	r3, #3
 8005a7e:	e05d      	b.n	8005b3c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005a80:	4b07      	ldr	r3, [pc, #28]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d1f0      	bne.n	8005a6e <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005a8c:	4b04      	ldr	r3, [pc, #16]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 8005a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a90:	4a03      	ldr	r2, [pc, #12]	; (8005aa0 <HAL_RCC_OscConfig+0xd04>)
 8005a92:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8005a96:	f023 0303 	bic.w	r3, r3, #3
 8005a9a:	6293      	str	r3, [r2, #40]	; 0x28
 8005a9c:	e04d      	b.n	8005b3a <HAL_RCC_OscConfig+0xd9e>
 8005a9e:	bf00      	nop
 8005aa0:	46020c00 	.word	0x46020c00
 8005aa4:	46020800 	.word	0x46020800
 8005aa8:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005aac:	4b25      	ldr	r3, [pc, #148]	; (8005b44 <HAL_RCC_OscConfig+0xda8>)
 8005aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab0:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005ab2:	4b24      	ldr	r3, [pc, #144]	; (8005b44 <HAL_RCC_OscConfig+0xda8>)
 8005ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab6:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d03a      	beq.n	8005b36 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	f003 0203 	and.w	r2, r3, #3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d133      	bne.n	8005b36 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005ace:	69fb      	ldr	r3, [r7, #28]
 8005ad0:	0a1b      	lsrs	r3, r3, #8
 8005ad2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ada:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d12a      	bne.n	8005b36 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	0b1b      	lsrs	r3, r3, #12
 8005ae4:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005aec:	429a      	cmp	r2, r3
 8005aee:	d122      	bne.n	8005b36 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005afa:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d11a      	bne.n	8005b36 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	0a5b      	lsrs	r3, r3, #9
 8005b04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b0c:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d111      	bne.n	8005b36 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005b12:	69bb      	ldr	r3, [r7, #24]
 8005b14:	0c1b      	lsrs	r3, r3, #16
 8005b16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b1e:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d108      	bne.n	8005b36 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	0e1b      	lsrs	r3, r3, #24
 8005b28:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b30:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d001      	beq.n	8005b3a <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	e000      	b.n	8005b3c <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3738      	adds	r7, #56	; 0x38
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	46020c00 	.word	0x46020c00

08005b48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b086      	sub	sp, #24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d101      	bne.n	8005b5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e1d9      	b.n	8005f10 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b5c:	4b9b      	ldr	r3, [pc, #620]	; (8005dcc <HAL_RCC_ClockConfig+0x284>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 030f 	and.w	r3, r3, #15
 8005b64:	683a      	ldr	r2, [r7, #0]
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d910      	bls.n	8005b8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b6a:	4b98      	ldr	r3, [pc, #608]	; (8005dcc <HAL_RCC_ClockConfig+0x284>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f023 020f 	bic.w	r2, r3, #15
 8005b72:	4996      	ldr	r1, [pc, #600]	; (8005dcc <HAL_RCC_ClockConfig+0x284>)
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	4313      	orrs	r3, r2
 8005b78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b7a:	4b94      	ldr	r3, [pc, #592]	; (8005dcc <HAL_RCC_ClockConfig+0x284>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 030f 	and.w	r3, r3, #15
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d001      	beq.n	8005b8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e1c1      	b.n	8005f10 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0310 	and.w	r3, r3, #16
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d010      	beq.n	8005bba <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	695a      	ldr	r2, [r3, #20]
 8005b9c:	4b8c      	ldr	r3, [pc, #560]	; (8005dd0 <HAL_RCC_ClockConfig+0x288>)
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d908      	bls.n	8005bba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005ba8:	4b89      	ldr	r3, [pc, #548]	; (8005dd0 <HAL_RCC_ClockConfig+0x288>)
 8005baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	4986      	ldr	r1, [pc, #536]	; (8005dd0 <HAL_RCC_ClockConfig+0x288>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0308 	and.w	r3, r3, #8
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d012      	beq.n	8005bec <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	691a      	ldr	r2, [r3, #16]
 8005bca:	4b81      	ldr	r3, [pc, #516]	; (8005dd0 <HAL_RCC_ClockConfig+0x288>)
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	091b      	lsrs	r3, r3, #4
 8005bd0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d909      	bls.n	8005bec <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005bd8:	4b7d      	ldr	r3, [pc, #500]	; (8005dd0 <HAL_RCC_ClockConfig+0x288>)
 8005bda:	6a1b      	ldr	r3, [r3, #32]
 8005bdc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	691b      	ldr	r3, [r3, #16]
 8005be4:	011b      	lsls	r3, r3, #4
 8005be6:	497a      	ldr	r1, [pc, #488]	; (8005dd0 <HAL_RCC_ClockConfig+0x288>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f003 0304 	and.w	r3, r3, #4
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d010      	beq.n	8005c1a <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68da      	ldr	r2, [r3, #12]
 8005bfc:	4b74      	ldr	r3, [pc, #464]	; (8005dd0 <HAL_RCC_ClockConfig+0x288>)
 8005bfe:	6a1b      	ldr	r3, [r3, #32]
 8005c00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d908      	bls.n	8005c1a <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005c08:	4b71      	ldr	r3, [pc, #452]	; (8005dd0 <HAL_RCC_ClockConfig+0x288>)
 8005c0a:	6a1b      	ldr	r3, [r3, #32]
 8005c0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	496e      	ldr	r1, [pc, #440]	; (8005dd0 <HAL_RCC_ClockConfig+0x288>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0302 	and.w	r3, r3, #2
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d010      	beq.n	8005c48 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689a      	ldr	r2, [r3, #8]
 8005c2a:	4b69      	ldr	r3, [pc, #420]	; (8005dd0 <HAL_RCC_ClockConfig+0x288>)
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	f003 030f 	and.w	r3, r3, #15
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d908      	bls.n	8005c48 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005c36:	4b66      	ldr	r3, [pc, #408]	; (8005dd0 <HAL_RCC_ClockConfig+0x288>)
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	f023 020f 	bic.w	r2, r3, #15
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	4963      	ldr	r1, [pc, #396]	; (8005dd0 <HAL_RCC_ClockConfig+0x288>)
 8005c44:	4313      	orrs	r3, r2
 8005c46:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	f000 80d2 	beq.w	8005dfa <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8005c56:	2300      	movs	r3, #0
 8005c58:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	2b03      	cmp	r3, #3
 8005c60:	d143      	bne.n	8005cea <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c62:	4b5b      	ldr	r3, [pc, #364]	; (8005dd0 <HAL_RCC_ClockConfig+0x288>)
 8005c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c68:	f003 0304 	and.w	r3, r3, #4
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d110      	bne.n	8005c92 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005c70:	4b57      	ldr	r3, [pc, #348]	; (8005dd0 <HAL_RCC_ClockConfig+0x288>)
 8005c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c76:	4a56      	ldr	r2, [pc, #344]	; (8005dd0 <HAL_RCC_ClockConfig+0x288>)
 8005c78:	f043 0304 	orr.w	r3, r3, #4
 8005c7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005c80:	4b53      	ldr	r3, [pc, #332]	; (8005dd0 <HAL_RCC_ClockConfig+0x288>)
 8005c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c86:	f003 0304 	and.w	r3, r3, #4
 8005c8a:	60bb      	str	r3, [r7, #8]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8005c92:	f7fd f857 	bl	8002d44 <HAL_GetTick>
 8005c96:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005c98:	4b4e      	ldr	r3, [pc, #312]	; (8005dd4 <HAL_RCC_ClockConfig+0x28c>)
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d00f      	beq.n	8005cc4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005ca4:	e008      	b.n	8005cb8 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8005ca6:	f7fd f84d 	bl	8002d44 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	d901      	bls.n	8005cb8 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005cb4:	2303      	movs	r3, #3
 8005cb6:	e12b      	b.n	8005f10 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005cb8:	4b46      	ldr	r3, [pc, #280]	; (8005dd4 <HAL_RCC_ClockConfig+0x28c>)
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d0f0      	beq.n	8005ca6 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005cc4:	7dfb      	ldrb	r3, [r7, #23]
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d107      	bne.n	8005cda <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005cca:	4b41      	ldr	r3, [pc, #260]	; (8005dd0 <HAL_RCC_ClockConfig+0x288>)
 8005ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cd0:	4a3f      	ldr	r2, [pc, #252]	; (8005dd0 <HAL_RCC_ClockConfig+0x288>)
 8005cd2:	f023 0304 	bic.w	r3, r3, #4
 8005cd6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005cda:	4b3d      	ldr	r3, [pc, #244]	; (8005dd0 <HAL_RCC_ClockConfig+0x288>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d121      	bne.n	8005d2a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e112      	b.n	8005f10 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d107      	bne.n	8005d02 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005cf2:	4b37      	ldr	r3, [pc, #220]	; (8005dd0 <HAL_RCC_ClockConfig+0x288>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d115      	bne.n	8005d2a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e106      	b.n	8005f10 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d107      	bne.n	8005d1a <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005d0a:	4b31      	ldr	r3, [pc, #196]	; (8005dd0 <HAL_RCC_ClockConfig+0x288>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0304 	and.w	r3, r3, #4
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d109      	bne.n	8005d2a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e0fa      	b.n	8005f10 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d1a:	4b2d      	ldr	r3, [pc, #180]	; (8005dd0 <HAL_RCC_ClockConfig+0x288>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d101      	bne.n	8005d2a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e0f2      	b.n	8005f10 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8005d2a:	4b29      	ldr	r3, [pc, #164]	; (8005dd0 <HAL_RCC_ClockConfig+0x288>)
 8005d2c:	69db      	ldr	r3, [r3, #28]
 8005d2e:	f023 0203 	bic.w	r2, r3, #3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	4926      	ldr	r1, [pc, #152]	; (8005dd0 <HAL_RCC_ClockConfig+0x288>)
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005d3c:	f7fd f802 	bl	8002d44 <HAL_GetTick>
 8005d40:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	2b03      	cmp	r3, #3
 8005d48:	d112      	bne.n	8005d70 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d4a:	e00a      	b.n	8005d62 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d4c:	f7fc fffa 	bl	8002d44 <HAL_GetTick>
 8005d50:	4602      	mov	r2, r0
 8005d52:	693b      	ldr	r3, [r7, #16]
 8005d54:	1ad3      	subs	r3, r2, r3
 8005d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d901      	bls.n	8005d62 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e0d6      	b.n	8005f10 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d62:	4b1b      	ldr	r3, [pc, #108]	; (8005dd0 <HAL_RCC_ClockConfig+0x288>)
 8005d64:	69db      	ldr	r3, [r3, #28]
 8005d66:	f003 030c 	and.w	r3, r3, #12
 8005d6a:	2b0c      	cmp	r3, #12
 8005d6c:	d1ee      	bne.n	8005d4c <HAL_RCC_ClockConfig+0x204>
 8005d6e:	e044      	b.n	8005dfa <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	2b02      	cmp	r3, #2
 8005d76:	d112      	bne.n	8005d9e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d78:	e00a      	b.n	8005d90 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d7a:	f7fc ffe3 	bl	8002d44 <HAL_GetTick>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d901      	bls.n	8005d90 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e0bf      	b.n	8005f10 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d90:	4b0f      	ldr	r3, [pc, #60]	; (8005dd0 <HAL_RCC_ClockConfig+0x288>)
 8005d92:	69db      	ldr	r3, [r3, #28]
 8005d94:	f003 030c 	and.w	r3, r3, #12
 8005d98:	2b08      	cmp	r3, #8
 8005d9a:	d1ee      	bne.n	8005d7a <HAL_RCC_ClockConfig+0x232>
 8005d9c:	e02d      	b.n	8005dfa <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d123      	bne.n	8005dee <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005da6:	e00a      	b.n	8005dbe <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005da8:	f7fc ffcc 	bl	8002d44 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d901      	bls.n	8005dbe <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8005dba:	2303      	movs	r3, #3
 8005dbc:	e0a8      	b.n	8005f10 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005dbe:	4b04      	ldr	r3, [pc, #16]	; (8005dd0 <HAL_RCC_ClockConfig+0x288>)
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	f003 030c 	and.w	r3, r3, #12
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d1ee      	bne.n	8005da8 <HAL_RCC_ClockConfig+0x260>
 8005dca:	e016      	b.n	8005dfa <HAL_RCC_ClockConfig+0x2b2>
 8005dcc:	40022000 	.word	0x40022000
 8005dd0:	46020c00 	.word	0x46020c00
 8005dd4:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dd8:	f7fc ffb4 	bl	8002d44 <HAL_GetTick>
 8005ddc:	4602      	mov	r2, r0
 8005dde:	693b      	ldr	r3, [r7, #16]
 8005de0:	1ad3      	subs	r3, r2, r3
 8005de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d901      	bls.n	8005dee <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e090      	b.n	8005f10 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005dee:	4b4a      	ldr	r3, [pc, #296]	; (8005f18 <HAL_RCC_ClockConfig+0x3d0>)
 8005df0:	69db      	ldr	r3, [r3, #28]
 8005df2:	f003 030c 	and.w	r3, r3, #12
 8005df6:	2b04      	cmp	r3, #4
 8005df8:	d1ee      	bne.n	8005dd8 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d010      	beq.n	8005e28 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	689a      	ldr	r2, [r3, #8]
 8005e0a:	4b43      	ldr	r3, [pc, #268]	; (8005f18 <HAL_RCC_ClockConfig+0x3d0>)
 8005e0c:	6a1b      	ldr	r3, [r3, #32]
 8005e0e:	f003 030f 	and.w	r3, r3, #15
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d208      	bcs.n	8005e28 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005e16:	4b40      	ldr	r3, [pc, #256]	; (8005f18 <HAL_RCC_ClockConfig+0x3d0>)
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	f023 020f 	bic.w	r2, r3, #15
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	493d      	ldr	r1, [pc, #244]	; (8005f18 <HAL_RCC_ClockConfig+0x3d0>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e28:	4b3c      	ldr	r3, [pc, #240]	; (8005f1c <HAL_RCC_ClockConfig+0x3d4>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 030f 	and.w	r3, r3, #15
 8005e30:	683a      	ldr	r2, [r7, #0]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d210      	bcs.n	8005e58 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e36:	4b39      	ldr	r3, [pc, #228]	; (8005f1c <HAL_RCC_ClockConfig+0x3d4>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f023 020f 	bic.w	r2, r3, #15
 8005e3e:	4937      	ldr	r1, [pc, #220]	; (8005f1c <HAL_RCC_ClockConfig+0x3d4>)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e46:	4b35      	ldr	r3, [pc, #212]	; (8005f1c <HAL_RCC_ClockConfig+0x3d4>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 030f 	and.w	r3, r3, #15
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d001      	beq.n	8005e58 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e05b      	b.n	8005f10 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0304 	and.w	r3, r3, #4
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d010      	beq.n	8005e86 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	68da      	ldr	r2, [r3, #12]
 8005e68:	4b2b      	ldr	r3, [pc, #172]	; (8005f18 <HAL_RCC_ClockConfig+0x3d0>)
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
 8005e6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d208      	bcs.n	8005e86 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005e74:	4b28      	ldr	r3, [pc, #160]	; (8005f18 <HAL_RCC_ClockConfig+0x3d0>)
 8005e76:	6a1b      	ldr	r3, [r3, #32]
 8005e78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	4925      	ldr	r1, [pc, #148]	; (8005f18 <HAL_RCC_ClockConfig+0x3d0>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0308 	and.w	r3, r3, #8
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d012      	beq.n	8005eb8 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	691a      	ldr	r2, [r3, #16]
 8005e96:	4b20      	ldr	r3, [pc, #128]	; (8005f18 <HAL_RCC_ClockConfig+0x3d0>)
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	091b      	lsrs	r3, r3, #4
 8005e9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d209      	bcs.n	8005eb8 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005ea4:	4b1c      	ldr	r3, [pc, #112]	; (8005f18 <HAL_RCC_ClockConfig+0x3d0>)
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	011b      	lsls	r3, r3, #4
 8005eb2:	4919      	ldr	r1, [pc, #100]	; (8005f18 <HAL_RCC_ClockConfig+0x3d0>)
 8005eb4:	4313      	orrs	r3, r2
 8005eb6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0310 	and.w	r3, r3, #16
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d010      	beq.n	8005ee6 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	695a      	ldr	r2, [r3, #20]
 8005ec8:	4b13      	ldr	r3, [pc, #76]	; (8005f18 <HAL_RCC_ClockConfig+0x3d0>)
 8005eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ecc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d208      	bcs.n	8005ee6 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005ed4:	4b10      	ldr	r3, [pc, #64]	; (8005f18 <HAL_RCC_ClockConfig+0x3d0>)
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	695b      	ldr	r3, [r3, #20]
 8005ee0:	490d      	ldr	r1, [pc, #52]	; (8005f18 <HAL_RCC_ClockConfig+0x3d0>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005ee6:	f000 f821 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 8005eea:	4602      	mov	r2, r0
 8005eec:	4b0a      	ldr	r3, [pc, #40]	; (8005f18 <HAL_RCC_ClockConfig+0x3d0>)
 8005eee:	6a1b      	ldr	r3, [r3, #32]
 8005ef0:	f003 030f 	and.w	r3, r3, #15
 8005ef4:	490a      	ldr	r1, [pc, #40]	; (8005f20 <HAL_RCC_ClockConfig+0x3d8>)
 8005ef6:	5ccb      	ldrb	r3, [r1, r3]
 8005ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8005efc:	4a09      	ldr	r2, [pc, #36]	; (8005f24 <HAL_RCC_ClockConfig+0x3dc>)
 8005efe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005f00:	4b09      	ldr	r3, [pc, #36]	; (8005f28 <HAL_RCC_ClockConfig+0x3e0>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7fc fed3 	bl	8002cb0 <HAL_InitTick>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	73fb      	strb	r3, [r7, #15]

  return status;
 8005f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3718      	adds	r7, #24
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	46020c00 	.word	0x46020c00
 8005f1c:	40022000 	.word	0x40022000
 8005f20:	0800d5ec 	.word	0x0800d5ec
 8005f24:	20000000 	.word	0x20000000
 8005f28:	20000004 	.word	0x20000004

08005f2c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b08b      	sub	sp, #44	; 0x2c
 8005f30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005f32:	2300      	movs	r3, #0
 8005f34:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005f36:	2300      	movs	r3, #0
 8005f38:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005f3a:	4b7b      	ldr	r3, [pc, #492]	; (8006128 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	f003 030c 	and.w	r3, r3, #12
 8005f42:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005f44:	4b78      	ldr	r3, [pc, #480]	; (8006128 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f48:	f003 0303 	and.w	r3, r3, #3
 8005f4c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d005      	beq.n	8005f60 <HAL_RCC_GetSysClockFreq+0x34>
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	2b0c      	cmp	r3, #12
 8005f58:	d121      	bne.n	8005f9e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d11e      	bne.n	8005f9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005f60:	4b71      	ldr	r3, [pc, #452]	; (8006128 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d107      	bne.n	8005f7c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005f6c:	4b6e      	ldr	r3, [pc, #440]	; (8006128 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f72:	0b1b      	lsrs	r3, r3, #12
 8005f74:	f003 030f 	and.w	r3, r3, #15
 8005f78:	627b      	str	r3, [r7, #36]	; 0x24
 8005f7a:	e005      	b.n	8005f88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005f7c:	4b6a      	ldr	r3, [pc, #424]	; (8006128 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	0f1b      	lsrs	r3, r3, #28
 8005f82:	f003 030f 	and.w	r3, r3, #15
 8005f86:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005f88:	4a68      	ldr	r2, [pc, #416]	; (800612c <HAL_RCC_GetSysClockFreq+0x200>)
 8005f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f90:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d110      	bne.n	8005fba <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005f9c:	e00d      	b.n	8005fba <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f9e:	4b62      	ldr	r3, [pc, #392]	; (8006128 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005fa0:	69db      	ldr	r3, [r3, #28]
 8005fa2:	f003 030c 	and.w	r3, r3, #12
 8005fa6:	2b04      	cmp	r3, #4
 8005fa8:	d102      	bne.n	8005fb0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005faa:	4b61      	ldr	r3, [pc, #388]	; (8006130 <HAL_RCC_GetSysClockFreq+0x204>)
 8005fac:	623b      	str	r3, [r7, #32]
 8005fae:	e004      	b.n	8005fba <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	2b08      	cmp	r3, #8
 8005fb4:	d101      	bne.n	8005fba <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005fb6:	4b5e      	ldr	r3, [pc, #376]	; (8006130 <HAL_RCC_GetSysClockFreq+0x204>)
 8005fb8:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fba:	69bb      	ldr	r3, [r7, #24]
 8005fbc:	2b0c      	cmp	r3, #12
 8005fbe:	f040 80ac 	bne.w	800611a <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005fc2:	4b59      	ldr	r3, [pc, #356]	; (8006128 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc6:	f003 0303 	and.w	r3, r3, #3
 8005fca:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005fcc:	4b56      	ldr	r3, [pc, #344]	; (8006128 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd0:	0a1b      	lsrs	r3, r3, #8
 8005fd2:	f003 030f 	and.w	r3, r3, #15
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005fda:	4b53      	ldr	r3, [pc, #332]	; (8006128 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fde:	091b      	lsrs	r3, r3, #4
 8005fe0:	f003 0301 	and.w	r3, r3, #1
 8005fe4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005fe6:	4b50      	ldr	r3, [pc, #320]	; (8006128 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fea:	08db      	lsrs	r3, r3, #3
 8005fec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ff0:	68ba      	ldr	r2, [r7, #8]
 8005ff2:	fb02 f303 	mul.w	r3, r2, r3
 8005ff6:	ee07 3a90 	vmov	s15, r3
 8005ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ffe:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2b00      	cmp	r3, #0
 8006006:	f000 8086 	beq.w	8006116 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	2b02      	cmp	r3, #2
 800600e:	d003      	beq.n	8006018 <HAL_RCC_GetSysClockFreq+0xec>
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	2b03      	cmp	r3, #3
 8006014:	d022      	beq.n	800605c <HAL_RCC_GetSysClockFreq+0x130>
 8006016:	e043      	b.n	80060a0 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	ee07 3a90 	vmov	s15, r3
 800601e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006022:	eddf 6a44 	vldr	s13, [pc, #272]	; 8006134 <HAL_RCC_GetSysClockFreq+0x208>
 8006026:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800602a:	4b3f      	ldr	r3, [pc, #252]	; (8006128 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800602c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800602e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006032:	ee07 3a90 	vmov	s15, r3
 8006036:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800603a:	ed97 6a01 	vldr	s12, [r7, #4]
 800603e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006138 <HAL_RCC_GetSysClockFreq+0x20c>
 8006042:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006046:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800604a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800604e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006052:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006056:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800605a:	e046      	b.n	80060ea <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	ee07 3a90 	vmov	s15, r3
 8006062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006066:	eddf 6a33 	vldr	s13, [pc, #204]	; 8006134 <HAL_RCC_GetSysClockFreq+0x208>
 800606a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800606e:	4b2e      	ldr	r3, [pc, #184]	; (8006128 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006072:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006076:	ee07 3a90 	vmov	s15, r3
 800607a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800607e:	ed97 6a01 	vldr	s12, [r7, #4]
 8006082:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006138 <HAL_RCC_GetSysClockFreq+0x20c>
 8006086:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800608a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800608e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006092:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800609a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800609e:	e024      	b.n	80060ea <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80060a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a2:	ee07 3a90 	vmov	s15, r3
 80060a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	ee07 3a90 	vmov	s15, r3
 80060b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060b8:	4b1b      	ldr	r3, [pc, #108]	; (8006128 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80060ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060c0:	ee07 3a90 	vmov	s15, r3
 80060c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80060c8:	ed97 6a01 	vldr	s12, [r7, #4]
 80060cc:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8006138 <HAL_RCC_GetSysClockFreq+0x20c>
 80060d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80060d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80060d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80060e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060e4:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80060e8:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80060ea:	4b0f      	ldr	r3, [pc, #60]	; (8006128 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80060ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ee:	0e1b      	lsrs	r3, r3, #24
 80060f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060f4:	3301      	adds	r3, #1
 80060f6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	ee07 3a90 	vmov	s15, r3
 80060fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006102:	edd7 6a07 	vldr	s13, [r7, #28]
 8006106:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800610a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800610e:	ee17 3a90 	vmov	r3, s15
 8006112:	623b      	str	r3, [r7, #32]
 8006114:	e001      	b.n	800611a <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8006116:	2300      	movs	r3, #0
 8006118:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800611a:	6a3b      	ldr	r3, [r7, #32]
}
 800611c:	4618      	mov	r0, r3
 800611e:	372c      	adds	r7, #44	; 0x2c
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr
 8006128:	46020c00 	.word	0x46020c00
 800612c:	0800d604 	.word	0x0800d604
 8006130:	00f42400 	.word	0x00f42400
 8006134:	4b742400 	.word	0x4b742400
 8006138:	46000000 	.word	0x46000000

0800613c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006140:	f7ff fef4 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 8006144:	4602      	mov	r2, r0
 8006146:	4b07      	ldr	r3, [pc, #28]	; (8006164 <HAL_RCC_GetHCLKFreq+0x28>)
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	f003 030f 	and.w	r3, r3, #15
 800614e:	4906      	ldr	r1, [pc, #24]	; (8006168 <HAL_RCC_GetHCLKFreq+0x2c>)
 8006150:	5ccb      	ldrb	r3, [r1, r3]
 8006152:	fa22 f303 	lsr.w	r3, r2, r3
 8006156:	4a05      	ldr	r2, [pc, #20]	; (800616c <HAL_RCC_GetHCLKFreq+0x30>)
 8006158:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800615a:	4b04      	ldr	r3, [pc, #16]	; (800616c <HAL_RCC_GetHCLKFreq+0x30>)
 800615c:	681b      	ldr	r3, [r3, #0]
}
 800615e:	4618      	mov	r0, r3
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	46020c00 	.word	0x46020c00
 8006168:	0800d5ec 	.word	0x0800d5ec
 800616c:	20000000 	.word	0x20000000

08006170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8006174:	f7ff ffe2 	bl	800613c <HAL_RCC_GetHCLKFreq>
 8006178:	4602      	mov	r2, r0
 800617a:	4b05      	ldr	r3, [pc, #20]	; (8006190 <HAL_RCC_GetPCLK1Freq+0x20>)
 800617c:	6a1b      	ldr	r3, [r3, #32]
 800617e:	091b      	lsrs	r3, r3, #4
 8006180:	f003 0307 	and.w	r3, r3, #7
 8006184:	4903      	ldr	r1, [pc, #12]	; (8006194 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006186:	5ccb      	ldrb	r3, [r1, r3]
 8006188:	fa22 f303 	lsr.w	r3, r2, r3
}
 800618c:	4618      	mov	r0, r3
 800618e:	bd80      	pop	{r7, pc}
 8006190:	46020c00 	.word	0x46020c00
 8006194:	0800d5fc 	.word	0x0800d5fc

08006198 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800619c:	f7ff ffce 	bl	800613c <HAL_RCC_GetHCLKFreq>
 80061a0:	4602      	mov	r2, r0
 80061a2:	4b05      	ldr	r3, [pc, #20]	; (80061b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80061a4:	6a1b      	ldr	r3, [r3, #32]
 80061a6:	0a1b      	lsrs	r3, r3, #8
 80061a8:	f003 0307 	and.w	r3, r3, #7
 80061ac:	4903      	ldr	r1, [pc, #12]	; (80061bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80061ae:	5ccb      	ldrb	r3, [r1, r3]
 80061b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061b4:	4618      	mov	r0, r3
 80061b6:	bd80      	pop	{r7, pc}
 80061b8:	46020c00 	.word	0x46020c00
 80061bc:	0800d5fc 	.word	0x0800d5fc

080061c0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80061c4:	f7ff ffba 	bl	800613c <HAL_RCC_GetHCLKFreq>
 80061c8:	4602      	mov	r2, r0
 80061ca:	4b05      	ldr	r3, [pc, #20]	; (80061e0 <HAL_RCC_GetPCLK3Freq+0x20>)
 80061cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ce:	091b      	lsrs	r3, r3, #4
 80061d0:	f003 0307 	and.w	r3, r3, #7
 80061d4:	4903      	ldr	r1, [pc, #12]	; (80061e4 <HAL_RCC_GetPCLK3Freq+0x24>)
 80061d6:	5ccb      	ldrb	r3, [r1, r3]
 80061d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80061dc:	4618      	mov	r0, r3
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	46020c00 	.word	0x46020c00
 80061e4:	0800d5fc 	.word	0x0800d5fc

080061e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b086      	sub	sp, #24
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80061f0:	4b3e      	ldr	r3, [pc, #248]	; (80062ec <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80061f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061f6:	f003 0304 	and.w	r3, r3, #4
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d003      	beq.n	8006206 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80061fe:	f7fe fd4f 	bl	8004ca0 <HAL_PWREx_GetVoltageRange>
 8006202:	6178      	str	r0, [r7, #20]
 8006204:	e019      	b.n	800623a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006206:	4b39      	ldr	r3, [pc, #228]	; (80062ec <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006208:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800620c:	4a37      	ldr	r2, [pc, #220]	; (80062ec <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800620e:	f043 0304 	orr.w	r3, r3, #4
 8006212:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006216:	4b35      	ldr	r3, [pc, #212]	; (80062ec <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006218:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800621c:	f003 0304 	and.w	r3, r3, #4
 8006220:	60fb      	str	r3, [r7, #12]
 8006222:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006224:	f7fe fd3c 	bl	8004ca0 <HAL_PWREx_GetVoltageRange>
 8006228:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800622a:	4b30      	ldr	r3, [pc, #192]	; (80062ec <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800622c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006230:	4a2e      	ldr	r2, [pc, #184]	; (80062ec <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006232:	f023 0304 	bic.w	r3, r3, #4
 8006236:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006240:	d003      	beq.n	800624a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006248:	d109      	bne.n	800625e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006250:	d202      	bcs.n	8006258 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8006252:	2301      	movs	r3, #1
 8006254:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006256:	e033      	b.n	80062c0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8006258:	2300      	movs	r3, #0
 800625a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800625c:	e030      	b.n	80062c0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006264:	d208      	bcs.n	8006278 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800626c:	d102      	bne.n	8006274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800626e:	2303      	movs	r3, #3
 8006270:	613b      	str	r3, [r7, #16]
 8006272:	e025      	b.n	80062c0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e035      	b.n	80062e4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800627e:	d90f      	bls.n	80062a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d109      	bne.n	800629a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800628c:	d902      	bls.n	8006294 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800628e:	2300      	movs	r3, #0
 8006290:	613b      	str	r3, [r7, #16]
 8006292:	e015      	b.n	80062c0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8006294:	2301      	movs	r3, #1
 8006296:	613b      	str	r3, [r7, #16]
 8006298:	e012      	b.n	80062c0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800629a:	2300      	movs	r3, #0
 800629c:	613b      	str	r3, [r7, #16]
 800629e:	e00f      	b.n	80062c0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80062a6:	d109      	bne.n	80062bc <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062ae:	d102      	bne.n	80062b6 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80062b0:	2301      	movs	r3, #1
 80062b2:	613b      	str	r3, [r7, #16]
 80062b4:	e004      	b.n	80062c0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80062b6:	2302      	movs	r3, #2
 80062b8:	613b      	str	r3, [r7, #16]
 80062ba:	e001      	b.n	80062c0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80062bc:	2301      	movs	r3, #1
 80062be:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80062c0:	4b0b      	ldr	r3, [pc, #44]	; (80062f0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f023 020f 	bic.w	r2, r3, #15
 80062c8:	4909      	ldr	r1, [pc, #36]	; (80062f0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80062d0:	4b07      	ldr	r3, [pc, #28]	; (80062f0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 030f 	and.w	r3, r3, #15
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d001      	beq.n	80062e2 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e000      	b.n	80062e4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3718      	adds	r7, #24
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	46020c00 	.word	0x46020c00
 80062f0:	40022000 	.word	0x40022000

080062f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80062f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062f8:	b0ba      	sub	sp, #232	; 0xe8
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006300:	2300      	movs	r3, #0
 8006302:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006306:	2300      	movs	r3, #0
 8006308:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800630c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006314:	f002 0401 	and.w	r4, r2, #1
 8006318:	2500      	movs	r5, #0
 800631a:	ea54 0305 	orrs.w	r3, r4, r5
 800631e:	d00b      	beq.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8006320:	4bcb      	ldr	r3, [pc, #812]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006326:	f023 0103 	bic.w	r1, r3, #3
 800632a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800632e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006330:	4ac7      	ldr	r2, [pc, #796]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006332:	430b      	orrs	r3, r1
 8006334:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006338:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800633c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006340:	f002 0802 	and.w	r8, r2, #2
 8006344:	f04f 0900 	mov.w	r9, #0
 8006348:	ea58 0309 	orrs.w	r3, r8, r9
 800634c:	d00b      	beq.n	8006366 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800634e:	4bc0      	ldr	r3, [pc, #768]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006350:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006354:	f023 010c 	bic.w	r1, r3, #12
 8006358:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800635c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800635e:	4abc      	ldr	r2, [pc, #752]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006360:	430b      	orrs	r3, r1
 8006362:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006366:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800636a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800636e:	f002 0a04 	and.w	sl, r2, #4
 8006372:	f04f 0b00 	mov.w	fp, #0
 8006376:	ea5a 030b 	orrs.w	r3, sl, fp
 800637a:	d00b      	beq.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800637c:	4bb4      	ldr	r3, [pc, #720]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800637e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006382:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006386:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800638a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800638c:	4ab0      	ldr	r2, [pc, #704]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800638e:	430b      	orrs	r3, r1
 8006390:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006394:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800639c:	f002 0308 	and.w	r3, r2, #8
 80063a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80063a4:	2300      	movs	r3, #0
 80063a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80063aa:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80063ae:	460b      	mov	r3, r1
 80063b0:	4313      	orrs	r3, r2
 80063b2:	d00b      	beq.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80063b4:	4ba6      	ldr	r3, [pc, #664]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80063ba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80063be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063c4:	4aa2      	ldr	r2, [pc, #648]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063c6:	430b      	orrs	r3, r1
 80063c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80063cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d4:	f002 0310 	and.w	r3, r2, #16
 80063d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063dc:	2300      	movs	r3, #0
 80063de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063e2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80063e6:	460b      	mov	r3, r1
 80063e8:	4313      	orrs	r3, r2
 80063ea:	d00b      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80063ec:	4b98      	ldr	r3, [pc, #608]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80063f2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80063f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063fc:	4a94      	ldr	r2, [pc, #592]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063fe:	430b      	orrs	r3, r1
 8006400:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006404:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800640c:	f002 0320 	and.w	r3, r2, #32
 8006410:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006414:	2300      	movs	r3, #0
 8006416:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800641a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800641e:	460b      	mov	r3, r1
 8006420:	4313      	orrs	r3, r2
 8006422:	d00b      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006424:	4b8a      	ldr	r3, [pc, #552]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006426:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800642a:	f023 0107 	bic.w	r1, r3, #7
 800642e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006432:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006434:	4a86      	ldr	r2, [pc, #536]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006436:	430b      	orrs	r3, r1
 8006438:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800643c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006444:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006448:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800644c:	2300      	movs	r3, #0
 800644e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006452:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006456:	460b      	mov	r3, r1
 8006458:	4313      	orrs	r3, r2
 800645a:	d00b      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800645c:	4b7c      	ldr	r3, [pc, #496]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800645e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006462:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8006466:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800646a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800646c:	4a78      	ldr	r2, [pc, #480]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800646e:	430b      	orrs	r3, r1
 8006470:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006474:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006480:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006484:	2300      	movs	r3, #0
 8006486:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800648a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800648e:	460b      	mov	r3, r1
 8006490:	4313      	orrs	r3, r2
 8006492:	d00b      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006494:	4b6e      	ldr	r3, [pc, #440]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006496:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800649a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800649e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064a4:	4a6a      	ldr	r2, [pc, #424]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064a6:	430b      	orrs	r3, r1
 80064a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80064ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064b4:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80064b8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80064bc:	2300      	movs	r3, #0
 80064be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80064c2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80064c6:	460b      	mov	r3, r1
 80064c8:	4313      	orrs	r3, r2
 80064ca:	d00b      	beq.n	80064e4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80064cc:	4b60      	ldr	r3, [pc, #384]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80064d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80064d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064dc:	4a5c      	ldr	r2, [pc, #368]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064de:	430b      	orrs	r3, r1
 80064e0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80064e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ec:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80064f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80064f4:	2300      	movs	r3, #0
 80064f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80064fa:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80064fe:	460b      	mov	r3, r1
 8006500:	4313      	orrs	r3, r2
 8006502:	d00b      	beq.n	800651c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8006504:	4b52      	ldr	r3, [pc, #328]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006506:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800650a:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800650e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006514:	4a4e      	ldr	r2, [pc, #312]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006516:	430b      	orrs	r3, r1
 8006518:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800651c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006524:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8006528:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800652c:	2300      	movs	r3, #0
 800652e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006532:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006536:	460b      	mov	r3, r1
 8006538:	4313      	orrs	r3, r2
 800653a:	d00b      	beq.n	8006554 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800653c:	4b44      	ldr	r3, [pc, #272]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800653e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006542:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8006546:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800654a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800654c:	4a40      	ldr	r2, [pc, #256]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800654e:	430b      	orrs	r3, r1
 8006550:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006554:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655c:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006560:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006564:	2300      	movs	r3, #0
 8006566:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800656a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800656e:	460b      	mov	r3, r1
 8006570:	4313      	orrs	r3, r2
 8006572:	d00b      	beq.n	800658c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006574:	4b36      	ldr	r3, [pc, #216]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006576:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800657a:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800657e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006582:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006584:	4a32      	ldr	r2, [pc, #200]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006586:	430b      	orrs	r3, r1
 8006588:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800658c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006594:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006598:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800659c:	2300      	movs	r3, #0
 800659e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80065a2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80065a6:	460b      	mov	r3, r1
 80065a8:	4313      	orrs	r3, r2
 80065aa:	d00c      	beq.n	80065c6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80065ac:	4b28      	ldr	r3, [pc, #160]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80065b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80065b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065be:	4a24      	ldr	r2, [pc, #144]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065c0:	430b      	orrs	r3, r1
 80065c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80065c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ce:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80065d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80065d4:	2300      	movs	r3, #0
 80065d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80065d8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80065dc:	460b      	mov	r3, r1
 80065de:	4313      	orrs	r3, r2
 80065e0:	d04f      	beq.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80065e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065ea:	2b80      	cmp	r3, #128	; 0x80
 80065ec:	d02d      	beq.n	800664a <HAL_RCCEx_PeriphCLKConfig+0x356>
 80065ee:	2b80      	cmp	r3, #128	; 0x80
 80065f0:	d827      	bhi.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80065f2:	2b60      	cmp	r3, #96	; 0x60
 80065f4:	d02e      	beq.n	8006654 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80065f6:	2b60      	cmp	r3, #96	; 0x60
 80065f8:	d823      	bhi.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80065fa:	2b40      	cmp	r3, #64	; 0x40
 80065fc:	d006      	beq.n	800660c <HAL_RCCEx_PeriphCLKConfig+0x318>
 80065fe:	2b40      	cmp	r3, #64	; 0x40
 8006600:	d81f      	bhi.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006602:	2b00      	cmp	r3, #0
 8006604:	d009      	beq.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x326>
 8006606:	2b20      	cmp	r3, #32
 8006608:	d011      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800660a:	e01a      	b.n	8006642 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800660c:	4b10      	ldr	r3, [pc, #64]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800660e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006610:	4a0f      	ldr	r2, [pc, #60]	; (8006650 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006616:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006618:	e01d      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800661a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800661e:	3308      	adds	r3, #8
 8006620:	4618      	mov	r0, r3
 8006622:	f002 f981 	bl	8008928 <RCCEx_PLL2_Config>
 8006626:	4603      	mov	r3, r0
 8006628:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800662c:	e013      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800662e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006632:	332c      	adds	r3, #44	; 0x2c
 8006634:	4618      	mov	r0, r3
 8006636:	f002 fa0f 	bl	8008a58 <RCCEx_PLL3_Config>
 800663a:	4603      	mov	r3, r0
 800663c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006640:	e009      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006648:	e005      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800664a:	bf00      	nop
 800664c:	e003      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800664e:	bf00      	nop
 8006650:	46020c00 	.word	0x46020c00
        break;
 8006654:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006656:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10d      	bne.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800665e:	4bb6      	ldr	r3, [pc, #728]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006660:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006664:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8006668:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800666c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006670:	4ab1      	ldr	r2, [pc, #708]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006672:	430b      	orrs	r3, r1
 8006674:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006678:	e003      	b.n	8006682 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800667a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800667e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006682:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800668e:	673b      	str	r3, [r7, #112]	; 0x70
 8006690:	2300      	movs	r3, #0
 8006692:	677b      	str	r3, [r7, #116]	; 0x74
 8006694:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006698:	460b      	mov	r3, r1
 800669a:	4313      	orrs	r3, r2
 800669c:	d053      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800669e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066aa:	d033      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80066ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066b0:	d82c      	bhi.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x418>
 80066b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066b6:	d02f      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80066b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066bc:	d826      	bhi.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x418>
 80066be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066c2:	d008      	beq.n	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80066c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80066c8:	d820      	bhi.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x418>
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00a      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 80066ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066d2:	d011      	beq.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80066d4:	e01a      	b.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80066d6:	4b98      	ldr	r3, [pc, #608]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80066d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066da:	4a97      	ldr	r2, [pc, #604]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80066dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066e0:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80066e2:	e01a      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80066e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066e8:	3308      	adds	r3, #8
 80066ea:	4618      	mov	r0, r3
 80066ec:	f002 f91c 	bl	8008928 <RCCEx_PLL2_Config>
 80066f0:	4603      	mov	r3, r0
 80066f2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80066f6:	e010      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80066f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066fc:	332c      	adds	r3, #44	; 0x2c
 80066fe:	4618      	mov	r0, r3
 8006700:	f002 f9aa 	bl	8008a58 <RCCEx_PLL3_Config>
 8006704:	4603      	mov	r3, r0
 8006706:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800670a:	e006      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006712:	e002      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8006714:	bf00      	nop
 8006716:	e000      	b.n	800671a <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8006718:	bf00      	nop
    }

    if (ret == HAL_OK)
 800671a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800671e:	2b00      	cmp	r3, #0
 8006720:	d10d      	bne.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8006722:	4b85      	ldr	r3, [pc, #532]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006724:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006728:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800672c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006730:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006734:	4a80      	ldr	r2, [pc, #512]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006736:	430b      	orrs	r3, r1
 8006738:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800673c:	e003      	b.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800673e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006742:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006746:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800674a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674e:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006752:	66bb      	str	r3, [r7, #104]	; 0x68
 8006754:	2300      	movs	r3, #0
 8006756:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006758:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800675c:	460b      	mov	r3, r1
 800675e:	4313      	orrs	r3, r2
 8006760:	d046      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006762:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006766:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800676a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800676e:	d028      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006770:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006774:	d821      	bhi.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006776:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800677a:	d022      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800677c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006780:	d81b      	bhi.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006782:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006786:	d01c      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006788:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800678c:	d815      	bhi.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800678e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006792:	d008      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006798:	d80f      	bhi.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800679a:	2b00      	cmp	r3, #0
 800679c:	d011      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800679e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067a2:	d00e      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80067a4:	e009      	b.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80067a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067aa:	3308      	adds	r3, #8
 80067ac:	4618      	mov	r0, r3
 80067ae:	f002 f8bb 	bl	8008928 <RCCEx_PLL2_Config>
 80067b2:	4603      	mov	r3, r0
 80067b4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80067b8:	e004      	b.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80067c0:	e000      	b.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 80067c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80067c4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d10d      	bne.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80067cc:	4b5a      	ldr	r3, [pc, #360]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80067ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80067d2:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80067d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80067de:	4a56      	ldr	r2, [pc, #344]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80067e0:	430b      	orrs	r3, r1
 80067e2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80067e6:	e003      	b.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80067ec:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80067f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f8:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80067fc:	663b      	str	r3, [r7, #96]	; 0x60
 80067fe:	2300      	movs	r3, #0
 8006800:	667b      	str	r3, [r7, #100]	; 0x64
 8006802:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8006806:	460b      	mov	r3, r1
 8006808:	4313      	orrs	r3, r2
 800680a:	d03f      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 800680c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006814:	2b04      	cmp	r3, #4
 8006816:	d81e      	bhi.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8006818:	a201      	add	r2, pc, #4	; (adr r2, 8006820 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800681a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800681e:	bf00      	nop
 8006820:	0800685f 	.word	0x0800685f
 8006824:	08006835 	.word	0x08006835
 8006828:	08006843 	.word	0x08006843
 800682c:	0800685f 	.word	0x0800685f
 8006830:	0800685f 	.word	0x0800685f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006834:	4b40      	ldr	r3, [pc, #256]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006838:	4a3f      	ldr	r2, [pc, #252]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800683a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800683e:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006840:	e00e      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006842:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006846:	332c      	adds	r3, #44	; 0x2c
 8006848:	4618      	mov	r0, r3
 800684a:	f002 f905 	bl	8008a58 <RCCEx_PLL3_Config>
 800684e:	4603      	mov	r3, r0
 8006850:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006854:	e004      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800685c:	e000      	b.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800685e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006860:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006864:	2b00      	cmp	r3, #0
 8006866:	d10d      	bne.n	8006884 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8006868:	4b33      	ldr	r3, [pc, #204]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800686a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800686e:	f023 0107 	bic.w	r1, r3, #7
 8006872:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800687a:	4a2f      	ldr	r2, [pc, #188]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800687c:	430b      	orrs	r3, r1
 800687e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006882:	e003      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006884:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006888:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800688c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006894:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006898:	65bb      	str	r3, [r7, #88]	; 0x58
 800689a:	2300      	movs	r3, #0
 800689c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800689e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80068a2:	460b      	mov	r3, r1
 80068a4:	4313      	orrs	r3, r2
 80068a6:	d04d      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80068a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068b0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80068b4:	d028      	beq.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80068b6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80068ba:	d821      	bhi.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80068bc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80068c0:	d024      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x618>
 80068c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80068c6:	d81b      	bhi.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80068c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068cc:	d00e      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 80068ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80068d2:	d815      	bhi.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d01b      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 80068d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068dc:	d110      	bne.n	8006900 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80068de:	4b16      	ldr	r3, [pc, #88]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80068e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068e2:	4a15      	ldr	r2, [pc, #84]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80068e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068e8:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80068ea:	e012      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80068ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068f0:	332c      	adds	r3, #44	; 0x2c
 80068f2:	4618      	mov	r0, r3
 80068f4:	f002 f8b0 	bl	8008a58 <RCCEx_PLL3_Config>
 80068f8:	4603      	mov	r3, r0
 80068fa:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80068fe:	e008      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006906:	e004      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006908:	bf00      	nop
 800690a:	e002      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800690c:	bf00      	nop
 800690e:	e000      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8006910:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006912:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006916:	2b00      	cmp	r3, #0
 8006918:	d110      	bne.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800691a:	4b07      	ldr	r3, [pc, #28]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800691c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006920:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006924:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006928:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800692c:	4a02      	ldr	r2, [pc, #8]	; (8006938 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800692e:	430b      	orrs	r3, r1
 8006930:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006934:	e006      	b.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8006936:	bf00      	nop
 8006938:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800693c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006940:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006944:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800694c:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006950:	653b      	str	r3, [r7, #80]	; 0x50
 8006952:	2300      	movs	r3, #0
 8006954:	657b      	str	r3, [r7, #84]	; 0x54
 8006956:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800695a:	460b      	mov	r3, r1
 800695c:	4313      	orrs	r3, r2
 800695e:	f000 80b5 	beq.w	8006acc <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006962:	2300      	movs	r3, #0
 8006964:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006968:	4b9d      	ldr	r3, [pc, #628]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800696a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800696e:	f003 0304 	and.w	r3, r3, #4
 8006972:	2b00      	cmp	r3, #0
 8006974:	d113      	bne.n	800699e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006976:	4b9a      	ldr	r3, [pc, #616]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006978:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800697c:	4a98      	ldr	r2, [pc, #608]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800697e:	f043 0304 	orr.w	r3, r3, #4
 8006982:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006986:	4b96      	ldr	r3, [pc, #600]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006988:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800698c:	f003 0304 	and.w	r3, r3, #4
 8006990:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006994:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8006998:	2301      	movs	r3, #1
 800699a:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800699e:	4b91      	ldr	r3, [pc, #580]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80069a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a2:	4a90      	ldr	r2, [pc, #576]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80069a4:	f043 0301 	orr.w	r3, r3, #1
 80069a8:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80069aa:	f7fc f9cb 	bl	8002d44 <HAL_GetTick>
 80069ae:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80069b2:	e00b      	b.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069b4:	f7fc f9c6 	bl	8002d44 <HAL_GetTick>
 80069b8:	4602      	mov	r2, r0
 80069ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d903      	bls.n	80069cc <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80069ca:	e005      	b.n	80069d8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80069cc:	4b85      	ldr	r3, [pc, #532]	; (8006be4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80069ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d0:	f003 0301 	and.w	r3, r3, #1
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d0ed      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 80069d8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d165      	bne.n	8006aac <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80069e0:	4b7f      	ldr	r3, [pc, #508]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80069e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80069ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d023      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x74a>
 80069f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069fa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80069fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d01b      	beq.n	8006a3e <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006a06:	4b76      	ldr	r3, [pc, #472]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a08:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006a14:	4b72      	ldr	r3, [pc, #456]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a16:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a1a:	4a71      	ldr	r2, [pc, #452]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a20:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006a24:	4b6e      	ldr	r3, [pc, #440]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a2a:	4a6d      	ldr	r2, [pc, #436]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a30:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006a34:	4a6a      	ldr	r2, [pc, #424]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a3a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a42:	f003 0301 	and.w	r3, r3, #1
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d019      	beq.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a4a:	f7fc f97b 	bl	8002d44 <HAL_GetTick>
 8006a4e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a52:	e00d      	b.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a54:	f7fc f976 	bl	8002d44 <HAL_GetTick>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a5e:	1ad2      	subs	r2, r2, r3
 8006a60:	f241 3388 	movw	r3, #5000	; 0x1388
 8006a64:	429a      	cmp	r2, r3
 8006a66:	d903      	bls.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8006a68:	2303      	movs	r3, #3
 8006a6a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8006a6e:	e006      	b.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a70:	4b5b      	ldr	r3, [pc, #364]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a76:	f003 0302 	and.w	r3, r3, #2
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d0ea      	beq.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8006a7e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10d      	bne.n	8006aa2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006a86:	4b56      	ldr	r3, [pc, #344]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a8c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006a90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a94:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006a98:	4a51      	ldr	r2, [pc, #324]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a9a:	430b      	orrs	r3, r1
 8006a9c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006aa0:	e008      	b.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006aa2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006aa6:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8006aaa:	e003      	b.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aac:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006ab0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006ab4:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	d107      	bne.n	8006acc <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006abc:	4b48      	ldr	r3, [pc, #288]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006abe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ac2:	4a47      	ldr	r2, [pc, #284]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006ac4:	f023 0304 	bic.w	r3, r3, #4
 8006ac8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006acc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006ad8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ada:	2300      	movs	r3, #0
 8006adc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ade:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	d042      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8006ae8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006aec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006af0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006af4:	d022      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x848>
 8006af6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006afa:	d81b      	bhi.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8006afc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b00:	d011      	beq.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8006b02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b06:	d815      	bhi.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d019      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8006b0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b10:	d110      	bne.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006b12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b16:	3308      	adds	r3, #8
 8006b18:	4618      	mov	r0, r3
 8006b1a:	f001 ff05 	bl	8008928 <RCCEx_PLL2_Config>
 8006b1e:	4603      	mov	r3, r0
 8006b20:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006b24:	e00d      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b26:	4b2e      	ldr	r3, [pc, #184]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b2a:	4a2d      	ldr	r2, [pc, #180]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b30:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006b32:	e006      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006b3a:	e002      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006b3c:	bf00      	nop
 8006b3e:	e000      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006b40:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006b42:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d10d      	bne.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8006b4a:	4b25      	ldr	r3, [pc, #148]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b50:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006b54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006b5c:	4a20      	ldr	r2, [pc, #128]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b5e:	430b      	orrs	r3, r1
 8006b60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006b64:	e003      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b66:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006b6a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006b6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b76:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006b7a:	643b      	str	r3, [r7, #64]	; 0x40
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	647b      	str	r3, [r7, #68]	; 0x44
 8006b80:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006b84:	460b      	mov	r3, r1
 8006b86:	4313      	orrs	r3, r2
 8006b88:	d032      	beq.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006b8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b96:	d00b      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006b98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b9c:	d804      	bhi.n	8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d008      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006ba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ba6:	d007      	beq.n	8006bb8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006bae:	e004      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006bb0:	bf00      	nop
 8006bb2:	e002      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006bb4:	bf00      	nop
 8006bb6:	e000      	b.n	8006bba <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006bb8:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006bba:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d112      	bne.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006bc2:	4b07      	ldr	r3, [pc, #28]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006bc4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006bc8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bd0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006bd4:	4a02      	ldr	r2, [pc, #8]	; (8006be0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006bd6:	430b      	orrs	r3, r1
 8006bd8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006bdc:	e008      	b.n	8006bf0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8006bde:	bf00      	nop
 8006be0:	46020c00 	.word	0x46020c00
 8006be4:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006be8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006bec:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8006bf0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bf8:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006bfc:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bfe:	2300      	movs	r3, #0
 8006c00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c02:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006c06:	460b      	mov	r3, r1
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	d00c      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8006c0c:	4b98      	ldr	r3, [pc, #608]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c0e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006c12:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8006c16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006c1e:	4a94      	ldr	r2, [pc, #592]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c20:	430b      	orrs	r3, r1
 8006c22:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006c26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006c32:	633b      	str	r3, [r7, #48]	; 0x30
 8006c34:	2300      	movs	r3, #0
 8006c36:	637b      	str	r3, [r7, #52]	; 0x34
 8006c38:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	d019      	beq.n	8006c76 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006c42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006c4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c4e:	d105      	bne.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006c50:	4b87      	ldr	r3, [pc, #540]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c54:	4a86      	ldr	r2, [pc, #536]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c5a:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8006c5c:	4b84      	ldr	r3, [pc, #528]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c5e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006c62:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006c66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006c6e:	4a80      	ldr	r2, [pc, #512]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c70:	430b      	orrs	r3, r1
 8006c72:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006c76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006c82:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c84:	2300      	movs	r3, #0
 8006c86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c88:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	d00c      	beq.n	8006cac <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006c92:	4b77      	ldr	r3, [pc, #476]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c9c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ca0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006ca4:	4972      	ldr	r1, [pc, #456]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006ca6:	4313      	orrs	r3, r2
 8006ca8:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006cac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cb4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006cb8:	623b      	str	r3, [r7, #32]
 8006cba:	2300      	movs	r3, #0
 8006cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8006cbe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	d00c      	beq.n	8006ce2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006cc8:	4b69      	ldr	r3, [pc, #420]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006cce:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006cd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cd6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006cda:	4965      	ldr	r1, [pc, #404]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006cdc:	4313      	orrs	r3, r2
 8006cde:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006ce2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cea:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006cee:	61bb      	str	r3, [r7, #24]
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	61fb      	str	r3, [r7, #28]
 8006cf4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006cf8:	460b      	mov	r3, r1
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	d00c      	beq.n	8006d18 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006cfe:	4b5c      	ldr	r3, [pc, #368]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006d00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d04:	f023 0218 	bic.w	r2, r3, #24
 8006d08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d0c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006d10:	4957      	ldr	r1, [pc, #348]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006d12:	4313      	orrs	r3, r2
 8006d14:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006d18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d20:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8006d24:	613b      	str	r3, [r7, #16]
 8006d26:	2300      	movs	r3, #0
 8006d28:	617b      	str	r3, [r7, #20]
 8006d2a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006d2e:	460b      	mov	r3, r1
 8006d30:	4313      	orrs	r3, r2
 8006d32:	d032      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006d34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d40:	d105      	bne.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d42:	4b4b      	ldr	r3, [pc, #300]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d46:	4a4a      	ldr	r2, [pc, #296]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d4c:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006d4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d52:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006d5a:	d108      	bne.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006d5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d60:	3308      	adds	r3, #8
 8006d62:	4618      	mov	r0, r3
 8006d64:	f001 fde0 	bl	8008928 <RCCEx_PLL2_Config>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8006d6e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d10d      	bne.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006d76:	4b3e      	ldr	r3, [pc, #248]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006d78:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006d7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d88:	4939      	ldr	r1, [pc, #228]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006d8a:	4313      	orrs	r3, r2
 8006d8c:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8006d90:	e003      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d92:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006d96:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006d9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da2:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8006da6:	60bb      	str	r3, [r7, #8]
 8006da8:	2300      	movs	r3, #0
 8006daa:	60fb      	str	r3, [r7, #12]
 8006dac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006db0:	460b      	mov	r3, r1
 8006db2:	4313      	orrs	r3, r2
 8006db4:	d03a      	beq.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8006db6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006dc2:	d00e      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8006dc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006dc8:	d815      	bhi.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d017      	beq.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006dce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006dd2:	d110      	bne.n	8006df6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dd4:	4b26      	ldr	r3, [pc, #152]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dd8:	4a25      	ldr	r2, [pc, #148]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006dda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006dde:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006de0:	e00e      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006de2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006de6:	3308      	adds	r3, #8
 8006de8:	4618      	mov	r0, r3
 8006dea:	f001 fd9d 	bl	8008928 <RCCEx_PLL2_Config>
 8006dee:	4603      	mov	r3, r0
 8006df0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006df4:	e004      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8006df6:	2301      	movs	r3, #1
 8006df8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006dfc:	e000      	b.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8006dfe:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006e00:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d10d      	bne.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006e08:	4b19      	ldr	r3, [pc, #100]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e0e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006e12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e1a:	4915      	ldr	r1, [pc, #84]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8006e22:	e003      	b.n	8006e2c <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e24:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006e28:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006e2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e34:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006e38:	603b      	str	r3, [r7, #0]
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	607b      	str	r3, [r7, #4]
 8006e3e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006e42:	460b      	mov	r3, r1
 8006e44:	4313      	orrs	r3, r2
 8006e46:	d00c      	beq.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006e48:	4b09      	ldr	r3, [pc, #36]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006e4a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006e4e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006e52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006e5a:	4905      	ldr	r1, [pc, #20]	; (8006e70 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006e62:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	37e8      	adds	r7, #232	; 0xe8
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e70:	46020c00 	.word	0x46020c00

08006e74 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b089      	sub	sp, #36	; 0x24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006e7c:	4bac      	ldr	r3, [pc, #688]	; (8007130 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e84:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006e86:	4baa      	ldr	r3, [pc, #680]	; (8007130 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e8a:	f003 0303 	and.w	r3, r3, #3
 8006e8e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006e90:	4ba7      	ldr	r3, [pc, #668]	; (8007130 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e94:	0a1b      	lsrs	r3, r3, #8
 8006e96:	f003 030f 	and.w	r3, r3, #15
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8006e9e:	4ba4      	ldr	r3, [pc, #656]	; (8007130 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ea2:	f003 0310 	and.w	r3, r3, #16
 8006ea6:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006ea8:	4ba1      	ldr	r3, [pc, #644]	; (8007130 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eac:	08db      	lsrs	r3, r3, #3
 8006eae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	fb02 f303 	mul.w	r3, r2, r3
 8006eb8:	ee07 3a90 	vmov	s15, r3
 8006ebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec0:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006ec4:	693b      	ldr	r3, [r7, #16]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	f000 8123 	beq.w	8007112 <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	2b03      	cmp	r3, #3
 8006ed0:	d062      	beq.n	8006f98 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	2b03      	cmp	r3, #3
 8006ed6:	f200 8081 	bhi.w	8006fdc <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d024      	beq.n	8006f2a <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8006ee0:	697b      	ldr	r3, [r7, #20]
 8006ee2:	2b02      	cmp	r3, #2
 8006ee4:	d17a      	bne.n	8006fdc <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006ee6:	693b      	ldr	r3, [r7, #16]
 8006ee8:	ee07 3a90 	vmov	s15, r3
 8006eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ef0:	eddf 6a90 	vldr	s13, [pc, #576]	; 8007134 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8006ef4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ef8:	4b8d      	ldr	r3, [pc, #564]	; (8007130 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006efc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f00:	ee07 3a90 	vmov	s15, r3
 8006f04:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f08:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f0c:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8007138 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006f10:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f14:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f28:	e08f      	b.n	800704a <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006f2a:	4b81      	ldr	r3, [pc, #516]	; (8007130 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d005      	beq.n	8006f42 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 8006f36:	4b7e      	ldr	r3, [pc, #504]	; (8007130 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	0f1b      	lsrs	r3, r3, #28
 8006f3c:	f003 030f 	and.w	r3, r3, #15
 8006f40:	e006      	b.n	8006f50 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8006f42:	4b7b      	ldr	r3, [pc, #492]	; (8007130 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006f44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f48:	041b      	lsls	r3, r3, #16
 8006f4a:	0f1b      	lsrs	r3, r3, #28
 8006f4c:	f003 030f 	and.w	r3, r3, #15
 8006f50:	4a7a      	ldr	r2, [pc, #488]	; (800713c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006f52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f56:	ee07 3a90 	vmov	s15, r3
 8006f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	ee07 3a90 	vmov	s15, r3
 8006f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	ee07 3a90 	vmov	s15, r3
 8006f72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f76:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f7a:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8007138 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006f7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006f8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f96:	e058      	b.n	800704a <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	ee07 3a90 	vmov	s15, r3
 8006f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fa2:	eddf 6a64 	vldr	s13, [pc, #400]	; 8007134 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8006fa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006faa:	4b61      	ldr	r3, [pc, #388]	; (8007130 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006fac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fb2:	ee07 3a90 	vmov	s15, r3
 8006fb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fba:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fbe:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8007138 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006fc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006fc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fce:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006fd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fda:	e036      	b.n	800704a <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006fdc:	4b54      	ldr	r3, [pc, #336]	; (8007130 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d005      	beq.n	8006ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8006fe8:	4b51      	ldr	r3, [pc, #324]	; (8007130 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	0f1b      	lsrs	r3, r3, #28
 8006fee:	f003 030f 	and.w	r3, r3, #15
 8006ff2:	e006      	b.n	8007002 <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8006ff4:	4b4e      	ldr	r3, [pc, #312]	; (8007130 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006ff6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ffa:	041b      	lsls	r3, r3, #16
 8006ffc:	0f1b      	lsrs	r3, r3, #28
 8006ffe:	f003 030f 	and.w	r3, r3, #15
 8007002:	4a4e      	ldr	r2, [pc, #312]	; (800713c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8007004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007008:	ee07 3a90 	vmov	s15, r3
 800700c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	ee07 3a90 	vmov	s15, r3
 8007016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800701a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	ee07 3a90 	vmov	s15, r3
 8007024:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007028:	ed97 6a02 	vldr	s12, [r7, #8]
 800702c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8007138 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8007030:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007034:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007038:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800703c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007044:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007048:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800704a:	4b39      	ldr	r3, [pc, #228]	; (8007130 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800704c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800704e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007052:	2b00      	cmp	r3, #0
 8007054:	d017      	beq.n	8007086 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007056:	4b36      	ldr	r3, [pc, #216]	; (8007130 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8007058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800705a:	0a5b      	lsrs	r3, r3, #9
 800705c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007060:	ee07 3a90 	vmov	s15, r3
 8007064:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8007068:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800706c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007070:	edd7 6a07 	vldr	s13, [r7, #28]
 8007074:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007078:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800707c:	ee17 2a90 	vmov	r2, s15
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	601a      	str	r2, [r3, #0]
 8007084:	e002      	b.n	800708c <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2200      	movs	r2, #0
 800708a:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800708c:	4b28      	ldr	r3, [pc, #160]	; (8007130 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800708e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007090:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d017      	beq.n	80070c8 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007098:	4b25      	ldr	r3, [pc, #148]	; (8007130 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800709a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800709c:	0c1b      	lsrs	r3, r3, #16
 800709e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070a2:	ee07 3a90 	vmov	s15, r3
 80070a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80070aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070ae:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80070b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80070b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070be:	ee17 2a90 	vmov	r2, s15
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	605a      	str	r2, [r3, #4]
 80070c6:	e002      	b.n	80070ce <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2200      	movs	r2, #0
 80070cc:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80070ce:	4b18      	ldr	r3, [pc, #96]	; (8007130 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80070d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d017      	beq.n	800710a <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80070da:	4b15      	ldr	r3, [pc, #84]	; (8007130 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80070dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070de:	0e1b      	lsrs	r3, r3, #24
 80070e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070e4:	ee07 3a90 	vmov	s15, r3
 80070e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80070ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80070f0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80070f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80070f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80070fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007100:	ee17 2a90 	vmov	r2, s15
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007108:	e00c      	b.n	8007124 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	609a      	str	r2, [r3, #8]
}
 8007110:	e008      	b.n	8007124 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	609a      	str	r2, [r3, #8]
}
 8007124:	bf00      	nop
 8007126:	3724      	adds	r7, #36	; 0x24
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr
 8007130:	46020c00 	.word	0x46020c00
 8007134:	4b742400 	.word	0x4b742400
 8007138:	46000000 	.word	0x46000000
 800713c:	0800d604 	.word	0x0800d604

08007140 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007140:	b480      	push	{r7}
 8007142:	b089      	sub	sp, #36	; 0x24
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007148:	4bac      	ldr	r3, [pc, #688]	; (80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800714a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800714c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007150:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8007152:	4baa      	ldr	r3, [pc, #680]	; (80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007154:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007156:	f003 0303 	and.w	r3, r3, #3
 800715a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800715c:	4ba7      	ldr	r3, [pc, #668]	; (80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800715e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007160:	0a1b      	lsrs	r3, r3, #8
 8007162:	f003 030f 	and.w	r3, r3, #15
 8007166:	3301      	adds	r3, #1
 8007168:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800716a:	4ba4      	ldr	r3, [pc, #656]	; (80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800716c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800716e:	f003 0310 	and.w	r3, r3, #16
 8007172:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007174:	4ba1      	ldr	r3, [pc, #644]	; (80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007178:	08db      	lsrs	r3, r3, #3
 800717a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800717e:	68fa      	ldr	r2, [r7, #12]
 8007180:	fb02 f303 	mul.w	r3, r2, r3
 8007184:	ee07 3a90 	vmov	s15, r3
 8007188:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800718c:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	2b00      	cmp	r3, #0
 8007194:	f000 8123 	beq.w	80073de <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	2b03      	cmp	r3, #3
 800719c:	d062      	beq.n	8007264 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	2b03      	cmp	r3, #3
 80071a2:	f200 8081 	bhi.w	80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d024      	beq.n	80071f6 <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	2b02      	cmp	r3, #2
 80071b0:	d17a      	bne.n	80072a8 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	ee07 3a90 	vmov	s15, r3
 80071b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071bc:	eddf 6a90 	vldr	s13, [pc, #576]	; 8007400 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 80071c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80071c4:	4b8d      	ldr	r3, [pc, #564]	; (80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80071c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071cc:	ee07 3a90 	vmov	s15, r3
 80071d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80071d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80071d8:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8007404 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80071dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80071e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80071e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80071ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071f4:	e08f      	b.n	8007316 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80071f6:	4b81      	ldr	r3, [pc, #516]	; (80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d005      	beq.n	800720e <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 8007202:	4b7e      	ldr	r3, [pc, #504]	; (80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	0f1b      	lsrs	r3, r3, #28
 8007208:	f003 030f 	and.w	r3, r3, #15
 800720c:	e006      	b.n	800721c <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 800720e:	4b7b      	ldr	r3, [pc, #492]	; (80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007210:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007214:	041b      	lsls	r3, r3, #16
 8007216:	0f1b      	lsrs	r3, r3, #28
 8007218:	f003 030f 	and.w	r3, r3, #15
 800721c:	4a7a      	ldr	r2, [pc, #488]	; (8007408 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800721e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007222:	ee07 3a90 	vmov	s15, r3
 8007226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	ee07 3a90 	vmov	s15, r3
 8007230:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007234:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	ee07 3a90 	vmov	s15, r3
 800723e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007242:	ed97 6a02 	vldr	s12, [r7, #8]
 8007246:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8007404 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800724a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800724e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007252:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007256:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800725a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800725e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007262:	e058      	b.n	8007316 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	ee07 3a90 	vmov	s15, r3
 800726a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800726e:	eddf 6a64 	vldr	s13, [pc, #400]	; 8007400 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8007272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007276:	4b61      	ldr	r3, [pc, #388]	; (80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800727a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800727e:	ee07 3a90 	vmov	s15, r3
 8007282:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007286:	ed97 6a02 	vldr	s12, [r7, #8]
 800728a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8007404 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800728e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007292:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800729a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800729e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072a6:	e036      	b.n	8007316 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80072a8:	4b54      	ldr	r3, [pc, #336]	; (80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80072aa:	689b      	ldr	r3, [r3, #8]
 80072ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d005      	beq.n	80072c0 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 80072b4:	4b51      	ldr	r3, [pc, #324]	; (80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	0f1b      	lsrs	r3, r3, #28
 80072ba:	f003 030f 	and.w	r3, r3, #15
 80072be:	e006      	b.n	80072ce <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 80072c0:	4b4e      	ldr	r3, [pc, #312]	; (80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80072c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80072c6:	041b      	lsls	r3, r3, #16
 80072c8:	0f1b      	lsrs	r3, r3, #28
 80072ca:	f003 030f 	and.w	r3, r3, #15
 80072ce:	4a4e      	ldr	r2, [pc, #312]	; (8007408 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80072d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072d4:	ee07 3a90 	vmov	s15, r3
 80072d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	ee07 3a90 	vmov	s15, r3
 80072e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	ee07 3a90 	vmov	s15, r3
 80072f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072f4:	ed97 6a02 	vldr	s12, [r7, #8]
 80072f8:	eddf 5a42 	vldr	s11, [pc, #264]	; 8007404 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80072fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007300:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007304:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007308:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 800730c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007310:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007314:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007316:	4b39      	ldr	r3, [pc, #228]	; (80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800731a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800731e:	2b00      	cmp	r3, #0
 8007320:	d017      	beq.n	8007352 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007322:	4b36      	ldr	r3, [pc, #216]	; (80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007326:	0a5b      	lsrs	r3, r3, #9
 8007328:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800732c:	ee07 3a90 	vmov	s15, r3
 8007330:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8007334:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007338:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800733c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007340:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007344:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007348:	ee17 2a90 	vmov	r2, s15
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	601a      	str	r2, [r3, #0]
 8007350:	e002      	b.n	8007358 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8007358:	4b28      	ldr	r3, [pc, #160]	; (80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800735a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800735c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007360:	2b00      	cmp	r3, #0
 8007362:	d017      	beq.n	8007394 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007364:	4b25      	ldr	r3, [pc, #148]	; (80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007368:	0c1b      	lsrs	r3, r3, #16
 800736a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800736e:	ee07 3a90 	vmov	s15, r3
 8007372:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8007376:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800737a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800737e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007382:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007386:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800738a:	ee17 2a90 	vmov	r2, s15
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	605a      	str	r2, [r3, #4]
 8007392:	e002      	b.n	800739a <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800739a:	4b18      	ldr	r3, [pc, #96]	; (80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800739c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d017      	beq.n	80073d6 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80073a6:	4b15      	ldr	r3, [pc, #84]	; (80073fc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80073a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073aa:	0e1b      	lsrs	r3, r3, #24
 80073ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073b0:	ee07 3a90 	vmov	s15, r3
 80073b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80073b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80073bc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80073c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80073c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80073c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80073cc:	ee17 2a90 	vmov	r2, s15
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80073d4:	e00c      	b.n	80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	609a      	str	r2, [r3, #8]
}
 80073dc:	e008      	b.n	80073f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	609a      	str	r2, [r3, #8]
}
 80073f0:	bf00      	nop
 80073f2:	3724      	adds	r7, #36	; 0x24
 80073f4:	46bd      	mov	sp, r7
 80073f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fa:	4770      	bx	lr
 80073fc:	46020c00 	.word	0x46020c00
 8007400:	4b742400 	.word	0x4b742400
 8007404:	46000000 	.word	0x46000000
 8007408:	0800d604 	.word	0x0800d604

0800740c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800740c:	b480      	push	{r7}
 800740e:	b089      	sub	sp, #36	; 0x24
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007414:	4bac      	ldr	r3, [pc, #688]	; (80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007416:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007418:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800741c:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800741e:	4baa      	ldr	r3, [pc, #680]	; (80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007422:	f003 0303 	and.w	r3, r3, #3
 8007426:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8007428:	4ba7      	ldr	r3, [pc, #668]	; (80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800742a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742c:	0a1b      	lsrs	r3, r3, #8
 800742e:	f003 030f 	and.w	r3, r3, #15
 8007432:	3301      	adds	r3, #1
 8007434:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8007436:	4ba4      	ldr	r3, [pc, #656]	; (80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743a:	f003 0310 	and.w	r3, r3, #16
 800743e:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007440:	4ba1      	ldr	r3, [pc, #644]	; (80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007444:	08db      	lsrs	r3, r3, #3
 8007446:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	fb02 f303 	mul.w	r3, r2, r3
 8007450:	ee07 3a90 	vmov	s15, r3
 8007454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007458:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	2b00      	cmp	r3, #0
 8007460:	f000 8123 	beq.w	80076aa <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	2b03      	cmp	r3, #3
 8007468:	d062      	beq.n	8007530 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	2b03      	cmp	r3, #3
 800746e:	f200 8081 	bhi.w	8007574 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d024      	beq.n	80074c2 <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	2b02      	cmp	r3, #2
 800747c:	d17a      	bne.n	8007574 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	ee07 3a90 	vmov	s15, r3
 8007484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007488:	eddf 6a90 	vldr	s13, [pc, #576]	; 80076cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800748c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007490:	4b8d      	ldr	r3, [pc, #564]	; (80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007494:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007498:	ee07 3a90 	vmov	s15, r3
 800749c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80074a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80074a4:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80076d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80074a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80074ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80074b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80074b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074bc:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 80074c0:	e08f      	b.n	80075e2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80074c2:	4b81      	ldr	r3, [pc, #516]	; (80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80074c4:	689b      	ldr	r3, [r3, #8]
 80074c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d005      	beq.n	80074da <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 80074ce:	4b7e      	ldr	r3, [pc, #504]	; (80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	0f1b      	lsrs	r3, r3, #28
 80074d4:	f003 030f 	and.w	r3, r3, #15
 80074d8:	e006      	b.n	80074e8 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 80074da:	4b7b      	ldr	r3, [pc, #492]	; (80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80074dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80074e0:	041b      	lsls	r3, r3, #16
 80074e2:	0f1b      	lsrs	r3, r3, #28
 80074e4:	f003 030f 	and.w	r3, r3, #15
 80074e8:	4a7a      	ldr	r2, [pc, #488]	; (80076d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80074ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074ee:	ee07 3a90 	vmov	s15, r3
 80074f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074f6:	693b      	ldr	r3, [r7, #16]
 80074f8:	ee07 3a90 	vmov	s15, r3
 80074fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007500:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	ee07 3a90 	vmov	s15, r3
 800750a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800750e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007512:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80076d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8007516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800751a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800751e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007522:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800752a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800752e:	e058      	b.n	80075e2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	ee07 3a90 	vmov	s15, r3
 8007536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800753a:	eddf 6a64 	vldr	s13, [pc, #400]	; 80076cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800753e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007542:	4b61      	ldr	r3, [pc, #388]	; (80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800754a:	ee07 3a90 	vmov	s15, r3
 800754e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007552:	ed97 6a02 	vldr	s12, [r7, #8]
 8007556:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80076d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800755a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800755e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007566:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800756a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800756e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007572:	e036      	b.n	80075e2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007574:	4b54      	ldr	r3, [pc, #336]	; (80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800757c:	2b00      	cmp	r3, #0
 800757e:	d005      	beq.n	800758c <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 8007580:	4b51      	ldr	r3, [pc, #324]	; (80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	0f1b      	lsrs	r3, r3, #28
 8007586:	f003 030f 	and.w	r3, r3, #15
 800758a:	e006      	b.n	800759a <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 800758c:	4b4e      	ldr	r3, [pc, #312]	; (80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800758e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007592:	041b      	lsls	r3, r3, #16
 8007594:	0f1b      	lsrs	r3, r3, #28
 8007596:	f003 030f 	and.w	r3, r3, #15
 800759a:	4a4e      	ldr	r2, [pc, #312]	; (80076d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800759c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075a0:	ee07 3a90 	vmov	s15, r3
 80075a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	ee07 3a90 	vmov	s15, r3
 80075ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80075b6:	69bb      	ldr	r3, [r7, #24]
 80075b8:	ee07 3a90 	vmov	s15, r3
 80075bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075c0:	ed97 6a02 	vldr	s12, [r7, #8]
 80075c4:	eddf 5a42 	vldr	s11, [pc, #264]	; 80076d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80075c8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80075d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075dc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80075e0:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80075e2:	4b39      	ldr	r3, [pc, #228]	; (80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80075e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d017      	beq.n	800761e <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80075ee:	4b36      	ldr	r3, [pc, #216]	; (80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80075f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075f2:	0a5b      	lsrs	r3, r3, #9
 80075f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075f8:	ee07 3a90 	vmov	s15, r3
 80075fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8007600:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007604:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007608:	edd7 6a07 	vldr	s13, [r7, #28]
 800760c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007610:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007614:	ee17 2a90 	vmov	r2, s15
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	601a      	str	r2, [r3, #0]
 800761c:	e002      	b.n	8007624 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007624:	4b28      	ldr	r3, [pc, #160]	; (80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d017      	beq.n	8007660 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007630:	4b25      	ldr	r3, [pc, #148]	; (80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007634:	0c1b      	lsrs	r3, r3, #16
 8007636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800763a:	ee07 3a90 	vmov	s15, r3
 800763e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007642:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007646:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800764a:	edd7 6a07 	vldr	s13, [r7, #28]
 800764e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007652:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007656:	ee17 2a90 	vmov	r2, s15
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	605a      	str	r2, [r3, #4]
 800765e:	e002      	b.n	8007666 <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007666:	4b18      	ldr	r3, [pc, #96]	; (80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800766a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800766e:	2b00      	cmp	r3, #0
 8007670:	d017      	beq.n	80076a2 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007672:	4b15      	ldr	r3, [pc, #84]	; (80076c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007676:	0e1b      	lsrs	r3, r3, #24
 8007678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800767c:	ee07 3a90 	vmov	s15, r3
 8007680:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8007684:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007688:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800768c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007690:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007694:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007698:	ee17 2a90 	vmov	r2, s15
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80076a0:	e00c      	b.n	80076bc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	609a      	str	r2, [r3, #8]
}
 80076a8:	e008      	b.n	80076bc <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2200      	movs	r2, #0
 80076b4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	2200      	movs	r2, #0
 80076ba:	609a      	str	r2, [r3, #8]
}
 80076bc:	bf00      	nop
 80076be:	3724      	adds	r7, #36	; 0x24
 80076c0:	46bd      	mov	sp, r7
 80076c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c6:	4770      	bx	lr
 80076c8:	46020c00 	.word	0x46020c00
 80076cc:	4b742400 	.word	0x4b742400
 80076d0:	46000000 	.word	0x46000000
 80076d4:	0800d604 	.word	0x0800d604

080076d8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b08e      	sub	sp, #56	; 0x38
 80076dc:	af00      	add	r7, sp, #0
 80076de:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80076e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076e6:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 80076ea:	430b      	orrs	r3, r1
 80076ec:	d145      	bne.n	800777a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80076ee:	4ba7      	ldr	r3, [pc, #668]	; (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80076f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076f8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80076fa:	4ba4      	ldr	r3, [pc, #656]	; (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80076fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007700:	f003 0302 	and.w	r3, r3, #2
 8007704:	2b02      	cmp	r3, #2
 8007706:	d108      	bne.n	800771a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8007708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800770e:	d104      	bne.n	800771a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8007710:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007714:	637b      	str	r3, [r7, #52]	; 0x34
 8007716:	f001 b8fc 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800771a:	4b9c      	ldr	r3, [pc, #624]	; (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800771c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007720:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007724:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007728:	d114      	bne.n	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800772a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007730:	d110      	bne.n	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007732:	4b96      	ldr	r3, [pc, #600]	; (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007734:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800773c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007740:	d103      	bne.n	800774a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8007742:	23fa      	movs	r3, #250	; 0xfa
 8007744:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007746:	f001 b8e4 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800774a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800774e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007750:	f001 b8df 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8007754:	4b8d      	ldr	r3, [pc, #564]	; (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800775c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007760:	d107      	bne.n	8007772 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8007762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007764:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007768:	d103      	bne.n	8007772 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800776a:	4b89      	ldr	r3, [pc, #548]	; (8007990 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800776c:	637b      	str	r3, [r7, #52]	; 0x34
 800776e:	f001 b8d0 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007772:	2300      	movs	r3, #0
 8007774:	637b      	str	r3, [r7, #52]	; 0x34
 8007776:	f001 b8cc 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800777a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800777e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007782:	430b      	orrs	r3, r1
 8007784:	d151      	bne.n	800782a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007786:	4b81      	ldr	r3, [pc, #516]	; (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007788:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800778c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007790:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007794:	2b80      	cmp	r3, #128	; 0x80
 8007796:	d035      	beq.n	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8007798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779a:	2b80      	cmp	r3, #128	; 0x80
 800779c:	d841      	bhi.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800779e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a0:	2b60      	cmp	r3, #96	; 0x60
 80077a2:	d02a      	beq.n	80077fa <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80077a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077a6:	2b60      	cmp	r3, #96	; 0x60
 80077a8:	d83b      	bhi.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80077aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ac:	2b40      	cmp	r3, #64	; 0x40
 80077ae:	d009      	beq.n	80077c4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80077b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b2:	2b40      	cmp	r3, #64	; 0x40
 80077b4:	d835      	bhi.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80077b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d00c      	beq.n	80077d6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80077bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077be:	2b20      	cmp	r3, #32
 80077c0:	d012      	beq.n	80077e8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80077c2:	e02e      	b.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80077c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7ff fb53 	bl	8006e74 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80077ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077d2:	f001 b89e 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80077d6:	f107 0318 	add.w	r3, r7, #24
 80077da:	4618      	mov	r0, r3
 80077dc:	f7ff fcb0 	bl	8007140 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077e4:	f001 b895 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80077e8:	f107 030c 	add.w	r3, r7, #12
 80077ec:	4618      	mov	r0, r3
 80077ee:	f7ff fe0d 	bl	800740c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077f6:	f001 b88c 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80077fa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80077fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007800:	f001 b887 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007804:	4b61      	ldr	r3, [pc, #388]	; (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800780c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007810:	d103      	bne.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8007812:	4b60      	ldr	r3, [pc, #384]	; (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007814:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007816:	f001 b87c 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800781a:	2300      	movs	r3, #0
 800781c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800781e:	f001 b878 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 8007822:	2300      	movs	r3, #0
 8007824:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007826:	f001 b874 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800782a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800782e:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007832:	430b      	orrs	r3, r1
 8007834:	d158      	bne.n	80078e8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007836:	4b55      	ldr	r3, [pc, #340]	; (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007838:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800783c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007840:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007844:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007848:	d03b      	beq.n	80078c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800784a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007850:	d846      	bhi.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007854:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007858:	d02e      	beq.n	80078b8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800785a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007860:	d83e      	bhi.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007864:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007868:	d00b      	beq.n	8007882 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800786a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007870:	d836      	bhi.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007874:	2b00      	cmp	r3, #0
 8007876:	d00d      	beq.n	8007894 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8007878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800787e:	d012      	beq.n	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8007880:	e02e      	b.n	80078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007886:	4618      	mov	r0, r3
 8007888:	f7ff faf4 	bl	8006e74 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800788c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007890:	f001 b83f 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007894:	f107 0318 	add.w	r3, r7, #24
 8007898:	4618      	mov	r0, r3
 800789a:	f7ff fc51 	bl	8007140 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078a2:	f001 b836 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80078a6:	f107 030c 	add.w	r3, r7, #12
 80078aa:	4618      	mov	r0, r3
 80078ac:	f7ff fdae 	bl	800740c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078b4:	f001 b82d 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80078b8:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80078bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078be:	f001 b828 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80078c2:	4b32      	ldr	r3, [pc, #200]	; (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078ce:	d103      	bne.n	80078d8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80078d0:	4b30      	ldr	r3, [pc, #192]	; (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80078d2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80078d4:	f001 b81d 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80078d8:	2300      	movs	r3, #0
 80078da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078dc:	f001 b819 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 80078e0:	2300      	movs	r3, #0
 80078e2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078e4:	f001 b815 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80078e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078ec:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80078f0:	430b      	orrs	r3, r1
 80078f2:	d126      	bne.n	8007942 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80078f4:	4b25      	ldr	r3, [pc, #148]	; (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80078f6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80078fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078fe:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8007900:	4b22      	ldr	r3, [pc, #136]	; (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800790c:	d106      	bne.n	800791c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800790e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007910:	2b00      	cmp	r3, #0
 8007912:	d103      	bne.n	800791c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8007914:	4b1f      	ldr	r3, [pc, #124]	; (8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007916:	637b      	str	r3, [r7, #52]	; 0x34
 8007918:	f000 bffb 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800791c:	4b1b      	ldr	r3, [pc, #108]	; (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007928:	d107      	bne.n	800793a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800792a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007930:	d103      	bne.n	800793a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8007932:	4b19      	ldr	r3, [pc, #100]	; (8007998 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007934:	637b      	str	r3, [r7, #52]	; 0x34
 8007936:	f000 bfec 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800793a:	2300      	movs	r3, #0
 800793c:	637b      	str	r3, [r7, #52]	; 0x34
 800793e:	f000 bfe8 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8007942:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007946:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800794a:	430b      	orrs	r3, r1
 800794c:	d164      	bne.n	8007a18 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800794e:	4b0f      	ldr	r3, [pc, #60]	; (800798c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007954:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007958:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800795a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800795c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007960:	d03d      	beq.n	80079de <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007964:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007968:	d852      	bhi.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800796a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007970:	d014      	beq.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8007972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007974:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007978:	d84a      	bhi.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800797a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797c:	2b00      	cmp	r3, #0
 800797e:	d01f      	beq.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8007980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007982:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007986:	d012      	beq.n	80079ae <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8007988:	e042      	b.n	8007a10 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800798a:	bf00      	nop
 800798c:	46020c00 	.word	0x46020c00
 8007990:	0007a120 	.word	0x0007a120
 8007994:	00f42400 	.word	0x00f42400
 8007998:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800799c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079a0:	4618      	mov	r0, r3
 80079a2:	f7ff fa67 	bl	8006e74 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80079a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079aa:	f000 bfb2 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80079ae:	f107 0318 	add.w	r3, r7, #24
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7ff fbc4 	bl	8007140 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079bc:	f000 bfa9 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80079c0:	4bab      	ldr	r3, [pc, #684]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80079c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079cc:	d103      	bne.n	80079d6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 80079ce:	4ba9      	ldr	r3, [pc, #676]	; (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80079d0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80079d2:	f000 bf9e 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80079d6:	2300      	movs	r3, #0
 80079d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079da:	f000 bf9a 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80079de:	4ba4      	ldr	r3, [pc, #656]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d005      	beq.n	80079f6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80079ea:	4ba1      	ldr	r3, [pc, #644]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	0e1b      	lsrs	r3, r3, #24
 80079f0:	f003 030f 	and.w	r3, r3, #15
 80079f4:	e006      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 80079f6:	4b9e      	ldr	r3, [pc, #632]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80079f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80079fc:	041b      	lsls	r3, r3, #16
 80079fe:	0e1b      	lsrs	r3, r3, #24
 8007a00:	f003 030f 	and.w	r3, r3, #15
 8007a04:	4a9c      	ldr	r2, [pc, #624]	; (8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8007a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a0a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a0c:	f000 bf81 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8007a10:	2300      	movs	r3, #0
 8007a12:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a14:	f000 bf7d 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8007a18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a1c:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8007a20:	430b      	orrs	r3, r1
 8007a22:	d175      	bne.n	8007b10 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007a24:	4b92      	ldr	r3, [pc, #584]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007a26:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a2e:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8007a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d15b      	bne.n	8007aee <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007a36:	4b8e      	ldr	r3, [pc, #568]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a3c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007a40:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8007a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a44:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007a48:	d034      	beq.n	8007ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8007a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007a50:	d849      	bhi.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8007a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a58:	d00b      	beq.n	8007a72 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8007a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a60:	d841      	bhi.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8007a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d016      	beq.n	8007a96 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a6e:	d009      	beq.n	8007a84 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8007a70:	e039      	b.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7ff f9fc 	bl	8006e74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007a80:	f000 bf47 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a84:	f107 0318 	add.w	r3, r7, #24
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7ff fb59 	bl	8007140 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007a92:	f000 bf3e 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007a96:	4b76      	ldr	r3, [pc, #472]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aa2:	d103      	bne.n	8007aac <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 8007aa4:	4b73      	ldr	r3, [pc, #460]	; (8007c74 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007aa6:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007aa8:	f000 bf33 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 8007aac:	2300      	movs	r3, #0
 8007aae:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007ab0:	f000 bf2f 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007ab4:	4b6e      	ldr	r3, [pc, #440]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d005      	beq.n	8007acc <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 8007ac0:	4b6b      	ldr	r3, [pc, #428]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007ac2:	689b      	ldr	r3, [r3, #8]
 8007ac4:	0e1b      	lsrs	r3, r3, #24
 8007ac6:	f003 030f 	and.w	r3, r3, #15
 8007aca:	e006      	b.n	8007ada <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 8007acc:	4b68      	ldr	r3, [pc, #416]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007ace:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ad2:	041b      	lsls	r3, r3, #16
 8007ad4:	0e1b      	lsrs	r3, r3, #24
 8007ad6:	f003 030f 	and.w	r3, r3, #15
 8007ada:	4a67      	ldr	r2, [pc, #412]	; (8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8007adc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ae0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007ae2:	f000 bf16 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007aea:	f000 bf12 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8007aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007af4:	d108      	bne.n	8007b08 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007af6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7ff f9ba 	bl	8006e74 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8007b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b02:	637b      	str	r3, [r7, #52]	; 0x34
 8007b04:	f000 bf05 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b0c:	f000 bf01 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8007b10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b14:	1e51      	subs	r1, r2, #1
 8007b16:	430b      	orrs	r3, r1
 8007b18:	d136      	bne.n	8007b88 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007b1a:	4b55      	ldr	r3, [pc, #340]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b20:	f003 0303 	and.w	r3, r3, #3
 8007b24:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d104      	bne.n	8007b36 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8007b2c:	f7fe fb34 	bl	8006198 <HAL_RCC_GetPCLK2Freq>
 8007b30:	6378      	str	r0, [r7, #52]	; 0x34
 8007b32:	f000 beee 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8007b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d104      	bne.n	8007b46 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007b3c:	f7fe f9f6 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 8007b40:	6378      	str	r0, [r7, #52]	; 0x34
 8007b42:	f000 bee6 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007b46:	4b4a      	ldr	r3, [pc, #296]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b52:	d106      	bne.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	d103      	bne.n	8007b62 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 8007b5a:	4b48      	ldr	r3, [pc, #288]	; (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8007b5e:	f000 bed8 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007b62:	4b43      	ldr	r3, [pc, #268]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007b64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b68:	f003 0302 	and.w	r3, r3, #2
 8007b6c:	2b02      	cmp	r3, #2
 8007b6e:	d107      	bne.n	8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8007b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b72:	2b03      	cmp	r3, #3
 8007b74:	d104      	bne.n	8007b80 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 8007b76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b7c:	f000 bec9 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8007b80:	2300      	movs	r3, #0
 8007b82:	637b      	str	r3, [r7, #52]	; 0x34
 8007b84:	f000 bec5 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8007b88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b8c:	1e91      	subs	r1, r2, #2
 8007b8e:	430b      	orrs	r3, r1
 8007b90:	d136      	bne.n	8007c00 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007b92:	4b37      	ldr	r3, [pc, #220]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007b94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b98:	f003 030c 	and.w	r3, r3, #12
 8007b9c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d104      	bne.n	8007bae <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007ba4:	f7fe fae4 	bl	8006170 <HAL_RCC_GetPCLK1Freq>
 8007ba8:	6378      	str	r0, [r7, #52]	; 0x34
 8007baa:	f000 beb2 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb0:	2b04      	cmp	r3, #4
 8007bb2:	d104      	bne.n	8007bbe <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007bb4:	f7fe f9ba 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 8007bb8:	6378      	str	r0, [r7, #52]	; 0x34
 8007bba:	f000 beaa 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007bbe:	4b2c      	ldr	r3, [pc, #176]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bca:	d106      	bne.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8007bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bce:	2b08      	cmp	r3, #8
 8007bd0:	d103      	bne.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 8007bd2:	4b2a      	ldr	r3, [pc, #168]	; (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007bd4:	637b      	str	r3, [r7, #52]	; 0x34
 8007bd6:	f000 be9c 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007bda:	4b25      	ldr	r3, [pc, #148]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007bdc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007be0:	f003 0302 	and.w	r3, r3, #2
 8007be4:	2b02      	cmp	r3, #2
 8007be6:	d107      	bne.n	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8007be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bea:	2b0c      	cmp	r3, #12
 8007bec:	d104      	bne.n	8007bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 8007bee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bf2:	637b      	str	r3, [r7, #52]	; 0x34
 8007bf4:	f000 be8d 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	637b      	str	r3, [r7, #52]	; 0x34
 8007bfc:	f000 be89 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8007c00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c04:	1f11      	subs	r1, r2, #4
 8007c06:	430b      	orrs	r3, r1
 8007c08:	d13e      	bne.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007c0a:	4b19      	ldr	r3, [pc, #100]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c10:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007c14:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d104      	bne.n	8007c26 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007c1c:	f7fe faa8 	bl	8006170 <HAL_RCC_GetPCLK1Freq>
 8007c20:	6378      	str	r0, [r7, #52]	; 0x34
 8007c22:	f000 be76 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8007c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c28:	2b10      	cmp	r3, #16
 8007c2a:	d104      	bne.n	8007c36 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007c2c:	f7fe f97e 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 8007c30:	6378      	str	r0, [r7, #52]	; 0x34
 8007c32:	f000 be6e 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007c36:	4b0e      	ldr	r3, [pc, #56]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c42:	d106      	bne.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8007c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c46:	2b20      	cmp	r3, #32
 8007c48:	d103      	bne.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8007c4a:	4b0c      	ldr	r3, [pc, #48]	; (8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007c4c:	637b      	str	r3, [r7, #52]	; 0x34
 8007c4e:	f000 be60 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007c52:	4b07      	ldr	r3, [pc, #28]	; (8007c70 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007c54:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c58:	f003 0302 	and.w	r3, r3, #2
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d10f      	bne.n	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c62:	2b30      	cmp	r3, #48	; 0x30
 8007c64:	d10c      	bne.n	8007c80 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 8007c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c6a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c6c:	f000 be51 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007c70:	46020c00 	.word	0x46020c00
 8007c74:	02dc6c00 	.word	0x02dc6c00
 8007c78:	0800d604 	.word	0x0800d604
 8007c7c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8007c80:	2300      	movs	r3, #0
 8007c82:	637b      	str	r3, [r7, #52]	; 0x34
 8007c84:	f000 be45 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8007c88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c8c:	f1a2 0108 	sub.w	r1, r2, #8
 8007c90:	430b      	orrs	r3, r1
 8007c92:	d136      	bne.n	8007d02 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007c94:	4b9f      	ldr	r3, [pc, #636]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007c9e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d104      	bne.n	8007cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007ca6:	f7fe fa63 	bl	8006170 <HAL_RCC_GetPCLK1Freq>
 8007caa:	6378      	str	r0, [r7, #52]	; 0x34
 8007cac:	f000 be31 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb2:	2b40      	cmp	r3, #64	; 0x40
 8007cb4:	d104      	bne.n	8007cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007cb6:	f7fe f939 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 8007cba:	6378      	str	r0, [r7, #52]	; 0x34
 8007cbc:	f000 be29 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007cc0:	4b94      	ldr	r3, [pc, #592]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ccc:	d106      	bne.n	8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 8007cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cd0:	2b80      	cmp	r3, #128	; 0x80
 8007cd2:	d103      	bne.n	8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 8007cd4:	4b90      	ldr	r3, [pc, #576]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007cd6:	637b      	str	r3, [r7, #52]	; 0x34
 8007cd8:	f000 be1b 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007cdc:	4b8d      	ldr	r3, [pc, #564]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007cde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ce2:	f003 0302 	and.w	r3, r3, #2
 8007ce6:	2b02      	cmp	r3, #2
 8007ce8:	d107      	bne.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 8007cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cec:	2bc0      	cmp	r3, #192	; 0xc0
 8007cee:	d104      	bne.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 8007cf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cf4:	637b      	str	r3, [r7, #52]	; 0x34
 8007cf6:	f000 be0c 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8007cfe:	f000 be08 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8007d02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d06:	f1a2 0110 	sub.w	r1, r2, #16
 8007d0a:	430b      	orrs	r3, r1
 8007d0c:	d139      	bne.n	8007d82 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007d0e:	4b81      	ldr	r3, [pc, #516]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007d10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d18:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d104      	bne.n	8007d2a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007d20:	f7fe fa26 	bl	8006170 <HAL_RCC_GetPCLK1Freq>
 8007d24:	6378      	str	r0, [r7, #52]	; 0x34
 8007d26:	f000 bdf4 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d30:	d104      	bne.n	8007d3c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007d32:	f7fe f8fb 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 8007d36:	6378      	str	r0, [r7, #52]	; 0x34
 8007d38:	f000 bdeb 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007d3c:	4b75      	ldr	r3, [pc, #468]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d48:	d107      	bne.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007d50:	d103      	bne.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 8007d52:	4b71      	ldr	r3, [pc, #452]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007d54:	637b      	str	r3, [r7, #52]	; 0x34
 8007d56:	f000 bddc 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007d5a:	4b6e      	ldr	r3, [pc, #440]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007d5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d60:	f003 0302 	and.w	r3, r3, #2
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	d108      	bne.n	8007d7a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8007d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d6e:	d104      	bne.n	8007d7a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 8007d70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d74:	637b      	str	r3, [r7, #52]	; 0x34
 8007d76:	f000 bdcc 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007d7a:	2300      	movs	r3, #0
 8007d7c:	637b      	str	r3, [r7, #52]	; 0x34
 8007d7e:	f000 bdc8 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007d82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d86:	f1a2 0120 	sub.w	r1, r2, #32
 8007d8a:	430b      	orrs	r3, r1
 8007d8c:	d158      	bne.n	8007e40 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007d8e:	4b61      	ldr	r3, [pc, #388]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007d90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007d94:	f003 0307 	and.w	r3, r3, #7
 8007d98:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d104      	bne.n	8007daa <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007da0:	f7fe fa0e 	bl	80061c0 <HAL_RCC_GetPCLK3Freq>
 8007da4:	6378      	str	r0, [r7, #52]	; 0x34
 8007da6:	f000 bdb4 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dac:	2b01      	cmp	r3, #1
 8007dae:	d104      	bne.n	8007dba <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007db0:	f7fe f8bc 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 8007db4:	6378      	str	r0, [r7, #52]	; 0x34
 8007db6:	f000 bdac 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007dba:	4b56      	ldr	r3, [pc, #344]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dc6:	d106      	bne.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 8007dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dca:	2b02      	cmp	r3, #2
 8007dcc:	d103      	bne.n	8007dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 8007dce:	4b52      	ldr	r3, [pc, #328]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8007dd2:	f000 bd9e 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007dd6:	4b4f      	ldr	r3, [pc, #316]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007dd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ddc:	f003 0302 	and.w	r3, r3, #2
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	d107      	bne.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8007de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de6:	2b03      	cmp	r3, #3
 8007de8:	d104      	bne.n	8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 8007dea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dee:	637b      	str	r3, [r7, #52]	; 0x34
 8007df0:	f000 bd8f 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8007df4:	4b47      	ldr	r3, [pc, #284]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f003 0320 	and.w	r3, r3, #32
 8007dfc:	2b20      	cmp	r3, #32
 8007dfe:	d11b      	bne.n	8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8007e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e02:	2b04      	cmp	r3, #4
 8007e04:	d118      	bne.n	8007e38 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007e06:	4b43      	ldr	r3, [pc, #268]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d005      	beq.n	8007e1e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8007e12:	4b40      	ldr	r3, [pc, #256]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	0e1b      	lsrs	r3, r3, #24
 8007e18:	f003 030f 	and.w	r3, r3, #15
 8007e1c:	e006      	b.n	8007e2c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8007e1e:	4b3d      	ldr	r3, [pc, #244]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007e20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e24:	041b      	lsls	r3, r3, #16
 8007e26:	0e1b      	lsrs	r3, r3, #24
 8007e28:	f003 030f 	and.w	r3, r3, #15
 8007e2c:	4a3b      	ldr	r2, [pc, #236]	; (8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e32:	637b      	str	r3, [r7, #52]	; 0x34
 8007e34:	f000 bd6d 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	637b      	str	r3, [r7, #52]	; 0x34
 8007e3c:	f000 bd69 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e44:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007e48:	430b      	orrs	r3, r1
 8007e4a:	d169      	bne.n	8007f20 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007e4c:	4b31      	ldr	r3, [pc, #196]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007e4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007e52:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007e56:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e5e:	d104      	bne.n	8007e6a <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007e60:	f7fe f864 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 8007e64:	6378      	str	r0, [r7, #52]	; 0x34
 8007e66:	f000 bd54 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e70:	d108      	bne.n	8007e84 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e72:	f107 0318 	add.w	r3, r7, #24
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7ff f962 	bl	8007140 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007e7c:	6a3b      	ldr	r3, [r7, #32]
 8007e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e80:	f000 bd47 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d104      	bne.n	8007e94 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8007e8a:	f7fe f957 	bl	800613c <HAL_RCC_GetHCLKFreq>
 8007e8e:	6378      	str	r0, [r7, #52]	; 0x34
 8007e90:	f000 bd3f 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8007e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e96:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007e9a:	d118      	bne.n	8007ece <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8007e9c:	4b1d      	ldr	r3, [pc, #116]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d005      	beq.n	8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8007ea8:	4b1a      	ldr	r3, [pc, #104]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	0f1b      	lsrs	r3, r3, #28
 8007eae:	f003 030f 	and.w	r3, r3, #15
 8007eb2:	e006      	b.n	8007ec2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8007eb4:	4b17      	ldr	r3, [pc, #92]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007eb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007eba:	041b      	lsls	r3, r3, #16
 8007ebc:	0f1b      	lsrs	r3, r3, #28
 8007ebe:	f003 030f 	and.w	r3, r3, #15
 8007ec2:	4a16      	ldr	r2, [pc, #88]	; (8007f1c <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007ec4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8007eca:	f000 bd22 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007ece:	4b11      	ldr	r3, [pc, #68]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ed6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007eda:	d107      	bne.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8007edc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ede:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ee2:	d103      	bne.n	8007eec <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 8007ee4:	4b0c      	ldr	r3, [pc, #48]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007ee6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ee8:	f000 bd13 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007eec:	4b09      	ldr	r3, [pc, #36]	; (8007f14 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ef8:	d107      	bne.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8007efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f00:	d103      	bne.n	8007f0a <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 8007f02:	4b05      	ldr	r3, [pc, #20]	; (8007f18 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007f04:	637b      	str	r3, [r7, #52]	; 0x34
 8007f06:	f000 bd04 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	637b      	str	r3, [r7, #52]	; 0x34
 8007f0e:	f000 bd00 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007f12:	bf00      	nop
 8007f14:	46020c00 	.word	0x46020c00
 8007f18:	00f42400 	.word	0x00f42400
 8007f1c:	0800d604 	.word	0x0800d604
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007f20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f24:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007f28:	430b      	orrs	r3, r1
 8007f2a:	d14e      	bne.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007f2c:	4ba8      	ldr	r3, [pc, #672]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007f2e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007f32:	f003 0307 	and.w	r3, r3, #7
 8007f36:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f3a:	2b04      	cmp	r3, #4
 8007f3c:	d841      	bhi.n	8007fc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007f3e:	a201      	add	r2, pc, #4	; (adr r2, 8007f44 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8007f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f44:	08007f7d 	.word	0x08007f7d
 8007f48:	08007f59 	.word	0x08007f59
 8007f4c:	08007f6b 	.word	0x08007f6b
 8007f50:	08007f87 	.word	0x08007f87
 8007f54:	08007f91 	.word	0x08007f91
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	f7fe ff89 	bl	8006e74 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f66:	f000 bcd4 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f6a:	f107 030c 	add.w	r3, r7, #12
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7ff fa4c 	bl	800740c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f78:	f000 bccb 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007f7c:	f7fe f8de 	bl	800613c <HAL_RCC_GetHCLKFreq>
 8007f80:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007f82:	f000 bcc6 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007f86:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007f8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f8c:	f000 bcc1 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007f90:	4b8f      	ldr	r3, [pc, #572]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007f92:	689b      	ldr	r3, [r3, #8]
 8007f94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d005      	beq.n	8007fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8007f9c:	4b8c      	ldr	r3, [pc, #560]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007f9e:	689b      	ldr	r3, [r3, #8]
 8007fa0:	0e1b      	lsrs	r3, r3, #24
 8007fa2:	f003 030f 	and.w	r3, r3, #15
 8007fa6:	e006      	b.n	8007fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8007fa8:	4b89      	ldr	r3, [pc, #548]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007faa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007fae:	041b      	lsls	r3, r3, #16
 8007fb0:	0e1b      	lsrs	r3, r3, #24
 8007fb2:	f003 030f 	and.w	r3, r3, #15
 8007fb6:	4a87      	ldr	r2, [pc, #540]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007fbc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007fbe:	f000 bca8 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007fc6:	f000 bca4 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8007fca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fce:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8007fd2:	430b      	orrs	r3, r1
 8007fd4:	d15d      	bne.n	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007fd6:	4b7e      	ldr	r3, [pc, #504]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007fd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007fdc:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007fe0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007fe8:	d036      	beq.n	8008058 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8007fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007ff0:	d84b      	bhi.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007ff8:	d029      	beq.n	800804e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8007ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008000:	d843      	bhi.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8008002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008004:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008008:	d013      	beq.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800800a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008010:	d83b      	bhi.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8008012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008014:	2b00      	cmp	r3, #0
 8008016:	d015      	beq.n	8008044 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8008018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800801e:	d134      	bne.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008020:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008024:	4618      	mov	r0, r3
 8008026:	f7fe ff25 	bl	8006e74 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800802a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800802e:	f000 bc70 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008032:	f107 030c 	add.w	r3, r7, #12
 8008036:	4618      	mov	r0, r3
 8008038:	f7ff f9e8 	bl	800740c <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 800803c:	693b      	ldr	r3, [r7, #16]
 800803e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008040:	f000 bc67 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8008044:	f7fe f87a 	bl	800613c <HAL_RCC_GetHCLKFreq>
 8008048:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800804a:	f000 bc62 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800804e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008052:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008054:	f000 bc5d 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008058:	4b5d      	ldr	r3, [pc, #372]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008060:	2b00      	cmp	r3, #0
 8008062:	d005      	beq.n	8008070 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8008064:	4b5a      	ldr	r3, [pc, #360]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	0e1b      	lsrs	r3, r3, #24
 800806a:	f003 030f 	and.w	r3, r3, #15
 800806e:	e006      	b.n	800807e <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8008070:	4b57      	ldr	r3, [pc, #348]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008072:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008076:	041b      	lsls	r3, r3, #16
 8008078:	0e1b      	lsrs	r3, r3, #24
 800807a:	f003 030f 	and.w	r3, r3, #15
 800807e:	4a55      	ldr	r2, [pc, #340]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008084:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008086:	f000 bc44 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800808a:	2300      	movs	r3, #0
 800808c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800808e:	f000 bc40 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8008092:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008096:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800809a:	430b      	orrs	r3, r1
 800809c:	d14a      	bne.n	8008134 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800809e:	4b4c      	ldr	r3, [pc, #304]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80080a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80080a8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80080aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d104      	bne.n	80080ba <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80080b0:	f7fe f85e 	bl	8006170 <HAL_RCC_GetPCLK1Freq>
 80080b4:	6378      	str	r0, [r7, #52]	; 0x34
 80080b6:	f000 bc2c 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80080ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080c0:	d104      	bne.n	80080cc <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80080c2:	f7fd ff33 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 80080c6:	6378      	str	r0, [r7, #52]	; 0x34
 80080c8:	f000 bc23 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80080cc:	4b40      	ldr	r3, [pc, #256]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80080d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080d8:	d107      	bne.n	80080ea <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 80080da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080e0:	d103      	bne.n	80080ea <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 80080e2:	4b3d      	ldr	r3, [pc, #244]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80080e4:	637b      	str	r3, [r7, #52]	; 0x34
 80080e6:	f000 bc14 	b.w	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80080ea:	4b39      	ldr	r3, [pc, #228]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f003 0320 	and.w	r3, r3, #32
 80080f2:	2b20      	cmp	r3, #32
 80080f4:	d11b      	bne.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 80080f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080fc:	d117      	bne.n	800812e <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80080fe:	4b34      	ldr	r3, [pc, #208]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008106:	2b00      	cmp	r3, #0
 8008108:	d005      	beq.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 800810a:	4b31      	ldr	r3, [pc, #196]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800810c:	689b      	ldr	r3, [r3, #8]
 800810e:	0e1b      	lsrs	r3, r3, #24
 8008110:	f003 030f 	and.w	r3, r3, #15
 8008114:	e006      	b.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8008116:	4b2e      	ldr	r3, [pc, #184]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008118:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800811c:	041b      	lsls	r3, r3, #16
 800811e:	0e1b      	lsrs	r3, r3, #24
 8008120:	f003 030f 	and.w	r3, r3, #15
 8008124:	4a2b      	ldr	r2, [pc, #172]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008126:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800812a:	637b      	str	r3, [r7, #52]	; 0x34
 800812c:	e3f1      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800812e:	2300      	movs	r3, #0
 8008130:	637b      	str	r3, [r7, #52]	; 0x34
 8008132:	e3ee      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8008134:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008138:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800813c:	430b      	orrs	r3, r1
 800813e:	d14d      	bne.n	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008140:	4b23      	ldr	r3, [pc, #140]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008142:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008146:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800814a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800814c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814e:	2b00      	cmp	r3, #0
 8008150:	d103      	bne.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008152:	f7fe f80d 	bl	8006170 <HAL_RCC_GetPCLK1Freq>
 8008156:	6378      	str	r0, [r7, #52]	; 0x34
 8008158:	e3db      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800815a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008160:	d103      	bne.n	800816a <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008162:	f7fd fee3 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 8008166:	6378      	str	r0, [r7, #52]	; 0x34
 8008168:	e3d3      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800816a:	4b19      	ldr	r3, [pc, #100]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008176:	d106      	bne.n	8008186 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8008178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800817a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800817e:	d102      	bne.n	8008186 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 8008180:	4b15      	ldr	r3, [pc, #84]	; (80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008182:	637b      	str	r3, [r7, #52]	; 0x34
 8008184:	e3c5      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8008186:	4b12      	ldr	r3, [pc, #72]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f003 0320 	and.w	r3, r3, #32
 800818e:	2b20      	cmp	r3, #32
 8008190:	d11b      	bne.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8008192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008194:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008198:	d117      	bne.n	80081ca <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800819a:	4b0d      	ldr	r3, [pc, #52]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d005      	beq.n	80081b2 <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 80081a6:	4b0a      	ldr	r3, [pc, #40]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	0e1b      	lsrs	r3, r3, #24
 80081ac:	f003 030f 	and.w	r3, r3, #15
 80081b0:	e006      	b.n	80081c0 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 80081b2:	4b07      	ldr	r3, [pc, #28]	; (80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80081b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80081b8:	041b      	lsls	r3, r3, #16
 80081ba:	0e1b      	lsrs	r3, r3, #24
 80081bc:	f003 030f 	and.w	r3, r3, #15
 80081c0:	4a04      	ldr	r2, [pc, #16]	; (80081d4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80081c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081c6:	637b      	str	r3, [r7, #52]	; 0x34
 80081c8:	e3a3      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80081ca:	2300      	movs	r3, #0
 80081cc:	637b      	str	r3, [r7, #52]	; 0x34
 80081ce:	e3a0      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80081d0:	46020c00 	.word	0x46020c00
 80081d4:	0800d604 	.word	0x0800d604
 80081d8:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80081dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081e0:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80081e4:	430b      	orrs	r3, r1
 80081e6:	d148      	bne.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80081e8:	4b9d      	ldr	r3, [pc, #628]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80081ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80081ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80081f2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80081f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081f6:	2bc0      	cmp	r3, #192	; 0xc0
 80081f8:	d024      	beq.n	8008244 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 80081fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081fc:	2bc0      	cmp	r3, #192	; 0xc0
 80081fe:	d839      	bhi.n	8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8008200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008202:	2b80      	cmp	r3, #128	; 0x80
 8008204:	d00d      	beq.n	8008222 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8008206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008208:	2b80      	cmp	r3, #128	; 0x80
 800820a:	d833      	bhi.n	8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 800820c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800820e:	2b00      	cmp	r3, #0
 8008210:	d003      	beq.n	800821a <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 8008212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008214:	2b40      	cmp	r3, #64	; 0x40
 8008216:	d011      	beq.n	800823c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8008218:	e02c      	b.n	8008274 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800821a:	f7fd ffd1 	bl	80061c0 <HAL_RCC_GetPCLK3Freq>
 800821e:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008220:	e377      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008222:	4b8f      	ldr	r3, [pc, #572]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800822a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800822e:	d102      	bne.n	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 8008230:	4b8c      	ldr	r3, [pc, #560]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8008232:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008234:	e36d      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8008236:	2300      	movs	r3, #0
 8008238:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800823a:	e36a      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800823c:	f7fd fe76 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 8008240:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008242:	e366      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8008244:	4b86      	ldr	r3, [pc, #536]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800824c:	2b00      	cmp	r3, #0
 800824e:	d005      	beq.n	800825c <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8008250:	4b83      	ldr	r3, [pc, #524]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	0f1b      	lsrs	r3, r3, #28
 8008256:	f003 030f 	and.w	r3, r3, #15
 800825a:	e006      	b.n	800826a <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 800825c:	4b80      	ldr	r3, [pc, #512]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800825e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008262:	041b      	lsls	r3, r3, #16
 8008264:	0f1b      	lsrs	r3, r3, #28
 8008266:	f003 030f 	and.w	r3, r3, #15
 800826a:	4a7f      	ldr	r2, [pc, #508]	; (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800826c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008270:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008272:	e34e      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 8008274:	2300      	movs	r3, #0
 8008276:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008278:	e34b      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800827a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800827e:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8008282:	430b      	orrs	r3, r1
 8008284:	d147      	bne.n	8008316 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008286:	4b76      	ldr	r3, [pc, #472]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008288:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800828c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008290:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8008292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008294:	2b00      	cmp	r3, #0
 8008296:	d103      	bne.n	80082a0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008298:	f7fd ff6a 	bl	8006170 <HAL_RCC_GetPCLK1Freq>
 800829c:	6378      	str	r0, [r7, #52]	; 0x34
 800829e:	e338      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80082a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80082a6:	d103      	bne.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80082a8:	f7fd fe40 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 80082ac:	6378      	str	r0, [r7, #52]	; 0x34
 80082ae:	e330      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80082b0:	4b6b      	ldr	r3, [pc, #428]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082bc:	d106      	bne.n	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 80082be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80082c4:	d102      	bne.n	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 80082c6:	4b67      	ldr	r3, [pc, #412]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80082c8:	637b      	str	r3, [r7, #52]	; 0x34
 80082ca:	e322      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80082cc:	4b64      	ldr	r3, [pc, #400]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f003 0320 	and.w	r3, r3, #32
 80082d4:	2b20      	cmp	r3, #32
 80082d6:	d11b      	bne.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 80082d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082da:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80082de:	d117      	bne.n	8008310 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80082e0:	4b5f      	ldr	r3, [pc, #380]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d005      	beq.n	80082f8 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 80082ec:	4b5c      	ldr	r3, [pc, #368]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	0e1b      	lsrs	r3, r3, #24
 80082f2:	f003 030f 	and.w	r3, r3, #15
 80082f6:	e006      	b.n	8008306 <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 80082f8:	4b59      	ldr	r3, [pc, #356]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80082fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80082fe:	041b      	lsls	r3, r3, #16
 8008300:	0e1b      	lsrs	r3, r3, #24
 8008302:	f003 030f 	and.w	r3, r3, #15
 8008306:	4a58      	ldr	r2, [pc, #352]	; (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8008308:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800830c:	637b      	str	r3, [r7, #52]	; 0x34
 800830e:	e300      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8008310:	2300      	movs	r3, #0
 8008312:	637b      	str	r3, [r7, #52]	; 0x34
 8008314:	e2fd      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8008316:	e9d7 2300 	ldrd	r2, r3, [r7]
 800831a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800831e:	430b      	orrs	r3, r1
 8008320:	d15b      	bne.n	80083da <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8008322:	4b4f      	ldr	r3, [pc, #316]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008324:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008328:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800832c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800832e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008330:	2b00      	cmp	r3, #0
 8008332:	d117      	bne.n	8008364 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008334:	4b4a      	ldr	r3, [pc, #296]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800833c:	2b00      	cmp	r3, #0
 800833e:	d005      	beq.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 8008340:	4b47      	ldr	r3, [pc, #284]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	0e1b      	lsrs	r3, r3, #24
 8008346:	f003 030f 	and.w	r3, r3, #15
 800834a:	e006      	b.n	800835a <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 800834c:	4b44      	ldr	r3, [pc, #272]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800834e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008352:	041b      	lsls	r3, r3, #16
 8008354:	0e1b      	lsrs	r3, r3, #24
 8008356:	f003 030f 	and.w	r3, r3, #15
 800835a:	4a43      	ldr	r2, [pc, #268]	; (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800835c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008360:	637b      	str	r3, [r7, #52]	; 0x34
 8008362:	e2d6      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8008364:	4b3e      	ldr	r3, [pc, #248]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008366:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800836a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800836e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008372:	d112      	bne.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8008374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800837a:	d10e      	bne.n	800839a <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800837c:	4b38      	ldr	r3, [pc, #224]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800837e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008386:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800838a:	d102      	bne.n	8008392 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 800838c:	23fa      	movs	r3, #250	; 0xfa
 800838e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008390:	e2bf      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8008392:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008396:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008398:	e2bb      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800839a:	4b31      	ldr	r3, [pc, #196]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083a6:	d106      	bne.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 80083a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80083ae:	d102      	bne.n	80083b6 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 80083b0:	4b2c      	ldr	r3, [pc, #176]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80083b2:	637b      	str	r3, [r7, #52]	; 0x34
 80083b4:	e2ad      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80083b6:	4b2a      	ldr	r3, [pc, #168]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80083b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80083bc:	f003 0302 	and.w	r3, r3, #2
 80083c0:	2b02      	cmp	r3, #2
 80083c2:	d107      	bne.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 80083c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083ca:	d103      	bne.n	80083d4 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 80083cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80083d0:	637b      	str	r3, [r7, #52]	; 0x34
 80083d2:	e29e      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80083d4:	2300      	movs	r3, #0
 80083d6:	637b      	str	r3, [r7, #52]	; 0x34
 80083d8:	e29b      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80083da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083de:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80083e2:	430b      	orrs	r3, r1
 80083e4:	d162      	bne.n	80084ac <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80083e6:	4b1e      	ldr	r3, [pc, #120]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80083e8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80083ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80083f0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80083f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d117      	bne.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80083f8:	4b19      	ldr	r3, [pc, #100]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008400:	2b00      	cmp	r3, #0
 8008402:	d005      	beq.n	8008410 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8008404:	4b16      	ldr	r3, [pc, #88]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008406:	689b      	ldr	r3, [r3, #8]
 8008408:	0e1b      	lsrs	r3, r3, #24
 800840a:	f003 030f 	and.w	r3, r3, #15
 800840e:	e006      	b.n	800841e <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8008410:	4b13      	ldr	r3, [pc, #76]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008412:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008416:	041b      	lsls	r3, r3, #16
 8008418:	0e1b      	lsrs	r3, r3, #24
 800841a:	f003 030f 	and.w	r3, r3, #15
 800841e:	4a12      	ldr	r2, [pc, #72]	; (8008468 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8008420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008424:	637b      	str	r3, [r7, #52]	; 0x34
 8008426:	e274      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8008428:	4b0d      	ldr	r3, [pc, #52]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800842a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800842e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008432:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008436:	d119      	bne.n	800846c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 8008438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800843a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800843e:	d115      	bne.n	800846c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008440:	4b07      	ldr	r3, [pc, #28]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008442:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800844a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800844e:	d102      	bne.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 8008450:	23fa      	movs	r3, #250	; 0xfa
 8008452:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008454:	e25d      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8008456:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800845a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800845c:	e259      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800845e:	bf00      	nop
 8008460:	46020c00 	.word	0x46020c00
 8008464:	00f42400 	.word	0x00f42400
 8008468:	0800d604 	.word	0x0800d604
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800846c:	4b9d      	ldr	r3, [pc, #628]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008478:	d106      	bne.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 800847a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008480:	d102      	bne.n	8008488 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 8008482:	4b99      	ldr	r3, [pc, #612]	; (80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8008484:	637b      	str	r3, [r7, #52]	; 0x34
 8008486:	e244      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8008488:	4b96      	ldr	r3, [pc, #600]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800848a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800848e:	f003 0302 	and.w	r3, r3, #2
 8008492:	2b02      	cmp	r3, #2
 8008494:	d107      	bne.n	80084a6 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 8008496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008498:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800849c:	d103      	bne.n	80084a6 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 800849e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084a2:	637b      	str	r3, [r7, #52]	; 0x34
 80084a4:	e235      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80084a6:	2300      	movs	r3, #0
 80084a8:	637b      	str	r3, [r7, #52]	; 0x34
 80084aa:	e232      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80084ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084b0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80084b4:	430b      	orrs	r3, r1
 80084b6:	d147      	bne.n	8008548 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80084b8:	4b8a      	ldr	r3, [pc, #552]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80084ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084be:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80084c2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80084c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d103      	bne.n	80084d2 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80084ca:	f7fd fe51 	bl	8006170 <HAL_RCC_GetPCLK1Freq>
 80084ce:	6378      	str	r0, [r7, #52]	; 0x34
 80084d0:	e21f      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80084d2:	4b84      	ldr	r3, [pc, #528]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80084d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80084d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80084dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084e0:	d112      	bne.n	8008508 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 80084e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80084e8:	d10e      	bne.n	8008508 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80084ea:	4b7e      	ldr	r3, [pc, #504]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80084ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80084f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084f8:	d102      	bne.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 80084fa:	23fa      	movs	r3, #250	; 0xfa
 80084fc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80084fe:	e208      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8008500:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008504:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008506:	e204      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8008508:	4b76      	ldr	r3, [pc, #472]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008510:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008514:	d106      	bne.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 8008516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008518:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800851c:	d102      	bne.n	8008524 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 800851e:	4b72      	ldr	r3, [pc, #456]	; (80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8008520:	637b      	str	r3, [r7, #52]	; 0x34
 8008522:	e1f6      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8008524:	4b6f      	ldr	r3, [pc, #444]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008526:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800852a:	f003 0302 	and.w	r3, r3, #2
 800852e:	2b02      	cmp	r3, #2
 8008530:	d107      	bne.n	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8008532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008534:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008538:	d103      	bne.n	8008542 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 800853a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800853e:	637b      	str	r3, [r7, #52]	; 0x34
 8008540:	e1e7      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8008542:	2300      	movs	r3, #0
 8008544:	637b      	str	r3, [r7, #52]	; 0x34
 8008546:	e1e4      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8008548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800854c:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8008550:	430b      	orrs	r3, r1
 8008552:	d12d      	bne.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8008554:	4b63      	ldr	r3, [pc, #396]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800855a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800855e:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8008560:	4b60      	ldr	r3, [pc, #384]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008568:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800856c:	d105      	bne.n	800857a <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 800856e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008570:	2b00      	cmp	r3, #0
 8008572:	d102      	bne.n	800857a <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 8008574:	4b5c      	ldr	r3, [pc, #368]	; (80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8008576:	637b      	str	r3, [r7, #52]	; 0x34
 8008578:	e1cb      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800857a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008580:	d107      	bne.n	8008592 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008582:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008586:	4618      	mov	r0, r3
 8008588:	f7fe fc74 	bl	8006e74 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800858c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800858e:	637b      	str	r3, [r7, #52]	; 0x34
 8008590:	e1bf      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8008592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008594:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008598:	d107      	bne.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800859a:	f107 0318 	add.w	r3, r7, #24
 800859e:	4618      	mov	r0, r3
 80085a0:	f7fe fdce 	bl	8007140 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	637b      	str	r3, [r7, #52]	; 0x34
 80085a8:	e1b3      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80085aa:	2300      	movs	r3, #0
 80085ac:	637b      	str	r3, [r7, #52]	; 0x34
 80085ae:	e1b0      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80085b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085b4:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 80085b8:	430b      	orrs	r3, r1
 80085ba:	d14d      	bne.n	8008658 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80085bc:	4b49      	ldr	r3, [pc, #292]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80085be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80085c2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80085c6:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80085c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ca:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80085ce:	d028      	beq.n	8008622 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 80085d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80085d6:	d83c      	bhi.n	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 80085d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085de:	d013      	beq.n	8008608 <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 80085e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80085e6:	d834      	bhi.n	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 80085e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d004      	beq.n	80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 80085ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085f4:	d004      	beq.n	8008600 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80085f6:	e02c      	b.n	8008652 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80085f8:	f7fd fdce 	bl	8006198 <HAL_RCC_GetPCLK2Freq>
 80085fc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80085fe:	e188      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008600:	f7fd fc94 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 8008604:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008606:	e184      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008608:	4b36      	ldr	r3, [pc, #216]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008614:	d102      	bne.n	800861c <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 8008616:	4b34      	ldr	r3, [pc, #208]	; (80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8008618:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800861a:	e17a      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800861c:	2300      	movs	r3, #0
 800861e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008620:	e177      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008622:	4b30      	ldr	r3, [pc, #192]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800862a:	2b00      	cmp	r3, #0
 800862c:	d005      	beq.n	800863a <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 800862e:	4b2d      	ldr	r3, [pc, #180]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	0e1b      	lsrs	r3, r3, #24
 8008634:	f003 030f 	and.w	r3, r3, #15
 8008638:	e006      	b.n	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 800863a:	4b2a      	ldr	r3, [pc, #168]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800863c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008640:	041b      	lsls	r3, r3, #16
 8008642:	0e1b      	lsrs	r3, r3, #24
 8008644:	f003 030f 	and.w	r3, r3, #15
 8008648:	4a28      	ldr	r2, [pc, #160]	; (80086ec <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 800864a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800864e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008650:	e15f      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8008652:	2300      	movs	r3, #0
 8008654:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008656:	e15c      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8008658:	e9d7 2300 	ldrd	r2, r3, [r7]
 800865c:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8008660:	430b      	orrs	r3, r1
 8008662:	d154      	bne.n	800870e <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008664:	4b1f      	ldr	r3, [pc, #124]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800866a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800866e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8008670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008672:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008676:	d028      	beq.n	80086ca <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8008678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800867a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800867e:	d843      	bhi.n	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8008680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008682:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008686:	d013      	beq.n	80086b0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8008688:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800868e:	d83b      	bhi.n	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8008690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008692:	2b00      	cmp	r3, #0
 8008694:	d004      	beq.n	80086a0 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8008696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800869c:	d004      	beq.n	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800869e:	e033      	b.n	8008708 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80086a0:	f7fd fd66 	bl	8006170 <HAL_RCC_GetPCLK1Freq>
 80086a4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80086a6:	e134      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80086a8:	f7fd fc40 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 80086ac:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80086ae:	e130      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80086b0:	4b0c      	ldr	r3, [pc, #48]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086bc:	d102      	bne.n	80086c4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 80086be:	4b0a      	ldr	r3, [pc, #40]	; (80086e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80086c0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80086c2:	e126      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80086c4:	2300      	movs	r3, #0
 80086c6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80086c8:	e123      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80086ca:	4b06      	ldr	r3, [pc, #24]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00c      	beq.n	80086f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 80086d6:	4b03      	ldr	r3, [pc, #12]	; (80086e4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	0e1b      	lsrs	r3, r3, #24
 80086dc:	f003 030f 	and.w	r3, r3, #15
 80086e0:	e00d      	b.n	80086fe <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 80086e2:	bf00      	nop
 80086e4:	46020c00 	.word	0x46020c00
 80086e8:	00f42400 	.word	0x00f42400
 80086ec:	0800d604 	.word	0x0800d604
 80086f0:	4b8a      	ldr	r3, [pc, #552]	; (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80086f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80086f6:	041b      	lsls	r3, r3, #16
 80086f8:	0e1b      	lsrs	r3, r3, #24
 80086fa:	f003 030f 	and.w	r3, r3, #15
 80086fe:	4a88      	ldr	r2, [pc, #544]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8008700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008704:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008706:	e104      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8008708:	2300      	movs	r3, #0
 800870a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800870c:	e101      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800870e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008712:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8008716:	430b      	orrs	r3, r1
 8008718:	d16e      	bne.n	80087f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800871a:	4b80      	ldr	r3, [pc, #512]	; (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800871c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008720:	f003 0318 	and.w	r3, r3, #24
 8008724:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8008726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008728:	2b18      	cmp	r3, #24
 800872a:	d862      	bhi.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 800872c:	a201      	add	r2, pc, #4	; (adr r2, 8008734 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800872e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008732:	bf00      	nop
 8008734:	08008799 	.word	0x08008799
 8008738:	080087f3 	.word	0x080087f3
 800873c:	080087f3 	.word	0x080087f3
 8008740:	080087f3 	.word	0x080087f3
 8008744:	080087f3 	.word	0x080087f3
 8008748:	080087f3 	.word	0x080087f3
 800874c:	080087f3 	.word	0x080087f3
 8008750:	080087f3 	.word	0x080087f3
 8008754:	080087a1 	.word	0x080087a1
 8008758:	080087f3 	.word	0x080087f3
 800875c:	080087f3 	.word	0x080087f3
 8008760:	080087f3 	.word	0x080087f3
 8008764:	080087f3 	.word	0x080087f3
 8008768:	080087f3 	.word	0x080087f3
 800876c:	080087f3 	.word	0x080087f3
 8008770:	080087f3 	.word	0x080087f3
 8008774:	080087a9 	.word	0x080087a9
 8008778:	080087f3 	.word	0x080087f3
 800877c:	080087f3 	.word	0x080087f3
 8008780:	080087f3 	.word	0x080087f3
 8008784:	080087f3 	.word	0x080087f3
 8008788:	080087f3 	.word	0x080087f3
 800878c:	080087f3 	.word	0x080087f3
 8008790:	080087f3 	.word	0x080087f3
 8008794:	080087c3 	.word	0x080087c3
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8008798:	f7fd fd12 	bl	80061c0 <HAL_RCC_GetPCLK3Freq>
 800879c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800879e:	e0b8      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80087a0:	f7fd fbc4 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 80087a4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80087a6:	e0b4      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80087a8:	4b5c      	ldr	r3, [pc, #368]	; (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087b4:	d102      	bne.n	80087bc <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 80087b6:	4b5b      	ldr	r3, [pc, #364]	; (8008924 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 80087b8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80087ba:	e0aa      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80087bc:	2300      	movs	r3, #0
 80087be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80087c0:	e0a7      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80087c2:	4b56      	ldr	r3, [pc, #344]	; (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d005      	beq.n	80087da <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 80087ce:	4b53      	ldr	r3, [pc, #332]	; (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	0e1b      	lsrs	r3, r3, #24
 80087d4:	f003 030f 	and.w	r3, r3, #15
 80087d8:	e006      	b.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 80087da:	4b50      	ldr	r3, [pc, #320]	; (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80087dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80087e0:	041b      	lsls	r3, r3, #16
 80087e2:	0e1b      	lsrs	r3, r3, #24
 80087e4:	f003 030f 	and.w	r3, r3, #15
 80087e8:	4a4d      	ldr	r2, [pc, #308]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80087ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80087f0:	e08f      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80087f2:	2300      	movs	r3, #0
 80087f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80087f6:	e08c      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80087f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087fc:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8008800:	430b      	orrs	r3, r1
 8008802:	d14c      	bne.n	800889e <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8008804:	4b45      	ldr	r3, [pc, #276]	; (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008806:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800880a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800880e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008812:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008816:	d013      	beq.n	8008840 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 8008818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800881e:	d83b      	bhi.n	8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8008820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008822:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008826:	d013      	beq.n	8008850 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 8008828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800882a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800882e:	d833      	bhi.n	8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8008830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008832:	2b00      	cmp	r3, #0
 8008834:	d014      	beq.n	8008860 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 8008836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008838:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800883c:	d014      	beq.n	8008868 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 800883e:	e02b      	b.n	8008898 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008840:	f107 0318 	add.w	r3, r7, #24
 8008844:	4618      	mov	r0, r3
 8008846:	f7fe fc7b 	bl	8007140 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800884e:	e060      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008850:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008854:	4618      	mov	r0, r3
 8008856:	f7fe fb0d 	bl	8006e74 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800885a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800885c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800885e:	e058      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008860:	f7fd fb64 	bl	8005f2c <HAL_RCC_GetSysClockFreq>
 8008864:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008866:	e054      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008868:	4b2c      	ldr	r3, [pc, #176]	; (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800886a:	689b      	ldr	r3, [r3, #8]
 800886c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008870:	2b00      	cmp	r3, #0
 8008872:	d005      	beq.n	8008880 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 8008874:	4b29      	ldr	r3, [pc, #164]	; (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008876:	689b      	ldr	r3, [r3, #8]
 8008878:	0e1b      	lsrs	r3, r3, #24
 800887a:	f003 030f 	and.w	r3, r3, #15
 800887e:	e006      	b.n	800888e <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8008880:	4b26      	ldr	r3, [pc, #152]	; (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008882:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008886:	041b      	lsls	r3, r3, #16
 8008888:	0e1b      	lsrs	r3, r3, #24
 800888a:	f003 030f 	and.w	r3, r3, #15
 800888e:	4a24      	ldr	r2, [pc, #144]	; (8008920 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8008890:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008894:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008896:	e03c      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8008898:	2300      	movs	r3, #0
 800889a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800889c:	e039      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800889e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088a2:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 80088a6:	430b      	orrs	r3, r1
 80088a8:	d131      	bne.n	800890e <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 80088aa:	4b1c      	ldr	r3, [pc, #112]	; (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80088ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80088b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80088b4:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 80088b6:	4b19      	ldr	r3, [pc, #100]	; (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80088b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80088bc:	f003 0302 	and.w	r3, r3, #2
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	d106      	bne.n	80088d2 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 80088c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d103      	bne.n	80088d2 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 80088ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088ce:	637b      	str	r3, [r7, #52]	; 0x34
 80088d0:	e01f      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80088d2:	4b12      	ldr	r3, [pc, #72]	; (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80088d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80088d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088e0:	d112      	bne.n	8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 80088e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088e8:	d10e      	bne.n	8008908 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80088ea:	4b0c      	ldr	r3, [pc, #48]	; (800891c <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80088ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80088f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80088f8:	d102      	bne.n	8008900 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 80088fa:	23fa      	movs	r3, #250	; 0xfa
 80088fc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80088fe:	e008      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8008900:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008904:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008906:	e004      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8008908:	2300      	movs	r3, #0
 800890a:	637b      	str	r3, [r7, #52]	; 0x34
 800890c:	e001      	b.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 800890e:	2300      	movs	r3, #0
 8008910:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8008912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008914:	4618      	mov	r0, r3
 8008916:	3738      	adds	r7, #56	; 0x38
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	46020c00 	.word	0x46020c00
 8008920:	0800d604 	.word	0x0800d604
 8008924:	00f42400 	.word	0x00f42400

08008928 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008930:	4b47      	ldr	r3, [pc, #284]	; (8008a50 <RCCEx_PLL2_Config+0x128>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4a46      	ldr	r2, [pc, #280]	; (8008a50 <RCCEx_PLL2_Config+0x128>)
 8008936:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800893a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800893c:	f7fa fa02 	bl	8002d44 <HAL_GetTick>
 8008940:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008942:	e008      	b.n	8008956 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008944:	f7fa f9fe 	bl	8002d44 <HAL_GetTick>
 8008948:	4602      	mov	r2, r0
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	1ad3      	subs	r3, r2, r3
 800894e:	2b02      	cmp	r3, #2
 8008950:	d901      	bls.n	8008956 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008952:	2303      	movs	r3, #3
 8008954:	e077      	b.n	8008a46 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008956:	4b3e      	ldr	r3, [pc, #248]	; (8008a50 <RCCEx_PLL2_Config+0x128>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800895e:	2b00      	cmp	r3, #0
 8008960:	d1f0      	bne.n	8008944 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008962:	4b3b      	ldr	r3, [pc, #236]	; (8008a50 <RCCEx_PLL2_Config+0x128>)
 8008964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008966:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800896a:	f023 0303 	bic.w	r3, r3, #3
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	6811      	ldr	r1, [r2, #0]
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	6852      	ldr	r2, [r2, #4]
 8008976:	3a01      	subs	r2, #1
 8008978:	0212      	lsls	r2, r2, #8
 800897a:	430a      	orrs	r2, r1
 800897c:	4934      	ldr	r1, [pc, #208]	; (8008a50 <RCCEx_PLL2_Config+0x128>)
 800897e:	4313      	orrs	r3, r2
 8008980:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008982:	4b33      	ldr	r3, [pc, #204]	; (8008a50 <RCCEx_PLL2_Config+0x128>)
 8008984:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008986:	4b33      	ldr	r3, [pc, #204]	; (8008a54 <RCCEx_PLL2_Config+0x12c>)
 8008988:	4013      	ands	r3, r2
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	6892      	ldr	r2, [r2, #8]
 800898e:	3a01      	subs	r2, #1
 8008990:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008994:	687a      	ldr	r2, [r7, #4]
 8008996:	68d2      	ldr	r2, [r2, #12]
 8008998:	3a01      	subs	r2, #1
 800899a:	0252      	lsls	r2, r2, #9
 800899c:	b292      	uxth	r2, r2
 800899e:	4311      	orrs	r1, r2
 80089a0:	687a      	ldr	r2, [r7, #4]
 80089a2:	6912      	ldr	r2, [r2, #16]
 80089a4:	3a01      	subs	r2, #1
 80089a6:	0412      	lsls	r2, r2, #16
 80089a8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80089ac:	4311      	orrs	r1, r2
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	6952      	ldr	r2, [r2, #20]
 80089b2:	3a01      	subs	r2, #1
 80089b4:	0612      	lsls	r2, r2, #24
 80089b6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80089ba:	430a      	orrs	r2, r1
 80089bc:	4924      	ldr	r1, [pc, #144]	; (8008a50 <RCCEx_PLL2_Config+0x128>)
 80089be:	4313      	orrs	r3, r2
 80089c0:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80089c2:	4b23      	ldr	r3, [pc, #140]	; (8008a50 <RCCEx_PLL2_Config+0x128>)
 80089c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c6:	f023 020c 	bic.w	r2, r3, #12
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	699b      	ldr	r3, [r3, #24]
 80089ce:	4920      	ldr	r1, [pc, #128]	; (8008a50 <RCCEx_PLL2_Config+0x128>)
 80089d0:	4313      	orrs	r3, r2
 80089d2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80089d4:	4b1e      	ldr	r3, [pc, #120]	; (8008a50 <RCCEx_PLL2_Config+0x128>)
 80089d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	6a1b      	ldr	r3, [r3, #32]
 80089dc:	491c      	ldr	r1, [pc, #112]	; (8008a50 <RCCEx_PLL2_Config+0x128>)
 80089de:	4313      	orrs	r3, r2
 80089e0:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80089e2:	4b1b      	ldr	r3, [pc, #108]	; (8008a50 <RCCEx_PLL2_Config+0x128>)
 80089e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e6:	4a1a      	ldr	r2, [pc, #104]	; (8008a50 <RCCEx_PLL2_Config+0x128>)
 80089e8:	f023 0310 	bic.w	r3, r3, #16
 80089ec:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80089ee:	4b18      	ldr	r3, [pc, #96]	; (8008a50 <RCCEx_PLL2_Config+0x128>)
 80089f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80089f6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	69d2      	ldr	r2, [r2, #28]
 80089fe:	00d2      	lsls	r2, r2, #3
 8008a00:	4913      	ldr	r1, [pc, #76]	; (8008a50 <RCCEx_PLL2_Config+0x128>)
 8008a02:	4313      	orrs	r3, r2
 8008a04:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8008a06:	4b12      	ldr	r3, [pc, #72]	; (8008a50 <RCCEx_PLL2_Config+0x128>)
 8008a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a0a:	4a11      	ldr	r2, [pc, #68]	; (8008a50 <RCCEx_PLL2_Config+0x128>)
 8008a0c:	f043 0310 	orr.w	r3, r3, #16
 8008a10:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8008a12:	4b0f      	ldr	r3, [pc, #60]	; (8008a50 <RCCEx_PLL2_Config+0x128>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	4a0e      	ldr	r2, [pc, #56]	; (8008a50 <RCCEx_PLL2_Config+0x128>)
 8008a18:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008a1c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008a1e:	f7fa f991 	bl	8002d44 <HAL_GetTick>
 8008a22:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008a24:	e008      	b.n	8008a38 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008a26:	f7fa f98d 	bl	8002d44 <HAL_GetTick>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	1ad3      	subs	r3, r2, r3
 8008a30:	2b02      	cmp	r3, #2
 8008a32:	d901      	bls.n	8008a38 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008a34:	2303      	movs	r3, #3
 8008a36:	e006      	b.n	8008a46 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008a38:	4b05      	ldr	r3, [pc, #20]	; (8008a50 <RCCEx_PLL2_Config+0x128>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d0f0      	beq.n	8008a26 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008a44:	2300      	movs	r3, #0

}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3710      	adds	r7, #16
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	46020c00 	.word	0x46020c00
 8008a54:	80800000 	.word	0x80800000

08008a58 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b084      	sub	sp, #16
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008a60:	4b47      	ldr	r3, [pc, #284]	; (8008b80 <RCCEx_PLL3_Config+0x128>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a46      	ldr	r2, [pc, #280]	; (8008b80 <RCCEx_PLL3_Config+0x128>)
 8008a66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a6a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008a6c:	f7fa f96a 	bl	8002d44 <HAL_GetTick>
 8008a70:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a72:	e008      	b.n	8008a86 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008a74:	f7fa f966 	bl	8002d44 <HAL_GetTick>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	1ad3      	subs	r3, r2, r3
 8008a7e:	2b02      	cmp	r3, #2
 8008a80:	d901      	bls.n	8008a86 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e077      	b.n	8008b76 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a86:	4b3e      	ldr	r3, [pc, #248]	; (8008b80 <RCCEx_PLL3_Config+0x128>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1f0      	bne.n	8008a74 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008a92:	4b3b      	ldr	r3, [pc, #236]	; (8008b80 <RCCEx_PLL3_Config+0x128>)
 8008a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a96:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008a9a:	f023 0303 	bic.w	r3, r3, #3
 8008a9e:	687a      	ldr	r2, [r7, #4]
 8008aa0:	6811      	ldr	r1, [r2, #0]
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	6852      	ldr	r2, [r2, #4]
 8008aa6:	3a01      	subs	r2, #1
 8008aa8:	0212      	lsls	r2, r2, #8
 8008aaa:	430a      	orrs	r2, r1
 8008aac:	4934      	ldr	r1, [pc, #208]	; (8008b80 <RCCEx_PLL3_Config+0x128>)
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	630b      	str	r3, [r1, #48]	; 0x30
 8008ab2:	4b33      	ldr	r3, [pc, #204]	; (8008b80 <RCCEx_PLL3_Config+0x128>)
 8008ab4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008ab6:	4b33      	ldr	r3, [pc, #204]	; (8008b84 <RCCEx_PLL3_Config+0x12c>)
 8008ab8:	4013      	ands	r3, r2
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	6892      	ldr	r2, [r2, #8]
 8008abe:	3a01      	subs	r2, #1
 8008ac0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	68d2      	ldr	r2, [r2, #12]
 8008ac8:	3a01      	subs	r2, #1
 8008aca:	0252      	lsls	r2, r2, #9
 8008acc:	b292      	uxth	r2, r2
 8008ace:	4311      	orrs	r1, r2
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	6912      	ldr	r2, [r2, #16]
 8008ad4:	3a01      	subs	r2, #1
 8008ad6:	0412      	lsls	r2, r2, #16
 8008ad8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008adc:	4311      	orrs	r1, r2
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	6952      	ldr	r2, [r2, #20]
 8008ae2:	3a01      	subs	r2, #1
 8008ae4:	0612      	lsls	r2, r2, #24
 8008ae6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008aea:	430a      	orrs	r2, r1
 8008aec:	4924      	ldr	r1, [pc, #144]	; (8008b80 <RCCEx_PLL3_Config+0x128>)
 8008aee:	4313      	orrs	r3, r2
 8008af0:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8008af2:	4b23      	ldr	r3, [pc, #140]	; (8008b80 <RCCEx_PLL3_Config+0x128>)
 8008af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008af6:	f023 020c 	bic.w	r2, r3, #12
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	699b      	ldr	r3, [r3, #24]
 8008afe:	4920      	ldr	r1, [pc, #128]	; (8008b80 <RCCEx_PLL3_Config+0x128>)
 8008b00:	4313      	orrs	r3, r2
 8008b02:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008b04:	4b1e      	ldr	r3, [pc, #120]	; (8008b80 <RCCEx_PLL3_Config+0x128>)
 8008b06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6a1b      	ldr	r3, [r3, #32]
 8008b0c:	491c      	ldr	r1, [pc, #112]	; (8008b80 <RCCEx_PLL3_Config+0x128>)
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8008b12:	4b1b      	ldr	r3, [pc, #108]	; (8008b80 <RCCEx_PLL3_Config+0x128>)
 8008b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b16:	4a1a      	ldr	r2, [pc, #104]	; (8008b80 <RCCEx_PLL3_Config+0x128>)
 8008b18:	f023 0310 	bic.w	r3, r3, #16
 8008b1c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008b1e:	4b18      	ldr	r3, [pc, #96]	; (8008b80 <RCCEx_PLL3_Config+0x128>)
 8008b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b26:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008b2a:	687a      	ldr	r2, [r7, #4]
 8008b2c:	69d2      	ldr	r2, [r2, #28]
 8008b2e:	00d2      	lsls	r2, r2, #3
 8008b30:	4913      	ldr	r1, [pc, #76]	; (8008b80 <RCCEx_PLL3_Config+0x128>)
 8008b32:	4313      	orrs	r3, r2
 8008b34:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8008b36:	4b12      	ldr	r3, [pc, #72]	; (8008b80 <RCCEx_PLL3_Config+0x128>)
 8008b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b3a:	4a11      	ldr	r2, [pc, #68]	; (8008b80 <RCCEx_PLL3_Config+0x128>)
 8008b3c:	f043 0310 	orr.w	r3, r3, #16
 8008b40:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008b42:	4b0f      	ldr	r3, [pc, #60]	; (8008b80 <RCCEx_PLL3_Config+0x128>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a0e      	ldr	r2, [pc, #56]	; (8008b80 <RCCEx_PLL3_Config+0x128>)
 8008b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b4c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008b4e:	f7fa f8f9 	bl	8002d44 <HAL_GetTick>
 8008b52:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b54:	e008      	b.n	8008b68 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008b56:	f7fa f8f5 	bl	8002d44 <HAL_GetTick>
 8008b5a:	4602      	mov	r2, r0
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	1ad3      	subs	r3, r2, r3
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	d901      	bls.n	8008b68 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008b64:	2303      	movs	r3, #3
 8008b66:	e006      	b.n	8008b76 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b68:	4b05      	ldr	r3, [pc, #20]	; (8008b80 <RCCEx_PLL3_Config+0x128>)
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d0f0      	beq.n	8008b56 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008b74:	2300      	movs	r3, #0
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}
 8008b7e:	bf00      	nop
 8008b80:	46020c00 	.word	0x46020c00
 8008b84:	80800000 	.word	0x80800000

08008b88 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b084      	sub	sp, #16
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d101      	bne.n	8008b9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	e0dd      	b.n	8008d56 <HAL_SPI_Init+0x1ce>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a70      	ldr	r2, [pc, #448]	; (8008d60 <HAL_SPI_Init+0x1d8>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d004      	beq.n	8008bae <HAL_SPI_Init+0x26>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a6e      	ldr	r2, [pc, #440]	; (8008d64 <HAL_SPI_Init+0x1dc>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	e000      	b.n	8008bb0 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8008bae:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	629a      	str	r2, [r3, #40]	; 0x28

  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a69      	ldr	r2, [pc, #420]	; (8008d60 <HAL_SPI_Init+0x1d8>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d004      	beq.n	8008bca <HAL_SPI_Init+0x42>
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a67      	ldr	r2, [pc, #412]	; (8008d64 <HAL_SPI_Init+0x1dc>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d105      	bne.n	8008bd6 <HAL_SPI_Init+0x4e>
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	68db      	ldr	r3, [r3, #12]
 8008bce:	2b0f      	cmp	r3, #15
 8008bd0:	d901      	bls.n	8008bd6 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e0bf      	b.n	8008d56 <HAL_SPI_Init+0x1ce>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 f8ce 	bl	8008d78 <SPI_GetPacketSize>
 8008bdc:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	4a5f      	ldr	r2, [pc, #380]	; (8008d60 <HAL_SPI_Init+0x1d8>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d004      	beq.n	8008bf2 <HAL_SPI_Init+0x6a>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a5d      	ldr	r2, [pc, #372]	; (8008d64 <HAL_SPI_Init+0x1dc>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d102      	bne.n	8008bf8 <HAL_SPI_Init+0x70>
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2b08      	cmp	r3, #8
 8008bf6:	d816      	bhi.n	8008c26 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008bfc:	4a5a      	ldr	r2, [pc, #360]	; (8008d68 <HAL_SPI_Init+0x1e0>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d00e      	beq.n	8008c20 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a59      	ldr	r2, [pc, #356]	; (8008d6c <HAL_SPI_Init+0x1e4>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d009      	beq.n	8008c20 <HAL_SPI_Init+0x98>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a57      	ldr	r2, [pc, #348]	; (8008d70 <HAL_SPI_Init+0x1e8>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d004      	beq.n	8008c20 <HAL_SPI_Init+0x98>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a56      	ldr	r2, [pc, #344]	; (8008d74 <HAL_SPI_Init+0x1ec>)
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	d104      	bne.n	8008c2a <HAL_SPI_Init+0xa2>
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2b10      	cmp	r3, #16
 8008c24:	d901      	bls.n	8008c2a <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8008c26:	2301      	movs	r3, #1
 8008c28:	e095      	b.n	8008d56 <HAL_SPI_Init+0x1ce>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008c30:	b2db      	uxtb	r3, r3
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d106      	bne.n	8008c44 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f7f9 fc98 	bl	8002574 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2202      	movs	r2, #2
 8008c48:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	681a      	ldr	r2, [r3, #0]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f022 0201 	bic.w	r2, r2, #1
 8008c5a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008c66:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	699b      	ldr	r3, [r3, #24]
 8008c6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c70:	d119      	bne.n	8008ca6 <HAL_SPI_Init+0x11e>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c7a:	d103      	bne.n	8008c84 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d008      	beq.n	8008c96 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d10c      	bne.n	8008ca6 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008c90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c94:	d107      	bne.n	8008ca6 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	681a      	ldr	r2, [r3, #0]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008ca4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	69da      	ldr	r2, [r3, #28]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cae:	431a      	orrs	r2, r3
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	431a      	orrs	r2, r3
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cb8:	ea42 0103 	orr.w	r1, r2, r3
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	68da      	ldr	r2, [r3, #12]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	430a      	orrs	r2, r1
 8008cc6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cd0:	431a      	orrs	r2, r3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd6:	431a      	orrs	r2, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	699b      	ldr	r3, [r3, #24]
 8008cdc:	431a      	orrs	r2, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	431a      	orrs	r2, r3
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	695b      	ldr	r3, [r3, #20]
 8008ce8:	431a      	orrs	r2, r3
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6a1b      	ldr	r3, [r3, #32]
 8008cee:	431a      	orrs	r2, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	431a      	orrs	r2, r3
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008cfa:	431a      	orrs	r2, r3
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	689b      	ldr	r3, [r3, #8]
 8008d00:	431a      	orrs	r2, r3
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d06:	431a      	orrs	r2, r3
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d0c:	431a      	orrs	r2, r3
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d12:	ea42 0103 	orr.w	r1, r2, r3
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	430a      	orrs	r2, r1
 8008d20:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00a      	beq.n	8008d44 <HAL_SPI_Init+0x1bc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	68db      	ldr	r3, [r3, #12]
 8008d34:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	430a      	orrs	r2, r1
 8008d42:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2201      	movs	r2, #1
 8008d50:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8008d54:	2300      	movs	r3, #0
}
 8008d56:	4618      	mov	r0, r3
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
 8008d5e:	bf00      	nop
 8008d60:	46002000 	.word	0x46002000
 8008d64:	56002000 	.word	0x56002000
 8008d68:	40013000 	.word	0x40013000
 8008d6c:	50013000 	.word	0x50013000
 8008d70:	40003800 	.word	0x40003800
 8008d74:	50003800 	.word	0x50003800

08008d78 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d84:	095b      	lsrs	r3, r3, #5
 8008d86:	3301      	adds	r3, #1
 8008d88:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	3307      	adds	r3, #7
 8008d96:	08db      	lsrs	r3, r3, #3
 8008d98:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	fb02 f303 	mul.w	r3, r2, r3
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3714      	adds	r7, #20
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr

08008dae <HAL_SPIEx_SetConfigAutonomousMode>:
  * @param  sConfig Pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi, SPI_AutonomousModeConfTypeDef *sConfig)
{
 8008dae:	b480      	push	{r7}
 8008db0:	b083      	sub	sp, #12
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
 8008db6:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008dbe:	b2db      	uxtb	r3, r3
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d12e      	bne.n	8008e22 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d101      	bne.n	8008dd2 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8008dce:	2302      	movs	r3, #2
 8008dd0:	e028      	b.n	8008e24 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2201      	movs	r2, #1
 8008dd6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2202      	movs	r2, #2
 8008dde:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));

    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f022 0201 	bic.w	r2, r2, #1
 8008df0:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	681a      	ldr	r2, [r3, #0]
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8008dfe:	ea42 0103 	orr.w	r1, r2, r3
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	689a      	ldr	r2, [r3, #8]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	430a      	orrs	r2, r1
 8008e0c:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2201      	movs	r2, #1
 8008e12:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	e000      	b.n	8008e24 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8008e22:	2301      	movs	r3, #1
  }
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	370c      	adds	r7, #12
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b085      	sub	sp, #20
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e3e:	b2db      	uxtb	r3, r3
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d001      	beq.n	8008e48 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008e44:	2301      	movs	r3, #1
 8008e46:	e06a      	b.n	8008f1e <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2202      	movs	r2, #2
 8008e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a35      	ldr	r2, [pc, #212]	; (8008f2c <HAL_TIM_Base_Start+0xfc>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d040      	beq.n	8008edc <HAL_TIM_Base_Start+0xac>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a34      	ldr	r2, [pc, #208]	; (8008f30 <HAL_TIM_Base_Start+0x100>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d03b      	beq.n	8008edc <HAL_TIM_Base_Start+0xac>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e6c:	d036      	beq.n	8008edc <HAL_TIM_Base_Start+0xac>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e76:	d031      	beq.n	8008edc <HAL_TIM_Base_Start+0xac>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a2d      	ldr	r2, [pc, #180]	; (8008f34 <HAL_TIM_Base_Start+0x104>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d02c      	beq.n	8008edc <HAL_TIM_Base_Start+0xac>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a2c      	ldr	r2, [pc, #176]	; (8008f38 <HAL_TIM_Base_Start+0x108>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d027      	beq.n	8008edc <HAL_TIM_Base_Start+0xac>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a2a      	ldr	r2, [pc, #168]	; (8008f3c <HAL_TIM_Base_Start+0x10c>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d022      	beq.n	8008edc <HAL_TIM_Base_Start+0xac>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a29      	ldr	r2, [pc, #164]	; (8008f40 <HAL_TIM_Base_Start+0x110>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d01d      	beq.n	8008edc <HAL_TIM_Base_Start+0xac>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a27      	ldr	r2, [pc, #156]	; (8008f44 <HAL_TIM_Base_Start+0x114>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d018      	beq.n	8008edc <HAL_TIM_Base_Start+0xac>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a26      	ldr	r2, [pc, #152]	; (8008f48 <HAL_TIM_Base_Start+0x118>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d013      	beq.n	8008edc <HAL_TIM_Base_Start+0xac>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	4a24      	ldr	r2, [pc, #144]	; (8008f4c <HAL_TIM_Base_Start+0x11c>)
 8008eba:	4293      	cmp	r3, r2
 8008ebc:	d00e      	beq.n	8008edc <HAL_TIM_Base_Start+0xac>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	4a23      	ldr	r2, [pc, #140]	; (8008f50 <HAL_TIM_Base_Start+0x120>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d009      	beq.n	8008edc <HAL_TIM_Base_Start+0xac>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	4a21      	ldr	r2, [pc, #132]	; (8008f54 <HAL_TIM_Base_Start+0x124>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d004      	beq.n	8008edc <HAL_TIM_Base_Start+0xac>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a20      	ldr	r2, [pc, #128]	; (8008f58 <HAL_TIM_Base_Start+0x128>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d115      	bne.n	8008f08 <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	689a      	ldr	r2, [r3, #8]
 8008ee2:	4b1e      	ldr	r3, [pc, #120]	; (8008f5c <HAL_TIM_Base_Start+0x12c>)
 8008ee4:	4013      	ands	r3, r2
 8008ee6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	2b06      	cmp	r3, #6
 8008eec:	d015      	beq.n	8008f1a <HAL_TIM_Base_Start+0xea>
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ef4:	d011      	beq.n	8008f1a <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f042 0201 	orr.w	r2, r2, #1
 8008f04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f06:	e008      	b.n	8008f1a <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	681a      	ldr	r2, [r3, #0]
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f042 0201 	orr.w	r2, r2, #1
 8008f16:	601a      	str	r2, [r3, #0]
 8008f18:	e000      	b.n	8008f1c <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008f1c:	2300      	movs	r3, #0
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3714      	adds	r7, #20
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	40012c00 	.word	0x40012c00
 8008f30:	50012c00 	.word	0x50012c00
 8008f34:	40000400 	.word	0x40000400
 8008f38:	50000400 	.word	0x50000400
 8008f3c:	40000800 	.word	0x40000800
 8008f40:	50000800 	.word	0x50000800
 8008f44:	40000c00 	.word	0x40000c00
 8008f48:	50000c00 	.word	0x50000c00
 8008f4c:	40013400 	.word	0x40013400
 8008f50:	50013400 	.word	0x50013400
 8008f54:	40014000 	.word	0x40014000
 8008f58:	50014000 	.word	0x50014000
 8008f5c:	00010007 	.word	0x00010007

08008f60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d101      	bne.n	8008f72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e049      	b.n	8009006 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d106      	bne.n	8008f8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f7f9 fb84 	bl	8002694 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2202      	movs	r2, #2
 8008f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	3304      	adds	r3, #4
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	4610      	mov	r0, r2
 8008fa0:	f000 fc4e 	bl	8009840 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2201      	movs	r2, #1
 8008fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2201      	movs	r2, #1
 8008fb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2201      	movs	r2, #1
 8008fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2201      	movs	r2, #1
 8009000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009004:	2300      	movs	r3, #0
}
 8009006:	4618      	mov	r0, r3
 8009008:	3708      	adds	r7, #8
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
	...

08009010 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b084      	sub	sp, #16
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d109      	bne.n	8009034 <HAL_TIM_PWM_Start+0x24>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009026:	b2db      	uxtb	r3, r3
 8009028:	2b01      	cmp	r3, #1
 800902a:	bf14      	ite	ne
 800902c:	2301      	movne	r3, #1
 800902e:	2300      	moveq	r3, #0
 8009030:	b2db      	uxtb	r3, r3
 8009032:	e03c      	b.n	80090ae <HAL_TIM_PWM_Start+0x9e>
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	2b04      	cmp	r3, #4
 8009038:	d109      	bne.n	800904e <HAL_TIM_PWM_Start+0x3e>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009040:	b2db      	uxtb	r3, r3
 8009042:	2b01      	cmp	r3, #1
 8009044:	bf14      	ite	ne
 8009046:	2301      	movne	r3, #1
 8009048:	2300      	moveq	r3, #0
 800904a:	b2db      	uxtb	r3, r3
 800904c:	e02f      	b.n	80090ae <HAL_TIM_PWM_Start+0x9e>
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	2b08      	cmp	r3, #8
 8009052:	d109      	bne.n	8009068 <HAL_TIM_PWM_Start+0x58>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800905a:	b2db      	uxtb	r3, r3
 800905c:	2b01      	cmp	r3, #1
 800905e:	bf14      	ite	ne
 8009060:	2301      	movne	r3, #1
 8009062:	2300      	moveq	r3, #0
 8009064:	b2db      	uxtb	r3, r3
 8009066:	e022      	b.n	80090ae <HAL_TIM_PWM_Start+0x9e>
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	2b0c      	cmp	r3, #12
 800906c:	d109      	bne.n	8009082 <HAL_TIM_PWM_Start+0x72>
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009074:	b2db      	uxtb	r3, r3
 8009076:	2b01      	cmp	r3, #1
 8009078:	bf14      	ite	ne
 800907a:	2301      	movne	r3, #1
 800907c:	2300      	moveq	r3, #0
 800907e:	b2db      	uxtb	r3, r3
 8009080:	e015      	b.n	80090ae <HAL_TIM_PWM_Start+0x9e>
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	2b10      	cmp	r3, #16
 8009086:	d109      	bne.n	800909c <HAL_TIM_PWM_Start+0x8c>
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800908e:	b2db      	uxtb	r3, r3
 8009090:	2b01      	cmp	r3, #1
 8009092:	bf14      	ite	ne
 8009094:	2301      	movne	r3, #1
 8009096:	2300      	moveq	r3, #0
 8009098:	b2db      	uxtb	r3, r3
 800909a:	e008      	b.n	80090ae <HAL_TIM_PWM_Start+0x9e>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80090a2:	b2db      	uxtb	r3, r3
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	bf14      	ite	ne
 80090a8:	2301      	movne	r3, #1
 80090aa:	2300      	moveq	r3, #0
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d001      	beq.n	80090b6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80090b2:	2301      	movs	r3, #1
 80090b4:	e0d8      	b.n	8009268 <HAL_TIM_PWM_Start+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d104      	bne.n	80090c6 <HAL_TIM_PWM_Start+0xb6>
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2202      	movs	r2, #2
 80090c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80090c4:	e023      	b.n	800910e <HAL_TIM_PWM_Start+0xfe>
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	2b04      	cmp	r3, #4
 80090ca:	d104      	bne.n	80090d6 <HAL_TIM_PWM_Start+0xc6>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2202      	movs	r2, #2
 80090d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090d4:	e01b      	b.n	800910e <HAL_TIM_PWM_Start+0xfe>
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	2b08      	cmp	r3, #8
 80090da:	d104      	bne.n	80090e6 <HAL_TIM_PWM_Start+0xd6>
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2202      	movs	r2, #2
 80090e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090e4:	e013      	b.n	800910e <HAL_TIM_PWM_Start+0xfe>
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	2b0c      	cmp	r3, #12
 80090ea:	d104      	bne.n	80090f6 <HAL_TIM_PWM_Start+0xe6>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	2202      	movs	r2, #2
 80090f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80090f4:	e00b      	b.n	800910e <HAL_TIM_PWM_Start+0xfe>
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	2b10      	cmp	r3, #16
 80090fa:	d104      	bne.n	8009106 <HAL_TIM_PWM_Start+0xf6>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2202      	movs	r2, #2
 8009100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009104:	e003      	b.n	800910e <HAL_TIM_PWM_Start+0xfe>
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2202      	movs	r2, #2
 800910a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	2201      	movs	r2, #1
 8009114:	6839      	ldr	r1, [r7, #0]
 8009116:	4618      	mov	r0, r3
 8009118:	f001 f862 	bl	800a1e0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a53      	ldr	r2, [pc, #332]	; (8009270 <HAL_TIM_PWM_Start+0x260>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d02c      	beq.n	8009180 <HAL_TIM_PWM_Start+0x170>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a52      	ldr	r2, [pc, #328]	; (8009274 <HAL_TIM_PWM_Start+0x264>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d027      	beq.n	8009180 <HAL_TIM_PWM_Start+0x170>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a50      	ldr	r2, [pc, #320]	; (8009278 <HAL_TIM_PWM_Start+0x268>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d022      	beq.n	8009180 <HAL_TIM_PWM_Start+0x170>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a4f      	ldr	r2, [pc, #316]	; (800927c <HAL_TIM_PWM_Start+0x26c>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d01d      	beq.n	8009180 <HAL_TIM_PWM_Start+0x170>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a4d      	ldr	r2, [pc, #308]	; (8009280 <HAL_TIM_PWM_Start+0x270>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d018      	beq.n	8009180 <HAL_TIM_PWM_Start+0x170>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	4a4c      	ldr	r2, [pc, #304]	; (8009284 <HAL_TIM_PWM_Start+0x274>)
 8009154:	4293      	cmp	r3, r2
 8009156:	d013      	beq.n	8009180 <HAL_TIM_PWM_Start+0x170>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4a4a      	ldr	r2, [pc, #296]	; (8009288 <HAL_TIM_PWM_Start+0x278>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d00e      	beq.n	8009180 <HAL_TIM_PWM_Start+0x170>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a49      	ldr	r2, [pc, #292]	; (800928c <HAL_TIM_PWM_Start+0x27c>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d009      	beq.n	8009180 <HAL_TIM_PWM_Start+0x170>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a47      	ldr	r2, [pc, #284]	; (8009290 <HAL_TIM_PWM_Start+0x280>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d004      	beq.n	8009180 <HAL_TIM_PWM_Start+0x170>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a46      	ldr	r2, [pc, #280]	; (8009294 <HAL_TIM_PWM_Start+0x284>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d101      	bne.n	8009184 <HAL_TIM_PWM_Start+0x174>
 8009180:	2301      	movs	r3, #1
 8009182:	e000      	b.n	8009186 <HAL_TIM_PWM_Start+0x176>
 8009184:	2300      	movs	r3, #0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d007      	beq.n	800919a <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009198:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	4a34      	ldr	r2, [pc, #208]	; (8009270 <HAL_TIM_PWM_Start+0x260>)
 80091a0:	4293      	cmp	r3, r2
 80091a2:	d040      	beq.n	8009226 <HAL_TIM_PWM_Start+0x216>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a32      	ldr	r2, [pc, #200]	; (8009274 <HAL_TIM_PWM_Start+0x264>)
 80091aa:	4293      	cmp	r3, r2
 80091ac:	d03b      	beq.n	8009226 <HAL_TIM_PWM_Start+0x216>
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091b6:	d036      	beq.n	8009226 <HAL_TIM_PWM_Start+0x216>
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091c0:	d031      	beq.n	8009226 <HAL_TIM_PWM_Start+0x216>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4a34      	ldr	r2, [pc, #208]	; (8009298 <HAL_TIM_PWM_Start+0x288>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d02c      	beq.n	8009226 <HAL_TIM_PWM_Start+0x216>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a32      	ldr	r2, [pc, #200]	; (800929c <HAL_TIM_PWM_Start+0x28c>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d027      	beq.n	8009226 <HAL_TIM_PWM_Start+0x216>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a31      	ldr	r2, [pc, #196]	; (80092a0 <HAL_TIM_PWM_Start+0x290>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d022      	beq.n	8009226 <HAL_TIM_PWM_Start+0x216>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a2f      	ldr	r2, [pc, #188]	; (80092a4 <HAL_TIM_PWM_Start+0x294>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d01d      	beq.n	8009226 <HAL_TIM_PWM_Start+0x216>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a2e      	ldr	r2, [pc, #184]	; (80092a8 <HAL_TIM_PWM_Start+0x298>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d018      	beq.n	8009226 <HAL_TIM_PWM_Start+0x216>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a2c      	ldr	r2, [pc, #176]	; (80092ac <HAL_TIM_PWM_Start+0x29c>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d013      	beq.n	8009226 <HAL_TIM_PWM_Start+0x216>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a1d      	ldr	r2, [pc, #116]	; (8009278 <HAL_TIM_PWM_Start+0x268>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d00e      	beq.n	8009226 <HAL_TIM_PWM_Start+0x216>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a1b      	ldr	r2, [pc, #108]	; (800927c <HAL_TIM_PWM_Start+0x26c>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d009      	beq.n	8009226 <HAL_TIM_PWM_Start+0x216>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a1a      	ldr	r2, [pc, #104]	; (8009280 <HAL_TIM_PWM_Start+0x270>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d004      	beq.n	8009226 <HAL_TIM_PWM_Start+0x216>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a18      	ldr	r2, [pc, #96]	; (8009284 <HAL_TIM_PWM_Start+0x274>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d115      	bne.n	8009252 <HAL_TIM_PWM_Start+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	689a      	ldr	r2, [r3, #8]
 800922c:	4b20      	ldr	r3, [pc, #128]	; (80092b0 <HAL_TIM_PWM_Start+0x2a0>)
 800922e:	4013      	ands	r3, r2
 8009230:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2b06      	cmp	r3, #6
 8009236:	d015      	beq.n	8009264 <HAL_TIM_PWM_Start+0x254>
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800923e:	d011      	beq.n	8009264 <HAL_TIM_PWM_Start+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	f042 0201 	orr.w	r2, r2, #1
 800924e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009250:	e008      	b.n	8009264 <HAL_TIM_PWM_Start+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f042 0201 	orr.w	r2, r2, #1
 8009260:	601a      	str	r2, [r3, #0]
 8009262:	e000      	b.n	8009266 <HAL_TIM_PWM_Start+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009264:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009266:	2300      	movs	r3, #0
}
 8009268:	4618      	mov	r0, r3
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}
 8009270:	40012c00 	.word	0x40012c00
 8009274:	50012c00 	.word	0x50012c00
 8009278:	40013400 	.word	0x40013400
 800927c:	50013400 	.word	0x50013400
 8009280:	40014000 	.word	0x40014000
 8009284:	50014000 	.word	0x50014000
 8009288:	40014400 	.word	0x40014400
 800928c:	50014400 	.word	0x50014400
 8009290:	40014800 	.word	0x40014800
 8009294:	50014800 	.word	0x50014800
 8009298:	40000400 	.word	0x40000400
 800929c:	50000400 	.word	0x50000400
 80092a0:	40000800 	.word	0x40000800
 80092a4:	50000800 	.word	0x50000800
 80092a8:	40000c00 	.word	0x40000c00
 80092ac:	50000c00 	.word	0x50000c00
 80092b0:	00010007 	.word	0x00010007

080092b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b082      	sub	sp, #8
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	691b      	ldr	r3, [r3, #16]
 80092c2:	f003 0302 	and.w	r3, r3, #2
 80092c6:	2b02      	cmp	r3, #2
 80092c8:	d122      	bne.n	8009310 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	f003 0302 	and.w	r3, r3, #2
 80092d4:	2b02      	cmp	r3, #2
 80092d6:	d11b      	bne.n	8009310 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f06f 0202 	mvn.w	r2, #2
 80092e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2201      	movs	r2, #1
 80092e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	699b      	ldr	r3, [r3, #24]
 80092ee:	f003 0303 	and.w	r3, r3, #3
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d003      	beq.n	80092fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f000 fa84 	bl	8009804 <HAL_TIM_IC_CaptureCallback>
 80092fc:	e005      	b.n	800930a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f000 fa76 	bl	80097f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 fa87 	bl	8009818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	691b      	ldr	r3, [r3, #16]
 8009316:	f003 0304 	and.w	r3, r3, #4
 800931a:	2b04      	cmp	r3, #4
 800931c:	d122      	bne.n	8009364 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	68db      	ldr	r3, [r3, #12]
 8009324:	f003 0304 	and.w	r3, r3, #4
 8009328:	2b04      	cmp	r3, #4
 800932a:	d11b      	bne.n	8009364 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f06f 0204 	mvn.w	r2, #4
 8009334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	2202      	movs	r2, #2
 800933a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	699b      	ldr	r3, [r3, #24]
 8009342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009346:	2b00      	cmp	r3, #0
 8009348:	d003      	beq.n	8009352 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800934a:	6878      	ldr	r0, [r7, #4]
 800934c:	f000 fa5a 	bl	8009804 <HAL_TIM_IC_CaptureCallback>
 8009350:	e005      	b.n	800935e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 fa4c 	bl	80097f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 fa5d 	bl	8009818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	f003 0308 	and.w	r3, r3, #8
 800936e:	2b08      	cmp	r3, #8
 8009370:	d122      	bne.n	80093b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	68db      	ldr	r3, [r3, #12]
 8009378:	f003 0308 	and.w	r3, r3, #8
 800937c:	2b08      	cmp	r3, #8
 800937e:	d11b      	bne.n	80093b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f06f 0208 	mvn.w	r2, #8
 8009388:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2204      	movs	r2, #4
 800938e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	69db      	ldr	r3, [r3, #28]
 8009396:	f003 0303 	and.w	r3, r3, #3
 800939a:	2b00      	cmp	r3, #0
 800939c:	d003      	beq.n	80093a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f000 fa30 	bl	8009804 <HAL_TIM_IC_CaptureCallback>
 80093a4:	e005      	b.n	80093b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f000 fa22 	bl	80097f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 fa33 	bl	8009818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	f003 0310 	and.w	r3, r3, #16
 80093c2:	2b10      	cmp	r3, #16
 80093c4:	d122      	bne.n	800940c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	f003 0310 	and.w	r3, r3, #16
 80093d0:	2b10      	cmp	r3, #16
 80093d2:	d11b      	bne.n	800940c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f06f 0210 	mvn.w	r2, #16
 80093dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2208      	movs	r2, #8
 80093e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	69db      	ldr	r3, [r3, #28]
 80093ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d003      	beq.n	80093fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 fa06 	bl	8009804 <HAL_TIM_IC_CaptureCallback>
 80093f8:	e005      	b.n	8009406 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 f9f8 	bl	80097f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 fa09 	bl	8009818 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	691b      	ldr	r3, [r3, #16]
 8009412:	f003 0301 	and.w	r3, r3, #1
 8009416:	2b01      	cmp	r3, #1
 8009418:	d10e      	bne.n	8009438 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68db      	ldr	r3, [r3, #12]
 8009420:	f003 0301 	and.w	r3, r3, #1
 8009424:	2b01      	cmp	r3, #1
 8009426:	d107      	bne.n	8009438 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	f06f 0201 	mvn.w	r2, #1
 8009430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	f000 f9d2 	bl	80097dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	691b      	ldr	r3, [r3, #16]
 800943e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009442:	2b80      	cmp	r3, #128	; 0x80
 8009444:	d10e      	bne.n	8009464 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	68db      	ldr	r3, [r3, #12]
 800944c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009450:	2b80      	cmp	r3, #128	; 0x80
 8009452:	d107      	bne.n	8009464 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800945c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 ffb0 	bl	800a3c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	691b      	ldr	r3, [r3, #16]
 800946a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800946e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009472:	d10e      	bne.n	8009492 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800947e:	2b80      	cmp	r3, #128	; 0x80
 8009480:	d107      	bne.n	8009492 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800948a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 ffa3 	bl	800a3d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	691b      	ldr	r3, [r3, #16]
 8009498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800949c:	2b40      	cmp	r3, #64	; 0x40
 800949e:	d10e      	bne.n	80094be <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094aa:	2b40      	cmp	r3, #64	; 0x40
 80094ac:	d107      	bne.n	80094be <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80094b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 f9b7 	bl	800982c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	691b      	ldr	r3, [r3, #16]
 80094c4:	f003 0320 	and.w	r3, r3, #32
 80094c8:	2b20      	cmp	r3, #32
 80094ca:	d10e      	bne.n	80094ea <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	f003 0320 	and.w	r3, r3, #32
 80094d6:	2b20      	cmp	r3, #32
 80094d8:	d107      	bne.n	80094ea <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f06f 0220 	mvn.w	r2, #32
 80094e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 ff63 	bl	800a3b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	691b      	ldr	r3, [r3, #16]
 80094f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80094f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094f8:	d10f      	bne.n	800951a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	68db      	ldr	r3, [r3, #12]
 8009500:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009504:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009508:	d107      	bne.n	800951a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8009512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 ff69 	bl	800a3ec <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	691b      	ldr	r3, [r3, #16]
 8009520:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009524:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009528:	d10f      	bne.n	800954a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009534:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009538:	d107      	bne.n	800954a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8009542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 ff5b 	bl	800a400 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	691b      	ldr	r3, [r3, #16]
 8009550:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009554:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009558:	d10f      	bne.n	800957a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009564:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009568:	d107      	bne.n	800957a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8009572:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f000 ff4d 	bl	800a414 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	691b      	ldr	r3, [r3, #16]
 8009580:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009584:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009588:	d10f      	bne.n	80095aa <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	68db      	ldr	r3, [r3, #12]
 8009590:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009594:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009598:	d107      	bne.n	80095aa <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80095a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f000 ff3f 	bl	800a428 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80095aa:	bf00      	nop
 80095ac:	3708      	adds	r7, #8
 80095ae:	46bd      	mov	sp, r7
 80095b0:	bd80      	pop	{r7, pc}
	...

080095b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b086      	sub	sp, #24
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	60f8      	str	r0, [r7, #12]
 80095bc:	60b9      	str	r1, [r7, #8]
 80095be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095c0:	2300      	movs	r3, #0
 80095c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d101      	bne.n	80095d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80095ce:	2302      	movs	r3, #2
 80095d0:	e0ff      	b.n	80097d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	2201      	movs	r2, #1
 80095d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	2b14      	cmp	r3, #20
 80095de:	f200 80f0 	bhi.w	80097c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80095e2:	a201      	add	r2, pc, #4	; (adr r2, 80095e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80095e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e8:	0800963d 	.word	0x0800963d
 80095ec:	080097c3 	.word	0x080097c3
 80095f0:	080097c3 	.word	0x080097c3
 80095f4:	080097c3 	.word	0x080097c3
 80095f8:	0800967d 	.word	0x0800967d
 80095fc:	080097c3 	.word	0x080097c3
 8009600:	080097c3 	.word	0x080097c3
 8009604:	080097c3 	.word	0x080097c3
 8009608:	080096bf 	.word	0x080096bf
 800960c:	080097c3 	.word	0x080097c3
 8009610:	080097c3 	.word	0x080097c3
 8009614:	080097c3 	.word	0x080097c3
 8009618:	080096ff 	.word	0x080096ff
 800961c:	080097c3 	.word	0x080097c3
 8009620:	080097c3 	.word	0x080097c3
 8009624:	080097c3 	.word	0x080097c3
 8009628:	08009741 	.word	0x08009741
 800962c:	080097c3 	.word	0x080097c3
 8009630:	080097c3 	.word	0x080097c3
 8009634:	080097c3 	.word	0x080097c3
 8009638:	08009781 	.word	0x08009781
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	68b9      	ldr	r1, [r7, #8]
 8009642:	4618      	mov	r0, r3
 8009644:	f000 f9f6 	bl	8009a34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	699a      	ldr	r2, [r3, #24]
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f042 0208 	orr.w	r2, r2, #8
 8009656:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	699a      	ldr	r2, [r3, #24]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f022 0204 	bic.w	r2, r2, #4
 8009666:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	6999      	ldr	r1, [r3, #24]
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	691a      	ldr	r2, [r3, #16]
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	430a      	orrs	r2, r1
 8009678:	619a      	str	r2, [r3, #24]
      break;
 800967a:	e0a5      	b.n	80097c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	68b9      	ldr	r1, [r7, #8]
 8009682:	4618      	mov	r0, r3
 8009684:	f000 fa98 	bl	8009bb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	699a      	ldr	r2, [r3, #24]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009696:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	699a      	ldr	r2, [r3, #24]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	6999      	ldr	r1, [r3, #24]
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	691b      	ldr	r3, [r3, #16]
 80096b2:	021a      	lsls	r2, r3, #8
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	430a      	orrs	r2, r1
 80096ba:	619a      	str	r2, [r3, #24]
      break;
 80096bc:	e084      	b.n	80097c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	68b9      	ldr	r1, [r7, #8]
 80096c4:	4618      	mov	r0, r3
 80096c6:	f000 fb27 	bl	8009d18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	69da      	ldr	r2, [r3, #28]
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f042 0208 	orr.w	r2, r2, #8
 80096d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	69da      	ldr	r2, [r3, #28]
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f022 0204 	bic.w	r2, r2, #4
 80096e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	69d9      	ldr	r1, [r3, #28]
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	691a      	ldr	r2, [r3, #16]
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	430a      	orrs	r2, r1
 80096fa:	61da      	str	r2, [r3, #28]
      break;
 80096fc:	e064      	b.n	80097c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	68b9      	ldr	r1, [r7, #8]
 8009704:	4618      	mov	r0, r3
 8009706:	f000 fbb5 	bl	8009e74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	69da      	ldr	r2, [r3, #28]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009718:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	69da      	ldr	r2, [r3, #28]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009728:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	69d9      	ldr	r1, [r3, #28]
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	691b      	ldr	r3, [r3, #16]
 8009734:	021a      	lsls	r2, r3, #8
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	430a      	orrs	r2, r1
 800973c:	61da      	str	r2, [r3, #28]
      break;
 800973e:	e043      	b.n	80097c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	68b9      	ldr	r1, [r7, #8]
 8009746:	4618      	mov	r0, r3
 8009748:	f000 fc44 	bl	8009fd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f042 0208 	orr.w	r2, r2, #8
 800975a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	f022 0204 	bic.w	r2, r2, #4
 800976a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	691a      	ldr	r2, [r3, #16]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	430a      	orrs	r2, r1
 800977c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800977e:	e023      	b.n	80097c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	68b9      	ldr	r1, [r7, #8]
 8009786:	4618      	mov	r0, r3
 8009788:	f000 fca6 	bl	800a0d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800979a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80097aa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	691b      	ldr	r3, [r3, #16]
 80097b6:	021a      	lsls	r2, r3, #8
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	430a      	orrs	r2, r1
 80097be:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80097c0:	e002      	b.n	80097c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80097c2:	2301      	movs	r3, #1
 80097c4:	75fb      	strb	r3, [r7, #23]
      break;
 80097c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	2200      	movs	r2, #0
 80097cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80097d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80097d2:	4618      	mov	r0, r3
 80097d4:	3718      	adds	r7, #24
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop

080097dc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80097dc:	b480      	push	{r7}
 80097de:	b083      	sub	sp, #12
 80097e0:	af00      	add	r7, sp, #0
 80097e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80097e4:	bf00      	nop
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80097f8:	bf00      	nop
 80097fa:	370c      	adds	r7, #12
 80097fc:	46bd      	mov	sp, r7
 80097fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009802:	4770      	bx	lr

08009804 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009804:	b480      	push	{r7}
 8009806:	b083      	sub	sp, #12
 8009808:	af00      	add	r7, sp, #0
 800980a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800980c:	bf00      	nop
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009818:	b480      	push	{r7}
 800981a:	b083      	sub	sp, #12
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009820:	bf00      	nop
 8009822:	370c      	adds	r7, #12
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr

0800982c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009834:	bf00      	nop
 8009836:	370c      	adds	r7, #12
 8009838:	46bd      	mov	sp, r7
 800983a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983e:	4770      	bx	lr

08009840 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009840:	b480      	push	{r7}
 8009842:	b085      	sub	sp, #20
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4a68      	ldr	r2, [pc, #416]	; (80099f4 <TIM_Base_SetConfig+0x1b4>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d02b      	beq.n	80098b0 <TIM_Base_SetConfig+0x70>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a67      	ldr	r2, [pc, #412]	; (80099f8 <TIM_Base_SetConfig+0x1b8>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d027      	beq.n	80098b0 <TIM_Base_SetConfig+0x70>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009866:	d023      	beq.n	80098b0 <TIM_Base_SetConfig+0x70>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800986e:	d01f      	beq.n	80098b0 <TIM_Base_SetConfig+0x70>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	4a62      	ldr	r2, [pc, #392]	; (80099fc <TIM_Base_SetConfig+0x1bc>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d01b      	beq.n	80098b0 <TIM_Base_SetConfig+0x70>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	4a61      	ldr	r2, [pc, #388]	; (8009a00 <TIM_Base_SetConfig+0x1c0>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d017      	beq.n	80098b0 <TIM_Base_SetConfig+0x70>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4a60      	ldr	r2, [pc, #384]	; (8009a04 <TIM_Base_SetConfig+0x1c4>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d013      	beq.n	80098b0 <TIM_Base_SetConfig+0x70>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4a5f      	ldr	r2, [pc, #380]	; (8009a08 <TIM_Base_SetConfig+0x1c8>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d00f      	beq.n	80098b0 <TIM_Base_SetConfig+0x70>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a5e      	ldr	r2, [pc, #376]	; (8009a0c <TIM_Base_SetConfig+0x1cc>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d00b      	beq.n	80098b0 <TIM_Base_SetConfig+0x70>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4a5d      	ldr	r2, [pc, #372]	; (8009a10 <TIM_Base_SetConfig+0x1d0>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d007      	beq.n	80098b0 <TIM_Base_SetConfig+0x70>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a5c      	ldr	r2, [pc, #368]	; (8009a14 <TIM_Base_SetConfig+0x1d4>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d003      	beq.n	80098b0 <TIM_Base_SetConfig+0x70>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a5b      	ldr	r2, [pc, #364]	; (8009a18 <TIM_Base_SetConfig+0x1d8>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d108      	bne.n	80098c2 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	68fa      	ldr	r2, [r7, #12]
 80098be:	4313      	orrs	r3, r2
 80098c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4a4b      	ldr	r2, [pc, #300]	; (80099f4 <TIM_Base_SetConfig+0x1b4>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d043      	beq.n	8009952 <TIM_Base_SetConfig+0x112>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	4a4a      	ldr	r2, [pc, #296]	; (80099f8 <TIM_Base_SetConfig+0x1b8>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d03f      	beq.n	8009952 <TIM_Base_SetConfig+0x112>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098d8:	d03b      	beq.n	8009952 <TIM_Base_SetConfig+0x112>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80098e0:	d037      	beq.n	8009952 <TIM_Base_SetConfig+0x112>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4a45      	ldr	r2, [pc, #276]	; (80099fc <TIM_Base_SetConfig+0x1bc>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d033      	beq.n	8009952 <TIM_Base_SetConfig+0x112>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	4a44      	ldr	r2, [pc, #272]	; (8009a00 <TIM_Base_SetConfig+0x1c0>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d02f      	beq.n	8009952 <TIM_Base_SetConfig+0x112>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4a43      	ldr	r2, [pc, #268]	; (8009a04 <TIM_Base_SetConfig+0x1c4>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d02b      	beq.n	8009952 <TIM_Base_SetConfig+0x112>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	4a42      	ldr	r2, [pc, #264]	; (8009a08 <TIM_Base_SetConfig+0x1c8>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d027      	beq.n	8009952 <TIM_Base_SetConfig+0x112>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	4a41      	ldr	r2, [pc, #260]	; (8009a0c <TIM_Base_SetConfig+0x1cc>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d023      	beq.n	8009952 <TIM_Base_SetConfig+0x112>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4a40      	ldr	r2, [pc, #256]	; (8009a10 <TIM_Base_SetConfig+0x1d0>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d01f      	beq.n	8009952 <TIM_Base_SetConfig+0x112>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4a3f      	ldr	r2, [pc, #252]	; (8009a14 <TIM_Base_SetConfig+0x1d4>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d01b      	beq.n	8009952 <TIM_Base_SetConfig+0x112>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4a3e      	ldr	r2, [pc, #248]	; (8009a18 <TIM_Base_SetConfig+0x1d8>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d017      	beq.n	8009952 <TIM_Base_SetConfig+0x112>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	4a3d      	ldr	r2, [pc, #244]	; (8009a1c <TIM_Base_SetConfig+0x1dc>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d013      	beq.n	8009952 <TIM_Base_SetConfig+0x112>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	4a3c      	ldr	r2, [pc, #240]	; (8009a20 <TIM_Base_SetConfig+0x1e0>)
 800992e:	4293      	cmp	r3, r2
 8009930:	d00f      	beq.n	8009952 <TIM_Base_SetConfig+0x112>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	4a3b      	ldr	r2, [pc, #236]	; (8009a24 <TIM_Base_SetConfig+0x1e4>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d00b      	beq.n	8009952 <TIM_Base_SetConfig+0x112>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	4a3a      	ldr	r2, [pc, #232]	; (8009a28 <TIM_Base_SetConfig+0x1e8>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d007      	beq.n	8009952 <TIM_Base_SetConfig+0x112>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4a39      	ldr	r2, [pc, #228]	; (8009a2c <TIM_Base_SetConfig+0x1ec>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d003      	beq.n	8009952 <TIM_Base_SetConfig+0x112>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4a38      	ldr	r2, [pc, #224]	; (8009a30 <TIM_Base_SetConfig+0x1f0>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d108      	bne.n	8009964 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009958:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	4313      	orrs	r3, r2
 8009962:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	695b      	ldr	r3, [r3, #20]
 800996e:	4313      	orrs	r3, r2
 8009970:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	68fa      	ldr	r2, [r7, #12]
 8009976:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	689a      	ldr	r2, [r3, #8]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009980:	683b      	ldr	r3, [r7, #0]
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4a1a      	ldr	r2, [pc, #104]	; (80099f4 <TIM_Base_SetConfig+0x1b4>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d023      	beq.n	80099d8 <TIM_Base_SetConfig+0x198>
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	4a19      	ldr	r2, [pc, #100]	; (80099f8 <TIM_Base_SetConfig+0x1b8>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d01f      	beq.n	80099d8 <TIM_Base_SetConfig+0x198>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	4a1e      	ldr	r2, [pc, #120]	; (8009a14 <TIM_Base_SetConfig+0x1d4>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d01b      	beq.n	80099d8 <TIM_Base_SetConfig+0x198>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4a1d      	ldr	r2, [pc, #116]	; (8009a18 <TIM_Base_SetConfig+0x1d8>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d017      	beq.n	80099d8 <TIM_Base_SetConfig+0x198>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4a1c      	ldr	r2, [pc, #112]	; (8009a1c <TIM_Base_SetConfig+0x1dc>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d013      	beq.n	80099d8 <TIM_Base_SetConfig+0x198>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	4a1b      	ldr	r2, [pc, #108]	; (8009a20 <TIM_Base_SetConfig+0x1e0>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d00f      	beq.n	80099d8 <TIM_Base_SetConfig+0x198>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	4a1a      	ldr	r2, [pc, #104]	; (8009a24 <TIM_Base_SetConfig+0x1e4>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d00b      	beq.n	80099d8 <TIM_Base_SetConfig+0x198>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a19      	ldr	r2, [pc, #100]	; (8009a28 <TIM_Base_SetConfig+0x1e8>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d007      	beq.n	80099d8 <TIM_Base_SetConfig+0x198>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	4a18      	ldr	r2, [pc, #96]	; (8009a2c <TIM_Base_SetConfig+0x1ec>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d003      	beq.n	80099d8 <TIM_Base_SetConfig+0x198>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	4a17      	ldr	r2, [pc, #92]	; (8009a30 <TIM_Base_SetConfig+0x1f0>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d103      	bne.n	80099e0 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	691a      	ldr	r2, [r3, #16]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	2201      	movs	r2, #1
 80099e4:	615a      	str	r2, [r3, #20]
}
 80099e6:	bf00      	nop
 80099e8:	3714      	adds	r7, #20
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr
 80099f2:	bf00      	nop
 80099f4:	40012c00 	.word	0x40012c00
 80099f8:	50012c00 	.word	0x50012c00
 80099fc:	40000400 	.word	0x40000400
 8009a00:	50000400 	.word	0x50000400
 8009a04:	40000800 	.word	0x40000800
 8009a08:	50000800 	.word	0x50000800
 8009a0c:	40000c00 	.word	0x40000c00
 8009a10:	50000c00 	.word	0x50000c00
 8009a14:	40013400 	.word	0x40013400
 8009a18:	50013400 	.word	0x50013400
 8009a1c:	40014000 	.word	0x40014000
 8009a20:	50014000 	.word	0x50014000
 8009a24:	40014400 	.word	0x40014400
 8009a28:	50014400 	.word	0x50014400
 8009a2c:	40014800 	.word	0x40014800
 8009a30:	50014800 	.word	0x50014800

08009a34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b087      	sub	sp, #28
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6a1b      	ldr	r3, [r3, #32]
 8009a42:	f023 0201 	bic.w	r2, r3, #1
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6a1b      	ldr	r3, [r3, #32]
 8009a4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	699b      	ldr	r3, [r3, #24]
 8009a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	f023 0303 	bic.w	r3, r3, #3
 8009a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	68fa      	ldr	r2, [r7, #12]
 8009a76:	4313      	orrs	r3, r2
 8009a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	f023 0302 	bic.w	r3, r3, #2
 8009a80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	697a      	ldr	r2, [r7, #20]
 8009a88:	4313      	orrs	r3, r2
 8009a8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	4a40      	ldr	r2, [pc, #256]	; (8009b90 <TIM_OC1_SetConfig+0x15c>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d023      	beq.n	8009adc <TIM_OC1_SetConfig+0xa8>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	4a3f      	ldr	r2, [pc, #252]	; (8009b94 <TIM_OC1_SetConfig+0x160>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d01f      	beq.n	8009adc <TIM_OC1_SetConfig+0xa8>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4a3e      	ldr	r2, [pc, #248]	; (8009b98 <TIM_OC1_SetConfig+0x164>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d01b      	beq.n	8009adc <TIM_OC1_SetConfig+0xa8>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	4a3d      	ldr	r2, [pc, #244]	; (8009b9c <TIM_OC1_SetConfig+0x168>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d017      	beq.n	8009adc <TIM_OC1_SetConfig+0xa8>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	4a3c      	ldr	r2, [pc, #240]	; (8009ba0 <TIM_OC1_SetConfig+0x16c>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d013      	beq.n	8009adc <TIM_OC1_SetConfig+0xa8>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	4a3b      	ldr	r2, [pc, #236]	; (8009ba4 <TIM_OC1_SetConfig+0x170>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d00f      	beq.n	8009adc <TIM_OC1_SetConfig+0xa8>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	4a3a      	ldr	r2, [pc, #232]	; (8009ba8 <TIM_OC1_SetConfig+0x174>)
 8009ac0:	4293      	cmp	r3, r2
 8009ac2:	d00b      	beq.n	8009adc <TIM_OC1_SetConfig+0xa8>
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	4a39      	ldr	r2, [pc, #228]	; (8009bac <TIM_OC1_SetConfig+0x178>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d007      	beq.n	8009adc <TIM_OC1_SetConfig+0xa8>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	4a38      	ldr	r2, [pc, #224]	; (8009bb0 <TIM_OC1_SetConfig+0x17c>)
 8009ad0:	4293      	cmp	r3, r2
 8009ad2:	d003      	beq.n	8009adc <TIM_OC1_SetConfig+0xa8>
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	4a37      	ldr	r2, [pc, #220]	; (8009bb4 <TIM_OC1_SetConfig+0x180>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d10c      	bne.n	8009af6 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	f023 0308 	bic.w	r3, r3, #8
 8009ae2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	68db      	ldr	r3, [r3, #12]
 8009ae8:	697a      	ldr	r2, [r7, #20]
 8009aea:	4313      	orrs	r3, r2
 8009aec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	f023 0304 	bic.w	r3, r3, #4
 8009af4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	4a25      	ldr	r2, [pc, #148]	; (8009b90 <TIM_OC1_SetConfig+0x15c>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d023      	beq.n	8009b46 <TIM_OC1_SetConfig+0x112>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	4a24      	ldr	r2, [pc, #144]	; (8009b94 <TIM_OC1_SetConfig+0x160>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d01f      	beq.n	8009b46 <TIM_OC1_SetConfig+0x112>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4a23      	ldr	r2, [pc, #140]	; (8009b98 <TIM_OC1_SetConfig+0x164>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d01b      	beq.n	8009b46 <TIM_OC1_SetConfig+0x112>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	4a22      	ldr	r2, [pc, #136]	; (8009b9c <TIM_OC1_SetConfig+0x168>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d017      	beq.n	8009b46 <TIM_OC1_SetConfig+0x112>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	4a21      	ldr	r2, [pc, #132]	; (8009ba0 <TIM_OC1_SetConfig+0x16c>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d013      	beq.n	8009b46 <TIM_OC1_SetConfig+0x112>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	4a20      	ldr	r2, [pc, #128]	; (8009ba4 <TIM_OC1_SetConfig+0x170>)
 8009b22:	4293      	cmp	r3, r2
 8009b24:	d00f      	beq.n	8009b46 <TIM_OC1_SetConfig+0x112>
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	4a1f      	ldr	r2, [pc, #124]	; (8009ba8 <TIM_OC1_SetConfig+0x174>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d00b      	beq.n	8009b46 <TIM_OC1_SetConfig+0x112>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	4a1e      	ldr	r2, [pc, #120]	; (8009bac <TIM_OC1_SetConfig+0x178>)
 8009b32:	4293      	cmp	r3, r2
 8009b34:	d007      	beq.n	8009b46 <TIM_OC1_SetConfig+0x112>
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	4a1d      	ldr	r2, [pc, #116]	; (8009bb0 <TIM_OC1_SetConfig+0x17c>)
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d003      	beq.n	8009b46 <TIM_OC1_SetConfig+0x112>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	4a1c      	ldr	r2, [pc, #112]	; (8009bb4 <TIM_OC1_SetConfig+0x180>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d111      	bne.n	8009b6a <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009b4e:	693b      	ldr	r3, [r7, #16]
 8009b50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009b54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	695b      	ldr	r3, [r3, #20]
 8009b5a:	693a      	ldr	r2, [r7, #16]
 8009b5c:	4313      	orrs	r3, r2
 8009b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009b60:	683b      	ldr	r3, [r7, #0]
 8009b62:	699b      	ldr	r3, [r3, #24]
 8009b64:	693a      	ldr	r2, [r7, #16]
 8009b66:	4313      	orrs	r3, r2
 8009b68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	693a      	ldr	r2, [r7, #16]
 8009b6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	68fa      	ldr	r2, [r7, #12]
 8009b74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	685a      	ldr	r2, [r3, #4]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	697a      	ldr	r2, [r7, #20]
 8009b82:	621a      	str	r2, [r3, #32]
}
 8009b84:	bf00      	nop
 8009b86:	371c      	adds	r7, #28
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr
 8009b90:	40012c00 	.word	0x40012c00
 8009b94:	50012c00 	.word	0x50012c00
 8009b98:	40013400 	.word	0x40013400
 8009b9c:	50013400 	.word	0x50013400
 8009ba0:	40014000 	.word	0x40014000
 8009ba4:	50014000 	.word	0x50014000
 8009ba8:	40014400 	.word	0x40014400
 8009bac:	50014400 	.word	0x50014400
 8009bb0:	40014800 	.word	0x40014800
 8009bb4:	50014800 	.word	0x50014800

08009bb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009bb8:	b480      	push	{r7}
 8009bba:	b087      	sub	sp, #28
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
 8009bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6a1b      	ldr	r3, [r3, #32]
 8009bc6:	f023 0210 	bic.w	r2, r3, #16
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6a1b      	ldr	r3, [r3, #32]
 8009bd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	685b      	ldr	r3, [r3, #4]
 8009bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	699b      	ldr	r3, [r3, #24]
 8009bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009be6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	021b      	lsls	r3, r3, #8
 8009bfa:	68fa      	ldr	r2, [r7, #12]
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	f023 0320 	bic.w	r3, r3, #32
 8009c06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009c08:	683b      	ldr	r3, [r7, #0]
 8009c0a:	689b      	ldr	r3, [r3, #8]
 8009c0c:	011b      	lsls	r3, r3, #4
 8009c0e:	697a      	ldr	r2, [r7, #20]
 8009c10:	4313      	orrs	r3, r2
 8009c12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	4a36      	ldr	r2, [pc, #216]	; (8009cf0 <TIM_OC2_SetConfig+0x138>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d00b      	beq.n	8009c34 <TIM_OC2_SetConfig+0x7c>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	4a35      	ldr	r2, [pc, #212]	; (8009cf4 <TIM_OC2_SetConfig+0x13c>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d007      	beq.n	8009c34 <TIM_OC2_SetConfig+0x7c>
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	4a34      	ldr	r2, [pc, #208]	; (8009cf8 <TIM_OC2_SetConfig+0x140>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d003      	beq.n	8009c34 <TIM_OC2_SetConfig+0x7c>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	4a33      	ldr	r2, [pc, #204]	; (8009cfc <TIM_OC2_SetConfig+0x144>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d10d      	bne.n	8009c50 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009c3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	68db      	ldr	r3, [r3, #12]
 8009c40:	011b      	lsls	r3, r3, #4
 8009c42:	697a      	ldr	r2, [r7, #20]
 8009c44:	4313      	orrs	r3, r2
 8009c46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	4a27      	ldr	r2, [pc, #156]	; (8009cf0 <TIM_OC2_SetConfig+0x138>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d023      	beq.n	8009ca0 <TIM_OC2_SetConfig+0xe8>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	4a26      	ldr	r2, [pc, #152]	; (8009cf4 <TIM_OC2_SetConfig+0x13c>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d01f      	beq.n	8009ca0 <TIM_OC2_SetConfig+0xe8>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	4a25      	ldr	r2, [pc, #148]	; (8009cf8 <TIM_OC2_SetConfig+0x140>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d01b      	beq.n	8009ca0 <TIM_OC2_SetConfig+0xe8>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	4a24      	ldr	r2, [pc, #144]	; (8009cfc <TIM_OC2_SetConfig+0x144>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d017      	beq.n	8009ca0 <TIM_OC2_SetConfig+0xe8>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	4a23      	ldr	r2, [pc, #140]	; (8009d00 <TIM_OC2_SetConfig+0x148>)
 8009c74:	4293      	cmp	r3, r2
 8009c76:	d013      	beq.n	8009ca0 <TIM_OC2_SetConfig+0xe8>
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	4a22      	ldr	r2, [pc, #136]	; (8009d04 <TIM_OC2_SetConfig+0x14c>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d00f      	beq.n	8009ca0 <TIM_OC2_SetConfig+0xe8>
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	4a21      	ldr	r2, [pc, #132]	; (8009d08 <TIM_OC2_SetConfig+0x150>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d00b      	beq.n	8009ca0 <TIM_OC2_SetConfig+0xe8>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	4a20      	ldr	r2, [pc, #128]	; (8009d0c <TIM_OC2_SetConfig+0x154>)
 8009c8c:	4293      	cmp	r3, r2
 8009c8e:	d007      	beq.n	8009ca0 <TIM_OC2_SetConfig+0xe8>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	4a1f      	ldr	r2, [pc, #124]	; (8009d10 <TIM_OC2_SetConfig+0x158>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d003      	beq.n	8009ca0 <TIM_OC2_SetConfig+0xe8>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	4a1e      	ldr	r2, [pc, #120]	; (8009d14 <TIM_OC2_SetConfig+0x15c>)
 8009c9c:	4293      	cmp	r3, r2
 8009c9e:	d113      	bne.n	8009cc8 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009ca0:	693b      	ldr	r3, [r7, #16]
 8009ca2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009ca6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009ca8:	693b      	ldr	r3, [r7, #16]
 8009caa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009cae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	695b      	ldr	r3, [r3, #20]
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	693a      	ldr	r2, [r7, #16]
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	699b      	ldr	r3, [r3, #24]
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	693a      	ldr	r2, [r7, #16]
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	693a      	ldr	r2, [r7, #16]
 8009ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009cd4:	683b      	ldr	r3, [r7, #0]
 8009cd6:	685a      	ldr	r2, [r3, #4]
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	697a      	ldr	r2, [r7, #20]
 8009ce0:	621a      	str	r2, [r3, #32]
}
 8009ce2:	bf00      	nop
 8009ce4:	371c      	adds	r7, #28
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop
 8009cf0:	40012c00 	.word	0x40012c00
 8009cf4:	50012c00 	.word	0x50012c00
 8009cf8:	40013400 	.word	0x40013400
 8009cfc:	50013400 	.word	0x50013400
 8009d00:	40014000 	.word	0x40014000
 8009d04:	50014000 	.word	0x50014000
 8009d08:	40014400 	.word	0x40014400
 8009d0c:	50014400 	.word	0x50014400
 8009d10:	40014800 	.word	0x40014800
 8009d14:	50014800 	.word	0x50014800

08009d18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d18:	b480      	push	{r7}
 8009d1a:	b087      	sub	sp, #28
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	6078      	str	r0, [r7, #4]
 8009d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6a1b      	ldr	r3, [r3, #32]
 8009d26:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6a1b      	ldr	r3, [r3, #32]
 8009d32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	69db      	ldr	r3, [r3, #28]
 8009d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f023 0303 	bic.w	r3, r3, #3
 8009d52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	68fa      	ldr	r2, [r7, #12]
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	689b      	ldr	r3, [r3, #8]
 8009d6a:	021b      	lsls	r3, r3, #8
 8009d6c:	697a      	ldr	r2, [r7, #20]
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	4a35      	ldr	r2, [pc, #212]	; (8009e4c <TIM_OC3_SetConfig+0x134>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d00b      	beq.n	8009d92 <TIM_OC3_SetConfig+0x7a>
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	4a34      	ldr	r2, [pc, #208]	; (8009e50 <TIM_OC3_SetConfig+0x138>)
 8009d7e:	4293      	cmp	r3, r2
 8009d80:	d007      	beq.n	8009d92 <TIM_OC3_SetConfig+0x7a>
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	4a33      	ldr	r2, [pc, #204]	; (8009e54 <TIM_OC3_SetConfig+0x13c>)
 8009d86:	4293      	cmp	r3, r2
 8009d88:	d003      	beq.n	8009d92 <TIM_OC3_SetConfig+0x7a>
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	4a32      	ldr	r2, [pc, #200]	; (8009e58 <TIM_OC3_SetConfig+0x140>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	d10d      	bne.n	8009dae <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	68db      	ldr	r3, [r3, #12]
 8009d9e:	021b      	lsls	r3, r3, #8
 8009da0:	697a      	ldr	r2, [r7, #20]
 8009da2:	4313      	orrs	r3, r2
 8009da4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009dac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	4a26      	ldr	r2, [pc, #152]	; (8009e4c <TIM_OC3_SetConfig+0x134>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d023      	beq.n	8009dfe <TIM_OC3_SetConfig+0xe6>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	4a25      	ldr	r2, [pc, #148]	; (8009e50 <TIM_OC3_SetConfig+0x138>)
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	d01f      	beq.n	8009dfe <TIM_OC3_SetConfig+0xe6>
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	4a24      	ldr	r2, [pc, #144]	; (8009e54 <TIM_OC3_SetConfig+0x13c>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d01b      	beq.n	8009dfe <TIM_OC3_SetConfig+0xe6>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	4a23      	ldr	r2, [pc, #140]	; (8009e58 <TIM_OC3_SetConfig+0x140>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d017      	beq.n	8009dfe <TIM_OC3_SetConfig+0xe6>
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	4a22      	ldr	r2, [pc, #136]	; (8009e5c <TIM_OC3_SetConfig+0x144>)
 8009dd2:	4293      	cmp	r3, r2
 8009dd4:	d013      	beq.n	8009dfe <TIM_OC3_SetConfig+0xe6>
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	4a21      	ldr	r2, [pc, #132]	; (8009e60 <TIM_OC3_SetConfig+0x148>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d00f      	beq.n	8009dfe <TIM_OC3_SetConfig+0xe6>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	4a20      	ldr	r2, [pc, #128]	; (8009e64 <TIM_OC3_SetConfig+0x14c>)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d00b      	beq.n	8009dfe <TIM_OC3_SetConfig+0xe6>
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	4a1f      	ldr	r2, [pc, #124]	; (8009e68 <TIM_OC3_SetConfig+0x150>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d007      	beq.n	8009dfe <TIM_OC3_SetConfig+0xe6>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	4a1e      	ldr	r2, [pc, #120]	; (8009e6c <TIM_OC3_SetConfig+0x154>)
 8009df2:	4293      	cmp	r3, r2
 8009df4:	d003      	beq.n	8009dfe <TIM_OC3_SetConfig+0xe6>
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	4a1d      	ldr	r2, [pc, #116]	; (8009e70 <TIM_OC3_SetConfig+0x158>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d113      	bne.n	8009e26 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009e0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	695b      	ldr	r3, [r3, #20]
 8009e12:	011b      	lsls	r3, r3, #4
 8009e14:	693a      	ldr	r2, [r7, #16]
 8009e16:	4313      	orrs	r3, r2
 8009e18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	699b      	ldr	r3, [r3, #24]
 8009e1e:	011b      	lsls	r3, r3, #4
 8009e20:	693a      	ldr	r2, [r7, #16]
 8009e22:	4313      	orrs	r3, r2
 8009e24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	693a      	ldr	r2, [r7, #16]
 8009e2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	68fa      	ldr	r2, [r7, #12]
 8009e30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	685a      	ldr	r2, [r3, #4]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	697a      	ldr	r2, [r7, #20]
 8009e3e:	621a      	str	r2, [r3, #32]
}
 8009e40:	bf00      	nop
 8009e42:	371c      	adds	r7, #28
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr
 8009e4c:	40012c00 	.word	0x40012c00
 8009e50:	50012c00 	.word	0x50012c00
 8009e54:	40013400 	.word	0x40013400
 8009e58:	50013400 	.word	0x50013400
 8009e5c:	40014000 	.word	0x40014000
 8009e60:	50014000 	.word	0x50014000
 8009e64:	40014400 	.word	0x40014400
 8009e68:	50014400 	.word	0x50014400
 8009e6c:	40014800 	.word	0x40014800
 8009e70:	50014800 	.word	0x50014800

08009e74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b087      	sub	sp, #28
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6a1b      	ldr	r3, [r3, #32]
 8009e82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6a1b      	ldr	r3, [r3, #32]
 8009e8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	69db      	ldr	r3, [r3, #28]
 8009e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009eae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	021b      	lsls	r3, r3, #8
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009ebc:	697b      	ldr	r3, [r7, #20]
 8009ebe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009ec2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	031b      	lsls	r3, r3, #12
 8009eca:	697a      	ldr	r2, [r7, #20]
 8009ecc:	4313      	orrs	r3, r2
 8009ece:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	4a36      	ldr	r2, [pc, #216]	; (8009fac <TIM_OC4_SetConfig+0x138>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d00b      	beq.n	8009ef0 <TIM_OC4_SetConfig+0x7c>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4a35      	ldr	r2, [pc, #212]	; (8009fb0 <TIM_OC4_SetConfig+0x13c>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d007      	beq.n	8009ef0 <TIM_OC4_SetConfig+0x7c>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	4a34      	ldr	r2, [pc, #208]	; (8009fb4 <TIM_OC4_SetConfig+0x140>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d003      	beq.n	8009ef0 <TIM_OC4_SetConfig+0x7c>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4a33      	ldr	r2, [pc, #204]	; (8009fb8 <TIM_OC4_SetConfig+0x144>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d10d      	bne.n	8009f0c <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009ef0:	697b      	ldr	r3, [r7, #20]
 8009ef2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009ef6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009ef8:	683b      	ldr	r3, [r7, #0]
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	031b      	lsls	r3, r3, #12
 8009efe:	697a      	ldr	r2, [r7, #20]
 8009f00:	4313      	orrs	r3, r2
 8009f02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	4a27      	ldr	r2, [pc, #156]	; (8009fac <TIM_OC4_SetConfig+0x138>)
 8009f10:	4293      	cmp	r3, r2
 8009f12:	d023      	beq.n	8009f5c <TIM_OC4_SetConfig+0xe8>
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	4a26      	ldr	r2, [pc, #152]	; (8009fb0 <TIM_OC4_SetConfig+0x13c>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d01f      	beq.n	8009f5c <TIM_OC4_SetConfig+0xe8>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	4a25      	ldr	r2, [pc, #148]	; (8009fb4 <TIM_OC4_SetConfig+0x140>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d01b      	beq.n	8009f5c <TIM_OC4_SetConfig+0xe8>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	4a24      	ldr	r2, [pc, #144]	; (8009fb8 <TIM_OC4_SetConfig+0x144>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d017      	beq.n	8009f5c <TIM_OC4_SetConfig+0xe8>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	4a23      	ldr	r2, [pc, #140]	; (8009fbc <TIM_OC4_SetConfig+0x148>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d013      	beq.n	8009f5c <TIM_OC4_SetConfig+0xe8>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	4a22      	ldr	r2, [pc, #136]	; (8009fc0 <TIM_OC4_SetConfig+0x14c>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d00f      	beq.n	8009f5c <TIM_OC4_SetConfig+0xe8>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	4a21      	ldr	r2, [pc, #132]	; (8009fc4 <TIM_OC4_SetConfig+0x150>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d00b      	beq.n	8009f5c <TIM_OC4_SetConfig+0xe8>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	4a20      	ldr	r2, [pc, #128]	; (8009fc8 <TIM_OC4_SetConfig+0x154>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d007      	beq.n	8009f5c <TIM_OC4_SetConfig+0xe8>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	4a1f      	ldr	r2, [pc, #124]	; (8009fcc <TIM_OC4_SetConfig+0x158>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d003      	beq.n	8009f5c <TIM_OC4_SetConfig+0xe8>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	4a1e      	ldr	r2, [pc, #120]	; (8009fd0 <TIM_OC4_SetConfig+0x15c>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d113      	bne.n	8009f84 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f62:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009f6a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	695b      	ldr	r3, [r3, #20]
 8009f70:	019b      	lsls	r3, r3, #6
 8009f72:	693a      	ldr	r2, [r7, #16]
 8009f74:	4313      	orrs	r3, r2
 8009f76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	699b      	ldr	r3, [r3, #24]
 8009f7c:	019b      	lsls	r3, r3, #6
 8009f7e:	693a      	ldr	r2, [r7, #16]
 8009f80:	4313      	orrs	r3, r2
 8009f82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	693a      	ldr	r2, [r7, #16]
 8009f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	68fa      	ldr	r2, [r7, #12]
 8009f8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	685a      	ldr	r2, [r3, #4]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	697a      	ldr	r2, [r7, #20]
 8009f9c:	621a      	str	r2, [r3, #32]
}
 8009f9e:	bf00      	nop
 8009fa0:	371c      	adds	r7, #28
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa8:	4770      	bx	lr
 8009faa:	bf00      	nop
 8009fac:	40012c00 	.word	0x40012c00
 8009fb0:	50012c00 	.word	0x50012c00
 8009fb4:	40013400 	.word	0x40013400
 8009fb8:	50013400 	.word	0x50013400
 8009fbc:	40014000 	.word	0x40014000
 8009fc0:	50014000 	.word	0x50014000
 8009fc4:	40014400 	.word	0x40014400
 8009fc8:	50014400 	.word	0x50014400
 8009fcc:	40014800 	.word	0x40014800
 8009fd0:	50014800 	.word	0x50014800

08009fd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b087      	sub	sp, #28
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6a1b      	ldr	r3, [r3, #32]
 8009fe2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6a1b      	ldr	r3, [r3, #32]
 8009fee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a008:	683b      	ldr	r3, [r7, #0]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	68fa      	ldr	r2, [r7, #12]
 800a00e:	4313      	orrs	r3, r2
 800a010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a018:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	689b      	ldr	r3, [r3, #8]
 800a01e:	041b      	lsls	r3, r3, #16
 800a020:	693a      	ldr	r2, [r7, #16]
 800a022:	4313      	orrs	r3, r2
 800a024:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	4a21      	ldr	r2, [pc, #132]	; (800a0b0 <TIM_OC5_SetConfig+0xdc>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d023      	beq.n	800a076 <TIM_OC5_SetConfig+0xa2>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	4a20      	ldr	r2, [pc, #128]	; (800a0b4 <TIM_OC5_SetConfig+0xe0>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d01f      	beq.n	800a076 <TIM_OC5_SetConfig+0xa2>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	4a1f      	ldr	r2, [pc, #124]	; (800a0b8 <TIM_OC5_SetConfig+0xe4>)
 800a03a:	4293      	cmp	r3, r2
 800a03c:	d01b      	beq.n	800a076 <TIM_OC5_SetConfig+0xa2>
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4a1e      	ldr	r2, [pc, #120]	; (800a0bc <TIM_OC5_SetConfig+0xe8>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d017      	beq.n	800a076 <TIM_OC5_SetConfig+0xa2>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	4a1d      	ldr	r2, [pc, #116]	; (800a0c0 <TIM_OC5_SetConfig+0xec>)
 800a04a:	4293      	cmp	r3, r2
 800a04c:	d013      	beq.n	800a076 <TIM_OC5_SetConfig+0xa2>
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	4a1c      	ldr	r2, [pc, #112]	; (800a0c4 <TIM_OC5_SetConfig+0xf0>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d00f      	beq.n	800a076 <TIM_OC5_SetConfig+0xa2>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	4a1b      	ldr	r2, [pc, #108]	; (800a0c8 <TIM_OC5_SetConfig+0xf4>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d00b      	beq.n	800a076 <TIM_OC5_SetConfig+0xa2>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	4a1a      	ldr	r2, [pc, #104]	; (800a0cc <TIM_OC5_SetConfig+0xf8>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d007      	beq.n	800a076 <TIM_OC5_SetConfig+0xa2>
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	4a19      	ldr	r2, [pc, #100]	; (800a0d0 <TIM_OC5_SetConfig+0xfc>)
 800a06a:	4293      	cmp	r3, r2
 800a06c:	d003      	beq.n	800a076 <TIM_OC5_SetConfig+0xa2>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4a18      	ldr	r2, [pc, #96]	; (800a0d4 <TIM_OC5_SetConfig+0x100>)
 800a072:	4293      	cmp	r3, r2
 800a074:	d109      	bne.n	800a08a <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a076:	697b      	ldr	r3, [r7, #20]
 800a078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a07c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a07e:	683b      	ldr	r3, [r7, #0]
 800a080:	695b      	ldr	r3, [r3, #20]
 800a082:	021b      	lsls	r3, r3, #8
 800a084:	697a      	ldr	r2, [r7, #20]
 800a086:	4313      	orrs	r3, r2
 800a088:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	697a      	ldr	r2, [r7, #20]
 800a08e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	68fa      	ldr	r2, [r7, #12]
 800a094:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	685a      	ldr	r2, [r3, #4]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	693a      	ldr	r2, [r7, #16]
 800a0a2:	621a      	str	r2, [r3, #32]
}
 800a0a4:	bf00      	nop
 800a0a6:	371c      	adds	r7, #28
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr
 800a0b0:	40012c00 	.word	0x40012c00
 800a0b4:	50012c00 	.word	0x50012c00
 800a0b8:	40013400 	.word	0x40013400
 800a0bc:	50013400 	.word	0x50013400
 800a0c0:	40014000 	.word	0x40014000
 800a0c4:	50014000 	.word	0x50014000
 800a0c8:	40014400 	.word	0x40014400
 800a0cc:	50014400 	.word	0x50014400
 800a0d0:	40014800 	.word	0x40014800
 800a0d4:	50014800 	.word	0x50014800

0800a0d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b087      	sub	sp, #28
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
 800a0e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a1b      	ldr	r3, [r3, #32]
 800a0e6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	6a1b      	ldr	r3, [r3, #32]
 800a0f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a0fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a106:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a10a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a10c:	683b      	ldr	r3, [r7, #0]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	021b      	lsls	r3, r3, #8
 800a112:	68fa      	ldr	r2, [r7, #12]
 800a114:	4313      	orrs	r3, r2
 800a116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a11e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	689b      	ldr	r3, [r3, #8]
 800a124:	051b      	lsls	r3, r3, #20
 800a126:	693a      	ldr	r2, [r7, #16]
 800a128:	4313      	orrs	r3, r2
 800a12a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	4a22      	ldr	r2, [pc, #136]	; (800a1b8 <TIM_OC6_SetConfig+0xe0>)
 800a130:	4293      	cmp	r3, r2
 800a132:	d023      	beq.n	800a17c <TIM_OC6_SetConfig+0xa4>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	4a21      	ldr	r2, [pc, #132]	; (800a1bc <TIM_OC6_SetConfig+0xe4>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d01f      	beq.n	800a17c <TIM_OC6_SetConfig+0xa4>
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	4a20      	ldr	r2, [pc, #128]	; (800a1c0 <TIM_OC6_SetConfig+0xe8>)
 800a140:	4293      	cmp	r3, r2
 800a142:	d01b      	beq.n	800a17c <TIM_OC6_SetConfig+0xa4>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	4a1f      	ldr	r2, [pc, #124]	; (800a1c4 <TIM_OC6_SetConfig+0xec>)
 800a148:	4293      	cmp	r3, r2
 800a14a:	d017      	beq.n	800a17c <TIM_OC6_SetConfig+0xa4>
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	4a1e      	ldr	r2, [pc, #120]	; (800a1c8 <TIM_OC6_SetConfig+0xf0>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d013      	beq.n	800a17c <TIM_OC6_SetConfig+0xa4>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	4a1d      	ldr	r2, [pc, #116]	; (800a1cc <TIM_OC6_SetConfig+0xf4>)
 800a158:	4293      	cmp	r3, r2
 800a15a:	d00f      	beq.n	800a17c <TIM_OC6_SetConfig+0xa4>
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	4a1c      	ldr	r2, [pc, #112]	; (800a1d0 <TIM_OC6_SetConfig+0xf8>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d00b      	beq.n	800a17c <TIM_OC6_SetConfig+0xa4>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	4a1b      	ldr	r2, [pc, #108]	; (800a1d4 <TIM_OC6_SetConfig+0xfc>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d007      	beq.n	800a17c <TIM_OC6_SetConfig+0xa4>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	4a1a      	ldr	r2, [pc, #104]	; (800a1d8 <TIM_OC6_SetConfig+0x100>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d003      	beq.n	800a17c <TIM_OC6_SetConfig+0xa4>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4a19      	ldr	r2, [pc, #100]	; (800a1dc <TIM_OC6_SetConfig+0x104>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d109      	bne.n	800a190 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a17c:	697b      	ldr	r3, [r7, #20]
 800a17e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a182:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	695b      	ldr	r3, [r3, #20]
 800a188:	029b      	lsls	r3, r3, #10
 800a18a:	697a      	ldr	r2, [r7, #20]
 800a18c:	4313      	orrs	r3, r2
 800a18e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	697a      	ldr	r2, [r7, #20]
 800a194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	68fa      	ldr	r2, [r7, #12]
 800a19a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	685a      	ldr	r2, [r3, #4]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	693a      	ldr	r2, [r7, #16]
 800a1a8:	621a      	str	r2, [r3, #32]
}
 800a1aa:	bf00      	nop
 800a1ac:	371c      	adds	r7, #28
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b4:	4770      	bx	lr
 800a1b6:	bf00      	nop
 800a1b8:	40012c00 	.word	0x40012c00
 800a1bc:	50012c00 	.word	0x50012c00
 800a1c0:	40013400 	.word	0x40013400
 800a1c4:	50013400 	.word	0x50013400
 800a1c8:	40014000 	.word	0x40014000
 800a1cc:	50014000 	.word	0x50014000
 800a1d0:	40014400 	.word	0x40014400
 800a1d4:	50014400 	.word	0x50014400
 800a1d8:	40014800 	.word	0x40014800
 800a1dc:	50014800 	.word	0x50014800

0800a1e0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b087      	sub	sp, #28
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	60f8      	str	r0, [r7, #12]
 800a1e8:	60b9      	str	r1, [r7, #8]
 800a1ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	f003 031f 	and.w	r3, r3, #31
 800a1f2:	2201      	movs	r2, #1
 800a1f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a1f8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	6a1a      	ldr	r2, [r3, #32]
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	43db      	mvns	r3, r3
 800a202:	401a      	ands	r2, r3
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6a1a      	ldr	r2, [r3, #32]
 800a20c:	68bb      	ldr	r3, [r7, #8]
 800a20e:	f003 031f 	and.w	r3, r3, #31
 800a212:	6879      	ldr	r1, [r7, #4]
 800a214:	fa01 f303 	lsl.w	r3, r1, r3
 800a218:	431a      	orrs	r2, r3
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	621a      	str	r2, [r3, #32]
}
 800a21e:	bf00      	nop
 800a220:	371c      	adds	r7, #28
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr
	...

0800a22c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a22c:	b480      	push	{r7}
 800a22e:	b085      	sub	sp, #20
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a23c:	2b01      	cmp	r3, #1
 800a23e:	d101      	bne.n	800a244 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a240:	2302      	movs	r3, #2
 800a242:	e097      	b.n	800a374 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2201      	movs	r2, #1
 800a248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2202      	movs	r2, #2
 800a250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	689b      	ldr	r3, [r3, #8]
 800a262:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4a45      	ldr	r2, [pc, #276]	; (800a380 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d00e      	beq.n	800a28c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4a44      	ldr	r2, [pc, #272]	; (800a384 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d009      	beq.n	800a28c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4a42      	ldr	r2, [pc, #264]	; (800a388 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d004      	beq.n	800a28c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a41      	ldr	r2, [pc, #260]	; (800a38c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d108      	bne.n	800a29e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a292:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	68fa      	ldr	r2, [r7, #12]
 800a29a:	4313      	orrs	r3, r2
 800a29c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a2a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2a8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	68fa      	ldr	r2, [r7, #12]
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	68fa      	ldr	r2, [r7, #12]
 800a2ba:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a2f      	ldr	r2, [pc, #188]	; (800a380 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d040      	beq.n	800a348 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4a2e      	ldr	r2, [pc, #184]	; (800a384 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d03b      	beq.n	800a348 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a2d8:	d036      	beq.n	800a348 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a2e2:	d031      	beq.n	800a348 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a29      	ldr	r2, [pc, #164]	; (800a390 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d02c      	beq.n	800a348 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4a28      	ldr	r2, [pc, #160]	; (800a394 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d027      	beq.n	800a348 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a26      	ldr	r2, [pc, #152]	; (800a398 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d022      	beq.n	800a348 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a25      	ldr	r2, [pc, #148]	; (800a39c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d01d      	beq.n	800a348 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a23      	ldr	r2, [pc, #140]	; (800a3a0 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d018      	beq.n	800a348 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	4a22      	ldr	r2, [pc, #136]	; (800a3a4 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d013      	beq.n	800a348 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	4a18      	ldr	r2, [pc, #96]	; (800a388 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800a326:	4293      	cmp	r3, r2
 800a328:	d00e      	beq.n	800a348 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	4a17      	ldr	r2, [pc, #92]	; (800a38c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800a330:	4293      	cmp	r3, r2
 800a332:	d009      	beq.n	800a348 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4a1b      	ldr	r2, [pc, #108]	; (800a3a8 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800a33a:	4293      	cmp	r3, r2
 800a33c:	d004      	beq.n	800a348 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	4a1a      	ldr	r2, [pc, #104]	; (800a3ac <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800a344:	4293      	cmp	r3, r2
 800a346:	d10c      	bne.n	800a362 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a34e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	689b      	ldr	r3, [r3, #8]
 800a354:	68ba      	ldr	r2, [r7, #8]
 800a356:	4313      	orrs	r3, r2
 800a358:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	68ba      	ldr	r2, [r7, #8]
 800a360:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	2201      	movs	r2, #1
 800a366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2200      	movs	r2, #0
 800a36e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a372:	2300      	movs	r3, #0
}
 800a374:	4618      	mov	r0, r3
 800a376:	3714      	adds	r7, #20
 800a378:	46bd      	mov	sp, r7
 800a37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37e:	4770      	bx	lr
 800a380:	40012c00 	.word	0x40012c00
 800a384:	50012c00 	.word	0x50012c00
 800a388:	40013400 	.word	0x40013400
 800a38c:	50013400 	.word	0x50013400
 800a390:	40000400 	.word	0x40000400
 800a394:	50000400 	.word	0x50000400
 800a398:	40000800 	.word	0x40000800
 800a39c:	50000800 	.word	0x50000800
 800a3a0:	40000c00 	.word	0x40000c00
 800a3a4:	50000c00 	.word	0x50000c00
 800a3a8:	40014000 	.word	0x40014000
 800a3ac:	50014000 	.word	0x50014000

0800a3b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b083      	sub	sp, #12
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a3b8:	bf00      	nop
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a3c4:	b480      	push	{r7}
 800a3c6:	b083      	sub	sp, #12
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a3cc:	bf00      	nop
 800a3ce:	370c      	adds	r7, #12
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d6:	4770      	bx	lr

0800a3d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b083      	sub	sp, #12
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a3e0:	bf00      	nop
 800a3e2:	370c      	adds	r7, #12
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ea:	4770      	bx	lr

0800a3ec <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a3ec:	b480      	push	{r7}
 800a3ee:	b083      	sub	sp, #12
 800a3f0:	af00      	add	r7, sp, #0
 800a3f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a3f4:	bf00      	nop
 800a3f6:	370c      	adds	r7, #12
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr

0800a400 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a400:	b480      	push	{r7}
 800a402:	b083      	sub	sp, #12
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a408:	bf00      	nop
 800a40a:	370c      	adds	r7, #12
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a414:	b480      	push	{r7}
 800a416:	b083      	sub	sp, #12
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a41c:	bf00      	nop
 800a41e:	370c      	adds	r7, #12
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a430:	bf00      	nop
 800a432:	370c      	adds	r7, #12
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d101      	bne.n	800a44e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a44a:	2301      	movs	r3, #1
 800a44c:	e042      	b.n	800a4d4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a454:	2b00      	cmp	r3, #0
 800a456:	d106      	bne.n	800a466 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2200      	movs	r2, #0
 800a45c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f7f8 f979 	bl	8002758 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2224      	movs	r2, #36	; 0x24
 800a46a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	681a      	ldr	r2, [r3, #0]
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f022 0201 	bic.w	r2, r2, #1
 800a47c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f000 f82c 	bl	800a4dc <UART_SetConfig>
 800a484:	4603      	mov	r3, r0
 800a486:	2b01      	cmp	r3, #1
 800a488:	d101      	bne.n	800a48e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a48a:	2301      	movs	r3, #1
 800a48c:	e022      	b.n	800a4d4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a492:	2b00      	cmp	r3, #0
 800a494:	d002      	beq.n	800a49c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f000 f9c2 	bl	800a820 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	685a      	ldr	r2, [r3, #4]
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a4aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	689a      	ldr	r2, [r3, #8]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a4ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	f042 0201 	orr.w	r2, r2, #1
 800a4ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f000 fa49 	bl	800a964 <UART_CheckIdleState>
 800a4d2:	4603      	mov	r3, r0
}
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3708      	adds	r7, #8
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a4dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a4e0:	b094      	sub	sp, #80	; 0x50
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a4e6:	2300      	movs	r3, #0
 800a4e8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ee:	681a      	ldr	r2, [r3, #0]
 800a4f0:	4b7e      	ldr	r3, [pc, #504]	; (800a6ec <UART_SetConfig+0x210>)
 800a4f2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a4f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f6:	689a      	ldr	r2, [r3, #8]
 800a4f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4fa:	691b      	ldr	r3, [r3, #16]
 800a4fc:	431a      	orrs	r2, r3
 800a4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a500:	695b      	ldr	r3, [r3, #20]
 800a502:	431a      	orrs	r2, r3
 800a504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a506:	69db      	ldr	r3, [r3, #28]
 800a508:	4313      	orrs	r3, r2
 800a50a:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4977      	ldr	r1, [pc, #476]	; (800a6f0 <UART_SetConfig+0x214>)
 800a514:	4019      	ands	r1, r3
 800a516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a51c:	430b      	orrs	r3, r1
 800a51e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a52c:	68d9      	ldr	r1, [r3, #12]
 800a52e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a530:	681a      	ldr	r2, [r3, #0]
 800a532:	ea40 0301 	orr.w	r3, r0, r1
 800a536:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a53a:	699b      	ldr	r3, [r3, #24]
 800a53c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a540:	681a      	ldr	r2, [r3, #0]
 800a542:	4b6a      	ldr	r3, [pc, #424]	; (800a6ec <UART_SetConfig+0x210>)
 800a544:	429a      	cmp	r2, r3
 800a546:	d009      	beq.n	800a55c <UART_SetConfig+0x80>
 800a548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	4b69      	ldr	r3, [pc, #420]	; (800a6f4 <UART_SetConfig+0x218>)
 800a54e:	429a      	cmp	r2, r3
 800a550:	d004      	beq.n	800a55c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a554:	6a1a      	ldr	r2, [r3, #32]
 800a556:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a558:	4313      	orrs	r3, r2
 800a55a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	689b      	ldr	r3, [r3, #8]
 800a562:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800a566:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800a56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56c:	681a      	ldr	r2, [r3, #0]
 800a56e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a570:	430b      	orrs	r3, r1
 800a572:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a57a:	f023 000f 	bic.w	r0, r3, #15
 800a57e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a580:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a584:	681a      	ldr	r2, [r3, #0]
 800a586:	ea40 0301 	orr.w	r3, r0, r1
 800a58a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a58c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58e:	681a      	ldr	r2, [r3, #0]
 800a590:	4b59      	ldr	r3, [pc, #356]	; (800a6f8 <UART_SetConfig+0x21c>)
 800a592:	429a      	cmp	r2, r3
 800a594:	d102      	bne.n	800a59c <UART_SetConfig+0xc0>
 800a596:	2301      	movs	r3, #1
 800a598:	64bb      	str	r3, [r7, #72]	; 0x48
 800a59a:	e029      	b.n	800a5f0 <UART_SetConfig+0x114>
 800a59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a59e:	681a      	ldr	r2, [r3, #0]
 800a5a0:	4b56      	ldr	r3, [pc, #344]	; (800a6fc <UART_SetConfig+0x220>)
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d102      	bne.n	800a5ac <UART_SetConfig+0xd0>
 800a5a6:	2302      	movs	r3, #2
 800a5a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5aa:	e021      	b.n	800a5f0 <UART_SetConfig+0x114>
 800a5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ae:	681a      	ldr	r2, [r3, #0]
 800a5b0:	4b53      	ldr	r3, [pc, #332]	; (800a700 <UART_SetConfig+0x224>)
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d102      	bne.n	800a5bc <UART_SetConfig+0xe0>
 800a5b6:	2304      	movs	r3, #4
 800a5b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5ba:	e019      	b.n	800a5f0 <UART_SetConfig+0x114>
 800a5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	4b50      	ldr	r3, [pc, #320]	; (800a704 <UART_SetConfig+0x228>)
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	d102      	bne.n	800a5cc <UART_SetConfig+0xf0>
 800a5c6:	2308      	movs	r3, #8
 800a5c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5ca:	e011      	b.n	800a5f0 <UART_SetConfig+0x114>
 800a5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ce:	681a      	ldr	r2, [r3, #0]
 800a5d0:	4b4d      	ldr	r3, [pc, #308]	; (800a708 <UART_SetConfig+0x22c>)
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d102      	bne.n	800a5dc <UART_SetConfig+0x100>
 800a5d6:	2310      	movs	r3, #16
 800a5d8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5da:	e009      	b.n	800a5f0 <UART_SetConfig+0x114>
 800a5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5de:	681a      	ldr	r2, [r3, #0]
 800a5e0:	4b42      	ldr	r3, [pc, #264]	; (800a6ec <UART_SetConfig+0x210>)
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	d102      	bne.n	800a5ec <UART_SetConfig+0x110>
 800a5e6:	2320      	movs	r3, #32
 800a5e8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5ea:	e001      	b.n	800a5f0 <UART_SetConfig+0x114>
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	4b3d      	ldr	r3, [pc, #244]	; (800a6ec <UART_SetConfig+0x210>)
 800a5f6:	429a      	cmp	r2, r3
 800a5f8:	d005      	beq.n	800a606 <UART_SetConfig+0x12a>
 800a5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	4b3d      	ldr	r3, [pc, #244]	; (800a6f4 <UART_SetConfig+0x218>)
 800a600:	429a      	cmp	r2, r3
 800a602:	f040 8085 	bne.w	800a710 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a606:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a608:	2200      	movs	r2, #0
 800a60a:	623b      	str	r3, [r7, #32]
 800a60c:	627a      	str	r2, [r7, #36]	; 0x24
 800a60e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a612:	f7fd f861 	bl	80076d8 <HAL_RCCEx_GetPeriphCLKFreq>
 800a616:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800a618:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	f000 80e8 	beq.w	800a7f0 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a624:	4a39      	ldr	r2, [pc, #228]	; (800a70c <UART_SetConfig+0x230>)
 800a626:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a62a:	461a      	mov	r2, r3
 800a62c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a62e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a632:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a636:	685a      	ldr	r2, [r3, #4]
 800a638:	4613      	mov	r3, r2
 800a63a:	005b      	lsls	r3, r3, #1
 800a63c:	4413      	add	r3, r2
 800a63e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a640:	429a      	cmp	r2, r3
 800a642:	d305      	bcc.n	800a650 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a64a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a64c:	429a      	cmp	r2, r3
 800a64e:	d903      	bls.n	800a658 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800a650:	2301      	movs	r3, #1
 800a652:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a656:	e048      	b.n	800a6ea <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a65a:	2200      	movs	r2, #0
 800a65c:	61bb      	str	r3, [r7, #24]
 800a65e:	61fa      	str	r2, [r7, #28]
 800a660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a664:	4a29      	ldr	r2, [pc, #164]	; (800a70c <UART_SetConfig+0x230>)
 800a666:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a66a:	b29b      	uxth	r3, r3
 800a66c:	2200      	movs	r2, #0
 800a66e:	613b      	str	r3, [r7, #16]
 800a670:	617a      	str	r2, [r7, #20]
 800a672:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a676:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a67a:	f7f6 fac1 	bl	8000c00 <__aeabi_uldivmod>
 800a67e:	4602      	mov	r2, r0
 800a680:	460b      	mov	r3, r1
 800a682:	4610      	mov	r0, r2
 800a684:	4619      	mov	r1, r3
 800a686:	f04f 0200 	mov.w	r2, #0
 800a68a:	f04f 0300 	mov.w	r3, #0
 800a68e:	020b      	lsls	r3, r1, #8
 800a690:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a694:	0202      	lsls	r2, r0, #8
 800a696:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a698:	6849      	ldr	r1, [r1, #4]
 800a69a:	0849      	lsrs	r1, r1, #1
 800a69c:	2000      	movs	r0, #0
 800a69e:	460c      	mov	r4, r1
 800a6a0:	4605      	mov	r5, r0
 800a6a2:	eb12 0804 	adds.w	r8, r2, r4
 800a6a6:	eb43 0905 	adc.w	r9, r3, r5
 800a6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	60bb      	str	r3, [r7, #8]
 800a6b2:	60fa      	str	r2, [r7, #12]
 800a6b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a6b8:	4640      	mov	r0, r8
 800a6ba:	4649      	mov	r1, r9
 800a6bc:	f7f6 faa0 	bl	8000c00 <__aeabi_uldivmod>
 800a6c0:	4602      	mov	r2, r0
 800a6c2:	460b      	mov	r3, r1
 800a6c4:	4613      	mov	r3, r2
 800a6c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a6c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a6ce:	d308      	bcc.n	800a6e2 <UART_SetConfig+0x206>
 800a6d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6d6:	d204      	bcs.n	800a6e2 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800a6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a6de:	60da      	str	r2, [r3, #12]
 800a6e0:	e003      	b.n	800a6ea <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800a6e2:	2301      	movs	r3, #1
 800a6e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800a6e8:	e082      	b.n	800a7f0 <UART_SetConfig+0x314>
 800a6ea:	e081      	b.n	800a7f0 <UART_SetConfig+0x314>
 800a6ec:	46002400 	.word	0x46002400
 800a6f0:	cfff69f3 	.word	0xcfff69f3
 800a6f4:	56002400 	.word	0x56002400
 800a6f8:	40013800 	.word	0x40013800
 800a6fc:	40004400 	.word	0x40004400
 800a700:	40004800 	.word	0x40004800
 800a704:	40004c00 	.word	0x40004c00
 800a708:	40005000 	.word	0x40005000
 800a70c:	0800d6c4 	.word	0x0800d6c4
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a712:	69db      	ldr	r3, [r3, #28]
 800a714:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a718:	d13c      	bne.n	800a794 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a71a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a71c:	2200      	movs	r2, #0
 800a71e:	603b      	str	r3, [r7, #0]
 800a720:	607a      	str	r2, [r7, #4]
 800a722:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a726:	f7fc ffd7 	bl	80076d8 <HAL_RCCEx_GetPeriphCLKFreq>
 800a72a:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a72c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d05e      	beq.n	800a7f0 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a736:	4a39      	ldr	r2, [pc, #228]	; (800a81c <UART_SetConfig+0x340>)
 800a738:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a73c:	461a      	mov	r2, r3
 800a73e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a740:	fbb3 f3f2 	udiv	r3, r3, r2
 800a744:	005a      	lsls	r2, r3, #1
 800a746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	085b      	lsrs	r3, r3, #1
 800a74c:	441a      	add	r2, r3
 800a74e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	fbb2 f3f3 	udiv	r3, r2, r3
 800a756:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a75a:	2b0f      	cmp	r3, #15
 800a75c:	d916      	bls.n	800a78c <UART_SetConfig+0x2b0>
 800a75e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a764:	d212      	bcs.n	800a78c <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a768:	b29b      	uxth	r3, r3
 800a76a:	f023 030f 	bic.w	r3, r3, #15
 800a76e:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a772:	085b      	lsrs	r3, r3, #1
 800a774:	b29b      	uxth	r3, r3
 800a776:	f003 0307 	and.w	r3, r3, #7
 800a77a:	b29a      	uxth	r2, r3
 800a77c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a77e:	4313      	orrs	r3, r2
 800a780:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800a782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a788:	60da      	str	r2, [r3, #12]
 800a78a:	e031      	b.n	800a7f0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800a78c:	2301      	movs	r3, #1
 800a78e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a792:	e02d      	b.n	800a7f0 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a794:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a796:	2200      	movs	r2, #0
 800a798:	469a      	mov	sl, r3
 800a79a:	4693      	mov	fp, r2
 800a79c:	4650      	mov	r0, sl
 800a79e:	4659      	mov	r1, fp
 800a7a0:	f7fc ff9a 	bl	80076d8 <HAL_RCCEx_GetPeriphCLKFreq>
 800a7a4:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800a7a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d021      	beq.n	800a7f0 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b0:	4a1a      	ldr	r2, [pc, #104]	; (800a81c <UART_SetConfig+0x340>)
 800a7b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a7ba:	fbb3 f2f2 	udiv	r2, r3, r2
 800a7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	085b      	lsrs	r3, r3, #1
 800a7c4:	441a      	add	r2, r3
 800a7c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7d2:	2b0f      	cmp	r3, #15
 800a7d4:	d909      	bls.n	800a7ea <UART_SetConfig+0x30e>
 800a7d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7dc:	d205      	bcs.n	800a7ea <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a7de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7e0:	b29a      	uxth	r2, r3
 800a7e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	60da      	str	r2, [r3, #12]
 800a7e8:	e002      	b.n	800a7f0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800a7ea:	2301      	movs	r3, #1
 800a7ec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7fa:	2201      	movs	r2, #1
 800a7fc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a802:	2200      	movs	r2, #0
 800a804:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a808:	2200      	movs	r2, #0
 800a80a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a80c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a810:	4618      	mov	r0, r3
 800a812:	3750      	adds	r7, #80	; 0x50
 800a814:	46bd      	mov	sp, r7
 800a816:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a81a:	bf00      	nop
 800a81c:	0800d6c4 	.word	0x0800d6c4

0800a820 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a820:	b480      	push	{r7}
 800a822:	b083      	sub	sp, #12
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a82c:	f003 0301 	and.w	r3, r3, #1
 800a830:	2b00      	cmp	r3, #0
 800a832:	d00a      	beq.n	800a84a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	430a      	orrs	r2, r1
 800a848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a84e:	f003 0302 	and.w	r3, r3, #2
 800a852:	2b00      	cmp	r3, #0
 800a854:	d00a      	beq.n	800a86c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	685b      	ldr	r3, [r3, #4]
 800a85c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	430a      	orrs	r2, r1
 800a86a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a870:	f003 0304 	and.w	r3, r3, #4
 800a874:	2b00      	cmp	r3, #0
 800a876:	d00a      	beq.n	800a88e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	430a      	orrs	r2, r1
 800a88c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a892:	f003 0308 	and.w	r3, r3, #8
 800a896:	2b00      	cmp	r3, #0
 800a898:	d00a      	beq.n	800a8b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	430a      	orrs	r2, r1
 800a8ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8b4:	f003 0310 	and.w	r3, r3, #16
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d00a      	beq.n	800a8d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	689b      	ldr	r3, [r3, #8]
 800a8c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	430a      	orrs	r2, r1
 800a8d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8d6:	f003 0320 	and.w	r3, r3, #32
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d00a      	beq.n	800a8f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	430a      	orrs	r2, r1
 800a8f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d01a      	beq.n	800a936 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	430a      	orrs	r2, r1
 800a914:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a91a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a91e:	d10a      	bne.n	800a936 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	430a      	orrs	r2, r1
 800a934:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a93a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d00a      	beq.n	800a958 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	430a      	orrs	r2, r1
 800a956:	605a      	str	r2, [r3, #4]
  }
}
 800a958:	bf00      	nop
 800a95a:	370c      	adds	r7, #12
 800a95c:	46bd      	mov	sp, r7
 800a95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a962:	4770      	bx	lr

0800a964 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b086      	sub	sp, #24
 800a968:	af02      	add	r7, sp, #8
 800a96a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2200      	movs	r2, #0
 800a970:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a974:	f7f8 f9e6 	bl	8002d44 <HAL_GetTick>
 800a978:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f003 0308 	and.w	r3, r3, #8
 800a984:	2b08      	cmp	r3, #8
 800a986:	d10e      	bne.n	800a9a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a988:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a98c:	9300      	str	r3, [sp, #0]
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2200      	movs	r2, #0
 800a992:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a996:	6878      	ldr	r0, [r7, #4]
 800a998:	f000 f82f 	bl	800a9fa <UART_WaitOnFlagUntilTimeout>
 800a99c:	4603      	mov	r3, r0
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d001      	beq.n	800a9a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9a2:	2303      	movs	r3, #3
 800a9a4:	e025      	b.n	800a9f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	f003 0304 	and.w	r3, r3, #4
 800a9b0:	2b04      	cmp	r3, #4
 800a9b2:	d10e      	bne.n	800a9d2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a9b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a9b8:	9300      	str	r3, [sp, #0]
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	2200      	movs	r2, #0
 800a9be:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a9c2:	6878      	ldr	r0, [r7, #4]
 800a9c4:	f000 f819 	bl	800a9fa <UART_WaitOnFlagUntilTimeout>
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d001      	beq.n	800a9d2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a9ce:	2303      	movs	r3, #3
 800a9d0:	e00f      	b.n	800a9f2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2220      	movs	r2, #32
 800a9d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	2220      	movs	r2, #32
 800a9de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	2200      	movs	r2, #0
 800a9e6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a9f0:	2300      	movs	r3, #0
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	3710      	adds	r7, #16
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	bd80      	pop	{r7, pc}

0800a9fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a9fa:	b580      	push	{r7, lr}
 800a9fc:	b09c      	sub	sp, #112	; 0x70
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	60f8      	str	r0, [r7, #12]
 800aa02:	60b9      	str	r1, [r7, #8]
 800aa04:	603b      	str	r3, [r7, #0]
 800aa06:	4613      	mov	r3, r2
 800aa08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa0a:	e0a9      	b.n	800ab60 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa12:	f000 80a5 	beq.w	800ab60 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa16:	f7f8 f995 	bl	8002d44 <HAL_GetTick>
 800aa1a:	4602      	mov	r2, r0
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	1ad3      	subs	r3, r2, r3
 800aa20:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d302      	bcc.n	800aa2c <UART_WaitOnFlagUntilTimeout+0x32>
 800aa26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d140      	bne.n	800aaae <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa34:	e853 3f00 	ldrex	r3, [r3]
 800aa38:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800aa3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aa40:	667b      	str	r3, [r7, #100]	; 0x64
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	461a      	mov	r2, r3
 800aa48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800aa4c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aa50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800aa52:	e841 2300 	strex	r3, r2, [r1]
 800aa56:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800aa58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d1e6      	bne.n	800aa2c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	3308      	adds	r3, #8
 800aa64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa68:	e853 3f00 	ldrex	r3, [r3]
 800aa6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa70:	f023 0301 	bic.w	r3, r3, #1
 800aa74:	663b      	str	r3, [r7, #96]	; 0x60
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	3308      	adds	r3, #8
 800aa7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aa7e:	64ba      	str	r2, [r7, #72]	; 0x48
 800aa80:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aa84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa86:	e841 2300 	strex	r3, r2, [r1]
 800aa8a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aa8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d1e5      	bne.n	800aa5e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	2220      	movs	r2, #32
 800aa96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	2220      	movs	r2, #32
 800aa9e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800aaaa:	2303      	movs	r3, #3
 800aaac:	e069      	b.n	800ab82 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	f003 0304 	and.w	r3, r3, #4
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d051      	beq.n	800ab60 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	69db      	ldr	r3, [r3, #28]
 800aac2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aac6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aaca:	d149      	bne.n	800ab60 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aad4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aadc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aade:	e853 3f00 	ldrex	r3, [r3]
 800aae2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aae6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aaea:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aaf4:	637b      	str	r3, [r7, #52]	; 0x34
 800aaf6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaf8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aafa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aafc:	e841 2300 	strex	r3, r2, [r1]
 800ab00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ab02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d1e6      	bne.n	800aad6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	3308      	adds	r3, #8
 800ab0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	e853 3f00 	ldrex	r3, [r3]
 800ab16:	613b      	str	r3, [r7, #16]
   return(result);
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	f023 0301 	bic.w	r3, r3, #1
 800ab1e:	66bb      	str	r3, [r7, #104]	; 0x68
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	3308      	adds	r3, #8
 800ab26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ab28:	623a      	str	r2, [r7, #32]
 800ab2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab2c:	69f9      	ldr	r1, [r7, #28]
 800ab2e:	6a3a      	ldr	r2, [r7, #32]
 800ab30:	e841 2300 	strex	r3, r2, [r1]
 800ab34:	61bb      	str	r3, [r7, #24]
   return(result);
 800ab36:	69bb      	ldr	r3, [r7, #24]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d1e5      	bne.n	800ab08 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2220      	movs	r2, #32
 800ab40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	2220      	movs	r2, #32
 800ab48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	2220      	movs	r2, #32
 800ab50:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	2200      	movs	r2, #0
 800ab58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ab5c:	2303      	movs	r3, #3
 800ab5e:	e010      	b.n	800ab82 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	69da      	ldr	r2, [r3, #28]
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	4013      	ands	r3, r2
 800ab6a:	68ba      	ldr	r2, [r7, #8]
 800ab6c:	429a      	cmp	r2, r3
 800ab6e:	bf0c      	ite	eq
 800ab70:	2301      	moveq	r3, #1
 800ab72:	2300      	movne	r3, #0
 800ab74:	b2db      	uxtb	r3, r3
 800ab76:	461a      	mov	r2, r3
 800ab78:	79fb      	ldrb	r3, [r7, #7]
 800ab7a:	429a      	cmp	r2, r3
 800ab7c:	f43f af46 	beq.w	800aa0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ab80:	2300      	movs	r3, #0
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3770      	adds	r7, #112	; 0x70
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}

0800ab8a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ab8a:	b480      	push	{r7}
 800ab8c:	b085      	sub	sp, #20
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d101      	bne.n	800aba0 <HAL_UARTEx_DisableFifoMode+0x16>
 800ab9c:	2302      	movs	r3, #2
 800ab9e:	e027      	b.n	800abf0 <HAL_UARTEx_DisableFifoMode+0x66>
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2201      	movs	r2, #1
 800aba4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2224      	movs	r2, #36	; 0x24
 800abac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	681a      	ldr	r2, [r3, #0]
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f022 0201 	bic.w	r2, r2, #1
 800abc6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800abce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	2200      	movs	r2, #0
 800abd4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	68fa      	ldr	r2, [r7, #12]
 800abdc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2220      	movs	r2, #32
 800abe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2200      	movs	r2, #0
 800abea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800abee:	2300      	movs	r3, #0
}
 800abf0:	4618      	mov	r0, r3
 800abf2:	3714      	adds	r7, #20
 800abf4:	46bd      	mov	sp, r7
 800abf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfa:	4770      	bx	lr

0800abfc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b084      	sub	sp, #16
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
 800ac04:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ac0c:	2b01      	cmp	r3, #1
 800ac0e:	d101      	bne.n	800ac14 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ac10:	2302      	movs	r3, #2
 800ac12:	e02d      	b.n	800ac70 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2201      	movs	r2, #1
 800ac18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2224      	movs	r2, #36	; 0x24
 800ac20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	681a      	ldr	r2, [r3, #0]
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f022 0201 	bic.w	r2, r2, #1
 800ac3a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	689b      	ldr	r3, [r3, #8]
 800ac42:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	683a      	ldr	r2, [r7, #0]
 800ac4c:	430a      	orrs	r2, r1
 800ac4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f000 f84f 	bl	800acf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	68fa      	ldr	r2, [r7, #12]
 800ac5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2220      	movs	r2, #32
 800ac62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ac6e:	2300      	movs	r3, #0
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3710      	adds	r7, #16
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b084      	sub	sp, #16
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
 800ac80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ac88:	2b01      	cmp	r3, #1
 800ac8a:	d101      	bne.n	800ac90 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ac8c:	2302      	movs	r3, #2
 800ac8e:	e02d      	b.n	800acec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2201      	movs	r2, #1
 800ac94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2224      	movs	r2, #36	; 0x24
 800ac9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	681a      	ldr	r2, [r3, #0]
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	f022 0201 	bic.w	r2, r2, #1
 800acb6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	689b      	ldr	r3, [r3, #8]
 800acbe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	683a      	ldr	r2, [r7, #0]
 800acc8:	430a      	orrs	r2, r1
 800acca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 f811 	bl	800acf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	68fa      	ldr	r2, [r7, #12]
 800acd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2220      	movs	r2, #32
 800acde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2200      	movs	r2, #0
 800ace6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800acea:	2300      	movs	r3, #0
}
 800acec:	4618      	mov	r0, r3
 800acee:	3710      	adds	r7, #16
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b085      	sub	sp, #20
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d108      	bne.n	800ad16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	2201      	movs	r2, #1
 800ad08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2201      	movs	r2, #1
 800ad10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ad14:	e031      	b.n	800ad7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ad16:	2308      	movs	r3, #8
 800ad18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ad1a:	2308      	movs	r3, #8
 800ad1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	689b      	ldr	r3, [r3, #8]
 800ad24:	0e5b      	lsrs	r3, r3, #25
 800ad26:	b2db      	uxtb	r3, r3
 800ad28:	f003 0307 	and.w	r3, r3, #7
 800ad2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	689b      	ldr	r3, [r3, #8]
 800ad34:	0f5b      	lsrs	r3, r3, #29
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	f003 0307 	and.w	r3, r3, #7
 800ad3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad3e:	7bbb      	ldrb	r3, [r7, #14]
 800ad40:	7b3a      	ldrb	r2, [r7, #12]
 800ad42:	4911      	ldr	r1, [pc, #68]	; (800ad88 <UARTEx_SetNbDataToProcess+0x94>)
 800ad44:	5c8a      	ldrb	r2, [r1, r2]
 800ad46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ad4a:	7b3a      	ldrb	r2, [r7, #12]
 800ad4c:	490f      	ldr	r1, [pc, #60]	; (800ad8c <UARTEx_SetNbDataToProcess+0x98>)
 800ad4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ad50:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad54:	b29a      	uxth	r2, r3
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ad5c:	7bfb      	ldrb	r3, [r7, #15]
 800ad5e:	7b7a      	ldrb	r2, [r7, #13]
 800ad60:	4909      	ldr	r1, [pc, #36]	; (800ad88 <UARTEx_SetNbDataToProcess+0x94>)
 800ad62:	5c8a      	ldrb	r2, [r1, r2]
 800ad64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ad68:	7b7a      	ldrb	r2, [r7, #13]
 800ad6a:	4908      	ldr	r1, [pc, #32]	; (800ad8c <UARTEx_SetNbDataToProcess+0x98>)
 800ad6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ad6e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad72:	b29a      	uxth	r2, r3
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ad7a:	bf00      	nop
 800ad7c:	3714      	adds	r7, #20
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr
 800ad86:	bf00      	nop
 800ad88:	0800d6dc 	.word	0x0800d6dc
 800ad8c:	0800d6e4 	.word	0x0800d6e4

0800ad90 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800ad90:	b480      	push	{r7}
 800ad92:	b083      	sub	sp, #12
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f043 0202 	orr.w	r2, r3, #2
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	685a      	ldr	r2, [r3, #4]
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	021b      	lsls	r3, r3, #8
 800adb0:	431a      	orrs	r2, r3
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f023 0202 	bic.w	r2, r3, #2
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	601a      	str	r2, [r3, #0]
}
 800adc2:	bf00      	nop
 800adc4:	370c      	adds	r7, #12
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr

0800adce <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800adce:	b480      	push	{r7}
 800add0:	b08b      	sub	sp, #44	; 0x2c
 800add2:	af00      	add	r7, sp, #0
 800add4:	60f8      	str	r0, [r7, #12]
 800add6:	60b9      	str	r1, [r7, #8]
 800add8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681a      	ldr	r2, [r3, #0]
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	fa93 f3a3 	rbit	r3, r3
 800ade8:	613b      	str	r3, [r7, #16]
  return result;
 800adea:	693b      	ldr	r3, [r7, #16]
 800adec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800adee:	69bb      	ldr	r3, [r7, #24]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d101      	bne.n	800adf8 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800adf4:	2320      	movs	r3, #32
 800adf6:	e003      	b.n	800ae00 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800adf8:	69bb      	ldr	r3, [r7, #24]
 800adfa:	fab3 f383 	clz	r3, r3
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	005b      	lsls	r3, r3, #1
 800ae02:	2103      	movs	r1, #3
 800ae04:	fa01 f303 	lsl.w	r3, r1, r3
 800ae08:	43db      	mvns	r3, r3
 800ae0a:	401a      	ands	r2, r3
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae10:	6a3b      	ldr	r3, [r7, #32]
 800ae12:	fa93 f3a3 	rbit	r3, r3
 800ae16:	61fb      	str	r3, [r7, #28]
  return result;
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800ae1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d101      	bne.n	800ae26 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800ae22:	2320      	movs	r3, #32
 800ae24:	e003      	b.n	800ae2e <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800ae26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae28:	fab3 f383 	clz	r3, r3
 800ae2c:	b2db      	uxtb	r3, r3
 800ae2e:	005b      	lsls	r3, r3, #1
 800ae30:	6879      	ldr	r1, [r7, #4]
 800ae32:	fa01 f303 	lsl.w	r3, r1, r3
 800ae36:	431a      	orrs	r2, r3
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	601a      	str	r2, [r3, #0]
}
 800ae3c:	bf00      	nop
 800ae3e:	372c      	adds	r7, #44	; 0x2c
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b085      	sub	sp, #20
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	685a      	ldr	r2, [r3, #4]
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	43db      	mvns	r3, r3
 800ae5c:	401a      	ands	r2, r3
 800ae5e:	68bb      	ldr	r3, [r7, #8]
 800ae60:	6879      	ldr	r1, [r7, #4]
 800ae62:	fb01 f303 	mul.w	r3, r1, r3
 800ae66:	431a      	orrs	r2, r3
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	605a      	str	r2, [r3, #4]
}
 800ae6c:	bf00      	nop
 800ae6e:	3714      	adds	r7, #20
 800ae70:	46bd      	mov	sp, r7
 800ae72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae76:	4770      	bx	lr

0800ae78 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800ae78:	b480      	push	{r7}
 800ae7a:	b08b      	sub	sp, #44	; 0x2c
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	60f8      	str	r0, [r7, #12]
 800ae80:	60b9      	str	r1, [r7, #8]
 800ae82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	689a      	ldr	r2, [r3, #8]
 800ae88:	68bb      	ldr	r3, [r7, #8]
 800ae8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	fa93 f3a3 	rbit	r3, r3
 800ae92:	613b      	str	r3, [r7, #16]
  return result;
 800ae94:	693b      	ldr	r3, [r7, #16]
 800ae96:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ae98:	69bb      	ldr	r3, [r7, #24]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d101      	bne.n	800aea2 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800ae9e:	2320      	movs	r3, #32
 800aea0:	e003      	b.n	800aeaa <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800aea2:	69bb      	ldr	r3, [r7, #24]
 800aea4:	fab3 f383 	clz	r3, r3
 800aea8:	b2db      	uxtb	r3, r3
 800aeaa:	005b      	lsls	r3, r3, #1
 800aeac:	2103      	movs	r1, #3
 800aeae:	fa01 f303 	lsl.w	r3, r1, r3
 800aeb2:	43db      	mvns	r3, r3
 800aeb4:	401a      	ands	r2, r3
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aeba:	6a3b      	ldr	r3, [r7, #32]
 800aebc:	fa93 f3a3 	rbit	r3, r3
 800aec0:	61fb      	str	r3, [r7, #28]
  return result;
 800aec2:	69fb      	ldr	r3, [r7, #28]
 800aec4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800aec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d101      	bne.n	800aed0 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800aecc:	2320      	movs	r3, #32
 800aece:	e003      	b.n	800aed8 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800aed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed2:	fab3 f383 	clz	r3, r3
 800aed6:	b2db      	uxtb	r3, r3
 800aed8:	005b      	lsls	r3, r3, #1
 800aeda:	6879      	ldr	r1, [r7, #4]
 800aedc:	fa01 f303 	lsl.w	r3, r1, r3
 800aee0:	431a      	orrs	r2, r3
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800aee6:	bf00      	nop
 800aee8:	372c      	adds	r7, #44	; 0x2c
 800aeea:	46bd      	mov	sp, r7
 800aeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef0:	4770      	bx	lr

0800aef2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800aef2:	b480      	push	{r7}
 800aef4:	b08b      	sub	sp, #44	; 0x2c
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	60f8      	str	r0, [r7, #12]
 800aefa:	60b9      	str	r1, [r7, #8]
 800aefc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	68da      	ldr	r2, [r3, #12]
 800af02:	68bb      	ldr	r3, [r7, #8]
 800af04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	fa93 f3a3 	rbit	r3, r3
 800af0c:	613b      	str	r3, [r7, #16]
  return result;
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800af12:	69bb      	ldr	r3, [r7, #24]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d101      	bne.n	800af1c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800af18:	2320      	movs	r3, #32
 800af1a:	e003      	b.n	800af24 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800af1c:	69bb      	ldr	r3, [r7, #24]
 800af1e:	fab3 f383 	clz	r3, r3
 800af22:	b2db      	uxtb	r3, r3
 800af24:	005b      	lsls	r3, r3, #1
 800af26:	2103      	movs	r1, #3
 800af28:	fa01 f303 	lsl.w	r3, r1, r3
 800af2c:	43db      	mvns	r3, r3
 800af2e:	401a      	ands	r2, r3
 800af30:	68bb      	ldr	r3, [r7, #8]
 800af32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af34:	6a3b      	ldr	r3, [r7, #32]
 800af36:	fa93 f3a3 	rbit	r3, r3
 800af3a:	61fb      	str	r3, [r7, #28]
  return result;
 800af3c:	69fb      	ldr	r3, [r7, #28]
 800af3e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800af40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af42:	2b00      	cmp	r3, #0
 800af44:	d101      	bne.n	800af4a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800af46:	2320      	movs	r3, #32
 800af48:	e003      	b.n	800af52 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800af4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af4c:	fab3 f383 	clz	r3, r3
 800af50:	b2db      	uxtb	r3, r3
 800af52:	005b      	lsls	r3, r3, #1
 800af54:	6879      	ldr	r1, [r7, #4]
 800af56:	fa01 f303 	lsl.w	r3, r1, r3
 800af5a:	431a      	orrs	r2, r3
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	60da      	str	r2, [r3, #12]
}
 800af60:	bf00      	nop
 800af62:	372c      	adds	r7, #44	; 0x2c
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr

0800af6c <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b08b      	sub	sp, #44	; 0x2c
 800af70:	af00      	add	r7, sp, #0
 800af72:	60f8      	str	r0, [r7, #12]
 800af74:	60b9      	str	r1, [r7, #8]
 800af76:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	6a1a      	ldr	r2, [r3, #32]
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	fa93 f3a3 	rbit	r3, r3
 800af86:	613b      	str	r3, [r7, #16]
  return result;
 800af88:	693b      	ldr	r3, [r7, #16]
 800af8a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800af8c:	69bb      	ldr	r3, [r7, #24]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d101      	bne.n	800af96 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800af92:	2320      	movs	r3, #32
 800af94:	e003      	b.n	800af9e <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800af96:	69bb      	ldr	r3, [r7, #24]
 800af98:	fab3 f383 	clz	r3, r3
 800af9c:	b2db      	uxtb	r3, r3
 800af9e:	009b      	lsls	r3, r3, #2
 800afa0:	210f      	movs	r1, #15
 800afa2:	fa01 f303 	lsl.w	r3, r1, r3
 800afa6:	43db      	mvns	r3, r3
 800afa8:	401a      	ands	r2, r3
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800afae:	6a3b      	ldr	r3, [r7, #32]
 800afb0:	fa93 f3a3 	rbit	r3, r3
 800afb4:	61fb      	str	r3, [r7, #28]
  return result;
 800afb6:	69fb      	ldr	r3, [r7, #28]
 800afb8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800afba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d101      	bne.n	800afc4 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800afc0:	2320      	movs	r3, #32
 800afc2:	e003      	b.n	800afcc <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800afc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc6:	fab3 f383 	clz	r3, r3
 800afca:	b2db      	uxtb	r3, r3
 800afcc:	009b      	lsls	r3, r3, #2
 800afce:	6879      	ldr	r1, [r7, #4]
 800afd0:	fa01 f303 	lsl.w	r3, r1, r3
 800afd4:	431a      	orrs	r2, r3
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800afda:	bf00      	nop
 800afdc:	372c      	adds	r7, #44	; 0x2c
 800afde:	46bd      	mov	sp, r7
 800afe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe4:	4770      	bx	lr

0800afe6 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800afe6:	b480      	push	{r7}
 800afe8:	b08b      	sub	sp, #44	; 0x2c
 800afea:	af00      	add	r7, sp, #0
 800afec:	60f8      	str	r0, [r7, #12]
 800afee:	60b9      	str	r1, [r7, #8]
 800aff0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	0a1b      	lsrs	r3, r3, #8
 800affa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800affc:	697b      	ldr	r3, [r7, #20]
 800affe:	fa93 f3a3 	rbit	r3, r3
 800b002:	613b      	str	r3, [r7, #16]
  return result;
 800b004:	693b      	ldr	r3, [r7, #16]
 800b006:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800b008:	69bb      	ldr	r3, [r7, #24]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d101      	bne.n	800b012 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800b00e:	2320      	movs	r3, #32
 800b010:	e003      	b.n	800b01a <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800b012:	69bb      	ldr	r3, [r7, #24]
 800b014:	fab3 f383 	clz	r3, r3
 800b018:	b2db      	uxtb	r3, r3
 800b01a:	009b      	lsls	r3, r3, #2
 800b01c:	210f      	movs	r1, #15
 800b01e:	fa01 f303 	lsl.w	r3, r1, r3
 800b022:	43db      	mvns	r3, r3
 800b024:	401a      	ands	r2, r3
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	0a1b      	lsrs	r3, r3, #8
 800b02a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b02c:	6a3b      	ldr	r3, [r7, #32]
 800b02e:	fa93 f3a3 	rbit	r3, r3
 800b032:	61fb      	str	r3, [r7, #28]
  return result;
 800b034:	69fb      	ldr	r3, [r7, #28]
 800b036:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800b038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d101      	bne.n	800b042 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800b03e:	2320      	movs	r3, #32
 800b040:	e003      	b.n	800b04a <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800b042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b044:	fab3 f383 	clz	r3, r3
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	009b      	lsls	r3, r3, #2
 800b04c:	6879      	ldr	r1, [r7, #4]
 800b04e:	fa01 f303 	lsl.w	r3, r1, r3
 800b052:	431a      	orrs	r2, r3
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800b058:	bf00      	nop
 800b05a:	372c      	adds	r7, #44	; 0x2c
 800b05c:	46bd      	mov	sp, r7
 800b05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b062:	4770      	bx	lr

0800b064 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b08a      	sub	sp, #40	; 0x28
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
 800b06c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b074:	69bb      	ldr	r3, [r7, #24]
 800b076:	fa93 f3a3 	rbit	r3, r3
 800b07a:	617b      	str	r3, [r7, #20]
  return result;
 800b07c:	697b      	ldr	r3, [r7, #20]
 800b07e:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d101      	bne.n	800b08a <LL_GPIO_Init+0x26>
    return 32U;
 800b086:	2320      	movs	r3, #32
 800b088:	e003      	b.n	800b092 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800b08a:	69fb      	ldr	r3, [r7, #28]
 800b08c:	fab3 f383 	clz	r3, r3
 800b090:	b2db      	uxtb	r3, r3
 800b092:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800b094:	e050      	b.n	800b138 <LL_GPIO_Init+0xd4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	681a      	ldr	r2, [r3, #0]
 800b09a:	2101      	movs	r1, #1
 800b09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09e:	fa01 f303 	lsl.w	r3, r1, r3
 800b0a2:	4013      	ands	r3, r2
 800b0a4:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800b0a6:	6a3b      	ldr	r3, [r7, #32]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d042      	beq.n	800b132 <LL_GPIO_Init+0xce>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	461a      	mov	r2, r3
 800b0b2:	6a39      	ldr	r1, [r7, #32]
 800b0b4:	6878      	ldr	r0, [r7, #4]
 800b0b6:	f7ff fe8a 	bl	800adce <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	685b      	ldr	r3, [r3, #4]
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d003      	beq.n	800b0ca <LL_GPIO_Init+0x66>
 800b0c2:	683b      	ldr	r3, [r7, #0]
 800b0c4:	685b      	ldr	r3, [r3, #4]
 800b0c6:	2b02      	cmp	r3, #2
 800b0c8:	d106      	bne.n	800b0d8 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	689b      	ldr	r3, [r3, #8]
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	6a39      	ldr	r1, [r7, #32]
 800b0d2:	6878      	ldr	r0, [r7, #4]
 800b0d4:	f7ff fed0 	bl	800ae78 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	691b      	ldr	r3, [r3, #16]
 800b0dc:	461a      	mov	r2, r3
 800b0de:	6a39      	ldr	r1, [r7, #32]
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f7ff ff06 	bl	800aef2 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	2b02      	cmp	r3, #2
 800b0ec:	d121      	bne.n	800b132 <LL_GPIO_Init+0xce>
 800b0ee:	6a3b      	ldr	r3, [r7, #32]
 800b0f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	fa93 f3a3 	rbit	r3, r3
 800b0f8:	60bb      	str	r3, [r7, #8]
  return result;
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d101      	bne.n	800b108 <LL_GPIO_Init+0xa4>
    return 32U;
 800b104:	2320      	movs	r3, #32
 800b106:	e003      	b.n	800b110 <LL_GPIO_Init+0xac>
  return __builtin_clz(value);
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	fab3 f383 	clz	r3, r3
 800b10e:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800b110:	2b07      	cmp	r3, #7
 800b112:	d807      	bhi.n	800b124 <LL_GPIO_Init+0xc0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b114:	683b      	ldr	r3, [r7, #0]
 800b116:	695b      	ldr	r3, [r3, #20]
 800b118:	461a      	mov	r2, r3
 800b11a:	6a39      	ldr	r1, [r7, #32]
 800b11c:	6878      	ldr	r0, [r7, #4]
 800b11e:	f7ff ff25 	bl	800af6c <LL_GPIO_SetAFPin_0_7>
 800b122:	e006      	b.n	800b132 <LL_GPIO_Init+0xce>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b124:	683b      	ldr	r3, [r7, #0]
 800b126:	695b      	ldr	r3, [r3, #20]
 800b128:	461a      	mov	r2, r3
 800b12a:	6a39      	ldr	r1, [r7, #32]
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	f7ff ff5a 	bl	800afe6 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800b132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b134:	3301      	adds	r3, #1
 800b136:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800b138:	683b      	ldr	r3, [r7, #0]
 800b13a:	681a      	ldr	r2, [r3, #0]
 800b13c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b13e:	fa22 f303 	lsr.w	r3, r2, r3
 800b142:	2b00      	cmp	r3, #0
 800b144:	d1a7      	bne.n	800b096 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	685b      	ldr	r3, [r3, #4]
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	d003      	beq.n	800b156 <LL_GPIO_Init+0xf2>
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	2b02      	cmp	r3, #2
 800b154:	d107      	bne.n	800b166 <LL_GPIO_Init+0x102>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800b156:	683b      	ldr	r3, [r7, #0]
 800b158:	6819      	ldr	r1, [r3, #0]
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	68db      	ldr	r3, [r3, #12]
 800b15e:	461a      	mov	r2, r3
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f7ff fe71 	bl	800ae48 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800b166:	2300      	movs	r3, #0
}
 800b168:	4618      	mov	r0, r3
 800b16a:	3728      	adds	r7, #40	; 0x28
 800b16c:	46bd      	mov	sp, r7
 800b16e:	bd80      	pop	{r7, pc}

0800b170 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b170:	b084      	sub	sp, #16
 800b172:	b580      	push	{r7, lr}
 800b174:	b084      	sub	sp, #16
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
 800b17a:	f107 001c 	add.w	r0, r7, #28
 800b17e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	68db      	ldr	r3, [r3, #12]
 800b186:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f000 fa72 	bl	800b678 <USB_CoreReset>
 800b194:	4603      	mov	r3, r0
 800b196:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800b198:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d106      	bne.n	800b1ac <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	639a      	str	r2, [r3, #56]	; 0x38
 800b1aa:	e005      	b.n	800b1b8 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

  return ret;
 800b1b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	3710      	adds	r7, #16
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b1c4:	b004      	add	sp, #16
 800b1c6:	4770      	bx	lr

0800b1c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b083      	sub	sp, #12
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	689b      	ldr	r3, [r3, #8]
 800b1d4:	f023 0201 	bic.w	r2, r3, #1
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b1dc:	2300      	movs	r3, #0
}
 800b1de:	4618      	mov	r0, r3
 800b1e0:	370c      	adds	r7, #12
 800b1e2:	46bd      	mov	sp, r7
 800b1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e8:	4770      	bx	lr

0800b1ea <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b1ea:	b580      	push	{r7, lr}
 800b1ec:	b084      	sub	sp, #16
 800b1ee:	af00      	add	r7, sp, #0
 800b1f0:	6078      	str	r0, [r7, #4]
 800b1f2:	460b      	mov	r3, r1
 800b1f4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	68db      	ldr	r3, [r3, #12]
 800b1fe:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b206:	78fb      	ldrb	r3, [r7, #3]
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d115      	bne.n	800b238 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	68db      	ldr	r3, [r3, #12]
 800b210:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b218:	2001      	movs	r0, #1
 800b21a:	f7f7 fd9f 	bl	8002d5c <HAL_Delay>
      ms++;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	3301      	adds	r3, #1
 800b222:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f000 fa19 	bl	800b65c <USB_GetMode>
 800b22a:	4603      	mov	r3, r0
 800b22c:	2b01      	cmp	r3, #1
 800b22e:	d01e      	beq.n	800b26e <USB_SetCurrentMode+0x84>
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	2b31      	cmp	r3, #49	; 0x31
 800b234:	d9f0      	bls.n	800b218 <USB_SetCurrentMode+0x2e>
 800b236:	e01a      	b.n	800b26e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b238:	78fb      	ldrb	r3, [r7, #3]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d115      	bne.n	800b26a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	68db      	ldr	r3, [r3, #12]
 800b242:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b24a:	2001      	movs	r0, #1
 800b24c:	f7f7 fd86 	bl	8002d5c <HAL_Delay>
      ms++;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	3301      	adds	r3, #1
 800b254:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b256:	6878      	ldr	r0, [r7, #4]
 800b258:	f000 fa00 	bl	800b65c <USB_GetMode>
 800b25c:	4603      	mov	r3, r0
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d005      	beq.n	800b26e <USB_SetCurrentMode+0x84>
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2b31      	cmp	r3, #49	; 0x31
 800b266:	d9f0      	bls.n	800b24a <USB_SetCurrentMode+0x60>
 800b268:	e001      	b.n	800b26e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b26a:	2301      	movs	r3, #1
 800b26c:	e005      	b.n	800b27a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	2b32      	cmp	r3, #50	; 0x32
 800b272:	d101      	bne.n	800b278 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b274:	2301      	movs	r3, #1
 800b276:	e000      	b.n	800b27a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b278:	2300      	movs	r3, #0
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3710      	adds	r7, #16
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
	...

0800b284 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b284:	b084      	sub	sp, #16
 800b286:	b580      	push	{r7, lr}
 800b288:	b086      	sub	sp, #24
 800b28a:	af00      	add	r7, sp, #0
 800b28c:	6078      	str	r0, [r7, #4]
 800b28e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b292:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b296:	2300      	movs	r3, #0
 800b298:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b29e:	2300      	movs	r3, #0
 800b2a0:	613b      	str	r3, [r7, #16]
 800b2a2:	e009      	b.n	800b2b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b2a4:	687a      	ldr	r2, [r7, #4]
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	3340      	adds	r3, #64	; 0x40
 800b2aa:	009b      	lsls	r3, r3, #2
 800b2ac:	4413      	add	r3, r2
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b2b2:	693b      	ldr	r3, [r7, #16]
 800b2b4:	3301      	adds	r3, #1
 800b2b6:	613b      	str	r3, [r7, #16]
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	2b0e      	cmp	r3, #14
 800b2bc:	d9f2      	bls.n	800b2a4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b2be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d11c      	bne.n	800b2fe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	68fa      	ldr	r2, [r7, #12]
 800b2ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b2d2:	f043 0302 	orr.w	r3, r3, #2
 800b2d6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2dc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	639a      	str	r2, [r3, #56]	; 0x38
    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	601a      	str	r2, [r3, #0]
 800b2fc:	e005      	b.n	800b30a <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b302:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b310:	461a      	mov	r2, r3
 800b312:	2300      	movs	r3, #0
 800b314:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b31c:	4619      	mov	r1, r3
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b324:	461a      	mov	r2, r3
 800b326:	680b      	ldr	r3, [r1, #0]
 800b328:	6013      	str	r3, [r2, #0]
  }
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b32a:	2103      	movs	r1, #3
 800b32c:	6878      	ldr	r0, [r7, #4]
 800b32e:	f000 f95b 	bl	800b5e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b332:	2110      	movs	r1, #16
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f000 f8f3 	bl	800b520 <USB_FlushTxFifo>
 800b33a:	4603      	mov	r3, r0
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d001      	beq.n	800b344 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800b340:	2301      	movs	r3, #1
 800b342:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b344:	6878      	ldr	r0, [r7, #4]
 800b346:	f000 f91f 	bl	800b588 <USB_FlushRxFifo>
 800b34a:	4603      	mov	r3, r0
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d001      	beq.n	800b354 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800b350:	2301      	movs	r3, #1
 800b352:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b35a:	461a      	mov	r2, r3
 800b35c:	2300      	movs	r3, #0
 800b35e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b366:	461a      	mov	r2, r3
 800b368:	2300      	movs	r3, #0
 800b36a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b372:	461a      	mov	r2, r3
 800b374:	2300      	movs	r3, #0
 800b376:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b378:	2300      	movs	r3, #0
 800b37a:	613b      	str	r3, [r7, #16]
 800b37c:	e043      	b.n	800b406 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b37e:	693b      	ldr	r3, [r7, #16]
 800b380:	015a      	lsls	r2, r3, #5
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	4413      	add	r3, r2
 800b386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b390:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b394:	d118      	bne.n	800b3c8 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800b396:	693b      	ldr	r3, [r7, #16]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d10a      	bne.n	800b3b2 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	015a      	lsls	r2, r3, #5
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	4413      	add	r3, r2
 800b3a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3a8:	461a      	mov	r2, r3
 800b3aa:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b3ae:	6013      	str	r3, [r2, #0]
 800b3b0:	e013      	b.n	800b3da <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b3b2:	693b      	ldr	r3, [r7, #16]
 800b3b4:	015a      	lsls	r2, r3, #5
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	4413      	add	r3, r2
 800b3ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3be:	461a      	mov	r2, r3
 800b3c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b3c4:	6013      	str	r3, [r2, #0]
 800b3c6:	e008      	b.n	800b3da <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b3c8:	693b      	ldr	r3, [r7, #16]
 800b3ca:	015a      	lsls	r2, r3, #5
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	4413      	add	r3, r2
 800b3d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3d4:	461a      	mov	r2, r3
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	015a      	lsls	r2, r3, #5
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	4413      	add	r3, r2
 800b3e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3e6:	461a      	mov	r2, r3
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	015a      	lsls	r2, r3, #5
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	4413      	add	r3, r2
 800b3f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b3fe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b400:	693b      	ldr	r3, [r7, #16]
 800b402:	3301      	adds	r3, #1
 800b404:	613b      	str	r3, [r7, #16]
 800b406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b408:	693a      	ldr	r2, [r7, #16]
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d3b7      	bcc.n	800b37e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b40e:	2300      	movs	r3, #0
 800b410:	613b      	str	r3, [r7, #16]
 800b412:	e043      	b.n	800b49c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	015a      	lsls	r2, r3, #5
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	4413      	add	r3, r2
 800b41c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b426:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b42a:	d118      	bne.n	800b45e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d10a      	bne.n	800b448 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	015a      	lsls	r2, r3, #5
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	4413      	add	r3, r2
 800b43a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b43e:	461a      	mov	r2, r3
 800b440:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b444:	6013      	str	r3, [r2, #0]
 800b446:	e013      	b.n	800b470 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b448:	693b      	ldr	r3, [r7, #16]
 800b44a:	015a      	lsls	r2, r3, #5
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	4413      	add	r3, r2
 800b450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b454:	461a      	mov	r2, r3
 800b456:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b45a:	6013      	str	r3, [r2, #0]
 800b45c:	e008      	b.n	800b470 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b45e:	693b      	ldr	r3, [r7, #16]
 800b460:	015a      	lsls	r2, r3, #5
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	4413      	add	r3, r2
 800b466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b46a:	461a      	mov	r2, r3
 800b46c:	2300      	movs	r3, #0
 800b46e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	015a      	lsls	r2, r3, #5
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	4413      	add	r3, r2
 800b478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b47c:	461a      	mov	r2, r3
 800b47e:	2300      	movs	r3, #0
 800b480:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b482:	693b      	ldr	r3, [r7, #16]
 800b484:	015a      	lsls	r2, r3, #5
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	4413      	add	r3, r2
 800b48a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b48e:	461a      	mov	r2, r3
 800b490:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b494:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b496:	693b      	ldr	r3, [r7, #16]
 800b498:	3301      	adds	r3, #1
 800b49a:	613b      	str	r3, [r7, #16]
 800b49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b49e:	693a      	ldr	r2, [r7, #16]
 800b4a0:	429a      	cmp	r2, r3
 800b4a2:	d3b7      	bcc.n	800b414 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4aa:	691b      	ldr	r3, [r3, #16]
 800b4ac:	68fa      	ldr	r2, [r7, #12]
 800b4ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4b6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b4c4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b4c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d105      	bne.n	800b4d8 <USB_DevInit+0x254>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	699b      	ldr	r3, [r3, #24]
 800b4d0:	f043 0210 	orr.w	r2, r3, #16
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	699a      	ldr	r2, [r3, #24]
 800b4dc:	4b0f      	ldr	r3, [pc, #60]	; (800b51c <USB_DevInit+0x298>)
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	687a      	ldr	r2, [r7, #4]
 800b4e2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b4e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d005      	beq.n	800b4f6 <USB_DevInit+0x272>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	699b      	ldr	r3, [r3, #24]
 800b4ee:	f043 0208 	orr.w	r2, r3, #8
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b4f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	d107      	bne.n	800b50c <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	699b      	ldr	r3, [r3, #24]
 800b500:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b504:	f043 0304 	orr.w	r3, r3, #4
 800b508:	687a      	ldr	r2, [r7, #4]
 800b50a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b50c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3718      	adds	r7, #24
 800b512:	46bd      	mov	sp, r7
 800b514:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b518:	b004      	add	sp, #16
 800b51a:	4770      	bx	lr
 800b51c:	803c3800 	.word	0x803c3800

0800b520 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b520:	b480      	push	{r7}
 800b522:	b085      	sub	sp, #20
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
 800b528:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b52a:	2300      	movs	r3, #0
 800b52c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	3301      	adds	r3, #1
 800b532:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	4a13      	ldr	r2, [pc, #76]	; (800b584 <USB_FlushTxFifo+0x64>)
 800b538:	4293      	cmp	r3, r2
 800b53a:	d901      	bls.n	800b540 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b53c:	2303      	movs	r3, #3
 800b53e:	e01b      	b.n	800b578 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	691b      	ldr	r3, [r3, #16]
 800b544:	2b00      	cmp	r3, #0
 800b546:	daf2      	bge.n	800b52e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b548:	2300      	movs	r3, #0
 800b54a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	019b      	lsls	r3, r3, #6
 800b550:	f043 0220 	orr.w	r2, r3, #32
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	3301      	adds	r3, #1
 800b55c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	4a08      	ldr	r2, [pc, #32]	; (800b584 <USB_FlushTxFifo+0x64>)
 800b562:	4293      	cmp	r3, r2
 800b564:	d901      	bls.n	800b56a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b566:	2303      	movs	r3, #3
 800b568:	e006      	b.n	800b578 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	691b      	ldr	r3, [r3, #16]
 800b56e:	f003 0320 	and.w	r3, r3, #32
 800b572:	2b20      	cmp	r3, #32
 800b574:	d0f0      	beq.n	800b558 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b576:	2300      	movs	r3, #0
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3714      	adds	r7, #20
 800b57c:	46bd      	mov	sp, r7
 800b57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b582:	4770      	bx	lr
 800b584:	00030d40 	.word	0x00030d40

0800b588 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b588:	b480      	push	{r7}
 800b58a:	b085      	sub	sp, #20
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b590:	2300      	movs	r3, #0
 800b592:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	3301      	adds	r3, #1
 800b598:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	4a11      	ldr	r2, [pc, #68]	; (800b5e4 <USB_FlushRxFifo+0x5c>)
 800b59e:	4293      	cmp	r3, r2
 800b5a0:	d901      	bls.n	800b5a6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b5a2:	2303      	movs	r3, #3
 800b5a4:	e018      	b.n	800b5d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	691b      	ldr	r3, [r3, #16]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	daf2      	bge.n	800b594 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2210      	movs	r2, #16
 800b5b6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	3301      	adds	r3, #1
 800b5bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	4a08      	ldr	r2, [pc, #32]	; (800b5e4 <USB_FlushRxFifo+0x5c>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d901      	bls.n	800b5ca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b5c6:	2303      	movs	r3, #3
 800b5c8:	e006      	b.n	800b5d8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	691b      	ldr	r3, [r3, #16]
 800b5ce:	f003 0310 	and.w	r3, r3, #16
 800b5d2:	2b10      	cmp	r3, #16
 800b5d4:	d0f0      	beq.n	800b5b8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b5d6:	2300      	movs	r3, #0
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	3714      	adds	r7, #20
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr
 800b5e4:	00030d40 	.word	0x00030d40

0800b5e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b085      	sub	sp, #20
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
 800b5f0:	460b      	mov	r3, r1
 800b5f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5fe:	681a      	ldr	r2, [r3, #0]
 800b600:	78fb      	ldrb	r3, [r7, #3]
 800b602:	68f9      	ldr	r1, [r7, #12]
 800b604:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b608:	4313      	orrs	r3, r2
 800b60a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b60c:	2300      	movs	r3, #0
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3714      	adds	r7, #20
 800b612:	46bd      	mov	sp, r7
 800b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b618:	4770      	bx	lr

0800b61a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b61a:	b480      	push	{r7}
 800b61c:	b085      	sub	sp, #20
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	68fa      	ldr	r2, [r7, #12]
 800b630:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b634:	f023 0303 	bic.w	r3, r3, #3
 800b638:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	68fa      	ldr	r2, [r7, #12]
 800b644:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b648:	f043 0302 	orr.w	r3, r3, #2
 800b64c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b64e:	2300      	movs	r3, #0
}
 800b650:	4618      	mov	r0, r3
 800b652:	3714      	adds	r7, #20
 800b654:	46bd      	mov	sp, r7
 800b656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b65a:	4770      	bx	lr

0800b65c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b083      	sub	sp, #12
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	695b      	ldr	r3, [r3, #20]
 800b668:	f003 0301 	and.w	r3, r3, #1
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	370c      	adds	r7, #12
 800b670:	46bd      	mov	sp, r7
 800b672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b676:	4770      	bx	lr

0800b678 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b678:	b480      	push	{r7}
 800b67a:	b085      	sub	sp, #20
 800b67c:	af00      	add	r7, sp, #0
 800b67e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b680:	2300      	movs	r3, #0
 800b682:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	3301      	adds	r3, #1
 800b688:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	4a13      	ldr	r2, [pc, #76]	; (800b6dc <USB_CoreReset+0x64>)
 800b68e:	4293      	cmp	r3, r2
 800b690:	d901      	bls.n	800b696 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b692:	2303      	movs	r3, #3
 800b694:	e01b      	b.n	800b6ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	691b      	ldr	r3, [r3, #16]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	daf2      	bge.n	800b684 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	691b      	ldr	r3, [r3, #16]
 800b6a6:	f043 0201 	orr.w	r2, r3, #1
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	4a09      	ldr	r2, [pc, #36]	; (800b6dc <USB_CoreReset+0x64>)
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d901      	bls.n	800b6c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b6bc:	2303      	movs	r3, #3
 800b6be:	e006      	b.n	800b6ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	691b      	ldr	r3, [r3, #16]
 800b6c4:	f003 0301 	and.w	r3, r3, #1
 800b6c8:	2b01      	cmp	r3, #1
 800b6ca:	d0f0      	beq.n	800b6ae <USB_CoreReset+0x36>

  return HAL_OK;
 800b6cc:	2300      	movs	r3, #0
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3714      	adds	r7, #20
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d8:	4770      	bx	lr
 800b6da:	bf00      	nop
 800b6dc:	00030d40 	.word	0x00030d40

0800b6e0 <__errno>:
 800b6e0:	4b01      	ldr	r3, [pc, #4]	; (800b6e8 <__errno+0x8>)
 800b6e2:	6818      	ldr	r0, [r3, #0]
 800b6e4:	4770      	bx	lr
 800b6e6:	bf00      	nop
 800b6e8:	2000000c 	.word	0x2000000c

0800b6ec <__libc_init_array>:
 800b6ec:	b570      	push	{r4, r5, r6, lr}
 800b6ee:	4d0d      	ldr	r5, [pc, #52]	; (800b724 <__libc_init_array+0x38>)
 800b6f0:	2600      	movs	r6, #0
 800b6f2:	4c0d      	ldr	r4, [pc, #52]	; (800b728 <__libc_init_array+0x3c>)
 800b6f4:	1b64      	subs	r4, r4, r5
 800b6f6:	10a4      	asrs	r4, r4, #2
 800b6f8:	42a6      	cmp	r6, r4
 800b6fa:	d109      	bne.n	800b710 <__libc_init_array+0x24>
 800b6fc:	4d0b      	ldr	r5, [pc, #44]	; (800b72c <__libc_init_array+0x40>)
 800b6fe:	2600      	movs	r6, #0
 800b700:	4c0b      	ldr	r4, [pc, #44]	; (800b730 <__libc_init_array+0x44>)
 800b702:	f001 ff2f 	bl	800d564 <_init>
 800b706:	1b64      	subs	r4, r4, r5
 800b708:	10a4      	asrs	r4, r4, #2
 800b70a:	42a6      	cmp	r6, r4
 800b70c:	d105      	bne.n	800b71a <__libc_init_array+0x2e>
 800b70e:	bd70      	pop	{r4, r5, r6, pc}
 800b710:	f855 3b04 	ldr.w	r3, [r5], #4
 800b714:	3601      	adds	r6, #1
 800b716:	4798      	blx	r3
 800b718:	e7ee      	b.n	800b6f8 <__libc_init_array+0xc>
 800b71a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b71e:	3601      	adds	r6, #1
 800b720:	4798      	blx	r3
 800b722:	e7f2      	b.n	800b70a <__libc_init_array+0x1e>
 800b724:	0800d7c0 	.word	0x0800d7c0
 800b728:	0800d7c0 	.word	0x0800d7c0
 800b72c:	0800d7c0 	.word	0x0800d7c0
 800b730:	0800d7c4 	.word	0x0800d7c4

0800b734 <memset>:
 800b734:	4402      	add	r2, r0
 800b736:	4603      	mov	r3, r0
 800b738:	4293      	cmp	r3, r2
 800b73a:	d100      	bne.n	800b73e <memset+0xa>
 800b73c:	4770      	bx	lr
 800b73e:	f803 1b01 	strb.w	r1, [r3], #1
 800b742:	e7f9      	b.n	800b738 <memset+0x4>

0800b744 <iprintf>:
 800b744:	b40f      	push	{r0, r1, r2, r3}
 800b746:	4b0a      	ldr	r3, [pc, #40]	; (800b770 <iprintf+0x2c>)
 800b748:	b513      	push	{r0, r1, r4, lr}
 800b74a:	681c      	ldr	r4, [r3, #0]
 800b74c:	b124      	cbz	r4, 800b758 <iprintf+0x14>
 800b74e:	69a3      	ldr	r3, [r4, #24]
 800b750:	b913      	cbnz	r3, 800b758 <iprintf+0x14>
 800b752:	4620      	mov	r0, r4
 800b754:	f000 f8b8 	bl	800b8c8 <__sinit>
 800b758:	ab05      	add	r3, sp, #20
 800b75a:	9a04      	ldr	r2, [sp, #16]
 800b75c:	68a1      	ldr	r1, [r4, #8]
 800b75e:	4620      	mov	r0, r4
 800b760:	9301      	str	r3, [sp, #4]
 800b762:	f000 fa0f 	bl	800bb84 <_vfiprintf_r>
 800b766:	b002      	add	sp, #8
 800b768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b76c:	b004      	add	sp, #16
 800b76e:	4770      	bx	lr
 800b770:	2000000c 	.word	0x2000000c

0800b774 <strncmp>:
 800b774:	b510      	push	{r4, lr}
 800b776:	b17a      	cbz	r2, 800b798 <strncmp+0x24>
 800b778:	4603      	mov	r3, r0
 800b77a:	3901      	subs	r1, #1
 800b77c:	1884      	adds	r4, r0, r2
 800b77e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b782:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b786:	4290      	cmp	r0, r2
 800b788:	d101      	bne.n	800b78e <strncmp+0x1a>
 800b78a:	42a3      	cmp	r3, r4
 800b78c:	d101      	bne.n	800b792 <strncmp+0x1e>
 800b78e:	1a80      	subs	r0, r0, r2
 800b790:	bd10      	pop	{r4, pc}
 800b792:	2800      	cmp	r0, #0
 800b794:	d1f3      	bne.n	800b77e <strncmp+0xa>
 800b796:	e7fa      	b.n	800b78e <strncmp+0x1a>
 800b798:	4610      	mov	r0, r2
 800b79a:	e7f9      	b.n	800b790 <strncmp+0x1c>

0800b79c <strncpy>:
 800b79c:	3901      	subs	r1, #1
 800b79e:	4603      	mov	r3, r0
 800b7a0:	b510      	push	{r4, lr}
 800b7a2:	b132      	cbz	r2, 800b7b2 <strncpy+0x16>
 800b7a4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b7a8:	3a01      	subs	r2, #1
 800b7aa:	f803 4b01 	strb.w	r4, [r3], #1
 800b7ae:	2c00      	cmp	r4, #0
 800b7b0:	d1f7      	bne.n	800b7a2 <strncpy+0x6>
 800b7b2:	441a      	add	r2, r3
 800b7b4:	2100      	movs	r1, #0
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d100      	bne.n	800b7bc <strncpy+0x20>
 800b7ba:	bd10      	pop	{r4, pc}
 800b7bc:	f803 1b01 	strb.w	r1, [r3], #1
 800b7c0:	e7f9      	b.n	800b7b6 <strncpy+0x1a>

0800b7c2 <__strtok_r>:
 800b7c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7c4:	b908      	cbnz	r0, 800b7ca <__strtok_r+0x8>
 800b7c6:	6810      	ldr	r0, [r2, #0]
 800b7c8:	b188      	cbz	r0, 800b7ee <__strtok_r+0x2c>
 800b7ca:	4604      	mov	r4, r0
 800b7cc:	4620      	mov	r0, r4
 800b7ce:	460f      	mov	r7, r1
 800b7d0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b7d4:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b7d8:	b91e      	cbnz	r6, 800b7e2 <__strtok_r+0x20>
 800b7da:	b965      	cbnz	r5, 800b7f6 <__strtok_r+0x34>
 800b7dc:	4628      	mov	r0, r5
 800b7de:	6015      	str	r5, [r2, #0]
 800b7e0:	e005      	b.n	800b7ee <__strtok_r+0x2c>
 800b7e2:	42b5      	cmp	r5, r6
 800b7e4:	d1f6      	bne.n	800b7d4 <__strtok_r+0x12>
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d1f0      	bne.n	800b7cc <__strtok_r+0xa>
 800b7ea:	6014      	str	r4, [r2, #0]
 800b7ec:	7003      	strb	r3, [r0, #0]
 800b7ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7f0:	461c      	mov	r4, r3
 800b7f2:	e00c      	b.n	800b80e <__strtok_r+0x4c>
 800b7f4:	b915      	cbnz	r5, 800b7fc <__strtok_r+0x3a>
 800b7f6:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b7fa:	460e      	mov	r6, r1
 800b7fc:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b800:	42ab      	cmp	r3, r5
 800b802:	d1f7      	bne.n	800b7f4 <__strtok_r+0x32>
 800b804:	2b00      	cmp	r3, #0
 800b806:	d0f3      	beq.n	800b7f0 <__strtok_r+0x2e>
 800b808:	2300      	movs	r3, #0
 800b80a:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b80e:	6014      	str	r4, [r2, #0]
 800b810:	e7ed      	b.n	800b7ee <__strtok_r+0x2c>

0800b812 <strtok_r>:
 800b812:	2301      	movs	r3, #1
 800b814:	f7ff bfd5 	b.w	800b7c2 <__strtok_r>

0800b818 <std>:
 800b818:	2300      	movs	r3, #0
 800b81a:	b510      	push	{r4, lr}
 800b81c:	4604      	mov	r4, r0
 800b81e:	6083      	str	r3, [r0, #8]
 800b820:	8181      	strh	r1, [r0, #12]
 800b822:	4619      	mov	r1, r3
 800b824:	6643      	str	r3, [r0, #100]	; 0x64
 800b826:	81c2      	strh	r2, [r0, #14]
 800b828:	2208      	movs	r2, #8
 800b82a:	6183      	str	r3, [r0, #24]
 800b82c:	e9c0 3300 	strd	r3, r3, [r0]
 800b830:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b834:	305c      	adds	r0, #92	; 0x5c
 800b836:	f7ff ff7d 	bl	800b734 <memset>
 800b83a:	4b05      	ldr	r3, [pc, #20]	; (800b850 <std+0x38>)
 800b83c:	6224      	str	r4, [r4, #32]
 800b83e:	6263      	str	r3, [r4, #36]	; 0x24
 800b840:	4b04      	ldr	r3, [pc, #16]	; (800b854 <std+0x3c>)
 800b842:	62a3      	str	r3, [r4, #40]	; 0x28
 800b844:	4b04      	ldr	r3, [pc, #16]	; (800b858 <std+0x40>)
 800b846:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b848:	4b04      	ldr	r3, [pc, #16]	; (800b85c <std+0x44>)
 800b84a:	6323      	str	r3, [r4, #48]	; 0x30
 800b84c:	bd10      	pop	{r4, pc}
 800b84e:	bf00      	nop
 800b850:	0800c131 	.word	0x0800c131
 800b854:	0800c153 	.word	0x0800c153
 800b858:	0800c18b 	.word	0x0800c18b
 800b85c:	0800c1af 	.word	0x0800c1af

0800b860 <_cleanup_r>:
 800b860:	4901      	ldr	r1, [pc, #4]	; (800b868 <_cleanup_r+0x8>)
 800b862:	f000 b8af 	b.w	800b9c4 <_fwalk_reent>
 800b866:	bf00      	nop
 800b868:	0800c485 	.word	0x0800c485

0800b86c <__sfmoreglue>:
 800b86c:	b570      	push	{r4, r5, r6, lr}
 800b86e:	2268      	movs	r2, #104	; 0x68
 800b870:	1e4d      	subs	r5, r1, #1
 800b872:	460e      	mov	r6, r1
 800b874:	4355      	muls	r5, r2
 800b876:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b87a:	f000 f8e5 	bl	800ba48 <_malloc_r>
 800b87e:	4604      	mov	r4, r0
 800b880:	b140      	cbz	r0, 800b894 <__sfmoreglue+0x28>
 800b882:	2100      	movs	r1, #0
 800b884:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b888:	e9c0 1600 	strd	r1, r6, [r0]
 800b88c:	300c      	adds	r0, #12
 800b88e:	60a0      	str	r0, [r4, #8]
 800b890:	f7ff ff50 	bl	800b734 <memset>
 800b894:	4620      	mov	r0, r4
 800b896:	bd70      	pop	{r4, r5, r6, pc}

0800b898 <__sfp_lock_acquire>:
 800b898:	4801      	ldr	r0, [pc, #4]	; (800b8a0 <__sfp_lock_acquire+0x8>)
 800b89a:	f000 b8b3 	b.w	800ba04 <__retarget_lock_acquire_recursive>
 800b89e:	bf00      	nop
 800b8a0:	200009d1 	.word	0x200009d1

0800b8a4 <__sfp_lock_release>:
 800b8a4:	4801      	ldr	r0, [pc, #4]	; (800b8ac <__sfp_lock_release+0x8>)
 800b8a6:	f000 b8ae 	b.w	800ba06 <__retarget_lock_release_recursive>
 800b8aa:	bf00      	nop
 800b8ac:	200009d1 	.word	0x200009d1

0800b8b0 <__sinit_lock_acquire>:
 800b8b0:	4801      	ldr	r0, [pc, #4]	; (800b8b8 <__sinit_lock_acquire+0x8>)
 800b8b2:	f000 b8a7 	b.w	800ba04 <__retarget_lock_acquire_recursive>
 800b8b6:	bf00      	nop
 800b8b8:	200009d2 	.word	0x200009d2

0800b8bc <__sinit_lock_release>:
 800b8bc:	4801      	ldr	r0, [pc, #4]	; (800b8c4 <__sinit_lock_release+0x8>)
 800b8be:	f000 b8a2 	b.w	800ba06 <__retarget_lock_release_recursive>
 800b8c2:	bf00      	nop
 800b8c4:	200009d2 	.word	0x200009d2

0800b8c8 <__sinit>:
 800b8c8:	b510      	push	{r4, lr}
 800b8ca:	4604      	mov	r4, r0
 800b8cc:	f7ff fff0 	bl	800b8b0 <__sinit_lock_acquire>
 800b8d0:	69a3      	ldr	r3, [r4, #24]
 800b8d2:	b11b      	cbz	r3, 800b8dc <__sinit+0x14>
 800b8d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b8d8:	f7ff bff0 	b.w	800b8bc <__sinit_lock_release>
 800b8dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b8e0:	6523      	str	r3, [r4, #80]	; 0x50
 800b8e2:	4620      	mov	r0, r4
 800b8e4:	4b12      	ldr	r3, [pc, #72]	; (800b930 <__sinit+0x68>)
 800b8e6:	4a13      	ldr	r2, [pc, #76]	; (800b934 <__sinit+0x6c>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	62a2      	str	r2, [r4, #40]	; 0x28
 800b8ec:	42a3      	cmp	r3, r4
 800b8ee:	bf04      	itt	eq
 800b8f0:	2301      	moveq	r3, #1
 800b8f2:	61a3      	streq	r3, [r4, #24]
 800b8f4:	f000 f820 	bl	800b938 <__sfp>
 800b8f8:	6060      	str	r0, [r4, #4]
 800b8fa:	4620      	mov	r0, r4
 800b8fc:	f000 f81c 	bl	800b938 <__sfp>
 800b900:	60a0      	str	r0, [r4, #8]
 800b902:	4620      	mov	r0, r4
 800b904:	f000 f818 	bl	800b938 <__sfp>
 800b908:	2200      	movs	r2, #0
 800b90a:	2104      	movs	r1, #4
 800b90c:	60e0      	str	r0, [r4, #12]
 800b90e:	6860      	ldr	r0, [r4, #4]
 800b910:	f7ff ff82 	bl	800b818 <std>
 800b914:	2201      	movs	r2, #1
 800b916:	2109      	movs	r1, #9
 800b918:	68a0      	ldr	r0, [r4, #8]
 800b91a:	f7ff ff7d 	bl	800b818 <std>
 800b91e:	2202      	movs	r2, #2
 800b920:	2112      	movs	r1, #18
 800b922:	68e0      	ldr	r0, [r4, #12]
 800b924:	f7ff ff78 	bl	800b818 <std>
 800b928:	2301      	movs	r3, #1
 800b92a:	61a3      	str	r3, [r4, #24]
 800b92c:	e7d2      	b.n	800b8d4 <__sinit+0xc>
 800b92e:	bf00      	nop
 800b930:	0800d6ec 	.word	0x0800d6ec
 800b934:	0800b861 	.word	0x0800b861

0800b938 <__sfp>:
 800b938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b93a:	4607      	mov	r7, r0
 800b93c:	f7ff ffac 	bl	800b898 <__sfp_lock_acquire>
 800b940:	4b1e      	ldr	r3, [pc, #120]	; (800b9bc <__sfp+0x84>)
 800b942:	681e      	ldr	r6, [r3, #0]
 800b944:	69b3      	ldr	r3, [r6, #24]
 800b946:	b913      	cbnz	r3, 800b94e <__sfp+0x16>
 800b948:	4630      	mov	r0, r6
 800b94a:	f7ff ffbd 	bl	800b8c8 <__sinit>
 800b94e:	3648      	adds	r6, #72	; 0x48
 800b950:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b954:	3b01      	subs	r3, #1
 800b956:	d503      	bpl.n	800b960 <__sfp+0x28>
 800b958:	6833      	ldr	r3, [r6, #0]
 800b95a:	b30b      	cbz	r3, 800b9a0 <__sfp+0x68>
 800b95c:	6836      	ldr	r6, [r6, #0]
 800b95e:	e7f7      	b.n	800b950 <__sfp+0x18>
 800b960:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b964:	b9d5      	cbnz	r5, 800b99c <__sfp+0x64>
 800b966:	4b16      	ldr	r3, [pc, #88]	; (800b9c0 <__sfp+0x88>)
 800b968:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b96c:	6665      	str	r5, [r4, #100]	; 0x64
 800b96e:	60e3      	str	r3, [r4, #12]
 800b970:	f000 f847 	bl	800ba02 <__retarget_lock_init_recursive>
 800b974:	f7ff ff96 	bl	800b8a4 <__sfp_lock_release>
 800b978:	2208      	movs	r2, #8
 800b97a:	4629      	mov	r1, r5
 800b97c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b980:	6025      	str	r5, [r4, #0]
 800b982:	61a5      	str	r5, [r4, #24]
 800b984:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b988:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b98c:	f7ff fed2 	bl	800b734 <memset>
 800b990:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b994:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b998:	4620      	mov	r0, r4
 800b99a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b99c:	3468      	adds	r4, #104	; 0x68
 800b99e:	e7d9      	b.n	800b954 <__sfp+0x1c>
 800b9a0:	2104      	movs	r1, #4
 800b9a2:	4638      	mov	r0, r7
 800b9a4:	f7ff ff62 	bl	800b86c <__sfmoreglue>
 800b9a8:	4604      	mov	r4, r0
 800b9aa:	6030      	str	r0, [r6, #0]
 800b9ac:	2800      	cmp	r0, #0
 800b9ae:	d1d5      	bne.n	800b95c <__sfp+0x24>
 800b9b0:	f7ff ff78 	bl	800b8a4 <__sfp_lock_release>
 800b9b4:	230c      	movs	r3, #12
 800b9b6:	603b      	str	r3, [r7, #0]
 800b9b8:	e7ee      	b.n	800b998 <__sfp+0x60>
 800b9ba:	bf00      	nop
 800b9bc:	0800d6ec 	.word	0x0800d6ec
 800b9c0:	ffff0001 	.word	0xffff0001

0800b9c4 <_fwalk_reent>:
 800b9c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9c8:	4606      	mov	r6, r0
 800b9ca:	4688      	mov	r8, r1
 800b9cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b9d0:	2700      	movs	r7, #0
 800b9d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b9d6:	f1b9 0901 	subs.w	r9, r9, #1
 800b9da:	d505      	bpl.n	800b9e8 <_fwalk_reent+0x24>
 800b9dc:	6824      	ldr	r4, [r4, #0]
 800b9de:	2c00      	cmp	r4, #0
 800b9e0:	d1f7      	bne.n	800b9d2 <_fwalk_reent+0xe>
 800b9e2:	4638      	mov	r0, r7
 800b9e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9e8:	89ab      	ldrh	r3, [r5, #12]
 800b9ea:	2b01      	cmp	r3, #1
 800b9ec:	d907      	bls.n	800b9fe <_fwalk_reent+0x3a>
 800b9ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	d003      	beq.n	800b9fe <_fwalk_reent+0x3a>
 800b9f6:	4629      	mov	r1, r5
 800b9f8:	4630      	mov	r0, r6
 800b9fa:	47c0      	blx	r8
 800b9fc:	4307      	orrs	r7, r0
 800b9fe:	3568      	adds	r5, #104	; 0x68
 800ba00:	e7e9      	b.n	800b9d6 <_fwalk_reent+0x12>

0800ba02 <__retarget_lock_init_recursive>:
 800ba02:	4770      	bx	lr

0800ba04 <__retarget_lock_acquire_recursive>:
 800ba04:	4770      	bx	lr

0800ba06 <__retarget_lock_release_recursive>:
 800ba06:	4770      	bx	lr

0800ba08 <sbrk_aligned>:
 800ba08:	b570      	push	{r4, r5, r6, lr}
 800ba0a:	4e0e      	ldr	r6, [pc, #56]	; (800ba44 <sbrk_aligned+0x3c>)
 800ba0c:	460c      	mov	r4, r1
 800ba0e:	4605      	mov	r5, r0
 800ba10:	6831      	ldr	r1, [r6, #0]
 800ba12:	b911      	cbnz	r1, 800ba1a <sbrk_aligned+0x12>
 800ba14:	f000 fb7c 	bl	800c110 <_sbrk_r>
 800ba18:	6030      	str	r0, [r6, #0]
 800ba1a:	4621      	mov	r1, r4
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	f000 fb77 	bl	800c110 <_sbrk_r>
 800ba22:	1c43      	adds	r3, r0, #1
 800ba24:	d00a      	beq.n	800ba3c <sbrk_aligned+0x34>
 800ba26:	1cc4      	adds	r4, r0, #3
 800ba28:	f024 0403 	bic.w	r4, r4, #3
 800ba2c:	42a0      	cmp	r0, r4
 800ba2e:	d007      	beq.n	800ba40 <sbrk_aligned+0x38>
 800ba30:	1a21      	subs	r1, r4, r0
 800ba32:	4628      	mov	r0, r5
 800ba34:	f000 fb6c 	bl	800c110 <_sbrk_r>
 800ba38:	3001      	adds	r0, #1
 800ba3a:	d101      	bne.n	800ba40 <sbrk_aligned+0x38>
 800ba3c:	f04f 34ff 	mov.w	r4, #4294967295
 800ba40:	4620      	mov	r0, r4
 800ba42:	bd70      	pop	{r4, r5, r6, pc}
 800ba44:	200009d8 	.word	0x200009d8

0800ba48 <_malloc_r>:
 800ba48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba4c:	1ccd      	adds	r5, r1, #3
 800ba4e:	4607      	mov	r7, r0
 800ba50:	f025 0503 	bic.w	r5, r5, #3
 800ba54:	3508      	adds	r5, #8
 800ba56:	2d0c      	cmp	r5, #12
 800ba58:	bf38      	it	cc
 800ba5a:	250c      	movcc	r5, #12
 800ba5c:	2d00      	cmp	r5, #0
 800ba5e:	db01      	blt.n	800ba64 <_malloc_r+0x1c>
 800ba60:	42a9      	cmp	r1, r5
 800ba62:	d905      	bls.n	800ba70 <_malloc_r+0x28>
 800ba64:	230c      	movs	r3, #12
 800ba66:	2600      	movs	r6, #0
 800ba68:	603b      	str	r3, [r7, #0]
 800ba6a:	4630      	mov	r0, r6
 800ba6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba70:	4e2e      	ldr	r6, [pc, #184]	; (800bb2c <_malloc_r+0xe4>)
 800ba72:	f000 fdc9 	bl	800c608 <__malloc_lock>
 800ba76:	6833      	ldr	r3, [r6, #0]
 800ba78:	461c      	mov	r4, r3
 800ba7a:	bb34      	cbnz	r4, 800baca <_malloc_r+0x82>
 800ba7c:	4629      	mov	r1, r5
 800ba7e:	4638      	mov	r0, r7
 800ba80:	f7ff ffc2 	bl	800ba08 <sbrk_aligned>
 800ba84:	1c43      	adds	r3, r0, #1
 800ba86:	4604      	mov	r4, r0
 800ba88:	d14d      	bne.n	800bb26 <_malloc_r+0xde>
 800ba8a:	6834      	ldr	r4, [r6, #0]
 800ba8c:	4626      	mov	r6, r4
 800ba8e:	2e00      	cmp	r6, #0
 800ba90:	d140      	bne.n	800bb14 <_malloc_r+0xcc>
 800ba92:	6823      	ldr	r3, [r4, #0]
 800ba94:	4631      	mov	r1, r6
 800ba96:	4638      	mov	r0, r7
 800ba98:	eb04 0803 	add.w	r8, r4, r3
 800ba9c:	f000 fb38 	bl	800c110 <_sbrk_r>
 800baa0:	4580      	cmp	r8, r0
 800baa2:	d13a      	bne.n	800bb1a <_malloc_r+0xd2>
 800baa4:	6821      	ldr	r1, [r4, #0]
 800baa6:	3503      	adds	r5, #3
 800baa8:	4638      	mov	r0, r7
 800baaa:	1a6d      	subs	r5, r5, r1
 800baac:	f025 0503 	bic.w	r5, r5, #3
 800bab0:	3508      	adds	r5, #8
 800bab2:	2d0c      	cmp	r5, #12
 800bab4:	bf38      	it	cc
 800bab6:	250c      	movcc	r5, #12
 800bab8:	4629      	mov	r1, r5
 800baba:	f7ff ffa5 	bl	800ba08 <sbrk_aligned>
 800babe:	3001      	adds	r0, #1
 800bac0:	d02b      	beq.n	800bb1a <_malloc_r+0xd2>
 800bac2:	6823      	ldr	r3, [r4, #0]
 800bac4:	442b      	add	r3, r5
 800bac6:	6023      	str	r3, [r4, #0]
 800bac8:	e00e      	b.n	800bae8 <_malloc_r+0xa0>
 800baca:	6822      	ldr	r2, [r4, #0]
 800bacc:	1b52      	subs	r2, r2, r5
 800bace:	d41e      	bmi.n	800bb0e <_malloc_r+0xc6>
 800bad0:	2a0b      	cmp	r2, #11
 800bad2:	d916      	bls.n	800bb02 <_malloc_r+0xba>
 800bad4:	1961      	adds	r1, r4, r5
 800bad6:	42a3      	cmp	r3, r4
 800bad8:	6025      	str	r5, [r4, #0]
 800bada:	bf18      	it	ne
 800badc:	6059      	strne	r1, [r3, #4]
 800bade:	6863      	ldr	r3, [r4, #4]
 800bae0:	bf08      	it	eq
 800bae2:	6031      	streq	r1, [r6, #0]
 800bae4:	5162      	str	r2, [r4, r5]
 800bae6:	604b      	str	r3, [r1, #4]
 800bae8:	f104 060b 	add.w	r6, r4, #11
 800baec:	4638      	mov	r0, r7
 800baee:	f000 fd91 	bl	800c614 <__malloc_unlock>
 800baf2:	1d23      	adds	r3, r4, #4
 800baf4:	f026 0607 	bic.w	r6, r6, #7
 800baf8:	1af2      	subs	r2, r6, r3
 800bafa:	d0b6      	beq.n	800ba6a <_malloc_r+0x22>
 800bafc:	1b9b      	subs	r3, r3, r6
 800bafe:	50a3      	str	r3, [r4, r2]
 800bb00:	e7b3      	b.n	800ba6a <_malloc_r+0x22>
 800bb02:	6862      	ldr	r2, [r4, #4]
 800bb04:	42a3      	cmp	r3, r4
 800bb06:	bf0c      	ite	eq
 800bb08:	6032      	streq	r2, [r6, #0]
 800bb0a:	605a      	strne	r2, [r3, #4]
 800bb0c:	e7ec      	b.n	800bae8 <_malloc_r+0xa0>
 800bb0e:	4623      	mov	r3, r4
 800bb10:	6864      	ldr	r4, [r4, #4]
 800bb12:	e7b2      	b.n	800ba7a <_malloc_r+0x32>
 800bb14:	4634      	mov	r4, r6
 800bb16:	6876      	ldr	r6, [r6, #4]
 800bb18:	e7b9      	b.n	800ba8e <_malloc_r+0x46>
 800bb1a:	230c      	movs	r3, #12
 800bb1c:	4638      	mov	r0, r7
 800bb1e:	603b      	str	r3, [r7, #0]
 800bb20:	f000 fd78 	bl	800c614 <__malloc_unlock>
 800bb24:	e7a1      	b.n	800ba6a <_malloc_r+0x22>
 800bb26:	6025      	str	r5, [r4, #0]
 800bb28:	e7de      	b.n	800bae8 <_malloc_r+0xa0>
 800bb2a:	bf00      	nop
 800bb2c:	200009d4 	.word	0x200009d4

0800bb30 <__sfputc_r>:
 800bb30:	6893      	ldr	r3, [r2, #8]
 800bb32:	3b01      	subs	r3, #1
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	6093      	str	r3, [r2, #8]
 800bb38:	b410      	push	{r4}
 800bb3a:	da08      	bge.n	800bb4e <__sfputc_r+0x1e>
 800bb3c:	6994      	ldr	r4, [r2, #24]
 800bb3e:	42a3      	cmp	r3, r4
 800bb40:	db01      	blt.n	800bb46 <__sfputc_r+0x16>
 800bb42:	290a      	cmp	r1, #10
 800bb44:	d103      	bne.n	800bb4e <__sfputc_r+0x1e>
 800bb46:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb4a:	f000 bb35 	b.w	800c1b8 <__swbuf_r>
 800bb4e:	6813      	ldr	r3, [r2, #0]
 800bb50:	1c58      	adds	r0, r3, #1
 800bb52:	6010      	str	r0, [r2, #0]
 800bb54:	4608      	mov	r0, r1
 800bb56:	7019      	strb	r1, [r3, #0]
 800bb58:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb5c:	4770      	bx	lr

0800bb5e <__sfputs_r>:
 800bb5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb60:	4606      	mov	r6, r0
 800bb62:	460f      	mov	r7, r1
 800bb64:	4614      	mov	r4, r2
 800bb66:	18d5      	adds	r5, r2, r3
 800bb68:	42ac      	cmp	r4, r5
 800bb6a:	d101      	bne.n	800bb70 <__sfputs_r+0x12>
 800bb6c:	2000      	movs	r0, #0
 800bb6e:	e007      	b.n	800bb80 <__sfputs_r+0x22>
 800bb70:	463a      	mov	r2, r7
 800bb72:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb76:	4630      	mov	r0, r6
 800bb78:	f7ff ffda 	bl	800bb30 <__sfputc_r>
 800bb7c:	1c43      	adds	r3, r0, #1
 800bb7e:	d1f3      	bne.n	800bb68 <__sfputs_r+0xa>
 800bb80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb84 <_vfiprintf_r>:
 800bb84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb88:	460d      	mov	r5, r1
 800bb8a:	b09d      	sub	sp, #116	; 0x74
 800bb8c:	4614      	mov	r4, r2
 800bb8e:	4698      	mov	r8, r3
 800bb90:	4606      	mov	r6, r0
 800bb92:	b118      	cbz	r0, 800bb9c <_vfiprintf_r+0x18>
 800bb94:	6983      	ldr	r3, [r0, #24]
 800bb96:	b90b      	cbnz	r3, 800bb9c <_vfiprintf_r+0x18>
 800bb98:	f7ff fe96 	bl	800b8c8 <__sinit>
 800bb9c:	4b89      	ldr	r3, [pc, #548]	; (800bdc4 <_vfiprintf_r+0x240>)
 800bb9e:	429d      	cmp	r5, r3
 800bba0:	d11b      	bne.n	800bbda <_vfiprintf_r+0x56>
 800bba2:	6875      	ldr	r5, [r6, #4]
 800bba4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bba6:	07d9      	lsls	r1, r3, #31
 800bba8:	d405      	bmi.n	800bbb6 <_vfiprintf_r+0x32>
 800bbaa:	89ab      	ldrh	r3, [r5, #12]
 800bbac:	059a      	lsls	r2, r3, #22
 800bbae:	d402      	bmi.n	800bbb6 <_vfiprintf_r+0x32>
 800bbb0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbb2:	f7ff ff27 	bl	800ba04 <__retarget_lock_acquire_recursive>
 800bbb6:	89ab      	ldrh	r3, [r5, #12]
 800bbb8:	071b      	lsls	r3, r3, #28
 800bbba:	d501      	bpl.n	800bbc0 <_vfiprintf_r+0x3c>
 800bbbc:	692b      	ldr	r3, [r5, #16]
 800bbbe:	b9eb      	cbnz	r3, 800bbfc <_vfiprintf_r+0x78>
 800bbc0:	4629      	mov	r1, r5
 800bbc2:	4630      	mov	r0, r6
 800bbc4:	f000 fb5c 	bl	800c280 <__swsetup_r>
 800bbc8:	b1c0      	cbz	r0, 800bbfc <_vfiprintf_r+0x78>
 800bbca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbcc:	07dc      	lsls	r4, r3, #31
 800bbce:	d50e      	bpl.n	800bbee <_vfiprintf_r+0x6a>
 800bbd0:	f04f 30ff 	mov.w	r0, #4294967295
 800bbd4:	b01d      	add	sp, #116	; 0x74
 800bbd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbda:	4b7b      	ldr	r3, [pc, #492]	; (800bdc8 <_vfiprintf_r+0x244>)
 800bbdc:	429d      	cmp	r5, r3
 800bbde:	d101      	bne.n	800bbe4 <_vfiprintf_r+0x60>
 800bbe0:	68b5      	ldr	r5, [r6, #8]
 800bbe2:	e7df      	b.n	800bba4 <_vfiprintf_r+0x20>
 800bbe4:	4b79      	ldr	r3, [pc, #484]	; (800bdcc <_vfiprintf_r+0x248>)
 800bbe6:	429d      	cmp	r5, r3
 800bbe8:	bf08      	it	eq
 800bbea:	68f5      	ldreq	r5, [r6, #12]
 800bbec:	e7da      	b.n	800bba4 <_vfiprintf_r+0x20>
 800bbee:	89ab      	ldrh	r3, [r5, #12]
 800bbf0:	0598      	lsls	r0, r3, #22
 800bbf2:	d4ed      	bmi.n	800bbd0 <_vfiprintf_r+0x4c>
 800bbf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbf6:	f7ff ff06 	bl	800ba06 <__retarget_lock_release_recursive>
 800bbfa:	e7e9      	b.n	800bbd0 <_vfiprintf_r+0x4c>
 800bbfc:	2300      	movs	r3, #0
 800bbfe:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc02:	f04f 0901 	mov.w	r9, #1
 800bc06:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 800bdd0 <_vfiprintf_r+0x24c>
 800bc0a:	9309      	str	r3, [sp, #36]	; 0x24
 800bc0c:	2320      	movs	r3, #32
 800bc0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc12:	2330      	movs	r3, #48	; 0x30
 800bc14:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc18:	4623      	mov	r3, r4
 800bc1a:	469a      	mov	sl, r3
 800bc1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc20:	b10a      	cbz	r2, 800bc26 <_vfiprintf_r+0xa2>
 800bc22:	2a25      	cmp	r2, #37	; 0x25
 800bc24:	d1f9      	bne.n	800bc1a <_vfiprintf_r+0x96>
 800bc26:	ebba 0b04 	subs.w	fp, sl, r4
 800bc2a:	d00b      	beq.n	800bc44 <_vfiprintf_r+0xc0>
 800bc2c:	465b      	mov	r3, fp
 800bc2e:	4622      	mov	r2, r4
 800bc30:	4629      	mov	r1, r5
 800bc32:	4630      	mov	r0, r6
 800bc34:	f7ff ff93 	bl	800bb5e <__sfputs_r>
 800bc38:	3001      	adds	r0, #1
 800bc3a:	f000 80aa 	beq.w	800bd92 <_vfiprintf_r+0x20e>
 800bc3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc40:	445a      	add	r2, fp
 800bc42:	9209      	str	r2, [sp, #36]	; 0x24
 800bc44:	f89a 3000 	ldrb.w	r3, [sl]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	f000 80a2 	beq.w	800bd92 <_vfiprintf_r+0x20e>
 800bc4e:	2300      	movs	r3, #0
 800bc50:	f04f 32ff 	mov.w	r2, #4294967295
 800bc54:	f10a 0a01 	add.w	sl, sl, #1
 800bc58:	9304      	str	r3, [sp, #16]
 800bc5a:	9307      	str	r3, [sp, #28]
 800bc5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc60:	931a      	str	r3, [sp, #104]	; 0x68
 800bc62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc66:	4654      	mov	r4, sl
 800bc68:	2205      	movs	r2, #5
 800bc6a:	4859      	ldr	r0, [pc, #356]	; (800bdd0 <_vfiprintf_r+0x24c>)
 800bc6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc70:	f000 fcbc 	bl	800c5ec <memchr>
 800bc74:	9a04      	ldr	r2, [sp, #16]
 800bc76:	b9d8      	cbnz	r0, 800bcb0 <_vfiprintf_r+0x12c>
 800bc78:	06d1      	lsls	r1, r2, #27
 800bc7a:	bf44      	itt	mi
 800bc7c:	2320      	movmi	r3, #32
 800bc7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc82:	0713      	lsls	r3, r2, #28
 800bc84:	bf44      	itt	mi
 800bc86:	232b      	movmi	r3, #43	; 0x2b
 800bc88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc8c:	f89a 3000 	ldrb.w	r3, [sl]
 800bc90:	2b2a      	cmp	r3, #42	; 0x2a
 800bc92:	d015      	beq.n	800bcc0 <_vfiprintf_r+0x13c>
 800bc94:	9a07      	ldr	r2, [sp, #28]
 800bc96:	4654      	mov	r4, sl
 800bc98:	2000      	movs	r0, #0
 800bc9a:	f04f 0c0a 	mov.w	ip, #10
 800bc9e:	4621      	mov	r1, r4
 800bca0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bca4:	3b30      	subs	r3, #48	; 0x30
 800bca6:	2b09      	cmp	r3, #9
 800bca8:	d94e      	bls.n	800bd48 <_vfiprintf_r+0x1c4>
 800bcaa:	b1b0      	cbz	r0, 800bcda <_vfiprintf_r+0x156>
 800bcac:	9207      	str	r2, [sp, #28]
 800bcae:	e014      	b.n	800bcda <_vfiprintf_r+0x156>
 800bcb0:	eba0 0308 	sub.w	r3, r0, r8
 800bcb4:	46a2      	mov	sl, r4
 800bcb6:	fa09 f303 	lsl.w	r3, r9, r3
 800bcba:	4313      	orrs	r3, r2
 800bcbc:	9304      	str	r3, [sp, #16]
 800bcbe:	e7d2      	b.n	800bc66 <_vfiprintf_r+0xe2>
 800bcc0:	9b03      	ldr	r3, [sp, #12]
 800bcc2:	1d19      	adds	r1, r3, #4
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	9103      	str	r1, [sp, #12]
 800bcca:	bfbb      	ittet	lt
 800bccc:	425b      	neglt	r3, r3
 800bcce:	f042 0202 	orrlt.w	r2, r2, #2
 800bcd2:	9307      	strge	r3, [sp, #28]
 800bcd4:	9307      	strlt	r3, [sp, #28]
 800bcd6:	bfb8      	it	lt
 800bcd8:	9204      	strlt	r2, [sp, #16]
 800bcda:	7823      	ldrb	r3, [r4, #0]
 800bcdc:	2b2e      	cmp	r3, #46	; 0x2e
 800bcde:	d10c      	bne.n	800bcfa <_vfiprintf_r+0x176>
 800bce0:	7863      	ldrb	r3, [r4, #1]
 800bce2:	2b2a      	cmp	r3, #42	; 0x2a
 800bce4:	d135      	bne.n	800bd52 <_vfiprintf_r+0x1ce>
 800bce6:	9b03      	ldr	r3, [sp, #12]
 800bce8:	3402      	adds	r4, #2
 800bcea:	1d1a      	adds	r2, r3, #4
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	2b00      	cmp	r3, #0
 800bcf0:	9203      	str	r2, [sp, #12]
 800bcf2:	bfb8      	it	lt
 800bcf4:	f04f 33ff 	movlt.w	r3, #4294967295
 800bcf8:	9305      	str	r3, [sp, #20]
 800bcfa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bde0 <_vfiprintf_r+0x25c>
 800bcfe:	2203      	movs	r2, #3
 800bd00:	7821      	ldrb	r1, [r4, #0]
 800bd02:	4650      	mov	r0, sl
 800bd04:	f000 fc72 	bl	800c5ec <memchr>
 800bd08:	b140      	cbz	r0, 800bd1c <_vfiprintf_r+0x198>
 800bd0a:	2340      	movs	r3, #64	; 0x40
 800bd0c:	eba0 000a 	sub.w	r0, r0, sl
 800bd10:	3401      	adds	r4, #1
 800bd12:	fa03 f000 	lsl.w	r0, r3, r0
 800bd16:	9b04      	ldr	r3, [sp, #16]
 800bd18:	4303      	orrs	r3, r0
 800bd1a:	9304      	str	r3, [sp, #16]
 800bd1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd20:	2206      	movs	r2, #6
 800bd22:	482c      	ldr	r0, [pc, #176]	; (800bdd4 <_vfiprintf_r+0x250>)
 800bd24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd28:	f000 fc60 	bl	800c5ec <memchr>
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	d03f      	beq.n	800bdb0 <_vfiprintf_r+0x22c>
 800bd30:	4b29      	ldr	r3, [pc, #164]	; (800bdd8 <_vfiprintf_r+0x254>)
 800bd32:	bb1b      	cbnz	r3, 800bd7c <_vfiprintf_r+0x1f8>
 800bd34:	9b03      	ldr	r3, [sp, #12]
 800bd36:	3307      	adds	r3, #7
 800bd38:	f023 0307 	bic.w	r3, r3, #7
 800bd3c:	3308      	adds	r3, #8
 800bd3e:	9303      	str	r3, [sp, #12]
 800bd40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd42:	443b      	add	r3, r7
 800bd44:	9309      	str	r3, [sp, #36]	; 0x24
 800bd46:	e767      	b.n	800bc18 <_vfiprintf_r+0x94>
 800bd48:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd4c:	460c      	mov	r4, r1
 800bd4e:	2001      	movs	r0, #1
 800bd50:	e7a5      	b.n	800bc9e <_vfiprintf_r+0x11a>
 800bd52:	2300      	movs	r3, #0
 800bd54:	3401      	adds	r4, #1
 800bd56:	f04f 0c0a 	mov.w	ip, #10
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	9305      	str	r3, [sp, #20]
 800bd5e:	4620      	mov	r0, r4
 800bd60:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd64:	3a30      	subs	r2, #48	; 0x30
 800bd66:	2a09      	cmp	r2, #9
 800bd68:	d903      	bls.n	800bd72 <_vfiprintf_r+0x1ee>
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d0c5      	beq.n	800bcfa <_vfiprintf_r+0x176>
 800bd6e:	9105      	str	r1, [sp, #20]
 800bd70:	e7c3      	b.n	800bcfa <_vfiprintf_r+0x176>
 800bd72:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd76:	4604      	mov	r4, r0
 800bd78:	2301      	movs	r3, #1
 800bd7a:	e7f0      	b.n	800bd5e <_vfiprintf_r+0x1da>
 800bd7c:	ab03      	add	r3, sp, #12
 800bd7e:	462a      	mov	r2, r5
 800bd80:	a904      	add	r1, sp, #16
 800bd82:	4630      	mov	r0, r6
 800bd84:	9300      	str	r3, [sp, #0]
 800bd86:	4b15      	ldr	r3, [pc, #84]	; (800bddc <_vfiprintf_r+0x258>)
 800bd88:	e000      	b.n	800bd8c <_vfiprintf_r+0x208>
 800bd8a:	bf00      	nop
 800bd8c:	4607      	mov	r7, r0
 800bd8e:	1c78      	adds	r0, r7, #1
 800bd90:	d1d6      	bne.n	800bd40 <_vfiprintf_r+0x1bc>
 800bd92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd94:	07d9      	lsls	r1, r3, #31
 800bd96:	d405      	bmi.n	800bda4 <_vfiprintf_r+0x220>
 800bd98:	89ab      	ldrh	r3, [r5, #12]
 800bd9a:	059a      	lsls	r2, r3, #22
 800bd9c:	d402      	bmi.n	800bda4 <_vfiprintf_r+0x220>
 800bd9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bda0:	f7ff fe31 	bl	800ba06 <__retarget_lock_release_recursive>
 800bda4:	89ab      	ldrh	r3, [r5, #12]
 800bda6:	065b      	lsls	r3, r3, #25
 800bda8:	f53f af12 	bmi.w	800bbd0 <_vfiprintf_r+0x4c>
 800bdac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdae:	e711      	b.n	800bbd4 <_vfiprintf_r+0x50>
 800bdb0:	ab03      	add	r3, sp, #12
 800bdb2:	462a      	mov	r2, r5
 800bdb4:	a904      	add	r1, sp, #16
 800bdb6:	4630      	mov	r0, r6
 800bdb8:	9300      	str	r3, [sp, #0]
 800bdba:	4b08      	ldr	r3, [pc, #32]	; (800bddc <_vfiprintf_r+0x258>)
 800bdbc:	f000 f882 	bl	800bec4 <_printf_i>
 800bdc0:	e7e4      	b.n	800bd8c <_vfiprintf_r+0x208>
 800bdc2:	bf00      	nop
 800bdc4:	0800d710 	.word	0x0800d710
 800bdc8:	0800d730 	.word	0x0800d730
 800bdcc:	0800d6f0 	.word	0x0800d6f0
 800bdd0:	0800d750 	.word	0x0800d750
 800bdd4:	0800d75a 	.word	0x0800d75a
 800bdd8:	00000000 	.word	0x00000000
 800bddc:	0800bb5f 	.word	0x0800bb5f
 800bde0:	0800d756 	.word	0x0800d756

0800bde4 <_printf_common>:
 800bde4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bde8:	4616      	mov	r6, r2
 800bdea:	4699      	mov	r9, r3
 800bdec:	688a      	ldr	r2, [r1, #8]
 800bdee:	4607      	mov	r7, r0
 800bdf0:	690b      	ldr	r3, [r1, #16]
 800bdf2:	460c      	mov	r4, r1
 800bdf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	bfb8      	it	lt
 800bdfc:	4613      	movlt	r3, r2
 800bdfe:	6033      	str	r3, [r6, #0]
 800be00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800be04:	b10a      	cbz	r2, 800be0a <_printf_common+0x26>
 800be06:	3301      	adds	r3, #1
 800be08:	6033      	str	r3, [r6, #0]
 800be0a:	6823      	ldr	r3, [r4, #0]
 800be0c:	0699      	lsls	r1, r3, #26
 800be0e:	bf42      	ittt	mi
 800be10:	6833      	ldrmi	r3, [r6, #0]
 800be12:	3302      	addmi	r3, #2
 800be14:	6033      	strmi	r3, [r6, #0]
 800be16:	6825      	ldr	r5, [r4, #0]
 800be18:	f015 0506 	ands.w	r5, r5, #6
 800be1c:	d106      	bne.n	800be2c <_printf_common+0x48>
 800be1e:	f104 0a19 	add.w	sl, r4, #25
 800be22:	68e3      	ldr	r3, [r4, #12]
 800be24:	6832      	ldr	r2, [r6, #0]
 800be26:	1a9b      	subs	r3, r3, r2
 800be28:	42ab      	cmp	r3, r5
 800be2a:	dc29      	bgt.n	800be80 <_printf_common+0x9c>
 800be2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800be30:	1e13      	subs	r3, r2, #0
 800be32:	6822      	ldr	r2, [r4, #0]
 800be34:	bf18      	it	ne
 800be36:	2301      	movne	r3, #1
 800be38:	0692      	lsls	r2, r2, #26
 800be3a:	d42e      	bmi.n	800be9a <_printf_common+0xb6>
 800be3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be40:	4649      	mov	r1, r9
 800be42:	4638      	mov	r0, r7
 800be44:	47c0      	blx	r8
 800be46:	3001      	adds	r0, #1
 800be48:	d021      	beq.n	800be8e <_printf_common+0xaa>
 800be4a:	6823      	ldr	r3, [r4, #0]
 800be4c:	341a      	adds	r4, #26
 800be4e:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 800be52:	f003 0306 	and.w	r3, r3, #6
 800be56:	6832      	ldr	r2, [r6, #0]
 800be58:	2600      	movs	r6, #0
 800be5a:	2b04      	cmp	r3, #4
 800be5c:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800be60:	bf08      	it	eq
 800be62:	1aad      	subeq	r5, r5, r2
 800be64:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800be68:	bf14      	ite	ne
 800be6a:	2500      	movne	r5, #0
 800be6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be70:	4293      	cmp	r3, r2
 800be72:	bfc4      	itt	gt
 800be74:	1a9b      	subgt	r3, r3, r2
 800be76:	18ed      	addgt	r5, r5, r3
 800be78:	42b5      	cmp	r5, r6
 800be7a:	d11a      	bne.n	800beb2 <_printf_common+0xce>
 800be7c:	2000      	movs	r0, #0
 800be7e:	e008      	b.n	800be92 <_printf_common+0xae>
 800be80:	2301      	movs	r3, #1
 800be82:	4652      	mov	r2, sl
 800be84:	4649      	mov	r1, r9
 800be86:	4638      	mov	r0, r7
 800be88:	47c0      	blx	r8
 800be8a:	3001      	adds	r0, #1
 800be8c:	d103      	bne.n	800be96 <_printf_common+0xb2>
 800be8e:	f04f 30ff 	mov.w	r0, #4294967295
 800be92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be96:	3501      	adds	r5, #1
 800be98:	e7c3      	b.n	800be22 <_printf_common+0x3e>
 800be9a:	18e1      	adds	r1, r4, r3
 800be9c:	1c5a      	adds	r2, r3, #1
 800be9e:	2030      	movs	r0, #48	; 0x30
 800bea0:	3302      	adds	r3, #2
 800bea2:	4422      	add	r2, r4
 800bea4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bea8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800beac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800beb0:	e7c4      	b.n	800be3c <_printf_common+0x58>
 800beb2:	2301      	movs	r3, #1
 800beb4:	4622      	mov	r2, r4
 800beb6:	4649      	mov	r1, r9
 800beb8:	4638      	mov	r0, r7
 800beba:	47c0      	blx	r8
 800bebc:	3001      	adds	r0, #1
 800bebe:	d0e6      	beq.n	800be8e <_printf_common+0xaa>
 800bec0:	3601      	adds	r6, #1
 800bec2:	e7d9      	b.n	800be78 <_printf_common+0x94>

0800bec4 <_printf_i>:
 800bec4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bec8:	7e0f      	ldrb	r7, [r1, #24]
 800beca:	4691      	mov	r9, r2
 800becc:	4680      	mov	r8, r0
 800bece:	460c      	mov	r4, r1
 800bed0:	2f78      	cmp	r7, #120	; 0x78
 800bed2:	469a      	mov	sl, r3
 800bed4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bed6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800beda:	d807      	bhi.n	800beec <_printf_i+0x28>
 800bedc:	2f62      	cmp	r7, #98	; 0x62
 800bede:	d80a      	bhi.n	800bef6 <_printf_i+0x32>
 800bee0:	2f00      	cmp	r7, #0
 800bee2:	f000 80d8 	beq.w	800c096 <_printf_i+0x1d2>
 800bee6:	2f58      	cmp	r7, #88	; 0x58
 800bee8:	f000 80a3 	beq.w	800c032 <_printf_i+0x16e>
 800beec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bef0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bef4:	e03a      	b.n	800bf6c <_printf_i+0xa8>
 800bef6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800befa:	2b15      	cmp	r3, #21
 800befc:	d8f6      	bhi.n	800beec <_printf_i+0x28>
 800befe:	a101      	add	r1, pc, #4	; (adr r1, 800bf04 <_printf_i+0x40>)
 800bf00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bf04:	0800bf5d 	.word	0x0800bf5d
 800bf08:	0800bf71 	.word	0x0800bf71
 800bf0c:	0800beed 	.word	0x0800beed
 800bf10:	0800beed 	.word	0x0800beed
 800bf14:	0800beed 	.word	0x0800beed
 800bf18:	0800beed 	.word	0x0800beed
 800bf1c:	0800bf71 	.word	0x0800bf71
 800bf20:	0800beed 	.word	0x0800beed
 800bf24:	0800beed 	.word	0x0800beed
 800bf28:	0800beed 	.word	0x0800beed
 800bf2c:	0800beed 	.word	0x0800beed
 800bf30:	0800c07d 	.word	0x0800c07d
 800bf34:	0800bfa1 	.word	0x0800bfa1
 800bf38:	0800c05f 	.word	0x0800c05f
 800bf3c:	0800beed 	.word	0x0800beed
 800bf40:	0800beed 	.word	0x0800beed
 800bf44:	0800c09f 	.word	0x0800c09f
 800bf48:	0800beed 	.word	0x0800beed
 800bf4c:	0800bfa1 	.word	0x0800bfa1
 800bf50:	0800beed 	.word	0x0800beed
 800bf54:	0800beed 	.word	0x0800beed
 800bf58:	0800c067 	.word	0x0800c067
 800bf5c:	682b      	ldr	r3, [r5, #0]
 800bf5e:	1d1a      	adds	r2, r3, #4
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	602a      	str	r2, [r5, #0]
 800bf64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bf68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	e0a3      	b.n	800c0b8 <_printf_i+0x1f4>
 800bf70:	6820      	ldr	r0, [r4, #0]
 800bf72:	6829      	ldr	r1, [r5, #0]
 800bf74:	0606      	lsls	r6, r0, #24
 800bf76:	f101 0304 	add.w	r3, r1, #4
 800bf7a:	d50a      	bpl.n	800bf92 <_printf_i+0xce>
 800bf7c:	680e      	ldr	r6, [r1, #0]
 800bf7e:	602b      	str	r3, [r5, #0]
 800bf80:	2e00      	cmp	r6, #0
 800bf82:	da03      	bge.n	800bf8c <_printf_i+0xc8>
 800bf84:	232d      	movs	r3, #45	; 0x2d
 800bf86:	4276      	negs	r6, r6
 800bf88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf8c:	485e      	ldr	r0, [pc, #376]	; (800c108 <_printf_i+0x244>)
 800bf8e:	230a      	movs	r3, #10
 800bf90:	e019      	b.n	800bfc6 <_printf_i+0x102>
 800bf92:	680e      	ldr	r6, [r1, #0]
 800bf94:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bf98:	602b      	str	r3, [r5, #0]
 800bf9a:	bf18      	it	ne
 800bf9c:	b236      	sxthne	r6, r6
 800bf9e:	e7ef      	b.n	800bf80 <_printf_i+0xbc>
 800bfa0:	682b      	ldr	r3, [r5, #0]
 800bfa2:	6820      	ldr	r0, [r4, #0]
 800bfa4:	1d19      	adds	r1, r3, #4
 800bfa6:	6029      	str	r1, [r5, #0]
 800bfa8:	0601      	lsls	r1, r0, #24
 800bfaa:	d501      	bpl.n	800bfb0 <_printf_i+0xec>
 800bfac:	681e      	ldr	r6, [r3, #0]
 800bfae:	e002      	b.n	800bfb6 <_printf_i+0xf2>
 800bfb0:	0646      	lsls	r6, r0, #25
 800bfb2:	d5fb      	bpl.n	800bfac <_printf_i+0xe8>
 800bfb4:	881e      	ldrh	r6, [r3, #0]
 800bfb6:	2f6f      	cmp	r7, #111	; 0x6f
 800bfb8:	4853      	ldr	r0, [pc, #332]	; (800c108 <_printf_i+0x244>)
 800bfba:	bf0c      	ite	eq
 800bfbc:	2308      	moveq	r3, #8
 800bfbe:	230a      	movne	r3, #10
 800bfc0:	2100      	movs	r1, #0
 800bfc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bfc6:	6865      	ldr	r5, [r4, #4]
 800bfc8:	2d00      	cmp	r5, #0
 800bfca:	60a5      	str	r5, [r4, #8]
 800bfcc:	bfa2      	ittt	ge
 800bfce:	6821      	ldrge	r1, [r4, #0]
 800bfd0:	f021 0104 	bicge.w	r1, r1, #4
 800bfd4:	6021      	strge	r1, [r4, #0]
 800bfd6:	b90e      	cbnz	r6, 800bfdc <_printf_i+0x118>
 800bfd8:	2d00      	cmp	r5, #0
 800bfda:	d04d      	beq.n	800c078 <_printf_i+0x1b4>
 800bfdc:	4615      	mov	r5, r2
 800bfde:	fbb6 f1f3 	udiv	r1, r6, r3
 800bfe2:	fb03 6711 	mls	r7, r3, r1, r6
 800bfe6:	5dc7      	ldrb	r7, [r0, r7]
 800bfe8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bfec:	4637      	mov	r7, r6
 800bfee:	460e      	mov	r6, r1
 800bff0:	42bb      	cmp	r3, r7
 800bff2:	d9f4      	bls.n	800bfde <_printf_i+0x11a>
 800bff4:	2b08      	cmp	r3, #8
 800bff6:	d10b      	bne.n	800c010 <_printf_i+0x14c>
 800bff8:	6823      	ldr	r3, [r4, #0]
 800bffa:	07de      	lsls	r6, r3, #31
 800bffc:	d508      	bpl.n	800c010 <_printf_i+0x14c>
 800bffe:	6923      	ldr	r3, [r4, #16]
 800c000:	6861      	ldr	r1, [r4, #4]
 800c002:	4299      	cmp	r1, r3
 800c004:	bfde      	ittt	le
 800c006:	2330      	movle	r3, #48	; 0x30
 800c008:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c00c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c010:	1b52      	subs	r2, r2, r5
 800c012:	6122      	str	r2, [r4, #16]
 800c014:	464b      	mov	r3, r9
 800c016:	aa03      	add	r2, sp, #12
 800c018:	4621      	mov	r1, r4
 800c01a:	4640      	mov	r0, r8
 800c01c:	f8cd a000 	str.w	sl, [sp]
 800c020:	f7ff fee0 	bl	800bde4 <_printf_common>
 800c024:	3001      	adds	r0, #1
 800c026:	d14c      	bne.n	800c0c2 <_printf_i+0x1fe>
 800c028:	f04f 30ff 	mov.w	r0, #4294967295
 800c02c:	b004      	add	sp, #16
 800c02e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c032:	4835      	ldr	r0, [pc, #212]	; (800c108 <_printf_i+0x244>)
 800c034:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c038:	6829      	ldr	r1, [r5, #0]
 800c03a:	6823      	ldr	r3, [r4, #0]
 800c03c:	f851 6b04 	ldr.w	r6, [r1], #4
 800c040:	6029      	str	r1, [r5, #0]
 800c042:	061d      	lsls	r5, r3, #24
 800c044:	d514      	bpl.n	800c070 <_printf_i+0x1ac>
 800c046:	07df      	lsls	r7, r3, #31
 800c048:	bf44      	itt	mi
 800c04a:	f043 0320 	orrmi.w	r3, r3, #32
 800c04e:	6023      	strmi	r3, [r4, #0]
 800c050:	b91e      	cbnz	r6, 800c05a <_printf_i+0x196>
 800c052:	6823      	ldr	r3, [r4, #0]
 800c054:	f023 0320 	bic.w	r3, r3, #32
 800c058:	6023      	str	r3, [r4, #0]
 800c05a:	2310      	movs	r3, #16
 800c05c:	e7b0      	b.n	800bfc0 <_printf_i+0xfc>
 800c05e:	6823      	ldr	r3, [r4, #0]
 800c060:	f043 0320 	orr.w	r3, r3, #32
 800c064:	6023      	str	r3, [r4, #0]
 800c066:	2378      	movs	r3, #120	; 0x78
 800c068:	4828      	ldr	r0, [pc, #160]	; (800c10c <_printf_i+0x248>)
 800c06a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c06e:	e7e3      	b.n	800c038 <_printf_i+0x174>
 800c070:	0659      	lsls	r1, r3, #25
 800c072:	bf48      	it	mi
 800c074:	b2b6      	uxthmi	r6, r6
 800c076:	e7e6      	b.n	800c046 <_printf_i+0x182>
 800c078:	4615      	mov	r5, r2
 800c07a:	e7bb      	b.n	800bff4 <_printf_i+0x130>
 800c07c:	682b      	ldr	r3, [r5, #0]
 800c07e:	6826      	ldr	r6, [r4, #0]
 800c080:	1d18      	adds	r0, r3, #4
 800c082:	6961      	ldr	r1, [r4, #20]
 800c084:	6028      	str	r0, [r5, #0]
 800c086:	0635      	lsls	r5, r6, #24
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	d501      	bpl.n	800c090 <_printf_i+0x1cc>
 800c08c:	6019      	str	r1, [r3, #0]
 800c08e:	e002      	b.n	800c096 <_printf_i+0x1d2>
 800c090:	0670      	lsls	r0, r6, #25
 800c092:	d5fb      	bpl.n	800c08c <_printf_i+0x1c8>
 800c094:	8019      	strh	r1, [r3, #0]
 800c096:	2300      	movs	r3, #0
 800c098:	4615      	mov	r5, r2
 800c09a:	6123      	str	r3, [r4, #16]
 800c09c:	e7ba      	b.n	800c014 <_printf_i+0x150>
 800c09e:	682b      	ldr	r3, [r5, #0]
 800c0a0:	2100      	movs	r1, #0
 800c0a2:	1d1a      	adds	r2, r3, #4
 800c0a4:	602a      	str	r2, [r5, #0]
 800c0a6:	681d      	ldr	r5, [r3, #0]
 800c0a8:	6862      	ldr	r2, [r4, #4]
 800c0aa:	4628      	mov	r0, r5
 800c0ac:	f000 fa9e 	bl	800c5ec <memchr>
 800c0b0:	b108      	cbz	r0, 800c0b6 <_printf_i+0x1f2>
 800c0b2:	1b40      	subs	r0, r0, r5
 800c0b4:	6060      	str	r0, [r4, #4]
 800c0b6:	6863      	ldr	r3, [r4, #4]
 800c0b8:	6123      	str	r3, [r4, #16]
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0c0:	e7a8      	b.n	800c014 <_printf_i+0x150>
 800c0c2:	6923      	ldr	r3, [r4, #16]
 800c0c4:	462a      	mov	r2, r5
 800c0c6:	4649      	mov	r1, r9
 800c0c8:	4640      	mov	r0, r8
 800c0ca:	47d0      	blx	sl
 800c0cc:	3001      	adds	r0, #1
 800c0ce:	d0ab      	beq.n	800c028 <_printf_i+0x164>
 800c0d0:	6823      	ldr	r3, [r4, #0]
 800c0d2:	079b      	lsls	r3, r3, #30
 800c0d4:	d413      	bmi.n	800c0fe <_printf_i+0x23a>
 800c0d6:	68e0      	ldr	r0, [r4, #12]
 800c0d8:	9b03      	ldr	r3, [sp, #12]
 800c0da:	4298      	cmp	r0, r3
 800c0dc:	bfb8      	it	lt
 800c0de:	4618      	movlt	r0, r3
 800c0e0:	e7a4      	b.n	800c02c <_printf_i+0x168>
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	4632      	mov	r2, r6
 800c0e6:	4649      	mov	r1, r9
 800c0e8:	4640      	mov	r0, r8
 800c0ea:	47d0      	blx	sl
 800c0ec:	3001      	adds	r0, #1
 800c0ee:	d09b      	beq.n	800c028 <_printf_i+0x164>
 800c0f0:	3501      	adds	r5, #1
 800c0f2:	68e3      	ldr	r3, [r4, #12]
 800c0f4:	9903      	ldr	r1, [sp, #12]
 800c0f6:	1a5b      	subs	r3, r3, r1
 800c0f8:	42ab      	cmp	r3, r5
 800c0fa:	dcf2      	bgt.n	800c0e2 <_printf_i+0x21e>
 800c0fc:	e7eb      	b.n	800c0d6 <_printf_i+0x212>
 800c0fe:	2500      	movs	r5, #0
 800c100:	f104 0619 	add.w	r6, r4, #25
 800c104:	e7f5      	b.n	800c0f2 <_printf_i+0x22e>
 800c106:	bf00      	nop
 800c108:	0800d761 	.word	0x0800d761
 800c10c:	0800d772 	.word	0x0800d772

0800c110 <_sbrk_r>:
 800c110:	b538      	push	{r3, r4, r5, lr}
 800c112:	2300      	movs	r3, #0
 800c114:	4d05      	ldr	r5, [pc, #20]	; (800c12c <_sbrk_r+0x1c>)
 800c116:	4604      	mov	r4, r0
 800c118:	4608      	mov	r0, r1
 800c11a:	602b      	str	r3, [r5, #0]
 800c11c:	f7f6 fd02 	bl	8002b24 <_sbrk>
 800c120:	1c43      	adds	r3, r0, #1
 800c122:	d102      	bne.n	800c12a <_sbrk_r+0x1a>
 800c124:	682b      	ldr	r3, [r5, #0]
 800c126:	b103      	cbz	r3, 800c12a <_sbrk_r+0x1a>
 800c128:	6023      	str	r3, [r4, #0]
 800c12a:	bd38      	pop	{r3, r4, r5, pc}
 800c12c:	200009dc 	.word	0x200009dc

0800c130 <__sread>:
 800c130:	b510      	push	{r4, lr}
 800c132:	460c      	mov	r4, r1
 800c134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c138:	f000 fabe 	bl	800c6b8 <_read_r>
 800c13c:	2800      	cmp	r0, #0
 800c13e:	bfab      	itete	ge
 800c140:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c142:	89a3      	ldrhlt	r3, [r4, #12]
 800c144:	181b      	addge	r3, r3, r0
 800c146:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c14a:	bfac      	ite	ge
 800c14c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c14e:	81a3      	strhlt	r3, [r4, #12]
 800c150:	bd10      	pop	{r4, pc}

0800c152 <__swrite>:
 800c152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c156:	461f      	mov	r7, r3
 800c158:	898b      	ldrh	r3, [r1, #12]
 800c15a:	4605      	mov	r5, r0
 800c15c:	460c      	mov	r4, r1
 800c15e:	05db      	lsls	r3, r3, #23
 800c160:	4616      	mov	r6, r2
 800c162:	d505      	bpl.n	800c170 <__swrite+0x1e>
 800c164:	2302      	movs	r3, #2
 800c166:	2200      	movs	r2, #0
 800c168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c16c:	f000 f9c6 	bl	800c4fc <_lseek_r>
 800c170:	89a3      	ldrh	r3, [r4, #12]
 800c172:	4632      	mov	r2, r6
 800c174:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c178:	4628      	mov	r0, r5
 800c17a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c17e:	81a3      	strh	r3, [r4, #12]
 800c180:	463b      	mov	r3, r7
 800c182:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c186:	f000 b869 	b.w	800c25c <_write_r>

0800c18a <__sseek>:
 800c18a:	b510      	push	{r4, lr}
 800c18c:	460c      	mov	r4, r1
 800c18e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c192:	f000 f9b3 	bl	800c4fc <_lseek_r>
 800c196:	1c43      	adds	r3, r0, #1
 800c198:	89a3      	ldrh	r3, [r4, #12]
 800c19a:	bf15      	itete	ne
 800c19c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c19e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c1a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c1a6:	81a3      	strheq	r3, [r4, #12]
 800c1a8:	bf18      	it	ne
 800c1aa:	81a3      	strhne	r3, [r4, #12]
 800c1ac:	bd10      	pop	{r4, pc}

0800c1ae <__sclose>:
 800c1ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1b2:	f000 b8d3 	b.w	800c35c <_close_r>
	...

0800c1b8 <__swbuf_r>:
 800c1b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1ba:	460e      	mov	r6, r1
 800c1bc:	4614      	mov	r4, r2
 800c1be:	4605      	mov	r5, r0
 800c1c0:	b118      	cbz	r0, 800c1ca <__swbuf_r+0x12>
 800c1c2:	6983      	ldr	r3, [r0, #24]
 800c1c4:	b90b      	cbnz	r3, 800c1ca <__swbuf_r+0x12>
 800c1c6:	f7ff fb7f 	bl	800b8c8 <__sinit>
 800c1ca:	4b21      	ldr	r3, [pc, #132]	; (800c250 <__swbuf_r+0x98>)
 800c1cc:	429c      	cmp	r4, r3
 800c1ce:	d12b      	bne.n	800c228 <__swbuf_r+0x70>
 800c1d0:	686c      	ldr	r4, [r5, #4]
 800c1d2:	69a3      	ldr	r3, [r4, #24]
 800c1d4:	60a3      	str	r3, [r4, #8]
 800c1d6:	89a3      	ldrh	r3, [r4, #12]
 800c1d8:	071a      	lsls	r2, r3, #28
 800c1da:	d52f      	bpl.n	800c23c <__swbuf_r+0x84>
 800c1dc:	6923      	ldr	r3, [r4, #16]
 800c1de:	b36b      	cbz	r3, 800c23c <__swbuf_r+0x84>
 800c1e0:	6923      	ldr	r3, [r4, #16]
 800c1e2:	b2f6      	uxtb	r6, r6
 800c1e4:	6820      	ldr	r0, [r4, #0]
 800c1e6:	4637      	mov	r7, r6
 800c1e8:	1ac0      	subs	r0, r0, r3
 800c1ea:	6963      	ldr	r3, [r4, #20]
 800c1ec:	4283      	cmp	r3, r0
 800c1ee:	dc04      	bgt.n	800c1fa <__swbuf_r+0x42>
 800c1f0:	4621      	mov	r1, r4
 800c1f2:	4628      	mov	r0, r5
 800c1f4:	f000 f946 	bl	800c484 <_fflush_r>
 800c1f8:	bb30      	cbnz	r0, 800c248 <__swbuf_r+0x90>
 800c1fa:	68a3      	ldr	r3, [r4, #8]
 800c1fc:	3001      	adds	r0, #1
 800c1fe:	3b01      	subs	r3, #1
 800c200:	60a3      	str	r3, [r4, #8]
 800c202:	6823      	ldr	r3, [r4, #0]
 800c204:	1c5a      	adds	r2, r3, #1
 800c206:	6022      	str	r2, [r4, #0]
 800c208:	701e      	strb	r6, [r3, #0]
 800c20a:	6963      	ldr	r3, [r4, #20]
 800c20c:	4283      	cmp	r3, r0
 800c20e:	d004      	beq.n	800c21a <__swbuf_r+0x62>
 800c210:	89a3      	ldrh	r3, [r4, #12]
 800c212:	07db      	lsls	r3, r3, #31
 800c214:	d506      	bpl.n	800c224 <__swbuf_r+0x6c>
 800c216:	2e0a      	cmp	r6, #10
 800c218:	d104      	bne.n	800c224 <__swbuf_r+0x6c>
 800c21a:	4621      	mov	r1, r4
 800c21c:	4628      	mov	r0, r5
 800c21e:	f000 f931 	bl	800c484 <_fflush_r>
 800c222:	b988      	cbnz	r0, 800c248 <__swbuf_r+0x90>
 800c224:	4638      	mov	r0, r7
 800c226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c228:	4b0a      	ldr	r3, [pc, #40]	; (800c254 <__swbuf_r+0x9c>)
 800c22a:	429c      	cmp	r4, r3
 800c22c:	d101      	bne.n	800c232 <__swbuf_r+0x7a>
 800c22e:	68ac      	ldr	r4, [r5, #8]
 800c230:	e7cf      	b.n	800c1d2 <__swbuf_r+0x1a>
 800c232:	4b09      	ldr	r3, [pc, #36]	; (800c258 <__swbuf_r+0xa0>)
 800c234:	429c      	cmp	r4, r3
 800c236:	bf08      	it	eq
 800c238:	68ec      	ldreq	r4, [r5, #12]
 800c23a:	e7ca      	b.n	800c1d2 <__swbuf_r+0x1a>
 800c23c:	4621      	mov	r1, r4
 800c23e:	4628      	mov	r0, r5
 800c240:	f000 f81e 	bl	800c280 <__swsetup_r>
 800c244:	2800      	cmp	r0, #0
 800c246:	d0cb      	beq.n	800c1e0 <__swbuf_r+0x28>
 800c248:	f04f 37ff 	mov.w	r7, #4294967295
 800c24c:	e7ea      	b.n	800c224 <__swbuf_r+0x6c>
 800c24e:	bf00      	nop
 800c250:	0800d710 	.word	0x0800d710
 800c254:	0800d730 	.word	0x0800d730
 800c258:	0800d6f0 	.word	0x0800d6f0

0800c25c <_write_r>:
 800c25c:	b538      	push	{r3, r4, r5, lr}
 800c25e:	4604      	mov	r4, r0
 800c260:	4d06      	ldr	r5, [pc, #24]	; (800c27c <_write_r+0x20>)
 800c262:	4608      	mov	r0, r1
 800c264:	4611      	mov	r1, r2
 800c266:	2200      	movs	r2, #0
 800c268:	602a      	str	r2, [r5, #0]
 800c26a:	461a      	mov	r2, r3
 800c26c:	f7f6 fc09 	bl	8002a82 <_write>
 800c270:	1c43      	adds	r3, r0, #1
 800c272:	d102      	bne.n	800c27a <_write_r+0x1e>
 800c274:	682b      	ldr	r3, [r5, #0]
 800c276:	b103      	cbz	r3, 800c27a <_write_r+0x1e>
 800c278:	6023      	str	r3, [r4, #0]
 800c27a:	bd38      	pop	{r3, r4, r5, pc}
 800c27c:	200009dc 	.word	0x200009dc

0800c280 <__swsetup_r>:
 800c280:	4b32      	ldr	r3, [pc, #200]	; (800c34c <__swsetup_r+0xcc>)
 800c282:	b570      	push	{r4, r5, r6, lr}
 800c284:	681d      	ldr	r5, [r3, #0]
 800c286:	4606      	mov	r6, r0
 800c288:	460c      	mov	r4, r1
 800c28a:	b125      	cbz	r5, 800c296 <__swsetup_r+0x16>
 800c28c:	69ab      	ldr	r3, [r5, #24]
 800c28e:	b913      	cbnz	r3, 800c296 <__swsetup_r+0x16>
 800c290:	4628      	mov	r0, r5
 800c292:	f7ff fb19 	bl	800b8c8 <__sinit>
 800c296:	4b2e      	ldr	r3, [pc, #184]	; (800c350 <__swsetup_r+0xd0>)
 800c298:	429c      	cmp	r4, r3
 800c29a:	d10f      	bne.n	800c2bc <__swsetup_r+0x3c>
 800c29c:	686c      	ldr	r4, [r5, #4]
 800c29e:	89a3      	ldrh	r3, [r4, #12]
 800c2a0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c2a4:	0719      	lsls	r1, r3, #28
 800c2a6:	d42c      	bmi.n	800c302 <__swsetup_r+0x82>
 800c2a8:	06dd      	lsls	r5, r3, #27
 800c2aa:	d411      	bmi.n	800c2d0 <__swsetup_r+0x50>
 800c2ac:	2309      	movs	r3, #9
 800c2ae:	6033      	str	r3, [r6, #0]
 800c2b0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c2b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c2b8:	81a3      	strh	r3, [r4, #12]
 800c2ba:	e03e      	b.n	800c33a <__swsetup_r+0xba>
 800c2bc:	4b25      	ldr	r3, [pc, #148]	; (800c354 <__swsetup_r+0xd4>)
 800c2be:	429c      	cmp	r4, r3
 800c2c0:	d101      	bne.n	800c2c6 <__swsetup_r+0x46>
 800c2c2:	68ac      	ldr	r4, [r5, #8]
 800c2c4:	e7eb      	b.n	800c29e <__swsetup_r+0x1e>
 800c2c6:	4b24      	ldr	r3, [pc, #144]	; (800c358 <__swsetup_r+0xd8>)
 800c2c8:	429c      	cmp	r4, r3
 800c2ca:	bf08      	it	eq
 800c2cc:	68ec      	ldreq	r4, [r5, #12]
 800c2ce:	e7e6      	b.n	800c29e <__swsetup_r+0x1e>
 800c2d0:	0758      	lsls	r0, r3, #29
 800c2d2:	d512      	bpl.n	800c2fa <__swsetup_r+0x7a>
 800c2d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c2d6:	b141      	cbz	r1, 800c2ea <__swsetup_r+0x6a>
 800c2d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c2dc:	4299      	cmp	r1, r3
 800c2de:	d002      	beq.n	800c2e6 <__swsetup_r+0x66>
 800c2e0:	4630      	mov	r0, r6
 800c2e2:	f000 f99d 	bl	800c620 <_free_r>
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	6363      	str	r3, [r4, #52]	; 0x34
 800c2ea:	89a3      	ldrh	r3, [r4, #12]
 800c2ec:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c2f0:	81a3      	strh	r3, [r4, #12]
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	6063      	str	r3, [r4, #4]
 800c2f6:	6923      	ldr	r3, [r4, #16]
 800c2f8:	6023      	str	r3, [r4, #0]
 800c2fa:	89a3      	ldrh	r3, [r4, #12]
 800c2fc:	f043 0308 	orr.w	r3, r3, #8
 800c300:	81a3      	strh	r3, [r4, #12]
 800c302:	6923      	ldr	r3, [r4, #16]
 800c304:	b94b      	cbnz	r3, 800c31a <__swsetup_r+0x9a>
 800c306:	89a3      	ldrh	r3, [r4, #12]
 800c308:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c30c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c310:	d003      	beq.n	800c31a <__swsetup_r+0x9a>
 800c312:	4621      	mov	r1, r4
 800c314:	4630      	mov	r0, r6
 800c316:	f000 f929 	bl	800c56c <__smakebuf_r>
 800c31a:	89a0      	ldrh	r0, [r4, #12]
 800c31c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c320:	f010 0301 	ands.w	r3, r0, #1
 800c324:	d00a      	beq.n	800c33c <__swsetup_r+0xbc>
 800c326:	2300      	movs	r3, #0
 800c328:	60a3      	str	r3, [r4, #8]
 800c32a:	6963      	ldr	r3, [r4, #20]
 800c32c:	425b      	negs	r3, r3
 800c32e:	61a3      	str	r3, [r4, #24]
 800c330:	6923      	ldr	r3, [r4, #16]
 800c332:	b943      	cbnz	r3, 800c346 <__swsetup_r+0xc6>
 800c334:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c338:	d1ba      	bne.n	800c2b0 <__swsetup_r+0x30>
 800c33a:	bd70      	pop	{r4, r5, r6, pc}
 800c33c:	0781      	lsls	r1, r0, #30
 800c33e:	bf58      	it	pl
 800c340:	6963      	ldrpl	r3, [r4, #20]
 800c342:	60a3      	str	r3, [r4, #8]
 800c344:	e7f4      	b.n	800c330 <__swsetup_r+0xb0>
 800c346:	2000      	movs	r0, #0
 800c348:	e7f7      	b.n	800c33a <__swsetup_r+0xba>
 800c34a:	bf00      	nop
 800c34c:	2000000c 	.word	0x2000000c
 800c350:	0800d710 	.word	0x0800d710
 800c354:	0800d730 	.word	0x0800d730
 800c358:	0800d6f0 	.word	0x0800d6f0

0800c35c <_close_r>:
 800c35c:	b538      	push	{r3, r4, r5, lr}
 800c35e:	2300      	movs	r3, #0
 800c360:	4d05      	ldr	r5, [pc, #20]	; (800c378 <_close_r+0x1c>)
 800c362:	4604      	mov	r4, r0
 800c364:	4608      	mov	r0, r1
 800c366:	602b      	str	r3, [r5, #0]
 800c368:	f7f6 fba7 	bl	8002aba <_close>
 800c36c:	1c43      	adds	r3, r0, #1
 800c36e:	d102      	bne.n	800c376 <_close_r+0x1a>
 800c370:	682b      	ldr	r3, [r5, #0]
 800c372:	b103      	cbz	r3, 800c376 <_close_r+0x1a>
 800c374:	6023      	str	r3, [r4, #0]
 800c376:	bd38      	pop	{r3, r4, r5, pc}
 800c378:	200009dc 	.word	0x200009dc

0800c37c <__sflush_r>:
 800c37c:	898a      	ldrh	r2, [r1, #12]
 800c37e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c382:	4605      	mov	r5, r0
 800c384:	0710      	lsls	r0, r2, #28
 800c386:	460c      	mov	r4, r1
 800c388:	d458      	bmi.n	800c43c <__sflush_r+0xc0>
 800c38a:	684b      	ldr	r3, [r1, #4]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	dc05      	bgt.n	800c39c <__sflush_r+0x20>
 800c390:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c392:	2b00      	cmp	r3, #0
 800c394:	dc02      	bgt.n	800c39c <__sflush_r+0x20>
 800c396:	2000      	movs	r0, #0
 800c398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c39c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c39e:	2e00      	cmp	r6, #0
 800c3a0:	d0f9      	beq.n	800c396 <__sflush_r+0x1a>
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c3a8:	682f      	ldr	r7, [r5, #0]
 800c3aa:	602b      	str	r3, [r5, #0]
 800c3ac:	d032      	beq.n	800c414 <__sflush_r+0x98>
 800c3ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c3b0:	89a3      	ldrh	r3, [r4, #12]
 800c3b2:	075a      	lsls	r2, r3, #29
 800c3b4:	d505      	bpl.n	800c3c2 <__sflush_r+0x46>
 800c3b6:	6863      	ldr	r3, [r4, #4]
 800c3b8:	1ac0      	subs	r0, r0, r3
 800c3ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c3bc:	b10b      	cbz	r3, 800c3c2 <__sflush_r+0x46>
 800c3be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c3c0:	1ac0      	subs	r0, r0, r3
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c3c8:	4628      	mov	r0, r5
 800c3ca:	6a21      	ldr	r1, [r4, #32]
 800c3cc:	47b0      	blx	r6
 800c3ce:	1c43      	adds	r3, r0, #1
 800c3d0:	89a3      	ldrh	r3, [r4, #12]
 800c3d2:	d106      	bne.n	800c3e2 <__sflush_r+0x66>
 800c3d4:	6829      	ldr	r1, [r5, #0]
 800c3d6:	291d      	cmp	r1, #29
 800c3d8:	d82c      	bhi.n	800c434 <__sflush_r+0xb8>
 800c3da:	4a29      	ldr	r2, [pc, #164]	; (800c480 <__sflush_r+0x104>)
 800c3dc:	40ca      	lsrs	r2, r1
 800c3de:	07d6      	lsls	r6, r2, #31
 800c3e0:	d528      	bpl.n	800c434 <__sflush_r+0xb8>
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	04d9      	lsls	r1, r3, #19
 800c3e6:	6062      	str	r2, [r4, #4]
 800c3e8:	6922      	ldr	r2, [r4, #16]
 800c3ea:	6022      	str	r2, [r4, #0]
 800c3ec:	d504      	bpl.n	800c3f8 <__sflush_r+0x7c>
 800c3ee:	1c42      	adds	r2, r0, #1
 800c3f0:	d101      	bne.n	800c3f6 <__sflush_r+0x7a>
 800c3f2:	682b      	ldr	r3, [r5, #0]
 800c3f4:	b903      	cbnz	r3, 800c3f8 <__sflush_r+0x7c>
 800c3f6:	6560      	str	r0, [r4, #84]	; 0x54
 800c3f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c3fa:	602f      	str	r7, [r5, #0]
 800c3fc:	2900      	cmp	r1, #0
 800c3fe:	d0ca      	beq.n	800c396 <__sflush_r+0x1a>
 800c400:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c404:	4299      	cmp	r1, r3
 800c406:	d002      	beq.n	800c40e <__sflush_r+0x92>
 800c408:	4628      	mov	r0, r5
 800c40a:	f000 f909 	bl	800c620 <_free_r>
 800c40e:	2000      	movs	r0, #0
 800c410:	6360      	str	r0, [r4, #52]	; 0x34
 800c412:	e7c1      	b.n	800c398 <__sflush_r+0x1c>
 800c414:	6a21      	ldr	r1, [r4, #32]
 800c416:	2301      	movs	r3, #1
 800c418:	4628      	mov	r0, r5
 800c41a:	47b0      	blx	r6
 800c41c:	1c41      	adds	r1, r0, #1
 800c41e:	d1c7      	bne.n	800c3b0 <__sflush_r+0x34>
 800c420:	682b      	ldr	r3, [r5, #0]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d0c4      	beq.n	800c3b0 <__sflush_r+0x34>
 800c426:	2b1d      	cmp	r3, #29
 800c428:	d001      	beq.n	800c42e <__sflush_r+0xb2>
 800c42a:	2b16      	cmp	r3, #22
 800c42c:	d101      	bne.n	800c432 <__sflush_r+0xb6>
 800c42e:	602f      	str	r7, [r5, #0]
 800c430:	e7b1      	b.n	800c396 <__sflush_r+0x1a>
 800c432:	89a3      	ldrh	r3, [r4, #12]
 800c434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c438:	81a3      	strh	r3, [r4, #12]
 800c43a:	e7ad      	b.n	800c398 <__sflush_r+0x1c>
 800c43c:	690f      	ldr	r7, [r1, #16]
 800c43e:	2f00      	cmp	r7, #0
 800c440:	d0a9      	beq.n	800c396 <__sflush_r+0x1a>
 800c442:	0793      	lsls	r3, r2, #30
 800c444:	680e      	ldr	r6, [r1, #0]
 800c446:	600f      	str	r7, [r1, #0]
 800c448:	bf0c      	ite	eq
 800c44a:	694b      	ldreq	r3, [r1, #20]
 800c44c:	2300      	movne	r3, #0
 800c44e:	eba6 0807 	sub.w	r8, r6, r7
 800c452:	608b      	str	r3, [r1, #8]
 800c454:	f1b8 0f00 	cmp.w	r8, #0
 800c458:	dd9d      	ble.n	800c396 <__sflush_r+0x1a>
 800c45a:	4643      	mov	r3, r8
 800c45c:	463a      	mov	r2, r7
 800c45e:	6a21      	ldr	r1, [r4, #32]
 800c460:	4628      	mov	r0, r5
 800c462:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c464:	47b0      	blx	r6
 800c466:	2800      	cmp	r0, #0
 800c468:	dc06      	bgt.n	800c478 <__sflush_r+0xfc>
 800c46a:	89a3      	ldrh	r3, [r4, #12]
 800c46c:	f04f 30ff 	mov.w	r0, #4294967295
 800c470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c474:	81a3      	strh	r3, [r4, #12]
 800c476:	e78f      	b.n	800c398 <__sflush_r+0x1c>
 800c478:	4407      	add	r7, r0
 800c47a:	eba8 0800 	sub.w	r8, r8, r0
 800c47e:	e7e9      	b.n	800c454 <__sflush_r+0xd8>
 800c480:	20400001 	.word	0x20400001

0800c484 <_fflush_r>:
 800c484:	b538      	push	{r3, r4, r5, lr}
 800c486:	690b      	ldr	r3, [r1, #16]
 800c488:	4605      	mov	r5, r0
 800c48a:	460c      	mov	r4, r1
 800c48c:	b913      	cbnz	r3, 800c494 <_fflush_r+0x10>
 800c48e:	2500      	movs	r5, #0
 800c490:	4628      	mov	r0, r5
 800c492:	bd38      	pop	{r3, r4, r5, pc}
 800c494:	b118      	cbz	r0, 800c49e <_fflush_r+0x1a>
 800c496:	6983      	ldr	r3, [r0, #24]
 800c498:	b90b      	cbnz	r3, 800c49e <_fflush_r+0x1a>
 800c49a:	f7ff fa15 	bl	800b8c8 <__sinit>
 800c49e:	4b14      	ldr	r3, [pc, #80]	; (800c4f0 <_fflush_r+0x6c>)
 800c4a0:	429c      	cmp	r4, r3
 800c4a2:	d11b      	bne.n	800c4dc <_fflush_r+0x58>
 800c4a4:	686c      	ldr	r4, [r5, #4]
 800c4a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d0ef      	beq.n	800c48e <_fflush_r+0xa>
 800c4ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c4b0:	07d0      	lsls	r0, r2, #31
 800c4b2:	d404      	bmi.n	800c4be <_fflush_r+0x3a>
 800c4b4:	0599      	lsls	r1, r3, #22
 800c4b6:	d402      	bmi.n	800c4be <_fflush_r+0x3a>
 800c4b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4ba:	f7ff faa3 	bl	800ba04 <__retarget_lock_acquire_recursive>
 800c4be:	4628      	mov	r0, r5
 800c4c0:	4621      	mov	r1, r4
 800c4c2:	f7ff ff5b 	bl	800c37c <__sflush_r>
 800c4c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c4c8:	4605      	mov	r5, r0
 800c4ca:	07da      	lsls	r2, r3, #31
 800c4cc:	d4e0      	bmi.n	800c490 <_fflush_r+0xc>
 800c4ce:	89a3      	ldrh	r3, [r4, #12]
 800c4d0:	059b      	lsls	r3, r3, #22
 800c4d2:	d4dd      	bmi.n	800c490 <_fflush_r+0xc>
 800c4d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c4d6:	f7ff fa96 	bl	800ba06 <__retarget_lock_release_recursive>
 800c4da:	e7d9      	b.n	800c490 <_fflush_r+0xc>
 800c4dc:	4b05      	ldr	r3, [pc, #20]	; (800c4f4 <_fflush_r+0x70>)
 800c4de:	429c      	cmp	r4, r3
 800c4e0:	d101      	bne.n	800c4e6 <_fflush_r+0x62>
 800c4e2:	68ac      	ldr	r4, [r5, #8]
 800c4e4:	e7df      	b.n	800c4a6 <_fflush_r+0x22>
 800c4e6:	4b04      	ldr	r3, [pc, #16]	; (800c4f8 <_fflush_r+0x74>)
 800c4e8:	429c      	cmp	r4, r3
 800c4ea:	bf08      	it	eq
 800c4ec:	68ec      	ldreq	r4, [r5, #12]
 800c4ee:	e7da      	b.n	800c4a6 <_fflush_r+0x22>
 800c4f0:	0800d710 	.word	0x0800d710
 800c4f4:	0800d730 	.word	0x0800d730
 800c4f8:	0800d6f0 	.word	0x0800d6f0

0800c4fc <_lseek_r>:
 800c4fc:	b538      	push	{r3, r4, r5, lr}
 800c4fe:	4604      	mov	r4, r0
 800c500:	4d06      	ldr	r5, [pc, #24]	; (800c51c <_lseek_r+0x20>)
 800c502:	4608      	mov	r0, r1
 800c504:	4611      	mov	r1, r2
 800c506:	2200      	movs	r2, #0
 800c508:	602a      	str	r2, [r5, #0]
 800c50a:	461a      	mov	r2, r3
 800c50c:	f7f6 fafc 	bl	8002b08 <_lseek>
 800c510:	1c43      	adds	r3, r0, #1
 800c512:	d102      	bne.n	800c51a <_lseek_r+0x1e>
 800c514:	682b      	ldr	r3, [r5, #0]
 800c516:	b103      	cbz	r3, 800c51a <_lseek_r+0x1e>
 800c518:	6023      	str	r3, [r4, #0]
 800c51a:	bd38      	pop	{r3, r4, r5, pc}
 800c51c:	200009dc 	.word	0x200009dc

0800c520 <__swhatbuf_r>:
 800c520:	b570      	push	{r4, r5, r6, lr}
 800c522:	460e      	mov	r6, r1
 800c524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c528:	b096      	sub	sp, #88	; 0x58
 800c52a:	4614      	mov	r4, r2
 800c52c:	2900      	cmp	r1, #0
 800c52e:	461d      	mov	r5, r3
 800c530:	da08      	bge.n	800c544 <__swhatbuf_r+0x24>
 800c532:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c536:	2200      	movs	r2, #0
 800c538:	602a      	str	r2, [r5, #0]
 800c53a:	061a      	lsls	r2, r3, #24
 800c53c:	d410      	bmi.n	800c560 <__swhatbuf_r+0x40>
 800c53e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c542:	e00e      	b.n	800c562 <__swhatbuf_r+0x42>
 800c544:	466a      	mov	r2, sp
 800c546:	f000 f8c9 	bl	800c6dc <_fstat_r>
 800c54a:	2800      	cmp	r0, #0
 800c54c:	dbf1      	blt.n	800c532 <__swhatbuf_r+0x12>
 800c54e:	9a01      	ldr	r2, [sp, #4]
 800c550:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c554:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c558:	425a      	negs	r2, r3
 800c55a:	415a      	adcs	r2, r3
 800c55c:	602a      	str	r2, [r5, #0]
 800c55e:	e7ee      	b.n	800c53e <__swhatbuf_r+0x1e>
 800c560:	2340      	movs	r3, #64	; 0x40
 800c562:	2000      	movs	r0, #0
 800c564:	6023      	str	r3, [r4, #0]
 800c566:	b016      	add	sp, #88	; 0x58
 800c568:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c56c <__smakebuf_r>:
 800c56c:	898b      	ldrh	r3, [r1, #12]
 800c56e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c570:	079d      	lsls	r5, r3, #30
 800c572:	4606      	mov	r6, r0
 800c574:	460c      	mov	r4, r1
 800c576:	d507      	bpl.n	800c588 <__smakebuf_r+0x1c>
 800c578:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c57c:	6023      	str	r3, [r4, #0]
 800c57e:	6123      	str	r3, [r4, #16]
 800c580:	2301      	movs	r3, #1
 800c582:	6163      	str	r3, [r4, #20]
 800c584:	b002      	add	sp, #8
 800c586:	bd70      	pop	{r4, r5, r6, pc}
 800c588:	ab01      	add	r3, sp, #4
 800c58a:	466a      	mov	r2, sp
 800c58c:	f7ff ffc8 	bl	800c520 <__swhatbuf_r>
 800c590:	9900      	ldr	r1, [sp, #0]
 800c592:	4605      	mov	r5, r0
 800c594:	4630      	mov	r0, r6
 800c596:	f7ff fa57 	bl	800ba48 <_malloc_r>
 800c59a:	b948      	cbnz	r0, 800c5b0 <__smakebuf_r+0x44>
 800c59c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5a0:	059a      	lsls	r2, r3, #22
 800c5a2:	d4ef      	bmi.n	800c584 <__smakebuf_r+0x18>
 800c5a4:	f023 0303 	bic.w	r3, r3, #3
 800c5a8:	f043 0302 	orr.w	r3, r3, #2
 800c5ac:	81a3      	strh	r3, [r4, #12]
 800c5ae:	e7e3      	b.n	800c578 <__smakebuf_r+0xc>
 800c5b0:	4b0d      	ldr	r3, [pc, #52]	; (800c5e8 <__smakebuf_r+0x7c>)
 800c5b2:	62b3      	str	r3, [r6, #40]	; 0x28
 800c5b4:	89a3      	ldrh	r3, [r4, #12]
 800c5b6:	6020      	str	r0, [r4, #0]
 800c5b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5bc:	6120      	str	r0, [r4, #16]
 800c5be:	81a3      	strh	r3, [r4, #12]
 800c5c0:	9b00      	ldr	r3, [sp, #0]
 800c5c2:	6163      	str	r3, [r4, #20]
 800c5c4:	9b01      	ldr	r3, [sp, #4]
 800c5c6:	b15b      	cbz	r3, 800c5e0 <__smakebuf_r+0x74>
 800c5c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5cc:	4630      	mov	r0, r6
 800c5ce:	f000 f897 	bl	800c700 <_isatty_r>
 800c5d2:	b128      	cbz	r0, 800c5e0 <__smakebuf_r+0x74>
 800c5d4:	89a3      	ldrh	r3, [r4, #12]
 800c5d6:	f023 0303 	bic.w	r3, r3, #3
 800c5da:	f043 0301 	orr.w	r3, r3, #1
 800c5de:	81a3      	strh	r3, [r4, #12]
 800c5e0:	89a0      	ldrh	r0, [r4, #12]
 800c5e2:	4305      	orrs	r5, r0
 800c5e4:	81a5      	strh	r5, [r4, #12]
 800c5e6:	e7cd      	b.n	800c584 <__smakebuf_r+0x18>
 800c5e8:	0800b861 	.word	0x0800b861

0800c5ec <memchr>:
 800c5ec:	b2c9      	uxtb	r1, r1
 800c5ee:	4402      	add	r2, r0
 800c5f0:	b510      	push	{r4, lr}
 800c5f2:	4290      	cmp	r0, r2
 800c5f4:	4603      	mov	r3, r0
 800c5f6:	d101      	bne.n	800c5fc <memchr+0x10>
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	e003      	b.n	800c604 <memchr+0x18>
 800c5fc:	781c      	ldrb	r4, [r3, #0]
 800c5fe:	3001      	adds	r0, #1
 800c600:	428c      	cmp	r4, r1
 800c602:	d1f6      	bne.n	800c5f2 <memchr+0x6>
 800c604:	4618      	mov	r0, r3
 800c606:	bd10      	pop	{r4, pc}

0800c608 <__malloc_lock>:
 800c608:	4801      	ldr	r0, [pc, #4]	; (800c610 <__malloc_lock+0x8>)
 800c60a:	f7ff b9fb 	b.w	800ba04 <__retarget_lock_acquire_recursive>
 800c60e:	bf00      	nop
 800c610:	200009d0 	.word	0x200009d0

0800c614 <__malloc_unlock>:
 800c614:	4801      	ldr	r0, [pc, #4]	; (800c61c <__malloc_unlock+0x8>)
 800c616:	f7ff b9f6 	b.w	800ba06 <__retarget_lock_release_recursive>
 800c61a:	bf00      	nop
 800c61c:	200009d0 	.word	0x200009d0

0800c620 <_free_r>:
 800c620:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c622:	2900      	cmp	r1, #0
 800c624:	d043      	beq.n	800c6ae <_free_r+0x8e>
 800c626:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c62a:	1f0c      	subs	r4, r1, #4
 800c62c:	9001      	str	r0, [sp, #4]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	bfb8      	it	lt
 800c632:	18e4      	addlt	r4, r4, r3
 800c634:	f7ff ffe8 	bl	800c608 <__malloc_lock>
 800c638:	4a1e      	ldr	r2, [pc, #120]	; (800c6b4 <_free_r+0x94>)
 800c63a:	9801      	ldr	r0, [sp, #4]
 800c63c:	6813      	ldr	r3, [r2, #0]
 800c63e:	b933      	cbnz	r3, 800c64e <_free_r+0x2e>
 800c640:	6063      	str	r3, [r4, #4]
 800c642:	6014      	str	r4, [r2, #0]
 800c644:	b003      	add	sp, #12
 800c646:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c64a:	f7ff bfe3 	b.w	800c614 <__malloc_unlock>
 800c64e:	42a3      	cmp	r3, r4
 800c650:	d908      	bls.n	800c664 <_free_r+0x44>
 800c652:	6825      	ldr	r5, [r4, #0]
 800c654:	1961      	adds	r1, r4, r5
 800c656:	428b      	cmp	r3, r1
 800c658:	bf01      	itttt	eq
 800c65a:	6819      	ldreq	r1, [r3, #0]
 800c65c:	685b      	ldreq	r3, [r3, #4]
 800c65e:	1949      	addeq	r1, r1, r5
 800c660:	6021      	streq	r1, [r4, #0]
 800c662:	e7ed      	b.n	800c640 <_free_r+0x20>
 800c664:	461a      	mov	r2, r3
 800c666:	685b      	ldr	r3, [r3, #4]
 800c668:	b10b      	cbz	r3, 800c66e <_free_r+0x4e>
 800c66a:	42a3      	cmp	r3, r4
 800c66c:	d9fa      	bls.n	800c664 <_free_r+0x44>
 800c66e:	6811      	ldr	r1, [r2, #0]
 800c670:	1855      	adds	r5, r2, r1
 800c672:	42a5      	cmp	r5, r4
 800c674:	d10b      	bne.n	800c68e <_free_r+0x6e>
 800c676:	6824      	ldr	r4, [r4, #0]
 800c678:	4421      	add	r1, r4
 800c67a:	1854      	adds	r4, r2, r1
 800c67c:	6011      	str	r1, [r2, #0]
 800c67e:	42a3      	cmp	r3, r4
 800c680:	d1e0      	bne.n	800c644 <_free_r+0x24>
 800c682:	681c      	ldr	r4, [r3, #0]
 800c684:	685b      	ldr	r3, [r3, #4]
 800c686:	4421      	add	r1, r4
 800c688:	6053      	str	r3, [r2, #4]
 800c68a:	6011      	str	r1, [r2, #0]
 800c68c:	e7da      	b.n	800c644 <_free_r+0x24>
 800c68e:	d902      	bls.n	800c696 <_free_r+0x76>
 800c690:	230c      	movs	r3, #12
 800c692:	6003      	str	r3, [r0, #0]
 800c694:	e7d6      	b.n	800c644 <_free_r+0x24>
 800c696:	6825      	ldr	r5, [r4, #0]
 800c698:	1961      	adds	r1, r4, r5
 800c69a:	428b      	cmp	r3, r1
 800c69c:	bf02      	ittt	eq
 800c69e:	6819      	ldreq	r1, [r3, #0]
 800c6a0:	685b      	ldreq	r3, [r3, #4]
 800c6a2:	1949      	addeq	r1, r1, r5
 800c6a4:	6063      	str	r3, [r4, #4]
 800c6a6:	bf08      	it	eq
 800c6a8:	6021      	streq	r1, [r4, #0]
 800c6aa:	6054      	str	r4, [r2, #4]
 800c6ac:	e7ca      	b.n	800c644 <_free_r+0x24>
 800c6ae:	b003      	add	sp, #12
 800c6b0:	bd30      	pop	{r4, r5, pc}
 800c6b2:	bf00      	nop
 800c6b4:	200009d4 	.word	0x200009d4

0800c6b8 <_read_r>:
 800c6b8:	b538      	push	{r3, r4, r5, lr}
 800c6ba:	4604      	mov	r4, r0
 800c6bc:	4d06      	ldr	r5, [pc, #24]	; (800c6d8 <_read_r+0x20>)
 800c6be:	4608      	mov	r0, r1
 800c6c0:	4611      	mov	r1, r2
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	602a      	str	r2, [r5, #0]
 800c6c6:	461a      	mov	r2, r3
 800c6c8:	f7f6 f9be 	bl	8002a48 <_read>
 800c6cc:	1c43      	adds	r3, r0, #1
 800c6ce:	d102      	bne.n	800c6d6 <_read_r+0x1e>
 800c6d0:	682b      	ldr	r3, [r5, #0]
 800c6d2:	b103      	cbz	r3, 800c6d6 <_read_r+0x1e>
 800c6d4:	6023      	str	r3, [r4, #0]
 800c6d6:	bd38      	pop	{r3, r4, r5, pc}
 800c6d8:	200009dc 	.word	0x200009dc

0800c6dc <_fstat_r>:
 800c6dc:	b538      	push	{r3, r4, r5, lr}
 800c6de:	2300      	movs	r3, #0
 800c6e0:	4d06      	ldr	r5, [pc, #24]	; (800c6fc <_fstat_r+0x20>)
 800c6e2:	4604      	mov	r4, r0
 800c6e4:	4608      	mov	r0, r1
 800c6e6:	4611      	mov	r1, r2
 800c6e8:	602b      	str	r3, [r5, #0]
 800c6ea:	f7f6 f9f2 	bl	8002ad2 <_fstat>
 800c6ee:	1c43      	adds	r3, r0, #1
 800c6f0:	d102      	bne.n	800c6f8 <_fstat_r+0x1c>
 800c6f2:	682b      	ldr	r3, [r5, #0]
 800c6f4:	b103      	cbz	r3, 800c6f8 <_fstat_r+0x1c>
 800c6f6:	6023      	str	r3, [r4, #0]
 800c6f8:	bd38      	pop	{r3, r4, r5, pc}
 800c6fa:	bf00      	nop
 800c6fc:	200009dc 	.word	0x200009dc

0800c700 <_isatty_r>:
 800c700:	b538      	push	{r3, r4, r5, lr}
 800c702:	2300      	movs	r3, #0
 800c704:	4d05      	ldr	r5, [pc, #20]	; (800c71c <_isatty_r+0x1c>)
 800c706:	4604      	mov	r4, r0
 800c708:	4608      	mov	r0, r1
 800c70a:	602b      	str	r3, [r5, #0]
 800c70c:	f7f6 f9f1 	bl	8002af2 <_isatty>
 800c710:	1c43      	adds	r3, r0, #1
 800c712:	d102      	bne.n	800c71a <_isatty_r+0x1a>
 800c714:	682b      	ldr	r3, [r5, #0]
 800c716:	b103      	cbz	r3, 800c71a <_isatty_r+0x1a>
 800c718:	6023      	str	r3, [r4, #0]
 800c71a:	bd38      	pop	{r3, r4, r5, pc}
 800c71c:	200009dc 	.word	0x200009dc

0800c720 <pow>:
 800c720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c722:	ec55 4b11 	vmov	r4, r5, d1
 800c726:	ed2d 8b02 	vpush	{d8}
 800c72a:	eeb0 8a40 	vmov.f32	s16, s0
 800c72e:	eef0 8a60 	vmov.f32	s17, s1
 800c732:	f000 f865 	bl	800c800 <__ieee754_pow>
 800c736:	4622      	mov	r2, r4
 800c738:	462b      	mov	r3, r5
 800c73a:	4620      	mov	r0, r4
 800c73c:	4629      	mov	r1, r5
 800c73e:	ec57 6b10 	vmov	r6, r7, d0
 800c742:	f7f4 f9f7 	bl	8000b34 <__aeabi_dcmpun>
 800c746:	2800      	cmp	r0, #0
 800c748:	d13b      	bne.n	800c7c2 <pow+0xa2>
 800c74a:	2200      	movs	r2, #0
 800c74c:	2300      	movs	r3, #0
 800c74e:	ec51 0b18 	vmov	r0, r1, d8
 800c752:	f7f4 f9bd 	bl	8000ad0 <__aeabi_dcmpeq>
 800c756:	b1b8      	cbz	r0, 800c788 <pow+0x68>
 800c758:	2200      	movs	r2, #0
 800c75a:	2300      	movs	r3, #0
 800c75c:	4620      	mov	r0, r4
 800c75e:	4629      	mov	r1, r5
 800c760:	f7f4 f9b6 	bl	8000ad0 <__aeabi_dcmpeq>
 800c764:	2800      	cmp	r0, #0
 800c766:	d146      	bne.n	800c7f6 <pow+0xd6>
 800c768:	ec45 4b10 	vmov	d0, r4, r5
 800c76c:	f000 fe67 	bl	800d43e <finite>
 800c770:	b338      	cbz	r0, 800c7c2 <pow+0xa2>
 800c772:	2200      	movs	r2, #0
 800c774:	2300      	movs	r3, #0
 800c776:	4620      	mov	r0, r4
 800c778:	4629      	mov	r1, r5
 800c77a:	f7f4 f9b3 	bl	8000ae4 <__aeabi_dcmplt>
 800c77e:	b300      	cbz	r0, 800c7c2 <pow+0xa2>
 800c780:	f7fe ffae 	bl	800b6e0 <__errno>
 800c784:	2322      	movs	r3, #34	; 0x22
 800c786:	e01b      	b.n	800c7c0 <pow+0xa0>
 800c788:	ec47 6b10 	vmov	d0, r6, r7
 800c78c:	f000 fe57 	bl	800d43e <finite>
 800c790:	b9e0      	cbnz	r0, 800c7cc <pow+0xac>
 800c792:	eeb0 0a48 	vmov.f32	s0, s16
 800c796:	eef0 0a68 	vmov.f32	s1, s17
 800c79a:	f000 fe50 	bl	800d43e <finite>
 800c79e:	b1a8      	cbz	r0, 800c7cc <pow+0xac>
 800c7a0:	ec45 4b10 	vmov	d0, r4, r5
 800c7a4:	f000 fe4b 	bl	800d43e <finite>
 800c7a8:	b180      	cbz	r0, 800c7cc <pow+0xac>
 800c7aa:	4632      	mov	r2, r6
 800c7ac:	463b      	mov	r3, r7
 800c7ae:	4630      	mov	r0, r6
 800c7b0:	4639      	mov	r1, r7
 800c7b2:	f7f4 f9bf 	bl	8000b34 <__aeabi_dcmpun>
 800c7b6:	2800      	cmp	r0, #0
 800c7b8:	d0e2      	beq.n	800c780 <pow+0x60>
 800c7ba:	f7fe ff91 	bl	800b6e0 <__errno>
 800c7be:	2321      	movs	r3, #33	; 0x21
 800c7c0:	6003      	str	r3, [r0, #0]
 800c7c2:	ecbd 8b02 	vpop	{d8}
 800c7c6:	ec47 6b10 	vmov	d0, r6, r7
 800c7ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	4630      	mov	r0, r6
 800c7d2:	4639      	mov	r1, r7
 800c7d4:	f7f4 f97c 	bl	8000ad0 <__aeabi_dcmpeq>
 800c7d8:	2800      	cmp	r0, #0
 800c7da:	d0f2      	beq.n	800c7c2 <pow+0xa2>
 800c7dc:	eeb0 0a48 	vmov.f32	s0, s16
 800c7e0:	eef0 0a68 	vmov.f32	s1, s17
 800c7e4:	f000 fe2b 	bl	800d43e <finite>
 800c7e8:	2800      	cmp	r0, #0
 800c7ea:	d0ea      	beq.n	800c7c2 <pow+0xa2>
 800c7ec:	ec45 4b10 	vmov	d0, r4, r5
 800c7f0:	f000 fe25 	bl	800d43e <finite>
 800c7f4:	e7c3      	b.n	800c77e <pow+0x5e>
 800c7f6:	2600      	movs	r6, #0
 800c7f8:	4f00      	ldr	r7, [pc, #0]	; (800c7fc <pow+0xdc>)
 800c7fa:	e7e2      	b.n	800c7c2 <pow+0xa2>
 800c7fc:	3ff00000 	.word	0x3ff00000

0800c800 <__ieee754_pow>:
 800c800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c804:	ed2d 8b06 	vpush	{d8-d10}
 800c808:	b089      	sub	sp, #36	; 0x24
 800c80a:	ed8d 1b00 	vstr	d1, [sp]
 800c80e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c812:	ec57 6b10 	vmov	r6, r7, d0
 800c816:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c81a:	ea58 0102 	orrs.w	r1, r8, r2
 800c81e:	d115      	bne.n	800c84c <__ieee754_pow+0x4c>
 800c820:	19b3      	adds	r3, r6, r6
 800c822:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c826:	4152      	adcs	r2, r2
 800c828:	4299      	cmp	r1, r3
 800c82a:	4b89      	ldr	r3, [pc, #548]	; (800ca50 <__ieee754_pow+0x250>)
 800c82c:	4193      	sbcs	r3, r2
 800c82e:	f080 84d3 	bcs.w	800d1d8 <__ieee754_pow+0x9d8>
 800c832:	4630      	mov	r0, r6
 800c834:	4639      	mov	r1, r7
 800c836:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c83a:	f7f3 fd2b 	bl	8000294 <__adddf3>
 800c83e:	ec41 0b10 	vmov	d0, r0, r1
 800c842:	b009      	add	sp, #36	; 0x24
 800c844:	ecbd 8b06 	vpop	{d8-d10}
 800c848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c84c:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c850:	4b80      	ldr	r3, [pc, #512]	; (800ca54 <__ieee754_pow+0x254>)
 800c852:	463d      	mov	r5, r7
 800c854:	ee10 aa10 	vmov	sl, s0
 800c858:	429c      	cmp	r4, r3
 800c85a:	dc06      	bgt.n	800c86a <__ieee754_pow+0x6a>
 800c85c:	d101      	bne.n	800c862 <__ieee754_pow+0x62>
 800c85e:	2e00      	cmp	r6, #0
 800c860:	d1e7      	bne.n	800c832 <__ieee754_pow+0x32>
 800c862:	4598      	cmp	r8, r3
 800c864:	dc01      	bgt.n	800c86a <__ieee754_pow+0x6a>
 800c866:	d10f      	bne.n	800c888 <__ieee754_pow+0x88>
 800c868:	b172      	cbz	r2, 800c888 <__ieee754_pow+0x88>
 800c86a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c86e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c872:	ea55 050a 	orrs.w	r5, r5, sl
 800c876:	d1dc      	bne.n	800c832 <__ieee754_pow+0x32>
 800c878:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c87c:	18db      	adds	r3, r3, r3
 800c87e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c882:	4152      	adcs	r2, r2
 800c884:	429d      	cmp	r5, r3
 800c886:	e7d0      	b.n	800c82a <__ieee754_pow+0x2a>
 800c888:	2d00      	cmp	r5, #0
 800c88a:	da3b      	bge.n	800c904 <__ieee754_pow+0x104>
 800c88c:	4b72      	ldr	r3, [pc, #456]	; (800ca58 <__ieee754_pow+0x258>)
 800c88e:	4598      	cmp	r8, r3
 800c890:	dc51      	bgt.n	800c936 <__ieee754_pow+0x136>
 800c892:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c896:	4598      	cmp	r8, r3
 800c898:	f340 84ad 	ble.w	800d1f6 <__ieee754_pow+0x9f6>
 800c89c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c8a0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c8a4:	2b14      	cmp	r3, #20
 800c8a6:	dd0f      	ble.n	800c8c8 <__ieee754_pow+0xc8>
 800c8a8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c8ac:	fa22 f103 	lsr.w	r1, r2, r3
 800c8b0:	fa01 f303 	lsl.w	r3, r1, r3
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	f040 849e 	bne.w	800d1f6 <__ieee754_pow+0x9f6>
 800c8ba:	f001 0101 	and.w	r1, r1, #1
 800c8be:	f1c1 0302 	rsb	r3, r1, #2
 800c8c2:	9304      	str	r3, [sp, #16]
 800c8c4:	b182      	cbz	r2, 800c8e8 <__ieee754_pow+0xe8>
 800c8c6:	e05f      	b.n	800c988 <__ieee754_pow+0x188>
 800c8c8:	2a00      	cmp	r2, #0
 800c8ca:	d15b      	bne.n	800c984 <__ieee754_pow+0x184>
 800c8cc:	f1c3 0314 	rsb	r3, r3, #20
 800c8d0:	fa48 f103 	asr.w	r1, r8, r3
 800c8d4:	fa01 f303 	lsl.w	r3, r1, r3
 800c8d8:	4543      	cmp	r3, r8
 800c8da:	f040 8489 	bne.w	800d1f0 <__ieee754_pow+0x9f0>
 800c8de:	f001 0101 	and.w	r1, r1, #1
 800c8e2:	f1c1 0302 	rsb	r3, r1, #2
 800c8e6:	9304      	str	r3, [sp, #16]
 800c8e8:	4b5c      	ldr	r3, [pc, #368]	; (800ca5c <__ieee754_pow+0x25c>)
 800c8ea:	4598      	cmp	r8, r3
 800c8ec:	d132      	bne.n	800c954 <__ieee754_pow+0x154>
 800c8ee:	f1b9 0f00 	cmp.w	r9, #0
 800c8f2:	f280 8479 	bge.w	800d1e8 <__ieee754_pow+0x9e8>
 800c8f6:	4632      	mov	r2, r6
 800c8f8:	463b      	mov	r3, r7
 800c8fa:	2000      	movs	r0, #0
 800c8fc:	4957      	ldr	r1, [pc, #348]	; (800ca5c <__ieee754_pow+0x25c>)
 800c8fe:	f7f3 ffa9 	bl	8000854 <__aeabi_ddiv>
 800c902:	e79c      	b.n	800c83e <__ieee754_pow+0x3e>
 800c904:	2300      	movs	r3, #0
 800c906:	9304      	str	r3, [sp, #16]
 800c908:	2a00      	cmp	r2, #0
 800c90a:	d13d      	bne.n	800c988 <__ieee754_pow+0x188>
 800c90c:	4b51      	ldr	r3, [pc, #324]	; (800ca54 <__ieee754_pow+0x254>)
 800c90e:	4598      	cmp	r8, r3
 800c910:	d1ea      	bne.n	800c8e8 <__ieee754_pow+0xe8>
 800c912:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c916:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c91a:	ea53 030a 	orrs.w	r3, r3, sl
 800c91e:	f000 845b 	beq.w	800d1d8 <__ieee754_pow+0x9d8>
 800c922:	4b4f      	ldr	r3, [pc, #316]	; (800ca60 <__ieee754_pow+0x260>)
 800c924:	429c      	cmp	r4, r3
 800c926:	dd08      	ble.n	800c93a <__ieee754_pow+0x13a>
 800c928:	f1b9 0f00 	cmp.w	r9, #0
 800c92c:	f2c0 8458 	blt.w	800d1e0 <__ieee754_pow+0x9e0>
 800c930:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c934:	e783      	b.n	800c83e <__ieee754_pow+0x3e>
 800c936:	2302      	movs	r3, #2
 800c938:	e7e5      	b.n	800c906 <__ieee754_pow+0x106>
 800c93a:	f1b9 0f00 	cmp.w	r9, #0
 800c93e:	f04f 0000 	mov.w	r0, #0
 800c942:	f04f 0100 	mov.w	r1, #0
 800c946:	f6bf af7a 	bge.w	800c83e <__ieee754_pow+0x3e>
 800c94a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c94e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c952:	e774      	b.n	800c83e <__ieee754_pow+0x3e>
 800c954:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c958:	d106      	bne.n	800c968 <__ieee754_pow+0x168>
 800c95a:	4632      	mov	r2, r6
 800c95c:	463b      	mov	r3, r7
 800c95e:	4630      	mov	r0, r6
 800c960:	4639      	mov	r1, r7
 800c962:	f7f3 fe4d 	bl	8000600 <__aeabi_dmul>
 800c966:	e76a      	b.n	800c83e <__ieee754_pow+0x3e>
 800c968:	4b3e      	ldr	r3, [pc, #248]	; (800ca64 <__ieee754_pow+0x264>)
 800c96a:	4599      	cmp	r9, r3
 800c96c:	d10c      	bne.n	800c988 <__ieee754_pow+0x188>
 800c96e:	2d00      	cmp	r5, #0
 800c970:	db0a      	blt.n	800c988 <__ieee754_pow+0x188>
 800c972:	ec47 6b10 	vmov	d0, r6, r7
 800c976:	b009      	add	sp, #36	; 0x24
 800c978:	ecbd 8b06 	vpop	{d8-d10}
 800c97c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c980:	f000 bc6c 	b.w	800d25c <__ieee754_sqrt>
 800c984:	2300      	movs	r3, #0
 800c986:	9304      	str	r3, [sp, #16]
 800c988:	ec47 6b10 	vmov	d0, r6, r7
 800c98c:	f000 fd4e 	bl	800d42c <fabs>
 800c990:	ec51 0b10 	vmov	r0, r1, d0
 800c994:	f1ba 0f00 	cmp.w	sl, #0
 800c998:	d129      	bne.n	800c9ee <__ieee754_pow+0x1ee>
 800c99a:	b124      	cbz	r4, 800c9a6 <__ieee754_pow+0x1a6>
 800c99c:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c9a0:	4b2e      	ldr	r3, [pc, #184]	; (800ca5c <__ieee754_pow+0x25c>)
 800c9a2:	429a      	cmp	r2, r3
 800c9a4:	d123      	bne.n	800c9ee <__ieee754_pow+0x1ee>
 800c9a6:	f1b9 0f00 	cmp.w	r9, #0
 800c9aa:	da05      	bge.n	800c9b8 <__ieee754_pow+0x1b8>
 800c9ac:	4602      	mov	r2, r0
 800c9ae:	460b      	mov	r3, r1
 800c9b0:	2000      	movs	r0, #0
 800c9b2:	492a      	ldr	r1, [pc, #168]	; (800ca5c <__ieee754_pow+0x25c>)
 800c9b4:	f7f3 ff4e 	bl	8000854 <__aeabi_ddiv>
 800c9b8:	2d00      	cmp	r5, #0
 800c9ba:	f6bf af40 	bge.w	800c83e <__ieee754_pow+0x3e>
 800c9be:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c9c2:	9b04      	ldr	r3, [sp, #16]
 800c9c4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c9c8:	4323      	orrs	r3, r4
 800c9ca:	d108      	bne.n	800c9de <__ieee754_pow+0x1de>
 800c9cc:	4602      	mov	r2, r0
 800c9ce:	460b      	mov	r3, r1
 800c9d0:	4610      	mov	r0, r2
 800c9d2:	4619      	mov	r1, r3
 800c9d4:	f7f3 fc5c 	bl	8000290 <__aeabi_dsub>
 800c9d8:	4602      	mov	r2, r0
 800c9da:	460b      	mov	r3, r1
 800c9dc:	e78f      	b.n	800c8fe <__ieee754_pow+0xfe>
 800c9de:	9b04      	ldr	r3, [sp, #16]
 800c9e0:	2b01      	cmp	r3, #1
 800c9e2:	f47f af2c 	bne.w	800c83e <__ieee754_pow+0x3e>
 800c9e6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c9ea:	4619      	mov	r1, r3
 800c9ec:	e727      	b.n	800c83e <__ieee754_pow+0x3e>
 800c9ee:	0feb      	lsrs	r3, r5, #31
 800c9f0:	3b01      	subs	r3, #1
 800c9f2:	9306      	str	r3, [sp, #24]
 800c9f4:	9a06      	ldr	r2, [sp, #24]
 800c9f6:	9b04      	ldr	r3, [sp, #16]
 800c9f8:	4313      	orrs	r3, r2
 800c9fa:	d102      	bne.n	800ca02 <__ieee754_pow+0x202>
 800c9fc:	4632      	mov	r2, r6
 800c9fe:	463b      	mov	r3, r7
 800ca00:	e7e6      	b.n	800c9d0 <__ieee754_pow+0x1d0>
 800ca02:	4b19      	ldr	r3, [pc, #100]	; (800ca68 <__ieee754_pow+0x268>)
 800ca04:	4598      	cmp	r8, r3
 800ca06:	f340 80fb 	ble.w	800cc00 <__ieee754_pow+0x400>
 800ca0a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ca0e:	4598      	cmp	r8, r3
 800ca10:	4b13      	ldr	r3, [pc, #76]	; (800ca60 <__ieee754_pow+0x260>)
 800ca12:	dd0c      	ble.n	800ca2e <__ieee754_pow+0x22e>
 800ca14:	429c      	cmp	r4, r3
 800ca16:	dc0f      	bgt.n	800ca38 <__ieee754_pow+0x238>
 800ca18:	f1b9 0f00 	cmp.w	r9, #0
 800ca1c:	da0f      	bge.n	800ca3e <__ieee754_pow+0x23e>
 800ca1e:	2000      	movs	r0, #0
 800ca20:	b009      	add	sp, #36	; 0x24
 800ca22:	ecbd 8b06 	vpop	{d8-d10}
 800ca26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca2a:	f000 bcf6 	b.w	800d41a <__math_oflow>
 800ca2e:	429c      	cmp	r4, r3
 800ca30:	dbf2      	blt.n	800ca18 <__ieee754_pow+0x218>
 800ca32:	4b0a      	ldr	r3, [pc, #40]	; (800ca5c <__ieee754_pow+0x25c>)
 800ca34:	429c      	cmp	r4, r3
 800ca36:	dd19      	ble.n	800ca6c <__ieee754_pow+0x26c>
 800ca38:	f1b9 0f00 	cmp.w	r9, #0
 800ca3c:	dcef      	bgt.n	800ca1e <__ieee754_pow+0x21e>
 800ca3e:	2000      	movs	r0, #0
 800ca40:	b009      	add	sp, #36	; 0x24
 800ca42:	ecbd 8b06 	vpop	{d8-d10}
 800ca46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca4a:	f000 bcdd 	b.w	800d408 <__math_uflow>
 800ca4e:	bf00      	nop
 800ca50:	fff00000 	.word	0xfff00000
 800ca54:	7ff00000 	.word	0x7ff00000
 800ca58:	433fffff 	.word	0x433fffff
 800ca5c:	3ff00000 	.word	0x3ff00000
 800ca60:	3fefffff 	.word	0x3fefffff
 800ca64:	3fe00000 	.word	0x3fe00000
 800ca68:	41e00000 	.word	0x41e00000
 800ca6c:	2200      	movs	r2, #0
 800ca6e:	4b60      	ldr	r3, [pc, #384]	; (800cbf0 <__ieee754_pow+0x3f0>)
 800ca70:	f7f3 fc0e 	bl	8000290 <__aeabi_dsub>
 800ca74:	4604      	mov	r4, r0
 800ca76:	460d      	mov	r5, r1
 800ca78:	a353      	add	r3, pc, #332	; (adr r3, 800cbc8 <__ieee754_pow+0x3c8>)
 800ca7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca7e:	f7f3 fdbf 	bl	8000600 <__aeabi_dmul>
 800ca82:	4606      	mov	r6, r0
 800ca84:	460f      	mov	r7, r1
 800ca86:	4620      	mov	r0, r4
 800ca88:	4629      	mov	r1, r5
 800ca8a:	a351      	add	r3, pc, #324	; (adr r3, 800cbd0 <__ieee754_pow+0x3d0>)
 800ca8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca90:	f7f3 fdb6 	bl	8000600 <__aeabi_dmul>
 800ca94:	2200      	movs	r2, #0
 800ca96:	4682      	mov	sl, r0
 800ca98:	468b      	mov	fp, r1
 800ca9a:	4b56      	ldr	r3, [pc, #344]	; (800cbf4 <__ieee754_pow+0x3f4>)
 800ca9c:	4620      	mov	r0, r4
 800ca9e:	4629      	mov	r1, r5
 800caa0:	f7f3 fdae 	bl	8000600 <__aeabi_dmul>
 800caa4:	4602      	mov	r2, r0
 800caa6:	460b      	mov	r3, r1
 800caa8:	a14b      	add	r1, pc, #300	; (adr r1, 800cbd8 <__ieee754_pow+0x3d8>)
 800caaa:	e9d1 0100 	ldrd	r0, r1, [r1]
 800caae:	f7f3 fbef 	bl	8000290 <__aeabi_dsub>
 800cab2:	4622      	mov	r2, r4
 800cab4:	462b      	mov	r3, r5
 800cab6:	f7f3 fda3 	bl	8000600 <__aeabi_dmul>
 800caba:	4602      	mov	r2, r0
 800cabc:	460b      	mov	r3, r1
 800cabe:	2000      	movs	r0, #0
 800cac0:	494d      	ldr	r1, [pc, #308]	; (800cbf8 <__ieee754_pow+0x3f8>)
 800cac2:	f7f3 fbe5 	bl	8000290 <__aeabi_dsub>
 800cac6:	4680      	mov	r8, r0
 800cac8:	4689      	mov	r9, r1
 800caca:	4622      	mov	r2, r4
 800cacc:	462b      	mov	r3, r5
 800cace:	4620      	mov	r0, r4
 800cad0:	4629      	mov	r1, r5
 800cad2:	f7f3 fd95 	bl	8000600 <__aeabi_dmul>
 800cad6:	4602      	mov	r2, r0
 800cad8:	460b      	mov	r3, r1
 800cada:	4640      	mov	r0, r8
 800cadc:	4649      	mov	r1, r9
 800cade:	f7f3 fd8f 	bl	8000600 <__aeabi_dmul>
 800cae2:	a33f      	add	r3, pc, #252	; (adr r3, 800cbe0 <__ieee754_pow+0x3e0>)
 800cae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae8:	f7f3 fd8a 	bl	8000600 <__aeabi_dmul>
 800caec:	4602      	mov	r2, r0
 800caee:	460b      	mov	r3, r1
 800caf0:	4650      	mov	r0, sl
 800caf2:	4659      	mov	r1, fp
 800caf4:	f7f3 fbcc 	bl	8000290 <__aeabi_dsub>
 800caf8:	4602      	mov	r2, r0
 800cafa:	460b      	mov	r3, r1
 800cafc:	4680      	mov	r8, r0
 800cafe:	4689      	mov	r9, r1
 800cb00:	4630      	mov	r0, r6
 800cb02:	4639      	mov	r1, r7
 800cb04:	f7f3 fbc6 	bl	8000294 <__adddf3>
 800cb08:	2000      	movs	r0, #0
 800cb0a:	4632      	mov	r2, r6
 800cb0c:	463b      	mov	r3, r7
 800cb0e:	4604      	mov	r4, r0
 800cb10:	460d      	mov	r5, r1
 800cb12:	f7f3 fbbd 	bl	8000290 <__aeabi_dsub>
 800cb16:	4602      	mov	r2, r0
 800cb18:	460b      	mov	r3, r1
 800cb1a:	4640      	mov	r0, r8
 800cb1c:	4649      	mov	r1, r9
 800cb1e:	f7f3 fbb7 	bl	8000290 <__aeabi_dsub>
 800cb22:	9b04      	ldr	r3, [sp, #16]
 800cb24:	9a06      	ldr	r2, [sp, #24]
 800cb26:	4682      	mov	sl, r0
 800cb28:	3b01      	subs	r3, #1
 800cb2a:	468b      	mov	fp, r1
 800cb2c:	4313      	orrs	r3, r2
 800cb2e:	f040 81e7 	bne.w	800cf00 <__ieee754_pow+0x700>
 800cb32:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800cbe8 <__ieee754_pow+0x3e8>
 800cb36:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cb3a:	2600      	movs	r6, #0
 800cb3c:	eeb0 8a47 	vmov.f32	s16, s14
 800cb40:	eef0 8a67 	vmov.f32	s17, s15
 800cb44:	463b      	mov	r3, r7
 800cb46:	4632      	mov	r2, r6
 800cb48:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cb4c:	f7f3 fba0 	bl	8000290 <__aeabi_dsub>
 800cb50:	4622      	mov	r2, r4
 800cb52:	462b      	mov	r3, r5
 800cb54:	f7f3 fd54 	bl	8000600 <__aeabi_dmul>
 800cb58:	4680      	mov	r8, r0
 800cb5a:	4689      	mov	r9, r1
 800cb5c:	4650      	mov	r0, sl
 800cb5e:	4659      	mov	r1, fp
 800cb60:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cb64:	f7f3 fd4c 	bl	8000600 <__aeabi_dmul>
 800cb68:	4602      	mov	r2, r0
 800cb6a:	460b      	mov	r3, r1
 800cb6c:	4640      	mov	r0, r8
 800cb6e:	4649      	mov	r1, r9
 800cb70:	f7f3 fb90 	bl	8000294 <__adddf3>
 800cb74:	4680      	mov	r8, r0
 800cb76:	4689      	mov	r9, r1
 800cb78:	4632      	mov	r2, r6
 800cb7a:	463b      	mov	r3, r7
 800cb7c:	4620      	mov	r0, r4
 800cb7e:	4629      	mov	r1, r5
 800cb80:	f7f3 fd3e 	bl	8000600 <__aeabi_dmul>
 800cb84:	460b      	mov	r3, r1
 800cb86:	4604      	mov	r4, r0
 800cb88:	460d      	mov	r5, r1
 800cb8a:	4602      	mov	r2, r0
 800cb8c:	4649      	mov	r1, r9
 800cb8e:	4640      	mov	r0, r8
 800cb90:	f7f3 fb80 	bl	8000294 <__adddf3>
 800cb94:	4b19      	ldr	r3, [pc, #100]	; (800cbfc <__ieee754_pow+0x3fc>)
 800cb96:	4606      	mov	r6, r0
 800cb98:	460f      	mov	r7, r1
 800cb9a:	4299      	cmp	r1, r3
 800cb9c:	468b      	mov	fp, r1
 800cb9e:	ec45 4b19 	vmov	d9, r4, r5
 800cba2:	f340 82f2 	ble.w	800d18a <__ieee754_pow+0x98a>
 800cba6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800cbaa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800cbae:	4303      	orrs	r3, r0
 800cbb0:	f000 81e4 	beq.w	800cf7c <__ieee754_pow+0x77c>
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	2300      	movs	r3, #0
 800cbb8:	ec51 0b18 	vmov	r0, r1, d8
 800cbbc:	f7f3 ff92 	bl	8000ae4 <__aeabi_dcmplt>
 800cbc0:	3800      	subs	r0, #0
 800cbc2:	bf18      	it	ne
 800cbc4:	2001      	movne	r0, #1
 800cbc6:	e72b      	b.n	800ca20 <__ieee754_pow+0x220>
 800cbc8:	60000000 	.word	0x60000000
 800cbcc:	3ff71547 	.word	0x3ff71547
 800cbd0:	f85ddf44 	.word	0xf85ddf44
 800cbd4:	3e54ae0b 	.word	0x3e54ae0b
 800cbd8:	55555555 	.word	0x55555555
 800cbdc:	3fd55555 	.word	0x3fd55555
 800cbe0:	652b82fe 	.word	0x652b82fe
 800cbe4:	3ff71547 	.word	0x3ff71547
 800cbe8:	00000000 	.word	0x00000000
 800cbec:	bff00000 	.word	0xbff00000
 800cbf0:	3ff00000 	.word	0x3ff00000
 800cbf4:	3fd00000 	.word	0x3fd00000
 800cbf8:	3fe00000 	.word	0x3fe00000
 800cbfc:	408fffff 	.word	0x408fffff
 800cc00:	4bd5      	ldr	r3, [pc, #852]	; (800cf58 <__ieee754_pow+0x758>)
 800cc02:	2200      	movs	r2, #0
 800cc04:	402b      	ands	r3, r5
 800cc06:	b92b      	cbnz	r3, 800cc14 <__ieee754_pow+0x414>
 800cc08:	4bd4      	ldr	r3, [pc, #848]	; (800cf5c <__ieee754_pow+0x75c>)
 800cc0a:	f7f3 fcf9 	bl	8000600 <__aeabi_dmul>
 800cc0e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800cc12:	460c      	mov	r4, r1
 800cc14:	1523      	asrs	r3, r4, #20
 800cc16:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800cc1a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800cc1e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800cc22:	4413      	add	r3, r2
 800cc24:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800cc28:	9305      	str	r3, [sp, #20]
 800cc2a:	4bcd      	ldr	r3, [pc, #820]	; (800cf60 <__ieee754_pow+0x760>)
 800cc2c:	429c      	cmp	r4, r3
 800cc2e:	dd08      	ble.n	800cc42 <__ieee754_pow+0x442>
 800cc30:	4bcc      	ldr	r3, [pc, #816]	; (800cf64 <__ieee754_pow+0x764>)
 800cc32:	429c      	cmp	r4, r3
 800cc34:	f340 8162 	ble.w	800cefc <__ieee754_pow+0x6fc>
 800cc38:	9b05      	ldr	r3, [sp, #20]
 800cc3a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800cc3e:	3301      	adds	r3, #1
 800cc40:	9305      	str	r3, [sp, #20]
 800cc42:	2400      	movs	r4, #0
 800cc44:	00e3      	lsls	r3, r4, #3
 800cc46:	4682      	mov	sl, r0
 800cc48:	4629      	mov	r1, r5
 800cc4a:	46ab      	mov	fp, r5
 800cc4c:	9307      	str	r3, [sp, #28]
 800cc4e:	4bc6      	ldr	r3, [pc, #792]	; (800cf68 <__ieee754_pow+0x768>)
 800cc50:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cc54:	ed93 7b00 	vldr	d7, [r3]
 800cc58:	eeb0 9a47 	vmov.f32	s18, s14
 800cc5c:	eef0 9a67 	vmov.f32	s19, s15
 800cc60:	ec53 2b17 	vmov	r2, r3, d7
 800cc64:	f7f3 fb14 	bl	8000290 <__aeabi_dsub>
 800cc68:	4652      	mov	r2, sl
 800cc6a:	4606      	mov	r6, r0
 800cc6c:	460f      	mov	r7, r1
 800cc6e:	462b      	mov	r3, r5
 800cc70:	106d      	asrs	r5, r5, #1
 800cc72:	ec51 0b19 	vmov	r0, r1, d9
 800cc76:	f7f3 fb0d 	bl	8000294 <__adddf3>
 800cc7a:	4602      	mov	r2, r0
 800cc7c:	460b      	mov	r3, r1
 800cc7e:	2000      	movs	r0, #0
 800cc80:	49ba      	ldr	r1, [pc, #744]	; (800cf6c <__ieee754_pow+0x76c>)
 800cc82:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800cc86:	f7f3 fde5 	bl	8000854 <__aeabi_ddiv>
 800cc8a:	4602      	mov	r2, r0
 800cc8c:	460b      	mov	r3, r1
 800cc8e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800cc92:	ec41 0b1a 	vmov	d10, r0, r1
 800cc96:	4630      	mov	r0, r6
 800cc98:	4639      	mov	r1, r7
 800cc9a:	f7f3 fcb1 	bl	8000600 <__aeabi_dmul>
 800cc9e:	2300      	movs	r3, #0
 800cca0:	2200      	movs	r2, #0
 800cca2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cca6:	9302      	str	r3, [sp, #8]
 800cca8:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ccac:	4614      	mov	r4, r2
 800ccae:	461d      	mov	r5, r3
 800ccb0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ccb4:	ec41 0b18 	vmov	d8, r0, r1
 800ccb8:	4640      	mov	r0, r8
 800ccba:	4649      	mov	r1, r9
 800ccbc:	f7f3 fca0 	bl	8000600 <__aeabi_dmul>
 800ccc0:	4602      	mov	r2, r0
 800ccc2:	460b      	mov	r3, r1
 800ccc4:	4630      	mov	r0, r6
 800ccc6:	4639      	mov	r1, r7
 800ccc8:	f7f3 fae2 	bl	8000290 <__aeabi_dsub>
 800cccc:	4606      	mov	r6, r0
 800ccce:	460f      	mov	r7, r1
 800ccd0:	4620      	mov	r0, r4
 800ccd2:	4629      	mov	r1, r5
 800ccd4:	ec53 2b19 	vmov	r2, r3, d9
 800ccd8:	f7f3 fada 	bl	8000290 <__aeabi_dsub>
 800ccdc:	4602      	mov	r2, r0
 800ccde:	460b      	mov	r3, r1
 800cce0:	4650      	mov	r0, sl
 800cce2:	4659      	mov	r1, fp
 800cce4:	f7f3 fad4 	bl	8000290 <__aeabi_dsub>
 800cce8:	4642      	mov	r2, r8
 800ccea:	464b      	mov	r3, r9
 800ccec:	f7f3 fc88 	bl	8000600 <__aeabi_dmul>
 800ccf0:	4602      	mov	r2, r0
 800ccf2:	460b      	mov	r3, r1
 800ccf4:	4630      	mov	r0, r6
 800ccf6:	4639      	mov	r1, r7
 800ccf8:	f7f3 faca 	bl	8000290 <__aeabi_dsub>
 800ccfc:	ec53 2b1a 	vmov	r2, r3, d10
 800cd00:	f7f3 fc7e 	bl	8000600 <__aeabi_dmul>
 800cd04:	ec53 2b18 	vmov	r2, r3, d8
 800cd08:	ec41 0b19 	vmov	d9, r0, r1
 800cd0c:	ec51 0b18 	vmov	r0, r1, d8
 800cd10:	f7f3 fc76 	bl	8000600 <__aeabi_dmul>
 800cd14:	4604      	mov	r4, r0
 800cd16:	460d      	mov	r5, r1
 800cd18:	a37b      	add	r3, pc, #492	; (adr r3, 800cf08 <__ieee754_pow+0x708>)
 800cd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd1e:	f7f3 fc6f 	bl	8000600 <__aeabi_dmul>
 800cd22:	a37b      	add	r3, pc, #492	; (adr r3, 800cf10 <__ieee754_pow+0x710>)
 800cd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd28:	f7f3 fab4 	bl	8000294 <__adddf3>
 800cd2c:	4622      	mov	r2, r4
 800cd2e:	462b      	mov	r3, r5
 800cd30:	f7f3 fc66 	bl	8000600 <__aeabi_dmul>
 800cd34:	a378      	add	r3, pc, #480	; (adr r3, 800cf18 <__ieee754_pow+0x718>)
 800cd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd3a:	f7f3 faab 	bl	8000294 <__adddf3>
 800cd3e:	4622      	mov	r2, r4
 800cd40:	462b      	mov	r3, r5
 800cd42:	f7f3 fc5d 	bl	8000600 <__aeabi_dmul>
 800cd46:	a376      	add	r3, pc, #472	; (adr r3, 800cf20 <__ieee754_pow+0x720>)
 800cd48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd4c:	f7f3 faa2 	bl	8000294 <__adddf3>
 800cd50:	4622      	mov	r2, r4
 800cd52:	462b      	mov	r3, r5
 800cd54:	f7f3 fc54 	bl	8000600 <__aeabi_dmul>
 800cd58:	a373      	add	r3, pc, #460	; (adr r3, 800cf28 <__ieee754_pow+0x728>)
 800cd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd5e:	f7f3 fa99 	bl	8000294 <__adddf3>
 800cd62:	4622      	mov	r2, r4
 800cd64:	462b      	mov	r3, r5
 800cd66:	f7f3 fc4b 	bl	8000600 <__aeabi_dmul>
 800cd6a:	a371      	add	r3, pc, #452	; (adr r3, 800cf30 <__ieee754_pow+0x730>)
 800cd6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd70:	f7f3 fa90 	bl	8000294 <__adddf3>
 800cd74:	4606      	mov	r6, r0
 800cd76:	460f      	mov	r7, r1
 800cd78:	4622      	mov	r2, r4
 800cd7a:	462b      	mov	r3, r5
 800cd7c:	4620      	mov	r0, r4
 800cd7e:	4629      	mov	r1, r5
 800cd80:	f7f3 fc3e 	bl	8000600 <__aeabi_dmul>
 800cd84:	4602      	mov	r2, r0
 800cd86:	460b      	mov	r3, r1
 800cd88:	4630      	mov	r0, r6
 800cd8a:	4639      	mov	r1, r7
 800cd8c:	f7f3 fc38 	bl	8000600 <__aeabi_dmul>
 800cd90:	4642      	mov	r2, r8
 800cd92:	4604      	mov	r4, r0
 800cd94:	460d      	mov	r5, r1
 800cd96:	464b      	mov	r3, r9
 800cd98:	ec51 0b18 	vmov	r0, r1, d8
 800cd9c:	f7f3 fa7a 	bl	8000294 <__adddf3>
 800cda0:	ec53 2b19 	vmov	r2, r3, d9
 800cda4:	f7f3 fc2c 	bl	8000600 <__aeabi_dmul>
 800cda8:	4622      	mov	r2, r4
 800cdaa:	462b      	mov	r3, r5
 800cdac:	f7f3 fa72 	bl	8000294 <__adddf3>
 800cdb0:	4642      	mov	r2, r8
 800cdb2:	4682      	mov	sl, r0
 800cdb4:	468b      	mov	fp, r1
 800cdb6:	464b      	mov	r3, r9
 800cdb8:	4640      	mov	r0, r8
 800cdba:	4649      	mov	r1, r9
 800cdbc:	f7f3 fc20 	bl	8000600 <__aeabi_dmul>
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	4b6b      	ldr	r3, [pc, #428]	; (800cf70 <__ieee754_pow+0x770>)
 800cdc4:	4606      	mov	r6, r0
 800cdc6:	460f      	mov	r7, r1
 800cdc8:	f7f3 fa64 	bl	8000294 <__adddf3>
 800cdcc:	4652      	mov	r2, sl
 800cdce:	465b      	mov	r3, fp
 800cdd0:	f7f3 fa60 	bl	8000294 <__adddf3>
 800cdd4:	2000      	movs	r0, #0
 800cdd6:	460d      	mov	r5, r1
 800cdd8:	460b      	mov	r3, r1
 800cdda:	4604      	mov	r4, r0
 800cddc:	4602      	mov	r2, r0
 800cdde:	4649      	mov	r1, r9
 800cde0:	4640      	mov	r0, r8
 800cde2:	f7f3 fc0d 	bl	8000600 <__aeabi_dmul>
 800cde6:	2200      	movs	r2, #0
 800cde8:	4680      	mov	r8, r0
 800cdea:	4689      	mov	r9, r1
 800cdec:	4b60      	ldr	r3, [pc, #384]	; (800cf70 <__ieee754_pow+0x770>)
 800cdee:	4620      	mov	r0, r4
 800cdf0:	4629      	mov	r1, r5
 800cdf2:	f7f3 fa4d 	bl	8000290 <__aeabi_dsub>
 800cdf6:	4632      	mov	r2, r6
 800cdf8:	463b      	mov	r3, r7
 800cdfa:	f7f3 fa49 	bl	8000290 <__aeabi_dsub>
 800cdfe:	4602      	mov	r2, r0
 800ce00:	460b      	mov	r3, r1
 800ce02:	4650      	mov	r0, sl
 800ce04:	4659      	mov	r1, fp
 800ce06:	f7f3 fa43 	bl	8000290 <__aeabi_dsub>
 800ce0a:	ec53 2b18 	vmov	r2, r3, d8
 800ce0e:	f7f3 fbf7 	bl	8000600 <__aeabi_dmul>
 800ce12:	4606      	mov	r6, r0
 800ce14:	460f      	mov	r7, r1
 800ce16:	4622      	mov	r2, r4
 800ce18:	462b      	mov	r3, r5
 800ce1a:	ec51 0b19 	vmov	r0, r1, d9
 800ce1e:	f7f3 fbef 	bl	8000600 <__aeabi_dmul>
 800ce22:	4602      	mov	r2, r0
 800ce24:	460b      	mov	r3, r1
 800ce26:	4630      	mov	r0, r6
 800ce28:	4639      	mov	r1, r7
 800ce2a:	f7f3 fa33 	bl	8000294 <__adddf3>
 800ce2e:	4606      	mov	r6, r0
 800ce30:	460f      	mov	r7, r1
 800ce32:	4602      	mov	r2, r0
 800ce34:	460b      	mov	r3, r1
 800ce36:	4640      	mov	r0, r8
 800ce38:	4649      	mov	r1, r9
 800ce3a:	f7f3 fa2b 	bl	8000294 <__adddf3>
 800ce3e:	2000      	movs	r0, #0
 800ce40:	460d      	mov	r5, r1
 800ce42:	4604      	mov	r4, r0
 800ce44:	a33c      	add	r3, pc, #240	; (adr r3, 800cf38 <__ieee754_pow+0x738>)
 800ce46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce4a:	f7f3 fbd9 	bl	8000600 <__aeabi_dmul>
 800ce4e:	4642      	mov	r2, r8
 800ce50:	464b      	mov	r3, r9
 800ce52:	ec41 0b18 	vmov	d8, r0, r1
 800ce56:	4620      	mov	r0, r4
 800ce58:	4629      	mov	r1, r5
 800ce5a:	f7f3 fa19 	bl	8000290 <__aeabi_dsub>
 800ce5e:	4602      	mov	r2, r0
 800ce60:	460b      	mov	r3, r1
 800ce62:	4630      	mov	r0, r6
 800ce64:	4639      	mov	r1, r7
 800ce66:	f7f3 fa13 	bl	8000290 <__aeabi_dsub>
 800ce6a:	a335      	add	r3, pc, #212	; (adr r3, 800cf40 <__ieee754_pow+0x740>)
 800ce6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce70:	f7f3 fbc6 	bl	8000600 <__aeabi_dmul>
 800ce74:	4606      	mov	r6, r0
 800ce76:	460f      	mov	r7, r1
 800ce78:	4620      	mov	r0, r4
 800ce7a:	4629      	mov	r1, r5
 800ce7c:	a332      	add	r3, pc, #200	; (adr r3, 800cf48 <__ieee754_pow+0x748>)
 800ce7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce82:	f7f3 fbbd 	bl	8000600 <__aeabi_dmul>
 800ce86:	4602      	mov	r2, r0
 800ce88:	460b      	mov	r3, r1
 800ce8a:	4630      	mov	r0, r6
 800ce8c:	4639      	mov	r1, r7
 800ce8e:	f7f3 fa01 	bl	8000294 <__adddf3>
 800ce92:	9a07      	ldr	r2, [sp, #28]
 800ce94:	4b37      	ldr	r3, [pc, #220]	; (800cf74 <__ieee754_pow+0x774>)
 800ce96:	4413      	add	r3, r2
 800ce98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce9c:	f7f3 f9fa 	bl	8000294 <__adddf3>
 800cea0:	4682      	mov	sl, r0
 800cea2:	9805      	ldr	r0, [sp, #20]
 800cea4:	468b      	mov	fp, r1
 800cea6:	f7f3 fb41 	bl	800052c <__aeabi_i2d>
 800ceaa:	9a07      	ldr	r2, [sp, #28]
 800ceac:	4b32      	ldr	r3, [pc, #200]	; (800cf78 <__ieee754_pow+0x778>)
 800ceae:	4606      	mov	r6, r0
 800ceb0:	460f      	mov	r7, r1
 800ceb2:	4413      	add	r3, r2
 800ceb4:	4652      	mov	r2, sl
 800ceb6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ceba:	ec51 0b18 	vmov	r0, r1, d8
 800cebe:	465b      	mov	r3, fp
 800cec0:	f7f3 f9e8 	bl	8000294 <__adddf3>
 800cec4:	4642      	mov	r2, r8
 800cec6:	464b      	mov	r3, r9
 800cec8:	f7f3 f9e4 	bl	8000294 <__adddf3>
 800cecc:	4632      	mov	r2, r6
 800cece:	463b      	mov	r3, r7
 800ced0:	f7f3 f9e0 	bl	8000294 <__adddf3>
 800ced4:	2000      	movs	r0, #0
 800ced6:	4632      	mov	r2, r6
 800ced8:	463b      	mov	r3, r7
 800ceda:	4604      	mov	r4, r0
 800cedc:	460d      	mov	r5, r1
 800cede:	f7f3 f9d7 	bl	8000290 <__aeabi_dsub>
 800cee2:	4642      	mov	r2, r8
 800cee4:	464b      	mov	r3, r9
 800cee6:	f7f3 f9d3 	bl	8000290 <__aeabi_dsub>
 800ceea:	ec53 2b18 	vmov	r2, r3, d8
 800ceee:	f7f3 f9cf 	bl	8000290 <__aeabi_dsub>
 800cef2:	4602      	mov	r2, r0
 800cef4:	460b      	mov	r3, r1
 800cef6:	4650      	mov	r0, sl
 800cef8:	4659      	mov	r1, fp
 800cefa:	e610      	b.n	800cb1e <__ieee754_pow+0x31e>
 800cefc:	2401      	movs	r4, #1
 800cefe:	e6a1      	b.n	800cc44 <__ieee754_pow+0x444>
 800cf00:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800cf50 <__ieee754_pow+0x750>
 800cf04:	e617      	b.n	800cb36 <__ieee754_pow+0x336>
 800cf06:	bf00      	nop
 800cf08:	4a454eef 	.word	0x4a454eef
 800cf0c:	3fca7e28 	.word	0x3fca7e28
 800cf10:	93c9db65 	.word	0x93c9db65
 800cf14:	3fcd864a 	.word	0x3fcd864a
 800cf18:	a91d4101 	.word	0xa91d4101
 800cf1c:	3fd17460 	.word	0x3fd17460
 800cf20:	518f264d 	.word	0x518f264d
 800cf24:	3fd55555 	.word	0x3fd55555
 800cf28:	db6fabff 	.word	0xdb6fabff
 800cf2c:	3fdb6db6 	.word	0x3fdb6db6
 800cf30:	33333303 	.word	0x33333303
 800cf34:	3fe33333 	.word	0x3fe33333
 800cf38:	e0000000 	.word	0xe0000000
 800cf3c:	3feec709 	.word	0x3feec709
 800cf40:	dc3a03fd 	.word	0xdc3a03fd
 800cf44:	3feec709 	.word	0x3feec709
 800cf48:	145b01f5 	.word	0x145b01f5
 800cf4c:	be3e2fe0 	.word	0xbe3e2fe0
 800cf50:	00000000 	.word	0x00000000
 800cf54:	3ff00000 	.word	0x3ff00000
 800cf58:	7ff00000 	.word	0x7ff00000
 800cf5c:	43400000 	.word	0x43400000
 800cf60:	0003988e 	.word	0x0003988e
 800cf64:	000bb679 	.word	0x000bb679
 800cf68:	0800d788 	.word	0x0800d788
 800cf6c:	3ff00000 	.word	0x3ff00000
 800cf70:	40080000 	.word	0x40080000
 800cf74:	0800d7a8 	.word	0x0800d7a8
 800cf78:	0800d798 	.word	0x0800d798
 800cf7c:	a3b5      	add	r3, pc, #724	; (adr r3, 800d254 <__ieee754_pow+0xa54>)
 800cf7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf82:	4640      	mov	r0, r8
 800cf84:	4649      	mov	r1, r9
 800cf86:	f7f3 f985 	bl	8000294 <__adddf3>
 800cf8a:	4622      	mov	r2, r4
 800cf8c:	462b      	mov	r3, r5
 800cf8e:	ec41 0b1a 	vmov	d10, r0, r1
 800cf92:	4630      	mov	r0, r6
 800cf94:	4639      	mov	r1, r7
 800cf96:	f7f3 f97b 	bl	8000290 <__aeabi_dsub>
 800cf9a:	4602      	mov	r2, r0
 800cf9c:	460b      	mov	r3, r1
 800cf9e:	ec51 0b1a 	vmov	r0, r1, d10
 800cfa2:	f7f3 fdbd 	bl	8000b20 <__aeabi_dcmpgt>
 800cfa6:	2800      	cmp	r0, #0
 800cfa8:	f47f ae04 	bne.w	800cbb4 <__ieee754_pow+0x3b4>
 800cfac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cfb0:	4aa3      	ldr	r2, [pc, #652]	; (800d240 <__ieee754_pow+0xa40>)
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	f340 8109 	ble.w	800d1ca <__ieee754_pow+0x9ca>
 800cfb8:	151b      	asrs	r3, r3, #20
 800cfba:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800cfbe:	4ea1      	ldr	r6, [pc, #644]	; (800d244 <__ieee754_pow+0xa44>)
 800cfc0:	2000      	movs	r0, #0
 800cfc2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800cfc6:	f1bb 0f00 	cmp.w	fp, #0
 800cfca:	fa4a f303 	asr.w	r3, sl, r3
 800cfce:	445b      	add	r3, fp
 800cfd0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800cfd4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800cfd8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800cfdc:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800cfe0:	fa46 f602 	asr.w	r6, r6, r2
 800cfe4:	f1c2 0214 	rsb	r2, r2, #20
 800cfe8:	ea23 0106 	bic.w	r1, r3, r6
 800cfec:	fa4a fa02 	asr.w	sl, sl, r2
 800cff0:	4602      	mov	r2, r0
 800cff2:	4620      	mov	r0, r4
 800cff4:	460b      	mov	r3, r1
 800cff6:	4629      	mov	r1, r5
 800cff8:	bfb8      	it	lt
 800cffa:	f1ca 0a00 	rsblt	sl, sl, #0
 800cffe:	f7f3 f947 	bl	8000290 <__aeabi_dsub>
 800d002:	ec41 0b19 	vmov	d9, r0, r1
 800d006:	4642      	mov	r2, r8
 800d008:	464b      	mov	r3, r9
 800d00a:	ec51 0b19 	vmov	r0, r1, d9
 800d00e:	f7f3 f941 	bl	8000294 <__adddf3>
 800d012:	2000      	movs	r0, #0
 800d014:	460d      	mov	r5, r1
 800d016:	4604      	mov	r4, r0
 800d018:	a379      	add	r3, pc, #484	; (adr r3, 800d200 <__ieee754_pow+0xa00>)
 800d01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d01e:	f7f3 faef 	bl	8000600 <__aeabi_dmul>
 800d022:	4606      	mov	r6, r0
 800d024:	460f      	mov	r7, r1
 800d026:	4620      	mov	r0, r4
 800d028:	4629      	mov	r1, r5
 800d02a:	ec53 2b19 	vmov	r2, r3, d9
 800d02e:	f7f3 f92f 	bl	8000290 <__aeabi_dsub>
 800d032:	4602      	mov	r2, r0
 800d034:	460b      	mov	r3, r1
 800d036:	4640      	mov	r0, r8
 800d038:	4649      	mov	r1, r9
 800d03a:	f7f3 f929 	bl	8000290 <__aeabi_dsub>
 800d03e:	a372      	add	r3, pc, #456	; (adr r3, 800d208 <__ieee754_pow+0xa08>)
 800d040:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d044:	f7f3 fadc 	bl	8000600 <__aeabi_dmul>
 800d048:	4680      	mov	r8, r0
 800d04a:	4689      	mov	r9, r1
 800d04c:	4620      	mov	r0, r4
 800d04e:	4629      	mov	r1, r5
 800d050:	a36f      	add	r3, pc, #444	; (adr r3, 800d210 <__ieee754_pow+0xa10>)
 800d052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d056:	f7f3 fad3 	bl	8000600 <__aeabi_dmul>
 800d05a:	4602      	mov	r2, r0
 800d05c:	460b      	mov	r3, r1
 800d05e:	4640      	mov	r0, r8
 800d060:	4649      	mov	r1, r9
 800d062:	f7f3 f917 	bl	8000294 <__adddf3>
 800d066:	4604      	mov	r4, r0
 800d068:	460d      	mov	r5, r1
 800d06a:	4602      	mov	r2, r0
 800d06c:	460b      	mov	r3, r1
 800d06e:	4630      	mov	r0, r6
 800d070:	4639      	mov	r1, r7
 800d072:	f7f3 f90f 	bl	8000294 <__adddf3>
 800d076:	4632      	mov	r2, r6
 800d078:	4680      	mov	r8, r0
 800d07a:	4689      	mov	r9, r1
 800d07c:	463b      	mov	r3, r7
 800d07e:	f7f3 f907 	bl	8000290 <__aeabi_dsub>
 800d082:	4602      	mov	r2, r0
 800d084:	460b      	mov	r3, r1
 800d086:	4620      	mov	r0, r4
 800d088:	4629      	mov	r1, r5
 800d08a:	f7f3 f901 	bl	8000290 <__aeabi_dsub>
 800d08e:	4642      	mov	r2, r8
 800d090:	4606      	mov	r6, r0
 800d092:	460f      	mov	r7, r1
 800d094:	464b      	mov	r3, r9
 800d096:	4640      	mov	r0, r8
 800d098:	4649      	mov	r1, r9
 800d09a:	f7f3 fab1 	bl	8000600 <__aeabi_dmul>
 800d09e:	4604      	mov	r4, r0
 800d0a0:	460d      	mov	r5, r1
 800d0a2:	a35d      	add	r3, pc, #372	; (adr r3, 800d218 <__ieee754_pow+0xa18>)
 800d0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0a8:	f7f3 faaa 	bl	8000600 <__aeabi_dmul>
 800d0ac:	a35c      	add	r3, pc, #368	; (adr r3, 800d220 <__ieee754_pow+0xa20>)
 800d0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0b2:	f7f3 f8ed 	bl	8000290 <__aeabi_dsub>
 800d0b6:	4622      	mov	r2, r4
 800d0b8:	462b      	mov	r3, r5
 800d0ba:	f7f3 faa1 	bl	8000600 <__aeabi_dmul>
 800d0be:	a35a      	add	r3, pc, #360	; (adr r3, 800d228 <__ieee754_pow+0xa28>)
 800d0c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0c4:	f7f3 f8e6 	bl	8000294 <__adddf3>
 800d0c8:	4622      	mov	r2, r4
 800d0ca:	462b      	mov	r3, r5
 800d0cc:	f7f3 fa98 	bl	8000600 <__aeabi_dmul>
 800d0d0:	a357      	add	r3, pc, #348	; (adr r3, 800d230 <__ieee754_pow+0xa30>)
 800d0d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0d6:	f7f3 f8db 	bl	8000290 <__aeabi_dsub>
 800d0da:	4622      	mov	r2, r4
 800d0dc:	462b      	mov	r3, r5
 800d0de:	f7f3 fa8f 	bl	8000600 <__aeabi_dmul>
 800d0e2:	a355      	add	r3, pc, #340	; (adr r3, 800d238 <__ieee754_pow+0xa38>)
 800d0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0e8:	f7f3 f8d4 	bl	8000294 <__adddf3>
 800d0ec:	4622      	mov	r2, r4
 800d0ee:	462b      	mov	r3, r5
 800d0f0:	f7f3 fa86 	bl	8000600 <__aeabi_dmul>
 800d0f4:	4602      	mov	r2, r0
 800d0f6:	460b      	mov	r3, r1
 800d0f8:	4640      	mov	r0, r8
 800d0fa:	4649      	mov	r1, r9
 800d0fc:	f7f3 f8c8 	bl	8000290 <__aeabi_dsub>
 800d100:	4604      	mov	r4, r0
 800d102:	460d      	mov	r5, r1
 800d104:	4602      	mov	r2, r0
 800d106:	460b      	mov	r3, r1
 800d108:	4640      	mov	r0, r8
 800d10a:	4649      	mov	r1, r9
 800d10c:	f7f3 fa78 	bl	8000600 <__aeabi_dmul>
 800d110:	2200      	movs	r2, #0
 800d112:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d116:	ec41 0b19 	vmov	d9, r0, r1
 800d11a:	4620      	mov	r0, r4
 800d11c:	4629      	mov	r1, r5
 800d11e:	f7f3 f8b7 	bl	8000290 <__aeabi_dsub>
 800d122:	4602      	mov	r2, r0
 800d124:	460b      	mov	r3, r1
 800d126:	ec51 0b19 	vmov	r0, r1, d9
 800d12a:	f7f3 fb93 	bl	8000854 <__aeabi_ddiv>
 800d12e:	4632      	mov	r2, r6
 800d130:	4604      	mov	r4, r0
 800d132:	460d      	mov	r5, r1
 800d134:	463b      	mov	r3, r7
 800d136:	4640      	mov	r0, r8
 800d138:	4649      	mov	r1, r9
 800d13a:	f7f3 fa61 	bl	8000600 <__aeabi_dmul>
 800d13e:	4632      	mov	r2, r6
 800d140:	463b      	mov	r3, r7
 800d142:	f7f3 f8a7 	bl	8000294 <__adddf3>
 800d146:	4602      	mov	r2, r0
 800d148:	460b      	mov	r3, r1
 800d14a:	4620      	mov	r0, r4
 800d14c:	4629      	mov	r1, r5
 800d14e:	f7f3 f89f 	bl	8000290 <__aeabi_dsub>
 800d152:	4642      	mov	r2, r8
 800d154:	464b      	mov	r3, r9
 800d156:	f7f3 f89b 	bl	8000290 <__aeabi_dsub>
 800d15a:	460b      	mov	r3, r1
 800d15c:	4602      	mov	r2, r0
 800d15e:	493a      	ldr	r1, [pc, #232]	; (800d248 <__ieee754_pow+0xa48>)
 800d160:	2000      	movs	r0, #0
 800d162:	f7f3 f895 	bl	8000290 <__aeabi_dsub>
 800d166:	ec41 0b10 	vmov	d0, r0, r1
 800d16a:	ee10 3a90 	vmov	r3, s1
 800d16e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800d172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d176:	da2b      	bge.n	800d1d0 <__ieee754_pow+0x9d0>
 800d178:	4650      	mov	r0, sl
 800d17a:	f000 f96d 	bl	800d458 <scalbn>
 800d17e:	ec51 0b10 	vmov	r0, r1, d0
 800d182:	ec53 2b18 	vmov	r2, r3, d8
 800d186:	f7ff bbec 	b.w	800c962 <__ieee754_pow+0x162>
 800d18a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d18e:	4b2f      	ldr	r3, [pc, #188]	; (800d24c <__ieee754_pow+0xa4c>)
 800d190:	429e      	cmp	r6, r3
 800d192:	f77f af0b 	ble.w	800cfac <__ieee754_pow+0x7ac>
 800d196:	4b2e      	ldr	r3, [pc, #184]	; (800d250 <__ieee754_pow+0xa50>)
 800d198:	440b      	add	r3, r1
 800d19a:	4303      	orrs	r3, r0
 800d19c:	d009      	beq.n	800d1b2 <__ieee754_pow+0x9b2>
 800d19e:	2200      	movs	r2, #0
 800d1a0:	2300      	movs	r3, #0
 800d1a2:	ec51 0b18 	vmov	r0, r1, d8
 800d1a6:	f7f3 fc9d 	bl	8000ae4 <__aeabi_dcmplt>
 800d1aa:	3800      	subs	r0, #0
 800d1ac:	bf18      	it	ne
 800d1ae:	2001      	movne	r0, #1
 800d1b0:	e446      	b.n	800ca40 <__ieee754_pow+0x240>
 800d1b2:	4622      	mov	r2, r4
 800d1b4:	462b      	mov	r3, r5
 800d1b6:	f7f3 f86b 	bl	8000290 <__aeabi_dsub>
 800d1ba:	4642      	mov	r2, r8
 800d1bc:	464b      	mov	r3, r9
 800d1be:	f7f3 fca5 	bl	8000b0c <__aeabi_dcmpge>
 800d1c2:	2800      	cmp	r0, #0
 800d1c4:	f43f aef2 	beq.w	800cfac <__ieee754_pow+0x7ac>
 800d1c8:	e7e9      	b.n	800d19e <__ieee754_pow+0x99e>
 800d1ca:	f04f 0a00 	mov.w	sl, #0
 800d1ce:	e71a      	b.n	800d006 <__ieee754_pow+0x806>
 800d1d0:	ec51 0b10 	vmov	r0, r1, d0
 800d1d4:	4619      	mov	r1, r3
 800d1d6:	e7d4      	b.n	800d182 <__ieee754_pow+0x982>
 800d1d8:	2000      	movs	r0, #0
 800d1da:	491b      	ldr	r1, [pc, #108]	; (800d248 <__ieee754_pow+0xa48>)
 800d1dc:	f7ff bb2f 	b.w	800c83e <__ieee754_pow+0x3e>
 800d1e0:	2000      	movs	r0, #0
 800d1e2:	2100      	movs	r1, #0
 800d1e4:	f7ff bb2b 	b.w	800c83e <__ieee754_pow+0x3e>
 800d1e8:	4630      	mov	r0, r6
 800d1ea:	4639      	mov	r1, r7
 800d1ec:	f7ff bb27 	b.w	800c83e <__ieee754_pow+0x3e>
 800d1f0:	9204      	str	r2, [sp, #16]
 800d1f2:	f7ff bb79 	b.w	800c8e8 <__ieee754_pow+0xe8>
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	f7ff bb63 	b.w	800c8c2 <__ieee754_pow+0xc2>
 800d1fc:	f3af 8000 	nop.w
 800d200:	00000000 	.word	0x00000000
 800d204:	3fe62e43 	.word	0x3fe62e43
 800d208:	fefa39ef 	.word	0xfefa39ef
 800d20c:	3fe62e42 	.word	0x3fe62e42
 800d210:	0ca86c39 	.word	0x0ca86c39
 800d214:	be205c61 	.word	0xbe205c61
 800d218:	72bea4d0 	.word	0x72bea4d0
 800d21c:	3e663769 	.word	0x3e663769
 800d220:	c5d26bf1 	.word	0xc5d26bf1
 800d224:	3ebbbd41 	.word	0x3ebbbd41
 800d228:	af25de2c 	.word	0xaf25de2c
 800d22c:	3f11566a 	.word	0x3f11566a
 800d230:	16bebd93 	.word	0x16bebd93
 800d234:	3f66c16c 	.word	0x3f66c16c
 800d238:	5555553e 	.word	0x5555553e
 800d23c:	3fc55555 	.word	0x3fc55555
 800d240:	3fe00000 	.word	0x3fe00000
 800d244:	000fffff 	.word	0x000fffff
 800d248:	3ff00000 	.word	0x3ff00000
 800d24c:	4090cbff 	.word	0x4090cbff
 800d250:	3f6f3400 	.word	0x3f6f3400
 800d254:	652b82fe 	.word	0x652b82fe
 800d258:	3c971547 	.word	0x3c971547

0800d25c <__ieee754_sqrt>:
 800d25c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d260:	4e59      	ldr	r6, [pc, #356]	; (800d3c8 <__ieee754_sqrt+0x16c>)
 800d262:	ee10 0a10 	vmov	r0, s0
 800d266:	ee10 3a10 	vmov	r3, s0
 800d26a:	ec55 4b10 	vmov	r4, r5, d0
 800d26e:	43ae      	bics	r6, r5
 800d270:	462a      	mov	r2, r5
 800d272:	4629      	mov	r1, r5
 800d274:	d110      	bne.n	800d298 <__ieee754_sqrt+0x3c>
 800d276:	ee10 2a10 	vmov	r2, s0
 800d27a:	462b      	mov	r3, r5
 800d27c:	f7f3 f9c0 	bl	8000600 <__aeabi_dmul>
 800d280:	4602      	mov	r2, r0
 800d282:	460b      	mov	r3, r1
 800d284:	4620      	mov	r0, r4
 800d286:	4629      	mov	r1, r5
 800d288:	f7f3 f804 	bl	8000294 <__adddf3>
 800d28c:	4604      	mov	r4, r0
 800d28e:	460d      	mov	r5, r1
 800d290:	ec45 4b10 	vmov	d0, r4, r5
 800d294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d298:	2d00      	cmp	r5, #0
 800d29a:	dc10      	bgt.n	800d2be <__ieee754_sqrt+0x62>
 800d29c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d2a0:	4330      	orrs	r0, r6
 800d2a2:	d0f5      	beq.n	800d290 <__ieee754_sqrt+0x34>
 800d2a4:	b15d      	cbz	r5, 800d2be <__ieee754_sqrt+0x62>
 800d2a6:	ee10 2a10 	vmov	r2, s0
 800d2aa:	462b      	mov	r3, r5
 800d2ac:	ee10 0a10 	vmov	r0, s0
 800d2b0:	f7f2 ffee 	bl	8000290 <__aeabi_dsub>
 800d2b4:	4602      	mov	r2, r0
 800d2b6:	460b      	mov	r3, r1
 800d2b8:	f7f3 facc 	bl	8000854 <__aeabi_ddiv>
 800d2bc:	e7e6      	b.n	800d28c <__ieee754_sqrt+0x30>
 800d2be:	1512      	asrs	r2, r2, #20
 800d2c0:	d07a      	beq.n	800d3b8 <__ieee754_sqrt+0x15c>
 800d2c2:	07d4      	lsls	r4, r2, #31
 800d2c4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d2c8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800d2cc:	f04f 0400 	mov.w	r4, #0
 800d2d0:	bf58      	it	pl
 800d2d2:	0fda      	lsrpl	r2, r3, #31
 800d2d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d2d8:	bf58      	it	pl
 800d2da:	005b      	lslpl	r3, r3, #1
 800d2dc:	f04f 0516 	mov.w	r5, #22
 800d2e0:	bf58      	it	pl
 800d2e2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800d2e6:	4620      	mov	r0, r4
 800d2e8:	0fda      	lsrs	r2, r3, #31
 800d2ea:	107f      	asrs	r7, r7, #1
 800d2ec:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d2f0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d2f4:	005b      	lsls	r3, r3, #1
 800d2f6:	1886      	adds	r6, r0, r2
 800d2f8:	428e      	cmp	r6, r1
 800d2fa:	bfde      	ittt	le
 800d2fc:	1b89      	suble	r1, r1, r6
 800d2fe:	18b0      	addle	r0, r6, r2
 800d300:	18a4      	addle	r4, r4, r2
 800d302:	3d01      	subs	r5, #1
 800d304:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800d308:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d30c:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800d310:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d314:	d1ef      	bne.n	800d2f6 <__ieee754_sqrt+0x9a>
 800d316:	462a      	mov	r2, r5
 800d318:	f04f 0e20 	mov.w	lr, #32
 800d31c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d320:	4281      	cmp	r1, r0
 800d322:	eb06 0c05 	add.w	ip, r6, r5
 800d326:	dc02      	bgt.n	800d32e <__ieee754_sqrt+0xd2>
 800d328:	d113      	bne.n	800d352 <__ieee754_sqrt+0xf6>
 800d32a:	459c      	cmp	ip, r3
 800d32c:	d811      	bhi.n	800d352 <__ieee754_sqrt+0xf6>
 800d32e:	f1bc 0f00 	cmp.w	ip, #0
 800d332:	eb0c 0506 	add.w	r5, ip, r6
 800d336:	da44      	bge.n	800d3c2 <__ieee754_sqrt+0x166>
 800d338:	2d00      	cmp	r5, #0
 800d33a:	db42      	blt.n	800d3c2 <__ieee754_sqrt+0x166>
 800d33c:	f100 0801 	add.w	r8, r0, #1
 800d340:	1a09      	subs	r1, r1, r0
 800d342:	459c      	cmp	ip, r3
 800d344:	4432      	add	r2, r6
 800d346:	eba3 030c 	sub.w	r3, r3, ip
 800d34a:	bf88      	it	hi
 800d34c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800d350:	4640      	mov	r0, r8
 800d352:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800d356:	f1be 0e01 	subs.w	lr, lr, #1
 800d35a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d35e:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800d362:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d366:	d1db      	bne.n	800d320 <__ieee754_sqrt+0xc4>
 800d368:	430b      	orrs	r3, r1
 800d36a:	d006      	beq.n	800d37a <__ieee754_sqrt+0x11e>
 800d36c:	1c50      	adds	r0, r2, #1
 800d36e:	bf13      	iteet	ne
 800d370:	3201      	addne	r2, #1
 800d372:	3401      	addeq	r4, #1
 800d374:	4672      	moveq	r2, lr
 800d376:	f022 0201 	bicne.w	r2, r2, #1
 800d37a:	1063      	asrs	r3, r4, #1
 800d37c:	07e1      	lsls	r1, r4, #31
 800d37e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d382:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d386:	bf48      	it	mi
 800d388:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800d38c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d390:	4614      	mov	r4, r2
 800d392:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800d396:	e77b      	b.n	800d290 <__ieee754_sqrt+0x34>
 800d398:	0ad9      	lsrs	r1, r3, #11
 800d39a:	3815      	subs	r0, #21
 800d39c:	055b      	lsls	r3, r3, #21
 800d39e:	2900      	cmp	r1, #0
 800d3a0:	d0fa      	beq.n	800d398 <__ieee754_sqrt+0x13c>
 800d3a2:	02cd      	lsls	r5, r1, #11
 800d3a4:	d50a      	bpl.n	800d3bc <__ieee754_sqrt+0x160>
 800d3a6:	f1c2 0420 	rsb	r4, r2, #32
 800d3aa:	1e55      	subs	r5, r2, #1
 800d3ac:	fa23 f404 	lsr.w	r4, r3, r4
 800d3b0:	4093      	lsls	r3, r2
 800d3b2:	1b42      	subs	r2, r0, r5
 800d3b4:	4321      	orrs	r1, r4
 800d3b6:	e784      	b.n	800d2c2 <__ieee754_sqrt+0x66>
 800d3b8:	4610      	mov	r0, r2
 800d3ba:	e7f0      	b.n	800d39e <__ieee754_sqrt+0x142>
 800d3bc:	0049      	lsls	r1, r1, #1
 800d3be:	3201      	adds	r2, #1
 800d3c0:	e7ef      	b.n	800d3a2 <__ieee754_sqrt+0x146>
 800d3c2:	4680      	mov	r8, r0
 800d3c4:	e7bc      	b.n	800d340 <__ieee754_sqrt+0xe4>
 800d3c6:	bf00      	nop
 800d3c8:	7ff00000 	.word	0x7ff00000

0800d3cc <with_errno>:
 800d3cc:	b570      	push	{r4, r5, r6, lr}
 800d3ce:	4604      	mov	r4, r0
 800d3d0:	460d      	mov	r5, r1
 800d3d2:	4616      	mov	r6, r2
 800d3d4:	f7fe f984 	bl	800b6e0 <__errno>
 800d3d8:	4629      	mov	r1, r5
 800d3da:	6006      	str	r6, [r0, #0]
 800d3dc:	4620      	mov	r0, r4
 800d3de:	bd70      	pop	{r4, r5, r6, pc}

0800d3e0 <xflow>:
 800d3e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d3e2:	4614      	mov	r4, r2
 800d3e4:	461d      	mov	r5, r3
 800d3e6:	b108      	cbz	r0, 800d3ec <xflow+0xc>
 800d3e8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d3ec:	4620      	mov	r0, r4
 800d3ee:	4629      	mov	r1, r5
 800d3f0:	e9cd 2300 	strd	r2, r3, [sp]
 800d3f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d3f8:	f7f3 f902 	bl	8000600 <__aeabi_dmul>
 800d3fc:	2222      	movs	r2, #34	; 0x22
 800d3fe:	b003      	add	sp, #12
 800d400:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d404:	f7ff bfe2 	b.w	800d3cc <with_errno>

0800d408 <__math_uflow>:
 800d408:	b508      	push	{r3, lr}
 800d40a:	2200      	movs	r2, #0
 800d40c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800d410:	f7ff ffe6 	bl	800d3e0 <xflow>
 800d414:	ec41 0b10 	vmov	d0, r0, r1
 800d418:	bd08      	pop	{r3, pc}

0800d41a <__math_oflow>:
 800d41a:	b508      	push	{r3, lr}
 800d41c:	2200      	movs	r2, #0
 800d41e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800d422:	f7ff ffdd 	bl	800d3e0 <xflow>
 800d426:	ec41 0b10 	vmov	d0, r0, r1
 800d42a:	bd08      	pop	{r3, pc}

0800d42c <fabs>:
 800d42c:	ec51 0b10 	vmov	r0, r1, d0
 800d430:	ee10 2a10 	vmov	r2, s0
 800d434:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d438:	ec43 2b10 	vmov	d0, r2, r3
 800d43c:	4770      	bx	lr

0800d43e <finite>:
 800d43e:	b082      	sub	sp, #8
 800d440:	ed8d 0b00 	vstr	d0, [sp]
 800d444:	9801      	ldr	r0, [sp, #4]
 800d446:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800d44a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800d44e:	0fc0      	lsrs	r0, r0, #31
 800d450:	b002      	add	sp, #8
 800d452:	4770      	bx	lr
 800d454:	0000      	movs	r0, r0
	...

0800d458 <scalbn>:
 800d458:	b570      	push	{r4, r5, r6, lr}
 800d45a:	ec55 4b10 	vmov	r4, r5, d0
 800d45e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d462:	4606      	mov	r6, r0
 800d464:	462b      	mov	r3, r5
 800d466:	b99a      	cbnz	r2, 800d490 <scalbn+0x38>
 800d468:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d46c:	4323      	orrs	r3, r4
 800d46e:	d036      	beq.n	800d4de <scalbn+0x86>
 800d470:	4b39      	ldr	r3, [pc, #228]	; (800d558 <scalbn+0x100>)
 800d472:	4629      	mov	r1, r5
 800d474:	2200      	movs	r2, #0
 800d476:	ee10 0a10 	vmov	r0, s0
 800d47a:	f7f3 f8c1 	bl	8000600 <__aeabi_dmul>
 800d47e:	4b37      	ldr	r3, [pc, #220]	; (800d55c <scalbn+0x104>)
 800d480:	4604      	mov	r4, r0
 800d482:	460d      	mov	r5, r1
 800d484:	429e      	cmp	r6, r3
 800d486:	da10      	bge.n	800d4aa <scalbn+0x52>
 800d488:	a32b      	add	r3, pc, #172	; (adr r3, 800d538 <scalbn+0xe0>)
 800d48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d48e:	e03a      	b.n	800d506 <scalbn+0xae>
 800d490:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d494:	428a      	cmp	r2, r1
 800d496:	d10c      	bne.n	800d4b2 <scalbn+0x5a>
 800d498:	ee10 2a10 	vmov	r2, s0
 800d49c:	4620      	mov	r0, r4
 800d49e:	4629      	mov	r1, r5
 800d4a0:	f7f2 fef8 	bl	8000294 <__adddf3>
 800d4a4:	4604      	mov	r4, r0
 800d4a6:	460d      	mov	r5, r1
 800d4a8:	e019      	b.n	800d4de <scalbn+0x86>
 800d4aa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d4ae:	460b      	mov	r3, r1
 800d4b0:	3a36      	subs	r2, #54	; 0x36
 800d4b2:	4432      	add	r2, r6
 800d4b4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d4b8:	428a      	cmp	r2, r1
 800d4ba:	dd08      	ble.n	800d4ce <scalbn+0x76>
 800d4bc:	2d00      	cmp	r5, #0
 800d4be:	a120      	add	r1, pc, #128	; (adr r1, 800d540 <scalbn+0xe8>)
 800d4c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4c4:	da1c      	bge.n	800d500 <scalbn+0xa8>
 800d4c6:	a120      	add	r1, pc, #128	; (adr r1, 800d548 <scalbn+0xf0>)
 800d4c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4cc:	e018      	b.n	800d500 <scalbn+0xa8>
 800d4ce:	2a00      	cmp	r2, #0
 800d4d0:	dd08      	ble.n	800d4e4 <scalbn+0x8c>
 800d4d2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d4d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d4da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d4de:	ec45 4b10 	vmov	d0, r4, r5
 800d4e2:	bd70      	pop	{r4, r5, r6, pc}
 800d4e4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d4e8:	da19      	bge.n	800d51e <scalbn+0xc6>
 800d4ea:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d4ee:	429e      	cmp	r6, r3
 800d4f0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800d4f4:	dd0a      	ble.n	800d50c <scalbn+0xb4>
 800d4f6:	a112      	add	r1, pc, #72	; (adr r1, 800d540 <scalbn+0xe8>)
 800d4f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d1e2      	bne.n	800d4c6 <scalbn+0x6e>
 800d500:	a30f      	add	r3, pc, #60	; (adr r3, 800d540 <scalbn+0xe8>)
 800d502:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d506:	f7f3 f87b 	bl	8000600 <__aeabi_dmul>
 800d50a:	e7cb      	b.n	800d4a4 <scalbn+0x4c>
 800d50c:	a10a      	add	r1, pc, #40	; (adr r1, 800d538 <scalbn+0xe0>)
 800d50e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d0b8      	beq.n	800d488 <scalbn+0x30>
 800d516:	a10e      	add	r1, pc, #56	; (adr r1, 800d550 <scalbn+0xf8>)
 800d518:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d51c:	e7b4      	b.n	800d488 <scalbn+0x30>
 800d51e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d522:	3236      	adds	r2, #54	; 0x36
 800d524:	4620      	mov	r0, r4
 800d526:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d52a:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d52e:	2200      	movs	r2, #0
 800d530:	4b0b      	ldr	r3, [pc, #44]	; (800d560 <scalbn+0x108>)
 800d532:	e7e8      	b.n	800d506 <scalbn+0xae>
 800d534:	f3af 8000 	nop.w
 800d538:	c2f8f359 	.word	0xc2f8f359
 800d53c:	01a56e1f 	.word	0x01a56e1f
 800d540:	8800759c 	.word	0x8800759c
 800d544:	7e37e43c 	.word	0x7e37e43c
 800d548:	8800759c 	.word	0x8800759c
 800d54c:	fe37e43c 	.word	0xfe37e43c
 800d550:	c2f8f359 	.word	0xc2f8f359
 800d554:	81a56e1f 	.word	0x81a56e1f
 800d558:	43500000 	.word	0x43500000
 800d55c:	ffff3cb0 	.word	0xffff3cb0
 800d560:	3c900000 	.word	0x3c900000

0800d564 <_init>:
 800d564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d566:	bf00      	nop
 800d568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d56a:	bc08      	pop	{r3}
 800d56c:	469e      	mov	lr, r3
 800d56e:	4770      	bx	lr

0800d570 <_fini>:
 800d570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d572:	bf00      	nop
 800d574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d576:	bc08      	pop	{r3}
 800d578:	469e      	mov	lr, r3
 800d57a:	4770      	bx	lr
