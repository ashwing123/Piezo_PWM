
PWM_TRIAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c30c  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  0800c548  0800c548  0001c548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c808  0800c808  0001c808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c810  0800c810  0001c810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800c814  0800c814  0001c814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  0800c818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000095c  20000070  0800c888  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200009cc  0800c888  000209cc  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   000274f7  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000040cd  00000000  00000000  0004759d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ea8  00000000  00000000  0004b670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001d20  00000000  00000000  0004d518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000395b2  00000000  00000000  0004f238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000280d4  00000000  00000000  000887ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016c659  00000000  00000000  000b08be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0021cf17  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008bd8  00000000  00000000  0021cf68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000070 	.word	0x20000070
 8000254:	00000000 	.word	0x00000000
 8000258:	0800c52c 	.word	0x0800c52c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000074 	.word	0x20000074
 8000274:	0800c52c 	.word	0x0800c52c

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	; 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2f>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b68:	bf24      	itt	cs
 8000b6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b72:	d90d      	bls.n	8000b90 <__aeabi_d2f+0x30>
 8000b74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b88:	bf08      	it	eq
 8000b8a:	f020 0001 	biceq.w	r0, r0, #1
 8000b8e:	4770      	bx	lr
 8000b90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b94:	d121      	bne.n	8000bda <__aeabi_d2f+0x7a>
 8000b96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b9a:	bfbc      	itt	lt
 8000b9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	4770      	bxlt	lr
 8000ba2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000baa:	f1c2 0218 	rsb	r2, r2, #24
 8000bae:	f1c2 0c20 	rsb	ip, r2, #32
 8000bb2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bba:	bf18      	it	ne
 8000bbc:	f040 0001 	orrne.w	r0, r0, #1
 8000bc0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bcc:	ea40 000c 	orr.w	r0, r0, ip
 8000bd0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd8:	e7cc      	b.n	8000b74 <__aeabi_d2f+0x14>
 8000bda:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bde:	d107      	bne.n	8000bf0 <__aeabi_d2f+0x90>
 8000be0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be4:	bf1e      	ittt	ne
 8000be6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bee:	4770      	bxne	lr
 8000bf0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop

08000c00 <__aeabi_uldivmod>:
 8000c00:	b953      	cbnz	r3, 8000c18 <__aeabi_uldivmod+0x18>
 8000c02:	b94a      	cbnz	r2, 8000c18 <__aeabi_uldivmod+0x18>
 8000c04:	2900      	cmp	r1, #0
 8000c06:	bf08      	it	eq
 8000c08:	2800      	cmpeq	r0, #0
 8000c0a:	bf1c      	itt	ne
 8000c0c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c10:	f04f 30ff 	movne.w	r0, #4294967295
 8000c14:	f000 b982 	b.w	8000f1c <__aeabi_idiv0>
 8000c18:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c1c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c20:	f000 f806 	bl	8000c30 <__udivmoddi4>
 8000c24:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c2c:	b004      	add	sp, #16
 8000c2e:	4770      	bx	lr

08000c30 <__udivmoddi4>:
 8000c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c34:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000c36:	4604      	mov	r4, r0
 8000c38:	460f      	mov	r7, r1
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d148      	bne.n	8000cd0 <__udivmoddi4+0xa0>
 8000c3e:	428a      	cmp	r2, r1
 8000c40:	4694      	mov	ip, r2
 8000c42:	d961      	bls.n	8000d08 <__udivmoddi4+0xd8>
 8000c44:	fab2 f382 	clz	r3, r2
 8000c48:	b143      	cbz	r3, 8000c5c <__udivmoddi4+0x2c>
 8000c4a:	f1c3 0120 	rsb	r1, r3, #32
 8000c4e:	409f      	lsls	r7, r3
 8000c50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c54:	409c      	lsls	r4, r3
 8000c56:	fa20 f101 	lsr.w	r1, r0, r1
 8000c5a:	430f      	orrs	r7, r1
 8000c5c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000c60:	fa1f fe8c 	uxth.w	lr, ip
 8000c64:	0c22      	lsrs	r2, r4, #16
 8000c66:	fbb7 f6f1 	udiv	r6, r7, r1
 8000c6a:	fb01 7716 	mls	r7, r1, r6, r7
 8000c6e:	fb06 f00e 	mul.w	r0, r6, lr
 8000c72:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c76:	4290      	cmp	r0, r2
 8000c78:	d908      	bls.n	8000c8c <__udivmoddi4+0x5c>
 8000c7a:	eb1c 0202 	adds.w	r2, ip, r2
 8000c7e:	f106 37ff 	add.w	r7, r6, #4294967295
 8000c82:	d202      	bcs.n	8000c8a <__udivmoddi4+0x5a>
 8000c84:	4290      	cmp	r0, r2
 8000c86:	f200 8137 	bhi.w	8000ef8 <__udivmoddi4+0x2c8>
 8000c8a:	463e      	mov	r6, r7
 8000c8c:	1a12      	subs	r2, r2, r0
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb2 f0f1 	udiv	r0, r2, r1
 8000c94:	fb01 2210 	mls	r2, r1, r0, r2
 8000c98:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c9c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ca0:	45a6      	cmp	lr, r4
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0x86>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cac:	d202      	bcs.n	8000cb4 <__udivmoddi4+0x84>
 8000cae:	45a6      	cmp	lr, r4
 8000cb0:	f200 811c 	bhi.w	8000eec <__udivmoddi4+0x2bc>
 8000cb4:	4610      	mov	r0, r2
 8000cb6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cba:	eba4 040e 	sub.w	r4, r4, lr
 8000cbe:	2600      	movs	r6, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0x9a>
 8000cc2:	40dc      	lsrs	r4, r3
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	e9c5 4300 	strd	r4, r3, [r5]
 8000cca:	4631      	mov	r1, r6
 8000ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cd0:	428b      	cmp	r3, r1
 8000cd2:	d909      	bls.n	8000ce8 <__udivmoddi4+0xb8>
 8000cd4:	2d00      	cmp	r5, #0
 8000cd6:	f000 80fd 	beq.w	8000ed4 <__udivmoddi4+0x2a4>
 8000cda:	2600      	movs	r6, #0
 8000cdc:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce0:	4630      	mov	r0, r6
 8000ce2:	4631      	mov	r1, r6
 8000ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ce8:	fab3 f683 	clz	r6, r3
 8000cec:	2e00      	cmp	r6, #0
 8000cee:	d14b      	bne.n	8000d88 <__udivmoddi4+0x158>
 8000cf0:	428b      	cmp	r3, r1
 8000cf2:	f0c0 80f2 	bcc.w	8000eda <__udivmoddi4+0x2aa>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f240 80ef 	bls.w	8000eda <__udivmoddi4+0x2aa>
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	2d00      	cmp	r5, #0
 8000d00:	d0e3      	beq.n	8000cca <__udivmoddi4+0x9a>
 8000d02:	e9c5 4700 	strd	r4, r7, [r5]
 8000d06:	e7e0      	b.n	8000cca <__udivmoddi4+0x9a>
 8000d08:	b902      	cbnz	r2, 8000d0c <__udivmoddi4+0xdc>
 8000d0a:	deff      	udf	#255	; 0xff
 8000d0c:	fab2 f382 	clz	r3, r2
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	f040 809d 	bne.w	8000e50 <__udivmoddi4+0x220>
 8000d16:	1a89      	subs	r1, r1, r2
 8000d18:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000d1c:	b297      	uxth	r7, r2
 8000d1e:	2601      	movs	r6, #1
 8000d20:	0c20      	lsrs	r0, r4, #16
 8000d22:	fbb1 f2fe 	udiv	r2, r1, lr
 8000d26:	fb0e 1112 	mls	r1, lr, r2, r1
 8000d2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2e:	fb07 f002 	mul.w	r0, r7, r2
 8000d32:	4288      	cmp	r0, r1
 8000d34:	d90f      	bls.n	8000d56 <__udivmoddi4+0x126>
 8000d36:	eb1c 0101 	adds.w	r1, ip, r1
 8000d3a:	f102 38ff 	add.w	r8, r2, #4294967295
 8000d3e:	bf2c      	ite	cs
 8000d40:	f04f 0901 	movcs.w	r9, #1
 8000d44:	f04f 0900 	movcc.w	r9, #0
 8000d48:	4288      	cmp	r0, r1
 8000d4a:	d903      	bls.n	8000d54 <__udivmoddi4+0x124>
 8000d4c:	f1b9 0f00 	cmp.w	r9, #0
 8000d50:	f000 80cf 	beq.w	8000ef2 <__udivmoddi4+0x2c2>
 8000d54:	4642      	mov	r2, r8
 8000d56:	1a09      	subs	r1, r1, r0
 8000d58:	b2a4      	uxth	r4, r4
 8000d5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d62:	fb00 f707 	mul.w	r7, r0, r7
 8000d66:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d6a:	42a7      	cmp	r7, r4
 8000d6c:	d908      	bls.n	8000d80 <__udivmoddi4+0x150>
 8000d6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000d72:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d76:	d202      	bcs.n	8000d7e <__udivmoddi4+0x14e>
 8000d78:	42a7      	cmp	r7, r4
 8000d7a:	f200 80b4 	bhi.w	8000ee6 <__udivmoddi4+0x2b6>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	1be4      	subs	r4, r4, r7
 8000d82:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000d86:	e79b      	b.n	8000cc0 <__udivmoddi4+0x90>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa01 f406 	lsl.w	r4, r1, r6
 8000d92:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d96:	40f9      	lsrs	r1, r7
 8000d98:	40b2      	lsls	r2, r6
 8000d9a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d9e:	fa20 f307 	lsr.w	r3, r0, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	431c      	orrs	r4, r3
 8000da8:	fa1f fe8c 	uxth.w	lr, ip
 8000dac:	fa00 f306 	lsl.w	r3, r0, r6
 8000db0:	0c20      	lsrs	r0, r4, #16
 8000db2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000db6:	fb09 1118 	mls	r1, r9, r8, r1
 8000dba:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbe:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc2:	4288      	cmp	r0, r1
 8000dc4:	d90f      	bls.n	8000de6 <__udivmoddi4+0x1b6>
 8000dc6:	eb1c 0101 	adds.w	r1, ip, r1
 8000dca:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dce:	bf2c      	ite	cs
 8000dd0:	f04f 0b01 	movcs.w	fp, #1
 8000dd4:	f04f 0b00 	movcc.w	fp, #0
 8000dd8:	4288      	cmp	r0, r1
 8000dda:	d903      	bls.n	8000de4 <__udivmoddi4+0x1b4>
 8000ddc:	f1bb 0f00 	cmp.w	fp, #0
 8000de0:	f000 808d 	beq.w	8000efe <__udivmoddi4+0x2ce>
 8000de4:	46d0      	mov	r8, sl
 8000de6:	1a09      	subs	r1, r1, r0
 8000de8:	b2a4      	uxth	r4, r4
 8000dea:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dee:	fb09 1110 	mls	r1, r9, r0, r1
 8000df2:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df6:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dfa:	458e      	cmp	lr, r1
 8000dfc:	d907      	bls.n	8000e0e <__udivmoddi4+0x1de>
 8000dfe:	eb1c 0101 	adds.w	r1, ip, r1
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d201      	bcs.n	8000e0c <__udivmoddi4+0x1dc>
 8000e08:	458e      	cmp	lr, r1
 8000e0a:	d87f      	bhi.n	8000f0c <__udivmoddi4+0x2dc>
 8000e0c:	4620      	mov	r0, r4
 8000e0e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	fba0 9802 	umull	r9, r8, r0, r2
 8000e1a:	4541      	cmp	r1, r8
 8000e1c:	464c      	mov	r4, r9
 8000e1e:	46c6      	mov	lr, r8
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0x1f8>
 8000e22:	d106      	bne.n	8000e32 <__udivmoddi4+0x202>
 8000e24:	454b      	cmp	r3, r9
 8000e26:	d204      	bcs.n	8000e32 <__udivmoddi4+0x202>
 8000e28:	3801      	subs	r0, #1
 8000e2a:	ebb9 0402 	subs.w	r4, r9, r2
 8000e2e:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d070      	beq.n	8000f18 <__udivmoddi4+0x2e8>
 8000e36:	1b1a      	subs	r2, r3, r4
 8000e38:	eb61 010e 	sbc.w	r1, r1, lr
 8000e3c:	fa22 f306 	lsr.w	r3, r2, r6
 8000e40:	fa01 f707 	lsl.w	r7, r1, r7
 8000e44:	40f1      	lsrs	r1, r6
 8000e46:	2600      	movs	r6, #0
 8000e48:	431f      	orrs	r7, r3
 8000e4a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e4e:	e73c      	b.n	8000cca <__udivmoddi4+0x9a>
 8000e50:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e54:	f1c3 0020 	rsb	r0, r3, #32
 8000e58:	fa01 f203 	lsl.w	r2, r1, r3
 8000e5c:	fa21 f600 	lsr.w	r6, r1, r0
 8000e60:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000e64:	fa24 f100 	lsr.w	r1, r4, r0
 8000e68:	fa1f f78c 	uxth.w	r7, ip
 8000e6c:	409c      	lsls	r4, r3
 8000e6e:	4311      	orrs	r1, r2
 8000e70:	fbb6 f0fe 	udiv	r0, r6, lr
 8000e74:	0c0a      	lsrs	r2, r1, #16
 8000e76:	fb0e 6610 	mls	r6, lr, r0, r6
 8000e7a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000e7e:	fb00 f607 	mul.w	r6, r0, r7
 8000e82:	4296      	cmp	r6, r2
 8000e84:	d90e      	bls.n	8000ea4 <__udivmoddi4+0x274>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e8e:	bf2c      	ite	cs
 8000e90:	f04f 0901 	movcs.w	r9, #1
 8000e94:	f04f 0900 	movcc.w	r9, #0
 8000e98:	4296      	cmp	r6, r2
 8000e9a:	d902      	bls.n	8000ea2 <__udivmoddi4+0x272>
 8000e9c:	f1b9 0f00 	cmp.w	r9, #0
 8000ea0:	d031      	beq.n	8000f06 <__udivmoddi4+0x2d6>
 8000ea2:	4640      	mov	r0, r8
 8000ea4:	1b92      	subs	r2, r2, r6
 8000ea6:	b289      	uxth	r1, r1
 8000ea8:	fbb2 f6fe 	udiv	r6, r2, lr
 8000eac:	fb0e 2216 	mls	r2, lr, r6, r2
 8000eb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000eb4:	fb06 f207 	mul.w	r2, r6, r7
 8000eb8:	428a      	cmp	r2, r1
 8000eba:	d907      	bls.n	8000ecc <__udivmoddi4+0x29c>
 8000ebc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ec4:	d201      	bcs.n	8000eca <__udivmoddi4+0x29a>
 8000ec6:	428a      	cmp	r2, r1
 8000ec8:	d823      	bhi.n	8000f12 <__udivmoddi4+0x2e2>
 8000eca:	4646      	mov	r6, r8
 8000ecc:	1a89      	subs	r1, r1, r2
 8000ece:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ed2:	e725      	b.n	8000d20 <__udivmoddi4+0xf0>
 8000ed4:	462e      	mov	r6, r5
 8000ed6:	4628      	mov	r0, r5
 8000ed8:	e6f7      	b.n	8000cca <__udivmoddi4+0x9a>
 8000eda:	1a84      	subs	r4, r0, r2
 8000edc:	eb61 0303 	sbc.w	r3, r1, r3
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	461f      	mov	r7, r3
 8000ee4:	e70b      	b.n	8000cfe <__udivmoddi4+0xce>
 8000ee6:	4464      	add	r4, ip
 8000ee8:	3802      	subs	r0, #2
 8000eea:	e749      	b.n	8000d80 <__udivmoddi4+0x150>
 8000eec:	4464      	add	r4, ip
 8000eee:	3802      	subs	r0, #2
 8000ef0:	e6e1      	b.n	8000cb6 <__udivmoddi4+0x86>
 8000ef2:	3a02      	subs	r2, #2
 8000ef4:	4461      	add	r1, ip
 8000ef6:	e72e      	b.n	8000d56 <__udivmoddi4+0x126>
 8000ef8:	3e02      	subs	r6, #2
 8000efa:	4462      	add	r2, ip
 8000efc:	e6c6      	b.n	8000c8c <__udivmoddi4+0x5c>
 8000efe:	f1a8 0802 	sub.w	r8, r8, #2
 8000f02:	4461      	add	r1, ip
 8000f04:	e76f      	b.n	8000de6 <__udivmoddi4+0x1b6>
 8000f06:	3802      	subs	r0, #2
 8000f08:	4462      	add	r2, ip
 8000f0a:	e7cb      	b.n	8000ea4 <__udivmoddi4+0x274>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	e77d      	b.n	8000e0e <__udivmoddi4+0x1de>
 8000f12:	3e02      	subs	r6, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	e7d9      	b.n	8000ecc <__udivmoddi4+0x29c>
 8000f18:	462e      	mov	r6, r5
 8000f1a:	e6d6      	b.n	8000cca <__udivmoddi4+0x9a>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <MX_TIM3_Init>:


TIM_HandleTypeDef htim3;
//TIM3 initialization function
void MX_TIM3_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	; 0x28
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f26:	f107 031c 	add.w	r3, r7, #28
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f32:	463b      	mov	r3, r7
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]
 8000f3e:	611a      	str	r2, [r3, #16]
 8000f40:	615a      	str	r2, [r3, #20]
 8000f42:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f44:	4b21      	ldr	r3, [pc, #132]	; (8000fcc <MX_TIM3_Init+0xac>)
 8000f46:	4a22      	ldr	r2, [pc, #136]	; (8000fd0 <MX_TIM3_Init+0xb0>)
 8000f48:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64;
 8000f4a:	4b20      	ldr	r3, [pc, #128]	; (8000fcc <MX_TIM3_Init+0xac>)
 8000f4c:	2240      	movs	r2, #64	; 0x40
 8000f4e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f50:	4b1e      	ldr	r3, [pc, #120]	; (8000fcc <MX_TIM3_Init+0xac>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000f56:	4b1d      	ldr	r3, [pc, #116]	; (8000fcc <MX_TIM3_Init+0xac>)
 8000f58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f5c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5e:	4b1b      	ldr	r3, [pc, #108]	; (8000fcc <MX_TIM3_Init+0xac>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f64:	4b19      	ldr	r3, [pc, #100]	; (8000fcc <MX_TIM3_Init+0xac>)
 8000f66:	2280      	movs	r2, #128	; 0x80
 8000f68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f6a:	4818      	ldr	r0, [pc, #96]	; (8000fcc <MX_TIM3_Init+0xac>)
 8000f6c:	f007 ff68 	bl	8008e40 <HAL_TIM_PWM_Init>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000f76:	f000 ffa7 	bl	8001ec8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f82:	f107 031c 	add.w	r3, r7, #28
 8000f86:	4619      	mov	r1, r3
 8000f88:	4810      	ldr	r0, [pc, #64]	; (8000fcc <MX_TIM3_Init+0xac>)
 8000f8a:	f009 f8bf 	bl	800a10c <HAL_TIMEx_MasterConfigSynchronization>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000f94:	f000 ff98 	bl	8001ec8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f98:	2360      	movs	r3, #96	; 0x60
 8000f9a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fa8:	463b      	mov	r3, r7
 8000faa:	2208      	movs	r2, #8
 8000fac:	4619      	mov	r1, r3
 8000fae:	4807      	ldr	r0, [pc, #28]	; (8000fcc <MX_TIM3_Init+0xac>)
 8000fb0:	f008 fa70 	bl	8009494 <HAL_TIM_PWM_ConfigChannel>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000fba:	f000 ff85 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000fbe:	4803      	ldr	r0, [pc, #12]	; (8000fcc <MX_TIM3_Init+0xac>)
 8000fc0:	f001 fba4 	bl	800270c <HAL_TIM_MspPostInit>

}
 8000fc4:	bf00      	nop
 8000fc6:	3728      	adds	r7, #40	; 0x28
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	2000008c 	.word	0x2000008c
 8000fd0:	40000400 	.word	0x40000400

08000fd4 <piezo_init>:

void piezo_init(void) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
	MX_TIM3_Init();
 8000fd8:	f7ff ffa2 	bl	8000f20 <MX_TIM3_Init>
	HAL_TIM_Base_Start(&htim3);
 8000fdc:	4807      	ldr	r0, [pc, #28]	; (8000ffc <piezo_init+0x28>)
 8000fde:	f007 fe97 	bl	8008d10 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fe8:	4805      	ldr	r0, [pc, #20]	; (8001000 <piezo_init+0x2c>)
 8000fea:	f002 f9af 	bl	800334c <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000fee:	2108      	movs	r1, #8
 8000ff0:	4802      	ldr	r0, [pc, #8]	; (8000ffc <piezo_init+0x28>)
 8000ff2:	f007 ff7d 	bl	8008ef0 <HAL_TIM_PWM_Start>
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	2000008c 	.word	0x2000008c
 8001000:	42020000 	.word	0x42020000
 8001004:	00000000 	.word	0x00000000

08001008 <get_freq_from_note>:
/*
 * function name: get_freq_from_note
 * purpose: convert a string representing a note & octave to its corresponding frequency
 * input: string representing a note (see NOTES array below for possible notes) followed by an octave (ex A#3).
 */
float get_freq_from_note(char note[]) {
 8001008:	b5b0      	push	{r4, r5, r7, lr}
 800100a:	b08e      	sub	sp, #56	; 0x38
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	char NOTES[12][2] = {"A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"};
 8001010:	4b4b      	ldr	r3, [pc, #300]	; (8001140 <get_freq_from_note+0x138>)
 8001012:	f107 0410 	add.w	r4, r7, #16
 8001016:	461d      	mov	r5, r3
 8001018:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800101a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800101c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001020:	e884 0003 	stmia.w	r4, {r0, r1}
	int octave;
	char curr_note[2];
	int note_len = strlen(note);
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff f927 	bl	8000278 <strlen>
 800102a:	4603      	mov	r3, r0
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
	//extracting the octave number from the char that was passed in
	if (note_len == 3) {
 800102e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001030:	2b03      	cmp	r3, #3
 8001032:	d10c      	bne.n	800104e <get_freq_from_note+0x46>
		octave = (int) note[2] - '0';
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3302      	adds	r3, #2
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	3b30      	subs	r3, #48	; 0x30
 800103c:	637b      	str	r3, [r7, #52]	; 0x34
		strncpy(curr_note, note, 2);
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	2202      	movs	r2, #2
 8001044:	6879      	ldr	r1, [r7, #4]
 8001046:	4618      	mov	r0, r3
 8001048:	f00a fb0d 	bl	800b666 <strncpy>
 800104c:	e012      	b.n	8001074 <get_freq_from_note+0x6c>
	} else if (note_len == 2) {
 800104e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001050:	2b02      	cmp	r3, #2
 8001052:	d10c      	bne.n	800106e <get_freq_from_note+0x66>
		octave = (int) note[1] - '0';
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3301      	adds	r3, #1
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	3b30      	subs	r3, #48	; 0x30
 800105c:	637b      	str	r3, [r7, #52]	; 0x34
		strncpy(curr_note, note, 1);
 800105e:	f107 030c 	add.w	r3, r7, #12
 8001062:	2201      	movs	r2, #1
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	4618      	mov	r0, r3
 8001068:	f00a fafd 	bl	800b666 <strncpy>
 800106c:	e002      	b.n	8001074 <get_freq_from_note+0x6c>
	} else {
		return 0;
 800106e:	f04f 0300 	mov.w	r3, #0
 8001072:	e05a      	b.n	800112a <get_freq_from_note+0x122>
	}
	//extracting the index (as per the NOTES array above) of the note passed in
	int keyIndex = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	633b      	str	r3, [r7, #48]	; 0x30
	for (int i = 0; i < NUM_NOTES; i++) {
 8001078:	2300      	movs	r3, #0
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800107c:	e013      	b.n	80010a6 <get_freq_from_note+0x9e>
		if (strncmp(curr_note, NOTES[i], 2) == 0) {
 800107e:	f107 0210 	add.w	r2, r7, #16
 8001082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	18d1      	adds	r1, r2, r3
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	2202      	movs	r2, #2
 800108e:	4618      	mov	r0, r3
 8001090:	f00a fad5 	bl	800b63e <strncmp>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d102      	bne.n	80010a0 <get_freq_from_note+0x98>
			keyIndex = i;
 800109a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800109c:	633b      	str	r3, [r7, #48]	; 0x30
			break;
 800109e:	e005      	b.n	80010ac <get_freq_from_note+0xa4>
	for (int i = 0; i < NUM_NOTES; i++) {
 80010a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a2:	3301      	adds	r3, #1
 80010a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010a8:	2b0b      	cmp	r3, #11
 80010aa:	dde8      	ble.n	800107e <get_freq_from_note+0x76>
		}
	}
	//@source: https://gist.github.com/stuartmemo/3766449#file-note-to-frequency
	//math to calculate the frequency from the note index
	if (keyIndex < 3) {
 80010ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	dc0c      	bgt.n	80010cc <get_freq_from_note+0xc4>
		keyIndex = keyIndex + 12 + ((octave - 1) * 12) + 1;
 80010b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010b4:	f103 010c 	add.w	r1, r3, #12
 80010b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ba:	1e5a      	subs	r2, r3, #1
 80010bc:	4613      	mov	r3, r2
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	4413      	add	r3, r2
 80010c2:	009b      	lsls	r3, r3, #2
 80010c4:	440b      	add	r3, r1
 80010c6:	3301      	adds	r3, #1
 80010c8:	633b      	str	r3, [r7, #48]	; 0x30
 80010ca:	e00a      	b.n	80010e2 <get_freq_from_note+0xda>
	} else {
		keyIndex = keyIndex + ((octave - 1) * 12) + 1;
 80010cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ce:	1e5a      	subs	r2, r3, #1
 80010d0:	4613      	mov	r3, r2
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	4413      	add	r3, r2
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	461a      	mov	r2, r3
 80010da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010dc:	4413      	add	r3, r2
 80010de:	3301      	adds	r3, #1
 80010e0:	633b      	str	r3, [r7, #48]	; 0x30
	}
	// Return frequency of note
	return 440 * pow(2, ((float) (keyIndex - 49)) / 12);
 80010e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010e4:	3b31      	subs	r3, #49	; 0x31
 80010e6:	ee07 3a90 	vmov	s15, r3
 80010ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ee:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 80010f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80010f6:	ee16 0a90 	vmov	r0, s13
 80010fa:	f7ff fa29 	bl	8000550 <__aeabi_f2d>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	ec43 2b11 	vmov	d1, r2, r3
 8001106:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8001138 <get_freq_from_note+0x130>
 800110a:	f00a faeb 	bl	800b6e4 <pow>
 800110e:	ec51 0b10 	vmov	r0, r1, d0
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	4b0b      	ldr	r3, [pc, #44]	; (8001144 <get_freq_from_note+0x13c>)
 8001118:	f7ff fa72 	bl	8000600 <__aeabi_dmul>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4610      	mov	r0, r2
 8001122:	4619      	mov	r1, r3
 8001124:	f7ff fd1c 	bl	8000b60 <__aeabi_d2f>
 8001128:	4603      	mov	r3, r0
}
 800112a:	ee07 3a90 	vmov	s15, r3
 800112e:	eeb0 0a67 	vmov.f32	s0, s15
 8001132:	3738      	adds	r7, #56	; 0x38
 8001134:	46bd      	mov	sp, r7
 8001136:	bdb0      	pop	{r4, r5, r7, pc}
 8001138:	00000000 	.word	0x00000000
 800113c:	40000000 	.word	0x40000000
 8001140:	0800c548 	.word	0x0800c548
 8001144:	407b8000 	.word	0x407b8000

08001148 <pause_pwm>:
/*
 * function name: pause_pwm
 * purpose: make the duty cycle 0 so no output is provided for the specified duration
 * input: duration of pause in ms
 */
void pause_pwm(int duration_in_ms) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <pause_pwm+0x20>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2200      	movs	r2, #0
 8001156:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_Delay(duration_in_ms);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4618      	mov	r0, r3
 800115c:	f001 fd6e 	bl	8002c3c <HAL_Delay>
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	2000008c 	.word	0x2000008c

0800116c <play_frequency>:
/*
 * function name: play_frequency
 * purpose: plays a frequency, for a duration that corresponds to the beat and the tempo
 * input: the beat length, the frequency, the beats per second (tempo)
 */
void play_frequency(int duration_ms, float frequency) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	ed87 0a00 	vstr	s0, [r7]
	if (frequency == 0) {
 8001178:	edd7 7a00 	vldr	s15, [r7]
 800117c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001184:	d103      	bne.n	800118e <play_frequency+0x22>
		pause_pwm(duration_ms);
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff ffde 	bl	8001148 <pause_pwm>
		__HAL_TIM_SET_AUTORELOAD(&htim3, arr_val);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, arr_val / 3);
		//delaying so the note holds
		HAL_Delay(duration_ms);
	}
}
 800118c:	e01e      	b.n	80011cc <play_frequency+0x60>
		int arr_val = (int) (CLOCKFREQ/frequency);
 800118e:	eddf 6a11 	vldr	s13, [pc, #68]	; 80011d4 <play_frequency+0x68>
 8001192:	ed97 7a00 	vldr	s14, [r7]
 8001196:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800119a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800119e:	ee17 3a90 	vmov	r3, s15
 80011a2:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim3, arr_val);
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <play_frequency+0x6c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	68fa      	ldr	r2, [r7, #12]
 80011aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <play_frequency+0x6c>)
 80011b0:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, arr_val / 3);
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	4a09      	ldr	r2, [pc, #36]	; (80011dc <play_frequency+0x70>)
 80011b6:	fb82 1203 	smull	r1, r2, r2, r3
 80011ba:	17db      	asrs	r3, r3, #31
 80011bc:	1ad2      	subs	r2, r2, r3
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <play_frequency+0x6c>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_Delay(duration_ms);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f001 fd38 	bl	8002c3c <HAL_Delay>
}
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	49742400 	.word	0x49742400
 80011d8:	2000008c 	.word	0x2000008c
 80011dc:	55555556 	.word	0x55555556

080011e0 <play_frequency_array>:
/*
 * function name: play_frequency_array
 * purpose: plays an array of frequency, for a duration derived from the beats and tempo
 * input: length of beats, array of frequencies, tempo, number of notes in the song
 */
void play_frequency_array(float beats[], float frequencies[], int tempo, int song_len) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
 80011ec:	603b      	str	r3, [r7, #0]
	float beats_per_sec = tempo/60;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4a24      	ldr	r2, [pc, #144]	; (8001284 <play_frequency_array+0xa4>)
 80011f2:	fb82 1203 	smull	r1, r2, r2, r3
 80011f6:	441a      	add	r2, r3
 80011f8:	1152      	asrs	r2, r2, #5
 80011fa:	17db      	asrs	r3, r3, #31
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	ee07 3a90 	vmov	s15, r3
 8001202:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001206:	edc7 7a06 	vstr	s15, [r7, #24]
	pause_pwm(100);
 800120a:	2064      	movs	r0, #100	; 0x64
 800120c:	f7ff ff9c 	bl	8001148 <pause_pwm>
	for (int i = 0; i < song_len; i++) {
 8001210:	2300      	movs	r3, #0
 8001212:	61fb      	str	r3, [r7, #28]
 8001214:	e02c      	b.n	8001270 <play_frequency_array+0x90>
		int duration_ms = (int) ((beats[i]/beats_per_sec)*1000);
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	4413      	add	r3, r2
 800121e:	edd3 6a00 	vldr	s13, [r3]
 8001222:	ed97 7a06 	vldr	s14, [r7, #24]
 8001226:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800122a:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001288 <play_frequency_array+0xa8>
 800122e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001232:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001236:	ee17 3a90 	vmov	r3, s15
 800123a:	617b      	str	r3, [r7, #20]
		play_frequency(duration_ms, frequencies[i]);
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	68ba      	ldr	r2, [r7, #8]
 8001242:	4413      	add	r3, r2
 8001244:	edd3 7a00 	vldr	s15, [r3]
 8001248:	eeb0 0a67 	vmov.f32	s0, s15
 800124c:	6978      	ldr	r0, [r7, #20]
 800124e:	f7ff ff8d 	bl	800116c <play_frequency>
		pause_pwm((int) (50/(beats_per_sec)));
 8001252:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800128c <play_frequency_array+0xac>
 8001256:	ed97 7a06 	vldr	s14, [r7, #24]
 800125a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800125e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001262:	ee17 0a90 	vmov	r0, s15
 8001266:	f7ff ff6f 	bl	8001148 <pause_pwm>
	for (int i = 0; i < song_len; i++) {
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3301      	adds	r3, #1
 800126e:	61fb      	str	r3, [r7, #28]
 8001270:	69fa      	ldr	r2, [r7, #28]
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	429a      	cmp	r2, r3
 8001276:	dbce      	blt.n	8001216 <play_frequency_array+0x36>
	}
}
 8001278:	bf00      	nop
 800127a:	bf00      	nop
 800127c:	3720      	adds	r7, #32
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	88888889 	.word	0x88888889
 8001288:	447a0000 	.word	0x447a0000
 800128c:	42480000 	.word	0x42480000

08001290 <play_tune>:
/* function name: play_tune
 * purpose: plays a song based on the notes specified and the beats specified
 * input: array of beat-lengths, string of song notes, tempo.
 */

void play_tune(float beats[], char *song_notes, int tempo) {
 8001290:	b580      	push	{r7, lr}
 8001292:	b0ec      	sub	sp, #432	; 0x1b0
 8001294:	af00      	add	r7, sp, #0
 8001296:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 800129a:	f5a3 73d2 	sub.w	r3, r3, #420	; 0x1a4
 800129e:	6018      	str	r0, [r3, #0]
 80012a0:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80012a4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80012a8:	6019      	str	r1, [r3, #0]
 80012aa:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80012ae:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80012b2:	601a      	str	r2, [r3, #0]
	int note_num = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
	float freq_arr[100];
	char *context = NULL;
 80012ba:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80012be:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80012c2:	2200      	movs	r2, #0
 80012c4:	601a      	str	r2, [r3, #0]
	char *space_split = strtok_r(song_notes, " ", &context);
 80012c6:	f107 0214 	add.w	r2, r7, #20
 80012ca:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80012ce:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80012d2:	491f      	ldr	r1, [pc, #124]	; (8001350 <play_tune+0xc0>)
 80012d4:	6818      	ldr	r0, [r3, #0]
 80012d6:	f00a fa01 	bl	800b6dc <strtok_r>
 80012da:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
	while (space_split != NULL) {
 80012de:	e01d      	b.n	800131c <play_tune+0x8c>
		freq_arr[note_num] = get_freq_from_note(space_split);
 80012e0:	f8d7 01a8 	ldr.w	r0, [r7, #424]	; 0x1a8
 80012e4:	f7ff fe90 	bl	8001008 <get_freq_from_note>
 80012e8:	eef0 7a40 	vmov.f32	s15, s0
 80012ec:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 80012f0:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 80012f4:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	4413      	add	r3, r2
 80012fc:	edc3 7a00 	vstr	s15, [r3]
		note_num += 1;
 8001300:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001304:	3301      	adds	r3, #1
 8001306:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
		space_split = strtok_r(NULL, " ", &context);
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	461a      	mov	r2, r3
 8001310:	490f      	ldr	r1, [pc, #60]	; (8001350 <play_tune+0xc0>)
 8001312:	2000      	movs	r0, #0
 8001314:	f00a f9e2 	bl	800b6dc <strtok_r>
 8001318:	f8c7 01a8 	str.w	r0, [r7, #424]	; 0x1a8
	while (space_split != NULL) {
 800131c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1dd      	bne.n	80012e0 <play_tune+0x50>
	}
	play_frequency_array(beats, freq_arr, tempo, note_num);
 8001324:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001328:	f5a3 72d6 	sub.w	r2, r3, #428	; 0x1ac
 800132c:	f107 0118 	add.w	r1, r7, #24
 8001330:	f507 73d8 	add.w	r3, r7, #432	; 0x1b0
 8001334:	f5a3 70d2 	sub.w	r0, r3, #420	; 0x1a4
 8001338:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800133c:	6812      	ldr	r2, [r2, #0]
 800133e:	6800      	ldr	r0, [r0, #0]
 8001340:	f7ff ff4e 	bl	80011e0 <play_frequency_array>
}
 8001344:	bf00      	nop
 8001346:	f507 77d8 	add.w	r7, r7, #432	; 0x1b0
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	0800c560 	.word	0x0800c560

08001354 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 800135c:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <LL_AHB2_GRP1_EnableClock+0x34>)
 800135e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001362:	4909      	ldr	r1, [pc, #36]	; (8001388 <LL_AHB2_GRP1_EnableClock+0x34>)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4313      	orrs	r3, r2
 8001368:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <LL_AHB2_GRP1_EnableClock+0x34>)
 800136e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4013      	ands	r3, r2
 8001376:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001378:	68fb      	ldr	r3, [r7, #12]
}
 800137a:	bf00      	nop
 800137c:	3714      	adds	r7, #20
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	46020c00 	.word	0x46020c00

0800138c <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001394:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <LL_APB1_GRP2_EnableClock+0x34>)
 8001396:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800139a:	4909      	ldr	r1, [pc, #36]	; (80013c0 <LL_APB1_GRP2_EnableClock+0x34>)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4313      	orrs	r3, r2
 80013a0:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <LL_APB1_GRP2_EnableClock+0x34>)
 80013a6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4013      	ands	r3, r2
 80013ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013b0:	68fb      	ldr	r3, [r7, #12]
}
 80013b2:	bf00      	nop
 80013b4:	3714      	adds	r7, #20
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	46020c00 	.word	0x46020c00

080013c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013c4:	b5b0      	push	{r4, r5, r7, lr}
 80013c6:	b0de      	sub	sp, #376	; 0x178
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013ca:	f001 fbb3 	bl	8002b34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013ce:	f000 f861 	bl	8001494 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 80013d2:	f000 f8be 	bl	8001552 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013d6:	f000 fbf5 	bl	8001bc4 <MX_GPIO_Init>
  MX_ADF1_Init();
 80013da:	f000 f8c9 	bl	8001570 <MX_ADF1_Init>
  MX_I2C1_Init();
 80013de:	f000 f913 	bl	8001608 <MX_I2C1_Init>
  MX_I2C2_Init();
 80013e2:	f000 f951 	bl	8001688 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 80013e6:	f000 f98f 	bl	8001708 <MX_OCTOSPI1_Init>
  MX_OCTOSPI2_Init();
 80013ea:	f000 fa07 	bl	80017fc <MX_OCTOSPI2_Init>
  MX_SPI2_Init();
 80013ee:	f000 fa81 	bl	80018f4 <MX_SPI2_Init>
  MX_UART4_Init();
 80013f2:	f000 faed 	bl	80019d0 <MX_UART4_Init>
  MX_USART1_UART_Init();
 80013f6:	f000 fb37 	bl	8001a68 <MX_USART1_UART_Init>
  MX_UCPD1_Init();
 80013fa:	f000 fb81 	bl	8001b00 <MX_UCPD1_Init>
  MX_USB_OTG_FS_PCD_Init();
 80013fe:	f000 fbb5 	bl	8001b6c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  float twinkle_twinkle_beats[] = {1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2};
 8001402:	4a20      	ldr	r2, [pc, #128]	; (8001484 <main+0xc0>)
 8001404:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001408:	4611      	mov	r1, r2
 800140a:	22a8      	movs	r2, #168	; 0xa8
 800140c:	4618      	mov	r0, r3
 800140e:	f00a f901 	bl	800b614 <memcpy>
  char twinkle_twinkle_notes[] = "C4 C4 G4 G4 A4 A4 G4 F4 F4 E4 E4 D4 D4 C4 G4 G4 F4 F4 E4 E4 D4 G4 G4 F4 F4 E4 E4 D4 C4 C4 G4 G4 A4 A4 G4 F4 F4 E4 E4 D4 D4 C4 ";
 8001412:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001416:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800141a:	4a1b      	ldr	r2, [pc, #108]	; (8001488 <main+0xc4>)
 800141c:	4618      	mov	r0, r3
 800141e:	4611      	mov	r1, r2
 8001420:	237f      	movs	r3, #127	; 0x7f
 8001422:	461a      	mov	r2, r3
 8001424:	f00a f8f6 	bl	800b614 <memcpy>
  char xfiles_notes[] = "A3 C4 E4 F4 0 A4 E4 D4 E4 G4 E4";
 8001428:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 800142c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001430:	4a16      	ldr	r2, [pc, #88]	; (800148c <main+0xc8>)
 8001432:	461c      	mov	r4, r3
 8001434:	4615      	mov	r5, r2
 8001436:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001438:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800143a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800143e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  float xfiles_beats[] = {0.5, 0.5, 0.5, 1, 1, 1, 1, 1, 1, 1, 2};
 8001442:	f507 73bc 	add.w	r3, r7, #376	; 0x178
 8001446:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800144a:	4a11      	ldr	r2, [pc, #68]	; (8001490 <main+0xcc>)
 800144c:	461c      	mov	r4, r3
 800144e:	4615      	mov	r5, r2
 8001450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001454:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001456:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001458:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800145c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	piezo_init();
 8001460:	f7ff fdb8 	bl	8000fd4 <piezo_init>
	//play_frequency_repeat(500, 300, 4, 100);
	//play_ascending(300, 500, 500, 0, 5);
	//play_descending(500, 300, 500, 0, 5);

	play_tune(twinkle_twinkle_beats, twinkle_twinkle_notes, 120);
 8001464:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001468:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800146c:	2278      	movs	r2, #120	; 0x78
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff ff0e 	bl	8001290 <play_tune>
	break;
 8001474:	bf00      	nop
 8001476:	2300      	movs	r3, #0
    /* USER CODE END WHILE */
  }
    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8001478:	4618      	mov	r0, r3
 800147a:	f507 77bc 	add.w	r7, r7, #376	; 0x178
 800147e:	46bd      	mov	sp, r7
 8001480:	bdb0      	pop	{r4, r5, r7, pc}
 8001482:	bf00      	nop
 8001484:	0800c564 	.word	0x0800c564
 8001488:	0800c60c 	.word	0x0800c60c
 800148c:	0800c68c 	.word	0x0800c68c
 8001490:	0800c6ac 	.word	0x0800c6ac

08001494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b09e      	sub	sp, #120	; 0x78
 8001498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800149a:	f107 0318 	add.w	r3, r7, #24
 800149e:	2260      	movs	r2, #96	; 0x60
 80014a0:	2100      	movs	r1, #0
 80014a2:	4618      	mov	r0, r3
 80014a4:	f00a f8c3 	bl	800b62e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014a8:	463b      	mov	r3, r7
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]
 80014b6:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 80014b8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80014bc:	f003 faec 	bl	8004a98 <HAL_PWREx_ControlVoltageScaling>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <SystemClock_Config+0x36>
  {
    Error_Handler();
 80014c6:	f000 fcff 	bl	8001ec8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 80014ca:	2330      	movs	r3, #48	; 0x30
 80014cc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80014ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014d4:	2301      	movs	r3, #1
 80014d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80014d8:	2310      	movs	r3, #16
 80014da:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 80014dc:	2300      	movs	r3, #0
 80014de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e0:	2302      	movs	r3, #2
 80014e2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80014e4:	2301      	movs	r3, #1
 80014e6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 80014e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 80014ee:	2303      	movs	r3, #3
 80014f0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 80014f2:	2308      	movs	r3, #8
 80014f4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80014f6:	2302      	movs	r3, #2
 80014f8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80014fa:	2302      	movs	r3, #2
 80014fc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 80014fe:	2302      	movs	r3, #2
 8001500:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001502:	230c      	movs	r3, #12
 8001504:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001506:	2300      	movs	r3, #0
 8001508:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800150a:	f107 0318 	add.w	r3, r7, #24
 800150e:	4618      	mov	r0, r3
 8001510:	f003 fbb4 	bl	8004c7c <HAL_RCC_OscConfig>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800151a:	f000 fcd5 	bl	8001ec8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800151e:	231f      	movs	r3, #31
 8001520:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001522:	2303      	movs	r3, #3
 8001524:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001526:	2300      	movs	r3, #0
 8001528:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001536:	463b      	mov	r3, r7
 8001538:	2102      	movs	r1, #2
 800153a:	4618      	mov	r0, r3
 800153c:	f004 fa74 	bl	8005a28 <HAL_RCC_ClockConfig>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001546:	f000 fcbf 	bl	8001ec8 <Error_Handler>
  }
}
 800154a:	bf00      	nop
 800154c:	3778      	adds	r7, #120	; 0x78
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}

08001552 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8001552:	b580      	push	{r7, lr}
 8001554:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8001556:	f003 fb81 	bl	8004c5c <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800155a:	2002      	movs	r0, #2
 800155c:	f003 fb1e 	bl	8004b9c <HAL_PWREx_ConfigSupply>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <SystemPower_Config+0x18>
  {
    Error_Handler();
 8001566:	f000 fcaf 	bl	8001ec8 <Error_Handler>
  }
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <MX_ADF1_Init>:
  * @brief ADF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADF1_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE END ADF1_Init 1 */

  /**
    AdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  AdfHandle0.Instance = ADF1_Filter0;
 8001574:	4b21      	ldr	r3, [pc, #132]	; (80015fc <MX_ADF1_Init+0x8c>)
 8001576:	4a22      	ldr	r2, [pc, #136]	; (8001600 <MX_ADF1_Init+0x90>)
 8001578:	601a      	str	r2, [r3, #0]
  AdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 800157a:	4b20      	ldr	r3, [pc, #128]	; (80015fc <MX_ADF1_Init+0x8c>)
 800157c:	2201      	movs	r2, #1
 800157e:	609a      	str	r2, [r3, #8]
  AdfHandle0.Init.CommonParam.OutputClock.Activation = DISABLE;
 8001580:	4b1e      	ldr	r3, [pc, #120]	; (80015fc <MX_ADF1_Init+0x8c>)
 8001582:	2200      	movs	r2, #0
 8001584:	731a      	strb	r2, [r3, #12]
  AdfHandle0.Init.SerialInterface.Activation = ENABLE;
 8001586:	4b1d      	ldr	r3, [pc, #116]	; (80015fc <MX_ADF1_Init+0x8c>)
 8001588:	2201      	movs	r2, #1
 800158a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  AdfHandle0.Init.SerialInterface.ClockSource = MDF_SITF_CCK0_SOURCE;
 800158e:	4b1b      	ldr	r3, [pc, #108]	; (80015fc <MX_ADF1_Init+0x8c>)
 8001590:	2200      	movs	r2, #0
 8001592:	62da      	str	r2, [r3, #44]	; 0x2c
  AdfHandle0.Init.SerialInterface.Threshold = 4;
 8001594:	4b19      	ldr	r3, [pc, #100]	; (80015fc <MX_ADF1_Init+0x8c>)
 8001596:	2204      	movs	r2, #4
 8001598:	631a      	str	r2, [r3, #48]	; 0x30
  AdfHandle0.Init.FilterBistream = MDF_BITSTREAM0_FALLING;
 800159a:	4b18      	ldr	r3, [pc, #96]	; (80015fc <MX_ADF1_Init+0x8c>)
 800159c:	2201      	movs	r2, #1
 800159e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_MDF_Init(&AdfHandle0) != HAL_OK)
 80015a0:	4816      	ldr	r0, [pc, #88]	; (80015fc <MX_ADF1_Init+0x8c>)
 80015a2:	f002 f811 	bl	80035c8 <HAL_MDF_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_ADF1_Init+0x40>
  {
    Error_Handler();
 80015ac:	f000 fc8c 	bl	8001ec8 <Error_Handler>
  /**
    AdfFilterConfig0 structure initialization

    WARNING : only structure is filled, no specific init function call for filter
  */
  AdfFilterConfig0.DataSource = MDF_DATA_SOURCE_BSMX;
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <MX_ADF1_Init+0x94>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	601a      	str	r2, [r3, #0]
  AdfFilterConfig0.Delay = 0;
 80015b6:	4b13      	ldr	r3, [pc, #76]	; (8001604 <MX_ADF1_Init+0x94>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	605a      	str	r2, [r3, #4]
  AdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC4;
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <MX_ADF1_Init+0x94>)
 80015be:	2240      	movs	r2, #64	; 0x40
 80015c0:	609a      	str	r2, [r3, #8]
  AdfFilterConfig0.DecimationRatio = 2;
 80015c2:	4b10      	ldr	r3, [pc, #64]	; (8001604 <MX_ADF1_Init+0x94>)
 80015c4:	2202      	movs	r2, #2
 80015c6:	60da      	str	r2, [r3, #12]
  AdfFilterConfig0.Gain = 0;
 80015c8:	4b0e      	ldr	r3, [pc, #56]	; (8001604 <MX_ADF1_Init+0x94>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	615a      	str	r2, [r3, #20]
  AdfFilterConfig0.ReshapeFilter.Activation = DISABLE;
 80015ce:	4b0d      	ldr	r3, [pc, #52]	; (8001604 <MX_ADF1_Init+0x94>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	761a      	strb	r2, [r3, #24]
  AdfFilterConfig0.HighPassFilter.Activation = DISABLE;
 80015d4:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <MX_ADF1_Init+0x94>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2020 	strb.w	r2, [r3, #32]
  AdfFilterConfig0.SoundActivity.Activation = DISABLE;
 80015dc:	4b09      	ldr	r3, [pc, #36]	; (8001604 <MX_ADF1_Init+0x94>)
 80015de:	2200      	movs	r2, #0
 80015e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  AdfFilterConfig0.AcquisitionMode = MDF_MODE_ASYNC_CONT;
 80015e4:	4b07      	ldr	r3, [pc, #28]	; (8001604 <MX_ADF1_Init+0x94>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	665a      	str	r2, [r3, #100]	; 0x64
  AdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <MX_ADF1_Init+0x94>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	669a      	str	r2, [r3, #104]	; 0x68
  AdfFilterConfig0.DiscardSamples = 0;
 80015f0:	4b04      	ldr	r3, [pc, #16]	; (8001604 <MX_ADF1_Init+0x94>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	66da      	str	r2, [r3, #108]	; 0x6c
  /* USER CODE BEGIN ADF1_Init 2 */

  /* USER CODE END ADF1_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	200000d8 	.word	0x200000d8
 8001600:	46024080 	.word	0x46024080
 8001604:	2000011c 	.word	0x2000011c

08001608 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800160c:	4b1b      	ldr	r3, [pc, #108]	; (800167c <MX_I2C1_Init+0x74>)
 800160e:	4a1c      	ldr	r2, [pc, #112]	; (8001680 <MX_I2C1_Init+0x78>)
 8001610:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8001612:	4b1a      	ldr	r3, [pc, #104]	; (800167c <MX_I2C1_Init+0x74>)
 8001614:	4a1b      	ldr	r2, [pc, #108]	; (8001684 <MX_I2C1_Init+0x7c>)
 8001616:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001618:	4b18      	ldr	r3, [pc, #96]	; (800167c <MX_I2C1_Init+0x74>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800161e:	4b17      	ldr	r3, [pc, #92]	; (800167c <MX_I2C1_Init+0x74>)
 8001620:	2201      	movs	r2, #1
 8001622:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001624:	4b15      	ldr	r3, [pc, #84]	; (800167c <MX_I2C1_Init+0x74>)
 8001626:	2200      	movs	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800162a:	4b14      	ldr	r3, [pc, #80]	; (800167c <MX_I2C1_Init+0x74>)
 800162c:	2200      	movs	r2, #0
 800162e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001630:	4b12      	ldr	r3, [pc, #72]	; (800167c <MX_I2C1_Init+0x74>)
 8001632:	2200      	movs	r2, #0
 8001634:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001636:	4b11      	ldr	r3, [pc, #68]	; (800167c <MX_I2C1_Init+0x74>)
 8001638:	2200      	movs	r2, #0
 800163a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800163c:	4b0f      	ldr	r3, [pc, #60]	; (800167c <MX_I2C1_Init+0x74>)
 800163e:	2200      	movs	r2, #0
 8001640:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001642:	480e      	ldr	r0, [pc, #56]	; (800167c <MX_I2C1_Init+0x74>)
 8001644:	f001 fe9a 	bl	800337c <HAL_I2C_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800164e:	f000 fc3b 	bl	8001ec8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001652:	2100      	movs	r1, #0
 8001654:	4809      	ldr	r0, [pc, #36]	; (800167c <MX_I2C1_Init+0x74>)
 8001656:	f001 ff20 	bl	800349a <HAL_I2CEx_ConfigAnalogFilter>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001660:	f000 fc32 	bl	8001ec8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001664:	2100      	movs	r1, #0
 8001666:	4805      	ldr	r0, [pc, #20]	; (800167c <MX_I2C1_Init+0x74>)
 8001668:	f001 ff62 	bl	8003530 <HAL_I2CEx_ConfigDigitalFilter>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001672:	f000 fc29 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000198 	.word	0x20000198
 8001680:	40005400 	.word	0x40005400
 8001684:	10707dbc 	.word	0x10707dbc

08001688 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800168c:	4b1b      	ldr	r3, [pc, #108]	; (80016fc <MX_I2C2_Init+0x74>)
 800168e:	4a1c      	ldr	r2, [pc, #112]	; (8001700 <MX_I2C2_Init+0x78>)
 8001690:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 8001692:	4b1a      	ldr	r3, [pc, #104]	; (80016fc <MX_I2C2_Init+0x74>)
 8001694:	4a1b      	ldr	r2, [pc, #108]	; (8001704 <MX_I2C2_Init+0x7c>)
 8001696:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001698:	4b18      	ldr	r3, [pc, #96]	; (80016fc <MX_I2C2_Init+0x74>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800169e:	4b17      	ldr	r3, [pc, #92]	; (80016fc <MX_I2C2_Init+0x74>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016a4:	4b15      	ldr	r3, [pc, #84]	; (80016fc <MX_I2C2_Init+0x74>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80016aa:	4b14      	ldr	r3, [pc, #80]	; (80016fc <MX_I2C2_Init+0x74>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016b0:	4b12      	ldr	r3, [pc, #72]	; (80016fc <MX_I2C2_Init+0x74>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016b6:	4b11      	ldr	r3, [pc, #68]	; (80016fc <MX_I2C2_Init+0x74>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016bc:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <MX_I2C2_Init+0x74>)
 80016be:	2200      	movs	r2, #0
 80016c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016c2:	480e      	ldr	r0, [pc, #56]	; (80016fc <MX_I2C2_Init+0x74>)
 80016c4:	f001 fe5a 	bl	800337c <HAL_I2C_Init>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80016ce:	f000 fbfb 	bl	8001ec8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016d2:	2100      	movs	r1, #0
 80016d4:	4809      	ldr	r0, [pc, #36]	; (80016fc <MX_I2C2_Init+0x74>)
 80016d6:	f001 fee0 	bl	800349a <HAL_I2CEx_ConfigAnalogFilter>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80016e0:	f000 fbf2 	bl	8001ec8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80016e4:	2100      	movs	r1, #0
 80016e6:	4805      	ldr	r0, [pc, #20]	; (80016fc <MX_I2C2_Init+0x74>)
 80016e8:	f001 ff22 	bl	8003530 <HAL_I2CEx_ConfigDigitalFilter>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80016f2:	f000 fbe9 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200001e4 	.word	0x200001e4
 8001700:	40005800 	.word	0x40005800
 8001704:	10707dbc 	.word	0x10707dbc

08001708 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b088      	sub	sp, #32
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 800170e:	f107 0308 	add.w	r3, r7, #8
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
 800171c:	611a      	str	r2, [r3, #16]
 800171e:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8001720:	463b      	mov	r3, r7
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8001728:	4b31      	ldr	r3, [pc, #196]	; (80017f0 <MX_OCTOSPI1_Init+0xe8>)
 800172a:	4a32      	ldr	r2, [pc, #200]	; (80017f4 <MX_OCTOSPI1_Init+0xec>)
 800172c:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 800172e:	4b30      	ldr	r3, [pc, #192]	; (80017f0 <MX_OCTOSPI1_Init+0xe8>)
 8001730:	2201      	movs	r2, #1
 8001732:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001734:	4b2e      	ldr	r3, [pc, #184]	; (80017f0 <MX_OCTOSPI1_Init+0xe8>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_APMEMORY;
 800173a:	4b2d      	ldr	r3, [pc, #180]	; (80017f0 <MX_OCTOSPI1_Init+0xe8>)
 800173c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001740:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 24;
 8001742:	4b2b      	ldr	r3, [pc, #172]	; (80017f0 <MX_OCTOSPI1_Init+0xe8>)
 8001744:	2218      	movs	r2, #24
 8001746:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001748:	4b29      	ldr	r3, [pc, #164]	; (80017f0 <MX_OCTOSPI1_Init+0xe8>)
 800174a:	2201      	movs	r2, #1
 800174c:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800174e:	4b28      	ldr	r3, [pc, #160]	; (80017f0 <MX_OCTOSPI1_Init+0xe8>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001754:	4b26      	ldr	r3, [pc, #152]	; (80017f0 <MX_OCTOSPI1_Init+0xe8>)
 8001756:	2200      	movs	r2, #0
 8001758:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800175a:	4b25      	ldr	r3, [pc, #148]	; (80017f0 <MX_OCTOSPI1_Init+0xe8>)
 800175c:	2200      	movs	r2, #0
 800175e:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 2;
 8001760:	4b23      	ldr	r3, [pc, #140]	; (80017f0 <MX_OCTOSPI1_Init+0xe8>)
 8001762:	2202      	movs	r2, #2
 8001764:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001766:	4b22      	ldr	r3, [pc, #136]	; (80017f0 <MX_OCTOSPI1_Init+0xe8>)
 8001768:	2200      	movs	r2, #0
 800176a:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800176c:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <MX_OCTOSPI1_Init+0xe8>)
 800176e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001772:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 10;
 8001774:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <MX_OCTOSPI1_Init+0xe8>)
 8001776:	220a      	movs	r2, #10
 8001778:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 800177a:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <MX_OCTOSPI1_Init+0xe8>)
 800177c:	2200      	movs	r2, #0
 800177e:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8001780:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <MX_OCTOSPI1_Init+0xe8>)
 8001782:	2200      	movs	r2, #0
 8001784:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 100;
 8001786:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <MX_OCTOSPI1_Init+0xe8>)
 8001788:	2264      	movs	r2, #100	; 0x64
 800178a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800178c:	4818      	ldr	r0, [pc, #96]	; (80017f0 <MX_OCTOSPI1_Init+0xe8>)
 800178e:	f002 f8c7 	bl	8003920 <HAL_OSPI_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_OCTOSPI1_Init+0x94>
  {
    Error_Handler();
 8001798:	f000 fb96 	bl	8001ec8 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 800179c:	2301      	movs	r3, #1
 800179e:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.DQSPort = 1;
 80017a0:	2301      	movs	r3, #1
 80017a2:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.NCSPort = 1;
 80017a4:	2301      	movs	r3, #1
 80017a6:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80017a8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80017ac:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 80017ae:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <MX_OCTOSPI1_Init+0xf0>)
 80017b0:	61bb      	str	r3, [r7, #24]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80017b2:	f107 0308 	add.w	r3, r7, #8
 80017b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ba:	4619      	mov	r1, r3
 80017bc:	480c      	ldr	r0, [pc, #48]	; (80017f0 <MX_OCTOSPI1_Init+0xe8>)
 80017be:	f002 f9ef 	bl	8003ba0 <HAL_OSPIM_Config>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_OCTOSPI1_Init+0xc4>
  {
    Error_Handler();
 80017c8:	f000 fb7e 	bl	8001ec8 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 80017d4:	463b      	mov	r3, r7
 80017d6:	4619      	mov	r1, r3
 80017d8:	4805      	ldr	r0, [pc, #20]	; (80017f0 <MX_OCTOSPI1_Init+0xe8>)
 80017da:	f002 ffcd 	bl	8004778 <HAL_OSPI_DLYB_SetConfig>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_OCTOSPI1_Init+0xe0>
  {
    Error_Handler();
 80017e4:	f000 fb70 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80017e8:	bf00      	nop
 80017ea:	3720      	adds	r7, #32
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000230 	.word	0x20000230
 80017f4:	420d1400 	.word	0x420d1400
 80017f8:	01000001 	.word	0x01000001

080017fc <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b088      	sub	sp, #32
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8001802:	f107 0308 	add.w	r3, r7, #8
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]
 8001810:	611a      	str	r2, [r3, #16]
 8001812:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8001814:	463b      	mov	r3, r7
 8001816:	2200      	movs	r2, #0
 8001818:	601a      	str	r2, [r3, #0]
 800181a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 800181c:	4b31      	ldr	r3, [pc, #196]	; (80018e4 <MX_OCTOSPI2_Init+0xe8>)
 800181e:	4a32      	ldr	r2, [pc, #200]	; (80018e8 <MX_OCTOSPI2_Init+0xec>)
 8001820:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 4;
 8001822:	4b30      	ldr	r3, [pc, #192]	; (80018e4 <MX_OCTOSPI2_Init+0xe8>)
 8001824:	2204      	movs	r2, #4
 8001826:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8001828:	4b2e      	ldr	r3, [pc, #184]	; (80018e4 <MX_OCTOSPI2_Init+0xe8>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 800182e:	4b2d      	ldr	r3, [pc, #180]	; (80018e4 <MX_OCTOSPI2_Init+0xe8>)
 8001830:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001834:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 26;
 8001836:	4b2b      	ldr	r3, [pc, #172]	; (80018e4 <MX_OCTOSPI2_Init+0xe8>)
 8001838:	221a      	movs	r2, #26
 800183a:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 2;
 800183c:	4b29      	ldr	r3, [pc, #164]	; (80018e4 <MX_OCTOSPI2_Init+0xe8>)
 800183e:	2202      	movs	r2, #2
 8001840:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001842:	4b28      	ldr	r3, [pc, #160]	; (80018e4 <MX_OCTOSPI2_Init+0xe8>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001848:	4b26      	ldr	r3, [pc, #152]	; (80018e4 <MX_OCTOSPI2_Init+0xe8>)
 800184a:	2200      	movs	r2, #0
 800184c:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800184e:	4b25      	ldr	r3, [pc, #148]	; (80018e4 <MX_OCTOSPI2_Init+0xe8>)
 8001850:	2200      	movs	r2, #0
 8001852:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 4;
 8001854:	4b23      	ldr	r3, [pc, #140]	; (80018e4 <MX_OCTOSPI2_Init+0xe8>)
 8001856:	2204      	movs	r2, #4
 8001858:	625a      	str	r2, [r3, #36]	; 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800185a:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <MX_OCTOSPI2_Init+0xe8>)
 800185c:	2200      	movs	r2, #0
 800185e:	629a      	str	r2, [r3, #40]	; 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8001860:	4b20      	ldr	r3, [pc, #128]	; (80018e4 <MX_OCTOSPI2_Init+0xe8>)
 8001862:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001866:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 8001868:	4b1e      	ldr	r3, [pc, #120]	; (80018e4 <MX_OCTOSPI2_Init+0xe8>)
 800186a:	2200      	movs	r2, #0
 800186c:	631a      	str	r2, [r3, #48]	; 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 800186e:	4b1d      	ldr	r3, [pc, #116]	; (80018e4 <MX_OCTOSPI2_Init+0xe8>)
 8001870:	2200      	movs	r2, #0
 8001872:	635a      	str	r2, [r3, #52]	; 0x34
  hospi2.Init.MaxTran = 0;
 8001874:	4b1b      	ldr	r3, [pc, #108]	; (80018e4 <MX_OCTOSPI2_Init+0xe8>)
 8001876:	2200      	movs	r2, #0
 8001878:	639a      	str	r2, [r3, #56]	; 0x38
  hospi2.Init.Refresh = 0;
 800187a:	4b1a      	ldr	r3, [pc, #104]	; (80018e4 <MX_OCTOSPI2_Init+0xe8>)
 800187c:	2200      	movs	r2, #0
 800187e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8001880:	4818      	ldr	r0, [pc, #96]	; (80018e4 <MX_OCTOSPI2_Init+0xe8>)
 8001882:	f002 f84d 	bl	8003920 <HAL_OSPI_Init>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_OCTOSPI2_Init+0x94>
  {
    Error_Handler();
 800188c:	f000 fb1c 	bl	8001ec8 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 2;
 8001890:	2302      	movs	r3, #2
 8001892:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.DQSPort = 2;
 8001894:	2302      	movs	r3, #2
 8001896:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.NCSPort = 2;
 8001898:	2302      	movs	r3, #2
 800189a:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 800189c:	4b13      	ldr	r3, [pc, #76]	; (80018ec <MX_OCTOSPI2_Init+0xf0>)
 800189e:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 80018a0:	4b13      	ldr	r3, [pc, #76]	; (80018f0 <MX_OCTOSPI2_Init+0xf4>)
 80018a2:	61bb      	str	r3, [r7, #24]
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80018a4:	f107 0308 	add.w	r3, r7, #8
 80018a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ac:	4619      	mov	r1, r3
 80018ae:	480d      	ldr	r0, [pc, #52]	; (80018e4 <MX_OCTOSPI2_Init+0xe8>)
 80018b0:	f002 f976 	bl	8003ba0 <HAL_OSPIM_Config>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_OCTOSPI2_Init+0xc2>
  {
    Error_Handler();
 80018ba:	f000 fb05 	bl	8001ec8 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 80018be:	2300      	movs	r3, #0
 80018c0:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 80018c2:	2300      	movs	r3, #0
 80018c4:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi2, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 80018c6:	463b      	mov	r3, r7
 80018c8:	4619      	mov	r1, r3
 80018ca:	4806      	ldr	r0, [pc, #24]	; (80018e4 <MX_OCTOSPI2_Init+0xe8>)
 80018cc:	f002 ff54 	bl	8004778 <HAL_OSPI_DLYB_SetConfig>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_OCTOSPI2_Init+0xde>
  {
    Error_Handler();
 80018d6:	f000 faf7 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 80018da:	bf00      	nop
 80018dc:	3720      	adds	r7, #32
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	2000028c 	.word	0x2000028c
 80018e8:	420d2400 	.word	0x420d2400
 80018ec:	00010002 	.word	0x00010002
 80018f0:	01000002 	.word	0x01000002

080018f4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b084      	sub	sp, #16
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80018fa:	1d3b      	adds	r3, r7, #4
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	605a      	str	r2, [r3, #4]
 8001902:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001904:	4b30      	ldr	r3, [pc, #192]	; (80019c8 <MX_SPI2_Init+0xd4>)
 8001906:	4a31      	ldr	r2, [pc, #196]	; (80019cc <MX_SPI2_Init+0xd8>)
 8001908:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800190a:	4b2f      	ldr	r3, [pc, #188]	; (80019c8 <MX_SPI2_Init+0xd4>)
 800190c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001910:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001912:	4b2d      	ldr	r3, [pc, #180]	; (80019c8 <MX_SPI2_Init+0xd4>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001918:	4b2b      	ldr	r3, [pc, #172]	; (80019c8 <MX_SPI2_Init+0xd4>)
 800191a:	2203      	movs	r2, #3
 800191c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800191e:	4b2a      	ldr	r3, [pc, #168]	; (80019c8 <MX_SPI2_Init+0xd4>)
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001924:	4b28      	ldr	r3, [pc, #160]	; (80019c8 <MX_SPI2_Init+0xd4>)
 8001926:	2200      	movs	r2, #0
 8001928:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800192a:	4b27      	ldr	r3, [pc, #156]	; (80019c8 <MX_SPI2_Init+0xd4>)
 800192c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001930:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001932:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <MX_SPI2_Init+0xd4>)
 8001934:	2200      	movs	r2, #0
 8001936:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001938:	4b23      	ldr	r3, [pc, #140]	; (80019c8 <MX_SPI2_Init+0xd4>)
 800193a:	2200      	movs	r2, #0
 800193c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800193e:	4b22      	ldr	r3, [pc, #136]	; (80019c8 <MX_SPI2_Init+0xd4>)
 8001940:	2200      	movs	r2, #0
 8001942:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001944:	4b20      	ldr	r3, [pc, #128]	; (80019c8 <MX_SPI2_Init+0xd4>)
 8001946:	2200      	movs	r2, #0
 8001948:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 800194a:	4b1f      	ldr	r3, [pc, #124]	; (80019c8 <MX_SPI2_Init+0xd4>)
 800194c:	2207      	movs	r2, #7
 800194e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001950:	4b1d      	ldr	r3, [pc, #116]	; (80019c8 <MX_SPI2_Init+0xd4>)
 8001952:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001956:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001958:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <MX_SPI2_Init+0xd4>)
 800195a:	2200      	movs	r2, #0
 800195c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800195e:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <MX_SPI2_Init+0xd4>)
 8001960:	2200      	movs	r2, #0
 8001962:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001964:	4b18      	ldr	r3, [pc, #96]	; (80019c8 <MX_SPI2_Init+0xd4>)
 8001966:	2200      	movs	r2, #0
 8001968:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800196a:	4b17      	ldr	r3, [pc, #92]	; (80019c8 <MX_SPI2_Init+0xd4>)
 800196c:	2200      	movs	r2, #0
 800196e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001970:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <MX_SPI2_Init+0xd4>)
 8001972:	2200      	movs	r2, #0
 8001974:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001976:	4b14      	ldr	r3, [pc, #80]	; (80019c8 <MX_SPI2_Init+0xd4>)
 8001978:	2200      	movs	r2, #0
 800197a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <MX_SPI2_Init+0xd4>)
 800197e:	2200      	movs	r2, #0
 8001980:	659a      	str	r2, [r3, #88]	; 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001982:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <MX_SPI2_Init+0xd4>)
 8001984:	2200      	movs	r2, #0
 8001986:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001988:	4b0f      	ldr	r3, [pc, #60]	; (80019c8 <MX_SPI2_Init+0xd4>)
 800198a:	2200      	movs	r2, #0
 800198c:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800198e:	480e      	ldr	r0, [pc, #56]	; (80019c8 <MX_SPI2_Init+0xd4>)
 8001990:	f007 f86a 	bl	8008a68 <HAL_SPI_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_SPI2_Init+0xaa>
  {
    Error_Handler();
 800199a:	f000 fa95 	bl	8001ec8 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 80019a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80019a6:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80019ac:	1d3b      	adds	r3, r7, #4
 80019ae:	4619      	mov	r1, r3
 80019b0:	4805      	ldr	r0, [pc, #20]	; (80019c8 <MX_SPI2_Init+0xd4>)
 80019b2:	f007 f96c 	bl	8008c8e <HAL_SPIEx_SetConfigAutonomousMode>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_SPI2_Init+0xcc>
  {
    Error_Handler();
 80019bc:	f000 fa84 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80019c0:	bf00      	nop
 80019c2:	3710      	adds	r7, #16
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	200002e8 	.word	0x200002e8
 80019cc:	40003800 	.word	0x40003800

080019d0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80019d4:	4b22      	ldr	r3, [pc, #136]	; (8001a60 <MX_UART4_Init+0x90>)
 80019d6:	4a23      	ldr	r2, [pc, #140]	; (8001a64 <MX_UART4_Init+0x94>)
 80019d8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80019da:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <MX_UART4_Init+0x90>)
 80019dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019e0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80019e2:	4b1f      	ldr	r3, [pc, #124]	; (8001a60 <MX_UART4_Init+0x90>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80019e8:	4b1d      	ldr	r3, [pc, #116]	; (8001a60 <MX_UART4_Init+0x90>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80019ee:	4b1c      	ldr	r3, [pc, #112]	; (8001a60 <MX_UART4_Init+0x90>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80019f4:	4b1a      	ldr	r3, [pc, #104]	; (8001a60 <MX_UART4_Init+0x90>)
 80019f6:	220c      	movs	r2, #12
 80019f8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019fa:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <MX_UART4_Init+0x90>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a00:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <MX_UART4_Init+0x90>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a06:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <MX_UART4_Init+0x90>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a0c:	4b14      	ldr	r3, [pc, #80]	; (8001a60 <MX_UART4_Init+0x90>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a12:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <MX_UART4_Init+0x90>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a18:	4811      	ldr	r0, [pc, #68]	; (8001a60 <MX_UART4_Init+0x90>)
 8001a1a:	f008 fc7f 	bl	800a31c <HAL_UART_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001a24:	f000 fa50 	bl	8001ec8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a28:	2100      	movs	r1, #0
 8001a2a:	480d      	ldr	r0, [pc, #52]	; (8001a60 <MX_UART4_Init+0x90>)
 8001a2c:	f009 f856 	bl	800aadc <HAL_UARTEx_SetTxFifoThreshold>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001a36:	f000 fa47 	bl	8001ec8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4808      	ldr	r0, [pc, #32]	; (8001a60 <MX_UART4_Init+0x90>)
 8001a3e:	f009 f88b 	bl	800ab58 <HAL_UARTEx_SetRxFifoThreshold>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001a48:	f000 fa3e 	bl	8001ec8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001a4c:	4804      	ldr	r0, [pc, #16]	; (8001a60 <MX_UART4_Init+0x90>)
 8001a4e:	f009 f80c 	bl	800aa6a <HAL_UARTEx_DisableFifoMode>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d001      	beq.n	8001a5c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001a58:	f000 fa36 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	20000378 	.word	0x20000378
 8001a64:	40004c00 	.word	0x40004c00

08001a68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a6c:	4b22      	ldr	r3, [pc, #136]	; (8001af8 <MX_USART1_UART_Init+0x90>)
 8001a6e:	4a23      	ldr	r2, [pc, #140]	; (8001afc <MX_USART1_UART_Init+0x94>)
 8001a70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a72:	4b21      	ldr	r3, [pc, #132]	; (8001af8 <MX_USART1_UART_Init+0x90>)
 8001a74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7a:	4b1f      	ldr	r3, [pc, #124]	; (8001af8 <MX_USART1_UART_Init+0x90>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a80:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <MX_USART1_UART_Init+0x90>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a86:	4b1c      	ldr	r3, [pc, #112]	; (8001af8 <MX_USART1_UART_Init+0x90>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a8c:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <MX_USART1_UART_Init+0x90>)
 8001a8e:	220c      	movs	r2, #12
 8001a90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a92:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <MX_USART1_UART_Init+0x90>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a98:	4b17      	ldr	r3, [pc, #92]	; (8001af8 <MX_USART1_UART_Init+0x90>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a9e:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <MX_USART1_UART_Init+0x90>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001aa4:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <MX_USART1_UART_Init+0x90>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001aaa:	4b13      	ldr	r3, [pc, #76]	; (8001af8 <MX_USART1_UART_Init+0x90>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ab0:	4811      	ldr	r0, [pc, #68]	; (8001af8 <MX_USART1_UART_Init+0x90>)
 8001ab2:	f008 fc33 	bl	800a31c <HAL_UART_Init>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001abc:	f000 fa04 	bl	8001ec8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	480d      	ldr	r0, [pc, #52]	; (8001af8 <MX_USART1_UART_Init+0x90>)
 8001ac4:	f009 f80a 	bl	800aadc <HAL_UARTEx_SetTxFifoThreshold>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001ace:	f000 f9fb 	bl	8001ec8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	4808      	ldr	r0, [pc, #32]	; (8001af8 <MX_USART1_UART_Init+0x90>)
 8001ad6:	f009 f83f 	bl	800ab58 <HAL_UARTEx_SetRxFifoThreshold>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001ae0:	f000 f9f2 	bl	8001ec8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ae4:	4804      	ldr	r0, [pc, #16]	; (8001af8 <MX_USART1_UART_Init+0x90>)
 8001ae6:	f008 ffc0 	bl	800aa6a <HAL_UARTEx_DisableFifoMode>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001af0:	f000 f9ea 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000408 	.word	0x20000408
 8001afc:	40013800 	.word	0x40013800

08001b00 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b06:	463b      	mov	r3, r7
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
 8001b14:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8001b16:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001b1a:	f7ff fc37 	bl	800138c <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001b1e:	2001      	movs	r0, #1
 8001b20:	f7ff fc18 	bl	8001354 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001b24:	2002      	movs	r0, #2
 8001b26:	f7ff fc15 	bl	8001354 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PA15 (JTDI)   ------> UCPD1_CC1
  PB15   ------> UCPD1_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b2e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001b30:	2303      	movs	r3, #3
 8001b32:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b34:	2300      	movs	r3, #0
 8001b36:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b38:	463b      	mov	r3, r7
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4809      	ldr	r0, [pc, #36]	; (8001b64 <MX_UCPD1_Init+0x64>)
 8001b3e:	f009 fa01 	bl	800af44 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b46:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b50:	463b      	mov	r3, r7
 8001b52:	4619      	mov	r1, r3
 8001b54:	4804      	ldr	r0, [pc, #16]	; (8001b68 <MX_UCPD1_Init+0x68>)
 8001b56:	f009 f9f5 	bl	800af44 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001b5a:	bf00      	nop
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	42020000 	.word	0x42020000
 8001b68:	42020400 	.word	0x42020400

08001b6c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001b70:	4b12      	ldr	r3, [pc, #72]	; (8001bbc <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001b72:	4a13      	ldr	r2, [pc, #76]	; (8001bc0 <MX_USB_OTG_FS_PCD_Init+0x54>)
 8001b74:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001b76:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001b78:	2206      	movs	r2, #6
 8001b7a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001b7c:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001b7e:	2202      	movs	r2, #2
 8001b80:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001b88:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001b94:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001b9a:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001ba6:	4805      	ldr	r0, [pc, #20]	; (8001bbc <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001ba8:	f002 fe2e 	bl	8004808 <HAL_PCD_Init>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_USB_OTG_FS_PCD_Init+0x4a>
  {
    Error_Handler();
 8001bb2:	f000 f989 	bl	8001ec8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	20000498 	.word	0x20000498
 8001bc0:	42040000 	.word	0x42040000

08001bc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08e      	sub	sp, #56	; 0x38
 8001bc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bce:	2200      	movs	r2, #0
 8001bd0:	601a      	str	r2, [r3, #0]
 8001bd2:	605a      	str	r2, [r3, #4]
 8001bd4:	609a      	str	r2, [r3, #8]
 8001bd6:	60da      	str	r2, [r3, #12]
 8001bd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001bda:	4bb2      	ldr	r3, [pc, #712]	; (8001ea4 <MX_GPIO_Init+0x2e0>)
 8001bdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001be0:	4ab0      	ldr	r2, [pc, #704]	; (8001ea4 <MX_GPIO_Init+0x2e0>)
 8001be2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001be6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001bea:	4bae      	ldr	r3, [pc, #696]	; (8001ea4 <MX_GPIO_Init+0x2e0>)
 8001bec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf4:	623b      	str	r3, [r7, #32]
 8001bf6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bf8:	4baa      	ldr	r3, [pc, #680]	; (8001ea4 <MX_GPIO_Init+0x2e0>)
 8001bfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bfe:	4aa9      	ldr	r2, [pc, #676]	; (8001ea4 <MX_GPIO_Init+0x2e0>)
 8001c00:	f043 0304 	orr.w	r3, r3, #4
 8001c04:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c08:	4ba6      	ldr	r3, [pc, #664]	; (8001ea4 <MX_GPIO_Init+0x2e0>)
 8001c0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c0e:	f003 0304 	and.w	r3, r3, #4
 8001c12:	61fb      	str	r3, [r7, #28]
 8001c14:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c16:	4ba3      	ldr	r3, [pc, #652]	; (8001ea4 <MX_GPIO_Init+0x2e0>)
 8001c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c1c:	4aa1      	ldr	r2, [pc, #644]	; (8001ea4 <MX_GPIO_Init+0x2e0>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c26:	4b9f      	ldr	r3, [pc, #636]	; (8001ea4 <MX_GPIO_Init+0x2e0>)
 8001c28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	61bb      	str	r3, [r7, #24]
 8001c32:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001c34:	4b9b      	ldr	r3, [pc, #620]	; (8001ea4 <MX_GPIO_Init+0x2e0>)
 8001c36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c3a:	4a9a      	ldr	r2, [pc, #616]	; (8001ea4 <MX_GPIO_Init+0x2e0>)
 8001c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c40:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c44:	4b97      	ldr	r3, [pc, #604]	; (8001ea4 <MX_GPIO_Init+0x2e0>)
 8001c46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c52:	4b94      	ldr	r3, [pc, #592]	; (8001ea4 <MX_GPIO_Init+0x2e0>)
 8001c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c58:	4a92      	ldr	r2, [pc, #584]	; (8001ea4 <MX_GPIO_Init+0x2e0>)
 8001c5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c5e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c62:	4b90      	ldr	r3, [pc, #576]	; (8001ea4 <MX_GPIO_Init+0x2e0>)
 8001c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c70:	4b8c      	ldr	r3, [pc, #560]	; (8001ea4 <MX_GPIO_Init+0x2e0>)
 8001c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c76:	4a8b      	ldr	r2, [pc, #556]	; (8001ea4 <MX_GPIO_Init+0x2e0>)
 8001c78:	f043 0302 	orr.w	r3, r3, #2
 8001c7c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c80:	4b88      	ldr	r3, [pc, #544]	; (8001ea4 <MX_GPIO_Init+0x2e0>)
 8001c82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	60fb      	str	r3, [r7, #12]
 8001c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c8e:	4b85      	ldr	r3, [pc, #532]	; (8001ea4 <MX_GPIO_Init+0x2e0>)
 8001c90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c94:	4a83      	ldr	r2, [pc, #524]	; (8001ea4 <MX_GPIO_Init+0x2e0>)
 8001c96:	f043 0308 	orr.w	r3, r3, #8
 8001c9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c9e:	4b81      	ldr	r3, [pc, #516]	; (8001ea4 <MX_GPIO_Init+0x2e0>)
 8001ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ca4:	f003 0308 	and.w	r3, r3, #8
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cac:	4b7d      	ldr	r3, [pc, #500]	; (8001ea4 <MX_GPIO_Init+0x2e0>)
 8001cae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cb2:	4a7c      	ldr	r2, [pc, #496]	; (8001ea4 <MX_GPIO_Init+0x2e0>)
 8001cb4:	f043 0310 	orr.w	r3, r3, #16
 8001cb8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001cbc:	4b79      	ldr	r3, [pc, #484]	; (8001ea4 <MX_GPIO_Init+0x2e0>)
 8001cbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cc2:	f003 0310 	and.w	r3, r3, #16
 8001cc6:	607b      	str	r3, [r7, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cca:	4b76      	ldr	r3, [pc, #472]	; (8001ea4 <MX_GPIO_Init+0x2e0>)
 8001ccc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cd0:	4a74      	ldr	r2, [pc, #464]	; (8001ea4 <MX_GPIO_Init+0x2e0>)
 8001cd2:	f043 0320 	orr.w	r3, r3, #32
 8001cd6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001cda:	4b72      	ldr	r3, [pc, #456]	; (8001ea4 <MX_GPIO_Init+0x2e0>)
 8001cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ce0:	f003 0320 	and.w	r3, r3, #32
 8001ce4:	603b      	str	r3, [r7, #0]
 8001ce6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_PWR_GPIO_Port, UCPD_PWR_Pin, GPIO_PIN_RESET);
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2120      	movs	r1, #32
 8001cec:	486e      	ldr	r0, [pc, #440]	; (8001ea8 <MX_GPIO_Init+0x2e4>)
 8001cee:	f001 fb2d 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin, GPIO_PIN_RESET);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	21c2      	movs	r1, #194	; 0xc2
 8001cf6:	486d      	ldr	r0, [pc, #436]	; (8001eac <MX_GPIO_Init+0x2e8>)
 8001cf8:	f001 fb28 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WRLS_WKUP_B_GPIO_Port, WRLS_WKUP_B_Pin, GPIO_PIN_RESET);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2140      	movs	r1, #64	; 0x40
 8001d00:	486b      	ldr	r0, [pc, #428]	; (8001eb0 <MX_GPIO_Init+0x2ec>)
 8001d02:	f001 fb23 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin, GPIO_PIN_RESET);
 8001d06:	2200      	movs	r2, #0
 8001d08:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8001d0c:	4869      	ldr	r0, [pc, #420]	; (8001eb4 <MX_GPIO_Init+0x2f0>)
 8001d0e:	f001 fb1d 	bl	800334c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WRLS_FLOW_Pin Mems_VLX_GPIO_Pin Mems_INT_LPS22HH_Pin */
  GPIO_InitStruct.Pin = WRLS_FLOW_Pin|Mems_VLX_GPIO_Pin|Mems_INT_LPS22HH_Pin;
 8001d12:	f248 0324 	movw	r3, #32804	; 0x8024
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d24:	4619      	mov	r1, r3
 8001d26:	4862      	ldr	r0, [pc, #392]	; (8001eb0 <MX_GPIO_Init+0x2ec>)
 8001d28:	f001 f938 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3_BOOT0_Pin */
  GPIO_InitStruct.Pin = PH3_BOOT0_Pin;
 8001d2c:	2308      	movs	r3, #8
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d30:	2300      	movs	r3, #0
 8001d32:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d34:	2300      	movs	r3, #0
 8001d36:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PH3_BOOT0_GPIO_Port, &GPIO_InitStruct);
 8001d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	485b      	ldr	r0, [pc, #364]	; (8001eac <MX_GPIO_Init+0x2e8>)
 8001d40:	f001 f92c 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_PWR_Pin */
  GPIO_InitStruct.Pin = UCPD_PWR_Pin;
 8001d44:	2320      	movs	r3, #32
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d50:	2300      	movs	r3, #0
 8001d52:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(UCPD_PWR_GPIO_Port, &GPIO_InitStruct);
 8001d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4853      	ldr	r0, [pc, #332]	; (8001ea8 <MX_GPIO_Init+0x2e4>)
 8001d5c:	f001 f91e 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH13_Pin */
  GPIO_InitStruct.Pin = PH13_Pin;
 8001d60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d66:	2303      	movs	r3, #3
 8001d68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PH13_GPIO_Port, &GPIO_InitStruct);
 8001d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d72:	4619      	mov	r1, r3
 8001d74:	484d      	ldr	r0, [pc, #308]	; (8001eac <MX_GPIO_Init+0x2e8>)
 8001d76:	f001 f911 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Button_Pin */
  GPIO_InitStruct.Pin = USER_Button_Pin;
 8001d7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d80:	2300      	movs	r3, #0
 8001d82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Button_GPIO_Port, &GPIO_InitStruct);
 8001d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	484a      	ldr	r0, [pc, #296]	; (8001eb8 <MX_GPIO_Init+0x2f4>)
 8001d90:	f001 f904 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin Mems_VL53_xshut_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin;
 8001d94:	23c2      	movs	r3, #194	; 0xc2
 8001d96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da0:	2300      	movs	r3, #0
 8001da2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001da4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001da8:	4619      	mov	r1, r3
 8001daa:	4840      	ldr	r0, [pc, #256]	; (8001eac <MX_GPIO_Init+0x2e8>)
 8001dac:	f001 f8f6 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CCK1_Pin */
  GPIO_InitStruct.Pin = MIC_CCK1_Pin;
 8001db0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db6:	2302      	movs	r3, #2
 8001db8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8001dc2:	2306      	movs	r3, #6
 8001dc4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_CCK1_GPIO_Port, &GPIO_InitStruct);
 8001dc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4839      	ldr	r0, [pc, #228]	; (8001eb4 <MX_GPIO_Init+0x2f0>)
 8001dce:	f001 f8e5 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : WRLS_WKUP_B_Pin */
  GPIO_InitStruct.Pin = WRLS_WKUP_B_Pin;
 8001dd2:	2340      	movs	r3, #64	; 0x40
 8001dd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dde:	2300      	movs	r3, #0
 8001de0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WRLS_WKUP_B_GPIO_Port, &GPIO_InitStruct);
 8001de2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de6:	4619      	mov	r1, r3
 8001de8:	4831      	ldr	r0, [pc, #196]	; (8001eb0 <MX_GPIO_Init+0x2ec>)
 8001dea:	f001 f8d7 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : WRLS_NOTIFY_Pin Mems_INT_IIS2MDC_Pin USB_IANA_Pin Mems_INT_IIS2MDCD9_Pin */
  GPIO_InitStruct.Pin = WRLS_NOTIFY_Pin|Mems_INT_IIS2MDC_Pin|USB_IANA_Pin|Mems_INT_IIS2MDCD9_Pin;
 8001dee:	f44f 43cc 	mov.w	r3, #26112	; 0x6600
 8001df2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001df4:	2300      	movs	r3, #0
 8001df6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e00:	4619      	mov	r1, r3
 8001e02:	482e      	ldr	r0, [pc, #184]	; (8001ebc <MX_GPIO_Init+0x2f8>)
 8001e04:	f001 f8ca 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_UCPD_FLT_Pin Mems_ISM330DLC_INT1_Pin */
  GPIO_InitStruct.Pin = USB_UCPD_FLT_Pin|Mems_ISM330DLC_INT1_Pin;
 8001e08:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4828      	ldr	r0, [pc, #160]	; (8001ec0 <MX_GPIO_Init+0x2fc>)
 8001e1e:	f001 f8bd 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_SENSE_Pin;
 8001e22:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001e30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e34:	4619      	mov	r1, r3
 8001e36:	481f      	ldr	r0, [pc, #124]	; (8001eb4 <MX_GPIO_Init+0x2f0>)
 8001e38:	f001 f8b0 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e3c:	2304      	movs	r3, #4
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e40:	2302      	movs	r3, #2
 8001e42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e54:	4619      	mov	r1, r3
 8001e56:	481b      	ldr	r0, [pc, #108]	; (8001ec4 <MX_GPIO_Init+0x300>)
 8001e58:	f001 f8a0 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : Mems_STSAFE_RESET_Pin WRLS_WKUP_W_Pin */
  GPIO_InitStruct.Pin = Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin;
 8001e5c:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8001e60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e62:	2301      	movs	r3, #1
 8001e64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e72:	4619      	mov	r1, r3
 8001e74:	480f      	ldr	r0, [pc, #60]	; (8001eb4 <MX_GPIO_Init+0x2f0>)
 8001e76:	f001 f891 	bl	8002f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_SDIN0_Pin */
  GPIO_InitStruct.Pin = MIC_SDIN0_Pin;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e82:	2300      	movs	r3, #0
 8001e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e86:	2300      	movs	r3, #0
 8001e88:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8001e8a:	2306      	movs	r3, #6
 8001e8c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_SDIN0_GPIO_Port, &GPIO_InitStruct);
 8001e8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e92:	4619      	mov	r1, r3
 8001e94:	4804      	ldr	r0, [pc, #16]	; (8001ea8 <MX_GPIO_Init+0x2e4>)
 8001e96:	f001 f881 	bl	8002f9c <HAL_GPIO_Init>

}
 8001e9a:	bf00      	nop
 8001e9c:	3738      	adds	r7, #56	; 0x38
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	46020c00 	.word	0x46020c00
 8001ea8:	42020400 	.word	0x42020400
 8001eac:	42021c00 	.word	0x42021c00
 8001eb0:	42021800 	.word	0x42021800
 8001eb4:	42021400 	.word	0x42021400
 8001eb8:	42020800 	.word	0x42020800
 8001ebc:	42020c00 	.word	0x42020c00
 8001ec0:	42021000 	.word	0x42021000
 8001ec4:	42020000 	.word	0x42020000

08001ec8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ecc:	b672      	cpsid	i
}
 8001ece:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed0:	e7fe      	b.n	8001ed0 <Error_Handler+0x8>
	...

08001ed4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001eda:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <HAL_MspInit+0x30>)
 8001edc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ee0:	4a08      	ldr	r2, [pc, #32]	; (8001f04 <HAL_MspInit+0x30>)
 8001ee2:	f043 0304 	orr.w	r3, r3, #4
 8001ee6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001eea:	4b06      	ldr	r3, [pc, #24]	; (8001f04 <HAL_MspInit+0x30>)
 8001eec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	607b      	str	r3, [r7, #4]
 8001ef6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ef8:	bf00      	nop
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	46020c00 	.word	0x46020c00

08001f08 <HAL_MDF_MspInit>:
* This function configures the hardware resources used in this example
* @param hmdf: MDF handle pointer
* @retval None
*/
void HAL_MDF_MspInit(MDF_HandleTypeDef* hmdf)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b0bc      	sub	sp, #240	; 0xf0
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f10:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001f14:	2200      	movs	r2, #0
 8001f16:	601a      	str	r2, [r3, #0]
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	609a      	str	r2, [r3, #8]
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f20:	f107 0310 	add.w	r3, r7, #16
 8001f24:	22c8      	movs	r2, #200	; 0xc8
 8001f26:	2100      	movs	r1, #0
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f009 fb80 	bl	800b62e <memset>
  if(IS_ADF_INSTANCE(hmdf->Instance))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a27      	ldr	r2, [pc, #156]	; (8001fd0 <HAL_MDF_MspInit+0xc8>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d146      	bne.n	8001fc6 <HAL_MDF_MspInit+0xbe>

  /* USER CODE END ADF1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADF1;
 8001f38:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f3c:	f04f 0300 	mov.w	r3, #0
 8001f40:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Adf1ClockSelection = RCC_ADF1CLKSOURCE_HCLK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f4a:	f107 0310 	add.w	r3, r7, #16
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f004 f940 	bl	80061d4 <HAL_RCCEx_PeriphCLKConfig>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <HAL_MDF_MspInit+0x56>
    {
      Error_Handler();
 8001f5a:	f7ff ffb5 	bl	8001ec8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADF1_CLK_ENABLE();
 8001f5e:	4b1d      	ldr	r3, [pc, #116]	; (8001fd4 <HAL_MDF_MspInit+0xcc>)
 8001f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f64:	4a1b      	ldr	r2, [pc, #108]	; (8001fd4 <HAL_MDF_MspInit+0xcc>)
 8001f66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001f6e:	4b19      	ldr	r3, [pc, #100]	; (8001fd4 <HAL_MDF_MspInit+0xcc>)
 8001f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f7c:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <HAL_MDF_MspInit+0xcc>)
 8001f7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f82:	4a14      	ldr	r2, [pc, #80]	; (8001fd4 <HAL_MDF_MspInit+0xcc>)
 8001f84:	f043 0310 	orr.w	r3, r3, #16
 8001f88:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001f8c:	4b11      	ldr	r3, [pc, #68]	; (8001fd4 <HAL_MDF_MspInit+0xcc>)
 8001f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f92:	f003 0310 	and.w	r3, r3, #16
 8001f96:	60bb      	str	r3, [r7, #8]
 8001f98:	68bb      	ldr	r3, [r7, #8]
    /**ADF1 GPIO Configuration
    PE10     ------> ADF1_SDI0
    PE9     ------> ADF1_CCK0
    */
    GPIO_InitStruct.Pin = MIC_SDINx_Pin|MIC_CCK0_Pin;
 8001f9a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f9e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fba:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4805      	ldr	r0, [pc, #20]	; (8001fd8 <HAL_MDF_MspInit+0xd0>)
 8001fc2:	f000 ffeb 	bl	8002f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADF1_MspInit 1 */

  /* USER CODE END ADF1_MspInit 1 */
  }

}
 8001fc6:	bf00      	nop
 8001fc8:	37f0      	adds	r7, #240	; 0xf0
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	46024080 	.word	0x46024080
 8001fd4:	46020c00 	.word	0x46020c00
 8001fd8:	42021000 	.word	0x42021000

08001fdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b0be      	sub	sp, #248	; 0xf8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
 8001ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ff4:	f107 0318 	add.w	r3, r7, #24
 8001ff8:	22c8      	movs	r2, #200	; 0xc8
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f009 fb16 	bl	800b62e <memset>
  if(hi2c->Instance==I2C1)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a4d      	ldr	r2, [pc, #308]	; (800213c <HAL_I2C_MspInit+0x160>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d147      	bne.n	800209c <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800200c:	f04f 0240 	mov.w	r2, #64	; 0x40
 8002010:	f04f 0300 	mov.w	r3, #0
 8002014:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002018:	2300      	movs	r3, #0
 800201a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800201e:	f107 0318 	add.w	r3, r7, #24
 8002022:	4618      	mov	r0, r3
 8002024:	f004 f8d6 	bl	80061d4 <HAL_RCCEx_PeriphCLKConfig>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800202e:	f7ff ff4b 	bl	8001ec8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002032:	4b43      	ldr	r3, [pc, #268]	; (8002140 <HAL_I2C_MspInit+0x164>)
 8002034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002038:	4a41      	ldr	r2, [pc, #260]	; (8002140 <HAL_I2C_MspInit+0x164>)
 800203a:	f043 0302 	orr.w	r3, r3, #2
 800203e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002042:	4b3f      	ldr	r3, [pc, #252]	; (8002140 <HAL_I2C_MspInit+0x164>)
 8002044:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8002050:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002054:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002058:	2312      	movs	r3, #18
 800205a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205e:	2300      	movs	r3, #0
 8002060:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002064:	2300      	movs	r3, #0
 8002066:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800206a:	2304      	movs	r3, #4
 800206c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002070:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002074:	4619      	mov	r1, r3
 8002076:	4833      	ldr	r0, [pc, #204]	; (8002144 <HAL_I2C_MspInit+0x168>)
 8002078:	f000 ff90 	bl	8002f9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800207c:	4b30      	ldr	r3, [pc, #192]	; (8002140 <HAL_I2C_MspInit+0x164>)
 800207e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002082:	4a2f      	ldr	r2, [pc, #188]	; (8002140 <HAL_I2C_MspInit+0x164>)
 8002084:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002088:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800208c:	4b2c      	ldr	r3, [pc, #176]	; (8002140 <HAL_I2C_MspInit+0x164>)
 800208e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002092:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800209a:	e04a      	b.n	8002132 <HAL_I2C_MspInit+0x156>
  else if(hi2c->Instance==I2C2)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a29      	ldr	r2, [pc, #164]	; (8002148 <HAL_I2C_MspInit+0x16c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d145      	bne.n	8002132 <HAL_I2C_MspInit+0x156>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80020a6:	f04f 0280 	mov.w	r2, #128	; 0x80
 80020aa:	f04f 0300 	mov.w	r3, #0
 80020ae:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80020b2:	2300      	movs	r3, #0
 80020b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020b8:	f107 0318 	add.w	r3, r7, #24
 80020bc:	4618      	mov	r0, r3
 80020be:	f004 f889 	bl	80061d4 <HAL_RCCEx_PeriphCLKConfig>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 80020c8:	f7ff fefe 	bl	8001ec8 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80020cc:	4b1c      	ldr	r3, [pc, #112]	; (8002140 <HAL_I2C_MspInit+0x164>)
 80020ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020d2:	4a1b      	ldr	r2, [pc, #108]	; (8002140 <HAL_I2C_MspInit+0x164>)
 80020d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020d8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80020dc:	4b18      	ldr	r3, [pc, #96]	; (8002140 <HAL_I2C_MspInit+0x164>)
 80020de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e6:	60fb      	str	r3, [r7, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80020ea:	2330      	movs	r3, #48	; 0x30
 80020ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020f0:	2312      	movs	r3, #18
 80020f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f6:	2300      	movs	r3, #0
 80020f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020fc:	2300      	movs	r3, #0
 80020fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002102:	2304      	movs	r3, #4
 8002104:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002108:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800210c:	4619      	mov	r1, r3
 800210e:	480f      	ldr	r0, [pc, #60]	; (800214c <HAL_I2C_MspInit+0x170>)
 8002110:	f000 ff44 	bl	8002f9c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002114:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <HAL_I2C_MspInit+0x164>)
 8002116:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800211a:	4a09      	ldr	r2, [pc, #36]	; (8002140 <HAL_I2C_MspInit+0x164>)
 800211c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002120:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002124:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_I2C_MspInit+0x164>)
 8002126:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800212a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
}
 8002132:	bf00      	nop
 8002134:	37f8      	adds	r7, #248	; 0xf8
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40005400 	.word	0x40005400
 8002140:	46020c00 	.word	0x46020c00
 8002144:	42020400 	.word	0x42020400
 8002148:	40005800 	.word	0x40005800
 800214c:	42021c00 	.word	0x42021c00

08002150 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b0c6      	sub	sp, #280	; 0x118
 8002154:	af00      	add	r7, sp, #0
 8002156:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800215a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800215e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002160:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002164:	2200      	movs	r2, #0
 8002166:	601a      	str	r2, [r3, #0]
 8002168:	605a      	str	r2, [r3, #4]
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	60da      	str	r2, [r3, #12]
 800216e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002170:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002174:	22c8      	movs	r2, #200	; 0xc8
 8002176:	2100      	movs	r1, #0
 8002178:	4618      	mov	r0, r3
 800217a:	f009 fa58 	bl	800b62e <memset>
  if(hospi->Instance==OCTOSPI1)
 800217e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002182:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a96      	ldr	r2, [pc, #600]	; (80023e4 <HAL_OSPI_MspInit+0x294>)
 800218c:	4293      	cmp	r3, r2
 800218e:	f040 813b 	bne.w	8002408 <HAL_OSPI_MspInit+0x2b8>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002192:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002196:	f04f 0300 	mov.w	r3, #0
 800219a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800219e:	2300      	movs	r3, #0
 80021a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021a4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021a8:	4618      	mov	r0, r3
 80021aa:	f004 f813 	bl	80061d4 <HAL_RCCEx_PeriphCLKConfig>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 80021b4:	f7ff fe88 	bl	8001ec8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80021b8:	4b8b      	ldr	r3, [pc, #556]	; (80023e8 <HAL_OSPI_MspInit+0x298>)
 80021ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021be:	4a8a      	ldr	r2, [pc, #552]	; (80023e8 <HAL_OSPI_MspInit+0x298>)
 80021c0:	f043 0310 	orr.w	r3, r3, #16
 80021c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021c8:	4b87      	ldr	r3, [pc, #540]	; (80023e8 <HAL_OSPI_MspInit+0x298>)
 80021ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ce:	f003 0310 	and.w	r3, r3, #16
 80021d2:	637b      	str	r3, [r7, #52]	; 0x34
 80021d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80021d6:	4b84      	ldr	r3, [pc, #528]	; (80023e8 <HAL_OSPI_MspInit+0x298>)
 80021d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021dc:	4a82      	ldr	r2, [pc, #520]	; (80023e8 <HAL_OSPI_MspInit+0x298>)
 80021de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80021e6:	4b80      	ldr	r3, [pc, #512]	; (80023e8 <HAL_OSPI_MspInit+0x298>)
 80021e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f0:	633b      	str	r3, [r7, #48]	; 0x30
 80021f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80021f4:	4b7c      	ldr	r3, [pc, #496]	; (80023e8 <HAL_OSPI_MspInit+0x298>)
 80021f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021fa:	4a7b      	ldr	r2, [pc, #492]	; (80023e8 <HAL_OSPI_MspInit+0x298>)
 80021fc:	f043 0310 	orr.w	r3, r3, #16
 8002200:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002204:	4b78      	ldr	r3, [pc, #480]	; (80023e8 <HAL_OSPI_MspInit+0x298>)
 8002206:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800220a:	f003 0310 	and.w	r3, r3, #16
 800220e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002212:	4b75      	ldr	r3, [pc, #468]	; (80023e8 <HAL_OSPI_MspInit+0x298>)
 8002214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002218:	4a73      	ldr	r2, [pc, #460]	; (80023e8 <HAL_OSPI_MspInit+0x298>)
 800221a:	f043 0308 	orr.w	r3, r3, #8
 800221e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002222:	4b71      	ldr	r3, [pc, #452]	; (80023e8 <HAL_OSPI_MspInit+0x298>)
 8002224:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002228:	f003 0308 	and.w	r3, r3, #8
 800222c:	62bb      	str	r3, [r7, #40]	; 0x28
 800222e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002230:	4b6d      	ldr	r3, [pc, #436]	; (80023e8 <HAL_OSPI_MspInit+0x298>)
 8002232:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002236:	4a6c      	ldr	r2, [pc, #432]	; (80023e8 <HAL_OSPI_MspInit+0x298>)
 8002238:	f043 0320 	orr.w	r3, r3, #32
 800223c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002240:	4b69      	ldr	r3, [pc, #420]	; (80023e8 <HAL_OSPI_MspInit+0x298>)
 8002242:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002246:	f003 0320 	and.w	r3, r3, #32
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800224e:	4b66      	ldr	r3, [pc, #408]	; (80023e8 <HAL_OSPI_MspInit+0x298>)
 8002250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002254:	4a64      	ldr	r2, [pc, #400]	; (80023e8 <HAL_OSPI_MspInit+0x298>)
 8002256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800225a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800225e:	4b62      	ldr	r3, [pc, #392]	; (80023e8 <HAL_OSPI_MspInit+0x298>)
 8002260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002268:	623b      	str	r3, [r7, #32]
 800226a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800226c:	4b5e      	ldr	r3, [pc, #376]	; (80023e8 <HAL_OSPI_MspInit+0x298>)
 800226e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002272:	4a5d      	ldr	r2, [pc, #372]	; (80023e8 <HAL_OSPI_MspInit+0x298>)
 8002274:	f043 0304 	orr.w	r3, r3, #4
 8002278:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800227c:	4b5a      	ldr	r3, [pc, #360]	; (80023e8 <HAL_OSPI_MspInit+0x298>)
 800227e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	61fb      	str	r3, [r7, #28]
 8002288:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800228a:	4b57      	ldr	r3, [pc, #348]	; (80023e8 <HAL_OSPI_MspInit+0x298>)
 800228c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002290:	4a55      	ldr	r2, [pc, #340]	; (80023e8 <HAL_OSPI_MspInit+0x298>)
 8002292:	f043 0302 	orr.w	r3, r3, #2
 8002296:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800229a:	4b53      	ldr	r3, [pc, #332]	; (80023e8 <HAL_OSPI_MspInit+0x298>)
 800229c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022a0:	f003 0202 	and.w	r2, r3, #2
 80022a4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80022a8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80022b2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80022b6:	681b      	ldr	r3, [r3, #0]
    PF6     ------> OCTOSPIM_P1_IO3
    PC3     ------> OCTOSPIM_P1_IO6
    PB10     ------> OCTOSPIM_P1_CLK
    PB11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = OCTOSPI_R_IO5_Pin;
 80022b8:	2301      	movs	r3, #1
 80022ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022be:	2302      	movs	r3, #2
 80022c0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ca:	2303      	movs	r3, #3
 80022cc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80022d0:	2303      	movs	r3, #3
 80022d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_R_IO5_GPIO_Port, &GPIO_InitStruct);
 80022d6:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80022da:	4619      	mov	r1, r3
 80022dc:	4843      	ldr	r0, [pc, #268]	; (80023ec <HAL_OSPI_MspInit+0x29c>)
 80022de:	f000 fe5d 	bl	8002f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_DQS_Pin;
 80022e2:	2308      	movs	r3, #8
 80022e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022e8:	2302      	movs	r3, #2
 80022ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f4:	2303      	movs	r3, #3
 80022f6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80022fa:	2303      	movs	r3, #3
 80022fc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_R_DQS_GPIO_Port, &GPIO_InitStruct);
 8002300:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002304:	4619      	mov	r1, r3
 8002306:	483a      	ldr	r0, [pc, #232]	; (80023f0 <HAL_OSPI_MspInit+0x2a0>)
 8002308:	f000 fe48 	bl	8002f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO7_Pin;
 800230c:	2380      	movs	r3, #128	; 0x80
 800230e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002312:	2302      	movs	r3, #2
 8002314:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231e:	2303      	movs	r3, #3
 8002320:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8002324:	230a      	movs	r3, #10
 8002326:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_R_IO7_GPIO_Port, &GPIO_InitStruct);
 800232a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800232e:	4619      	mov	r1, r3
 8002330:	4830      	ldr	r0, [pc, #192]	; (80023f4 <HAL_OSPI_MspInit+0x2a4>)
 8002332:	f000 fe33 	bl	8002f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO0_Pin|OCTOSPI_R_IO2_Pin|OCTOSPI_R_IO1_Pin|OCTOSPI_R_IO3_Pin;
 8002336:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800233a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233e:	2302      	movs	r3, #2
 8002340:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800234a:	2303      	movs	r3, #3
 800234c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8002350:	230a      	movs	r3, #10
 8002352:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002356:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800235a:	4619      	mov	r1, r3
 800235c:	4826      	ldr	r0, [pc, #152]	; (80023f8 <HAL_OSPI_MspInit+0x2a8>)
 800235e:	f000 fe1d 	bl	8002f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO4_Pin;
 8002362:	2304      	movs	r3, #4
 8002364:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002368:	2302      	movs	r3, #2
 800236a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800236e:	2300      	movs	r3, #0
 8002370:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002374:	2303      	movs	r3, #3
 8002376:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 800237a:	2303      	movs	r3, #3
 800237c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_R_IO4_GPIO_Port, &GPIO_InitStruct);
 8002380:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002384:	4619      	mov	r1, r3
 8002386:	481d      	ldr	r0, [pc, #116]	; (80023fc <HAL_OSPI_MspInit+0x2ac>)
 8002388:	f000 fe08 	bl	8002f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO6_Pin;
 800238c:	2308      	movs	r3, #8
 800238e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002392:	2302      	movs	r3, #2
 8002394:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800239e:	2303      	movs	r3, #3
 80023a0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80023a4:	230a      	movs	r3, #10
 80023a6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_R_IO6_GPIO_Port, &GPIO_InitStruct);
 80023aa:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80023ae:	4619      	mov	r1, r3
 80023b0:	4813      	ldr	r0, [pc, #76]	; (8002400 <HAL_OSPI_MspInit+0x2b0>)
 80023b2:	f000 fdf3 	bl	8002f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_CLK_P_Pin|OCTOSPI_R_NCS_Pin;
 80023b6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80023ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023be:	2302      	movs	r3, #2
 80023c0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c4:	2300      	movs	r3, #0
 80023c6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ca:	2303      	movs	r3, #3
 80023cc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80023d0:	230a      	movs	r3, #10
 80023d2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d6:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80023da:	4619      	mov	r1, r3
 80023dc:	4809      	ldr	r0, [pc, #36]	; (8002404 <HAL_OSPI_MspInit+0x2b4>)
 80023de:	f000 fddd 	bl	8002f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 80023e2:	e0cb      	b.n	800257c <HAL_OSPI_MspInit+0x42c>
 80023e4:	420d1400 	.word	0x420d1400
 80023e8:	46020c00 	.word	0x46020c00
 80023ec:	42022000 	.word	0x42022000
 80023f0:	42021000 	.word	0x42021000
 80023f4:	42020c00 	.word	0x42020c00
 80023f8:	42021400 	.word	0x42021400
 80023fc:	42021c00 	.word	0x42021c00
 8002400:	42020800 	.word	0x42020800
 8002404:	42020400 	.word	0x42020400
  else if(hospi->Instance==OCTOSPI2)
 8002408:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800240c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a5c      	ldr	r2, [pc, #368]	; (8002588 <HAL_OSPI_MspInit+0x438>)
 8002416:	4293      	cmp	r3, r2
 8002418:	f040 80b0 	bne.w	800257c <HAL_OSPI_MspInit+0x42c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800241c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002420:	f04f 0300 	mov.w	r3, #0
 8002424:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8002428:	2300      	movs	r3, #0
 800242a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800242e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002432:	4618      	mov	r0, r3
 8002434:	f003 fece 	bl	80061d4 <HAL_RCCEx_PeriphCLKConfig>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <HAL_OSPI_MspInit+0x2f2>
      Error_Handler();
 800243e:	f7ff fd43 	bl	8001ec8 <Error_Handler>
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8002442:	4b52      	ldr	r3, [pc, #328]	; (800258c <HAL_OSPI_MspInit+0x43c>)
 8002444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002448:	4a50      	ldr	r2, [pc, #320]	; (800258c <HAL_OSPI_MspInit+0x43c>)
 800244a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002452:	4b4e      	ldr	r3, [pc, #312]	; (800258c <HAL_OSPI_MspInit+0x43c>)
 8002454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002458:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800245c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002460:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800246a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800246e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002470:	4b46      	ldr	r3, [pc, #280]	; (800258c <HAL_OSPI_MspInit+0x43c>)
 8002472:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002476:	4a45      	ldr	r2, [pc, #276]	; (800258c <HAL_OSPI_MspInit+0x43c>)
 8002478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800247c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002480:	4b42      	ldr	r3, [pc, #264]	; (800258c <HAL_OSPI_MspInit+0x43c>)
 8002482:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002486:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800248a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800248e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002498:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800249c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800249e:	4b3b      	ldr	r3, [pc, #236]	; (800258c <HAL_OSPI_MspInit+0x43c>)
 80024a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024a4:	4a39      	ldr	r2, [pc, #228]	; (800258c <HAL_OSPI_MspInit+0x43c>)
 80024a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80024ae:	4b37      	ldr	r3, [pc, #220]	; (800258c <HAL_OSPI_MspInit+0x43c>)
 80024b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024b4:	f003 0280 	and.w	r2, r3, #128	; 0x80
 80024b8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80024bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80024c0:	601a      	str	r2, [r3, #0]
 80024c2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80024c6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80024ca:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80024cc:	4b2f      	ldr	r3, [pc, #188]	; (800258c <HAL_OSPI_MspInit+0x43c>)
 80024ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024d2:	4a2e      	ldr	r2, [pc, #184]	; (800258c <HAL_OSPI_MspInit+0x43c>)
 80024d4:	f043 0320 	orr.w	r3, r3, #32
 80024d8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80024dc:	4b2b      	ldr	r3, [pc, #172]	; (800258c <HAL_OSPI_MspInit+0x43c>)
 80024de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024e2:	f003 0220 	and.w	r2, r3, #32
 80024e6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80024ea:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80024f4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80024f8:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = OCTOSPI_F_NCS_Pin;
 80024fa:	2320      	movs	r3, #32
 80024fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002500:	2302      	movs	r3, #2
 8002502:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002506:	2300      	movs	r3, #0
 8002508:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800250c:	2303      	movs	r3, #3
 800250e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8002512:	2305      	movs	r3, #5
 8002514:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_F_NCS_GPIO_Port, &GPIO_InitStruct);
 8002518:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800251c:	4619      	mov	r1, r3
 800251e:	481c      	ldr	r0, [pc, #112]	; (8002590 <HAL_OSPI_MspInit+0x440>)
 8002520:	f000 fd3c 	bl	8002f9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCTOSPI_F_IO7_Pin|OCTOSPI_F_IO5_Pin|OCTOSPI_F_IO6_Pin|OCTOSPI_F_IO4_Pin;
 8002524:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8002528:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252c:	2302      	movs	r3, #2
 800252e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002532:	2300      	movs	r3, #0
 8002534:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002538:	2303      	movs	r3, #3
 800253a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 800253e:	2305      	movs	r3, #5
 8002540:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002544:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002548:	4619      	mov	r1, r3
 800254a:	4812      	ldr	r0, [pc, #72]	; (8002594 <HAL_OSPI_MspInit+0x444>)
 800254c:	f000 fd26 	bl	8002f9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCTOSPI_F_IO0_Pin|OCTOSPI_F_IO1_Pin|OCTOSPI_F_IO2_Pin|OCTOSPI_F_IO3_Pin
 8002550:	f241 031f 	movw	r3, #4127	; 0x101f
 8002554:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002558:	2302      	movs	r3, #2
 800255a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002564:	2303      	movs	r3, #3
 8002566:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 800256a:	2305      	movs	r3, #5
 800256c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002570:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002574:	4619      	mov	r1, r3
 8002576:	4808      	ldr	r0, [pc, #32]	; (8002598 <HAL_OSPI_MspInit+0x448>)
 8002578:	f000 fd10 	bl	8002f9c <HAL_GPIO_Init>
}
 800257c:	bf00      	nop
 800257e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	420d2400 	.word	0x420d2400
 800258c:	46020c00 	.word	0x46020c00
 8002590:	42022000 	.word	0x42022000
 8002594:	42021c00 	.word	0x42021c00
 8002598:	42021400 	.word	0x42021400

0800259c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b0be      	sub	sp, #248	; 0xf8
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025b4:	f107 0318 	add.w	r3, r7, #24
 80025b8:	22c8      	movs	r2, #200	; 0xc8
 80025ba:	2100      	movs	r1, #0
 80025bc:	4618      	mov	r0, r3
 80025be:	f009 f836 	bl	800b62e <memset>
  if(hspi->Instance==SPI2)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a39      	ldr	r2, [pc, #228]	; (80026ac <HAL_SPI_MspInit+0x110>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d16b      	bne.n	80026a4 <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80025cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 80025d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025e0:	f107 0318 	add.w	r3, r7, #24
 80025e4:	4618      	mov	r0, r3
 80025e6:	f003 fdf5 	bl	80061d4 <HAL_RCCEx_PeriphCLKConfig>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 80025f0:	f7ff fc6a 	bl	8001ec8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80025f4:	4b2e      	ldr	r3, [pc, #184]	; (80026b0 <HAL_SPI_MspInit+0x114>)
 80025f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80025fa:	4a2d      	ldr	r2, [pc, #180]	; (80026b0 <HAL_SPI_MspInit+0x114>)
 80025fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002600:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002604:	4b2a      	ldr	r3, [pc, #168]	; (80026b0 <HAL_SPI_MspInit+0x114>)
 8002606:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800260a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800260e:	617b      	str	r3, [r7, #20]
 8002610:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002612:	4b27      	ldr	r3, [pc, #156]	; (80026b0 <HAL_SPI_MspInit+0x114>)
 8002614:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002618:	4a25      	ldr	r2, [pc, #148]	; (80026b0 <HAL_SPI_MspInit+0x114>)
 800261a:	f043 0308 	orr.w	r3, r3, #8
 800261e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002622:	4b23      	ldr	r3, [pc, #140]	; (80026b0 <HAL_SPI_MspInit+0x114>)
 8002624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002628:	f003 0308 	and.w	r3, r3, #8
 800262c:	613b      	str	r3, [r7, #16]
 800262e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002630:	4b1f      	ldr	r3, [pc, #124]	; (80026b0 <HAL_SPI_MspInit+0x114>)
 8002632:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002636:	4a1e      	ldr	r2, [pc, #120]	; (80026b0 <HAL_SPI_MspInit+0x114>)
 8002638:	f043 0302 	orr.w	r3, r3, #2
 800263c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002640:	4b1b      	ldr	r3, [pc, #108]	; (80026b0 <HAL_SPI_MspInit+0x114>)
 8002642:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002646:	f003 0302 	and.w	r3, r3, #2
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	68fb      	ldr	r3, [r7, #12]
    PD4     ------> SPI2_MOSI
    PD3     ------> SPI2_MISO
    PD1     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = WRLS_SPI2_MOSI_Pin|WRLS_SPI2_MISO_Pin|WRLS_SPI2_SCK_Pin;
 800264e:	231a      	movs	r3, #26
 8002650:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002654:	2302      	movs	r3, #2
 8002656:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265a:	2300      	movs	r3, #0
 800265c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002660:	2300      	movs	r3, #0
 8002662:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002666:	2305      	movs	r3, #5
 8002668:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800266c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002670:	4619      	mov	r1, r3
 8002672:	4810      	ldr	r0, [pc, #64]	; (80026b4 <HAL_SPI_MspInit+0x118>)
 8002674:	f000 fc92 	bl	8002f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WRLS_SPI2_NSS_Pin;
 8002678:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800267c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002680:	2302      	movs	r3, #2
 8002682:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002686:	2300      	movs	r3, #0
 8002688:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268c:	2300      	movs	r3, #0
 800268e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002692:	2305      	movs	r3, #5
 8002694:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(WRLS_SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8002698:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800269c:	4619      	mov	r1, r3
 800269e:	4806      	ldr	r0, [pc, #24]	; (80026b8 <HAL_SPI_MspInit+0x11c>)
 80026a0:	f000 fc7c 	bl	8002f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80026a4:	bf00      	nop
 80026a6:	37f8      	adds	r7, #248	; 0xf8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	40003800 	.word	0x40003800
 80026b0:	46020c00 	.word	0x46020c00
 80026b4:	42020c00 	.word	0x42020c00
 80026b8:	42020400 	.word	0x42020400

080026bc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a0e      	ldr	r2, [pc, #56]	; (8002704 <HAL_TIM_PWM_MspInit+0x48>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d116      	bne.n	80026fc <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80026ce:	4b0e      	ldr	r3, [pc, #56]	; (8002708 <HAL_TIM_PWM_MspInit+0x4c>)
 80026d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026d4:	4a0c      	ldr	r2, [pc, #48]	; (8002708 <HAL_TIM_PWM_MspInit+0x4c>)
 80026d6:	f043 0302 	orr.w	r3, r3, #2
 80026da:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80026de:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <HAL_TIM_PWM_MspInit+0x4c>)
 80026e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026e4:	f003 0302 	and.w	r3, r3, #2
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80026ec:	2200      	movs	r2, #0
 80026ee:	2100      	movs	r1, #0
 80026f0:	202e      	movs	r0, #46	; 0x2e
 80026f2:	f000 fba2 	bl	8002e3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80026f6:	202e      	movs	r0, #46	; 0x2e
 80026f8:	f000 fbb9 	bl	8002e6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80026fc:	bf00      	nop
 80026fe:	3710      	adds	r7, #16
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40000400 	.word	0x40000400
 8002708:	46020c00 	.word	0x46020c00

0800270c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b088      	sub	sp, #32
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002714:	f107 030c 	add.w	r3, r7, #12
 8002718:	2200      	movs	r2, #0
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	605a      	str	r2, [r3, #4]
 800271e:	609a      	str	r2, [r3, #8]
 8002720:	60da      	str	r2, [r3, #12]
 8002722:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a12      	ldr	r2, [pc, #72]	; (8002774 <HAL_TIM_MspPostInit+0x68>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d11e      	bne.n	800276c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800272e:	4b12      	ldr	r3, [pc, #72]	; (8002778 <HAL_TIM_MspPostInit+0x6c>)
 8002730:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002734:	4a10      	ldr	r2, [pc, #64]	; (8002778 <HAL_TIM_MspPostInit+0x6c>)
 8002736:	f043 0310 	orr.w	r3, r3, #16
 800273a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800273e:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <HAL_TIM_MspPostInit+0x6c>)
 8002740:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002744:	f003 0310 	and.w	r3, r3, #16
 8002748:	60bb      	str	r3, [r7, #8]
 800274a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE5     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800274c:	2320      	movs	r3, #32
 800274e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002750:	2302      	movs	r3, #2
 8002752:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002758:	2300      	movs	r3, #0
 800275a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800275c:	2302      	movs	r3, #2
 800275e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002760:	f107 030c 	add.w	r3, r7, #12
 8002764:	4619      	mov	r1, r3
 8002766:	4805      	ldr	r0, [pc, #20]	; (800277c <HAL_TIM_MspPostInit+0x70>)
 8002768:	f000 fc18 	bl	8002f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800276c:	bf00      	nop
 800276e:	3720      	adds	r7, #32
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	40000400 	.word	0x40000400
 8002778:	46020c00 	.word	0x46020c00
 800277c:	42021000 	.word	0x42021000

08002780 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b0be      	sub	sp, #248	; 0xf8
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002798:	f107 0318 	add.w	r3, r7, #24
 800279c:	22c8      	movs	r2, #200	; 0xc8
 800279e:	2100      	movs	r1, #0
 80027a0:	4618      	mov	r0, r3
 80027a2:	f008 ff44 	bl	800b62e <memset>
  if(huart->Instance==UART4)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a4c      	ldr	r2, [pc, #304]	; (80028dc <HAL_UART_MspInit+0x15c>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d146      	bne.n	800283e <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80027b0:	f04f 0208 	mov.w	r2, #8
 80027b4:	f04f 0300 	mov.w	r3, #0
 80027b8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80027bc:	2300      	movs	r3, #0
 80027be:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027c0:	f107 0318 	add.w	r3, r7, #24
 80027c4:	4618      	mov	r0, r3
 80027c6:	f003 fd05 	bl	80061d4 <HAL_RCCEx_PeriphCLKConfig>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d001      	beq.n	80027d4 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 80027d0:	f7ff fb7a 	bl	8001ec8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80027d4:	4b42      	ldr	r3, [pc, #264]	; (80028e0 <HAL_UART_MspInit+0x160>)
 80027d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027da:	4a41      	ldr	r2, [pc, #260]	; (80028e0 <HAL_UART_MspInit+0x160>)
 80027dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80027e0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80027e4:	4b3e      	ldr	r3, [pc, #248]	; (80028e0 <HAL_UART_MspInit+0x160>)
 80027e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027f2:	4b3b      	ldr	r3, [pc, #236]	; (80028e0 <HAL_UART_MspInit+0x160>)
 80027f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027f8:	4a39      	ldr	r2, [pc, #228]	; (80028e0 <HAL_UART_MspInit+0x160>)
 80027fa:	f043 0304 	orr.w	r3, r3, #4
 80027fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002802:	4b37      	ldr	r3, [pc, #220]	; (80028e0 <HAL_UART_MspInit+0x160>)
 8002804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = WRLS_UART4_RX_Pin|WRLS_UART4_TX_Pin;
 8002810:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002814:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002818:	2302      	movs	r3, #2
 800281a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281e:	2300      	movs	r3, #0
 8002820:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002824:	2300      	movs	r3, #0
 8002826:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800282a:	2308      	movs	r3, #8
 800282c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002830:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002834:	4619      	mov	r1, r3
 8002836:	482b      	ldr	r0, [pc, #172]	; (80028e4 <HAL_UART_MspInit+0x164>)
 8002838:	f000 fbb0 	bl	8002f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800283c:	e04a      	b.n	80028d4 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART1)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a29      	ldr	r2, [pc, #164]	; (80028e8 <HAL_UART_MspInit+0x168>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d145      	bne.n	80028d4 <HAL_UART_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002848:	f04f 0201 	mov.w	r2, #1
 800284c:	f04f 0300 	mov.w	r3, #0
 8002850:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002854:	2300      	movs	r3, #0
 8002856:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002858:	f107 0318 	add.w	r3, r7, #24
 800285c:	4618      	mov	r0, r3
 800285e:	f003 fcb9 	bl	80061d4 <HAL_RCCEx_PeriphCLKConfig>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <HAL_UART_MspInit+0xec>
      Error_Handler();
 8002868:	f7ff fb2e 	bl	8001ec8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800286c:	4b1c      	ldr	r3, [pc, #112]	; (80028e0 <HAL_UART_MspInit+0x160>)
 800286e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002872:	4a1b      	ldr	r2, [pc, #108]	; (80028e0 <HAL_UART_MspInit+0x160>)
 8002874:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002878:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800287c:	4b18      	ldr	r3, [pc, #96]	; (80028e0 <HAL_UART_MspInit+0x160>)
 800287e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002882:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002886:	60fb      	str	r3, [r7, #12]
 8002888:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800288a:	4b15      	ldr	r3, [pc, #84]	; (80028e0 <HAL_UART_MspInit+0x160>)
 800288c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002890:	4a13      	ldr	r2, [pc, #76]	; (80028e0 <HAL_UART_MspInit+0x160>)
 8002892:	f043 0301 	orr.w	r3, r3, #1
 8002896:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800289a:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <HAL_UART_MspInit+0x160>)
 800289c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028a0:	f003 0301 	and.w	r3, r3, #1
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 80028a8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80028ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b0:	2302      	movs	r3, #2
 80028b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028bc:	2300      	movs	r3, #0
 80028be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80028c2:	2307      	movs	r3, #7
 80028c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80028cc:	4619      	mov	r1, r3
 80028ce:	4807      	ldr	r0, [pc, #28]	; (80028ec <HAL_UART_MspInit+0x16c>)
 80028d0:	f000 fb64 	bl	8002f9c <HAL_GPIO_Init>
}
 80028d4:	bf00      	nop
 80028d6:	37f8      	adds	r7, #248	; 0xf8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40004c00 	.word	0x40004c00
 80028e0:	46020c00 	.word	0x46020c00
 80028e4:	42020800 	.word	0x42020800
 80028e8:	40013800 	.word	0x40013800
 80028ec:	42020000 	.word	0x42020000

080028f0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b0be      	sub	sp, #248	; 0xf8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	605a      	str	r2, [r3, #4]
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	60da      	str	r2, [r3, #12]
 8002906:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002908:	f107 0318 	add.w	r3, r7, #24
 800290c:	22c8      	movs	r2, #200	; 0xc8
 800290e:	2100      	movs	r1, #0
 8002910:	4618      	mov	r0, r3
 8002912:	f008 fe8c 	bl	800b62e <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a38      	ldr	r2, [pc, #224]	; (80029fc <HAL_PCD_MspInit+0x10c>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d169      	bne.n	80029f4 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002920:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002924:	f04f 0300 	mov.w	r3, #0
 8002928:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 800292c:	2300      	movs	r3, #0
 800292e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002932:	f107 0318 	add.w	r3, r7, #24
 8002936:	4618      	mov	r0, r3
 8002938:	f003 fc4c 	bl	80061d4 <HAL_RCCEx_PeriphCLKConfig>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8002942:	f7ff fac1 	bl	8001ec8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002946:	4b2e      	ldr	r3, [pc, #184]	; (8002a00 <HAL_PCD_MspInit+0x110>)
 8002948:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800294c:	4a2c      	ldr	r2, [pc, #176]	; (8002a00 <HAL_PCD_MspInit+0x110>)
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002956:	4b2a      	ldr	r3, [pc, #168]	; (8002a00 <HAL_PCD_MspInit+0x110>)
 8002958:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800295c:	f003 0301 	and.w	r3, r3, #1
 8002960:	617b      	str	r3, [r7, #20]
 8002962:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_C_P_Pin|USB_C_PA11_Pin;
 8002964:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002968:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296c:	2302      	movs	r3, #2
 800296e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002972:	2300      	movs	r3, #0
 8002974:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002978:	2300      	movs	r3, #0
 800297a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800297e:	230a      	movs	r3, #10
 8002980:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002984:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002988:	4619      	mov	r1, r3
 800298a:	481e      	ldr	r0, [pc, #120]	; (8002a04 <HAL_PCD_MspInit+0x114>)
 800298c:	f000 fb06 	bl	8002f9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002990:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <HAL_PCD_MspInit+0x110>)
 8002992:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002996:	4a1a      	ldr	r2, [pc, #104]	; (8002a00 <HAL_PCD_MspInit+0x110>)
 8002998:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800299c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80029a0:	4b17      	ldr	r3, [pc, #92]	; (8002a00 <HAL_PCD_MspInit+0x110>)
 80029a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029aa:	613b      	str	r3, [r7, #16]
 80029ac:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029ae:	4b14      	ldr	r3, [pc, #80]	; (8002a00 <HAL_PCD_MspInit+0x110>)
 80029b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d119      	bne.n	80029f0 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029bc:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <HAL_PCD_MspInit+0x110>)
 80029be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029c2:	4a0f      	ldr	r2, [pc, #60]	; (8002a00 <HAL_PCD_MspInit+0x110>)
 80029c4:	f043 0304 	orr.w	r3, r3, #4
 80029c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80029cc:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <HAL_PCD_MspInit+0x110>)
 80029ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029d2:	f003 0304 	and.w	r3, r3, #4
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80029da:	f002 f92f 	bl	8004c3c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80029de:	4b08      	ldr	r3, [pc, #32]	; (8002a00 <HAL_PCD_MspInit+0x110>)
 80029e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029e4:	4a06      	ldr	r2, [pc, #24]	; (8002a00 <HAL_PCD_MspInit+0x110>)
 80029e6:	f023 0304 	bic.w	r3, r3, #4
 80029ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80029ee:	e001      	b.n	80029f4 <HAL_PCD_MspInit+0x104>
      HAL_PWREx_EnableVddUSB();
 80029f0:	f002 f924 	bl	8004c3c <HAL_PWREx_EnableVddUSB>
}
 80029f4:	bf00      	nop
 80029f6:	37f8      	adds	r7, #248	; 0xf8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	42040000 	.word	0x42040000
 8002a00:	46020c00 	.word	0x46020c00
 8002a04:	42020000 	.word	0x42020000

08002a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a0c:	e7fe      	b.n	8002a0c <NMI_Handler+0x4>

08002a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a0e:	b480      	push	{r7}
 8002a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a12:	e7fe      	b.n	8002a12 <HardFault_Handler+0x4>

08002a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a18:	e7fe      	b.n	8002a18 <MemManage_Handler+0x4>

08002a1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a1e:	e7fe      	b.n	8002a1e <BusFault_Handler+0x4>

08002a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a24:	e7fe      	b.n	8002a24 <UsageFault_Handler+0x4>

08002a26 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a26:	b480      	push	{r7}
 8002a28:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a2a:	bf00      	nop
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr

08002a34 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a38:	bf00      	nop
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a42:	b480      	push	{r7}
 8002a44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a46:	bf00      	nop
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr

08002a50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a54:	f000 f8d2 	bl	8002bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a58:	bf00      	nop
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002a60:	4802      	ldr	r0, [pc, #8]	; (8002a6c <TIM3_IRQHandler+0x10>)
 8002a62:	f006 fb97 	bl	8009194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002a66:	bf00      	nop
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	2000008c 	.word	0x2000008c

08002a70 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002a74:	4b18      	ldr	r3, [pc, #96]	; (8002ad8 <SystemInit+0x68>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7a:	4a17      	ldr	r2, [pc, #92]	; (8002ad8 <SystemInit+0x68>)
 8002a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002a84:	4b15      	ldr	r3, [pc, #84]	; (8002adc <SystemInit+0x6c>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002a8a:	4b14      	ldr	r3, [pc, #80]	; (8002adc <SystemInit+0x6c>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002a90:	4b12      	ldr	r3, [pc, #72]	; (8002adc <SystemInit+0x6c>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002a96:	4b11      	ldr	r3, [pc, #68]	; (8002adc <SystemInit+0x6c>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002a9c:	4b0f      	ldr	r3, [pc, #60]	; (8002adc <SystemInit+0x6c>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a0e      	ldr	r2, [pc, #56]	; (8002adc <SystemInit+0x6c>)
 8002aa2:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002aa6:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002aaa:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002aac:	4b0b      	ldr	r3, [pc, #44]	; (8002adc <SystemInit+0x6c>)
 8002aae:	2200      	movs	r2, #0
 8002ab0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002ab2:	4b0a      	ldr	r3, [pc, #40]	; (8002adc <SystemInit+0x6c>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a09      	ldr	r2, [pc, #36]	; (8002adc <SystemInit+0x6c>)
 8002ab8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002abc:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002abe:	4b07      	ldr	r3, [pc, #28]	; (8002adc <SystemInit+0x6c>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002ac4:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <SystemInit+0x68>)
 8002ac6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002aca:	609a      	str	r2, [r3, #8]
  #endif
}
 8002acc:	bf00      	nop
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	e000ed00 	.word	0xe000ed00
 8002adc:	46020c00 	.word	0x46020c00

08002ae0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002ae0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b18 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002ae4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002ae6:	e003      	b.n	8002af0 <LoopCopyDataInit>

08002ae8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002ae8:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002aea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002aec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002aee:	3104      	adds	r1, #4

08002af0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002af0:	480b      	ldr	r0, [pc, #44]	; (8002b20 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002af2:	4b0c      	ldr	r3, [pc, #48]	; (8002b24 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002af4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002af6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002af8:	d3f6      	bcc.n	8002ae8 <CopyDataInit>
	ldr	r2, =_sbss
 8002afa:	4a0b      	ldr	r2, [pc, #44]	; (8002b28 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002afc:	e002      	b.n	8002b04 <LoopFillZerobss>

08002afe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002afe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002b00:	f842 3b04 	str.w	r3, [r2], #4

08002b04 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002b04:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <LoopForever+0x16>)
	cmp	r2, r3
 8002b06:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002b08:	d3f9      	bcc.n	8002afe <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b0a:	f7ff ffb1 	bl	8002a70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b0e:	f008 fd5d 	bl	800b5cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002b12:	f7fe fc57 	bl	80013c4 <main>

08002b16 <LoopForever>:

LoopForever:
    b LoopForever
 8002b16:	e7fe      	b.n	8002b16 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002b18:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8002b1c:	0800c818 	.word	0x0800c818
	ldr	r0, =_sdata
 8002b20:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002b24:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8002b28:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8002b2c:	200009cc 	.word	0x200009cc

08002b30 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002b30:	e7fe      	b.n	8002b30 <ADC1_IRQHandler>
	...

08002b34 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b38:	4b11      	ldr	r3, [pc, #68]	; (8002b80 <HAL_Init+0x4c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a10      	ldr	r2, [pc, #64]	; (8002b80 <HAL_Init+0x4c>)
 8002b3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b44:	2003      	movs	r0, #3
 8002b46:	f000 f96d 	bl	8002e24 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002b4a:	f003 f95f 	bl	8005e0c <HAL_RCC_GetSysClockFreq>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	4b0c      	ldr	r3, [pc, #48]	; (8002b84 <HAL_Init+0x50>)
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	f003 030f 	and.w	r3, r3, #15
 8002b58:	490b      	ldr	r1, [pc, #44]	; (8002b88 <HAL_Init+0x54>)
 8002b5a:	5ccb      	ldrb	r3, [r1, r3]
 8002b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b60:	4a0a      	ldr	r2, [pc, #40]	; (8002b8c <HAL_Init+0x58>)
 8002b62:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b64:	200f      	movs	r0, #15
 8002b66:	f000 f813 	bl	8002b90 <HAL_InitTick>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e002      	b.n	8002b7a <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b74:	f7ff f9ae 	bl	8001ed4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	40022000 	.word	0x40022000
 8002b84:	46020c00 	.word	0x46020c00
 8002b88:	0800c6d8 	.word	0x0800c6d8
 8002b8c:	20000000 	.word	0x20000000

08002b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002b98:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <HAL_InitTick+0x60>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d101      	bne.n	8002ba4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e021      	b.n	8002be8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002ba4:	4b13      	ldr	r3, [pc, #76]	; (8002bf4 <HAL_InitTick+0x64>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	4b11      	ldr	r3, [pc, #68]	; (8002bf0 <HAL_InitTick+0x60>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	4619      	mov	r1, r3
 8002bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 f965 	bl	8002e8a <HAL_SYSTICK_Config>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e00e      	b.n	8002be8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b0f      	cmp	r3, #15
 8002bce:	d80a      	bhi.n	8002be6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd8:	f000 f92f 	bl	8002e3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bdc:	4a06      	ldr	r2, [pc, #24]	; (8002bf8 <HAL_InitTick+0x68>)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
 8002be4:	e000      	b.n	8002be8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20000008 	.word	0x20000008
 8002bf4:	20000000 	.word	0x20000000
 8002bf8:	20000004 	.word	0x20000004

08002bfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c00:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <HAL_IncTick+0x20>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	461a      	mov	r2, r3
 8002c06:	4b06      	ldr	r3, [pc, #24]	; (8002c20 <HAL_IncTick+0x24>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	4a04      	ldr	r2, [pc, #16]	; (8002c20 <HAL_IncTick+0x24>)
 8002c0e:	6013      	str	r3, [r2, #0]
}
 8002c10:	bf00      	nop
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	20000008 	.word	0x20000008
 8002c20:	200009a4 	.word	0x200009a4

08002c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  return uwTick;
 8002c28:	4b03      	ldr	r3, [pc, #12]	; (8002c38 <HAL_GetTick+0x14>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	200009a4 	.word	0x200009a4

08002c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c44:	f7ff ffee 	bl	8002c24 <HAL_GetTick>
 8002c48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c54:	d005      	beq.n	8002c62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c56:	4b0a      	ldr	r3, [pc, #40]	; (8002c80 <HAL_Delay+0x44>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	4413      	add	r3, r2
 8002c60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c62:	bf00      	nop
 8002c64:	f7ff ffde 	bl	8002c24 <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d8f7      	bhi.n	8002c64 <HAL_Delay+0x28>
  {
  }
}
 8002c74:	bf00      	nop
 8002c76:	bf00      	nop
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20000008 	.word	0x20000008

08002c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c94:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cb6:	4a04      	ldr	r2, [pc, #16]	; (8002cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	60d3      	str	r3, [r2, #12]
}
 8002cbc:	bf00      	nop
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	e000ed00 	.word	0xe000ed00

08002ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cd0:	4b04      	ldr	r3, [pc, #16]	; (8002ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	0a1b      	lsrs	r3, r3, #8
 8002cd6:	f003 0307 	and.w	r3, r3, #7
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	e000ed00 	.word	0xe000ed00

08002ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	db0b      	blt.n	8002d12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cfa:	79fb      	ldrb	r3, [r7, #7]
 8002cfc:	f003 021f 	and.w	r2, r3, #31
 8002d00:	4907      	ldr	r1, [pc, #28]	; (8002d20 <__NVIC_EnableIRQ+0x38>)
 8002d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d06:	095b      	lsrs	r3, r3, #5
 8002d08:	2001      	movs	r0, #1
 8002d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	e000e100 	.word	0xe000e100

08002d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	6039      	str	r1, [r7, #0]
 8002d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	db0a      	blt.n	8002d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	490c      	ldr	r1, [pc, #48]	; (8002d70 <__NVIC_SetPriority+0x4c>)
 8002d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d42:	0112      	lsls	r2, r2, #4
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	440b      	add	r3, r1
 8002d48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d4c:	e00a      	b.n	8002d64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	4908      	ldr	r1, [pc, #32]	; (8002d74 <__NVIC_SetPriority+0x50>)
 8002d54:	79fb      	ldrb	r3, [r7, #7]
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	3b04      	subs	r3, #4
 8002d5c:	0112      	lsls	r2, r2, #4
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	440b      	add	r3, r1
 8002d62:	761a      	strb	r2, [r3, #24]
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	e000e100 	.word	0xe000e100
 8002d74:	e000ed00 	.word	0xe000ed00

08002d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b089      	sub	sp, #36	; 0x24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f1c3 0307 	rsb	r3, r3, #7
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	bf28      	it	cs
 8002d96:	2304      	movcs	r3, #4
 8002d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	2b06      	cmp	r3, #6
 8002da0:	d902      	bls.n	8002da8 <NVIC_EncodePriority+0x30>
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	3b03      	subs	r3, #3
 8002da6:	e000      	b.n	8002daa <NVIC_EncodePriority+0x32>
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dac:	f04f 32ff 	mov.w	r2, #4294967295
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43da      	mvns	r2, r3
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	401a      	ands	r2, r3
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dca:	43d9      	mvns	r1, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd0:	4313      	orrs	r3, r2
         );
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3724      	adds	r7, #36	; 0x24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
	...

08002de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002df0:	d301      	bcc.n	8002df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002df2:	2301      	movs	r3, #1
 8002df4:	e00f      	b.n	8002e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002df6:	4a0a      	ldr	r2, [pc, #40]	; (8002e20 <SysTick_Config+0x40>)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dfe:	210f      	movs	r1, #15
 8002e00:	f04f 30ff 	mov.w	r0, #4294967295
 8002e04:	f7ff ff8e 	bl	8002d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e08:	4b05      	ldr	r3, [pc, #20]	; (8002e20 <SysTick_Config+0x40>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e0e:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <SysTick_Config+0x40>)
 8002e10:	2207      	movs	r2, #7
 8002e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	e000e010 	.word	0xe000e010

08002e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7ff ff29 	bl	8002c84 <__NVIC_SetPriorityGrouping>
}
 8002e32:	bf00      	nop
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b086      	sub	sp, #24
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	4603      	mov	r3, r0
 8002e42:	60b9      	str	r1, [r7, #8]
 8002e44:	607a      	str	r2, [r7, #4]
 8002e46:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e48:	f7ff ff40 	bl	8002ccc <__NVIC_GetPriorityGrouping>
 8002e4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	68b9      	ldr	r1, [r7, #8]
 8002e52:	6978      	ldr	r0, [r7, #20]
 8002e54:	f7ff ff90 	bl	8002d78 <NVIC_EncodePriority>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e5e:	4611      	mov	r1, r2
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7ff ff5f 	bl	8002d24 <__NVIC_SetPriority>
}
 8002e66:	bf00      	nop
 8002e68:	3718      	adds	r7, #24
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b082      	sub	sp, #8
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	4603      	mov	r3, r0
 8002e76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff ff33 	bl	8002ce8 <__NVIC_EnableIRQ>
}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f7ff ffa4 	bl	8002de0 <SysTick_Config>
 8002e98:	4603      	mov	r3, r0
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	3708      	adds	r7, #8
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	bd80      	pop	{r7, pc}

08002ea2 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8002ea2:	b580      	push	{r7, lr}
 8002ea4:	b084      	sub	sp, #16
 8002ea6:	af00      	add	r7, sp, #0
 8002ea8:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8002eaa:	f7ff febb 	bl	8002c24 <HAL_GetTick>
 8002eae:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e06b      	b.n	8002f92 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d008      	beq.n	8002ed8 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2220      	movs	r2, #32
 8002eca:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e05c      	b.n	8002f92 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0204 	orr.w	r2, r2, #4
 8002ee6:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2205      	movs	r2, #5
 8002eec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002ef0:	e020      	b.n	8002f34 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002ef2:	f7ff fe97 	bl	8002c24 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b05      	cmp	r3, #5
 8002efe:	d919      	bls.n	8002f34 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f04:	f043 0210 	orr.w	r2, r3, #16
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2203      	movs	r2, #3
 8002f10:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f24:	2201      	movs	r2, #1
 8002f26:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e02e      	b.n	8002f92 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0d7      	beq.n	8002ef2 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	695a      	ldr	r2, [r3, #20]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0202 	orr.w	r2, r2, #2
 8002f50:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2204      	movs	r2, #4
 8002f56:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8002f62:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d007      	beq.n	8002f88 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2200      	movs	r2, #0
 8002f86:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002f90:	2300      	movs	r3, #0
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b089      	sub	sp, #36	; 0x24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002fae:	e1ba      	b.n	8003326 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 81aa 	beq.w	8003320 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a55      	ldr	r2, [pc, #340]	; (8003124 <HAL_GPIO_Init+0x188>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d15d      	bne.n	8003090 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8002fda:	2201      	movs	r2, #1
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	43db      	mvns	r3, r3
 8002fe4:	69fa      	ldr	r2, [r7, #28]
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f003 0201 	and.w	r2, r3, #1
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff8:	69fa      	ldr	r2, [r7, #28]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	69fa      	ldr	r2, [r7, #28]
 8003002:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003004:	4a48      	ldr	r2, [pc, #288]	; (8003128 <HAL_GPIO_Init+0x18c>)
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800300c:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800300e:	4a46      	ldr	r2, [pc, #280]	; (8003128 <HAL_GPIO_Init+0x18c>)
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	4413      	add	r3, r2
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	08da      	lsrs	r2, r3, #3
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	3208      	adds	r2, #8
 8003022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003026:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	220f      	movs	r2, #15
 8003032:	fa02 f303 	lsl.w	r3, r2, r3
 8003036:	43db      	mvns	r3, r3
 8003038:	69fa      	ldr	r2, [r7, #28]
 800303a:	4013      	ands	r3, r2
 800303c:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	220b      	movs	r2, #11
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	69fa      	ldr	r2, [r7, #28]
 800304e:	4313      	orrs	r3, r2
 8003050:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	08da      	lsrs	r2, r3, #3
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	3208      	adds	r2, #8
 800305a:	69f9      	ldr	r1, [r7, #28]
 800305c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	2203      	movs	r2, #3
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43db      	mvns	r3, r3
 8003072:	69fa      	ldr	r2, [r7, #28]
 8003074:	4013      	ands	r3, r2
 8003076:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	005b      	lsls	r3, r3, #1
 800307c:	2202      	movs	r2, #2
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	69fa      	ldr	r2, [r7, #28]
 8003084:	4313      	orrs	r3, r2
 8003086:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	e067      	b.n	8003160 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	2b02      	cmp	r3, #2
 8003096:	d003      	beq.n	80030a0 <HAL_GPIO_Init+0x104>
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b12      	cmp	r3, #18
 800309e:	d145      	bne.n	800312c <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	08da      	lsrs	r2, r3, #3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3208      	adds	r2, #8
 80030a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ac:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	220f      	movs	r2, #15
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	43db      	mvns	r3, r3
 80030be:	69fa      	ldr	r2, [r7, #28]
 80030c0:	4013      	ands	r3, r2
 80030c2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	f003 020f 	and.w	r2, r3, #15
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	69fa      	ldr	r2, [r7, #28]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	08da      	lsrs	r2, r3, #3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3208      	adds	r2, #8
 80030e6:	69f9      	ldr	r1, [r7, #28]
 80030e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	2203      	movs	r2, #3
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	69fa      	ldr	r2, [r7, #28]
 8003100:	4013      	ands	r3, r2
 8003102:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 0203 	and.w	r2, r3, #3
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	69fa      	ldr	r2, [r7, #28]
 8003116:	4313      	orrs	r3, r2
 8003118:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	69fa      	ldr	r2, [r7, #28]
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	e01e      	b.n	8003160 <HAL_GPIO_Init+0x1c4>
 8003122:	bf00      	nop
 8003124:	46020000 	.word	0x46020000
 8003128:	0800c730 	.word	0x0800c730
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	005b      	lsls	r3, r3, #1
 8003136:	2203      	movs	r2, #3
 8003138:	fa02 f303 	lsl.w	r3, r2, r3
 800313c:	43db      	mvns	r3, r3
 800313e:	69fa      	ldr	r2, [r7, #28]
 8003140:	4013      	ands	r3, r2
 8003142:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f003 0203 	and.w	r2, r3, #3
 800314c:	69bb      	ldr	r3, [r7, #24]
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	69fa      	ldr	r2, [r7, #28]
 8003156:	4313      	orrs	r3, r2
 8003158:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	69fa      	ldr	r2, [r7, #28]
 800315e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d00b      	beq.n	8003180 <HAL_GPIO_Init+0x1e4>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	2b02      	cmp	r3, #2
 800316e:	d007      	beq.n	8003180 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003174:	2b11      	cmp	r3, #17
 8003176:	d003      	beq.n	8003180 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	2b12      	cmp	r3, #18
 800317e:	d130      	bne.n	80031e2 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	2203      	movs	r2, #3
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	69fa      	ldr	r2, [r7, #28]
 8003194:	4013      	ands	r3, r2
 8003196:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	68da      	ldr	r2, [r3, #12]
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	69fa      	ldr	r2, [r7, #28]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	69fa      	ldr	r2, [r7, #28]
 80031ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80031b6:	2201      	movs	r2, #1
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43db      	mvns	r3, r3
 80031c0:	69fa      	ldr	r2, [r7, #28]
 80031c2:	4013      	ands	r3, r2
 80031c4:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	091b      	lsrs	r3, r3, #4
 80031cc:	f003 0201 	and.w	r2, r3, #1
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	fa02 f303 	lsl.w	r3, r2, r3
 80031d6:	69fa      	ldr	r2, [r7, #28]
 80031d8:	4313      	orrs	r3, r2
 80031da:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	69fa      	ldr	r2, [r7, #28]
 80031e0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b03      	cmp	r3, #3
 80031e8:	d017      	beq.n	800321a <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	2203      	movs	r2, #3
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	43db      	mvns	r3, r3
 80031fc:	69fa      	ldr	r2, [r7, #28]
 80031fe:	4013      	ands	r3, r2
 8003200:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	69fa      	ldr	r2, [r7, #28]
 8003210:	4313      	orrs	r3, r2
 8003212:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	69fa      	ldr	r2, [r7, #28]
 8003218:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d07c      	beq.n	8003320 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003226:	4a47      	ldr	r2, [pc, #284]	; (8003344 <HAL_GPIO_Init+0x3a8>)
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	089b      	lsrs	r3, r3, #2
 800322c:	3318      	adds	r3, #24
 800322e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003232:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	00db      	lsls	r3, r3, #3
 800323c:	220f      	movs	r2, #15
 800323e:	fa02 f303 	lsl.w	r3, r2, r3
 8003242:	43db      	mvns	r3, r3
 8003244:	69fa      	ldr	r2, [r7, #28]
 8003246:	4013      	ands	r3, r2
 8003248:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	0a9a      	lsrs	r2, r3, #10
 800324e:	4b3e      	ldr	r3, [pc, #248]	; (8003348 <HAL_GPIO_Init+0x3ac>)
 8003250:	4013      	ands	r3, r2
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	f002 0203 	and.w	r2, r2, #3
 8003258:	00d2      	lsls	r2, r2, #3
 800325a:	4093      	lsls	r3, r2
 800325c:	69fa      	ldr	r2, [r7, #28]
 800325e:	4313      	orrs	r3, r2
 8003260:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003262:	4938      	ldr	r1, [pc, #224]	; (8003344 <HAL_GPIO_Init+0x3a8>)
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	089b      	lsrs	r3, r3, #2
 8003268:	3318      	adds	r3, #24
 800326a:	69fa      	ldr	r2, [r7, #28]
 800326c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003270:	4b34      	ldr	r3, [pc, #208]	; (8003344 <HAL_GPIO_Init+0x3a8>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	43db      	mvns	r3, r3
 800327a:	69fa      	ldr	r2, [r7, #28]
 800327c:	4013      	ands	r3, r2
 800327e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800328c:	69fa      	ldr	r2, [r7, #28]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4313      	orrs	r3, r2
 8003292:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8003294:	4a2b      	ldr	r2, [pc, #172]	; (8003344 <HAL_GPIO_Init+0x3a8>)
 8003296:	69fb      	ldr	r3, [r7, #28]
 8003298:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800329a:	4b2a      	ldr	r3, [pc, #168]	; (8003344 <HAL_GPIO_Init+0x3a8>)
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	69fa      	ldr	r2, [r7, #28]
 80032a6:	4013      	ands	r3, r2
 80032a8:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80032b6:	69fa      	ldr	r2, [r7, #28]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80032be:	4a21      	ldr	r2, [pc, #132]	; (8003344 <HAL_GPIO_Init+0x3a8>)
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80032c4:	4b1f      	ldr	r3, [pc, #124]	; (8003344 <HAL_GPIO_Init+0x3a8>)
 80032c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032ca:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	43db      	mvns	r3, r3
 80032d0:	69fa      	ldr	r2, [r7, #28]
 80032d2:	4013      	ands	r3, r2
 80032d4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80032e2:	69fa      	ldr	r2, [r7, #28]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80032ea:	4a16      	ldr	r2, [pc, #88]	; (8003344 <HAL_GPIO_Init+0x3a8>)
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80032f2:	4b14      	ldr	r3, [pc, #80]	; (8003344 <HAL_GPIO_Init+0x3a8>)
 80032f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032f8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	43db      	mvns	r3, r3
 80032fe:	69fa      	ldr	r2, [r7, #28]
 8003300:	4013      	ands	r3, r2
 8003302:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8003310:	69fa      	ldr	r2, [r7, #28]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	4313      	orrs	r3, r2
 8003316:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003318:	4a0a      	ldr	r2, [pc, #40]	; (8003344 <HAL_GPIO_Init+0x3a8>)
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	3301      	adds	r3, #1
 8003324:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681a      	ldr	r2, [r3, #0]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	fa22 f303 	lsr.w	r3, r2, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	f47f ae3d 	bne.w	8002fb0 <HAL_GPIO_Init+0x14>
  }
}
 8003336:	bf00      	nop
 8003338:	bf00      	nop
 800333a:	3724      	adds	r7, #36	; 0x24
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	46022000 	.word	0x46022000
 8003348:	002f7f7f 	.word	0x002f7f7f

0800334c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	460b      	mov	r3, r1
 8003356:	807b      	strh	r3, [r7, #2]
 8003358:	4613      	mov	r3, r2
 800335a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800335c:	787b      	ldrb	r3, [r7, #1]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003362:	887a      	ldrh	r2, [r7, #2]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003368:	e002      	b.n	8003370 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800336a:	887a      	ldrh	r2, [r7, #2]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e081      	b.n	8003492 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b00      	cmp	r3, #0
 8003398:	d106      	bne.n	80033a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f7fe fe1a 	bl	8001fdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2224      	movs	r2, #36	; 0x24
 80033ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0201 	bic.w	r2, r2, #1
 80033be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	68db      	ldr	r3, [r3, #12]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d107      	bne.n	80033f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033f2:	609a      	str	r2, [r3, #8]
 80033f4:	e006      	b.n	8003404 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003402:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	2b02      	cmp	r3, #2
 800340a:	d104      	bne.n	8003416 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003414:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	6812      	ldr	r2, [r2, #0]
 8003420:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003424:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003428:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68da      	ldr	r2, [r3, #12]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003438:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691a      	ldr	r2, [r3, #16]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	699b      	ldr	r3, [r3, #24]
 800344a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	69d9      	ldr	r1, [r3, #28]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a1a      	ldr	r2, [r3, #32]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0201 	orr.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2220      	movs	r2, #32
 800347e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}

0800349a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
 80034a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2b20      	cmp	r3, #32
 80034ae:	d138      	bne.n	8003522 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d101      	bne.n	80034be <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034ba:	2302      	movs	r3, #2
 80034bc:	e032      	b.n	8003524 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2201      	movs	r2, #1
 80034c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2224      	movs	r2, #36	; 0x24
 80034ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f022 0201 	bic.w	r2, r2, #1
 80034dc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034ec:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6819      	ldr	r1, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	683a      	ldr	r2, [r7, #0]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f042 0201 	orr.w	r2, r2, #1
 800350c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2220      	movs	r2, #32
 8003512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800351e:	2300      	movs	r3, #0
 8003520:	e000      	b.n	8003524 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003522:	2302      	movs	r3, #2
  }
}
 8003524:	4618      	mov	r0, r3
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b20      	cmp	r3, #32
 8003544:	d139      	bne.n	80035ba <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800354c:	2b01      	cmp	r3, #1
 800354e:	d101      	bne.n	8003554 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003550:	2302      	movs	r3, #2
 8003552:	e033      	b.n	80035bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2224      	movs	r2, #36	; 0x24
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0201 	bic.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003582:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	021b      	lsls	r3, r3, #8
 8003588:	68fa      	ldr	r2, [r7, #12]
 800358a:	4313      	orrs	r3, r2
 800358c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f042 0201 	orr.w	r2, r2, #1
 80035a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2220      	movs	r2, #32
 80035aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035b6:	2300      	movs	r3, #0
 80035b8:	e000      	b.n	80035bc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035ba:	2302      	movs	r3, #2
  }
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3714      	adds	r7, #20
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035d0:	2300      	movs	r3, #0
 80035d2:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d102      	bne.n	80035e0 <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	73fb      	strb	r3, [r7, #15]
 80035de:	e141      	b.n	8003864 <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 f947 	bl	8003878 <MDF_GetHandleNumberFromInstance>
 80035ea:	4603      	mov	r3, r0
 80035ec:	4a86      	ldr	r2, [pc, #536]	; (8003808 <HAL_MDF_Init+0x240>)
 80035ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d002      	beq.n	80035fc <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	73fb      	strb	r3, [r7, #15]
 80035fa:	e133      	b.n	8003864 <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7fe fc83 	bl	8001f08 <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8003602:	4b82      	ldr	r3, [pc, #520]	; (800380c <HAL_MDF_Init+0x244>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d11d      	bne.n	8003646 <HAL_MDF_Init+0x7e>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a80      	ldr	r2, [pc, #512]	; (8003810 <HAL_MDF_Init+0x248>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d023      	beq.n	800365c <HAL_MDF_Init+0x94>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a7e      	ldr	r2, [pc, #504]	; (8003814 <HAL_MDF_Init+0x24c>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d01e      	beq.n	800365c <HAL_MDF_Init+0x94>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a7d      	ldr	r2, [pc, #500]	; (8003818 <HAL_MDF_Init+0x250>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d019      	beq.n	800365c <HAL_MDF_Init+0x94>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a7b      	ldr	r2, [pc, #492]	; (800381c <HAL_MDF_Init+0x254>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d014      	beq.n	800365c <HAL_MDF_Init+0x94>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a7a      	ldr	r2, [pc, #488]	; (8003820 <HAL_MDF_Init+0x258>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d00f      	beq.n	800365c <HAL_MDF_Init+0x94>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a78      	ldr	r2, [pc, #480]	; (8003824 <HAL_MDF_Init+0x25c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d00a      	beq.n	800365c <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8003646:	4b78      	ldr	r3, [pc, #480]	; (8003828 <HAL_MDF_Init+0x260>)
 8003648:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 800364a:	2b00      	cmp	r3, #0
 800364c:	f040 8090 	bne.w	8003770 <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a75      	ldr	r2, [pc, #468]	; (800382c <HAL_MDF_Init+0x264>)
 8003656:	4293      	cmp	r3, r2
 8003658:	f040 808a 	bne.w	8003770 <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a72      	ldr	r2, [pc, #456]	; (800382c <HAL_MDF_Init+0x264>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d101      	bne.n	800366a <HAL_MDF_Init+0xa2>
 8003666:	4b72      	ldr	r3, [pc, #456]	; (8003830 <HAL_MDF_Init+0x268>)
 8003668:	e000      	b.n	800366c <HAL_MDF_Init+0xa4>
 800366a:	4b72      	ldr	r3, [pc, #456]	; (8003834 <HAL_MDF_Init+0x26c>)
 800366c:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2b00      	cmp	r3, #0
 8003674:	da02      	bge.n	800367c <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	73fb      	strb	r3, [r7, #15]
 800367a:	e079      	b.n	8003770 <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a63      	ldr	r2, [pc, #396]	; (8003810 <HAL_MDF_Init+0x248>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d018      	beq.n	80036b8 <HAL_MDF_Init+0xf0>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a62      	ldr	r2, [pc, #392]	; (8003814 <HAL_MDF_Init+0x24c>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d013      	beq.n	80036b8 <HAL_MDF_Init+0xf0>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a60      	ldr	r2, [pc, #384]	; (8003818 <HAL_MDF_Init+0x250>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d00e      	beq.n	80036b8 <HAL_MDF_Init+0xf0>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a5f      	ldr	r2, [pc, #380]	; (800381c <HAL_MDF_Init+0x254>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d009      	beq.n	80036b8 <HAL_MDF_Init+0xf0>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a5d      	ldr	r2, [pc, #372]	; (8003820 <HAL_MDF_Init+0x258>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d004      	beq.n	80036b8 <HAL_MDF_Init+0xf0>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a5c      	ldr	r2, [pc, #368]	; (8003824 <HAL_MDF_Init+0x25c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d10d      	bne.n	80036d4 <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	011b      	lsls	r3, r3, #4
 80036ce:	431a      	orrs	r2, r3
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2200      	movs	r2, #0
 80036d8:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	061b      	lsls	r3, r3, #24
 80036e6:	431a      	orrs	r2, r3
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	7b1b      	ldrb	r3, [r3, #12]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d137      	bne.n	8003764 <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	3b01      	subs	r3, #1
 80036fe:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8003704:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	691b      	ldr	r3, [r3, #16]
 800370a:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
 800370c:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 800370e:	431a      	orrs	r2, r3
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	7e1b      	ldrb	r3, [r3, #24]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d123      	bne.n	8003764 <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a3b      	ldr	r2, [pc, #236]	; (8003810 <HAL_MDF_Init+0x248>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d012      	beq.n	800374c <HAL_MDF_Init+0x184>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a3a      	ldr	r2, [pc, #232]	; (8003814 <HAL_MDF_Init+0x24c>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d00d      	beq.n	800374c <HAL_MDF_Init+0x184>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a38      	ldr	r2, [pc, #224]	; (8003818 <HAL_MDF_Init+0x250>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d008      	beq.n	800374c <HAL_MDF_Init+0x184>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a37      	ldr	r2, [pc, #220]	; (800381c <HAL_MDF_Init+0x254>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d003      	beq.n	800374c <HAL_MDF_Init+0x184>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a35      	ldr	r2, [pc, #212]	; (8003820 <HAL_MDF_Init+0x258>)
 800374a:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	685a      	ldr	r2, [r3, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8003758:	430b      	orrs	r3, r1
 800375a:	4313      	orrs	r3, r2
 800375c:	f043 0210 	orr.w	r2, r3, #16
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f043 0201 	orr.w	r2, r3, #1
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
 8003770:	7bfb      	ldrb	r3, [r7, #15]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d128      	bne.n	80037c8 <HAL_MDF_Init+0x200>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800377c:	2b01      	cmp	r3, #1
 800377e:	d123      	bne.n	80037c8 <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	da02      	bge.n	8003790 <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	73fb      	strb	r3, [r7, #15]
 800378e:	e01b      	b.n	80037c8 <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6819      	ldr	r1, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a2:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 80037a8:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037ae:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	430a      	orrs	r2, r1
 80037b6:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0201 	orr.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d14a      	bne.n	8003864 <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 021f 	bic.w	r2, r2, #31
 80037dc:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6859      	ldr	r1, [r3, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a0d      	ldr	r2, [pc, #52]	; (800382c <HAL_MDF_Init+0x264>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d11e      	bne.n	8003838 <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
 80037fa:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <HAL_MDF_Init+0x260>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	3301      	adds	r3, #1
 8003800:	4a09      	ldr	r2, [pc, #36]	; (8003828 <HAL_MDF_Init+0x260>)
 8003802:	6013      	str	r3, [r2, #0]
 8003804:	e01d      	b.n	8003842 <HAL_MDF_Init+0x27a>
 8003806:	bf00      	nop
 8003808:	200009b0 	.word	0x200009b0
 800380c:	200009a8 	.word	0x200009a8
 8003810:	40025080 	.word	0x40025080
 8003814:	40025100 	.word	0x40025100
 8003818:	40025180 	.word	0x40025180
 800381c:	40025200 	.word	0x40025200
 8003820:	40025280 	.word	0x40025280
 8003824:	40025300 	.word	0x40025300
 8003828:	200009ac 	.word	0x200009ac
 800382c:	46024080 	.word	0x46024080
 8003830:	46024000 	.word	0x46024000
 8003834:	40025000 	.word	0x40025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
 8003838:	4b0d      	ldr	r3, [pc, #52]	; (8003870 <HAL_MDF_Init+0x2a8>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	3301      	adds	r3, #1
 800383e:	4a0c      	ldr	r2, [pc, #48]	; (8003870 <HAL_MDF_Init+0x2a8>)
 8003840:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4618      	mov	r0, r3
 8003848:	f000 f816 	bl	8003878 <MDF_GetHandleNumberFromInstance>
 800384c:	4602      	mov	r2, r0
 800384e:	4909      	ldr	r1, [pc, #36]	; (8003874 <HAL_MDF_Init+0x2ac>)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	641a      	str	r2, [r3, #64]	; 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      }
    }
  }

  /* Return function status */
  return status;
 8003864:	7bfb      	ldrb	r3, [r7, #15]
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	200009a8 	.word	0x200009a8
 8003874:	200009b0 	.word	0x200009b0

08003878 <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a19      	ldr	r2, [pc, #100]	; (80038e8 <MDF_GetHandleNumberFromInstance+0x70>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d102      	bne.n	800388e <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
 8003888:	2300      	movs	r3, #0
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	e024      	b.n	80038d8 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a16      	ldr	r2, [pc, #88]	; (80038ec <MDF_GetHandleNumberFromInstance+0x74>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d102      	bne.n	800389c <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
 8003896:	2301      	movs	r3, #1
 8003898:	60fb      	str	r3, [r7, #12]
 800389a:	e01d      	b.n	80038d8 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter2)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4a14      	ldr	r2, [pc, #80]	; (80038f0 <MDF_GetHandleNumberFromInstance+0x78>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d102      	bne.n	80038aa <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
 80038a4:	2302      	movs	r3, #2
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	e016      	b.n	80038d8 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a11      	ldr	r2, [pc, #68]	; (80038f4 <MDF_GetHandleNumberFromInstance+0x7c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d102      	bne.n	80038b8 <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
 80038b2:	2303      	movs	r3, #3
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	e00f      	b.n	80038d8 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a0f      	ldr	r2, [pc, #60]	; (80038f8 <MDF_GetHandleNumberFromInstance+0x80>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d102      	bne.n	80038c6 <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
 80038c0:	2304      	movs	r3, #4
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	e008      	b.n	80038d8 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a0c      	ldr	r2, [pc, #48]	; (80038fc <MDF_GetHandleNumberFromInstance+0x84>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d102      	bne.n	80038d4 <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
 80038ce:	2305      	movs	r3, #5
 80038d0:	60fb      	str	r3, [r7, #12]
 80038d2:	e001      	b.n	80038d8 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
 80038d4:	2306      	movs	r3, #6
 80038d6:	60fb      	str	r3, [r7, #12]
  }

  return handle_number;
 80038d8:	68fb      	ldr	r3, [r7, #12]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e4:	4770      	bx	lr
 80038e6:	bf00      	nop
 80038e8:	40025080 	.word	0x40025080
 80038ec:	40025100 	.word	0x40025100
 80038f0:	40025180 	.word	0x40025180
 80038f4:	40025200 	.word	0x40025200
 80038f8:	40025280 	.word	0x40025280
 80038fc:	40025300 	.word	0x40025300

08003900 <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f043 0201 	orr.w	r2, r3, #1
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	601a      	str	r2, [r3, #0]
}
 8003914:	bf00      	nop
 8003916:	370c      	adds	r7, #12
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b086      	sub	sp, #24
 8003924:	af02      	add	r7, sp, #8
 8003926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800392c:	f7ff f97a 	bl	8002c24 <HAL_GetTick>
 8003930:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d102      	bne.n	800393e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	73fb      	strb	r3, [r7, #15]
 800393c:	e0a5      	b.n	8003a8a <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003948:	2b00      	cmp	r3, #0
 800394a:	f040 809e 	bne.w	8003a8a <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7fe fbfe 	bl	8002150 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003954:	f241 3188 	movw	r1, #5000	; 0x1388
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f912 	bl	8003b82 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	689a      	ldr	r2, [r3, #8]
 8003964:	4b4b      	ldr	r3, [pc, #300]	; (8003a94 <HAL_OSPI_Init+0x174>)
 8003966:	4013      	ands	r3, r2
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	68d1      	ldr	r1, [r2, #12]
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6912      	ldr	r2, [r2, #16]
 8003970:	3a01      	subs	r2, #1
 8003972:	0412      	lsls	r2, r2, #16
 8003974:	4311      	orrs	r1, r2
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6952      	ldr	r2, [r2, #20]
 800397a:	3a01      	subs	r2, #1
 800397c:	0212      	lsls	r2, r2, #8
 800397e:	4311      	orrs	r1, r2
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003984:	4311      	orrs	r1, r2
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	69d2      	ldr	r2, [r2, #28]
 800398a:	4311      	orrs	r1, r2
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	430b      	orrs	r3, r1
 8003992:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a1a      	ldr	r2, [r3, #32]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80039c4:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	3b01      	subs	r3, #1
 80039d6:	021a      	lsls	r2, r3, #8
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	430a      	orrs	r2, r1
 80039de:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2200      	movs	r2, #0
 80039ea:	2120      	movs	r1, #32
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 fdc9 	bl	8004584 <OSPI_WaitFlagStateUntilTimeout>
 80039f2:	4603      	mov	r3, r0
 80039f4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d146      	bne.n	8003a8a <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	1e5a      	subs	r2, r3, #1
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	430a      	orrs	r2, r1
 8003a12:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689a      	ldr	r2, [r3, #8]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003a32:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f042 0201 	orr.w	r2, r2, #1
 8003a58:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d107      	bne.n	8003a72 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f042 0202 	orr.w	r2, r2, #2
 8003a70:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003a7a:	d103      	bne.n	8003a84 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	651a      	str	r2, [r3, #80]	; 0x50
 8003a82:	e002      	b.n	8003a8a <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2202      	movs	r2, #2
 8003a88:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8003a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	f8e0c0f4 	.word	0xf8e0c0f4

08003a98 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8003aa4:	f7ff f8be 	bl	8002c24 <HAL_GetTick>
 8003aa8:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003aae:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f003 0308 	and.w	r3, r3, #8
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d104      	bne.n	8003ac4 <HAL_OSPI_Abort+0x2c>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d052      	beq.n	8003b6a <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f003 0304 	and.w	r3, r3, #4
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d014      	beq.n	8003afc <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0204 	bic.w	r2, r2, #4
 8003ae0:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7ff f9db 	bl	8002ea2 <HAL_DMA_Abort>
 8003aec:	4603      	mov	r3, r0
 8003aee:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8003af0:	7dfb      	ldrb	r3, [r7, #23]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d002      	beq.n	8003afc <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2204      	movs	r2, #4
 8003afa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6a1b      	ldr	r3, [r3, #32]
 8003b02:	f003 0320 	and.w	r3, r3, #32
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d02b      	beq.n	8003b62 <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0202 	orr.w	r2, r2, #2
 8003b18:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	2201      	movs	r2, #1
 8003b24:	2102      	movs	r1, #2
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 fd2c 	bl	8004584 <OSPI_WaitFlagStateUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8003b30:	7dfb      	ldrb	r3, [r7, #23]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d11f      	bne.n	8003b76 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	2200      	movs	r2, #0
 8003b48:	2120      	movs	r1, #32
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 fd1a 	bl	8004584 <OSPI_WaitFlagStateUntilTimeout>
 8003b50:	4603      	mov	r3, r0
 8003b52:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8003b54:	7dfb      	ldrb	r3, [r7, #23]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d10d      	bne.n	8003b76 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2202      	movs	r2, #2
 8003b5e:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8003b60:	e009      	b.n	8003b76 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2202      	movs	r2, #2
 8003b66:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8003b68:	e005      	b.n	8003b76 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2210      	movs	r2, #16
 8003b72:	655a      	str	r2, [r3, #84]	; 0x54
 8003b74:	e000      	b.n	8003b78 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8003b76:	bf00      	nop
  }

  /* Return function status */
  return status;
 8003b78:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
 8003b8a:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	683a      	ldr	r2, [r7, #0]
 8003b90:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b094      	sub	sp, #80	; 0x50
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bac:	2300      	movs	r3, #0
 8003bae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a9d      	ldr	r2, [pc, #628]	; (8003e34 <HAL_OSPIM_Config+0x294>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d105      	bne.n	8003bce <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8003bcc:	e004      	b.n	8003bd8 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003bd8:	2300      	movs	r3, #0
 8003bda:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003bde:	e01d      	b.n	8003c1c <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8003be0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003be4:	3301      	adds	r3, #1
 8003be6:	b2d8      	uxtb	r0, r3
 8003be8:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8003bec:	f107 0114 	add.w	r1, r7, #20
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	4413      	add	r3, r2
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	440b      	add	r3, r1
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	f000 fd02 	bl	8004604 <OSPIM_GetConfig>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d005      	beq.n	8003c12 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2208      	movs	r2, #8
 8003c10:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003c12:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003c16:	3301      	adds	r3, #1
 8003c18:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003c1c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d9dd      	bls.n	8003be0 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8003c24:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f040 849e 	bne.w	800456a <HAL_OSPIM_Config+0x9ca>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003c2e:	4b81      	ldr	r3, [pc, #516]	; (8003e34 <HAL_OSPIM_Config+0x294>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00b      	beq.n	8003c52 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003c3a:	4b7e      	ldr	r3, [pc, #504]	; (8003e34 <HAL_OSPIM_Config+0x294>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a7d      	ldr	r2, [pc, #500]	; (8003e34 <HAL_OSPIM_Config+0x294>)
 8003c40:	f023 0301 	bic.w	r3, r3, #1
 8003c44:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8003c46:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003c4a:	f043 0301 	orr.w	r3, r3, #1
 8003c4e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8003c52:	4b79      	ldr	r3, [pc, #484]	; (8003e38 <HAL_OSPIM_Config+0x298>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00b      	beq.n	8003c76 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003c5e:	4b76      	ldr	r3, [pc, #472]	; (8003e38 <HAL_OSPIM_Config+0x298>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a75      	ldr	r2, [pc, #468]	; (8003e38 <HAL_OSPIM_Config+0x298>)
 8003c64:	f023 0301 	bic.w	r3, r3, #1
 8003c68:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8003c6a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003c6e:	f043 0302 	orr.w	r3, r3, #2
 8003c72:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8003c76:	4971      	ldr	r1, [pc, #452]	; (8003e3c <HAL_OSPIM_Config+0x29c>)
 8003c78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	005b      	lsls	r3, r3, #1
 8003c7e:	4413      	add	r3, r2
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	3350      	adds	r3, #80	; 0x50
 8003c84:	443b      	add	r3, r7
 8003c86:	3b34      	subs	r3, #52	; 0x34
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	440b      	add	r3, r1
 8003c90:	6859      	ldr	r1, [r3, #4]
 8003c92:	486a      	ldr	r0, [pc, #424]	; (8003e3c <HAL_OSPIM_Config+0x29c>)
 8003c94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c96:	4613      	mov	r3, r2
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	4413      	add	r3, r2
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	3350      	adds	r3, #80	; 0x50
 8003ca0:	443b      	add	r3, r7
 8003ca2:	3b34      	subs	r3, #52	; 0x34
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4403      	add	r3, r0
 8003cb0:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8003cb2:	4b62      	ldr	r3, [pc, #392]	; (8003e3c <HAL_OSPIM_Config+0x29c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0301 	and.w	r3, r3, #1
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	f000 80c0 	beq.w	8003e40 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8003cc0:	4b5e      	ldr	r3, [pc, #376]	; (8003e3c <HAL_OSPIM_Config+0x29c>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a5d      	ldr	r2, [pc, #372]	; (8003e3c <HAL_OSPIM_Config+0x29c>)
 8003cc6:	f023 0301 	bic.w	r3, r3, #1
 8003cca:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8003ccc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	f040 8162 	bne.w	8003f9a <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8003cd6:	4959      	ldr	r1, [pc, #356]	; (8003e3c <HAL_OSPIM_Config+0x29c>)
 8003cd8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003cdc:	4613      	mov	r3, r2
 8003cde:	005b      	lsls	r3, r3, #1
 8003ce0:	4413      	add	r3, r2
 8003ce2:	00db      	lsls	r3, r3, #3
 8003ce4:	3350      	adds	r3, #80	; 0x50
 8003ce6:	443b      	add	r3, r7
 8003ce8:	3b3c      	subs	r3, #60	; 0x3c
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3b01      	subs	r3, #1
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	6859      	ldr	r1, [r3, #4]
 8003cf4:	4851      	ldr	r0, [pc, #324]	; (8003e3c <HAL_OSPIM_Config+0x29c>)
 8003cf6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	4413      	add	r3, r2
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	3350      	adds	r3, #80	; 0x50
 8003d04:	443b      	add	r3, r7
 8003d06:	3b3c      	subs	r3, #60	; 0x3c
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	3b01      	subs	r3, #1
 8003d0c:	f041 0202 	orr.w	r2, r1, #2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4403      	add	r3, r0
 8003d14:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8003d16:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	4413      	add	r3, r2
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	3350      	adds	r3, #80	; 0x50
 8003d24:	443b      	add	r3, r7
 8003d26:	3b38      	subs	r3, #56	; 0x38
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d01f      	beq.n	8003d6e <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8003d2e:	4943      	ldr	r1, [pc, #268]	; (8003e3c <HAL_OSPIM_Config+0x29c>)
 8003d30:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003d34:	4613      	mov	r3, r2
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	4413      	add	r3, r2
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	3350      	adds	r3, #80	; 0x50
 8003d3e:	443b      	add	r3, r7
 8003d40:	3b38      	subs	r3, #56	; 0x38
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3b01      	subs	r3, #1
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	440b      	add	r3, r1
 8003d4a:	6859      	ldr	r1, [r3, #4]
 8003d4c:	483b      	ldr	r0, [pc, #236]	; (8003e3c <HAL_OSPIM_Config+0x29c>)
 8003d4e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003d52:	4613      	mov	r3, r2
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	4413      	add	r3, r2
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	3350      	adds	r3, #80	; 0x50
 8003d5c:	443b      	add	r3, r7
 8003d5e:	3b38      	subs	r3, #56	; 0x38
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3b01      	subs	r3, #1
 8003d64:	f041 0220 	orr.w	r2, r1, #32
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4403      	add	r3, r0
 8003d6c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003d6e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003d72:	4613      	mov	r3, r2
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	4413      	add	r3, r2
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	3350      	adds	r3, #80	; 0x50
 8003d7c:	443b      	add	r3, r7
 8003d7e:	3b30      	subs	r3, #48	; 0x30
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d023      	beq.n	8003dce <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003d86:	492d      	ldr	r1, [pc, #180]	; (8003e3c <HAL_OSPIM_Config+0x29c>)
 8003d88:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	4413      	add	r3, r2
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	3350      	adds	r3, #80	; 0x50
 8003d96:	443b      	add	r3, r7
 8003d98:	3b30      	subs	r3, #48	; 0x30
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	f003 0301 	and.w	r3, r3, #1
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	440b      	add	r3, r1
 8003da6:	6859      	ldr	r1, [r3, #4]
 8003da8:	4824      	ldr	r0, [pc, #144]	; (8003e3c <HAL_OSPIM_Config+0x29c>)
 8003daa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003dae:	4613      	mov	r3, r2
 8003db0:	005b      	lsls	r3, r3, #1
 8003db2:	4413      	add	r3, r2
 8003db4:	00db      	lsls	r3, r3, #3
 8003db6:	3350      	adds	r3, #80	; 0x50
 8003db8:	443b      	add	r3, r7
 8003dba:	3b30      	subs	r3, #48	; 0x30
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4403      	add	r3, r0
 8003dcc:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003dce:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	4413      	add	r3, r2
 8003dd8:	00db      	lsls	r3, r3, #3
 8003dda:	3350      	adds	r3, #80	; 0x50
 8003ddc:	443b      	add	r3, r7
 8003dde:	3b2c      	subs	r3, #44	; 0x2c
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	f000 80d9 	beq.w	8003f9a <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003de8:	4914      	ldr	r1, [pc, #80]	; (8003e3c <HAL_OSPIM_Config+0x29c>)
 8003dea:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003dee:	4613      	mov	r3, r2
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	4413      	add	r3, r2
 8003df4:	00db      	lsls	r3, r3, #3
 8003df6:	3350      	adds	r3, #80	; 0x50
 8003df8:	443b      	add	r3, r7
 8003dfa:	3b2c      	subs	r3, #44	; 0x2c
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	f003 0301 	and.w	r3, r3, #1
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	440b      	add	r3, r1
 8003e08:	6859      	ldr	r1, [r3, #4]
 8003e0a:	480c      	ldr	r0, [pc, #48]	; (8003e3c <HAL_OSPIM_Config+0x29c>)
 8003e0c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003e10:	4613      	mov	r3, r2
 8003e12:	005b      	lsls	r3, r3, #1
 8003e14:	4413      	add	r3, r2
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	3350      	adds	r3, #80	; 0x50
 8003e1a:	443b      	add	r3, r7
 8003e1c:	3b2c      	subs	r3, #44	; 0x2c
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	3b01      	subs	r3, #1
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4403      	add	r3, r0
 8003e2e:	605a      	str	r2, [r3, #4]
 8003e30:	e0b3      	b.n	8003f9a <HAL_OSPIM_Config+0x3fa>
 8003e32:	bf00      	nop
 8003e34:	420d1400 	.word	0x420d1400
 8003e38:	420d2400 	.word	0x420d2400
 8003e3c:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8003e40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e42:	4613      	mov	r3, r2
 8003e44:	005b      	lsls	r3, r3, #1
 8003e46:	4413      	add	r3, r2
 8003e48:	00db      	lsls	r3, r3, #3
 8003e4a:	3350      	adds	r3, #80	; 0x50
 8003e4c:	443b      	add	r3, r7
 8003e4e:	3b3c      	subs	r3, #60	; 0x3c
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	f000 80a1 	beq.w	8003f9a <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8003e58:	4993      	ldr	r1, [pc, #588]	; (80040a8 <HAL_OSPIM_Config+0x508>)
 8003e5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	4413      	add	r3, r2
 8003e62:	00db      	lsls	r3, r3, #3
 8003e64:	3350      	adds	r3, #80	; 0x50
 8003e66:	443b      	add	r3, r7
 8003e68:	3b3c      	subs	r3, #60	; 0x3c
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	3b01      	subs	r3, #1
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	440b      	add	r3, r1
 8003e72:	6859      	ldr	r1, [r3, #4]
 8003e74:	488c      	ldr	r0, [pc, #560]	; (80040a8 <HAL_OSPIM_Config+0x508>)
 8003e76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e78:	4613      	mov	r3, r2
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	4413      	add	r3, r2
 8003e7e:	00db      	lsls	r3, r3, #3
 8003e80:	3350      	adds	r3, #80	; 0x50
 8003e82:	443b      	add	r3, r7
 8003e84:	3b3c      	subs	r3, #60	; 0x3c
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	f021 0201 	bic.w	r2, r1, #1
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	4403      	add	r3, r0
 8003e92:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8003e94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e96:	4613      	mov	r3, r2
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	4413      	add	r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	3350      	adds	r3, #80	; 0x50
 8003ea0:	443b      	add	r3, r7
 8003ea2:	3b38      	subs	r3, #56	; 0x38
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d01d      	beq.n	8003ee6 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8003eaa:	497f      	ldr	r1, [pc, #508]	; (80040a8 <HAL_OSPIM_Config+0x508>)
 8003eac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003eae:	4613      	mov	r3, r2
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	4413      	add	r3, r2
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	3350      	adds	r3, #80	; 0x50
 8003eb8:	443b      	add	r3, r7
 8003eba:	3b38      	subs	r3, #56	; 0x38
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	440b      	add	r3, r1
 8003ec4:	6859      	ldr	r1, [r3, #4]
 8003ec6:	4878      	ldr	r0, [pc, #480]	; (80040a8 <HAL_OSPIM_Config+0x508>)
 8003ec8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003eca:	4613      	mov	r3, r2
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	4413      	add	r3, r2
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	3350      	adds	r3, #80	; 0x50
 8003ed4:	443b      	add	r3, r7
 8003ed6:	3b38      	subs	r3, #56	; 0x38
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	f021 0210 	bic.w	r2, r1, #16
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4403      	add	r3, r0
 8003ee4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003ee6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ee8:	4613      	mov	r3, r2
 8003eea:	005b      	lsls	r3, r3, #1
 8003eec:	4413      	add	r3, r2
 8003eee:	00db      	lsls	r3, r3, #3
 8003ef0:	3350      	adds	r3, #80	; 0x50
 8003ef2:	443b      	add	r3, r7
 8003ef4:	3b30      	subs	r3, #48	; 0x30
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d021      	beq.n	8003f40 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003efc:	496a      	ldr	r1, [pc, #424]	; (80040a8 <HAL_OSPIM_Config+0x508>)
 8003efe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f00:	4613      	mov	r3, r2
 8003f02:	005b      	lsls	r3, r3, #1
 8003f04:	4413      	add	r3, r2
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	3350      	adds	r3, #80	; 0x50
 8003f0a:	443b      	add	r3, r7
 8003f0c:	3b30      	subs	r3, #48	; 0x30
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	3b01      	subs	r3, #1
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	6859      	ldr	r1, [r3, #4]
 8003f1c:	4862      	ldr	r0, [pc, #392]	; (80040a8 <HAL_OSPIM_Config+0x508>)
 8003f1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f20:	4613      	mov	r3, r2
 8003f22:	005b      	lsls	r3, r3, #1
 8003f24:	4413      	add	r3, r2
 8003f26:	00db      	lsls	r3, r3, #3
 8003f28:	3350      	adds	r3, #80	; 0x50
 8003f2a:	443b      	add	r3, r7
 8003f2c:	3b30      	subs	r3, #48	; 0x30
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	3b01      	subs	r3, #1
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003f3a:	009b      	lsls	r3, r3, #2
 8003f3c:	4403      	add	r3, r0
 8003f3e:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003f40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f42:	4613      	mov	r3, r2
 8003f44:	005b      	lsls	r3, r3, #1
 8003f46:	4413      	add	r3, r2
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	3350      	adds	r3, #80	; 0x50
 8003f4c:	443b      	add	r3, r7
 8003f4e:	3b2c      	subs	r3, #44	; 0x2c
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d021      	beq.n	8003f9a <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003f56:	4954      	ldr	r1, [pc, #336]	; (80040a8 <HAL_OSPIM_Config+0x508>)
 8003f58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	4413      	add	r3, r2
 8003f60:	00db      	lsls	r3, r3, #3
 8003f62:	3350      	adds	r3, #80	; 0x50
 8003f64:	443b      	add	r3, r7
 8003f66:	3b2c      	subs	r3, #44	; 0x2c
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	440b      	add	r3, r1
 8003f74:	6859      	ldr	r1, [r3, #4]
 8003f76:	484c      	ldr	r0, [pc, #304]	; (80040a8 <HAL_OSPIM_Config+0x508>)
 8003f78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	4413      	add	r3, r2
 8003f80:	00db      	lsls	r3, r3, #3
 8003f82:	3350      	adds	r3, #80	; 0x50
 8003f84:	443b      	add	r3, r7
 8003f86:	3b2c      	subs	r3, #44	; 0x2c
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4403      	add	r3, r0
 8003f98:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	6819      	ldr	r1, [r3, #0]
 8003f9e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	4413      	add	r3, r2
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	3350      	adds	r3, #80	; 0x50
 8003fac:	443b      	add	r3, r7
 8003fae:	3b3c      	subs	r3, #60	; 0x3c
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4299      	cmp	r1, r3
 8003fb4:	d038      	beq.n	8004028 <HAL_OSPIM_Config+0x488>
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	6859      	ldr	r1, [r3, #4]
 8003fba:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	4413      	add	r3, r2
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	3350      	adds	r3, #80	; 0x50
 8003fc8:	443b      	add	r3, r7
 8003fca:	3b38      	subs	r3, #56	; 0x38
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4299      	cmp	r1, r3
 8003fd0:	d02a      	beq.n	8004028 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	6899      	ldr	r1, [r3, #8]
 8003fd6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003fda:	4613      	mov	r3, r2
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	4413      	add	r3, r2
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	3350      	adds	r3, #80	; 0x50
 8003fe4:	443b      	add	r3, r7
 8003fe6:	3b34      	subs	r3, #52	; 0x34
 8003fe8:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003fea:	4299      	cmp	r1, r3
 8003fec:	d01c      	beq.n	8004028 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	68d9      	ldr	r1, [r3, #12]
 8003ff2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	005b      	lsls	r3, r3, #1
 8003ffa:	4413      	add	r3, r2
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	3350      	adds	r3, #80	; 0x50
 8004000:	443b      	add	r3, r7
 8004002:	3b30      	subs	r3, #48	; 0x30
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4299      	cmp	r1, r3
 8004008:	d00e      	beq.n	8004028 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	6919      	ldr	r1, [r3, #16]
 800400e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004012:	4613      	mov	r3, r2
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	4413      	add	r3, r2
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	3350      	adds	r3, #80	; 0x50
 800401c:	443b      	add	r3, r7
 800401e:	3b2c      	subs	r3, #44	; 0x2c
 8004020:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004022:	4299      	cmp	r1, r3
 8004024:	f040 810e 	bne.w	8004244 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	6819      	ldr	r1, [r3, #0]
 800402c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004030:	4613      	mov	r3, r2
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	4413      	add	r3, r2
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	3350      	adds	r3, #80	; 0x50
 800403a:	443b      	add	r3, r7
 800403c:	3b3c      	subs	r3, #60	; 0x3c
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4299      	cmp	r1, r3
 8004042:	d133      	bne.n	80040ac <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	6859      	ldr	r1, [r3, #4]
 8004048:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800404c:	4613      	mov	r3, r2
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	4413      	add	r3, r2
 8004052:	00db      	lsls	r3, r3, #3
 8004054:	3350      	adds	r3, #80	; 0x50
 8004056:	443b      	add	r3, r7
 8004058:	3b38      	subs	r3, #56	; 0x38
 800405a:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800405c:	4299      	cmp	r1, r3
 800405e:	d125      	bne.n	80040ac <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	68d9      	ldr	r1, [r3, #12]
 8004064:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004068:	4613      	mov	r3, r2
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	4413      	add	r3, r2
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	3350      	adds	r3, #80	; 0x50
 8004072:	443b      	add	r3, r7
 8004074:	3b30      	subs	r3, #48	; 0x30
 8004076:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8004078:	4299      	cmp	r1, r3
 800407a:	d117      	bne.n	80040ac <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	6919      	ldr	r1, [r3, #16]
 8004080:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004084:	4613      	mov	r3, r2
 8004086:	005b      	lsls	r3, r3, #1
 8004088:	4413      	add	r3, r2
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	3350      	adds	r3, #80	; 0x50
 800408e:	443b      	add	r3, r7
 8004090:	3b2c      	subs	r3, #44	; 0x2c
 8004092:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8004094:	4299      	cmp	r1, r3
 8004096:	d109      	bne.n	80040ac <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8004098:	4b03      	ldr	r3, [pc, #12]	; (80040a8 <HAL_OSPIM_Config+0x508>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a02      	ldr	r2, [pc, #8]	; (80040a8 <HAL_OSPIM_Config+0x508>)
 800409e:	f043 0301 	orr.w	r3, r3, #1
 80040a2:	6013      	str	r3, [r2, #0]
 80040a4:	e0ce      	b.n	8004244 <HAL_OSPIM_Config+0x6a4>
 80040a6:	bf00      	nop
 80040a8:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80040ac:	49a4      	ldr	r1, [pc, #656]	; (8004340 <HAL_OSPIM_Config+0x7a0>)
 80040ae:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80040b2:	4613      	mov	r3, r2
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	4413      	add	r3, r2
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	3350      	adds	r3, #80	; 0x50
 80040bc:	443b      	add	r3, r7
 80040be:	3b3c      	subs	r3, #60	; 0x3c
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	440b      	add	r3, r1
 80040c8:	6859      	ldr	r1, [r3, #4]
 80040ca:	489d      	ldr	r0, [pc, #628]	; (8004340 <HAL_OSPIM_Config+0x7a0>)
 80040cc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80040d0:	4613      	mov	r3, r2
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	4413      	add	r3, r2
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	3350      	adds	r3, #80	; 0x50
 80040da:	443b      	add	r3, r7
 80040dc:	3b3c      	subs	r3, #60	; 0x3c
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	3b01      	subs	r3, #1
 80040e2:	f021 0201 	bic.w	r2, r1, #1
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4403      	add	r3, r0
 80040ea:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80040ec:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80040f0:	4613      	mov	r3, r2
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	4413      	add	r3, r2
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	3350      	adds	r3, #80	; 0x50
 80040fa:	443b      	add	r3, r7
 80040fc:	3b38      	subs	r3, #56	; 0x38
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d01f      	beq.n	8004144 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8004104:	498e      	ldr	r1, [pc, #568]	; (8004340 <HAL_OSPIM_Config+0x7a0>)
 8004106:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800410a:	4613      	mov	r3, r2
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	4413      	add	r3, r2
 8004110:	00db      	lsls	r3, r3, #3
 8004112:	3350      	adds	r3, #80	; 0x50
 8004114:	443b      	add	r3, r7
 8004116:	3b38      	subs	r3, #56	; 0x38
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	3b01      	subs	r3, #1
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	440b      	add	r3, r1
 8004120:	6859      	ldr	r1, [r3, #4]
 8004122:	4887      	ldr	r0, [pc, #540]	; (8004340 <HAL_OSPIM_Config+0x7a0>)
 8004124:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004128:	4613      	mov	r3, r2
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	4413      	add	r3, r2
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	3350      	adds	r3, #80	; 0x50
 8004132:	443b      	add	r3, r7
 8004134:	3b38      	subs	r3, #56	; 0x38
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	3b01      	subs	r3, #1
 800413a:	f021 0210 	bic.w	r2, r1, #16
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4403      	add	r3, r0
 8004142:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004144:	497e      	ldr	r1, [pc, #504]	; (8004340 <HAL_OSPIM_Config+0x7a0>)
 8004146:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800414a:	4613      	mov	r3, r2
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	4413      	add	r3, r2
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	3350      	adds	r3, #80	; 0x50
 8004154:	443b      	add	r3, r7
 8004156:	3b34      	subs	r3, #52	; 0x34
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	3b01      	subs	r3, #1
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	440b      	add	r3, r1
 8004160:	6859      	ldr	r1, [r3, #4]
 8004162:	4877      	ldr	r0, [pc, #476]	; (8004340 <HAL_OSPIM_Config+0x7a0>)
 8004164:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004168:	4613      	mov	r3, r2
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	4413      	add	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	3350      	adds	r3, #80	; 0x50
 8004172:	443b      	add	r3, r7
 8004174:	3b34      	subs	r3, #52	; 0x34
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	3b01      	subs	r3, #1
 800417a:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4403      	add	r3, r0
 8004182:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004184:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004188:	4613      	mov	r3, r2
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	4413      	add	r3, r2
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	3350      	adds	r3, #80	; 0x50
 8004192:	443b      	add	r3, r7
 8004194:	3b30      	subs	r3, #48	; 0x30
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d023      	beq.n	80041e4 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800419c:	4968      	ldr	r1, [pc, #416]	; (8004340 <HAL_OSPIM_Config+0x7a0>)
 800419e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80041a2:	4613      	mov	r3, r2
 80041a4:	005b      	lsls	r3, r3, #1
 80041a6:	4413      	add	r3, r2
 80041a8:	00db      	lsls	r3, r3, #3
 80041aa:	3350      	adds	r3, #80	; 0x50
 80041ac:	443b      	add	r3, r7
 80041ae:	3b30      	subs	r3, #48	; 0x30
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	3b01      	subs	r3, #1
 80041b4:	f003 0301 	and.w	r3, r3, #1
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	440b      	add	r3, r1
 80041bc:	6859      	ldr	r1, [r3, #4]
 80041be:	4860      	ldr	r0, [pc, #384]	; (8004340 <HAL_OSPIM_Config+0x7a0>)
 80041c0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80041c4:	4613      	mov	r3, r2
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	4413      	add	r3, r2
 80041ca:	00db      	lsls	r3, r3, #3
 80041cc:	3350      	adds	r3, #80	; 0x50
 80041ce:	443b      	add	r3, r7
 80041d0:	3b30      	subs	r3, #48	; 0x30
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3b01      	subs	r3, #1
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4403      	add	r3, r0
 80041e2:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80041e4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80041e8:	4613      	mov	r3, r2
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	4413      	add	r3, r2
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	3350      	adds	r3, #80	; 0x50
 80041f2:	443b      	add	r3, r7
 80041f4:	3b2c      	subs	r3, #44	; 0x2c
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d023      	beq.n	8004244 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80041fc:	4950      	ldr	r1, [pc, #320]	; (8004340 <HAL_OSPIM_Config+0x7a0>)
 80041fe:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004202:	4613      	mov	r3, r2
 8004204:	005b      	lsls	r3, r3, #1
 8004206:	4413      	add	r3, r2
 8004208:	00db      	lsls	r3, r3, #3
 800420a:	3350      	adds	r3, #80	; 0x50
 800420c:	443b      	add	r3, r7
 800420e:	3b2c      	subs	r3, #44	; 0x2c
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	3b01      	subs	r3, #1
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	440b      	add	r3, r1
 800421c:	6859      	ldr	r1, [r3, #4]
 800421e:	4848      	ldr	r0, [pc, #288]	; (8004340 <HAL_OSPIM_Config+0x7a0>)
 8004220:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004224:	4613      	mov	r3, r2
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	4413      	add	r3, r2
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	3350      	adds	r3, #80	; 0x50
 800422e:	443b      	add	r3, r7
 8004230:	3b2c      	subs	r3, #44	; 0x2c
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	3b01      	subs	r3, #1
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4403      	add	r3, r0
 8004242:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8004244:	4a3e      	ldr	r2, [pc, #248]	; (8004340 <HAL_OSPIM_Config+0x7a0>)
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	3b01      	subs	r3, #1
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4413      	add	r3, r2
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004256:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004258:	025b      	lsls	r3, r3, #9
 800425a:	431a      	orrs	r2, r3
 800425c:	4938      	ldr	r1, [pc, #224]	; (8004340 <HAL_OSPIM_Config+0x7a0>)
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	3b01      	subs	r3, #1
 8004264:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	440b      	add	r3, r1
 800426c:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d018      	beq.n	80042a8 <HAL_OSPIM_Config+0x708>
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800427e:	d813      	bhi.n	80042a8 <HAL_OSPIM_Config+0x708>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	1e5a      	subs	r2, r3, #1
 8004286:	4b2e      	ldr	r3, [pc, #184]	; (8004340 <HAL_OSPIM_Config+0x7a0>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	0c1b      	lsrs	r3, r3, #16
 800428c:	b2db      	uxtb	r3, r3
 800428e:	429a      	cmp	r2, r3
 8004290:	d90a      	bls.n	80042a8 <HAL_OSPIM_Config+0x708>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8004292:	4b2b      	ldr	r3, [pc, #172]	; (8004340 <HAL_OSPIM_Config+0x7a0>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	3b01      	subs	r3, #1
 80042a0:	041b      	lsls	r3, r3, #16
 80042a2:	4927      	ldr	r1, [pc, #156]	; (8004340 <HAL_OSPIM_Config+0x7a0>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80042a8:	4b25      	ldr	r3, [pc, #148]	; (8004340 <HAL_OSPIM_Config+0x7a0>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0301 	and.w	r3, r3, #1
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 809a 	beq.w	80043ea <HAL_OSPIM_Config+0x84a>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 80042b6:	4a22      	ldr	r2, [pc, #136]	; (8004340 <HAL_OSPIM_Config+0x7a0>)
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	3b01      	subs	r3, #1
 80042be:	009b      	lsls	r3, r3, #2
 80042c0:	4413      	add	r3, r2
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f023 0203 	bic.w	r2, r3, #3
 80042c8:	491d      	ldr	r1, [pc, #116]	; (8004340 <HAL_OSPIM_Config+0x7a0>)
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	3b01      	subs	r3, #1
 80042d0:	f042 0201 	orr.w	r2, r2, #1
 80042d4:	009b      	lsls	r3, r3, #2
 80042d6:	440b      	add	r3, r1
 80042d8:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d011      	beq.n	8004306 <HAL_OSPIM_Config+0x766>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 80042e2:	4a17      	ldr	r2, [pc, #92]	; (8004340 <HAL_OSPIM_Config+0x7a0>)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	3b01      	subs	r3, #1
 80042ea:	009b      	lsls	r3, r3, #2
 80042ec:	4413      	add	r3, r2
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80042f4:	4912      	ldr	r1, [pc, #72]	; (8004340 <HAL_OSPIM_Config+0x7a0>)
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	3b01      	subs	r3, #1
 80042fc:	f042 0210 	orr.w	r2, r2, #16
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	440b      	add	r3, r1
 8004304:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d018      	beq.n	8004344 <HAL_OSPIM_Config+0x7a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004312:	4a0b      	ldr	r2, [pc, #44]	; (8004340 <HAL_OSPIM_Config+0x7a0>)
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	3b01      	subs	r3, #1
 800431a:	f003 0301 	and.w	r3, r3, #1
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4413      	add	r3, r2
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004328:	4905      	ldr	r1, [pc, #20]	; (8004340 <HAL_OSPIM_Config+0x7a0>)
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	3b01      	subs	r3, #1
 8004330:	f003 0301 	and.w	r3, r3, #1
 8004334:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	440b      	add	r3, r1
 800433c:	605a      	str	r2, [r3, #4]
 800433e:	e01b      	b.n	8004378 <HAL_OSPIM_Config+0x7d8>
 8004340:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d015      	beq.n	8004378 <HAL_OSPIM_Config+0x7d8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800434c:	4a8a      	ldr	r2, [pc, #552]	; (8004578 <HAL_OSPIM_Config+0x9d8>)
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	3b01      	subs	r3, #1
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	009b      	lsls	r3, r3, #2
 800435a:	4413      	add	r3, r2
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004362:	4985      	ldr	r1, [pc, #532]	; (8004578 <HAL_OSPIM_Config+0x9d8>)
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	3b01      	subs	r3, #1
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	440b      	add	r3, r1
 8004376:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004380:	2b00      	cmp	r3, #0
 8004382:	d016      	beq.n	80043b2 <HAL_OSPIM_Config+0x812>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004384:	4a7c      	ldr	r2, [pc, #496]	; (8004578 <HAL_OSPIM_Config+0x9d8>)
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	3b01      	subs	r3, #1
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4413      	add	r3, r2
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800439a:	4977      	ldr	r1, [pc, #476]	; (8004578 <HAL_OSPIM_Config+0x9d8>)
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	3b01      	subs	r3, #1
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	440b      	add	r3, r1
 80043ae:	605a      	str	r2, [r3, #4]
 80043b0:	e0c3      	b.n	800453a <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 80bf 	beq.w	800453a <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80043bc:	4a6e      	ldr	r2, [pc, #440]	; (8004578 <HAL_OSPIM_Config+0x9d8>)
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4413      	add	r3, r2
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80043d2:	4969      	ldr	r1, [pc, #420]	; (8004578 <HAL_OSPIM_Config+0x9d8>)
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	3b01      	subs	r3, #1
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	440b      	add	r3, r1
 80043e6:	605a      	str	r2, [r3, #4]
 80043e8:	e0a7      	b.n	800453a <HAL_OSPIM_Config+0x99a>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80043ea:	4a63      	ldr	r2, [pc, #396]	; (8004578 <HAL_OSPIM_Config+0x9d8>)
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3b01      	subs	r3, #1
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	4413      	add	r3, r2
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f023 0203 	bic.w	r2, r3, #3
 80043fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043fe:	005b      	lsls	r3, r3, #1
 8004400:	431a      	orrs	r2, r3
 8004402:	495d      	ldr	r1, [pc, #372]	; (8004578 <HAL_OSPIM_Config+0x9d8>)
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3b01      	subs	r3, #1
 800440a:	f042 0201 	orr.w	r2, r2, #1
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	440b      	add	r3, r1
 8004412:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d014      	beq.n	8004446 <HAL_OSPIM_Config+0x8a6>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800441c:	4a56      	ldr	r2, [pc, #344]	; (8004578 <HAL_OSPIM_Config+0x9d8>)
 800441e:	68bb      	ldr	r3, [r7, #8]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	3b01      	subs	r3, #1
 8004424:	009b      	lsls	r3, r3, #2
 8004426:	4413      	add	r3, r2
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800442e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004430:	015b      	lsls	r3, r3, #5
 8004432:	431a      	orrs	r2, r3
 8004434:	4950      	ldr	r1, [pc, #320]	; (8004578 <HAL_OSPIM_Config+0x9d8>)
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	3b01      	subs	r3, #1
 800443c:	f042 0210 	orr.w	r2, r2, #16
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	440b      	add	r3, r1
 8004444:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d019      	beq.n	8004486 <HAL_OSPIM_Config+0x8e6>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004452:	4a49      	ldr	r2, [pc, #292]	; (8004578 <HAL_OSPIM_Config+0x9d8>)
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	3b01      	subs	r3, #1
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	009b      	lsls	r3, r3, #2
 8004460:	4413      	add	r3, r2
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800446a:	049b      	lsls	r3, r3, #18
 800446c:	431a      	orrs	r2, r3
 800446e:	4942      	ldr	r1, [pc, #264]	; (8004578 <HAL_OSPIM_Config+0x9d8>)
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	3b01      	subs	r3, #1
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	440b      	add	r3, r1
 8004482:	605a      	str	r2, [r3, #4]
 8004484:	e01c      	b.n	80044c0 <HAL_OSPIM_Config+0x920>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d018      	beq.n	80044c0 <HAL_OSPIM_Config+0x920>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800448e:	4a3a      	ldr	r2, [pc, #232]	; (8004578 <HAL_OSPIM_Config+0x9d8>)
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	3b01      	subs	r3, #1
 8004496:	f003 0301 	and.w	r3, r3, #1
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80044a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044a6:	069b      	lsls	r3, r3, #26
 80044a8:	431a      	orrs	r2, r3
 80044aa:	4933      	ldr	r1, [pc, #204]	; (8004578 <HAL_OSPIM_Config+0x9d8>)
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	3b01      	subs	r3, #1
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	691b      	ldr	r3, [r3, #16]
 80044c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d019      	beq.n	8004500 <HAL_OSPIM_Config+0x960>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80044cc:	4a2a      	ldr	r2, [pc, #168]	; (8004578 <HAL_OSPIM_Config+0x9d8>)
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	3b01      	subs	r3, #1
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	4413      	add	r3, r2
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80044e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044e4:	049b      	lsls	r3, r3, #18
 80044e6:	431a      	orrs	r2, r3
 80044e8:	4923      	ldr	r1, [pc, #140]	; (8004578 <HAL_OSPIM_Config+0x9d8>)
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	3b01      	subs	r3, #1
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	440b      	add	r3, r1
 80044fc:	605a      	str	r2, [r3, #4]
 80044fe:	e01c      	b.n	800453a <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d018      	beq.n	800453a <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004508:	4a1b      	ldr	r2, [pc, #108]	; (8004578 <HAL_OSPIM_Config+0x9d8>)
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	691b      	ldr	r3, [r3, #16]
 800450e:	3b01      	subs	r3, #1
 8004510:	f003 0301 	and.w	r3, r3, #1
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	4413      	add	r3, r2
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800451e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004520:	069b      	lsls	r3, r3, #26
 8004522:	431a      	orrs	r2, r3
 8004524:	4914      	ldr	r1, [pc, #80]	; (8004578 <HAL_OSPIM_Config+0x9d8>)
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	3b01      	subs	r3, #1
 800452c:	f003 0301 	and.w	r3, r3, #1
 8004530:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8004534:	009b      	lsls	r3, r3, #2
 8004536:	440b      	add	r3, r1
 8004538:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800453a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d005      	beq.n	8004552 <HAL_OSPIM_Config+0x9b2>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004546:	4b0d      	ldr	r3, [pc, #52]	; (800457c <HAL_OSPIM_Config+0x9dc>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a0c      	ldr	r2, [pc, #48]	; (800457c <HAL_OSPIM_Config+0x9dc>)
 800454c:	f043 0301 	orr.w	r3, r3, #1
 8004550:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8004552:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	2b00      	cmp	r3, #0
 800455c:	d005      	beq.n	800456a <HAL_OSPIM_Config+0x9ca>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800455e:	4b08      	ldr	r3, [pc, #32]	; (8004580 <HAL_OSPIM_Config+0x9e0>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a07      	ldr	r2, [pc, #28]	; (8004580 <HAL_OSPIM_Config+0x9e0>)
 8004564:	f043 0301 	orr.w	r3, r3, #1
 8004568:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800456a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800456e:	4618      	mov	r0, r3
 8004570:	3750      	adds	r7, #80	; 0x50
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	420c4000 	.word	0x420c4000
 800457c:	420d1400 	.word	0x420d1400
 8004580:	420d2400 	.word	0x420d2400

08004584 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	603b      	str	r3, [r7, #0]
 8004590:	4613      	mov	r3, r2
 8004592:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004594:	e022      	b.n	80045dc <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800459c:	d01e      	beq.n	80045dc <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800459e:	f7fe fb41 	bl	8002c24 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	429a      	cmp	r2, r3
 80045ac:	d302      	bcc.n	80045b4 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d113      	bne.n	80045dc <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6a1a      	ldr	r2, [r3, #32]
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	401a      	ands	r2, r3
 80045be:	79fb      	ldrb	r3, [r7, #7]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d00b      	beq.n	80045dc <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045ca:	651a      	str	r2, [r3, #80]	; 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d0:	f043 0201 	orr.w	r2, r3, #1
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	655a      	str	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e00e      	b.n	80045fa <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	6a1a      	ldr	r2, [r3, #32]
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	4013      	ands	r3, r2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	bf14      	ite	ne
 80045ea:	2301      	movne	r3, #1
 80045ec:	2300      	moveq	r3, #0
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	461a      	mov	r2, r3
 80045f2:	79fb      	ldrb	r3, [r7, #7]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d1ce      	bne.n	8004596 <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
	...

08004604 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
 800460a:	4603      	mov	r3, r0
 800460c:	6039      	str	r1, [r7, #0]
 800460e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8004610:	2300      	movs	r3, #0
 8004612:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8004614:	2300      	movs	r3, #0
 8004616:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8004618:	79fb      	ldrb	r3, [r7, #7]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d005      	beq.n	800462a <OSPIM_GetConfig+0x26>
 800461e:	79fb      	ldrb	r3, [r7, #7]
 8004620:	2b02      	cmp	r3, #2
 8004622:	d802      	bhi.n	800462a <OSPIM_GetConfig+0x26>
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d102      	bne.n	8004630 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	75fb      	strb	r3, [r7, #23]
 800462e:	e098      	b.n	8004762 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	2200      	movs	r2, #0
 8004634:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	2200      	movs	r2, #0
 800463a:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	2200      	movs	r2, #0
 8004640:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	2200      	movs	r2, #0
 8004646:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	2200      	movs	r2, #0
 800464c:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800464e:	79fb      	ldrb	r3, [r7, #7]
 8004650:	2b02      	cmp	r3, #2
 8004652:	d10b      	bne.n	800466c <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8004654:	4b46      	ldr	r3, [pc, #280]	; (8004770 <OSPIM_GetConfig+0x16c>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	2b00      	cmp	r3, #0
 800465e:	d102      	bne.n	8004666 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8004660:	4b44      	ldr	r3, [pc, #272]	; (8004774 <OSPIM_GetConfig+0x170>)
 8004662:	613b      	str	r3, [r7, #16]
 8004664:	e002      	b.n	800466c <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8004666:	f44f 7300 	mov.w	r3, #512	; 0x200
 800466a:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800466c:	2300      	movs	r3, #0
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	e074      	b.n	800475c <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8004672:	4a3f      	ldr	r2, [pc, #252]	; (8004770 <OSPIM_GetConfig+0x16c>)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	4413      	add	r3, r2
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00a      	beq.n	800469e <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8004688:	68ba      	ldr	r2, [r7, #8]
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	4053      	eors	r3, r2
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d103      	bne.n	800469e <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	1c5a      	adds	r2, r3, #1
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	f003 0310 	and.w	r3, r3, #16
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00a      	beq.n	80046be <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	4053      	eors	r3, r2
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d103      	bne.n	80046be <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	1c5a      	adds	r2, r3, #1
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00a      	beq.n	80046de <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80046c8:	68ba      	ldr	r2, [r7, #8]
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	4053      	eors	r3, r2
 80046ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d103      	bne.n	80046de <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d018      	beq.n	800471a <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	4053      	eors	r3, r2
 80046ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d111      	bne.n	800471a <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d106      	bne.n	800470e <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	3301      	adds	r3, #1
 8004704:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	60da      	str	r2, [r3, #12]
 800470c:	e005      	b.n	800471a <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	3301      	adds	r3, #1
 8004712:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d018      	beq.n	8004756 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	4053      	eors	r3, r2
 800472a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d111      	bne.n	8004756 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004738:	2b00      	cmp	r3, #0
 800473a:	d106      	bne.n	800474a <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	3301      	adds	r3, #1
 8004740:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	611a      	str	r2, [r3, #16]
 8004748:	e005      	b.n	8004756 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	3301      	adds	r3, #1
 800474e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	3301      	adds	r3, #1
 800475a:	60fb      	str	r3, [r7, #12]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d987      	bls.n	8004672 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8004762:	7dfb      	ldrb	r3, [r7, #23]
}
 8004764:	4618      	mov	r0, r3
 8004766:	371c      	adds	r7, #28
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr
 8004770:	420c4000 	.word	0x420c4000
 8004774:	04040222 	.word	0x04040222

08004778 <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f042 0202 	orr.w	r2, r2, #2
 8004794:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2208      	movs	r2, #8
 800479a:	651a      	str	r2, [r3, #80]	; 0x50

  if (hospi->Instance == OCTOSPI1)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a15      	ldr	r2, [pc, #84]	; (80047f8 <HAL_OSPI_DLYB_SetConfig+0x80>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d109      	bne.n	80047ba <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 80047a6:	4815      	ldr	r0, [pc, #84]	; (80047fc <HAL_OSPI_DLYB_SetConfig+0x84>)
 80047a8:	f7ff f8aa 	bl	8003900 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 80047ac:	6839      	ldr	r1, [r7, #0]
 80047ae:	4813      	ldr	r0, [pc, #76]	; (80047fc <HAL_OSPI_DLYB_SetConfig+0x84>)
 80047b0:	f006 fa5e 	bl	800ac70 <LL_DLYB_SetDelay>
    status = HAL_OK;
 80047b4:	2300      	movs	r3, #0
 80047b6:	73fb      	strb	r3, [r7, #15]
 80047b8:	e00d      	b.n	80047d6 <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

  else if (hospi->Instance == OCTOSPI2)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a10      	ldr	r2, [pc, #64]	; (8004800 <HAL_OSPI_DLYB_SetConfig+0x88>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d108      	bne.n	80047d6 <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 80047c4:	480f      	ldr	r0, [pc, #60]	; (8004804 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 80047c6:	f7ff f89b 	bl	8003900 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 80047ca:	6839      	ldr	r1, [r7, #0]
 80047cc:	480d      	ldr	r0, [pc, #52]	; (8004804 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 80047ce:	f006 fa4f 	bl	800ac70 <LL_DLYB_SetDelay>
    status = HAL_OK;
 80047d2:	2300      	movs	r3, #0
 80047d4:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f7ff f95e 	bl	8003a98 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	689a      	ldr	r2, [r3, #8]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f022 0202 	bic.w	r2, r2, #2
 80047ea:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3710      	adds	r7, #16
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
 80047f6:	bf00      	nop
 80047f8:	420d1400 	.word	0x420d1400
 80047fc:	420cf000 	.word	0x420cf000
 8004800:	420d2400 	.word	0x420d2400
 8004804:	420cf400 	.word	0x420cf400

08004808 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004808:	b5f0      	push	{r4, r5, r6, r7, lr}
 800480a:	b08f      	sub	sp, #60	; 0x3c
 800480c:	af0a      	add	r7, sp, #40	; 0x28
 800480e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d101      	bne.n	800481a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	e116      	b.n	8004a48 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b00      	cmp	r3, #0
 800482a:	d106      	bne.n	800483a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f7fe f85b 	bl	80028f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2203      	movs	r2, #3
 800483e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800484a:	2b00      	cmp	r3, #0
 800484c:	d102      	bne.n	8004854 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4618      	mov	r0, r3
 800485a:	f006 fc25 	bl	800b0a8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	603b      	str	r3, [r7, #0]
 8004864:	687e      	ldr	r6, [r7, #4]
 8004866:	466d      	mov	r5, sp
 8004868:	f106 0410 	add.w	r4, r6, #16
 800486c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800486e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004870:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004872:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004874:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004878:	e885 0003 	stmia.w	r5, {r0, r1}
 800487c:	1d33      	adds	r3, r6, #4
 800487e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004880:	6838      	ldr	r0, [r7, #0]
 8004882:	f006 fbe5 	bl	800b050 <USB_CoreInit>
 8004886:	4603      	mov	r3, r0
 8004888:	2b00      	cmp	r3, #0
 800488a:	d005      	beq.n	8004898 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2202      	movs	r2, #2
 8004890:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e0d7      	b.n	8004a48 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	2100      	movs	r1, #0
 800489e:	4618      	mov	r0, r3
 80048a0:	f006 fc13 	bl	800b0ca <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048a4:	2300      	movs	r3, #0
 80048a6:	73fb      	strb	r3, [r7, #15]
 80048a8:	e04a      	b.n	8004940 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80048aa:	7bfa      	ldrb	r2, [r7, #15]
 80048ac:	6879      	ldr	r1, [r7, #4]
 80048ae:	4613      	mov	r3, r2
 80048b0:	00db      	lsls	r3, r3, #3
 80048b2:	4413      	add	r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	440b      	add	r3, r1
 80048b8:	333d      	adds	r3, #61	; 0x3d
 80048ba:	2201      	movs	r2, #1
 80048bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80048be:	7bfa      	ldrb	r2, [r7, #15]
 80048c0:	6879      	ldr	r1, [r7, #4]
 80048c2:	4613      	mov	r3, r2
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	4413      	add	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	440b      	add	r3, r1
 80048cc:	333c      	adds	r3, #60	; 0x3c
 80048ce:	7bfa      	ldrb	r2, [r7, #15]
 80048d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80048d2:	7bfa      	ldrb	r2, [r7, #15]
 80048d4:	7bfb      	ldrb	r3, [r7, #15]
 80048d6:	b298      	uxth	r0, r3
 80048d8:	6879      	ldr	r1, [r7, #4]
 80048da:	4613      	mov	r3, r2
 80048dc:	00db      	lsls	r3, r3, #3
 80048de:	4413      	add	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	440b      	add	r3, r1
 80048e4:	3344      	adds	r3, #68	; 0x44
 80048e6:	4602      	mov	r2, r0
 80048e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80048ea:	7bfa      	ldrb	r2, [r7, #15]
 80048ec:	6879      	ldr	r1, [r7, #4]
 80048ee:	4613      	mov	r3, r2
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	4413      	add	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	440b      	add	r3, r1
 80048f8:	3340      	adds	r3, #64	; 0x40
 80048fa:	2200      	movs	r2, #0
 80048fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80048fe:	7bfa      	ldrb	r2, [r7, #15]
 8004900:	6879      	ldr	r1, [r7, #4]
 8004902:	4613      	mov	r3, r2
 8004904:	00db      	lsls	r3, r3, #3
 8004906:	4413      	add	r3, r2
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	440b      	add	r3, r1
 800490c:	3348      	adds	r3, #72	; 0x48
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004912:	7bfa      	ldrb	r2, [r7, #15]
 8004914:	6879      	ldr	r1, [r7, #4]
 8004916:	4613      	mov	r3, r2
 8004918:	00db      	lsls	r3, r3, #3
 800491a:	4413      	add	r3, r2
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	440b      	add	r3, r1
 8004920:	334c      	adds	r3, #76	; 0x4c
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004926:	7bfa      	ldrb	r2, [r7, #15]
 8004928:	6879      	ldr	r1, [r7, #4]
 800492a:	4613      	mov	r3, r2
 800492c:	00db      	lsls	r3, r3, #3
 800492e:	4413      	add	r3, r2
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	440b      	add	r3, r1
 8004934:	3354      	adds	r3, #84	; 0x54
 8004936:	2200      	movs	r2, #0
 8004938:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800493a:	7bfb      	ldrb	r3, [r7, #15]
 800493c:	3301      	adds	r3, #1
 800493e:	73fb      	strb	r3, [r7, #15]
 8004940:	7bfa      	ldrb	r2, [r7, #15]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	429a      	cmp	r2, r3
 8004948:	d3af      	bcc.n	80048aa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800494a:	2300      	movs	r3, #0
 800494c:	73fb      	strb	r3, [r7, #15]
 800494e:	e044      	b.n	80049da <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004950:	7bfa      	ldrb	r2, [r7, #15]
 8004952:	6879      	ldr	r1, [r7, #4]
 8004954:	4613      	mov	r3, r2
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	4413      	add	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	440b      	add	r3, r1
 800495e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004962:	2200      	movs	r2, #0
 8004964:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004966:	7bfa      	ldrb	r2, [r7, #15]
 8004968:	6879      	ldr	r1, [r7, #4]
 800496a:	4613      	mov	r3, r2
 800496c:	00db      	lsls	r3, r3, #3
 800496e:	4413      	add	r3, r2
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	440b      	add	r3, r1
 8004974:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004978:	7bfa      	ldrb	r2, [r7, #15]
 800497a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800497c:	7bfa      	ldrb	r2, [r7, #15]
 800497e:	6879      	ldr	r1, [r7, #4]
 8004980:	4613      	mov	r3, r2
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	4413      	add	r3, r2
 8004986:	009b      	lsls	r3, r3, #2
 8004988:	440b      	add	r3, r1
 800498a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800498e:	2200      	movs	r2, #0
 8004990:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004992:	7bfa      	ldrb	r2, [r7, #15]
 8004994:	6879      	ldr	r1, [r7, #4]
 8004996:	4613      	mov	r3, r2
 8004998:	00db      	lsls	r3, r3, #3
 800499a:	4413      	add	r3, r2
 800499c:	009b      	lsls	r3, r3, #2
 800499e:	440b      	add	r3, r1
 80049a0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80049a4:	2200      	movs	r2, #0
 80049a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80049a8:	7bfa      	ldrb	r2, [r7, #15]
 80049aa:	6879      	ldr	r1, [r7, #4]
 80049ac:	4613      	mov	r3, r2
 80049ae:	00db      	lsls	r3, r3, #3
 80049b0:	4413      	add	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	440b      	add	r3, r1
 80049b6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80049ba:	2200      	movs	r2, #0
 80049bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80049be:	7bfa      	ldrb	r2, [r7, #15]
 80049c0:	6879      	ldr	r1, [r7, #4]
 80049c2:	4613      	mov	r3, r2
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	4413      	add	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	440b      	add	r3, r1
 80049cc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
 80049d6:	3301      	adds	r3, #1
 80049d8:	73fb      	strb	r3, [r7, #15]
 80049da:	7bfa      	ldrb	r2, [r7, #15]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d3b5      	bcc.n	8004950 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	603b      	str	r3, [r7, #0]
 80049ea:	687e      	ldr	r6, [r7, #4]
 80049ec:	466d      	mov	r5, sp
 80049ee:	f106 0410 	add.w	r4, r6, #16
 80049f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80049fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8004a02:	1d33      	adds	r3, r6, #4
 8004a04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a06:	6838      	ldr	r0, [r7, #0]
 8004a08:	f006 fbac 	bl	800b164 <USB_DevInit>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d005      	beq.n	8004a1e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2202      	movs	r2, #2
 8004a16:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e014      	b.n	8004a48 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d102      	bne.n	8004a3c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f80a 	bl	8004a50 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4618      	mov	r0, r3
 8004a42:	f006 fd5a 	bl	800b4fa <USB_DevDisconnect>

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a50 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	699b      	ldr	r3, [r3, #24]
 8004a72:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a82:	f043 0303 	orr.w	r3, r3, #3
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr

08004a98 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b085      	sub	sp, #20
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004aa0:	4b34      	ldr	r3, [pc, #208]	; (8004b74 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004aa8:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d101      	bne.n	8004ab6 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	e057      	b.n	8004b66 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004abc:	d90a      	bls.n	8004ad4 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004abe:	4b2d      	ldr	r3, [pc, #180]	; (8004b74 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	4a2a      	ldr	r2, [pc, #168]	; (8004b74 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ad0:	60d3      	str	r3, [r2, #12]
 8004ad2:	e007      	b.n	8004ae4 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004ad4:	4b27      	ldr	r3, [pc, #156]	; (8004b74 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004adc:	4925      	ldr	r1, [pc, #148]	; (8004b74 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004ae4:	4b24      	ldr	r3, [pc, #144]	; (8004b78 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a24      	ldr	r2, [pc, #144]	; (8004b7c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004aea:	fba2 2303 	umull	r2, r3, r2, r3
 8004aee:	099b      	lsrs	r3, r3, #6
 8004af0:	2232      	movs	r2, #50	; 0x32
 8004af2:	fb02 f303 	mul.w	r3, r2, r3
 8004af6:	4a21      	ldr	r2, [pc, #132]	; (8004b7c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004af8:	fba2 2303 	umull	r2, r3, r2, r3
 8004afc:	099b      	lsrs	r3, r3, #6
 8004afe:	3301      	adds	r3, #1
 8004b00:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004b02:	e002      	b.n	8004b0a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004b0a:	4b1a      	ldr	r3, [pc, #104]	; (8004b74 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d102      	bne.n	8004b1c <HAL_PWREx_ControlVoltageScaling+0x84>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1f3      	bne.n	8004b04 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d01b      	beq.n	8004b5a <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004b22:	4b15      	ldr	r3, [pc, #84]	; (8004b78 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a15      	ldr	r2, [pc, #84]	; (8004b7c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004b28:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2c:	099b      	lsrs	r3, r3, #6
 8004b2e:	2232      	movs	r2, #50	; 0x32
 8004b30:	fb02 f303 	mul.w	r3, r2, r3
 8004b34:	4a11      	ldr	r2, [pc, #68]	; (8004b7c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004b36:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3a:	099b      	lsrs	r3, r3, #6
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004b40:	e002      	b.n	8004b48 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	3b01      	subs	r3, #1
 8004b46:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004b48:	4b0a      	ldr	r3, [pc, #40]	; (8004b74 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004b4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d102      	bne.n	8004b5a <HAL_PWREx_ControlVoltageScaling+0xc2>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1f3      	bne.n	8004b42 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e000      	b.n	8004b66 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3714      	adds	r7, #20
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	46020800 	.word	0x46020800
 8004b78:	20000000 	.word	0x20000000
 8004b7c:	10624dd3 	.word	0x10624dd3

08004b80 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004b84:	4b04      	ldr	r3, [pc, #16]	; (8004b98 <HAL_PWREx_GetVoltageRange+0x18>)
 8004b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	46020800 	.word	0x46020800

08004b9c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004ba4:	4b22      	ldr	r3, [pc, #136]	; (8004c30 <HAL_PWREx_ConfigSupply+0x94>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a22      	ldr	r2, [pc, #136]	; (8004c34 <HAL_PWREx_ConfigSupply+0x98>)
 8004baa:	fba2 2303 	umull	r2, r3, r2, r3
 8004bae:	099b      	lsrs	r3, r3, #6
 8004bb0:	2232      	movs	r2, #50	; 0x32
 8004bb2:	fb02 f303 	mul.w	r3, r2, r3
 8004bb6:	4a1f      	ldr	r2, [pc, #124]	; (8004c34 <HAL_PWREx_ConfigSupply+0x98>)
 8004bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bbc:	099b      	lsrs	r3, r3, #6
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d113      	bne.n	8004bf0 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004bc8:	4b1b      	ldr	r3, [pc, #108]	; (8004c38 <HAL_PWREx_ConfigSupply+0x9c>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	4a1a      	ldr	r2, [pc, #104]	; (8004c38 <HAL_PWREx_ConfigSupply+0x9c>)
 8004bce:	f023 0302 	bic.w	r3, r3, #2
 8004bd2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004bd4:	e002      	b.n	8004bdc <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004bdc:	4b16      	ldr	r3, [pc, #88]	; (8004c38 <HAL_PWREx_ConfigSupply+0x9c>)
 8004bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d116      	bne.n	8004c16 <HAL_PWREx_ConfigSupply+0x7a>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1f3      	bne.n	8004bd6 <HAL_PWREx_ConfigSupply+0x3a>
 8004bee:	e012      	b.n	8004c16 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004bf0:	4b11      	ldr	r3, [pc, #68]	; (8004c38 <HAL_PWREx_ConfigSupply+0x9c>)
 8004bf2:	689b      	ldr	r3, [r3, #8]
 8004bf4:	4a10      	ldr	r2, [pc, #64]	; (8004c38 <HAL_PWREx_ConfigSupply+0x9c>)
 8004bf6:	f043 0302 	orr.w	r3, r3, #2
 8004bfa:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004bfc:	e002      	b.n	8004c04 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	3b01      	subs	r3, #1
 8004c02:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004c04:	4b0c      	ldr	r3, [pc, #48]	; (8004c38 <HAL_PWREx_ConfigSupply+0x9c>)
 8004c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d102      	bne.n	8004c16 <HAL_PWREx_ConfigSupply+0x7a>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d1f3      	bne.n	8004bfe <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d101      	bne.n	8004c20 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e000      	b.n	8004c22 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3714      	adds	r7, #20
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	20000000 	.word	0x20000000
 8004c34:	10624dd3 	.word	0x10624dd3
 8004c38:	46020800 	.word	0x46020800

08004c3c <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8004c40:	4b05      	ldr	r3, [pc, #20]	; (8004c58 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	4a04      	ldr	r2, [pc, #16]	; (8004c58 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004c46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c4a:	6113      	str	r3, [r2, #16]
}
 8004c4c:	bf00      	nop
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	46020800 	.word	0x46020800

08004c5c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004c60:	4b05      	ldr	r3, [pc, #20]	; (8004c78 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	4a04      	ldr	r2, [pc, #16]	; (8004c78 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004c66:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c6a:	6113      	str	r3, [r2, #16]
}
 8004c6c:	bf00      	nop
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	46020800 	.word	0x46020800

08004c7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b08e      	sub	sp, #56	; 0x38
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004c84:	2300      	movs	r3, #0
 8004c86:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d102      	bne.n	8004c96 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	f000 bec3 	b.w	8005a1c <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c96:	4b9c      	ldr	r3, [pc, #624]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	f003 030c 	and.w	r3, r3, #12
 8004c9e:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ca0:	4b99      	ldr	r3, [pc, #612]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca4:	f003 0303 	and.w	r3, r3, #3
 8004ca8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0310 	and.w	r3, r3, #16
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	f000 8172 	beq.w	8004f9c <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d007      	beq.n	8004cce <HAL_RCC_OscConfig+0x52>
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc0:	2b0c      	cmp	r3, #12
 8004cc2:	f040 80e4 	bne.w	8004e8e <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	f040 80e0 	bne.w	8004e8e <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004cce:	4b8e      	ldr	r3, [pc, #568]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0304 	and.w	r3, r3, #4
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d006      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x6c>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d102      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	f000 be9a 	b.w	8005a1c <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cec:	4b86      	ldr	r3, [pc, #536]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d004      	beq.n	8004d02 <HAL_RCC_OscConfig+0x86>
 8004cf8:	4b83      	ldr	r3, [pc, #524]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004d00:	e005      	b.n	8004d0e <HAL_RCC_OscConfig+0x92>
 8004d02:	4b81      	ldr	r3, [pc, #516]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004d04:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004d08:	041b      	lsls	r3, r3, #16
 8004d0a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d255      	bcs.n	8004dbe <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10a      	bne.n	8004d2e <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f001 f9d3 	bl	80060c8 <RCC_SetFlashLatencyFromMSIRange>
 8004d22:	4603      	mov	r3, r0
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d002      	beq.n	8004d2e <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	f000 be77 	b.w	8005a1c <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004d2e:	4b76      	ldr	r3, [pc, #472]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	4a75      	ldr	r2, [pc, #468]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004d34:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004d38:	6093      	str	r3, [r2, #8]
 8004d3a:	4b73      	ldr	r3, [pc, #460]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	4970      	ldr	r1, [pc, #448]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d50:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004d54:	d309      	bcc.n	8004d6a <HAL_RCC_OscConfig+0xee>
 8004d56:	4b6c      	ldr	r3, [pc, #432]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	f023 021f 	bic.w	r2, r3, #31
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	4969      	ldr	r1, [pc, #420]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004d64:	4313      	orrs	r3, r2
 8004d66:	60cb      	str	r3, [r1, #12]
 8004d68:	e07e      	b.n	8004e68 <HAL_RCC_OscConfig+0x1ec>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	da0a      	bge.n	8004d88 <HAL_RCC_OscConfig+0x10c>
 8004d72:	4b65      	ldr	r3, [pc, #404]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	015b      	lsls	r3, r3, #5
 8004d80:	4961      	ldr	r1, [pc, #388]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60cb      	str	r3, [r1, #12]
 8004d86:	e06f      	b.n	8004e68 <HAL_RCC_OscConfig+0x1ec>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d90:	d30a      	bcc.n	8004da8 <HAL_RCC_OscConfig+0x12c>
 8004d92:	4b5d      	ldr	r3, [pc, #372]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1b      	ldr	r3, [r3, #32]
 8004d9e:	029b      	lsls	r3, r3, #10
 8004da0:	4959      	ldr	r1, [pc, #356]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	60cb      	str	r3, [r1, #12]
 8004da6:	e05f      	b.n	8004e68 <HAL_RCC_OscConfig+0x1ec>
 8004da8:	4b57      	ldr	r3, [pc, #348]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004daa:	68db      	ldr	r3, [r3, #12]
 8004dac:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6a1b      	ldr	r3, [r3, #32]
 8004db4:	03db      	lsls	r3, r3, #15
 8004db6:	4954      	ldr	r1, [pc, #336]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	60cb      	str	r3, [r1, #12]
 8004dbc:	e054      	b.n	8004e68 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004dbe:	4b52      	ldr	r3, [pc, #328]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	4a51      	ldr	r2, [pc, #324]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004dc4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004dc8:	6093      	str	r3, [r2, #8]
 8004dca:	4b4f      	ldr	r3, [pc, #316]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd6:	494c      	ldr	r1, [pc, #304]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004de4:	d309      	bcc.n	8004dfa <HAL_RCC_OscConfig+0x17e>
 8004de6:	4b48      	ldr	r3, [pc, #288]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f023 021f 	bic.w	r2, r3, #31
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a1b      	ldr	r3, [r3, #32]
 8004df2:	4945      	ldr	r1, [pc, #276]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	60cb      	str	r3, [r1, #12]
 8004df8:	e028      	b.n	8004e4c <HAL_RCC_OscConfig+0x1d0>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	da0a      	bge.n	8004e18 <HAL_RCC_OscConfig+0x19c>
 8004e02:	4b41      	ldr	r3, [pc, #260]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	015b      	lsls	r3, r3, #5
 8004e10:	493d      	ldr	r1, [pc, #244]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	60cb      	str	r3, [r1, #12]
 8004e16:	e019      	b.n	8004e4c <HAL_RCC_OscConfig+0x1d0>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e20:	d30a      	bcc.n	8004e38 <HAL_RCC_OscConfig+0x1bc>
 8004e22:	4b39      	ldr	r3, [pc, #228]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a1b      	ldr	r3, [r3, #32]
 8004e2e:	029b      	lsls	r3, r3, #10
 8004e30:	4935      	ldr	r1, [pc, #212]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	60cb      	str	r3, [r1, #12]
 8004e36:	e009      	b.n	8004e4c <HAL_RCC_OscConfig+0x1d0>
 8004e38:	4b33      	ldr	r3, [pc, #204]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	03db      	lsls	r3, r3, #15
 8004e46:	4930      	ldr	r1, [pc, #192]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10a      	bne.n	8004e68 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e56:	4618      	mov	r0, r3
 8004e58:	f001 f936 	bl	80060c8 <RCC_SetFlashLatencyFromMSIRange>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d002      	beq.n	8004e68 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	f000 bdda 	b.w	8005a1c <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004e68:	f001 f8d8 	bl	800601c <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004e6c:	4b27      	ldr	r3, [pc, #156]	; (8004f0c <HAL_RCC_OscConfig+0x290>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7fd fe8d 	bl	8002b90 <HAL_InitTick>
 8004e76:	4603      	mov	r3, r0
 8004e78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8004e7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 808a 	beq.w	8004f9a <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8004e86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e8a:	f000 bdc7 	b.w	8005a1c <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	69db      	ldr	r3, [r3, #28]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d066      	beq.n	8004f64 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004e96:	4b1c      	ldr	r3, [pc, #112]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a1b      	ldr	r2, [pc, #108]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004e9c:	f043 0301 	orr.w	r3, r3, #1
 8004ea0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004ea2:	f7fd febf 	bl	8002c24 <HAL_GetTick>
 8004ea6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004ea8:	e009      	b.n	8004ebe <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004eaa:	f7fd febb 	bl	8002c24 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d902      	bls.n	8004ebe <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	f000 bdaf 	b.w	8005a1c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004ebe:	4b12      	ldr	r3, [pc, #72]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0304 	and.w	r3, r3, #4
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0ef      	beq.n	8004eaa <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004eca:	4b0f      	ldr	r3, [pc, #60]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	4a0e      	ldr	r2, [pc, #56]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004ed0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ed4:	6093      	str	r3, [r2, #8]
 8004ed6:	4b0c      	ldr	r3, [pc, #48]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	4909      	ldr	r1, [pc, #36]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eec:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004ef0:	d30e      	bcc.n	8004f10 <HAL_RCC_OscConfig+0x294>
 8004ef2:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	f023 021f 	bic.w	r2, r3, #31
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	4902      	ldr	r1, [pc, #8]	; (8004f08 <HAL_RCC_OscConfig+0x28c>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	60cb      	str	r3, [r1, #12]
 8004f04:	e04a      	b.n	8004f9c <HAL_RCC_OscConfig+0x320>
 8004f06:	bf00      	nop
 8004f08:	46020c00 	.word	0x46020c00
 8004f0c:	20000004 	.word	0x20000004
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	da0a      	bge.n	8004f2e <HAL_RCC_OscConfig+0x2b2>
 8004f18:	4b9b      	ldr	r3, [pc, #620]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a1b      	ldr	r3, [r3, #32]
 8004f24:	015b      	lsls	r3, r3, #5
 8004f26:	4998      	ldr	r1, [pc, #608]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	60cb      	str	r3, [r1, #12]
 8004f2c:	e036      	b.n	8004f9c <HAL_RCC_OscConfig+0x320>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f36:	d30a      	bcc.n	8004f4e <HAL_RCC_OscConfig+0x2d2>
 8004f38:	4b93      	ldr	r3, [pc, #588]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	029b      	lsls	r3, r3, #10
 8004f46:	4990      	ldr	r1, [pc, #576]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	60cb      	str	r3, [r1, #12]
 8004f4c:	e026      	b.n	8004f9c <HAL_RCC_OscConfig+0x320>
 8004f4e:	4b8e      	ldr	r3, [pc, #568]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	03db      	lsls	r3, r3, #15
 8004f5c:	498a      	ldr	r1, [pc, #552]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	60cb      	str	r3, [r1, #12]
 8004f62:	e01b      	b.n	8004f9c <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004f64:	4b88      	ldr	r3, [pc, #544]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a87      	ldr	r2, [pc, #540]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 8004f6a:	f023 0301 	bic.w	r3, r3, #1
 8004f6e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004f70:	f7fd fe58 	bl	8002c24 <HAL_GetTick>
 8004f74:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004f76:	e009      	b.n	8004f8c <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f78:	f7fd fe54 	bl	8002c24 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d902      	bls.n	8004f8c <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	f000 bd48 	b.w	8005a1c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004f8c:	4b7e      	ldr	r3, [pc, #504]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0304 	and.w	r3, r3, #4
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d1ef      	bne.n	8004f78 <HAL_RCC_OscConfig+0x2fc>
 8004f98:	e000      	b.n	8004f9c <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f9a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0301 	and.w	r3, r3, #1
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	f000 8094 	beq.w	80050d2 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d005      	beq.n	8004fbc <HAL_RCC_OscConfig+0x340>
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb2:	2b0c      	cmp	r3, #12
 8004fb4:	d110      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fb8:	2b03      	cmp	r3, #3
 8004fba:	d10d      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fbc:	4b72      	ldr	r3, [pc, #456]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 8083 	beq.w	80050d0 <HAL_RCC_OscConfig+0x454>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d17e      	bne.n	80050d0 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	f000 bd22 	b.w	8005a1c <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fe0:	d106      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x374>
 8004fe2:	4b69      	ldr	r3, [pc, #420]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a68      	ldr	r2, [pc, #416]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 8004fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fec:	6013      	str	r3, [r2, #0]
 8004fee:	e041      	b.n	8005074 <HAL_RCC_OscConfig+0x3f8>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ff8:	d112      	bne.n	8005020 <HAL_RCC_OscConfig+0x3a4>
 8004ffa:	4b63      	ldr	r3, [pc, #396]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4a62      	ldr	r2, [pc, #392]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 8005000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005004:	6013      	str	r3, [r2, #0]
 8005006:	4b60      	ldr	r3, [pc, #384]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a5f      	ldr	r2, [pc, #380]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 800500c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005010:	6013      	str	r3, [r2, #0]
 8005012:	4b5d      	ldr	r3, [pc, #372]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a5c      	ldr	r2, [pc, #368]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 8005018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	e029      	b.n	8005074 <HAL_RCC_OscConfig+0x3f8>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8005028:	d112      	bne.n	8005050 <HAL_RCC_OscConfig+0x3d4>
 800502a:	4b57      	ldr	r3, [pc, #348]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a56      	ldr	r2, [pc, #344]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 8005030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005034:	6013      	str	r3, [r2, #0]
 8005036:	4b54      	ldr	r3, [pc, #336]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a53      	ldr	r2, [pc, #332]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 800503c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005040:	6013      	str	r3, [r2, #0]
 8005042:	4b51      	ldr	r3, [pc, #324]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a50      	ldr	r2, [pc, #320]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 8005048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800504c:	6013      	str	r3, [r2, #0]
 800504e:	e011      	b.n	8005074 <HAL_RCC_OscConfig+0x3f8>
 8005050:	4b4d      	ldr	r3, [pc, #308]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a4c      	ldr	r2, [pc, #304]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 8005056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800505a:	6013      	str	r3, [r2, #0]
 800505c:	4b4a      	ldr	r3, [pc, #296]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a49      	ldr	r2, [pc, #292]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 8005062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005066:	6013      	str	r3, [r2, #0]
 8005068:	4b47      	ldr	r3, [pc, #284]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a46      	ldr	r2, [pc, #280]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 800506e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005072:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d014      	beq.n	80050a6 <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 800507c:	f7fd fdd2 	bl	8002c24 <HAL_GetTick>
 8005080:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005082:	e009      	b.n	8005098 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005084:	f7fd fdce 	bl	8002c24 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b64      	cmp	r3, #100	; 0x64
 8005090:	d902      	bls.n	8005098 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	f000 bcc2 	b.w	8005a1c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005098:	4b3b      	ldr	r3, [pc, #236]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d0ef      	beq.n	8005084 <HAL_RCC_OscConfig+0x408>
 80050a4:	e015      	b.n	80050d2 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80050a6:	f7fd fdbd 	bl	8002c24 <HAL_GetTick>
 80050aa:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050ac:	e009      	b.n	80050c2 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80050ae:	f7fd fdb9 	bl	8002c24 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b64      	cmp	r3, #100	; 0x64
 80050ba:	d902      	bls.n	80050c2 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	f000 bcad 	b.w	8005a1c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80050c2:	4b31      	ldr	r3, [pc, #196]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1ef      	bne.n	80050ae <HAL_RCC_OscConfig+0x432>
 80050ce:	e000      	b.n	80050d2 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0302 	and.w	r3, r3, #2
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d066      	beq.n	80051ac <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80050de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	d005      	beq.n	80050f0 <HAL_RCC_OscConfig+0x474>
 80050e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e6:	2b0c      	cmp	r3, #12
 80050e8:	d11a      	bne.n	8005120 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80050ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d117      	bne.n	8005120 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050f0:	4b25      	ldr	r3, [pc, #148]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d006      	beq.n	800510a <HAL_RCC_OscConfig+0x48e>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d102      	bne.n	800510a <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	f000 bc89 	b.w	8005a1c <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800510a:	4b1f      	ldr	r3, [pc, #124]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	691b      	ldr	r3, [r3, #16]
 8005116:	041b      	lsls	r3, r3, #16
 8005118:	491b      	ldr	r1, [pc, #108]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 800511a:	4313      	orrs	r3, r2
 800511c:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800511e:	e045      	b.n	80051ac <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68db      	ldr	r3, [r3, #12]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d024      	beq.n	8005172 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8005128:	4b17      	ldr	r3, [pc, #92]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a16      	ldr	r2, [pc, #88]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 800512e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005132:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005134:	f7fd fd76 	bl	8002c24 <HAL_GetTick>
 8005138:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800513a:	e009      	b.n	8005150 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800513c:	f7fd fd72 	bl	8002c24 <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b02      	cmp	r3, #2
 8005148:	d902      	bls.n	8005150 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	f000 bc66 	b.w	8005a1c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005150:	4b0d      	ldr	r3, [pc, #52]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005158:	2b00      	cmp	r3, #0
 800515a:	d0ef      	beq.n	800513c <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800515c:	4b0a      	ldr	r3, [pc, #40]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 800515e:	691b      	ldr	r3, [r3, #16]
 8005160:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	691b      	ldr	r3, [r3, #16]
 8005168:	041b      	lsls	r3, r3, #16
 800516a:	4907      	ldr	r1, [pc, #28]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 800516c:	4313      	orrs	r3, r2
 800516e:	610b      	str	r3, [r1, #16]
 8005170:	e01c      	b.n	80051ac <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8005172:	4b05      	ldr	r3, [pc, #20]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a04      	ldr	r2, [pc, #16]	; (8005188 <HAL_RCC_OscConfig+0x50c>)
 8005178:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800517c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800517e:	f7fd fd51 	bl	8002c24 <HAL_GetTick>
 8005182:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005184:	e00c      	b.n	80051a0 <HAL_RCC_OscConfig+0x524>
 8005186:	bf00      	nop
 8005188:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800518c:	f7fd fd4a 	bl	8002c24 <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d902      	bls.n	80051a0 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	f000 bc3e 	b.w	8005a1c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80051a0:	4baf      	ldr	r3, [pc, #700]	; (8005460 <HAL_RCC_OscConfig+0x7e4>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1ef      	bne.n	800518c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0308 	and.w	r3, r3, #8
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f000 80c7 	beq.w	8005348 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80051ba:	2300      	movs	r3, #0
 80051bc:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051c0:	4ba7      	ldr	r3, [pc, #668]	; (8005460 <HAL_RCC_OscConfig+0x7e4>)
 80051c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051c6:	f003 0304 	and.w	r3, r3, #4
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d111      	bne.n	80051f2 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051ce:	4ba4      	ldr	r3, [pc, #656]	; (8005460 <HAL_RCC_OscConfig+0x7e4>)
 80051d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051d4:	4aa2      	ldr	r2, [pc, #648]	; (8005460 <HAL_RCC_OscConfig+0x7e4>)
 80051d6:	f043 0304 	orr.w	r3, r3, #4
 80051da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80051de:	4ba0      	ldr	r3, [pc, #640]	; (8005460 <HAL_RCC_OscConfig+0x7e4>)
 80051e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051e4:	f003 0304 	and.w	r3, r3, #4
 80051e8:	617b      	str	r3, [r7, #20]
 80051ea:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80051ec:	2301      	movs	r3, #1
 80051ee:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80051f2:	4b9c      	ldr	r3, [pc, #624]	; (8005464 <HAL_RCC_OscConfig+0x7e8>)
 80051f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d118      	bne.n	8005230 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80051fe:	4b99      	ldr	r3, [pc, #612]	; (8005464 <HAL_RCC_OscConfig+0x7e8>)
 8005200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005202:	4a98      	ldr	r2, [pc, #608]	; (8005464 <HAL_RCC_OscConfig+0x7e8>)
 8005204:	f043 0301 	orr.w	r3, r3, #1
 8005208:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800520a:	f7fd fd0b 	bl	8002c24 <HAL_GetTick>
 800520e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005210:	e008      	b.n	8005224 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005212:	f7fd fd07 	bl	8002c24 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	2b02      	cmp	r3, #2
 800521e:	d901      	bls.n	8005224 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e3fb      	b.n	8005a1c <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005224:	4b8f      	ldr	r3, [pc, #572]	; (8005464 <HAL_RCC_OscConfig+0x7e8>)
 8005226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005228:	f003 0301 	and.w	r3, r3, #1
 800522c:	2b00      	cmp	r3, #0
 800522e:	d0f0      	beq.n	8005212 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	695b      	ldr	r3, [r3, #20]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d05f      	beq.n	80052f8 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8005238:	4b89      	ldr	r3, [pc, #548]	; (8005460 <HAL_RCC_OscConfig+0x7e4>)
 800523a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800523e:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	699a      	ldr	r2, [r3, #24]
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800524a:	429a      	cmp	r2, r3
 800524c:	d037      	beq.n	80052be <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d006      	beq.n	8005266 <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8005258:	6a3b      	ldr	r3, [r7, #32]
 800525a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e3da      	b.n	8005a1c <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8005266:	6a3b      	ldr	r3, [r7, #32]
 8005268:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800526c:	2b00      	cmp	r3, #0
 800526e:	d01b      	beq.n	80052a8 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8005270:	4b7b      	ldr	r3, [pc, #492]	; (8005460 <HAL_RCC_OscConfig+0x7e4>)
 8005272:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005276:	4a7a      	ldr	r2, [pc, #488]	; (8005460 <HAL_RCC_OscConfig+0x7e4>)
 8005278:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800527c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8005280:	f7fd fcd0 	bl	8002c24 <HAL_GetTick>
 8005284:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005286:	e008      	b.n	800529a <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005288:	f7fd fccc 	bl	8002c24 <HAL_GetTick>
 800528c:	4602      	mov	r2, r0
 800528e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005290:	1ad3      	subs	r3, r2, r3
 8005292:	2b02      	cmp	r3, #2
 8005294:	d901      	bls.n	800529a <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e3c0      	b.n	8005a1c <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800529a:	4b71      	ldr	r3, [pc, #452]	; (8005460 <HAL_RCC_OscConfig+0x7e4>)
 800529c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d1ef      	bne.n	8005288 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80052a8:	4b6d      	ldr	r3, [pc, #436]	; (8005460 <HAL_RCC_OscConfig+0x7e4>)
 80052aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	699b      	ldr	r3, [r3, #24]
 80052b6:	496a      	ldr	r1, [pc, #424]	; (8005460 <HAL_RCC_OscConfig+0x7e4>)
 80052b8:	4313      	orrs	r3, r2
 80052ba:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80052be:	4b68      	ldr	r3, [pc, #416]	; (8005460 <HAL_RCC_OscConfig+0x7e4>)
 80052c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052c4:	4a66      	ldr	r2, [pc, #408]	; (8005460 <HAL_RCC_OscConfig+0x7e4>)
 80052c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80052ce:	f7fd fca9 	bl	8002c24 <HAL_GetTick>
 80052d2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80052d4:	e008      	b.n	80052e8 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052d6:	f7fd fca5 	bl	8002c24 <HAL_GetTick>
 80052da:	4602      	mov	r2, r0
 80052dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052de:	1ad3      	subs	r3, r2, r3
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d901      	bls.n	80052e8 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 80052e4:	2303      	movs	r3, #3
 80052e6:	e399      	b.n	8005a1c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80052e8:	4b5d      	ldr	r3, [pc, #372]	; (8005460 <HAL_RCC_OscConfig+0x7e4>)
 80052ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d0ef      	beq.n	80052d6 <HAL_RCC_OscConfig+0x65a>
 80052f6:	e01b      	b.n	8005330 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80052f8:	4b59      	ldr	r3, [pc, #356]	; (8005460 <HAL_RCC_OscConfig+0x7e4>)
 80052fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052fe:	4a58      	ldr	r2, [pc, #352]	; (8005460 <HAL_RCC_OscConfig+0x7e4>)
 8005300:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8005304:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8005308:	f7fd fc8c 	bl	8002c24 <HAL_GetTick>
 800530c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005310:	f7fd fc88 	bl	8002c24 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b02      	cmp	r3, #2
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e37c      	b.n	8005a1c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005322:	4b4f      	ldr	r3, [pc, #316]	; (8005460 <HAL_RCC_OscConfig+0x7e4>)
 8005324:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005328:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1ef      	bne.n	8005310 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005330:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005334:	2b01      	cmp	r3, #1
 8005336:	d107      	bne.n	8005348 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005338:	4b49      	ldr	r3, [pc, #292]	; (8005460 <HAL_RCC_OscConfig+0x7e4>)
 800533a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800533e:	4a48      	ldr	r2, [pc, #288]	; (8005460 <HAL_RCC_OscConfig+0x7e4>)
 8005340:	f023 0304 	bic.w	r3, r3, #4
 8005344:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0304 	and.w	r3, r3, #4
 8005350:	2b00      	cmp	r3, #0
 8005352:	f000 8112 	beq.w	800557a <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8005356:	2300      	movs	r3, #0
 8005358:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800535c:	4b40      	ldr	r3, [pc, #256]	; (8005460 <HAL_RCC_OscConfig+0x7e4>)
 800535e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005362:	f003 0304 	and.w	r3, r3, #4
 8005366:	2b00      	cmp	r3, #0
 8005368:	d111      	bne.n	800538e <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800536a:	4b3d      	ldr	r3, [pc, #244]	; (8005460 <HAL_RCC_OscConfig+0x7e4>)
 800536c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005370:	4a3b      	ldr	r2, [pc, #236]	; (8005460 <HAL_RCC_OscConfig+0x7e4>)
 8005372:	f043 0304 	orr.w	r3, r3, #4
 8005376:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800537a:	4b39      	ldr	r3, [pc, #228]	; (8005460 <HAL_RCC_OscConfig+0x7e4>)
 800537c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005380:	f003 0304 	and.w	r3, r3, #4
 8005384:	613b      	str	r3, [r7, #16]
 8005386:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8005388:	2301      	movs	r3, #1
 800538a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800538e:	4b35      	ldr	r3, [pc, #212]	; (8005464 <HAL_RCC_OscConfig+0x7e8>)
 8005390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b00      	cmp	r3, #0
 8005398:	d118      	bne.n	80053cc <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800539a:	4b32      	ldr	r3, [pc, #200]	; (8005464 <HAL_RCC_OscConfig+0x7e8>)
 800539c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539e:	4a31      	ldr	r2, [pc, #196]	; (8005464 <HAL_RCC_OscConfig+0x7e8>)
 80053a0:	f043 0301 	orr.w	r3, r3, #1
 80053a4:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053a6:	f7fd fc3d 	bl	8002c24 <HAL_GetTick>
 80053aa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80053ac:	e008      	b.n	80053c0 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053ae:	f7fd fc39 	bl	8002c24 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d901      	bls.n	80053c0 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e32d      	b.n	8005a1c <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80053c0:	4b28      	ldr	r3, [pc, #160]	; (8005464 <HAL_RCC_OscConfig+0x7e8>)
 80053c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c4:	f003 0301 	and.w	r3, r3, #1
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d0f0      	beq.n	80053ae <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d01f      	beq.n	8005418 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f003 0304 	and.w	r3, r3, #4
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d010      	beq.n	8005406 <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80053e4:	4b1e      	ldr	r3, [pc, #120]	; (8005460 <HAL_RCC_OscConfig+0x7e4>)
 80053e6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053ea:	4a1d      	ldr	r2, [pc, #116]	; (8005460 <HAL_RCC_OscConfig+0x7e4>)
 80053ec:	f043 0304 	orr.w	r3, r3, #4
 80053f0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80053f4:	4b1a      	ldr	r3, [pc, #104]	; (8005460 <HAL_RCC_OscConfig+0x7e4>)
 80053f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053fa:	4a19      	ldr	r2, [pc, #100]	; (8005460 <HAL_RCC_OscConfig+0x7e4>)
 80053fc:	f043 0301 	orr.w	r3, r3, #1
 8005400:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005404:	e018      	b.n	8005438 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005406:	4b16      	ldr	r3, [pc, #88]	; (8005460 <HAL_RCC_OscConfig+0x7e4>)
 8005408:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800540c:	4a14      	ldr	r2, [pc, #80]	; (8005460 <HAL_RCC_OscConfig+0x7e4>)
 800540e:	f043 0301 	orr.w	r3, r3, #1
 8005412:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005416:	e00f      	b.n	8005438 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005418:	4b11      	ldr	r3, [pc, #68]	; (8005460 <HAL_RCC_OscConfig+0x7e4>)
 800541a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800541e:	4a10      	ldr	r2, [pc, #64]	; (8005460 <HAL_RCC_OscConfig+0x7e4>)
 8005420:	f023 0301 	bic.w	r3, r3, #1
 8005424:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005428:	4b0d      	ldr	r3, [pc, #52]	; (8005460 <HAL_RCC_OscConfig+0x7e4>)
 800542a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800542e:	4a0c      	ldr	r2, [pc, #48]	; (8005460 <HAL_RCC_OscConfig+0x7e4>)
 8005430:	f023 0304 	bic.w	r3, r3, #4
 8005434:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	689b      	ldr	r3, [r3, #8]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d058      	beq.n	80054f2 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8005440:	f7fd fbf0 	bl	8002c24 <HAL_GetTick>
 8005444:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005446:	e00f      	b.n	8005468 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005448:	f7fd fbec 	bl	8002c24 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	f241 3288 	movw	r2, #5000	; 0x1388
 8005456:	4293      	cmp	r3, r2
 8005458:	d906      	bls.n	8005468 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e2de      	b.n	8005a1c <HAL_RCC_OscConfig+0xda0>
 800545e:	bf00      	nop
 8005460:	46020c00 	.word	0x46020c00
 8005464:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005468:	4b9c      	ldr	r3, [pc, #624]	; (80056dc <HAL_RCC_OscConfig+0xa60>)
 800546a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800546e:	f003 0302 	and.w	r3, r3, #2
 8005472:	2b00      	cmp	r3, #0
 8005474:	d0e8      	beq.n	8005448 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800547e:	2b00      	cmp	r3, #0
 8005480:	d01b      	beq.n	80054ba <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005482:	4b96      	ldr	r3, [pc, #600]	; (80056dc <HAL_RCC_OscConfig+0xa60>)
 8005484:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005488:	4a94      	ldr	r2, [pc, #592]	; (80056dc <HAL_RCC_OscConfig+0xa60>)
 800548a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800548e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005492:	e00a      	b.n	80054aa <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005494:	f7fd fbc6 	bl	8002c24 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	f241 3288 	movw	r2, #5000	; 0x1388
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e2b8      	b.n	8005a1c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80054aa:	4b8c      	ldr	r3, [pc, #560]	; (80056dc <HAL_RCC_OscConfig+0xa60>)
 80054ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d0ed      	beq.n	8005494 <HAL_RCC_OscConfig+0x818>
 80054b8:	e053      	b.n	8005562 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80054ba:	4b88      	ldr	r3, [pc, #544]	; (80056dc <HAL_RCC_OscConfig+0xa60>)
 80054bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054c0:	4a86      	ldr	r2, [pc, #536]	; (80056dc <HAL_RCC_OscConfig+0xa60>)
 80054c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054c6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80054ca:	e00a      	b.n	80054e2 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054cc:	f7fd fbaa 	bl	8002c24 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80054da:	4293      	cmp	r3, r2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e29c      	b.n	8005a1c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80054e2:	4b7e      	ldr	r3, [pc, #504]	; (80056dc <HAL_RCC_OscConfig+0xa60>)
 80054e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1ed      	bne.n	80054cc <HAL_RCC_OscConfig+0x850>
 80054f0:	e037      	b.n	8005562 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80054f2:	f7fd fb97 	bl	8002c24 <HAL_GetTick>
 80054f6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80054f8:	e00a      	b.n	8005510 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054fa:	f7fd fb93 	bl	8002c24 <HAL_GetTick>
 80054fe:	4602      	mov	r2, r0
 8005500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	f241 3288 	movw	r2, #5000	; 0x1388
 8005508:	4293      	cmp	r3, r2
 800550a:	d901      	bls.n	8005510 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e285      	b.n	8005a1c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005510:	4b72      	ldr	r3, [pc, #456]	; (80056dc <HAL_RCC_OscConfig+0xa60>)
 8005512:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005516:	f003 0302 	and.w	r3, r3, #2
 800551a:	2b00      	cmp	r3, #0
 800551c:	d1ed      	bne.n	80054fa <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800551e:	4b6f      	ldr	r3, [pc, #444]	; (80056dc <HAL_RCC_OscConfig+0xa60>)
 8005520:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005528:	2b00      	cmp	r3, #0
 800552a:	d01a      	beq.n	8005562 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800552c:	4b6b      	ldr	r3, [pc, #428]	; (80056dc <HAL_RCC_OscConfig+0xa60>)
 800552e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005532:	4a6a      	ldr	r2, [pc, #424]	; (80056dc <HAL_RCC_OscConfig+0xa60>)
 8005534:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005538:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800553c:	e00a      	b.n	8005554 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800553e:	f7fd fb71 	bl	8002c24 <HAL_GetTick>
 8005542:	4602      	mov	r2, r0
 8005544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005546:	1ad3      	subs	r3, r2, r3
 8005548:	f241 3288 	movw	r2, #5000	; 0x1388
 800554c:	4293      	cmp	r3, r2
 800554e:	d901      	bls.n	8005554 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e263      	b.n	8005a1c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005554:	4b61      	ldr	r3, [pc, #388]	; (80056dc <HAL_RCC_OscConfig+0xa60>)
 8005556:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800555a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1ed      	bne.n	800553e <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005562:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005566:	2b01      	cmp	r3, #1
 8005568:	d107      	bne.n	800557a <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800556a:	4b5c      	ldr	r3, [pc, #368]	; (80056dc <HAL_RCC_OscConfig+0xa60>)
 800556c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005570:	4a5a      	ldr	r2, [pc, #360]	; (80056dc <HAL_RCC_OscConfig+0xa60>)
 8005572:	f023 0304 	bic.w	r3, r3, #4
 8005576:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0320 	and.w	r3, r3, #32
 8005582:	2b00      	cmp	r3, #0
 8005584:	d036      	beq.n	80055f4 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800558a:	2b00      	cmp	r3, #0
 800558c:	d019      	beq.n	80055c2 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800558e:	4b53      	ldr	r3, [pc, #332]	; (80056dc <HAL_RCC_OscConfig+0xa60>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a52      	ldr	r2, [pc, #328]	; (80056dc <HAL_RCC_OscConfig+0xa60>)
 8005594:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005598:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800559a:	f7fd fb43 	bl	8002c24 <HAL_GetTick>
 800559e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80055a0:	e008      	b.n	80055b4 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055a2:	f7fd fb3f 	bl	8002c24 <HAL_GetTick>
 80055a6:	4602      	mov	r2, r0
 80055a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055aa:	1ad3      	subs	r3, r2, r3
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d901      	bls.n	80055b4 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e233      	b.n	8005a1c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80055b4:	4b49      	ldr	r3, [pc, #292]	; (80056dc <HAL_RCC_OscConfig+0xa60>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d0f0      	beq.n	80055a2 <HAL_RCC_OscConfig+0x926>
 80055c0:	e018      	b.n	80055f4 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80055c2:	4b46      	ldr	r3, [pc, #280]	; (80056dc <HAL_RCC_OscConfig+0xa60>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a45      	ldr	r2, [pc, #276]	; (80056dc <HAL_RCC_OscConfig+0xa60>)
 80055c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055cc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80055ce:	f7fd fb29 	bl	8002c24 <HAL_GetTick>
 80055d2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80055d4:	e008      	b.n	80055e8 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055d6:	f7fd fb25 	bl	8002c24 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d901      	bls.n	80055e8 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e219      	b.n	8005a1c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80055e8:	4b3c      	ldr	r3, [pc, #240]	; (80056dc <HAL_RCC_OscConfig+0xa60>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d1f0      	bne.n	80055d6 <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d036      	beq.n	800566e <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005604:	2b00      	cmp	r3, #0
 8005606:	d019      	beq.n	800563c <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8005608:	4b34      	ldr	r3, [pc, #208]	; (80056dc <HAL_RCC_OscConfig+0xa60>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a33      	ldr	r2, [pc, #204]	; (80056dc <HAL_RCC_OscConfig+0xa60>)
 800560e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005612:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005614:	f7fd fb06 	bl	8002c24 <HAL_GetTick>
 8005618:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800561a:	e008      	b.n	800562e <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 800561c:	f7fd fb02 	bl	8002c24 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	2b02      	cmp	r3, #2
 8005628:	d901      	bls.n	800562e <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 800562a:	2303      	movs	r3, #3
 800562c:	e1f6      	b.n	8005a1c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 800562e:	4b2b      	ldr	r3, [pc, #172]	; (80056dc <HAL_RCC_OscConfig+0xa60>)
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005636:	2b00      	cmp	r3, #0
 8005638:	d0f0      	beq.n	800561c <HAL_RCC_OscConfig+0x9a0>
 800563a:	e018      	b.n	800566e <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 800563c:	4b27      	ldr	r3, [pc, #156]	; (80056dc <HAL_RCC_OscConfig+0xa60>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a26      	ldr	r2, [pc, #152]	; (80056dc <HAL_RCC_OscConfig+0xa60>)
 8005642:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005646:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005648:	f7fd faec 	bl	8002c24 <HAL_GetTick>
 800564c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800564e:	e008      	b.n	8005662 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005650:	f7fd fae8 	bl	8002c24 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	2b02      	cmp	r3, #2
 800565c:	d901      	bls.n	8005662 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e1dc      	b.n	8005a1c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005662:	4b1e      	ldr	r3, [pc, #120]	; (80056dc <HAL_RCC_OscConfig+0xa60>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1f0      	bne.n	8005650 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005676:	2b00      	cmp	r3, #0
 8005678:	d07f      	beq.n	800577a <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567e:	2b00      	cmp	r3, #0
 8005680:	d062      	beq.n	8005748 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8005682:	4b16      	ldr	r3, [pc, #88]	; (80056dc <HAL_RCC_OscConfig+0xa60>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	4a15      	ldr	r2, [pc, #84]	; (80056dc <HAL_RCC_OscConfig+0xa60>)
 8005688:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800568c:	6093      	str	r3, [r2, #8]
 800568e:	4b13      	ldr	r3, [pc, #76]	; (80056dc <HAL_RCC_OscConfig+0xa60>)
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800569a:	4910      	ldr	r1, [pc, #64]	; (80056dc <HAL_RCC_OscConfig+0xa60>)
 800569c:	4313      	orrs	r3, r2
 800569e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80056a8:	d309      	bcc.n	80056be <HAL_RCC_OscConfig+0xa42>
 80056aa:	4b0c      	ldr	r3, [pc, #48]	; (80056dc <HAL_RCC_OscConfig+0xa60>)
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	f023 021f 	bic.w	r2, r3, #31
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a1b      	ldr	r3, [r3, #32]
 80056b6:	4909      	ldr	r1, [pc, #36]	; (80056dc <HAL_RCC_OscConfig+0xa60>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	60cb      	str	r3, [r1, #12]
 80056bc:	e02a      	b.n	8005714 <HAL_RCC_OscConfig+0xa98>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	da0c      	bge.n	80056e0 <HAL_RCC_OscConfig+0xa64>
 80056c6:	4b05      	ldr	r3, [pc, #20]	; (80056dc <HAL_RCC_OscConfig+0xa60>)
 80056c8:	68db      	ldr	r3, [r3, #12]
 80056ca:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a1b      	ldr	r3, [r3, #32]
 80056d2:	015b      	lsls	r3, r3, #5
 80056d4:	4901      	ldr	r1, [pc, #4]	; (80056dc <HAL_RCC_OscConfig+0xa60>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	60cb      	str	r3, [r1, #12]
 80056da:	e01b      	b.n	8005714 <HAL_RCC_OscConfig+0xa98>
 80056dc:	46020c00 	.word	0x46020c00
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056e8:	d30a      	bcc.n	8005700 <HAL_RCC_OscConfig+0xa84>
 80056ea:	4ba5      	ldr	r3, [pc, #660]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	029b      	lsls	r3, r3, #10
 80056f8:	49a1      	ldr	r1, [pc, #644]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	60cb      	str	r3, [r1, #12]
 80056fe:	e009      	b.n	8005714 <HAL_RCC_OscConfig+0xa98>
 8005700:	4b9f      	ldr	r3, [pc, #636]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6a1b      	ldr	r3, [r3, #32]
 800570c:	03db      	lsls	r3, r3, #15
 800570e:	499c      	ldr	r1, [pc, #624]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 8005710:	4313      	orrs	r3, r2
 8005712:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8005714:	4b9a      	ldr	r3, [pc, #616]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a99      	ldr	r2, [pc, #612]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 800571a:	f043 0310 	orr.w	r3, r3, #16
 800571e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005720:	f7fd fa80 	bl	8002c24 <HAL_GetTick>
 8005724:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8005726:	e008      	b.n	800573a <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8005728:	f7fd fa7c 	bl	8002c24 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b02      	cmp	r3, #2
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e170      	b.n	8005a1c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800573a:	4b91      	ldr	r3, [pc, #580]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 0320 	and.w	r3, r3, #32
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0f0      	beq.n	8005728 <HAL_RCC_OscConfig+0xaac>
 8005746:	e018      	b.n	800577a <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8005748:	4b8d      	ldr	r3, [pc, #564]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a8c      	ldr	r2, [pc, #560]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 800574e:	f023 0310 	bic.w	r3, r3, #16
 8005752:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005754:	f7fd fa66 	bl	8002c24 <HAL_GetTick>
 8005758:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800575a:	e008      	b.n	800576e <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800575c:	f7fd fa62 	bl	8002c24 <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b02      	cmp	r3, #2
 8005768:	d901      	bls.n	800576e <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e156      	b.n	8005a1c <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800576e:	4b84      	ldr	r3, [pc, #528]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 0320 	and.w	r3, r3, #32
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1f0      	bne.n	800575c <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577e:	2b00      	cmp	r3, #0
 8005780:	f000 814b 	beq.w	8005a1a <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005784:	2300      	movs	r3, #0
 8005786:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800578a:	4b7d      	ldr	r3, [pc, #500]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 800578c:	69db      	ldr	r3, [r3, #28]
 800578e:	f003 030c 	and.w	r3, r3, #12
 8005792:	2b0c      	cmp	r3, #12
 8005794:	f000 80fa 	beq.w	800598c <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800579c:	2b02      	cmp	r3, #2
 800579e:	f040 80cc 	bne.w	800593a <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80057a2:	4b77      	ldr	r3, [pc, #476]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a76      	ldr	r2, [pc, #472]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 80057a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057ac:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80057ae:	f7fd fa39 	bl	8002c24 <HAL_GetTick>
 80057b2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80057b4:	e008      	b.n	80057c8 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057b6:	f7fd fa35 	bl	8002c24 <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	2b02      	cmp	r3, #2
 80057c2:	d901      	bls.n	80057c8 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 80057c4:	2303      	movs	r3, #3
 80057c6:	e129      	b.n	8005a1c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80057c8:	4b6d      	ldr	r3, [pc, #436]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1f0      	bne.n	80057b6 <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057d4:	4b6a      	ldr	r3, [pc, #424]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 80057d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057da:	f003 0304 	and.w	r3, r3, #4
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d111      	bne.n	8005806 <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80057e2:	4b67      	ldr	r3, [pc, #412]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 80057e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057e8:	4a65      	ldr	r2, [pc, #404]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 80057ea:	f043 0304 	orr.w	r3, r3, #4
 80057ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80057f2:	4b63      	ldr	r3, [pc, #396]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 80057f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	60fb      	str	r3, [r7, #12]
 80057fe:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8005800:	2301      	movs	r3, #1
 8005802:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8005806:	4b5f      	ldr	r3, [pc, #380]	; (8005984 <HAL_RCC_OscConfig+0xd08>)
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800580e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005812:	d102      	bne.n	800581a <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8005814:	2301      	movs	r3, #1
 8005816:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800581a:	4b5a      	ldr	r3, [pc, #360]	; (8005984 <HAL_RCC_OscConfig+0xd08>)
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	4a59      	ldr	r2, [pc, #356]	; (8005984 <HAL_RCC_OscConfig+0xd08>)
 8005820:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005824:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8005826:	4b56      	ldr	r3, [pc, #344]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 8005828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800582a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800582e:	f023 0303 	bic.w	r3, r3, #3
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800583a:	3a01      	subs	r2, #1
 800583c:	0212      	lsls	r2, r2, #8
 800583e:	4311      	orrs	r1, r2
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005844:	430a      	orrs	r2, r1
 8005846:	494e      	ldr	r1, [pc, #312]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 8005848:	4313      	orrs	r3, r2
 800584a:	628b      	str	r3, [r1, #40]	; 0x28
 800584c:	4b4c      	ldr	r3, [pc, #304]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 800584e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005850:	4b4d      	ldr	r3, [pc, #308]	; (8005988 <HAL_RCC_OscConfig+0xd0c>)
 8005852:	4013      	ands	r3, r2
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005858:	3a01      	subs	r2, #1
 800585a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005862:	3a01      	subs	r2, #1
 8005864:	0252      	lsls	r2, r2, #9
 8005866:	b292      	uxth	r2, r2
 8005868:	4311      	orrs	r1, r2
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800586e:	3a01      	subs	r2, #1
 8005870:	0412      	lsls	r2, r2, #16
 8005872:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005876:	4311      	orrs	r1, r2
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800587c:	3a01      	subs	r2, #1
 800587e:	0612      	lsls	r2, r2, #24
 8005880:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005884:	430a      	orrs	r2, r1
 8005886:	493e      	ldr	r1, [pc, #248]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 8005888:	4313      	orrs	r3, r2
 800588a:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 800588c:	4b3c      	ldr	r3, [pc, #240]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 800588e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005890:	4a3b      	ldr	r2, [pc, #236]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 8005892:	f023 0310 	bic.w	r3, r3, #16
 8005896:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005898:	4b39      	ldr	r3, [pc, #228]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 800589a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058a0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80058a8:	00d2      	lsls	r2, r2, #3
 80058aa:	4935      	ldr	r1, [pc, #212]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 80058b0:	4b33      	ldr	r3, [pc, #204]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 80058b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b4:	4a32      	ldr	r2, [pc, #200]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 80058b6:	f043 0310 	orr.w	r3, r3, #16
 80058ba:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 80058bc:	4b30      	ldr	r3, [pc, #192]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 80058be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c0:	f023 020c 	bic.w	r2, r3, #12
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c8:	492d      	ldr	r1, [pc, #180]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 80058ce:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d105      	bne.n	80058e2 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80058d6:	4b2b      	ldr	r3, [pc, #172]	; (8005984 <HAL_RCC_OscConfig+0xd08>)
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	4a2a      	ldr	r2, [pc, #168]	; (8005984 <HAL_RCC_OscConfig+0xd08>)
 80058dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058e0:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80058e2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d107      	bne.n	80058fa <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80058ea:	4b25      	ldr	r3, [pc, #148]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 80058ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058f0:	4a23      	ldr	r2, [pc, #140]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 80058f2:	f023 0304 	bic.w	r3, r3, #4
 80058f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80058fa:	4b21      	ldr	r3, [pc, #132]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 80058fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fe:	4a20      	ldr	r2, [pc, #128]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 8005900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005904:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8005906:	4b1e      	ldr	r3, [pc, #120]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4a1d      	ldr	r2, [pc, #116]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 800590c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005910:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005912:	f7fd f987 	bl	8002c24 <HAL_GetTick>
 8005916:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005918:	e008      	b.n	800592c <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800591a:	f7fd f983 	bl	8002c24 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b02      	cmp	r3, #2
 8005926:	d901      	bls.n	800592c <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e077      	b.n	8005a1c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800592c:	4b14      	ldr	r3, [pc, #80]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d0f0      	beq.n	800591a <HAL_RCC_OscConfig+0xc9e>
 8005938:	e06f      	b.n	8005a1a <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800593a:	4b11      	ldr	r3, [pc, #68]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a10      	ldr	r2, [pc, #64]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 8005940:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005944:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005946:	f7fd f96d 	bl	8002c24 <HAL_GetTick>
 800594a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800594c:	e008      	b.n	8005960 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800594e:	f7fd f969 	bl	8002c24 <HAL_GetTick>
 8005952:	4602      	mov	r2, r0
 8005954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005956:	1ad3      	subs	r3, r2, r3
 8005958:	2b02      	cmp	r3, #2
 800595a:	d901      	bls.n	8005960 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e05d      	b.n	8005a1c <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005960:	4b07      	ldr	r3, [pc, #28]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1f0      	bne.n	800594e <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 800596c:	4b04      	ldr	r3, [pc, #16]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 800596e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005970:	4a03      	ldr	r2, [pc, #12]	; (8005980 <HAL_RCC_OscConfig+0xd04>)
 8005972:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8005976:	f023 0303 	bic.w	r3, r3, #3
 800597a:	6293      	str	r3, [r2, #40]	; 0x28
 800597c:	e04d      	b.n	8005a1a <HAL_RCC_OscConfig+0xd9e>
 800597e:	bf00      	nop
 8005980:	46020c00 	.word	0x46020c00
 8005984:	46020800 	.word	0x46020800
 8005988:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 800598c:	4b25      	ldr	r3, [pc, #148]	; (8005a24 <HAL_RCC_OscConfig+0xda8>)
 800598e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005990:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005992:	4b24      	ldr	r3, [pc, #144]	; (8005a24 <HAL_RCC_OscConfig+0xda8>)
 8005994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005996:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800599c:	2b01      	cmp	r3, #1
 800599e:	d03a      	beq.n	8005a16 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	f003 0203 	and.w	r2, r3, #3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d133      	bne.n	8005a16 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	0a1b      	lsrs	r3, r3, #8
 80059b2:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ba:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80059bc:	429a      	cmp	r2, r3
 80059be:	d12a      	bne.n	8005a16 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	0b1b      	lsrs	r3, r3, #12
 80059c4:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d122      	bne.n	8005a16 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80059d0:	69bb      	ldr	r3, [r7, #24]
 80059d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059da:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 80059dc:	429a      	cmp	r2, r3
 80059de:	d11a      	bne.n	8005a16 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	0a5b      	lsrs	r3, r3, #9
 80059e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ec:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d111      	bne.n	8005a16 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	0c1b      	lsrs	r3, r3, #16
 80059f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059fe:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d108      	bne.n	8005a16 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	0e1b      	lsrs	r3, r3, #24
 8005a08:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a10:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d001      	beq.n	8005a1a <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e000      	b.n	8005a1c <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3738      	adds	r7, #56	; 0x38
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}
 8005a24:	46020c00 	.word	0x46020c00

08005a28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b086      	sub	sp, #24
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d101      	bne.n	8005a3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e1d9      	b.n	8005df0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a3c:	4b9b      	ldr	r3, [pc, #620]	; (8005cac <HAL_RCC_ClockConfig+0x284>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 030f 	and.w	r3, r3, #15
 8005a44:	683a      	ldr	r2, [r7, #0]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	d910      	bls.n	8005a6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a4a:	4b98      	ldr	r3, [pc, #608]	; (8005cac <HAL_RCC_ClockConfig+0x284>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f023 020f 	bic.w	r2, r3, #15
 8005a52:	4996      	ldr	r1, [pc, #600]	; (8005cac <HAL_RCC_ClockConfig+0x284>)
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a5a:	4b94      	ldr	r3, [pc, #592]	; (8005cac <HAL_RCC_ClockConfig+0x284>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 030f 	and.w	r3, r3, #15
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d001      	beq.n	8005a6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e1c1      	b.n	8005df0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0310 	and.w	r3, r3, #16
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d010      	beq.n	8005a9a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	695a      	ldr	r2, [r3, #20]
 8005a7c:	4b8c      	ldr	r3, [pc, #560]	; (8005cb0 <HAL_RCC_ClockConfig+0x288>)
 8005a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d908      	bls.n	8005a9a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005a88:	4b89      	ldr	r3, [pc, #548]	; (8005cb0 <HAL_RCC_ClockConfig+0x288>)
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	695b      	ldr	r3, [r3, #20]
 8005a94:	4986      	ldr	r1, [pc, #536]	; (8005cb0 <HAL_RCC_ClockConfig+0x288>)
 8005a96:	4313      	orrs	r3, r2
 8005a98:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0308 	and.w	r3, r3, #8
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d012      	beq.n	8005acc <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	691a      	ldr	r2, [r3, #16]
 8005aaa:	4b81      	ldr	r3, [pc, #516]	; (8005cb0 <HAL_RCC_ClockConfig+0x288>)
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	091b      	lsrs	r3, r3, #4
 8005ab0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d909      	bls.n	8005acc <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005ab8:	4b7d      	ldr	r3, [pc, #500]	; (8005cb0 <HAL_RCC_ClockConfig+0x288>)
 8005aba:	6a1b      	ldr	r3, [r3, #32]
 8005abc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	011b      	lsls	r3, r3, #4
 8005ac6:	497a      	ldr	r1, [pc, #488]	; (8005cb0 <HAL_RCC_ClockConfig+0x288>)
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 0304 	and.w	r3, r3, #4
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d010      	beq.n	8005afa <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68da      	ldr	r2, [r3, #12]
 8005adc:	4b74      	ldr	r3, [pc, #464]	; (8005cb0 <HAL_RCC_ClockConfig+0x288>)
 8005ade:	6a1b      	ldr	r3, [r3, #32]
 8005ae0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d908      	bls.n	8005afa <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005ae8:	4b71      	ldr	r3, [pc, #452]	; (8005cb0 <HAL_RCC_ClockConfig+0x288>)
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	496e      	ldr	r1, [pc, #440]	; (8005cb0 <HAL_RCC_ClockConfig+0x288>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f003 0302 	and.w	r3, r3, #2
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d010      	beq.n	8005b28 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	689a      	ldr	r2, [r3, #8]
 8005b0a:	4b69      	ldr	r3, [pc, #420]	; (8005cb0 <HAL_RCC_ClockConfig+0x288>)
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	f003 030f 	and.w	r3, r3, #15
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d908      	bls.n	8005b28 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005b16:	4b66      	ldr	r3, [pc, #408]	; (8005cb0 <HAL_RCC_ClockConfig+0x288>)
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	f023 020f 	bic.w	r2, r3, #15
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	4963      	ldr	r1, [pc, #396]	; (8005cb0 <HAL_RCC_ClockConfig+0x288>)
 8005b24:	4313      	orrs	r3, r2
 8005b26:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f003 0301 	and.w	r3, r3, #1
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 80d2 	beq.w	8005cda <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8005b36:	2300      	movs	r3, #0
 8005b38:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	2b03      	cmp	r3, #3
 8005b40:	d143      	bne.n	8005bca <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b42:	4b5b      	ldr	r3, [pc, #364]	; (8005cb0 <HAL_RCC_ClockConfig+0x288>)
 8005b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d110      	bne.n	8005b72 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005b50:	4b57      	ldr	r3, [pc, #348]	; (8005cb0 <HAL_RCC_ClockConfig+0x288>)
 8005b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b56:	4a56      	ldr	r2, [pc, #344]	; (8005cb0 <HAL_RCC_ClockConfig+0x288>)
 8005b58:	f043 0304 	orr.w	r3, r3, #4
 8005b5c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005b60:	4b53      	ldr	r3, [pc, #332]	; (8005cb0 <HAL_RCC_ClockConfig+0x288>)
 8005b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b66:	f003 0304 	and.w	r3, r3, #4
 8005b6a:	60bb      	str	r3, [r7, #8]
 8005b6c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005b6e:	2301      	movs	r3, #1
 8005b70:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8005b72:	f7fd f857 	bl	8002c24 <HAL_GetTick>
 8005b76:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005b78:	4b4e      	ldr	r3, [pc, #312]	; (8005cb4 <HAL_RCC_ClockConfig+0x28c>)
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00f      	beq.n	8005ba4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005b84:	e008      	b.n	8005b98 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8005b86:	f7fd f84d 	bl	8002c24 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	2b02      	cmp	r3, #2
 8005b92:	d901      	bls.n	8005b98 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e12b      	b.n	8005df0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005b98:	4b46      	ldr	r3, [pc, #280]	; (8005cb4 <HAL_RCC_ClockConfig+0x28c>)
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d0f0      	beq.n	8005b86 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005ba4:	7dfb      	ldrb	r3, [r7, #23]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d107      	bne.n	8005bba <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005baa:	4b41      	ldr	r3, [pc, #260]	; (8005cb0 <HAL_RCC_ClockConfig+0x288>)
 8005bac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005bb0:	4a3f      	ldr	r2, [pc, #252]	; (8005cb0 <HAL_RCC_ClockConfig+0x288>)
 8005bb2:	f023 0304 	bic.w	r3, r3, #4
 8005bb6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005bba:	4b3d      	ldr	r3, [pc, #244]	; (8005cb0 <HAL_RCC_ClockConfig+0x288>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d121      	bne.n	8005c0a <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e112      	b.n	8005df0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	2b02      	cmp	r3, #2
 8005bd0:	d107      	bne.n	8005be2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bd2:	4b37      	ldr	r3, [pc, #220]	; (8005cb0 <HAL_RCC_ClockConfig+0x288>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d115      	bne.n	8005c0a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e106      	b.n	8005df0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d107      	bne.n	8005bfa <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005bea:	4b31      	ldr	r3, [pc, #196]	; (8005cb0 <HAL_RCC_ClockConfig+0x288>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0304 	and.w	r3, r3, #4
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d109      	bne.n	8005c0a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e0fa      	b.n	8005df0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bfa:	4b2d      	ldr	r3, [pc, #180]	; (8005cb0 <HAL_RCC_ClockConfig+0x288>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e0f2      	b.n	8005df0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8005c0a:	4b29      	ldr	r3, [pc, #164]	; (8005cb0 <HAL_RCC_ClockConfig+0x288>)
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	f023 0203 	bic.w	r2, r3, #3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	4926      	ldr	r1, [pc, #152]	; (8005cb0 <HAL_RCC_ClockConfig+0x288>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005c1c:	f7fd f802 	bl	8002c24 <HAL_GetTick>
 8005c20:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	2b03      	cmp	r3, #3
 8005c28:	d112      	bne.n	8005c50 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c2a:	e00a      	b.n	8005c42 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c2c:	f7fc fffa 	bl	8002c24 <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d901      	bls.n	8005c42 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e0d6      	b.n	8005df0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005c42:	4b1b      	ldr	r3, [pc, #108]	; (8005cb0 <HAL_RCC_ClockConfig+0x288>)
 8005c44:	69db      	ldr	r3, [r3, #28]
 8005c46:	f003 030c 	and.w	r3, r3, #12
 8005c4a:	2b0c      	cmp	r3, #12
 8005c4c:	d1ee      	bne.n	8005c2c <HAL_RCC_ClockConfig+0x204>
 8005c4e:	e044      	b.n	8005cda <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d112      	bne.n	8005c7e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c58:	e00a      	b.n	8005c70 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c5a:	f7fc ffe3 	bl	8002c24 <HAL_GetTick>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	1ad3      	subs	r3, r2, r3
 8005c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d901      	bls.n	8005c70 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005c6c:	2303      	movs	r3, #3
 8005c6e:	e0bf      	b.n	8005df0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c70:	4b0f      	ldr	r3, [pc, #60]	; (8005cb0 <HAL_RCC_ClockConfig+0x288>)
 8005c72:	69db      	ldr	r3, [r3, #28]
 8005c74:	f003 030c 	and.w	r3, r3, #12
 8005c78:	2b08      	cmp	r3, #8
 8005c7a:	d1ee      	bne.n	8005c5a <HAL_RCC_ClockConfig+0x232>
 8005c7c:	e02d      	b.n	8005cda <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d123      	bne.n	8005cce <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005c86:	e00a      	b.n	8005c9e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c88:	f7fc ffcc 	bl	8002c24 <HAL_GetTick>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d901      	bls.n	8005c9e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e0a8      	b.n	8005df0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005c9e:	4b04      	ldr	r3, [pc, #16]	; (8005cb0 <HAL_RCC_ClockConfig+0x288>)
 8005ca0:	69db      	ldr	r3, [r3, #28]
 8005ca2:	f003 030c 	and.w	r3, r3, #12
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1ee      	bne.n	8005c88 <HAL_RCC_ClockConfig+0x260>
 8005caa:	e016      	b.n	8005cda <HAL_RCC_ClockConfig+0x2b2>
 8005cac:	40022000 	.word	0x40022000
 8005cb0:	46020c00 	.word	0x46020c00
 8005cb4:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cb8:	f7fc ffb4 	bl	8002c24 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	693b      	ldr	r3, [r7, #16]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d901      	bls.n	8005cce <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e090      	b.n	8005df0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005cce:	4b4a      	ldr	r3, [pc, #296]	; (8005df8 <HAL_RCC_ClockConfig+0x3d0>)
 8005cd0:	69db      	ldr	r3, [r3, #28]
 8005cd2:	f003 030c 	and.w	r3, r3, #12
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	d1ee      	bne.n	8005cb8 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0302 	and.w	r3, r3, #2
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d010      	beq.n	8005d08 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	689a      	ldr	r2, [r3, #8]
 8005cea:	4b43      	ldr	r3, [pc, #268]	; (8005df8 <HAL_RCC_ClockConfig+0x3d0>)
 8005cec:	6a1b      	ldr	r3, [r3, #32]
 8005cee:	f003 030f 	and.w	r3, r3, #15
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d208      	bcs.n	8005d08 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005cf6:	4b40      	ldr	r3, [pc, #256]	; (8005df8 <HAL_RCC_ClockConfig+0x3d0>)
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	f023 020f 	bic.w	r2, r3, #15
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	493d      	ldr	r1, [pc, #244]	; (8005df8 <HAL_RCC_ClockConfig+0x3d0>)
 8005d04:	4313      	orrs	r3, r2
 8005d06:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d08:	4b3c      	ldr	r3, [pc, #240]	; (8005dfc <HAL_RCC_ClockConfig+0x3d4>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 030f 	and.w	r3, r3, #15
 8005d10:	683a      	ldr	r2, [r7, #0]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d210      	bcs.n	8005d38 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d16:	4b39      	ldr	r3, [pc, #228]	; (8005dfc <HAL_RCC_ClockConfig+0x3d4>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f023 020f 	bic.w	r2, r3, #15
 8005d1e:	4937      	ldr	r1, [pc, #220]	; (8005dfc <HAL_RCC_ClockConfig+0x3d4>)
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d26:	4b35      	ldr	r3, [pc, #212]	; (8005dfc <HAL_RCC_ClockConfig+0x3d4>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f003 030f 	and.w	r3, r3, #15
 8005d2e:	683a      	ldr	r2, [r7, #0]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d001      	beq.n	8005d38 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e05b      	b.n	8005df0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f003 0304 	and.w	r3, r3, #4
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d010      	beq.n	8005d66 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	68da      	ldr	r2, [r3, #12]
 8005d48:	4b2b      	ldr	r3, [pc, #172]	; (8005df8 <HAL_RCC_ClockConfig+0x3d0>)
 8005d4a:	6a1b      	ldr	r3, [r3, #32]
 8005d4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d208      	bcs.n	8005d66 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005d54:	4b28      	ldr	r3, [pc, #160]	; (8005df8 <HAL_RCC_ClockConfig+0x3d0>)
 8005d56:	6a1b      	ldr	r3, [r3, #32]
 8005d58:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	4925      	ldr	r1, [pc, #148]	; (8005df8 <HAL_RCC_ClockConfig+0x3d0>)
 8005d62:	4313      	orrs	r3, r2
 8005d64:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0308 	and.w	r3, r3, #8
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d012      	beq.n	8005d98 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	691a      	ldr	r2, [r3, #16]
 8005d76:	4b20      	ldr	r3, [pc, #128]	; (8005df8 <HAL_RCC_ClockConfig+0x3d0>)
 8005d78:	6a1b      	ldr	r3, [r3, #32]
 8005d7a:	091b      	lsrs	r3, r3, #4
 8005d7c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d209      	bcs.n	8005d98 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005d84:	4b1c      	ldr	r3, [pc, #112]	; (8005df8 <HAL_RCC_ClockConfig+0x3d0>)
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	011b      	lsls	r3, r3, #4
 8005d92:	4919      	ldr	r1, [pc, #100]	; (8005df8 <HAL_RCC_ClockConfig+0x3d0>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f003 0310 	and.w	r3, r3, #16
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d010      	beq.n	8005dc6 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	695a      	ldr	r2, [r3, #20]
 8005da8:	4b13      	ldr	r3, [pc, #76]	; (8005df8 <HAL_RCC_ClockConfig+0x3d0>)
 8005daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d208      	bcs.n	8005dc6 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005db4:	4b10      	ldr	r3, [pc, #64]	; (8005df8 <HAL_RCC_ClockConfig+0x3d0>)
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	490d      	ldr	r1, [pc, #52]	; (8005df8 <HAL_RCC_ClockConfig+0x3d0>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005dc6:	f000 f821 	bl	8005e0c <HAL_RCC_GetSysClockFreq>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	4b0a      	ldr	r3, [pc, #40]	; (8005df8 <HAL_RCC_ClockConfig+0x3d0>)
 8005dce:	6a1b      	ldr	r3, [r3, #32]
 8005dd0:	f003 030f 	and.w	r3, r3, #15
 8005dd4:	490a      	ldr	r1, [pc, #40]	; (8005e00 <HAL_RCC_ClockConfig+0x3d8>)
 8005dd6:	5ccb      	ldrb	r3, [r1, r3]
 8005dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8005ddc:	4a09      	ldr	r2, [pc, #36]	; (8005e04 <HAL_RCC_ClockConfig+0x3dc>)
 8005dde:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005de0:	4b09      	ldr	r3, [pc, #36]	; (8005e08 <HAL_RCC_ClockConfig+0x3e0>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4618      	mov	r0, r3
 8005de6:	f7fc fed3 	bl	8002b90 <HAL_InitTick>
 8005dea:	4603      	mov	r3, r0
 8005dec:	73fb      	strb	r3, [r7, #15]

  return status;
 8005dee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3718      	adds	r7, #24
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	46020c00 	.word	0x46020c00
 8005dfc:	40022000 	.word	0x40022000
 8005e00:	0800c6d8 	.word	0x0800c6d8
 8005e04:	20000000 	.word	0x20000000
 8005e08:	20000004 	.word	0x20000004

08005e0c <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b08b      	sub	sp, #44	; 0x2c
 8005e10:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e1a:	4b7b      	ldr	r3, [pc, #492]	; (8006008 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	f003 030c 	and.w	r3, r3, #12
 8005e22:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005e24:	4b78      	ldr	r3, [pc, #480]	; (8006008 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e28:	f003 0303 	and.w	r3, r3, #3
 8005e2c:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005e2e:	69bb      	ldr	r3, [r7, #24]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d005      	beq.n	8005e40 <HAL_RCC_GetSysClockFreq+0x34>
 8005e34:	69bb      	ldr	r3, [r7, #24]
 8005e36:	2b0c      	cmp	r3, #12
 8005e38:	d121      	bne.n	8005e7e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d11e      	bne.n	8005e7e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005e40:	4b71      	ldr	r3, [pc, #452]	; (8006008 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d107      	bne.n	8005e5c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005e4c:	4b6e      	ldr	r3, [pc, #440]	; (8006008 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005e4e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005e52:	0b1b      	lsrs	r3, r3, #12
 8005e54:	f003 030f 	and.w	r3, r3, #15
 8005e58:	627b      	str	r3, [r7, #36]	; 0x24
 8005e5a:	e005      	b.n	8005e68 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005e5c:	4b6a      	ldr	r3, [pc, #424]	; (8006008 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	0f1b      	lsrs	r3, r3, #28
 8005e62:	f003 030f 	and.w	r3, r3, #15
 8005e66:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005e68:	4a68      	ldr	r2, [pc, #416]	; (800600c <HAL_RCC_GetSysClockFreq+0x200>)
 8005e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e70:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005e72:	69bb      	ldr	r3, [r7, #24]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d110      	bne.n	8005e9a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005e7c:	e00d      	b.n	8005e9a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005e7e:	4b62      	ldr	r3, [pc, #392]	; (8006008 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005e80:	69db      	ldr	r3, [r3, #28]
 8005e82:	f003 030c 	and.w	r3, r3, #12
 8005e86:	2b04      	cmp	r3, #4
 8005e88:	d102      	bne.n	8005e90 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e8a:	4b61      	ldr	r3, [pc, #388]	; (8006010 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e8c:	623b      	str	r3, [r7, #32]
 8005e8e:	e004      	b.n	8005e9a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005e90:	69bb      	ldr	r3, [r7, #24]
 8005e92:	2b08      	cmp	r3, #8
 8005e94:	d101      	bne.n	8005e9a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e96:	4b5e      	ldr	r3, [pc, #376]	; (8006010 <HAL_RCC_GetSysClockFreq+0x204>)
 8005e98:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	2b0c      	cmp	r3, #12
 8005e9e:	f040 80ac 	bne.w	8005ffa <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005ea2:	4b59      	ldr	r3, [pc, #356]	; (8006008 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea6:	f003 0303 	and.w	r3, r3, #3
 8005eaa:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005eac:	4b56      	ldr	r3, [pc, #344]	; (8006008 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb0:	0a1b      	lsrs	r3, r3, #8
 8005eb2:	f003 030f 	and.w	r3, r3, #15
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005eba:	4b53      	ldr	r3, [pc, #332]	; (8006008 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005ebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ebe:	091b      	lsrs	r3, r3, #4
 8005ec0:	f003 0301 	and.w	r3, r3, #1
 8005ec4:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005ec6:	4b50      	ldr	r3, [pc, #320]	; (8006008 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eca:	08db      	lsrs	r3, r3, #3
 8005ecc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	fb02 f303 	mul.w	r3, r2, r3
 8005ed6:	ee07 3a90 	vmov	s15, r3
 8005eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ede:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 8086 	beq.w	8005ff6 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d003      	beq.n	8005ef8 <HAL_RCC_GetSysClockFreq+0xec>
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	2b03      	cmp	r3, #3
 8005ef4:	d022      	beq.n	8005f3c <HAL_RCC_GetSysClockFreq+0x130>
 8005ef6:	e043      	b.n	8005f80 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	ee07 3a90 	vmov	s15, r3
 8005efe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f02:	eddf 6a44 	vldr	s13, [pc, #272]	; 8006014 <HAL_RCC_GetSysClockFreq+0x208>
 8005f06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f0a:	4b3f      	ldr	r3, [pc, #252]	; (8006008 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f12:	ee07 3a90 	vmov	s15, r3
 8005f16:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005f1a:	ed97 6a01 	vldr	s12, [r7, #4]
 8005f1e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8006018 <HAL_RCC_GetSysClockFreq+0x20c>
 8005f22:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f26:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005f2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f36:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005f3a:	e046      	b.n	8005fca <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	ee07 3a90 	vmov	s15, r3
 8005f42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f46:	eddf 6a33 	vldr	s13, [pc, #204]	; 8006014 <HAL_RCC_GetSysClockFreq+0x208>
 8005f4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f4e:	4b2e      	ldr	r3, [pc, #184]	; (8006008 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f56:	ee07 3a90 	vmov	s15, r3
 8005f5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005f5e:	ed97 6a01 	vldr	s12, [r7, #4]
 8005f62:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8006018 <HAL_RCC_GetSysClockFreq+0x20c>
 8005f66:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005f6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005f72:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f7a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005f7e:	e024      	b.n	8005fca <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f82:	ee07 3a90 	vmov	s15, r3
 8005f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	ee07 3a90 	vmov	s15, r3
 8005f90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005f98:	4b1b      	ldr	r3, [pc, #108]	; (8006008 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fa0:	ee07 3a90 	vmov	s15, r3
 8005fa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005fa8:	ed97 6a01 	vldr	s12, [r7, #4]
 8005fac:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8006018 <HAL_RCC_GetSysClockFreq+0x20c>
 8005fb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005fb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005fb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005fc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fc4:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005fc8:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005fca:	4b0f      	ldr	r3, [pc, #60]	; (8006008 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fce:	0e1b      	lsrs	r3, r3, #24
 8005fd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	ee07 3a90 	vmov	s15, r3
 8005fde:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005fe2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005fe6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005fea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fee:	ee17 3a90 	vmov	r3, s15
 8005ff2:	623b      	str	r3, [r7, #32]
 8005ff4:	e001      	b.n	8005ffa <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	372c      	adds	r7, #44	; 0x2c
 8006000:	46bd      	mov	sp, r7
 8006002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006006:	4770      	bx	lr
 8006008:	46020c00 	.word	0x46020c00
 800600c:	0800c6f0 	.word	0x0800c6f0
 8006010:	00f42400 	.word	0x00f42400
 8006014:	4b742400 	.word	0x4b742400
 8006018:	46000000 	.word	0x46000000

0800601c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006020:	f7ff fef4 	bl	8005e0c <HAL_RCC_GetSysClockFreq>
 8006024:	4602      	mov	r2, r0
 8006026:	4b07      	ldr	r3, [pc, #28]	; (8006044 <HAL_RCC_GetHCLKFreq+0x28>)
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	f003 030f 	and.w	r3, r3, #15
 800602e:	4906      	ldr	r1, [pc, #24]	; (8006048 <HAL_RCC_GetHCLKFreq+0x2c>)
 8006030:	5ccb      	ldrb	r3, [r1, r3]
 8006032:	fa22 f303 	lsr.w	r3, r2, r3
 8006036:	4a05      	ldr	r2, [pc, #20]	; (800604c <HAL_RCC_GetHCLKFreq+0x30>)
 8006038:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800603a:	4b04      	ldr	r3, [pc, #16]	; (800604c <HAL_RCC_GetHCLKFreq+0x30>)
 800603c:	681b      	ldr	r3, [r3, #0]
}
 800603e:	4618      	mov	r0, r3
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	46020c00 	.word	0x46020c00
 8006048:	0800c6d8 	.word	0x0800c6d8
 800604c:	20000000 	.word	0x20000000

08006050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8006054:	f7ff ffe2 	bl	800601c <HAL_RCC_GetHCLKFreq>
 8006058:	4602      	mov	r2, r0
 800605a:	4b05      	ldr	r3, [pc, #20]	; (8006070 <HAL_RCC_GetPCLK1Freq+0x20>)
 800605c:	6a1b      	ldr	r3, [r3, #32]
 800605e:	091b      	lsrs	r3, r3, #4
 8006060:	f003 0307 	and.w	r3, r3, #7
 8006064:	4903      	ldr	r1, [pc, #12]	; (8006074 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006066:	5ccb      	ldrb	r3, [r1, r3]
 8006068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800606c:	4618      	mov	r0, r3
 800606e:	bd80      	pop	{r7, pc}
 8006070:	46020c00 	.word	0x46020c00
 8006074:	0800c6e8 	.word	0x0800c6e8

08006078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800607c:	f7ff ffce 	bl	800601c <HAL_RCC_GetHCLKFreq>
 8006080:	4602      	mov	r2, r0
 8006082:	4b05      	ldr	r3, [pc, #20]	; (8006098 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	0a1b      	lsrs	r3, r3, #8
 8006088:	f003 0307 	and.w	r3, r3, #7
 800608c:	4903      	ldr	r1, [pc, #12]	; (800609c <HAL_RCC_GetPCLK2Freq+0x24>)
 800608e:	5ccb      	ldrb	r3, [r1, r3]
 8006090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006094:	4618      	mov	r0, r3
 8006096:	bd80      	pop	{r7, pc}
 8006098:	46020c00 	.word	0x46020c00
 800609c:	0800c6e8 	.word	0x0800c6e8

080060a0 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80060a4:	f7ff ffba 	bl	800601c <HAL_RCC_GetHCLKFreq>
 80060a8:	4602      	mov	r2, r0
 80060aa:	4b05      	ldr	r3, [pc, #20]	; (80060c0 <HAL_RCC_GetPCLK3Freq+0x20>)
 80060ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ae:	091b      	lsrs	r3, r3, #4
 80060b0:	f003 0307 	and.w	r3, r3, #7
 80060b4:	4903      	ldr	r1, [pc, #12]	; (80060c4 <HAL_RCC_GetPCLK3Freq+0x24>)
 80060b6:	5ccb      	ldrb	r3, [r1, r3]
 80060b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060bc:	4618      	mov	r0, r3
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	46020c00 	.word	0x46020c00
 80060c4:	0800c6e8 	.word	0x0800c6e8

080060c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b086      	sub	sp, #24
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80060d0:	4b3e      	ldr	r3, [pc, #248]	; (80061cc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80060d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060d6:	f003 0304 	and.w	r3, r3, #4
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d003      	beq.n	80060e6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80060de:	f7fe fd4f 	bl	8004b80 <HAL_PWREx_GetVoltageRange>
 80060e2:	6178      	str	r0, [r7, #20]
 80060e4:	e019      	b.n	800611a <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80060e6:	4b39      	ldr	r3, [pc, #228]	; (80061cc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80060e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060ec:	4a37      	ldr	r2, [pc, #220]	; (80061cc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80060ee:	f043 0304 	orr.w	r3, r3, #4
 80060f2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80060f6:	4b35      	ldr	r3, [pc, #212]	; (80061cc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80060f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80060fc:	f003 0304 	and.w	r3, r3, #4
 8006100:	60fb      	str	r3, [r7, #12]
 8006102:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006104:	f7fe fd3c 	bl	8004b80 <HAL_PWREx_GetVoltageRange>
 8006108:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800610a:	4b30      	ldr	r3, [pc, #192]	; (80061cc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800610c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006110:	4a2e      	ldr	r2, [pc, #184]	; (80061cc <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006112:	f023 0304 	bic.w	r3, r3, #4
 8006116:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006120:	d003      	beq.n	800612a <RCC_SetFlashLatencyFromMSIRange+0x62>
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006128:	d109      	bne.n	800613e <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006130:	d202      	bcs.n	8006138 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8006132:	2301      	movs	r3, #1
 8006134:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006136:	e033      	b.n	80061a0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8006138:	2300      	movs	r3, #0
 800613a:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800613c:	e030      	b.n	80061a0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006144:	d208      	bcs.n	8006158 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800614c:	d102      	bne.n	8006154 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800614e:	2303      	movs	r3, #3
 8006150:	613b      	str	r3, [r7, #16]
 8006152:	e025      	b.n	80061a0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8006154:	2301      	movs	r3, #1
 8006156:	e035      	b.n	80061c4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800615e:	d90f      	bls.n	8006180 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d109      	bne.n	800617a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800616c:	d902      	bls.n	8006174 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800616e:	2300      	movs	r3, #0
 8006170:	613b      	str	r3, [r7, #16]
 8006172:	e015      	b.n	80061a0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8006174:	2301      	movs	r3, #1
 8006176:	613b      	str	r3, [r7, #16]
 8006178:	e012      	b.n	80061a0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800617a:	2300      	movs	r3, #0
 800617c:	613b      	str	r3, [r7, #16]
 800617e:	e00f      	b.n	80061a0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006186:	d109      	bne.n	800619c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800618e:	d102      	bne.n	8006196 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8006190:	2301      	movs	r3, #1
 8006192:	613b      	str	r3, [r7, #16]
 8006194:	e004      	b.n	80061a0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8006196:	2302      	movs	r3, #2
 8006198:	613b      	str	r3, [r7, #16]
 800619a:	e001      	b.n	80061a0 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800619c:	2301      	movs	r3, #1
 800619e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80061a0:	4b0b      	ldr	r3, [pc, #44]	; (80061d0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f023 020f 	bic.w	r2, r3, #15
 80061a8:	4909      	ldr	r1, [pc, #36]	; (80061d0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80061b0:	4b07      	ldr	r3, [pc, #28]	; (80061d0 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 030f 	and.w	r3, r3, #15
 80061b8:	693a      	ldr	r2, [r7, #16]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d001      	beq.n	80061c2 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80061be:	2301      	movs	r3, #1
 80061c0:	e000      	b.n	80061c4 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3718      	adds	r7, #24
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}
 80061cc:	46020c00 	.word	0x46020c00
 80061d0:	40022000 	.word	0x40022000

080061d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80061d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80061d8:	b0ba      	sub	sp, #232	; 0xe8
 80061da:	af00      	add	r7, sp, #0
 80061dc:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80061e0:	2300      	movs	r3, #0
 80061e2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80061e6:	2300      	movs	r3, #0
 80061e8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f4:	f002 0401 	and.w	r4, r2, #1
 80061f8:	2500      	movs	r5, #0
 80061fa:	ea54 0305 	orrs.w	r3, r4, r5
 80061fe:	d00b      	beq.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8006200:	4bcb      	ldr	r3, [pc, #812]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006202:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006206:	f023 0103 	bic.w	r1, r3, #3
 800620a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800620e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006210:	4ac7      	ldr	r2, [pc, #796]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006212:	430b      	orrs	r3, r1
 8006214:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006218:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800621c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006220:	f002 0802 	and.w	r8, r2, #2
 8006224:	f04f 0900 	mov.w	r9, #0
 8006228:	ea58 0309 	orrs.w	r3, r8, r9
 800622c:	d00b      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800622e:	4bc0      	ldr	r3, [pc, #768]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006234:	f023 010c 	bic.w	r1, r3, #12
 8006238:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800623c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800623e:	4abc      	ldr	r2, [pc, #752]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006240:	430b      	orrs	r3, r1
 8006242:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006246:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800624a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800624e:	f002 0a04 	and.w	sl, r2, #4
 8006252:	f04f 0b00 	mov.w	fp, #0
 8006256:	ea5a 030b 	orrs.w	r3, sl, fp
 800625a:	d00b      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800625c:	4bb4      	ldr	r3, [pc, #720]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800625e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006262:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006266:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800626a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800626c:	4ab0      	ldr	r2, [pc, #704]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800626e:	430b      	orrs	r3, r1
 8006270:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006274:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800627c:	f002 0308 	and.w	r3, r2, #8
 8006280:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006284:	2300      	movs	r3, #0
 8006286:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800628a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800628e:	460b      	mov	r3, r1
 8006290:	4313      	orrs	r3, r2
 8006292:	d00b      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8006294:	4ba6      	ldr	r3, [pc, #664]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006296:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800629a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800629e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062a4:	4aa2      	ldr	r2, [pc, #648]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062a6:	430b      	orrs	r3, r1
 80062a8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80062ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b4:	f002 0310 	and.w	r3, r2, #16
 80062b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80062bc:	2300      	movs	r3, #0
 80062be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062c2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80062c6:	460b      	mov	r3, r1
 80062c8:	4313      	orrs	r3, r2
 80062ca:	d00b      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80062cc:	4b98      	ldr	r3, [pc, #608]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80062d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062dc:	4a94      	ldr	r2, [pc, #592]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062de:	430b      	orrs	r3, r1
 80062e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80062e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ec:	f002 0320 	and.w	r3, r2, #32
 80062f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062f4:	2300      	movs	r3, #0
 80062f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80062fa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80062fe:	460b      	mov	r3, r1
 8006300:	4313      	orrs	r3, r2
 8006302:	d00b      	beq.n	800631c <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006304:	4b8a      	ldr	r3, [pc, #552]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006306:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800630a:	f023 0107 	bic.w	r1, r3, #7
 800630e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006312:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006314:	4a86      	ldr	r2, [pc, #536]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006316:	430b      	orrs	r3, r1
 8006318:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800631c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006324:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006328:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800632c:	2300      	movs	r3, #0
 800632e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006332:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006336:	460b      	mov	r3, r1
 8006338:	4313      	orrs	r3, r2
 800633a:	d00b      	beq.n	8006354 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 800633c:	4b7c      	ldr	r3, [pc, #496]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800633e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006342:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8006346:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800634a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800634c:	4a78      	ldr	r2, [pc, #480]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800634e:	430b      	orrs	r3, r1
 8006350:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006354:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800635c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006360:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006364:	2300      	movs	r3, #0
 8006366:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800636a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800636e:	460b      	mov	r3, r1
 8006370:	4313      	orrs	r3, r2
 8006372:	d00b      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006374:	4b6e      	ldr	r3, [pc, #440]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006376:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800637a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800637e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006384:	4a6a      	ldr	r2, [pc, #424]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006386:	430b      	orrs	r3, r1
 8006388:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800638c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006394:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8006398:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800639c:	2300      	movs	r3, #0
 800639e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80063a2:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80063a6:	460b      	mov	r3, r1
 80063a8:	4313      	orrs	r3, r2
 80063aa:	d00b      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80063ac:	4b60      	ldr	r3, [pc, #384]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80063b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80063b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063bc:	4a5c      	ldr	r2, [pc, #368]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063be:	430b      	orrs	r3, r1
 80063c0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80063c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063cc:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80063d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80063d4:	2300      	movs	r3, #0
 80063d6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80063da:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80063de:	460b      	mov	r3, r1
 80063e0:	4313      	orrs	r3, r2
 80063e2:	d00b      	beq.n	80063fc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80063e4:	4b52      	ldr	r3, [pc, #328]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80063ea:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 80063ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063f4:	4a4e      	ldr	r2, [pc, #312]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063f6:	430b      	orrs	r3, r1
 80063f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80063fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006404:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8006408:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800640c:	2300      	movs	r3, #0
 800640e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006412:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006416:	460b      	mov	r3, r1
 8006418:	4313      	orrs	r3, r2
 800641a:	d00b      	beq.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 800641c:	4b44      	ldr	r3, [pc, #272]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800641e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006422:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8006426:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800642a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800642c:	4a40      	ldr	r2, [pc, #256]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800642e:	430b      	orrs	r3, r1
 8006430:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006434:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643c:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006440:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006444:	2300      	movs	r3, #0
 8006446:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800644a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800644e:	460b      	mov	r3, r1
 8006450:	4313      	orrs	r3, r2
 8006452:	d00b      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006454:	4b36      	ldr	r3, [pc, #216]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006456:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800645a:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800645e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006462:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006464:	4a32      	ldr	r2, [pc, #200]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006466:	430b      	orrs	r3, r1
 8006468:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800646c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006474:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006478:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800647c:	2300      	movs	r3, #0
 800647e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006482:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006486:	460b      	mov	r3, r1
 8006488:	4313      	orrs	r3, r2
 800648a:	d00c      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800648c:	4b28      	ldr	r3, [pc, #160]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800648e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006492:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006496:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800649a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800649e:	4a24      	ldr	r2, [pc, #144]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064a0:	430b      	orrs	r3, r1
 80064a2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80064a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ae:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80064b2:	67bb      	str	r3, [r7, #120]	; 0x78
 80064b4:	2300      	movs	r3, #0
 80064b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80064b8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80064bc:	460b      	mov	r3, r1
 80064be:	4313      	orrs	r3, r2
 80064c0:	d04f      	beq.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80064c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064ca:	2b80      	cmp	r3, #128	; 0x80
 80064cc:	d02d      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x356>
 80064ce:	2b80      	cmp	r3, #128	; 0x80
 80064d0:	d827      	bhi.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80064d2:	2b60      	cmp	r3, #96	; 0x60
 80064d4:	d02e      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80064d6:	2b60      	cmp	r3, #96	; 0x60
 80064d8:	d823      	bhi.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80064da:	2b40      	cmp	r3, #64	; 0x40
 80064dc:	d006      	beq.n	80064ec <HAL_RCCEx_PeriphCLKConfig+0x318>
 80064de:	2b40      	cmp	r3, #64	; 0x40
 80064e0:	d81f      	bhi.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d009      	beq.n	80064fa <HAL_RCCEx_PeriphCLKConfig+0x326>
 80064e6:	2b20      	cmp	r3, #32
 80064e8:	d011      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80064ea:	e01a      	b.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80064ec:	4b10      	ldr	r3, [pc, #64]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f0:	4a0f      	ldr	r2, [pc, #60]	; (8006530 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80064f6:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80064f8:	e01d      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80064fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064fe:	3308      	adds	r3, #8
 8006500:	4618      	mov	r0, r3
 8006502:	f002 f981 	bl	8008808 <RCCEx_PLL2_Config>
 8006506:	4603      	mov	r3, r0
 8006508:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800650c:	e013      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800650e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006512:	332c      	adds	r3, #44	; 0x2c
 8006514:	4618      	mov	r0, r3
 8006516:	f002 fa0f 	bl	8008938 <RCCEx_PLL3_Config>
 800651a:	4603      	mov	r3, r0
 800651c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006520:	e009      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006522:	2301      	movs	r3, #1
 8006524:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006528:	e005      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800652a:	bf00      	nop
 800652c:	e003      	b.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800652e:	bf00      	nop
 8006530:	46020c00 	.word	0x46020c00
        break;
 8006534:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006536:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10d      	bne.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800653e:	4bb6      	ldr	r3, [pc, #728]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006540:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006544:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8006548:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800654c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006550:	4ab1      	ldr	r2, [pc, #708]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006552:	430b      	orrs	r3, r1
 8006554:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006558:	e003      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800655a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800655e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006562:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800656e:	673b      	str	r3, [r7, #112]	; 0x70
 8006570:	2300      	movs	r3, #0
 8006572:	677b      	str	r3, [r7, #116]	; 0x74
 8006574:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006578:	460b      	mov	r3, r1
 800657a:	4313      	orrs	r3, r2
 800657c:	d053      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800657e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006582:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800658a:	d033      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800658c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006590:	d82c      	bhi.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006592:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006596:	d02f      	beq.n	80065f8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8006598:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800659c:	d826      	bhi.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x418>
 800659e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065a2:	d008      	beq.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80065a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065a8:	d820      	bhi.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x418>
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 80065ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065b2:	d011      	beq.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80065b4:	e01a      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80065b6:	4b98      	ldr	r3, [pc, #608]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80065b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ba:	4a97      	ldr	r2, [pc, #604]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80065bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065c0:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80065c2:	e01a      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80065c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065c8:	3308      	adds	r3, #8
 80065ca:	4618      	mov	r0, r3
 80065cc:	f002 f91c 	bl	8008808 <RCCEx_PLL2_Config>
 80065d0:	4603      	mov	r3, r0
 80065d2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80065d6:	e010      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80065d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065dc:	332c      	adds	r3, #44	; 0x2c
 80065de:	4618      	mov	r0, r3
 80065e0:	f002 f9aa 	bl	8008938 <RCCEx_PLL3_Config>
 80065e4:	4603      	mov	r3, r0
 80065e6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80065ea:	e006      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80065f2:	e002      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80065f4:	bf00      	nop
 80065f6:	e000      	b.n	80065fa <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80065f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065fa:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d10d      	bne.n	800661e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8006602:	4b85      	ldr	r3, [pc, #532]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006604:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006608:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800660c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006610:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006614:	4a80      	ldr	r2, [pc, #512]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006616:	430b      	orrs	r3, r1
 8006618:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800661c:	e003      	b.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800661e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006622:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8006626:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800662a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662e:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8006632:	66bb      	str	r3, [r7, #104]	; 0x68
 8006634:	2300      	movs	r3, #0
 8006636:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006638:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800663c:	460b      	mov	r3, r1
 800663e:	4313      	orrs	r3, r2
 8006640:	d046      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006642:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006646:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800664a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800664e:	d028      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006650:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006654:	d821      	bhi.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006656:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800665a:	d022      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800665c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006660:	d81b      	bhi.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006662:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006666:	d01c      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006668:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800666c:	d815      	bhi.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800666e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006672:	d008      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006678:	d80f      	bhi.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800667a:	2b00      	cmp	r3, #0
 800667c:	d011      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800667e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006682:	d00e      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006684:	e009      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006686:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800668a:	3308      	adds	r3, #8
 800668c:	4618      	mov	r0, r3
 800668e:	f002 f8bb 	bl	8008808 <RCCEx_PLL2_Config>
 8006692:	4603      	mov	r3, r0
 8006694:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006698:	e004      	b.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80066a0:	e000      	b.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 80066a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066a4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10d      	bne.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80066ac:	4b5a      	ldr	r3, [pc, #360]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80066ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80066b2:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80066b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066ba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80066be:	4a56      	ldr	r2, [pc, #344]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80066c0:	430b      	orrs	r3, r1
 80066c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80066c6:	e003      	b.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80066cc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80066d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d8:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80066dc:	663b      	str	r3, [r7, #96]	; 0x60
 80066de:	2300      	movs	r3, #0
 80066e0:	667b      	str	r3, [r7, #100]	; 0x64
 80066e2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80066e6:	460b      	mov	r3, r1
 80066e8:	4313      	orrs	r3, r2
 80066ea:	d03f      	beq.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80066ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066f4:	2b04      	cmp	r3, #4
 80066f6:	d81e      	bhi.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x562>
 80066f8:	a201      	add	r2, pc, #4	; (adr r2, 8006700 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 80066fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fe:	bf00      	nop
 8006700:	0800673f 	.word	0x0800673f
 8006704:	08006715 	.word	0x08006715
 8006708:	08006723 	.word	0x08006723
 800670c:	0800673f 	.word	0x0800673f
 8006710:	0800673f 	.word	0x0800673f
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006714:	4b40      	ldr	r3, [pc, #256]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006718:	4a3f      	ldr	r2, [pc, #252]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800671a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800671e:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006720:	e00e      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006722:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006726:	332c      	adds	r3, #44	; 0x2c
 8006728:	4618      	mov	r0, r3
 800672a:	f002 f905 	bl	8008938 <RCCEx_PLL3_Config>
 800672e:	4603      	mov	r3, r0
 8006730:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006734:	e004      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800673c:	e000      	b.n	8006740 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800673e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006740:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006744:	2b00      	cmp	r3, #0
 8006746:	d10d      	bne.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8006748:	4b33      	ldr	r3, [pc, #204]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800674a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800674e:	f023 0107 	bic.w	r1, r3, #7
 8006752:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800675a:	4a2f      	ldr	r2, [pc, #188]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800675c:	430b      	orrs	r3, r1
 800675e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006762:	e003      	b.n	800676c <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006764:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006768:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800676c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006774:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006778:	65bb      	str	r3, [r7, #88]	; 0x58
 800677a:	2300      	movs	r3, #0
 800677c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800677e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006782:	460b      	mov	r3, r1
 8006784:	4313      	orrs	r3, r2
 8006786:	d04d      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8006788:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800678c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006790:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006794:	d028      	beq.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8006796:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800679a:	d821      	bhi.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800679c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80067a0:	d024      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x618>
 80067a2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80067a6:	d81b      	bhi.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80067a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067ac:	d00e      	beq.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 80067ae:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80067b2:	d815      	bhi.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d01b      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 80067b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067bc:	d110      	bne.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80067be:	4b16      	ldr	r3, [pc, #88]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80067c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c2:	4a15      	ldr	r2, [pc, #84]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80067c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067c8:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80067ca:	e012      	b.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80067cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067d0:	332c      	adds	r3, #44	; 0x2c
 80067d2:	4618      	mov	r0, r3
 80067d4:	f002 f8b0 	bl	8008938 <RCCEx_PLL3_Config>
 80067d8:	4603      	mov	r3, r0
 80067da:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80067de:	e008      	b.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80067e6:	e004      	b.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80067e8:	bf00      	nop
 80067ea:	e002      	b.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80067ec:	bf00      	nop
 80067ee:	e000      	b.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80067f0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80067f2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d110      	bne.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80067fa:	4b07      	ldr	r3, [pc, #28]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80067fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006800:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8006804:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006808:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800680c:	4a02      	ldr	r2, [pc, #8]	; (8006818 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800680e:	430b      	orrs	r3, r1
 8006810:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006814:	e006      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8006816:	bf00      	nop
 8006818:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 800681c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006820:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006824:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800682c:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8006830:	653b      	str	r3, [r7, #80]	; 0x50
 8006832:	2300      	movs	r3, #0
 8006834:	657b      	str	r3, [r7, #84]	; 0x54
 8006836:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800683a:	460b      	mov	r3, r1
 800683c:	4313      	orrs	r3, r2
 800683e:	f000 80b5 	beq.w	80069ac <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006842:	2300      	movs	r3, #0
 8006844:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006848:	4b9d      	ldr	r3, [pc, #628]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800684a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800684e:	f003 0304 	and.w	r3, r3, #4
 8006852:	2b00      	cmp	r3, #0
 8006854:	d113      	bne.n	800687e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006856:	4b9a      	ldr	r3, [pc, #616]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006858:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800685c:	4a98      	ldr	r2, [pc, #608]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800685e:	f043 0304 	orr.w	r3, r3, #4
 8006862:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006866:	4b96      	ldr	r3, [pc, #600]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006868:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800686c:	f003 0304 	and.w	r3, r3, #4
 8006870:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006874:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8006878:	2301      	movs	r3, #1
 800687a:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800687e:	4b91      	ldr	r3, [pc, #580]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006882:	4a90      	ldr	r2, [pc, #576]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006884:	f043 0301 	orr.w	r3, r3, #1
 8006888:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800688a:	f7fc f9cb 	bl	8002c24 <HAL_GetTick>
 800688e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006892:	e00b      	b.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006894:	f7fc f9c6 	bl	8002c24 <HAL_GetTick>
 8006898:	4602      	mov	r2, r0
 800689a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	2b02      	cmp	r3, #2
 80068a2:	d903      	bls.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80068aa:	e005      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80068ac:	4b85      	ldr	r3, [pc, #532]	; (8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80068ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b0:	f003 0301 	and.w	r3, r3, #1
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d0ed      	beq.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 80068b8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d165      	bne.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80068c0:	4b7f      	ldr	r3, [pc, #508]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80068c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80068c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80068ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d023      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x74a>
 80068d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068da:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80068de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d01b      	beq.n	800691e <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80068e6:	4b76      	ldr	r3, [pc, #472]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80068e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80068ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80068f4:	4b72      	ldr	r3, [pc, #456]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80068f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80068fa:	4a71      	ldr	r2, [pc, #452]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80068fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006900:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006904:	4b6e      	ldr	r3, [pc, #440]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006906:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800690a:	4a6d      	ldr	r2, [pc, #436]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800690c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006910:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006914:	4a6a      	ldr	r2, [pc, #424]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800691a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800691e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006922:	f003 0301 	and.w	r3, r3, #1
 8006926:	2b00      	cmp	r3, #0
 8006928:	d019      	beq.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800692a:	f7fc f97b 	bl	8002c24 <HAL_GetTick>
 800692e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006932:	e00d      	b.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006934:	f7fc f976 	bl	8002c24 <HAL_GetTick>
 8006938:	4602      	mov	r2, r0
 800693a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800693e:	1ad2      	subs	r2, r2, r3
 8006940:	f241 3388 	movw	r3, #5000	; 0x1388
 8006944:	429a      	cmp	r2, r3
 8006946:	d903      	bls.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 800694e:	e006      	b.n	800695e <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006950:	4b5b      	ldr	r3, [pc, #364]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006952:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006956:	f003 0302 	and.w	r3, r3, #2
 800695a:	2b00      	cmp	r3, #0
 800695c:	d0ea      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800695e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d10d      	bne.n	8006982 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006966:	4b56      	ldr	r3, [pc, #344]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006968:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800696c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006970:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006974:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006978:	4a51      	ldr	r2, [pc, #324]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800697a:	430b      	orrs	r3, r1
 800697c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006980:	e008      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006982:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006986:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 800698a:	e003      	b.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800698c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006990:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006994:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8006998:	2b01      	cmp	r3, #1
 800699a:	d107      	bne.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800699c:	4b48      	ldr	r3, [pc, #288]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800699e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069a2:	4a47      	ldr	r2, [pc, #284]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80069a4:	f023 0304 	bic.w	r3, r3, #4
 80069a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80069ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80069b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80069ba:	2300      	movs	r3, #0
 80069bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069be:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80069c2:	460b      	mov	r3, r1
 80069c4:	4313      	orrs	r3, r2
 80069c6:	d042      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80069c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80069d0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80069d4:	d022      	beq.n	8006a1c <HAL_RCCEx_PeriphCLKConfig+0x848>
 80069d6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80069da:	d81b      	bhi.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80069dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069e0:	d011      	beq.n	8006a06 <HAL_RCCEx_PeriphCLKConfig+0x832>
 80069e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069e6:	d815      	bhi.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d019      	beq.n	8006a20 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 80069ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069f0:	d110      	bne.n	8006a14 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80069f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069f6:	3308      	adds	r3, #8
 80069f8:	4618      	mov	r0, r3
 80069fa:	f001 ff05 	bl	8008808 <RCCEx_PLL2_Config>
 80069fe:	4603      	mov	r3, r0
 8006a00:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006a04:	e00d      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a06:	4b2e      	ldr	r3, [pc, #184]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0a:	4a2d      	ldr	r2, [pc, #180]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a10:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006a12:	e006      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006a1a:	e002      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006a1c:	bf00      	nop
 8006a1e:	e000      	b.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006a20:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006a22:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10d      	bne.n	8006a46 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8006a2a:	4b25      	ldr	r3, [pc, #148]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006a30:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006a34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006a3c:	4a20      	ldr	r2, [pc, #128]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a3e:	430b      	orrs	r3, r1
 8006a40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006a44:	e003      	b.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a46:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006a4a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006a4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a56:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006a5a:	643b      	str	r3, [r7, #64]	; 0x40
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	647b      	str	r3, [r7, #68]	; 0x44
 8006a60:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006a64:	460b      	mov	r3, r1
 8006a66:	4313      	orrs	r3, r2
 8006a68:	d032      	beq.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006a6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a76:	d00b      	beq.n	8006a90 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006a78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a7c:	d804      	bhi.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d008      	beq.n	8006a94 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a86:	d007      	beq.n	8006a98 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006a8e:	e004      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006a90:	bf00      	nop
 8006a92:	e002      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006a94:	bf00      	nop
 8006a96:	e000      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006a98:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006a9a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d112      	bne.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006aa2:	4b07      	ldr	r3, [pc, #28]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006aa4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006aa8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006aac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ab0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ab4:	4a02      	ldr	r2, [pc, #8]	; (8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006ab6:	430b      	orrs	r3, r1
 8006ab8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006abc:	e008      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8006abe:	bf00      	nop
 8006ac0:	46020c00 	.word	0x46020c00
 8006ac4:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006acc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8006ad0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ad8:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006adc:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ade:	2300      	movs	r3, #0
 8006ae0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ae2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	d00c      	beq.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8006aec:	4b98      	ldr	r3, [pc, #608]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006aee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006af2:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8006af6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006afa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006afe:	4a94      	ldr	r2, [pc, #592]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006b00:	430b      	orrs	r3, r1
 8006b02:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006b06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b0e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006b12:	633b      	str	r3, [r7, #48]	; 0x30
 8006b14:	2300      	movs	r3, #0
 8006b16:	637b      	str	r3, [r7, #52]	; 0x34
 8006b18:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	4313      	orrs	r3, r2
 8006b20:	d019      	beq.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006b22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b2e:	d105      	bne.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006b30:	4b87      	ldr	r3, [pc, #540]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b34:	4a86      	ldr	r2, [pc, #536]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b3a:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8006b3c:	4b84      	ldr	r3, [pc, #528]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006b3e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006b42:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006b46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b4e:	4a80      	ldr	r2, [pc, #512]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006b50:	430b      	orrs	r3, r1
 8006b52:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006b56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b5e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b64:	2300      	movs	r3, #0
 8006b66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b68:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006b6c:	460b      	mov	r3, r1
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	d00c      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006b72:	4b77      	ldr	r3, [pc, #476]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006b78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006b84:	4972      	ldr	r1, [pc, #456]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006b86:	4313      	orrs	r3, r2
 8006b88:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006b8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b94:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006b98:	623b      	str	r3, [r7, #32]
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	627b      	str	r3, [r7, #36]	; 0x24
 8006b9e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006ba2:	460b      	mov	r3, r1
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	d00c      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006ba8:	4b69      	ldr	r3, [pc, #420]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006bae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006bb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bb6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006bba:	4965      	ldr	r1, [pc, #404]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006bbc:	4313      	orrs	r3, r2
 8006bbe:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006bc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bca:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006bce:	61bb      	str	r3, [r7, #24]
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	61fb      	str	r3, [r7, #28]
 8006bd4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006bd8:	460b      	mov	r3, r1
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	d00c      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006bde:	4b5c      	ldr	r3, [pc, #368]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006be0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006be4:	f023 0218 	bic.w	r2, r3, #24
 8006be8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bec:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006bf0:	4957      	ldr	r1, [pc, #348]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006bf8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c00:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8006c04:	613b      	str	r3, [r7, #16]
 8006c06:	2300      	movs	r3, #0
 8006c08:	617b      	str	r3, [r7, #20]
 8006c0a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006c0e:	460b      	mov	r3, r1
 8006c10:	4313      	orrs	r3, r2
 8006c12:	d032      	beq.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006c14:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c18:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006c20:	d105      	bne.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c22:	4b4b      	ldr	r3, [pc, #300]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c26:	4a4a      	ldr	r2, [pc, #296]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c2c:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006c2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c36:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006c3a:	d108      	bne.n	8006c4e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006c3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c40:	3308      	adds	r3, #8
 8006c42:	4618      	mov	r0, r3
 8006c44:	f001 fde0 	bl	8008808 <RCCEx_PLL2_Config>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8006c4e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d10d      	bne.n	8006c72 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006c56:	4b3e      	ldr	r3, [pc, #248]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c58:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006c5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c68:	4939      	ldr	r1, [pc, #228]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8006c70:	e003      	b.n	8006c7a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c72:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006c76:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006c7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c82:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8006c86:	60bb      	str	r3, [r7, #8]
 8006c88:	2300      	movs	r3, #0
 8006c8a:	60fb      	str	r3, [r7, #12]
 8006c8c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006c90:	460b      	mov	r3, r1
 8006c92:	4313      	orrs	r3, r2
 8006c94:	d03a      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8006c96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ca2:	d00e      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8006ca4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ca8:	d815      	bhi.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d017      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006cae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006cb2:	d110      	bne.n	8006cd6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cb4:	4b26      	ldr	r3, [pc, #152]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb8:	4a25      	ldr	r2, [pc, #148]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006cba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cbe:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006cc0:	e00e      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006cc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cc6:	3308      	adds	r3, #8
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f001 fd9d 	bl	8008808 <RCCEx_PLL2_Config>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006cd4:	e004      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006cdc:	e000      	b.n	8006ce0 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8006cde:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006ce0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10d      	bne.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006ce8:	4b19      	ldr	r3, [pc, #100]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006cee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006cf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006cfa:	4915      	ldr	r1, [pc, #84]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8006d02:	e003      	b.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d04:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006d08:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006d0c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d14:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006d18:	603b      	str	r3, [r7, #0]
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	607b      	str	r3, [r7, #4]
 8006d1e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006d22:	460b      	mov	r3, r1
 8006d24:	4313      	orrs	r3, r2
 8006d26:	d00c      	beq.n	8006d42 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006d28:	4b09      	ldr	r3, [pc, #36]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006d2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d2e:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006d32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d36:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006d3a:	4905      	ldr	r1, [pc, #20]	; (8006d50 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006d42:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	37e8      	adds	r7, #232	; 0xe8
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d50:	46020c00 	.word	0x46020c00

08006d54 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006d54:	b480      	push	{r7}
 8006d56:	b089      	sub	sp, #36	; 0x24
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006d5c:	4bac      	ldr	r3, [pc, #688]	; (8007010 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d64:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006d66:	4baa      	ldr	r3, [pc, #680]	; (8007010 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d6a:	f003 0303 	and.w	r3, r3, #3
 8006d6e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006d70:	4ba7      	ldr	r3, [pc, #668]	; (8007010 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d74:	0a1b      	lsrs	r3, r3, #8
 8006d76:	f003 030f 	and.w	r3, r3, #15
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8006d7e:	4ba4      	ldr	r3, [pc, #656]	; (8007010 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d82:	f003 0310 	and.w	r3, r3, #16
 8006d86:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006d88:	4ba1      	ldr	r3, [pc, #644]	; (8007010 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d8c:	08db      	lsrs	r3, r3, #3
 8006d8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	fb02 f303 	mul.w	r3, r2, r3
 8006d98:	ee07 3a90 	vmov	s15, r3
 8006d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006da0:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	f000 8123 	beq.w	8006ff2 <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	2b03      	cmp	r3, #3
 8006db0:	d062      	beq.n	8006e78 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	2b03      	cmp	r3, #3
 8006db6:	f200 8081 	bhi.w	8006ebc <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d024      	beq.n	8006e0a <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d17a      	bne.n	8006ebc <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	ee07 3a90 	vmov	s15, r3
 8006dcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dd0:	eddf 6a90 	vldr	s13, [pc, #576]	; 8007014 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8006dd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dd8:	4b8d      	ldr	r3, [pc, #564]	; (8007010 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006de0:	ee07 3a90 	vmov	s15, r3
 8006de4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006de8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006dec:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8007018 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006df0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006df4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006df8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006e00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e04:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e08:	e08f      	b.n	8006f2a <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006e0a:	4b81      	ldr	r3, [pc, #516]	; (8007010 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d005      	beq.n	8006e22 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 8006e16:	4b7e      	ldr	r3, [pc, #504]	; (8007010 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	0f1b      	lsrs	r3, r3, #28
 8006e1c:	f003 030f 	and.w	r3, r3, #15
 8006e20:	e006      	b.n	8006e30 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8006e22:	4b7b      	ldr	r3, [pc, #492]	; (8007010 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006e24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006e28:	041b      	lsls	r3, r3, #16
 8006e2a:	0f1b      	lsrs	r3, r3, #28
 8006e2c:	f003 030f 	and.w	r3, r3, #15
 8006e30:	4a7a      	ldr	r2, [pc, #488]	; (800701c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006e32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e36:	ee07 3a90 	vmov	s15, r3
 8006e3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	ee07 3a90 	vmov	s15, r3
 8006e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e4c:	69bb      	ldr	r3, [r7, #24]
 8006e4e:	ee07 3a90 	vmov	s15, r3
 8006e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e56:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e5a:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8007018 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006e5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e76:	e058      	b.n	8006f2a <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	ee07 3a90 	vmov	s15, r3
 8006e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e82:	eddf 6a64 	vldr	s13, [pc, #400]	; 8007014 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8006e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e8a:	4b61      	ldr	r3, [pc, #388]	; (8007010 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e92:	ee07 3a90 	vmov	s15, r3
 8006e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006e9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006e9e:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8007018 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006eaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006eba:	e036      	b.n	8006f2a <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006ebc:	4b54      	ldr	r3, [pc, #336]	; (8007010 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d005      	beq.n	8006ed4 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8006ec8:	4b51      	ldr	r3, [pc, #324]	; (8007010 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	0f1b      	lsrs	r3, r3, #28
 8006ece:	f003 030f 	and.w	r3, r3, #15
 8006ed2:	e006      	b.n	8006ee2 <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8006ed4:	4b4e      	ldr	r3, [pc, #312]	; (8007010 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006ed6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006eda:	041b      	lsls	r3, r3, #16
 8006edc:	0f1b      	lsrs	r3, r3, #28
 8006ede:	f003 030f 	and.w	r3, r3, #15
 8006ee2:	4a4e      	ldr	r2, [pc, #312]	; (800701c <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ee8:	ee07 3a90 	vmov	s15, r3
 8006eec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	ee07 3a90 	vmov	s15, r3
 8006ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	ee07 3a90 	vmov	s15, r3
 8006f04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f08:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f0c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8007018 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006f10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006f20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f28:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006f2a:	4b39      	ldr	r3, [pc, #228]	; (8007010 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d017      	beq.n	8006f66 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006f36:	4b36      	ldr	r3, [pc, #216]	; (8007010 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f3a:	0a5b      	lsrs	r3, r3, #9
 8006f3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f40:	ee07 3a90 	vmov	s15, r3
 8006f44:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006f48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f4c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006f50:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f5c:	ee17 2a90 	vmov	r2, s15
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	601a      	str	r2, [r3, #0]
 8006f64:	e002      	b.n	8006f6c <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006f6c:	4b28      	ldr	r3, [pc, #160]	; (8007010 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d017      	beq.n	8006fa8 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006f78:	4b25      	ldr	r3, [pc, #148]	; (8007010 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f7c:	0c1b      	lsrs	r3, r3, #16
 8006f7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f82:	ee07 3a90 	vmov	s15, r3
 8006f86:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8006f8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006f8e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006f92:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f9e:	ee17 2a90 	vmov	r2, s15
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	605a      	str	r2, [r3, #4]
 8006fa6:	e002      	b.n	8006fae <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006fae:	4b18      	ldr	r3, [pc, #96]	; (8007010 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d017      	beq.n	8006fea <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006fba:	4b15      	ldr	r3, [pc, #84]	; (8007010 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fbe:	0e1b      	lsrs	r3, r3, #24
 8006fc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fc4:	ee07 3a90 	vmov	s15, r3
 8006fc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8006fcc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006fd0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006fd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006fd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006fdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fe0:	ee17 2a90 	vmov	r2, s15
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006fe8:	e00c      	b.n	8007004 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	609a      	str	r2, [r3, #8]
}
 8006ff0:	e008      	b.n	8007004 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	609a      	str	r2, [r3, #8]
}
 8007004:	bf00      	nop
 8007006:	3724      	adds	r7, #36	; 0x24
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	46020c00 	.word	0x46020c00
 8007014:	4b742400 	.word	0x4b742400
 8007018:	46000000 	.word	0x46000000
 800701c:	0800c6f0 	.word	0x0800c6f0

08007020 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007020:	b480      	push	{r7}
 8007022:	b089      	sub	sp, #36	; 0x24
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007028:	4bac      	ldr	r3, [pc, #688]	; (80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800702a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800702c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007030:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8007032:	4baa      	ldr	r3, [pc, #680]	; (80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007036:	f003 0303 	and.w	r3, r3, #3
 800703a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 800703c:	4ba7      	ldr	r3, [pc, #668]	; (80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800703e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007040:	0a1b      	lsrs	r3, r3, #8
 8007042:	f003 030f 	and.w	r3, r3, #15
 8007046:	3301      	adds	r3, #1
 8007048:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800704a:	4ba4      	ldr	r3, [pc, #656]	; (80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800704c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800704e:	f003 0310 	and.w	r3, r3, #16
 8007052:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007054:	4ba1      	ldr	r3, [pc, #644]	; (80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007058:	08db      	lsrs	r3, r3, #3
 800705a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	fb02 f303 	mul.w	r3, r2, r3
 8007064:	ee07 3a90 	vmov	s15, r3
 8007068:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800706c:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	2b00      	cmp	r3, #0
 8007074:	f000 8123 	beq.w	80072be <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	2b03      	cmp	r3, #3
 800707c:	d062      	beq.n	8007144 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	2b03      	cmp	r3, #3
 8007082:	f200 8081 	bhi.w	8007188 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	2b01      	cmp	r3, #1
 800708a:	d024      	beq.n	80070d6 <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	2b02      	cmp	r3, #2
 8007090:	d17a      	bne.n	8007188 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	ee07 3a90 	vmov	s15, r3
 8007098:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800709c:	eddf 6a90 	vldr	s13, [pc, #576]	; 80072e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 80070a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80070a4:	4b8d      	ldr	r3, [pc, #564]	; (80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80070a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ac:	ee07 3a90 	vmov	s15, r3
 80070b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80070b4:	ed97 6a02 	vldr	s12, [r7, #8]
 80070b8:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80072e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80070bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80070c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80070c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80070c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80070cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80070d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80070d4:	e08f      	b.n	80071f6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80070d6:	4b81      	ldr	r3, [pc, #516]	; (80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d005      	beq.n	80070ee <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 80070e2:	4b7e      	ldr	r3, [pc, #504]	; (80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	0f1b      	lsrs	r3, r3, #28
 80070e8:	f003 030f 	and.w	r3, r3, #15
 80070ec:	e006      	b.n	80070fc <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 80070ee:	4b7b      	ldr	r3, [pc, #492]	; (80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80070f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80070f4:	041b      	lsls	r3, r3, #16
 80070f6:	0f1b      	lsrs	r3, r3, #28
 80070f8:	f003 030f 	and.w	r3, r3, #15
 80070fc:	4a7a      	ldr	r2, [pc, #488]	; (80072e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80070fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007102:	ee07 3a90 	vmov	s15, r3
 8007106:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	ee07 3a90 	vmov	s15, r3
 8007110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007114:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	ee07 3a90 	vmov	s15, r3
 800711e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007122:	ed97 6a02 	vldr	s12, [r7, #8]
 8007126:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80072e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800712a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800712e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007136:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800713a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800713e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007142:	e058      	b.n	80071f6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	ee07 3a90 	vmov	s15, r3
 800714a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800714e:	eddf 6a64 	vldr	s13, [pc, #400]	; 80072e0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8007152:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007156:	4b61      	ldr	r3, [pc, #388]	; (80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800715a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800715e:	ee07 3a90 	vmov	s15, r3
 8007162:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007166:	ed97 6a02 	vldr	s12, [r7, #8]
 800716a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80072e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800716e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007172:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007176:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800717a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800717e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007182:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007186:	e036      	b.n	80071f6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8007188:	4b54      	ldr	r3, [pc, #336]	; (80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007190:	2b00      	cmp	r3, #0
 8007192:	d005      	beq.n	80071a0 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8007194:	4b51      	ldr	r3, [pc, #324]	; (80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007196:	689b      	ldr	r3, [r3, #8]
 8007198:	0f1b      	lsrs	r3, r3, #28
 800719a:	f003 030f 	and.w	r3, r3, #15
 800719e:	e006      	b.n	80071ae <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 80071a0:	4b4e      	ldr	r3, [pc, #312]	; (80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80071a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071a6:	041b      	lsls	r3, r3, #16
 80071a8:	0f1b      	lsrs	r3, r3, #28
 80071aa:	f003 030f 	and.w	r3, r3, #15
 80071ae:	4a4e      	ldr	r2, [pc, #312]	; (80072e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80071b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071b4:	ee07 3a90 	vmov	s15, r3
 80071b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	ee07 3a90 	vmov	s15, r3
 80071c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	ee07 3a90 	vmov	s15, r3
 80071d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071d4:	ed97 6a02 	vldr	s12, [r7, #8]
 80071d8:	eddf 5a42 	vldr	s11, [pc, #264]	; 80072e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80071dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80071ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80071f4:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80071f6:	4b39      	ldr	r3, [pc, #228]	; (80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80071f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d017      	beq.n	8007232 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007202:	4b36      	ldr	r3, [pc, #216]	; (80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007206:	0a5b      	lsrs	r3, r3, #9
 8007208:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800720c:	ee07 3a90 	vmov	s15, r3
 8007210:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8007214:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007218:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800721c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007220:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007224:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007228:	ee17 2a90 	vmov	r2, s15
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	601a      	str	r2, [r3, #0]
 8007230:	e002      	b.n	8007238 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2200      	movs	r2, #0
 8007236:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8007238:	4b28      	ldr	r3, [pc, #160]	; (80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800723a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800723c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007240:	2b00      	cmp	r3, #0
 8007242:	d017      	beq.n	8007274 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007244:	4b25      	ldr	r3, [pc, #148]	; (80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007248:	0c1b      	lsrs	r3, r3, #16
 800724a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800724e:	ee07 3a90 	vmov	s15, r3
 8007252:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8007256:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800725a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800725e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007262:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007266:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800726a:	ee17 2a90 	vmov	r2, s15
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	605a      	str	r2, [r3, #4]
 8007272:	e002      	b.n	800727a <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800727a:	4b18      	ldr	r3, [pc, #96]	; (80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800727c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007282:	2b00      	cmp	r3, #0
 8007284:	d017      	beq.n	80072b6 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007286:	4b15      	ldr	r3, [pc, #84]	; (80072dc <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800728a:	0e1b      	lsrs	r3, r3, #24
 800728c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007290:	ee07 3a90 	vmov	s15, r3
 8007294:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8007298:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800729c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80072a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80072a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072ac:	ee17 2a90 	vmov	r2, s15
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80072b4:	e00c      	b.n	80072d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	609a      	str	r2, [r3, #8]
}
 80072bc:	e008      	b.n	80072d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	2200      	movs	r2, #0
 80072c8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	609a      	str	r2, [r3, #8]
}
 80072d0:	bf00      	nop
 80072d2:	3724      	adds	r7, #36	; 0x24
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr
 80072dc:	46020c00 	.word	0x46020c00
 80072e0:	4b742400 	.word	0x4b742400
 80072e4:	46000000 	.word	0x46000000
 80072e8:	0800c6f0 	.word	0x0800c6f0

080072ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b089      	sub	sp, #36	; 0x24
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80072f4:	4bac      	ldr	r3, [pc, #688]	; (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80072f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80072fc:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80072fe:	4baa      	ldr	r3, [pc, #680]	; (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007302:	f003 0303 	and.w	r3, r3, #3
 8007306:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8007308:	4ba7      	ldr	r3, [pc, #668]	; (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800730a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800730c:	0a1b      	lsrs	r3, r3, #8
 800730e:	f003 030f 	and.w	r3, r3, #15
 8007312:	3301      	adds	r3, #1
 8007314:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8007316:	4ba4      	ldr	r3, [pc, #656]	; (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731a:	f003 0310 	and.w	r3, r3, #16
 800731e:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007320:	4ba1      	ldr	r3, [pc, #644]	; (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007324:	08db      	lsrs	r3, r3, #3
 8007326:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800732a:	68fa      	ldr	r2, [r7, #12]
 800732c:	fb02 f303 	mul.w	r3, r2, r3
 8007330:	ee07 3a90 	vmov	s15, r3
 8007334:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007338:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	2b00      	cmp	r3, #0
 8007340:	f000 8123 	beq.w	800758a <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	2b03      	cmp	r3, #3
 8007348:	d062      	beq.n	8007410 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	2b03      	cmp	r3, #3
 800734e:	f200 8081 	bhi.w	8007454 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	2b01      	cmp	r3, #1
 8007356:	d024      	beq.n	80073a2 <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 8007358:	697b      	ldr	r3, [r7, #20]
 800735a:	2b02      	cmp	r3, #2
 800735c:	d17a      	bne.n	8007454 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	ee07 3a90 	vmov	s15, r3
 8007364:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007368:	eddf 6a90 	vldr	s13, [pc, #576]	; 80075ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800736c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007370:	4b8d      	ldr	r3, [pc, #564]	; (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007378:	ee07 3a90 	vmov	s15, r3
 800737c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007380:	ed97 6a02 	vldr	s12, [r7, #8]
 8007384:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8007388:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800738c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007390:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007394:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800739c:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 80073a0:	e08f      	b.n	80074c2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80073a2:	4b81      	ldr	r3, [pc, #516]	; (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d005      	beq.n	80073ba <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 80073ae:	4b7e      	ldr	r3, [pc, #504]	; (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	0f1b      	lsrs	r3, r3, #28
 80073b4:	f003 030f 	and.w	r3, r3, #15
 80073b8:	e006      	b.n	80073c8 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 80073ba:	4b7b      	ldr	r3, [pc, #492]	; (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80073bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80073c0:	041b      	lsls	r3, r3, #16
 80073c2:	0f1b      	lsrs	r3, r3, #28
 80073c4:	f003 030f 	and.w	r3, r3, #15
 80073c8:	4a7a      	ldr	r2, [pc, #488]	; (80075b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80073ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073ce:	ee07 3a90 	vmov	s15, r3
 80073d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	ee07 3a90 	vmov	s15, r3
 80073dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	ee07 3a90 	vmov	s15, r3
 80073ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80073f2:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80073f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007402:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800740a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800740e:	e058      	b.n	80074c2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	ee07 3a90 	vmov	s15, r3
 8007416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800741a:	eddf 6a64 	vldr	s13, [pc, #400]	; 80075ac <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800741e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007422:	4b61      	ldr	r3, [pc, #388]	; (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007426:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800742a:	ee07 3a90 	vmov	s15, r3
 800742e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007432:	ed97 6a02 	vldr	s12, [r7, #8]
 8007436:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800743a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800743e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007442:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007446:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800744a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800744e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007452:	e036      	b.n	80074c2 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007454:	4b54      	ldr	r3, [pc, #336]	; (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007456:	689b      	ldr	r3, [r3, #8]
 8007458:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800745c:	2b00      	cmp	r3, #0
 800745e:	d005      	beq.n	800746c <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 8007460:	4b51      	ldr	r3, [pc, #324]	; (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	0f1b      	lsrs	r3, r3, #28
 8007466:	f003 030f 	and.w	r3, r3, #15
 800746a:	e006      	b.n	800747a <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 800746c:	4b4e      	ldr	r3, [pc, #312]	; (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800746e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007472:	041b      	lsls	r3, r3, #16
 8007474:	0f1b      	lsrs	r3, r3, #28
 8007476:	f003 030f 	and.w	r3, r3, #15
 800747a:	4a4e      	ldr	r2, [pc, #312]	; (80075b4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800747c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007480:	ee07 3a90 	vmov	s15, r3
 8007484:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	ee07 3a90 	vmov	s15, r3
 800748e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007492:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	ee07 3a90 	vmov	s15, r3
 800749c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80074a4:	eddf 5a42 	vldr	s11, [pc, #264]	; 80075b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80074a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80074b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074c0:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80074c2:	4b39      	ldr	r3, [pc, #228]	; (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80074c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d017      	beq.n	80074fe <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80074ce:	4b36      	ldr	r3, [pc, #216]	; (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80074d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074d2:	0a5b      	lsrs	r3, r3, #9
 80074d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074d8:	ee07 3a90 	vmov	s15, r3
 80074dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80074e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074e4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80074e8:	edd7 6a07 	vldr	s13, [r7, #28]
 80074ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074f4:	ee17 2a90 	vmov	r2, s15
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	601a      	str	r2, [r3, #0]
 80074fc:	e002      	b.n	8007504 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007504:	4b28      	ldr	r3, [pc, #160]	; (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007508:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800750c:	2b00      	cmp	r3, #0
 800750e:	d017      	beq.n	8007540 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007510:	4b25      	ldr	r3, [pc, #148]	; (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007512:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007514:	0c1b      	lsrs	r3, r3, #16
 8007516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800751a:	ee07 3a90 	vmov	s15, r3
 800751e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007522:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007526:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800752a:	edd7 6a07 	vldr	s13, [r7, #28]
 800752e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007536:	ee17 2a90 	vmov	r2, s15
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	605a      	str	r2, [r3, #4]
 800753e:	e002      	b.n	8007546 <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007546:	4b18      	ldr	r3, [pc, #96]	; (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800754e:	2b00      	cmp	r3, #0
 8007550:	d017      	beq.n	8007582 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007552:	4b15      	ldr	r3, [pc, #84]	; (80075a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007556:	0e1b      	lsrs	r3, r3, #24
 8007558:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800755c:	ee07 3a90 	vmov	s15, r3
 8007560:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8007564:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007568:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800756c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007570:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007574:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007578:	ee17 2a90 	vmov	r2, s15
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8007580:	e00c      	b.n	800759c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2200      	movs	r2, #0
 8007586:	609a      	str	r2, [r3, #8]
}
 8007588:	e008      	b.n	800759c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	609a      	str	r2, [r3, #8]
}
 800759c:	bf00      	nop
 800759e:	3724      	adds	r7, #36	; 0x24
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr
 80075a8:	46020c00 	.word	0x46020c00
 80075ac:	4b742400 	.word	0x4b742400
 80075b0:	46000000 	.word	0x46000000
 80075b4:	0800c6f0 	.word	0x0800c6f0

080075b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b08e      	sub	sp, #56	; 0x38
 80075bc:	af00      	add	r7, sp, #0
 80075be:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80075c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075c6:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 80075ca:	430b      	orrs	r3, r1
 80075cc:	d145      	bne.n	800765a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80075ce:	4ba7      	ldr	r3, [pc, #668]	; (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80075d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075d8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80075da:	4ba4      	ldr	r3, [pc, #656]	; (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80075dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80075e0:	f003 0302 	and.w	r3, r3, #2
 80075e4:	2b02      	cmp	r3, #2
 80075e6:	d108      	bne.n	80075fa <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80075e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075ee:	d104      	bne.n	80075fa <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80075f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075f4:	637b      	str	r3, [r7, #52]	; 0x34
 80075f6:	f001 b8fc 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80075fa:	4b9c      	ldr	r3, [pc, #624]	; (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80075fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007600:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007604:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007608:	d114      	bne.n	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800760a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007610:	d110      	bne.n	8007634 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007612:	4b96      	ldr	r3, [pc, #600]	; (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007614:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800761c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007620:	d103      	bne.n	800762a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8007622:	23fa      	movs	r3, #250	; 0xfa
 8007624:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007626:	f001 b8e4 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800762a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800762e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007630:	f001 b8df 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8007634:	4b8d      	ldr	r3, [pc, #564]	; (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800763c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007640:	d107      	bne.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8007642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007644:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007648:	d103      	bne.n	8007652 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800764a:	4b89      	ldr	r3, [pc, #548]	; (8007870 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800764c:	637b      	str	r3, [r7, #52]	; 0x34
 800764e:	f001 b8d0 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007652:	2300      	movs	r3, #0
 8007654:	637b      	str	r3, [r7, #52]	; 0x34
 8007656:	f001 b8cc 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800765a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800765e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007662:	430b      	orrs	r3, r1
 8007664:	d151      	bne.n	800770a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007666:	4b81      	ldr	r3, [pc, #516]	; (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007668:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800766c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007670:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007674:	2b80      	cmp	r3, #128	; 0x80
 8007676:	d035      	beq.n	80076e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8007678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767a:	2b80      	cmp	r3, #128	; 0x80
 800767c:	d841      	bhi.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800767e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007680:	2b60      	cmp	r3, #96	; 0x60
 8007682:	d02a      	beq.n	80076da <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8007684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007686:	2b60      	cmp	r3, #96	; 0x60
 8007688:	d83b      	bhi.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800768a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800768c:	2b40      	cmp	r3, #64	; 0x40
 800768e:	d009      	beq.n	80076a4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007692:	2b40      	cmp	r3, #64	; 0x40
 8007694:	d835      	bhi.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007698:	2b00      	cmp	r3, #0
 800769a:	d00c      	beq.n	80076b6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800769c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769e:	2b20      	cmp	r3, #32
 80076a0:	d012      	beq.n	80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80076a2:	e02e      	b.n	8007702 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80076a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7ff fb53 	bl	8006d54 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80076ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076b2:	f001 b89e 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80076b6:	f107 0318 	add.w	r3, r7, #24
 80076ba:	4618      	mov	r0, r3
 80076bc:	f7ff fcb0 	bl	8007020 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076c4:	f001 b895 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80076c8:	f107 030c 	add.w	r3, r7, #12
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7ff fe0d 	bl	80072ec <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076d6:	f001 b88c 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80076da:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80076de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076e0:	f001 b887 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80076e4:	4b61      	ldr	r3, [pc, #388]	; (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076f0:	d103      	bne.n	80076fa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80076f2:	4b60      	ldr	r3, [pc, #384]	; (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80076f4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80076f6:	f001 b87c 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80076fa:	2300      	movs	r3, #0
 80076fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80076fe:	f001 b878 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 8007702:	2300      	movs	r3, #0
 8007704:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007706:	f001 b874 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800770a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800770e:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8007712:	430b      	orrs	r3, r1
 8007714:	d158      	bne.n	80077c8 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007716:	4b55      	ldr	r3, [pc, #340]	; (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007718:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800771c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007720:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007728:	d03b      	beq.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800772a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007730:	d846      	bhi.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007734:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007738:	d02e      	beq.n	8007798 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800773a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007740:	d83e      	bhi.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007748:	d00b      	beq.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800774a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007750:	d836      	bhi.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00d      	beq.n	8007774 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8007758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800775e:	d012      	beq.n	8007786 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8007760:	e02e      	b.n	80077c0 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007766:	4618      	mov	r0, r3
 8007768:	f7ff faf4 	bl	8006d54 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800776c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007770:	f001 b83f 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007774:	f107 0318 	add.w	r3, r7, #24
 8007778:	4618      	mov	r0, r3
 800777a:	f7ff fc51 	bl	8007020 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007782:	f001 b836 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007786:	f107 030c 	add.w	r3, r7, #12
 800778a:	4618      	mov	r0, r3
 800778c:	f7ff fdae 	bl	80072ec <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007794:	f001 b82d 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007798:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800779c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800779e:	f001 b828 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80077a2:	4b32      	ldr	r3, [pc, #200]	; (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077ae:	d103      	bne.n	80077b8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80077b0:	4b30      	ldr	r3, [pc, #192]	; (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80077b2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80077b4:	f001 b81d 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80077b8:	2300      	movs	r3, #0
 80077ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077bc:	f001 b819 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 80077c0:	2300      	movs	r3, #0
 80077c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077c4:	f001 b815 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80077c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077cc:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80077d0:	430b      	orrs	r3, r1
 80077d2:	d126      	bne.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80077d4:	4b25      	ldr	r3, [pc, #148]	; (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80077d6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80077da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80077de:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80077e0:	4b22      	ldr	r3, [pc, #136]	; (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077ec:	d106      	bne.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80077ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d103      	bne.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 80077f4:	4b1f      	ldr	r3, [pc, #124]	; (8007874 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80077f6:	637b      	str	r3, [r7, #52]	; 0x34
 80077f8:	f000 bffb 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 80077fc:	4b1b      	ldr	r3, [pc, #108]	; (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007808:	d107      	bne.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800780a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007810:	d103      	bne.n	800781a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8007812:	4b19      	ldr	r3, [pc, #100]	; (8007878 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8007814:	637b      	str	r3, [r7, #52]	; 0x34
 8007816:	f000 bfec 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800781a:	2300      	movs	r3, #0
 800781c:	637b      	str	r3, [r7, #52]	; 0x34
 800781e:	f000 bfe8 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8007822:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007826:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800782a:	430b      	orrs	r3, r1
 800782c:	d164      	bne.n	80078f8 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800782e:	4b0f      	ldr	r3, [pc, #60]	; (800786c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007834:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007838:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800783a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007840:	d03d      	beq.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007844:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007848:	d852      	bhi.n	80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800784a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800784c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007850:	d014      	beq.n	800787c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8007852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007854:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007858:	d84a      	bhi.n	80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800785a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785c:	2b00      	cmp	r3, #0
 800785e:	d01f      	beq.n	80078a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8007860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007862:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007866:	d012      	beq.n	800788e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8007868:	e042      	b.n	80078f0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800786a:	bf00      	nop
 800786c:	46020c00 	.word	0x46020c00
 8007870:	0007a120 	.word	0x0007a120
 8007874:	00f42400 	.word	0x00f42400
 8007878:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800787c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007880:	4618      	mov	r0, r3
 8007882:	f7ff fa67 	bl	8006d54 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007888:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800788a:	f000 bfb2 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800788e:	f107 0318 	add.w	r3, r7, #24
 8007892:	4618      	mov	r0, r3
 8007894:	f7ff fbc4 	bl	8007020 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007898:	69fb      	ldr	r3, [r7, #28]
 800789a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800789c:	f000 bfa9 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80078a0:	4bab      	ldr	r3, [pc, #684]	; (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80078a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078ac:	d103      	bne.n	80078b6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 80078ae:	4ba9      	ldr	r3, [pc, #676]	; (8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80078b0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80078b2:	f000 bf9e 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80078b6:	2300      	movs	r3, #0
 80078b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078ba:	f000 bf9a 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80078be:	4ba4      	ldr	r3, [pc, #656]	; (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d005      	beq.n	80078d6 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 80078ca:	4ba1      	ldr	r3, [pc, #644]	; (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	0e1b      	lsrs	r3, r3, #24
 80078d0:	f003 030f 	and.w	r3, r3, #15
 80078d4:	e006      	b.n	80078e4 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 80078d6:	4b9e      	ldr	r3, [pc, #632]	; (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80078d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80078dc:	041b      	lsls	r3, r3, #16
 80078de:	0e1b      	lsrs	r3, r3, #24
 80078e0:	f003 030f 	and.w	r3, r3, #15
 80078e4:	4a9c      	ldr	r2, [pc, #624]	; (8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80078e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078ec:	f000 bf81 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 80078f0:	2300      	movs	r3, #0
 80078f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80078f4:	f000 bf7d 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80078f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078fc:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8007900:	430b      	orrs	r3, r1
 8007902:	d175      	bne.n	80079f0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8007904:	4b92      	ldr	r3, [pc, #584]	; (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007906:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800790a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800790e:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8007910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007912:	2b00      	cmp	r3, #0
 8007914:	d15b      	bne.n	80079ce <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8007916:	4b8e      	ldr	r3, [pc, #568]	; (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007918:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800791c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8007920:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8007922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007924:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007928:	d034      	beq.n	8007994 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 800792a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007930:	d849      	bhi.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8007932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007934:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007938:	d00b      	beq.n	8007952 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 800793a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007940:	d841      	bhi.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8007942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007944:	2b00      	cmp	r3, #0
 8007946:	d016      	beq.n	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800794a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800794e:	d009      	beq.n	8007964 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8007950:	e039      	b.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007956:	4618      	mov	r0, r3
 8007958:	f7ff f9fc 	bl	8006d54 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800795c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800795e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007960:	f000 bf47 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007964:	f107 0318 	add.w	r3, r7, #24
 8007968:	4618      	mov	r0, r3
 800796a:	f7ff fb59 	bl	8007020 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007972:	f000 bf3e 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007976:	4b76      	ldr	r3, [pc, #472]	; (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800797e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007982:	d103      	bne.n	800798c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 8007984:	4b73      	ldr	r3, [pc, #460]	; (8007b54 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007986:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007988:	f000 bf33 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 800798c:	2300      	movs	r3, #0
 800798e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007990:	f000 bf2f 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007994:	4b6e      	ldr	r3, [pc, #440]	; (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800799c:	2b00      	cmp	r3, #0
 800799e:	d005      	beq.n	80079ac <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 80079a0:	4b6b      	ldr	r3, [pc, #428]	; (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	0e1b      	lsrs	r3, r3, #24
 80079a6:	f003 030f 	and.w	r3, r3, #15
 80079aa:	e006      	b.n	80079ba <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 80079ac:	4b68      	ldr	r3, [pc, #416]	; (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80079ae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80079b2:	041b      	lsls	r3, r3, #16
 80079b4:	0e1b      	lsrs	r3, r3, #24
 80079b6:	f003 030f 	and.w	r3, r3, #15
 80079ba:	4a67      	ldr	r2, [pc, #412]	; (8007b58 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80079bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079c0:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80079c2:	f000 bf16 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 80079c6:	2300      	movs	r3, #0
 80079c8:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80079ca:	f000 bf12 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 80079ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079d4:	d108      	bne.n	80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80079d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80079da:	4618      	mov	r0, r3
 80079dc:	f7ff f9ba 	bl	8006d54 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 80079e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e2:	637b      	str	r3, [r7, #52]	; 0x34
 80079e4:	f000 bf05 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 80079e8:	2300      	movs	r3, #0
 80079ea:	637b      	str	r3, [r7, #52]	; 0x34
 80079ec:	f000 bf01 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 80079f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079f4:	1e51      	subs	r1, r2, #1
 80079f6:	430b      	orrs	r3, r1
 80079f8:	d136      	bne.n	8007a68 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80079fa:	4b55      	ldr	r3, [pc, #340]	; (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80079fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a00:	f003 0303 	and.w	r3, r3, #3
 8007a04:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d104      	bne.n	8007a16 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8007a0c:	f7fe fb34 	bl	8006078 <HAL_RCC_GetPCLK2Freq>
 8007a10:	6378      	str	r0, [r7, #52]	; 0x34
 8007a12:	f000 beee 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8007a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d104      	bne.n	8007a26 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007a1c:	f7fe f9f6 	bl	8005e0c <HAL_RCC_GetSysClockFreq>
 8007a20:	6378      	str	r0, [r7, #52]	; 0x34
 8007a22:	f000 bee6 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007a26:	4b4a      	ldr	r3, [pc, #296]	; (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a32:	d106      	bne.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	d103      	bne.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 8007a3a:	4b48      	ldr	r3, [pc, #288]	; (8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a3e:	f000 bed8 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007a42:	4b43      	ldr	r3, [pc, #268]	; (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007a44:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a48:	f003 0302 	and.w	r3, r3, #2
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d107      	bne.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8007a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a52:	2b03      	cmp	r3, #3
 8007a54:	d104      	bne.n	8007a60 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 8007a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8007a5c:	f000 bec9 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8007a60:	2300      	movs	r3, #0
 8007a62:	637b      	str	r3, [r7, #52]	; 0x34
 8007a64:	f000 bec5 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8007a68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a6c:	1e91      	subs	r1, r2, #2
 8007a6e:	430b      	orrs	r3, r1
 8007a70:	d136      	bne.n	8007ae0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007a72:	4b37      	ldr	r3, [pc, #220]	; (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007a74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a78:	f003 030c 	and.w	r3, r3, #12
 8007a7c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d104      	bne.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007a84:	f7fe fae4 	bl	8006050 <HAL_RCC_GetPCLK1Freq>
 8007a88:	6378      	str	r0, [r7, #52]	; 0x34
 8007a8a:	f000 beb2 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a90:	2b04      	cmp	r3, #4
 8007a92:	d104      	bne.n	8007a9e <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007a94:	f7fe f9ba 	bl	8005e0c <HAL_RCC_GetSysClockFreq>
 8007a98:	6378      	str	r0, [r7, #52]	; 0x34
 8007a9a:	f000 beaa 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007a9e:	4b2c      	ldr	r3, [pc, #176]	; (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007aaa:	d106      	bne.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8007aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aae:	2b08      	cmp	r3, #8
 8007ab0:	d103      	bne.n	8007aba <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 8007ab2:	4b2a      	ldr	r3, [pc, #168]	; (8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ab6:	f000 be9c 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007aba:	4b25      	ldr	r3, [pc, #148]	; (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007abc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ac0:	f003 0302 	and.w	r3, r3, #2
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d107      	bne.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8007ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aca:	2b0c      	cmp	r3, #12
 8007acc:	d104      	bne.n	8007ad8 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 8007ace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ad2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ad4:	f000 be8d 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	637b      	str	r3, [r7, #52]	; 0x34
 8007adc:	f000 be89 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8007ae0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ae4:	1f11      	subs	r1, r2, #4
 8007ae6:	430b      	orrs	r3, r1
 8007ae8:	d13e      	bne.n	8007b68 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007aea:	4b19      	ldr	r3, [pc, #100]	; (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007af0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007af4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d104      	bne.n	8007b06 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007afc:	f7fe faa8 	bl	8006050 <HAL_RCC_GetPCLK1Freq>
 8007b00:	6378      	str	r0, [r7, #52]	; 0x34
 8007b02:	f000 be76 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8007b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b08:	2b10      	cmp	r3, #16
 8007b0a:	d104      	bne.n	8007b16 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007b0c:	f7fe f97e 	bl	8005e0c <HAL_RCC_GetSysClockFreq>
 8007b10:	6378      	str	r0, [r7, #52]	; 0x34
 8007b12:	f000 be6e 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007b16:	4b0e      	ldr	r3, [pc, #56]	; (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b22:	d106      	bne.n	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8007b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b26:	2b20      	cmp	r3, #32
 8007b28:	d103      	bne.n	8007b32 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8007b2a:	4b0c      	ldr	r3, [pc, #48]	; (8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007b2c:	637b      	str	r3, [r7, #52]	; 0x34
 8007b2e:	f000 be60 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007b32:	4b07      	ldr	r3, [pc, #28]	; (8007b50 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007b34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b38:	f003 0302 	and.w	r3, r3, #2
 8007b3c:	2b02      	cmp	r3, #2
 8007b3e:	d10f      	bne.n	8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b42:	2b30      	cmp	r3, #48	; 0x30
 8007b44:	d10c      	bne.n	8007b60 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 8007b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b4a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b4c:	f000 be51 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007b50:	46020c00 	.word	0x46020c00
 8007b54:	02dc6c00 	.word	0x02dc6c00
 8007b58:	0800c6f0 	.word	0x0800c6f0
 8007b5c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8007b60:	2300      	movs	r3, #0
 8007b62:	637b      	str	r3, [r7, #52]	; 0x34
 8007b64:	f000 be45 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8007b68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b6c:	f1a2 0108 	sub.w	r1, r2, #8
 8007b70:	430b      	orrs	r3, r1
 8007b72:	d136      	bne.n	8007be2 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007b74:	4b9f      	ldr	r3, [pc, #636]	; (8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007b76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007b7e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d104      	bne.n	8007b90 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007b86:	f7fe fa63 	bl	8006050 <HAL_RCC_GetPCLK1Freq>
 8007b8a:	6378      	str	r0, [r7, #52]	; 0x34
 8007b8c:	f000 be31 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b92:	2b40      	cmp	r3, #64	; 0x40
 8007b94:	d104      	bne.n	8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007b96:	f7fe f939 	bl	8005e0c <HAL_RCC_GetSysClockFreq>
 8007b9a:	6378      	str	r0, [r7, #52]	; 0x34
 8007b9c:	f000 be29 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007ba0:	4b94      	ldr	r3, [pc, #592]	; (8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ba8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bac:	d106      	bne.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 8007bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb0:	2b80      	cmp	r3, #128	; 0x80
 8007bb2:	d103      	bne.n	8007bbc <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 8007bb4:	4b90      	ldr	r3, [pc, #576]	; (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8007bb8:	f000 be1b 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007bbc:	4b8d      	ldr	r3, [pc, #564]	; (8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007bbe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007bc2:	f003 0302 	and.w	r3, r3, #2
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	d107      	bne.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 8007bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bcc:	2bc0      	cmp	r3, #192	; 0xc0
 8007bce:	d104      	bne.n	8007bda <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 8007bd0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bd4:	637b      	str	r3, [r7, #52]	; 0x34
 8007bd6:	f000 be0c 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	637b      	str	r3, [r7, #52]	; 0x34
 8007bde:	f000 be08 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8007be2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007be6:	f1a2 0110 	sub.w	r1, r2, #16
 8007bea:	430b      	orrs	r3, r1
 8007bec:	d139      	bne.n	8007c62 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007bee:	4b81      	ldr	r3, [pc, #516]	; (8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007bf4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bf8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d104      	bne.n	8007c0a <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007c00:	f7fe fa26 	bl	8006050 <HAL_RCC_GetPCLK1Freq>
 8007c04:	6378      	str	r0, [r7, #52]	; 0x34
 8007c06:	f000 bdf4 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c10:	d104      	bne.n	8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007c12:	f7fe f8fb 	bl	8005e0c <HAL_RCC_GetSysClockFreq>
 8007c16:	6378      	str	r0, [r7, #52]	; 0x34
 8007c18:	f000 bdeb 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007c1c:	4b75      	ldr	r3, [pc, #468]	; (8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c28:	d107      	bne.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8007c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007c30:	d103      	bne.n	8007c3a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 8007c32:	4b71      	ldr	r3, [pc, #452]	; (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007c34:	637b      	str	r3, [r7, #52]	; 0x34
 8007c36:	f000 bddc 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007c3a:	4b6e      	ldr	r3, [pc, #440]	; (8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007c3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c40:	f003 0302 	and.w	r3, r3, #2
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	d108      	bne.n	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8007c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007c4e:	d104      	bne.n	8007c5a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 8007c50:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c54:	637b      	str	r3, [r7, #52]	; 0x34
 8007c56:	f000 bdcc 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	637b      	str	r3, [r7, #52]	; 0x34
 8007c5e:	f000 bdc8 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007c62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c66:	f1a2 0120 	sub.w	r1, r2, #32
 8007c6a:	430b      	orrs	r3, r1
 8007c6c:	d158      	bne.n	8007d20 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007c6e:	4b61      	ldr	r3, [pc, #388]	; (8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007c70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007c74:	f003 0307 	and.w	r3, r3, #7
 8007c78:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d104      	bne.n	8007c8a <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007c80:	f7fe fa0e 	bl	80060a0 <HAL_RCC_GetPCLK3Freq>
 8007c84:	6378      	str	r0, [r7, #52]	; 0x34
 8007c86:	f000 bdb4 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d104      	bne.n	8007c9a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007c90:	f7fe f8bc 	bl	8005e0c <HAL_RCC_GetSysClockFreq>
 8007c94:	6378      	str	r0, [r7, #52]	; 0x34
 8007c96:	f000 bdac 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007c9a:	4b56      	ldr	r3, [pc, #344]	; (8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ca6:	d106      	bne.n	8007cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 8007ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	d103      	bne.n	8007cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 8007cae:	4b52      	ldr	r3, [pc, #328]	; (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007cb0:	637b      	str	r3, [r7, #52]	; 0x34
 8007cb2:	f000 bd9e 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007cb6:	4b4f      	ldr	r3, [pc, #316]	; (8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007cb8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007cbc:	f003 0302 	and.w	r3, r3, #2
 8007cc0:	2b02      	cmp	r3, #2
 8007cc2:	d107      	bne.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8007cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cc6:	2b03      	cmp	r3, #3
 8007cc8:	d104      	bne.n	8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 8007cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cce:	637b      	str	r3, [r7, #52]	; 0x34
 8007cd0:	f000 bd8f 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8007cd4:	4b47      	ldr	r3, [pc, #284]	; (8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 0320 	and.w	r3, r3, #32
 8007cdc:	2b20      	cmp	r3, #32
 8007cde:	d11b      	bne.n	8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8007ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ce2:	2b04      	cmp	r3, #4
 8007ce4:	d118      	bne.n	8007d18 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007ce6:	4b43      	ldr	r3, [pc, #268]	; (8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d005      	beq.n	8007cfe <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8007cf2:	4b40      	ldr	r3, [pc, #256]	; (8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	0e1b      	lsrs	r3, r3, #24
 8007cf8:	f003 030f 	and.w	r3, r3, #15
 8007cfc:	e006      	b.n	8007d0c <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8007cfe:	4b3d      	ldr	r3, [pc, #244]	; (8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007d00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d04:	041b      	lsls	r3, r3, #16
 8007d06:	0e1b      	lsrs	r3, r3, #24
 8007d08:	f003 030f 	and.w	r3, r3, #15
 8007d0c:	4a3b      	ldr	r2, [pc, #236]	; (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d12:	637b      	str	r3, [r7, #52]	; 0x34
 8007d14:	f000 bd6d 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d1c:	f000 bd69 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007d20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d24:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007d28:	430b      	orrs	r3, r1
 8007d2a:	d169      	bne.n	8007e00 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007d2c:	4b31      	ldr	r3, [pc, #196]	; (8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007d2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007d32:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007d36:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d3e:	d104      	bne.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007d40:	f7fe f864 	bl	8005e0c <HAL_RCC_GetSysClockFreq>
 8007d44:	6378      	str	r0, [r7, #52]	; 0x34
 8007d46:	f000 bd54 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d50:	d108      	bne.n	8007d64 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007d52:	f107 0318 	add.w	r3, r7, #24
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7ff f962 	bl	8007020 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007d5c:	6a3b      	ldr	r3, [r7, #32]
 8007d5e:	637b      	str	r3, [r7, #52]	; 0x34
 8007d60:	f000 bd47 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d104      	bne.n	8007d74 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8007d6a:	f7fe f957 	bl	800601c <HAL_RCC_GetHCLKFreq>
 8007d6e:	6378      	str	r0, [r7, #52]	; 0x34
 8007d70:	f000 bd3f 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8007d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d76:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007d7a:	d118      	bne.n	8007dae <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8007d7c:	4b1d      	ldr	r3, [pc, #116]	; (8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007d7e:	689b      	ldr	r3, [r3, #8]
 8007d80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d005      	beq.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8007d88:	4b1a      	ldr	r3, [pc, #104]	; (8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	0f1b      	lsrs	r3, r3, #28
 8007d8e:	f003 030f 	and.w	r3, r3, #15
 8007d92:	e006      	b.n	8007da2 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8007d94:	4b17      	ldr	r3, [pc, #92]	; (8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007d96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d9a:	041b      	lsls	r3, r3, #16
 8007d9c:	0f1b      	lsrs	r3, r3, #28
 8007d9e:	f003 030f 	and.w	r3, r3, #15
 8007da2:	4a16      	ldr	r2, [pc, #88]	; (8007dfc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007da4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007da8:	637b      	str	r3, [r7, #52]	; 0x34
 8007daa:	f000 bd22 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007dae:	4b11      	ldr	r3, [pc, #68]	; (8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007db6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007dba:	d107      	bne.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8007dbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dbe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007dc2:	d103      	bne.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 8007dc4:	4b0c      	ldr	r3, [pc, #48]	; (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007dc6:	637b      	str	r3, [r7, #52]	; 0x34
 8007dc8:	f000 bd13 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007dcc:	4b09      	ldr	r3, [pc, #36]	; (8007df4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dd8:	d107      	bne.n	8007dea <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8007dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ddc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007de0:	d103      	bne.n	8007dea <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 8007de2:	4b05      	ldr	r3, [pc, #20]	; (8007df8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007de4:	637b      	str	r3, [r7, #52]	; 0x34
 8007de6:	f000 bd04 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8007dea:	2300      	movs	r3, #0
 8007dec:	637b      	str	r3, [r7, #52]	; 0x34
 8007dee:	f000 bd00 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007df2:	bf00      	nop
 8007df4:	46020c00 	.word	0x46020c00
 8007df8:	00f42400 	.word	0x00f42400
 8007dfc:	0800c6f0 	.word	0x0800c6f0
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007e00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e04:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007e08:	430b      	orrs	r3, r1
 8007e0a:	d14e      	bne.n	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007e0c:	4ba8      	ldr	r3, [pc, #672]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e0e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007e12:	f003 0307 	and.w	r3, r3, #7
 8007e16:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1a:	2b04      	cmp	r3, #4
 8007e1c:	d841      	bhi.n	8007ea2 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007e1e:	a201      	add	r2, pc, #4	; (adr r2, 8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8007e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e24:	08007e5d 	.word	0x08007e5d
 8007e28:	08007e39 	.word	0x08007e39
 8007e2c:	08007e4b 	.word	0x08007e4b
 8007e30:	08007e67 	.word	0x08007e67
 8007e34:	08007e71 	.word	0x08007e71
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007e38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f7fe ff89 	bl	8006d54 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e46:	f000 bcd4 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e4a:	f107 030c 	add.w	r3, r7, #12
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7ff fa4c 	bl	80072ec <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e58:	f000 bccb 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007e5c:	f7fe f8de 	bl	800601c <HAL_RCC_GetHCLKFreq>
 8007e60:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007e62:	f000 bcc6 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007e66:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007e6a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e6c:	f000 bcc1 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007e70:	4b8f      	ldr	r3, [pc, #572]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d005      	beq.n	8007e88 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8007e7c:	4b8c      	ldr	r3, [pc, #560]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	0e1b      	lsrs	r3, r3, #24
 8007e82:	f003 030f 	and.w	r3, r3, #15
 8007e86:	e006      	b.n	8007e96 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8007e88:	4b89      	ldr	r3, [pc, #548]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007e8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e8e:	041b      	lsls	r3, r3, #16
 8007e90:	0e1b      	lsrs	r3, r3, #24
 8007e92:	f003 030f 	and.w	r3, r3, #15
 8007e96:	4a87      	ldr	r2, [pc, #540]	; (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007e9e:	f000 bca8 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ea6:	f000 bca4 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8007eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007eae:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8007eb2:	430b      	orrs	r3, r1
 8007eb4:	d15d      	bne.n	8007f72 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007eb6:	4b7e      	ldr	r3, [pc, #504]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007eb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007ebc:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007ec0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007ec8:	d036      	beq.n	8007f38 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8007eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ecc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007ed0:	d84b      	bhi.n	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007ed8:	d029      	beq.n	8007f2e <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8007eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007edc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007ee0:	d843      	bhi.n	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ee8:	d013      	beq.n	8007f12 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8007eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007ef0:	d83b      	bhi.n	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d015      	beq.n	8007f24 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8007ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007efe:	d134      	bne.n	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fe ff25 	bl	8006d54 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f0e:	f000 bc70 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f12:	f107 030c 	add.w	r3, r7, #12
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7ff f9e8 	bl	80072ec <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f20:	f000 bc67 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007f24:	f7fe f87a 	bl	800601c <HAL_RCC_GetHCLKFreq>
 8007f28:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007f2a:	f000 bc62 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007f2e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007f32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f34:	f000 bc5d 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007f38:	4b5d      	ldr	r3, [pc, #372]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d005      	beq.n	8007f50 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8007f44:	4b5a      	ldr	r3, [pc, #360]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	0e1b      	lsrs	r3, r3, #24
 8007f4a:	f003 030f 	and.w	r3, r3, #15
 8007f4e:	e006      	b.n	8007f5e <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8007f50:	4b57      	ldr	r3, [pc, #348]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007f52:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f56:	041b      	lsls	r3, r3, #16
 8007f58:	0e1b      	lsrs	r3, r3, #24
 8007f5a:	f003 030f 	and.w	r3, r3, #15
 8007f5e:	4a55      	ldr	r2, [pc, #340]	; (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f66:	f000 bc44 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f6e:	f000 bc40 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8007f72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f76:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8007f7a:	430b      	orrs	r3, r1
 8007f7c:	d14a      	bne.n	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007f7e:	4b4c      	ldr	r3, [pc, #304]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007f80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007f84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007f88:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d104      	bne.n	8007f9a <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007f90:	f7fe f85e 	bl	8006050 <HAL_RCC_GetPCLK1Freq>
 8007f94:	6378      	str	r0, [r7, #52]	; 0x34
 8007f96:	f000 bc2c 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8007f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fa0:	d104      	bne.n	8007fac <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007fa2:	f7fd ff33 	bl	8005e0c <HAL_RCC_GetSysClockFreq>
 8007fa6:	6378      	str	r0, [r7, #52]	; 0x34
 8007fa8:	f000 bc23 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007fac:	4b40      	ldr	r3, [pc, #256]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fb8:	d107      	bne.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 8007fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fc0:	d103      	bne.n	8007fca <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 8007fc2:	4b3d      	ldr	r3, [pc, #244]	; (80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007fc4:	637b      	str	r3, [r7, #52]	; 0x34
 8007fc6:	f000 bc14 	b.w	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8007fca:	4b39      	ldr	r3, [pc, #228]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 0320 	and.w	r3, r3, #32
 8007fd2:	2b20      	cmp	r3, #32
 8007fd4:	d11b      	bne.n	800800e <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 8007fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007fdc:	d117      	bne.n	800800e <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007fde:	4b34      	ldr	r3, [pc, #208]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d005      	beq.n	8007ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8007fea:	4b31      	ldr	r3, [pc, #196]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	0e1b      	lsrs	r3, r3, #24
 8007ff0:	f003 030f 	and.w	r3, r3, #15
 8007ff4:	e006      	b.n	8008004 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8007ff6:	4b2e      	ldr	r3, [pc, #184]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007ff8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007ffc:	041b      	lsls	r3, r3, #16
 8007ffe:	0e1b      	lsrs	r3, r3, #24
 8008000:	f003 030f 	and.w	r3, r3, #15
 8008004:	4a2b      	ldr	r2, [pc, #172]	; (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800800a:	637b      	str	r3, [r7, #52]	; 0x34
 800800c:	e3f1      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800800e:	2300      	movs	r3, #0
 8008010:	637b      	str	r3, [r7, #52]	; 0x34
 8008012:	e3ee      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8008014:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008018:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 800801c:	430b      	orrs	r3, r1
 800801e:	d14d      	bne.n	80080bc <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008020:	4b23      	ldr	r3, [pc, #140]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008026:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800802a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 800802c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800802e:	2b00      	cmp	r3, #0
 8008030:	d103      	bne.n	800803a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008032:	f7fe f80d 	bl	8006050 <HAL_RCC_GetPCLK1Freq>
 8008036:	6378      	str	r0, [r7, #52]	; 0x34
 8008038:	e3db      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800803a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800803c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008040:	d103      	bne.n	800804a <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008042:	f7fd fee3 	bl	8005e0c <HAL_RCC_GetSysClockFreq>
 8008046:	6378      	str	r0, [r7, #52]	; 0x34
 8008048:	e3d3      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800804a:	4b19      	ldr	r3, [pc, #100]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008056:	d106      	bne.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8008058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800805e:	d102      	bne.n	8008066 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 8008060:	4b15      	ldr	r3, [pc, #84]	; (80080b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008062:	637b      	str	r3, [r7, #52]	; 0x34
 8008064:	e3c5      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8008066:	4b12      	ldr	r3, [pc, #72]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 0320 	and.w	r3, r3, #32
 800806e:	2b20      	cmp	r3, #32
 8008070:	d11b      	bne.n	80080aa <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8008072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008074:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008078:	d117      	bne.n	80080aa <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800807a:	4b0d      	ldr	r3, [pc, #52]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008082:	2b00      	cmp	r3, #0
 8008084:	d005      	beq.n	8008092 <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 8008086:	4b0a      	ldr	r3, [pc, #40]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	0e1b      	lsrs	r3, r3, #24
 800808c:	f003 030f 	and.w	r3, r3, #15
 8008090:	e006      	b.n	80080a0 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8008092:	4b07      	ldr	r3, [pc, #28]	; (80080b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008094:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008098:	041b      	lsls	r3, r3, #16
 800809a:	0e1b      	lsrs	r3, r3, #24
 800809c:	f003 030f 	and.w	r3, r3, #15
 80080a0:	4a04      	ldr	r2, [pc, #16]	; (80080b4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80080a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080a6:	637b      	str	r3, [r7, #52]	; 0x34
 80080a8:	e3a3      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80080aa:	2300      	movs	r3, #0
 80080ac:	637b      	str	r3, [r7, #52]	; 0x34
 80080ae:	e3a0      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80080b0:	46020c00 	.word	0x46020c00
 80080b4:	0800c6f0 	.word	0x0800c6f0
 80080b8:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80080bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080c0:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80080c4:	430b      	orrs	r3, r1
 80080c6:	d148      	bne.n	800815a <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80080c8:	4b9d      	ldr	r3, [pc, #628]	; (8008340 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80080ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80080ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80080d2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80080d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d6:	2bc0      	cmp	r3, #192	; 0xc0
 80080d8:	d024      	beq.n	8008124 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 80080da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080dc:	2bc0      	cmp	r3, #192	; 0xc0
 80080de:	d839      	bhi.n	8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 80080e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e2:	2b80      	cmp	r3, #128	; 0x80
 80080e4:	d00d      	beq.n	8008102 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 80080e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080e8:	2b80      	cmp	r3, #128	; 0x80
 80080ea:	d833      	bhi.n	8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 80080ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d003      	beq.n	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 80080f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f4:	2b40      	cmp	r3, #64	; 0x40
 80080f6:	d011      	beq.n	800811c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80080f8:	e02c      	b.n	8008154 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80080fa:	f7fd ffd1 	bl	80060a0 <HAL_RCC_GetPCLK3Freq>
 80080fe:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008100:	e377      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008102:	4b8f      	ldr	r3, [pc, #572]	; (8008340 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800810a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800810e:	d102      	bne.n	8008116 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 8008110:	4b8c      	ldr	r3, [pc, #560]	; (8008344 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8008112:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008114:	e36d      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8008116:	2300      	movs	r3, #0
 8008118:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800811a:	e36a      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 800811c:	f7fd fe76 	bl	8005e0c <HAL_RCC_GetSysClockFreq>
 8008120:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008122:	e366      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8008124:	4b86      	ldr	r3, [pc, #536]	; (8008340 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800812c:	2b00      	cmp	r3, #0
 800812e:	d005      	beq.n	800813c <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8008130:	4b83      	ldr	r3, [pc, #524]	; (8008340 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	0f1b      	lsrs	r3, r3, #28
 8008136:	f003 030f 	and.w	r3, r3, #15
 800813a:	e006      	b.n	800814a <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 800813c:	4b80      	ldr	r3, [pc, #512]	; (8008340 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800813e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008142:	041b      	lsls	r3, r3, #16
 8008144:	0f1b      	lsrs	r3, r3, #28
 8008146:	f003 030f 	and.w	r3, r3, #15
 800814a:	4a7f      	ldr	r2, [pc, #508]	; (8008348 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800814c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008150:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008152:	e34e      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 8008154:	2300      	movs	r3, #0
 8008156:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008158:	e34b      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800815a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800815e:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8008162:	430b      	orrs	r3, r1
 8008164:	d147      	bne.n	80081f6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008166:	4b76      	ldr	r3, [pc, #472]	; (8008340 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008168:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800816c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008170:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8008172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008174:	2b00      	cmp	r3, #0
 8008176:	d103      	bne.n	8008180 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008178:	f7fd ff6a 	bl	8006050 <HAL_RCC_GetPCLK1Freq>
 800817c:	6378      	str	r0, [r7, #52]	; 0x34
 800817e:	e338      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8008180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008182:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008186:	d103      	bne.n	8008190 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008188:	f7fd fe40 	bl	8005e0c <HAL_RCC_GetSysClockFreq>
 800818c:	6378      	str	r0, [r7, #52]	; 0x34
 800818e:	e330      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8008190:	4b6b      	ldr	r3, [pc, #428]	; (8008340 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800819c:	d106      	bne.n	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 800819e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80081a4:	d102      	bne.n	80081ac <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 80081a6:	4b67      	ldr	r3, [pc, #412]	; (8008344 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80081a8:	637b      	str	r3, [r7, #52]	; 0x34
 80081aa:	e322      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80081ac:	4b64      	ldr	r3, [pc, #400]	; (8008340 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f003 0320 	and.w	r3, r3, #32
 80081b4:	2b20      	cmp	r3, #32
 80081b6:	d11b      	bne.n	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 80081b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80081be:	d117      	bne.n	80081f0 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80081c0:	4b5f      	ldr	r3, [pc, #380]	; (8008340 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d005      	beq.n	80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 80081cc:	4b5c      	ldr	r3, [pc, #368]	; (8008340 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	0e1b      	lsrs	r3, r3, #24
 80081d2:	f003 030f 	and.w	r3, r3, #15
 80081d6:	e006      	b.n	80081e6 <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 80081d8:	4b59      	ldr	r3, [pc, #356]	; (8008340 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80081da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80081de:	041b      	lsls	r3, r3, #16
 80081e0:	0e1b      	lsrs	r3, r3, #24
 80081e2:	f003 030f 	and.w	r3, r3, #15
 80081e6:	4a58      	ldr	r2, [pc, #352]	; (8008348 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 80081e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081ec:	637b      	str	r3, [r7, #52]	; 0x34
 80081ee:	e300      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80081f0:	2300      	movs	r3, #0
 80081f2:	637b      	str	r3, [r7, #52]	; 0x34
 80081f4:	e2fd      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80081f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081fa:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80081fe:	430b      	orrs	r3, r1
 8008200:	d15b      	bne.n	80082ba <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8008202:	4b4f      	ldr	r3, [pc, #316]	; (8008340 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008204:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008208:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800820c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800820e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008210:	2b00      	cmp	r3, #0
 8008212:	d117      	bne.n	8008244 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008214:	4b4a      	ldr	r3, [pc, #296]	; (8008340 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800821c:	2b00      	cmp	r3, #0
 800821e:	d005      	beq.n	800822c <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 8008220:	4b47      	ldr	r3, [pc, #284]	; (8008340 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	0e1b      	lsrs	r3, r3, #24
 8008226:	f003 030f 	and.w	r3, r3, #15
 800822a:	e006      	b.n	800823a <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 800822c:	4b44      	ldr	r3, [pc, #272]	; (8008340 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800822e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008232:	041b      	lsls	r3, r3, #16
 8008234:	0e1b      	lsrs	r3, r3, #24
 8008236:	f003 030f 	and.w	r3, r3, #15
 800823a:	4a43      	ldr	r2, [pc, #268]	; (8008348 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800823c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008240:	637b      	str	r3, [r7, #52]	; 0x34
 8008242:	e2d6      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8008244:	4b3e      	ldr	r3, [pc, #248]	; (8008340 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008246:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800824a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800824e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008252:	d112      	bne.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8008254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008256:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800825a:	d10e      	bne.n	800827a <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800825c:	4b38      	ldr	r3, [pc, #224]	; (8008340 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800825e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008266:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800826a:	d102      	bne.n	8008272 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 800826c:	23fa      	movs	r3, #250	; 0xfa
 800826e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008270:	e2bf      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8008272:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008276:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008278:	e2bb      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800827a:	4b31      	ldr	r3, [pc, #196]	; (8008340 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008282:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008286:	d106      	bne.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 8008288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800828a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800828e:	d102      	bne.n	8008296 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 8008290:	4b2c      	ldr	r3, [pc, #176]	; (8008344 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8008292:	637b      	str	r3, [r7, #52]	; 0x34
 8008294:	e2ad      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8008296:	4b2a      	ldr	r3, [pc, #168]	; (8008340 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008298:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800829c:	f003 0302 	and.w	r3, r3, #2
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d107      	bne.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 80082a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082aa:	d103      	bne.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 80082ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082b0:	637b      	str	r3, [r7, #52]	; 0x34
 80082b2:	e29e      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80082b4:	2300      	movs	r3, #0
 80082b6:	637b      	str	r3, [r7, #52]	; 0x34
 80082b8:	e29b      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80082ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082be:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80082c2:	430b      	orrs	r3, r1
 80082c4:	d162      	bne.n	800838c <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80082c6:	4b1e      	ldr	r3, [pc, #120]	; (8008340 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80082c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80082cc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80082d0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80082d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d117      	bne.n	8008308 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80082d8:	4b19      	ldr	r3, [pc, #100]	; (8008340 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d005      	beq.n	80082f0 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 80082e4:	4b16      	ldr	r3, [pc, #88]	; (8008340 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	0e1b      	lsrs	r3, r3, #24
 80082ea:	f003 030f 	and.w	r3, r3, #15
 80082ee:	e006      	b.n	80082fe <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 80082f0:	4b13      	ldr	r3, [pc, #76]	; (8008340 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80082f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80082f6:	041b      	lsls	r3, r3, #16
 80082f8:	0e1b      	lsrs	r3, r3, #24
 80082fa:	f003 030f 	and.w	r3, r3, #15
 80082fe:	4a12      	ldr	r2, [pc, #72]	; (8008348 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8008300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008304:	637b      	str	r3, [r7, #52]	; 0x34
 8008306:	e274      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8008308:	4b0d      	ldr	r3, [pc, #52]	; (8008340 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800830a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800830e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008312:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008316:	d119      	bne.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 8008318:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800831a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800831e:	d115      	bne.n	800834c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008320:	4b07      	ldr	r3, [pc, #28]	; (8008340 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008322:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800832a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800832e:	d102      	bne.n	8008336 <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 8008330:	23fa      	movs	r3, #250	; 0xfa
 8008332:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008334:	e25d      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8008336:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800833a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800833c:	e259      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800833e:	bf00      	nop
 8008340:	46020c00 	.word	0x46020c00
 8008344:	00f42400 	.word	0x00f42400
 8008348:	0800c6f0 	.word	0x0800c6f0
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800834c:	4b9d      	ldr	r3, [pc, #628]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008358:	d106      	bne.n	8008368 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 800835a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800835c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008360:	d102      	bne.n	8008368 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 8008362:	4b99      	ldr	r3, [pc, #612]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8008364:	637b      	str	r3, [r7, #52]	; 0x34
 8008366:	e244      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8008368:	4b96      	ldr	r3, [pc, #600]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800836a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800836e:	f003 0302 	and.w	r3, r3, #2
 8008372:	2b02      	cmp	r3, #2
 8008374:	d107      	bne.n	8008386 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 8008376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008378:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800837c:	d103      	bne.n	8008386 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 800837e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008382:	637b      	str	r3, [r7, #52]	; 0x34
 8008384:	e235      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8008386:	2300      	movs	r3, #0
 8008388:	637b      	str	r3, [r7, #52]	; 0x34
 800838a:	e232      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800838c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008390:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008394:	430b      	orrs	r3, r1
 8008396:	d147      	bne.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008398:	4b8a      	ldr	r3, [pc, #552]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800839a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800839e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80083a2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80083a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d103      	bne.n	80083b2 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80083aa:	f7fd fe51 	bl	8006050 <HAL_RCC_GetPCLK1Freq>
 80083ae:	6378      	str	r0, [r7, #52]	; 0x34
 80083b0:	e21f      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80083b2:	4b84      	ldr	r3, [pc, #528]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80083b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80083b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083c0:	d112      	bne.n	80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 80083c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80083c8:	d10e      	bne.n	80083e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80083ca:	4b7e      	ldr	r3, [pc, #504]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80083cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80083d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083d8:	d102      	bne.n	80083e0 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 80083da:	23fa      	movs	r3, #250	; 0xfa
 80083dc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80083de:	e208      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80083e0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80083e4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80083e6:	e204      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80083e8:	4b76      	ldr	r3, [pc, #472]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083f4:	d106      	bne.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 80083f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80083fc:	d102      	bne.n	8008404 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 80083fe:	4b72      	ldr	r3, [pc, #456]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8008400:	637b      	str	r3, [r7, #52]	; 0x34
 8008402:	e1f6      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8008404:	4b6f      	ldr	r3, [pc, #444]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008406:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800840a:	f003 0302 	and.w	r3, r3, #2
 800840e:	2b02      	cmp	r3, #2
 8008410:	d107      	bne.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8008412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008414:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008418:	d103      	bne.n	8008422 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 800841a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800841e:	637b      	str	r3, [r7, #52]	; 0x34
 8008420:	e1e7      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8008422:	2300      	movs	r3, #0
 8008424:	637b      	str	r3, [r7, #52]	; 0x34
 8008426:	e1e4      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8008428:	e9d7 2300 	ldrd	r2, r3, [r7]
 800842c:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8008430:	430b      	orrs	r3, r1
 8008432:	d12d      	bne.n	8008490 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8008434:	4b63      	ldr	r3, [pc, #396]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800843a:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800843e:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8008440:	4b60      	ldr	r3, [pc, #384]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008448:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800844c:	d105      	bne.n	800845a <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 800844e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008450:	2b00      	cmp	r3, #0
 8008452:	d102      	bne.n	800845a <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 8008454:	4b5c      	ldr	r3, [pc, #368]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8008456:	637b      	str	r3, [r7, #52]	; 0x34
 8008458:	e1cb      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800845a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008460:	d107      	bne.n	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008466:	4618      	mov	r0, r3
 8008468:	f7fe fc74 	bl	8006d54 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800846c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846e:	637b      	str	r3, [r7, #52]	; 0x34
 8008470:	e1bf      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8008472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008474:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008478:	d107      	bne.n	800848a <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800847a:	f107 0318 	add.w	r3, r7, #24
 800847e:	4618      	mov	r0, r3
 8008480:	f7fe fdce 	bl	8007020 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8008484:	69bb      	ldr	r3, [r7, #24]
 8008486:	637b      	str	r3, [r7, #52]	; 0x34
 8008488:	e1b3      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800848a:	2300      	movs	r3, #0
 800848c:	637b      	str	r3, [r7, #52]	; 0x34
 800848e:	e1b0      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8008490:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008494:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8008498:	430b      	orrs	r3, r1
 800849a:	d14d      	bne.n	8008538 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800849c:	4b49      	ldr	r3, [pc, #292]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800849e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084a2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80084a6:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80084a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084aa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80084ae:	d028      	beq.n	8008502 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 80084b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80084b6:	d83c      	bhi.n	8008532 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 80084b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084be:	d013      	beq.n	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 80084c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084c6:	d834      	bhi.n	8008532 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 80084c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d004      	beq.n	80084d8 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 80084ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084d4:	d004      	beq.n	80084e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80084d6:	e02c      	b.n	8008532 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80084d8:	f7fd fdce 	bl	8006078 <HAL_RCC_GetPCLK2Freq>
 80084dc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80084de:	e188      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80084e0:	f7fd fc94 	bl	8005e0c <HAL_RCC_GetSysClockFreq>
 80084e4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80084e6:	e184      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80084e8:	4b36      	ldr	r3, [pc, #216]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084f4:	d102      	bne.n	80084fc <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 80084f6:	4b34      	ldr	r3, [pc, #208]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80084f8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80084fa:	e17a      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80084fc:	2300      	movs	r3, #0
 80084fe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008500:	e177      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008502:	4b30      	ldr	r3, [pc, #192]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800850a:	2b00      	cmp	r3, #0
 800850c:	d005      	beq.n	800851a <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 800850e:	4b2d      	ldr	r3, [pc, #180]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	0e1b      	lsrs	r3, r3, #24
 8008514:	f003 030f 	and.w	r3, r3, #15
 8008518:	e006      	b.n	8008528 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 800851a:	4b2a      	ldr	r3, [pc, #168]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800851c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008520:	041b      	lsls	r3, r3, #16
 8008522:	0e1b      	lsrs	r3, r3, #24
 8008524:	f003 030f 	and.w	r3, r3, #15
 8008528:	4a28      	ldr	r2, [pc, #160]	; (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 800852a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800852e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008530:	e15f      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8008532:	2300      	movs	r3, #0
 8008534:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008536:	e15c      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8008538:	e9d7 2300 	ldrd	r2, r3, [r7]
 800853c:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8008540:	430b      	orrs	r3, r1
 8008542:	d154      	bne.n	80085ee <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008544:	4b1f      	ldr	r3, [pc, #124]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008546:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800854a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800854e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8008550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008552:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008556:	d028      	beq.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8008558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800855a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800855e:	d843      	bhi.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8008560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008562:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008566:	d013      	beq.n	8008590 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8008568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800856e:	d83b      	bhi.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8008570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008572:	2b00      	cmp	r3, #0
 8008574:	d004      	beq.n	8008580 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8008576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800857c:	d004      	beq.n	8008588 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800857e:	e033      	b.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8008580:	f7fd fd66 	bl	8006050 <HAL_RCC_GetPCLK1Freq>
 8008584:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008586:	e134      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008588:	f7fd fc40 	bl	8005e0c <HAL_RCC_GetSysClockFreq>
 800858c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800858e:	e130      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008590:	4b0c      	ldr	r3, [pc, #48]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800859c:	d102      	bne.n	80085a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 800859e:	4b0a      	ldr	r3, [pc, #40]	; (80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80085a0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80085a2:	e126      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80085a4:	2300      	movs	r3, #0
 80085a6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80085a8:	e123      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80085aa:	4b06      	ldr	r3, [pc, #24]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00c      	beq.n	80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 80085b6:	4b03      	ldr	r3, [pc, #12]	; (80085c4 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	0e1b      	lsrs	r3, r3, #24
 80085bc:	f003 030f 	and.w	r3, r3, #15
 80085c0:	e00d      	b.n	80085de <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 80085c2:	bf00      	nop
 80085c4:	46020c00 	.word	0x46020c00
 80085c8:	00f42400 	.word	0x00f42400
 80085cc:	0800c6f0 	.word	0x0800c6f0
 80085d0:	4b8a      	ldr	r3, [pc, #552]	; (80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80085d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80085d6:	041b      	lsls	r3, r3, #16
 80085d8:	0e1b      	lsrs	r3, r3, #24
 80085da:	f003 030f 	and.w	r3, r3, #15
 80085de:	4a88      	ldr	r2, [pc, #544]	; (8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80085e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085e4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80085e6:	e104      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80085e8:	2300      	movs	r3, #0
 80085ea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80085ec:	e101      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80085ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085f2:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 80085f6:	430b      	orrs	r3, r1
 80085f8:	d16e      	bne.n	80086d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80085fa:	4b80      	ldr	r3, [pc, #512]	; (80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80085fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008600:	f003 0318 	and.w	r3, r3, #24
 8008604:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8008606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008608:	2b18      	cmp	r3, #24
 800860a:	d862      	bhi.n	80086d2 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 800860c:	a201      	add	r2, pc, #4	; (adr r2, 8008614 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 800860e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008612:	bf00      	nop
 8008614:	08008679 	.word	0x08008679
 8008618:	080086d3 	.word	0x080086d3
 800861c:	080086d3 	.word	0x080086d3
 8008620:	080086d3 	.word	0x080086d3
 8008624:	080086d3 	.word	0x080086d3
 8008628:	080086d3 	.word	0x080086d3
 800862c:	080086d3 	.word	0x080086d3
 8008630:	080086d3 	.word	0x080086d3
 8008634:	08008681 	.word	0x08008681
 8008638:	080086d3 	.word	0x080086d3
 800863c:	080086d3 	.word	0x080086d3
 8008640:	080086d3 	.word	0x080086d3
 8008644:	080086d3 	.word	0x080086d3
 8008648:	080086d3 	.word	0x080086d3
 800864c:	080086d3 	.word	0x080086d3
 8008650:	080086d3 	.word	0x080086d3
 8008654:	08008689 	.word	0x08008689
 8008658:	080086d3 	.word	0x080086d3
 800865c:	080086d3 	.word	0x080086d3
 8008660:	080086d3 	.word	0x080086d3
 8008664:	080086d3 	.word	0x080086d3
 8008668:	080086d3 	.word	0x080086d3
 800866c:	080086d3 	.word	0x080086d3
 8008670:	080086d3 	.word	0x080086d3
 8008674:	080086a3 	.word	0x080086a3
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8008678:	f7fd fd12 	bl	80060a0 <HAL_RCC_GetPCLK3Freq>
 800867c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800867e:	e0b8      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008680:	f7fd fbc4 	bl	8005e0c <HAL_RCC_GetSysClockFreq>
 8008684:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008686:	e0b4      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008688:	4b5c      	ldr	r3, [pc, #368]	; (80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008694:	d102      	bne.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 8008696:	4b5b      	ldr	r3, [pc, #364]	; (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 8008698:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800869a:	e0aa      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800869c:	2300      	movs	r3, #0
 800869e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80086a0:	e0a7      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80086a2:	4b56      	ldr	r3, [pc, #344]	; (80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80086a4:	689b      	ldr	r3, [r3, #8]
 80086a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d005      	beq.n	80086ba <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 80086ae:	4b53      	ldr	r3, [pc, #332]	; (80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80086b0:	689b      	ldr	r3, [r3, #8]
 80086b2:	0e1b      	lsrs	r3, r3, #24
 80086b4:	f003 030f 	and.w	r3, r3, #15
 80086b8:	e006      	b.n	80086c8 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 80086ba:	4b50      	ldr	r3, [pc, #320]	; (80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80086bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80086c0:	041b      	lsls	r3, r3, #16
 80086c2:	0e1b      	lsrs	r3, r3, #24
 80086c4:	f003 030f 	and.w	r3, r3, #15
 80086c8:	4a4d      	ldr	r2, [pc, #308]	; (8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80086ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80086d0:	e08f      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80086d2:	2300      	movs	r3, #0
 80086d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80086d6:	e08c      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80086d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086dc:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 80086e0:	430b      	orrs	r3, r1
 80086e2:	d14c      	bne.n	800877e <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80086e4:	4b45      	ldr	r3, [pc, #276]	; (80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80086e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80086ea:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80086ee:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80086f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086f6:	d013      	beq.n	8008720 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 80086f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086fa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086fe:	d83b      	bhi.n	8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8008700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008702:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008706:	d013      	beq.n	8008730 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 8008708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800870e:	d833      	bhi.n	8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8008710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008712:	2b00      	cmp	r3, #0
 8008714:	d014      	beq.n	8008740 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 8008716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008718:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800871c:	d014      	beq.n	8008748 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 800871e:	e02b      	b.n	8008778 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008720:	f107 0318 	add.w	r3, r7, #24
 8008724:	4618      	mov	r0, r3
 8008726:	f7fe fc7b 	bl	8007020 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800872e:	e060      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008734:	4618      	mov	r0, r3
 8008736:	f7fe fb0d 	bl	8006d54 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800873a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800873c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800873e:	e058      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008740:	f7fd fb64 	bl	8005e0c <HAL_RCC_GetSysClockFreq>
 8008744:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008746:	e054      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008748:	4b2c      	ldr	r3, [pc, #176]	; (80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800874a:	689b      	ldr	r3, [r3, #8]
 800874c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008750:	2b00      	cmp	r3, #0
 8008752:	d005      	beq.n	8008760 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 8008754:	4b29      	ldr	r3, [pc, #164]	; (80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008756:	689b      	ldr	r3, [r3, #8]
 8008758:	0e1b      	lsrs	r3, r3, #24
 800875a:	f003 030f 	and.w	r3, r3, #15
 800875e:	e006      	b.n	800876e <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8008760:	4b26      	ldr	r3, [pc, #152]	; (80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008762:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008766:	041b      	lsls	r3, r3, #16
 8008768:	0e1b      	lsrs	r3, r3, #24
 800876a:	f003 030f 	and.w	r3, r3, #15
 800876e:	4a24      	ldr	r2, [pc, #144]	; (8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8008770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008774:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008776:	e03c      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8008778:	2300      	movs	r3, #0
 800877a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800877c:	e039      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800877e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008782:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8008786:	430b      	orrs	r3, r1
 8008788:	d131      	bne.n	80087ee <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800878a:	4b1c      	ldr	r3, [pc, #112]	; (80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800878c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008790:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008794:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8008796:	4b19      	ldr	r3, [pc, #100]	; (80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008798:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800879c:	f003 0302 	and.w	r3, r3, #2
 80087a0:	2b02      	cmp	r3, #2
 80087a2:	d106      	bne.n	80087b2 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 80087a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d103      	bne.n	80087b2 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 80087aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087ae:	637b      	str	r3, [r7, #52]	; 0x34
 80087b0:	e01f      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80087b2:	4b12      	ldr	r3, [pc, #72]	; (80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80087b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80087b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087c0:	d112      	bne.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 80087c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087c8:	d10e      	bne.n	80087e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80087ca:	4b0c      	ldr	r3, [pc, #48]	; (80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80087cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80087d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087d8:	d102      	bne.n	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 80087da:	23fa      	movs	r3, #250	; 0xfa
 80087dc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80087de:	e008      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80087e0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80087e4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80087e6:	e004      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80087e8:	2300      	movs	r3, #0
 80087ea:	637b      	str	r3, [r7, #52]	; 0x34
 80087ec:	e001      	b.n	80087f2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 80087ee:	2300      	movs	r3, #0
 80087f0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 80087f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3738      	adds	r7, #56	; 0x38
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	46020c00 	.word	0x46020c00
 8008800:	0800c6f0 	.word	0x0800c6f0
 8008804:	00f42400 	.word	0x00f42400

08008808 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b084      	sub	sp, #16
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8008810:	4b47      	ldr	r3, [pc, #284]	; (8008930 <RCCEx_PLL2_Config+0x128>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a46      	ldr	r2, [pc, #280]	; (8008930 <RCCEx_PLL2_Config+0x128>)
 8008816:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800881a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800881c:	f7fa fa02 	bl	8002c24 <HAL_GetTick>
 8008820:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008822:	e008      	b.n	8008836 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008824:	f7fa f9fe 	bl	8002c24 <HAL_GetTick>
 8008828:	4602      	mov	r2, r0
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	1ad3      	subs	r3, r2, r3
 800882e:	2b02      	cmp	r3, #2
 8008830:	d901      	bls.n	8008836 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008832:	2303      	movs	r3, #3
 8008834:	e077      	b.n	8008926 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008836:	4b3e      	ldr	r3, [pc, #248]	; (8008930 <RCCEx_PLL2_Config+0x128>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800883e:	2b00      	cmp	r3, #0
 8008840:	d1f0      	bne.n	8008824 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008842:	4b3b      	ldr	r3, [pc, #236]	; (8008930 <RCCEx_PLL2_Config+0x128>)
 8008844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008846:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800884a:	f023 0303 	bic.w	r3, r3, #3
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	6811      	ldr	r1, [r2, #0]
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	6852      	ldr	r2, [r2, #4]
 8008856:	3a01      	subs	r2, #1
 8008858:	0212      	lsls	r2, r2, #8
 800885a:	430a      	orrs	r2, r1
 800885c:	4934      	ldr	r1, [pc, #208]	; (8008930 <RCCEx_PLL2_Config+0x128>)
 800885e:	4313      	orrs	r3, r2
 8008860:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008862:	4b33      	ldr	r3, [pc, #204]	; (8008930 <RCCEx_PLL2_Config+0x128>)
 8008864:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008866:	4b33      	ldr	r3, [pc, #204]	; (8008934 <RCCEx_PLL2_Config+0x12c>)
 8008868:	4013      	ands	r3, r2
 800886a:	687a      	ldr	r2, [r7, #4]
 800886c:	6892      	ldr	r2, [r2, #8]
 800886e:	3a01      	subs	r2, #1
 8008870:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008874:	687a      	ldr	r2, [r7, #4]
 8008876:	68d2      	ldr	r2, [r2, #12]
 8008878:	3a01      	subs	r2, #1
 800887a:	0252      	lsls	r2, r2, #9
 800887c:	b292      	uxth	r2, r2
 800887e:	4311      	orrs	r1, r2
 8008880:	687a      	ldr	r2, [r7, #4]
 8008882:	6912      	ldr	r2, [r2, #16]
 8008884:	3a01      	subs	r2, #1
 8008886:	0412      	lsls	r2, r2, #16
 8008888:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800888c:	4311      	orrs	r1, r2
 800888e:	687a      	ldr	r2, [r7, #4]
 8008890:	6952      	ldr	r2, [r2, #20]
 8008892:	3a01      	subs	r2, #1
 8008894:	0612      	lsls	r2, r2, #24
 8008896:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800889a:	430a      	orrs	r2, r1
 800889c:	4924      	ldr	r1, [pc, #144]	; (8008930 <RCCEx_PLL2_Config+0x128>)
 800889e:	4313      	orrs	r3, r2
 80088a0:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 80088a2:	4b23      	ldr	r3, [pc, #140]	; (8008930 <RCCEx_PLL2_Config+0x128>)
 80088a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088a6:	f023 020c 	bic.w	r2, r3, #12
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	699b      	ldr	r3, [r3, #24]
 80088ae:	4920      	ldr	r1, [pc, #128]	; (8008930 <RCCEx_PLL2_Config+0x128>)
 80088b0:	4313      	orrs	r3, r2
 80088b2:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 80088b4:	4b1e      	ldr	r3, [pc, #120]	; (8008930 <RCCEx_PLL2_Config+0x128>)
 80088b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6a1b      	ldr	r3, [r3, #32]
 80088bc:	491c      	ldr	r1, [pc, #112]	; (8008930 <RCCEx_PLL2_Config+0x128>)
 80088be:	4313      	orrs	r3, r2
 80088c0:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 80088c2:	4b1b      	ldr	r3, [pc, #108]	; (8008930 <RCCEx_PLL2_Config+0x128>)
 80088c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c6:	4a1a      	ldr	r2, [pc, #104]	; (8008930 <RCCEx_PLL2_Config+0x128>)
 80088c8:	f023 0310 	bic.w	r3, r3, #16
 80088cc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80088ce:	4b18      	ldr	r3, [pc, #96]	; (8008930 <RCCEx_PLL2_Config+0x128>)
 80088d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80088d6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80088da:	687a      	ldr	r2, [r7, #4]
 80088dc:	69d2      	ldr	r2, [r2, #28]
 80088de:	00d2      	lsls	r2, r2, #3
 80088e0:	4913      	ldr	r1, [pc, #76]	; (8008930 <RCCEx_PLL2_Config+0x128>)
 80088e2:	4313      	orrs	r3, r2
 80088e4:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80088e6:	4b12      	ldr	r3, [pc, #72]	; (8008930 <RCCEx_PLL2_Config+0x128>)
 80088e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ea:	4a11      	ldr	r2, [pc, #68]	; (8008930 <RCCEx_PLL2_Config+0x128>)
 80088ec:	f043 0310 	orr.w	r3, r3, #16
 80088f0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80088f2:	4b0f      	ldr	r3, [pc, #60]	; (8008930 <RCCEx_PLL2_Config+0x128>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a0e      	ldr	r2, [pc, #56]	; (8008930 <RCCEx_PLL2_Config+0x128>)
 80088f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80088fc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80088fe:	f7fa f991 	bl	8002c24 <HAL_GetTick>
 8008902:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008904:	e008      	b.n	8008918 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008906:	f7fa f98d 	bl	8002c24 <HAL_GetTick>
 800890a:	4602      	mov	r2, r0
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	1ad3      	subs	r3, r2, r3
 8008910:	2b02      	cmp	r3, #2
 8008912:	d901      	bls.n	8008918 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008914:	2303      	movs	r3, #3
 8008916:	e006      	b.n	8008926 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008918:	4b05      	ldr	r3, [pc, #20]	; (8008930 <RCCEx_PLL2_Config+0x128>)
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008920:	2b00      	cmp	r3, #0
 8008922:	d0f0      	beq.n	8008906 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8008924:	2300      	movs	r3, #0

}
 8008926:	4618      	mov	r0, r3
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}
 800892e:	bf00      	nop
 8008930:	46020c00 	.word	0x46020c00
 8008934:	80800000 	.word	0x80800000

08008938 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b084      	sub	sp, #16
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008940:	4b47      	ldr	r3, [pc, #284]	; (8008a60 <RCCEx_PLL3_Config+0x128>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a46      	ldr	r2, [pc, #280]	; (8008a60 <RCCEx_PLL3_Config+0x128>)
 8008946:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800894a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800894c:	f7fa f96a 	bl	8002c24 <HAL_GetTick>
 8008950:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008952:	e008      	b.n	8008966 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008954:	f7fa f966 	bl	8002c24 <HAL_GetTick>
 8008958:	4602      	mov	r2, r0
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	1ad3      	subs	r3, r2, r3
 800895e:	2b02      	cmp	r3, #2
 8008960:	d901      	bls.n	8008966 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008962:	2303      	movs	r3, #3
 8008964:	e077      	b.n	8008a56 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008966:	4b3e      	ldr	r3, [pc, #248]	; (8008a60 <RCCEx_PLL3_Config+0x128>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1f0      	bne.n	8008954 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008972:	4b3b      	ldr	r3, [pc, #236]	; (8008a60 <RCCEx_PLL3_Config+0x128>)
 8008974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008976:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800897a:	f023 0303 	bic.w	r3, r3, #3
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	6811      	ldr	r1, [r2, #0]
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	6852      	ldr	r2, [r2, #4]
 8008986:	3a01      	subs	r2, #1
 8008988:	0212      	lsls	r2, r2, #8
 800898a:	430a      	orrs	r2, r1
 800898c:	4934      	ldr	r1, [pc, #208]	; (8008a60 <RCCEx_PLL3_Config+0x128>)
 800898e:	4313      	orrs	r3, r2
 8008990:	630b      	str	r3, [r1, #48]	; 0x30
 8008992:	4b33      	ldr	r3, [pc, #204]	; (8008a60 <RCCEx_PLL3_Config+0x128>)
 8008994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008996:	4b33      	ldr	r3, [pc, #204]	; (8008a64 <RCCEx_PLL3_Config+0x12c>)
 8008998:	4013      	ands	r3, r2
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	6892      	ldr	r2, [r2, #8]
 800899e:	3a01      	subs	r2, #1
 80089a0:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	68d2      	ldr	r2, [r2, #12]
 80089a8:	3a01      	subs	r2, #1
 80089aa:	0252      	lsls	r2, r2, #9
 80089ac:	b292      	uxth	r2, r2
 80089ae:	4311      	orrs	r1, r2
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	6912      	ldr	r2, [r2, #16]
 80089b4:	3a01      	subs	r2, #1
 80089b6:	0412      	lsls	r2, r2, #16
 80089b8:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80089bc:	4311      	orrs	r1, r2
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	6952      	ldr	r2, [r2, #20]
 80089c2:	3a01      	subs	r2, #1
 80089c4:	0612      	lsls	r2, r2, #24
 80089c6:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80089ca:	430a      	orrs	r2, r1
 80089cc:	4924      	ldr	r1, [pc, #144]	; (8008a60 <RCCEx_PLL3_Config+0x128>)
 80089ce:	4313      	orrs	r3, r2
 80089d0:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80089d2:	4b23      	ldr	r3, [pc, #140]	; (8008a60 <RCCEx_PLL3_Config+0x128>)
 80089d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089d6:	f023 020c 	bic.w	r2, r3, #12
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	699b      	ldr	r3, [r3, #24]
 80089de:	4920      	ldr	r1, [pc, #128]	; (8008a60 <RCCEx_PLL3_Config+0x128>)
 80089e0:	4313      	orrs	r3, r2
 80089e2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80089e4:	4b1e      	ldr	r3, [pc, #120]	; (8008a60 <RCCEx_PLL3_Config+0x128>)
 80089e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6a1b      	ldr	r3, [r3, #32]
 80089ec:	491c      	ldr	r1, [pc, #112]	; (8008a60 <RCCEx_PLL3_Config+0x128>)
 80089ee:	4313      	orrs	r3, r2
 80089f0:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80089f2:	4b1b      	ldr	r3, [pc, #108]	; (8008a60 <RCCEx_PLL3_Config+0x128>)
 80089f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f6:	4a1a      	ldr	r2, [pc, #104]	; (8008a60 <RCCEx_PLL3_Config+0x128>)
 80089f8:	f023 0310 	bic.w	r3, r3, #16
 80089fc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80089fe:	4b18      	ldr	r3, [pc, #96]	; (8008a60 <RCCEx_PLL3_Config+0x128>)
 8008a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a06:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008a0a:	687a      	ldr	r2, [r7, #4]
 8008a0c:	69d2      	ldr	r2, [r2, #28]
 8008a0e:	00d2      	lsls	r2, r2, #3
 8008a10:	4913      	ldr	r1, [pc, #76]	; (8008a60 <RCCEx_PLL3_Config+0x128>)
 8008a12:	4313      	orrs	r3, r2
 8008a14:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8008a16:	4b12      	ldr	r3, [pc, #72]	; (8008a60 <RCCEx_PLL3_Config+0x128>)
 8008a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a1a:	4a11      	ldr	r2, [pc, #68]	; (8008a60 <RCCEx_PLL3_Config+0x128>)
 8008a1c:	f043 0310 	orr.w	r3, r3, #16
 8008a20:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008a22:	4b0f      	ldr	r3, [pc, #60]	; (8008a60 <RCCEx_PLL3_Config+0x128>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a0e      	ldr	r2, [pc, #56]	; (8008a60 <RCCEx_PLL3_Config+0x128>)
 8008a28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a2c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008a2e:	f7fa f8f9 	bl	8002c24 <HAL_GetTick>
 8008a32:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a34:	e008      	b.n	8008a48 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008a36:	f7fa f8f5 	bl	8002c24 <HAL_GetTick>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	1ad3      	subs	r3, r2, r3
 8008a40:	2b02      	cmp	r3, #2
 8008a42:	d901      	bls.n	8008a48 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008a44:	2303      	movs	r3, #3
 8008a46:	e006      	b.n	8008a56 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a48:	4b05      	ldr	r3, [pc, #20]	; (8008a60 <RCCEx_PLL3_Config+0x128>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d0f0      	beq.n	8008a36 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3710      	adds	r7, #16
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	46020c00 	.word	0x46020c00
 8008a64:	80800000 	.word	0x80800000

08008a68 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b084      	sub	sp, #16
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d101      	bne.n	8008a7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e0dd      	b.n	8008c36 <HAL_SPI_Init+0x1ce>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a70      	ldr	r2, [pc, #448]	; (8008c40 <HAL_SPI_Init+0x1d8>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d004      	beq.n	8008a8e <HAL_SPI_Init+0x26>
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a6e      	ldr	r2, [pc, #440]	; (8008c44 <HAL_SPI_Init+0x1dc>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	e000      	b.n	8008a90 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8008a8e:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2200      	movs	r2, #0
 8008a94:	629a      	str	r2, [r3, #40]	; 0x28

  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a69      	ldr	r2, [pc, #420]	; (8008c40 <HAL_SPI_Init+0x1d8>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d004      	beq.n	8008aaa <HAL_SPI_Init+0x42>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	4a67      	ldr	r2, [pc, #412]	; (8008c44 <HAL_SPI_Init+0x1dc>)
 8008aa6:	4293      	cmp	r3, r2
 8008aa8:	d105      	bne.n	8008ab6 <HAL_SPI_Init+0x4e>
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	68db      	ldr	r3, [r3, #12]
 8008aae:	2b0f      	cmp	r3, #15
 8008ab0:	d901      	bls.n	8008ab6 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e0bf      	b.n	8008c36 <HAL_SPI_Init+0x1ce>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 f8ce 	bl	8008c58 <SPI_GetPacketSize>
 8008abc:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	4a5f      	ldr	r2, [pc, #380]	; (8008c40 <HAL_SPI_Init+0x1d8>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d004      	beq.n	8008ad2 <HAL_SPI_Init+0x6a>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	4a5d      	ldr	r2, [pc, #372]	; (8008c44 <HAL_SPI_Init+0x1dc>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d102      	bne.n	8008ad8 <HAL_SPI_Init+0x70>
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2b08      	cmp	r3, #8
 8008ad6:	d816      	bhi.n	8008b06 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008adc:	4a5a      	ldr	r2, [pc, #360]	; (8008c48 <HAL_SPI_Init+0x1e0>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d00e      	beq.n	8008b00 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a59      	ldr	r2, [pc, #356]	; (8008c4c <HAL_SPI_Init+0x1e4>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d009      	beq.n	8008b00 <HAL_SPI_Init+0x98>
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	4a57      	ldr	r2, [pc, #348]	; (8008c50 <HAL_SPI_Init+0x1e8>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d004      	beq.n	8008b00 <HAL_SPI_Init+0x98>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	4a56      	ldr	r2, [pc, #344]	; (8008c54 <HAL_SPI_Init+0x1ec>)
 8008afc:	4293      	cmp	r3, r2
 8008afe:	d104      	bne.n	8008b0a <HAL_SPI_Init+0xa2>
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2b10      	cmp	r3, #16
 8008b04:	d901      	bls.n	8008b0a <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	e095      	b.n	8008c36 <HAL_SPI_Init+0x1ce>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008b10:	b2db      	uxtb	r3, r3
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d106      	bne.n	8008b24 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f7f9 fd3c 	bl	800259c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2202      	movs	r2, #2
 8008b28:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f022 0201 	bic.w	r2, r2, #1
 8008b3a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008b46:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	699b      	ldr	r3, [r3, #24]
 8008b4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008b50:	d119      	bne.n	8008b86 <HAL_SPI_Init+0x11e>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008b5a:	d103      	bne.n	8008b64 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d008      	beq.n	8008b76 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d10c      	bne.n	8008b86 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008b70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008b74:	d107      	bne.n	8008b86 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	681a      	ldr	r2, [r3, #0]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008b84:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	69da      	ldr	r2, [r3, #28]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b8e:	431a      	orrs	r2, r3
 8008b90:	68bb      	ldr	r3, [r7, #8]
 8008b92:	431a      	orrs	r2, r3
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b98:	ea42 0103 	orr.w	r1, r2, r3
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	68da      	ldr	r2, [r3, #12]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	430a      	orrs	r2, r1
 8008ba6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb0:	431a      	orrs	r2, r3
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb6:	431a      	orrs	r2, r3
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	699b      	ldr	r3, [r3, #24]
 8008bbc:	431a      	orrs	r2, r3
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	431a      	orrs	r2, r3
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	695b      	ldr	r3, [r3, #20]
 8008bc8:	431a      	orrs	r2, r3
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a1b      	ldr	r3, [r3, #32]
 8008bce:	431a      	orrs	r2, r3
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	431a      	orrs	r2, r3
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bda:	431a      	orrs	r2, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	689b      	ldr	r3, [r3, #8]
 8008be0:	431a      	orrs	r2, r3
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008be6:	431a      	orrs	r2, r3
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bec:	431a      	orrs	r2, r3
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bf2:	ea42 0103 	orr.w	r1, r2, r3
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	430a      	orrs	r2, r1
 8008c00:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00a      	beq.n	8008c24 <HAL_SPI_Init+0x1bc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	430a      	orrs	r2, r1
 8008c22:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8008c34:	2300      	movs	r3, #0
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	46002000 	.word	0x46002000
 8008c44:	56002000 	.word	0x56002000
 8008c48:	40013000 	.word	0x40013000
 8008c4c:	50013000 	.word	0x50013000
 8008c50:	40003800 	.word	0x40003800
 8008c54:	50003800 	.word	0x50003800

08008c58 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b085      	sub	sp, #20
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c64:	095b      	lsrs	r3, r3, #5
 8008c66:	3301      	adds	r3, #1
 8008c68:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	68db      	ldr	r3, [r3, #12]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008c72:	68bb      	ldr	r3, [r7, #8]
 8008c74:	3307      	adds	r3, #7
 8008c76:	08db      	lsrs	r3, r3, #3
 8008c78:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	68fa      	ldr	r2, [r7, #12]
 8008c7e:	fb02 f303 	mul.w	r3, r2, r3
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	3714      	adds	r7, #20
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <HAL_SPIEx_SetConfigAutonomousMode>:
  * @param  sConfig Pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi, SPI_AutonomousModeConfTypeDef *sConfig)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b083      	sub	sp, #12
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
 8008c96:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d12e      	bne.n	8008d02 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8008caa:	2b01      	cmp	r3, #1
 8008cac:	d101      	bne.n	8008cb2 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8008cae:	2302      	movs	r3, #2
 8008cb0:	e028      	b.n	8008d04 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2201      	movs	r2, #1
 8008cb6:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2202      	movs	r2, #2
 8008cbe:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));

    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f022 0201 	bic.w	r2, r2, #1
 8008cd0:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	681a      	ldr	r2, [r3, #0]
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8008cde:	ea42 0103 	orr.w	r1, r2, r3
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	689a      	ldr	r2, [r3, #8]
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	430a      	orrs	r2, r1
 8008cec:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	e000      	b.n	8008d04 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
  }
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	370c      	adds	r7, #12
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b085      	sub	sp, #20
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d1e:	b2db      	uxtb	r3, r3
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d001      	beq.n	8008d28 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	e06a      	b.n	8008dfe <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2202      	movs	r2, #2
 8008d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	4a35      	ldr	r2, [pc, #212]	; (8008e0c <HAL_TIM_Base_Start+0xfc>)
 8008d36:	4293      	cmp	r3, r2
 8008d38:	d040      	beq.n	8008dbc <HAL_TIM_Base_Start+0xac>
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	4a34      	ldr	r2, [pc, #208]	; (8008e10 <HAL_TIM_Base_Start+0x100>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d03b      	beq.n	8008dbc <HAL_TIM_Base_Start+0xac>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d4c:	d036      	beq.n	8008dbc <HAL_TIM_Base_Start+0xac>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008d56:	d031      	beq.n	8008dbc <HAL_TIM_Base_Start+0xac>
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a2d      	ldr	r2, [pc, #180]	; (8008e14 <HAL_TIM_Base_Start+0x104>)
 8008d5e:	4293      	cmp	r3, r2
 8008d60:	d02c      	beq.n	8008dbc <HAL_TIM_Base_Start+0xac>
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a2c      	ldr	r2, [pc, #176]	; (8008e18 <HAL_TIM_Base_Start+0x108>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d027      	beq.n	8008dbc <HAL_TIM_Base_Start+0xac>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a2a      	ldr	r2, [pc, #168]	; (8008e1c <HAL_TIM_Base_Start+0x10c>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d022      	beq.n	8008dbc <HAL_TIM_Base_Start+0xac>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a29      	ldr	r2, [pc, #164]	; (8008e20 <HAL_TIM_Base_Start+0x110>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d01d      	beq.n	8008dbc <HAL_TIM_Base_Start+0xac>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a27      	ldr	r2, [pc, #156]	; (8008e24 <HAL_TIM_Base_Start+0x114>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d018      	beq.n	8008dbc <HAL_TIM_Base_Start+0xac>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a26      	ldr	r2, [pc, #152]	; (8008e28 <HAL_TIM_Base_Start+0x118>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d013      	beq.n	8008dbc <HAL_TIM_Base_Start+0xac>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a24      	ldr	r2, [pc, #144]	; (8008e2c <HAL_TIM_Base_Start+0x11c>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d00e      	beq.n	8008dbc <HAL_TIM_Base_Start+0xac>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a23      	ldr	r2, [pc, #140]	; (8008e30 <HAL_TIM_Base_Start+0x120>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d009      	beq.n	8008dbc <HAL_TIM_Base_Start+0xac>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a21      	ldr	r2, [pc, #132]	; (8008e34 <HAL_TIM_Base_Start+0x124>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d004      	beq.n	8008dbc <HAL_TIM_Base_Start+0xac>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a20      	ldr	r2, [pc, #128]	; (8008e38 <HAL_TIM_Base_Start+0x128>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d115      	bne.n	8008de8 <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	689a      	ldr	r2, [r3, #8]
 8008dc2:	4b1e      	ldr	r3, [pc, #120]	; (8008e3c <HAL_TIM_Base_Start+0x12c>)
 8008dc4:	4013      	ands	r3, r2
 8008dc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2b06      	cmp	r3, #6
 8008dcc:	d015      	beq.n	8008dfa <HAL_TIM_Base_Start+0xea>
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008dd4:	d011      	beq.n	8008dfa <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f042 0201 	orr.w	r2, r2, #1
 8008de4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008de6:	e008      	b.n	8008dfa <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f042 0201 	orr.w	r2, r2, #1
 8008df6:	601a      	str	r2, [r3, #0]
 8008df8:	e000      	b.n	8008dfc <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dfa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008dfc:	2300      	movs	r3, #0
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	3714      	adds	r7, #20
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop
 8008e0c:	40012c00 	.word	0x40012c00
 8008e10:	50012c00 	.word	0x50012c00
 8008e14:	40000400 	.word	0x40000400
 8008e18:	50000400 	.word	0x50000400
 8008e1c:	40000800 	.word	0x40000800
 8008e20:	50000800 	.word	0x50000800
 8008e24:	40000c00 	.word	0x40000c00
 8008e28:	50000c00 	.word	0x50000c00
 8008e2c:	40013400 	.word	0x40013400
 8008e30:	50013400 	.word	0x50013400
 8008e34:	40014000 	.word	0x40014000
 8008e38:	50014000 	.word	0x50014000
 8008e3c:	00010007 	.word	0x00010007

08008e40 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b082      	sub	sp, #8
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d101      	bne.n	8008e52 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	e049      	b.n	8008ee6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d106      	bne.n	8008e6c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f7f9 fc28 	bl	80026bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2202      	movs	r2, #2
 8008e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681a      	ldr	r2, [r3, #0]
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	3304      	adds	r3, #4
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	4610      	mov	r0, r2
 8008e80:	f000 fc4e 	bl	8009720 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2201      	movs	r2, #1
 8008e88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	2201      	movs	r2, #1
 8008ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2201      	movs	r2, #1
 8008eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2201      	movs	r2, #1
 8008ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	2201      	movs	r2, #1
 8008ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2201      	movs	r2, #1
 8008ed0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3708      	adds	r7, #8
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}
	...

08008ef0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d109      	bne.n	8008f14 <HAL_TIM_PWM_Start+0x24>
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	2b01      	cmp	r3, #1
 8008f0a:	bf14      	ite	ne
 8008f0c:	2301      	movne	r3, #1
 8008f0e:	2300      	moveq	r3, #0
 8008f10:	b2db      	uxtb	r3, r3
 8008f12:	e03c      	b.n	8008f8e <HAL_TIM_PWM_Start+0x9e>
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	2b04      	cmp	r3, #4
 8008f18:	d109      	bne.n	8008f2e <HAL_TIM_PWM_Start+0x3e>
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008f20:	b2db      	uxtb	r3, r3
 8008f22:	2b01      	cmp	r3, #1
 8008f24:	bf14      	ite	ne
 8008f26:	2301      	movne	r3, #1
 8008f28:	2300      	moveq	r3, #0
 8008f2a:	b2db      	uxtb	r3, r3
 8008f2c:	e02f      	b.n	8008f8e <HAL_TIM_PWM_Start+0x9e>
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	2b08      	cmp	r3, #8
 8008f32:	d109      	bne.n	8008f48 <HAL_TIM_PWM_Start+0x58>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	bf14      	ite	ne
 8008f40:	2301      	movne	r3, #1
 8008f42:	2300      	moveq	r3, #0
 8008f44:	b2db      	uxtb	r3, r3
 8008f46:	e022      	b.n	8008f8e <HAL_TIM_PWM_Start+0x9e>
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	2b0c      	cmp	r3, #12
 8008f4c:	d109      	bne.n	8008f62 <HAL_TIM_PWM_Start+0x72>
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f54:	b2db      	uxtb	r3, r3
 8008f56:	2b01      	cmp	r3, #1
 8008f58:	bf14      	ite	ne
 8008f5a:	2301      	movne	r3, #1
 8008f5c:	2300      	moveq	r3, #0
 8008f5e:	b2db      	uxtb	r3, r3
 8008f60:	e015      	b.n	8008f8e <HAL_TIM_PWM_Start+0x9e>
 8008f62:	683b      	ldr	r3, [r7, #0]
 8008f64:	2b10      	cmp	r3, #16
 8008f66:	d109      	bne.n	8008f7c <HAL_TIM_PWM_Start+0x8c>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008f6e:	b2db      	uxtb	r3, r3
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	bf14      	ite	ne
 8008f74:	2301      	movne	r3, #1
 8008f76:	2300      	moveq	r3, #0
 8008f78:	b2db      	uxtb	r3, r3
 8008f7a:	e008      	b.n	8008f8e <HAL_TIM_PWM_Start+0x9e>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	bf14      	ite	ne
 8008f88:	2301      	movne	r3, #1
 8008f8a:	2300      	moveq	r3, #0
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d001      	beq.n	8008f96 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e0d8      	b.n	8009148 <HAL_TIM_PWM_Start+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d104      	bne.n	8008fa6 <HAL_TIM_PWM_Start+0xb6>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2202      	movs	r2, #2
 8008fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008fa4:	e023      	b.n	8008fee <HAL_TIM_PWM_Start+0xfe>
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	2b04      	cmp	r3, #4
 8008faa:	d104      	bne.n	8008fb6 <HAL_TIM_PWM_Start+0xc6>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	2202      	movs	r2, #2
 8008fb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008fb4:	e01b      	b.n	8008fee <HAL_TIM_PWM_Start+0xfe>
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	2b08      	cmp	r3, #8
 8008fba:	d104      	bne.n	8008fc6 <HAL_TIM_PWM_Start+0xd6>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2202      	movs	r2, #2
 8008fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008fc4:	e013      	b.n	8008fee <HAL_TIM_PWM_Start+0xfe>
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	2b0c      	cmp	r3, #12
 8008fca:	d104      	bne.n	8008fd6 <HAL_TIM_PWM_Start+0xe6>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2202      	movs	r2, #2
 8008fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008fd4:	e00b      	b.n	8008fee <HAL_TIM_PWM_Start+0xfe>
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	2b10      	cmp	r3, #16
 8008fda:	d104      	bne.n	8008fe6 <HAL_TIM_PWM_Start+0xf6>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	2202      	movs	r2, #2
 8008fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008fe4:	e003      	b.n	8008fee <HAL_TIM_PWM_Start+0xfe>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2202      	movs	r2, #2
 8008fea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	2201      	movs	r2, #1
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	f001 f862 	bl	800a0c0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	4a53      	ldr	r2, [pc, #332]	; (8009150 <HAL_TIM_PWM_Start+0x260>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d02c      	beq.n	8009060 <HAL_TIM_PWM_Start+0x170>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4a52      	ldr	r2, [pc, #328]	; (8009154 <HAL_TIM_PWM_Start+0x264>)
 800900c:	4293      	cmp	r3, r2
 800900e:	d027      	beq.n	8009060 <HAL_TIM_PWM_Start+0x170>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	4a50      	ldr	r2, [pc, #320]	; (8009158 <HAL_TIM_PWM_Start+0x268>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d022      	beq.n	8009060 <HAL_TIM_PWM_Start+0x170>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a4f      	ldr	r2, [pc, #316]	; (800915c <HAL_TIM_PWM_Start+0x26c>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d01d      	beq.n	8009060 <HAL_TIM_PWM_Start+0x170>
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	4a4d      	ldr	r2, [pc, #308]	; (8009160 <HAL_TIM_PWM_Start+0x270>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d018      	beq.n	8009060 <HAL_TIM_PWM_Start+0x170>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a4c      	ldr	r2, [pc, #304]	; (8009164 <HAL_TIM_PWM_Start+0x274>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d013      	beq.n	8009060 <HAL_TIM_PWM_Start+0x170>
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a4a      	ldr	r2, [pc, #296]	; (8009168 <HAL_TIM_PWM_Start+0x278>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d00e      	beq.n	8009060 <HAL_TIM_PWM_Start+0x170>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	4a49      	ldr	r2, [pc, #292]	; (800916c <HAL_TIM_PWM_Start+0x27c>)
 8009048:	4293      	cmp	r3, r2
 800904a:	d009      	beq.n	8009060 <HAL_TIM_PWM_Start+0x170>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a47      	ldr	r2, [pc, #284]	; (8009170 <HAL_TIM_PWM_Start+0x280>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d004      	beq.n	8009060 <HAL_TIM_PWM_Start+0x170>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	4a46      	ldr	r2, [pc, #280]	; (8009174 <HAL_TIM_PWM_Start+0x284>)
 800905c:	4293      	cmp	r3, r2
 800905e:	d101      	bne.n	8009064 <HAL_TIM_PWM_Start+0x174>
 8009060:	2301      	movs	r3, #1
 8009062:	e000      	b.n	8009066 <HAL_TIM_PWM_Start+0x176>
 8009064:	2300      	movs	r3, #0
 8009066:	2b00      	cmp	r3, #0
 8009068:	d007      	beq.n	800907a <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009078:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	4a34      	ldr	r2, [pc, #208]	; (8009150 <HAL_TIM_PWM_Start+0x260>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d040      	beq.n	8009106 <HAL_TIM_PWM_Start+0x216>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a32      	ldr	r2, [pc, #200]	; (8009154 <HAL_TIM_PWM_Start+0x264>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d03b      	beq.n	8009106 <HAL_TIM_PWM_Start+0x216>
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009096:	d036      	beq.n	8009106 <HAL_TIM_PWM_Start+0x216>
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80090a0:	d031      	beq.n	8009106 <HAL_TIM_PWM_Start+0x216>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	4a34      	ldr	r2, [pc, #208]	; (8009178 <HAL_TIM_PWM_Start+0x288>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d02c      	beq.n	8009106 <HAL_TIM_PWM_Start+0x216>
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4a32      	ldr	r2, [pc, #200]	; (800917c <HAL_TIM_PWM_Start+0x28c>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d027      	beq.n	8009106 <HAL_TIM_PWM_Start+0x216>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	4a31      	ldr	r2, [pc, #196]	; (8009180 <HAL_TIM_PWM_Start+0x290>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d022      	beq.n	8009106 <HAL_TIM_PWM_Start+0x216>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	4a2f      	ldr	r2, [pc, #188]	; (8009184 <HAL_TIM_PWM_Start+0x294>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d01d      	beq.n	8009106 <HAL_TIM_PWM_Start+0x216>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	4a2e      	ldr	r2, [pc, #184]	; (8009188 <HAL_TIM_PWM_Start+0x298>)
 80090d0:	4293      	cmp	r3, r2
 80090d2:	d018      	beq.n	8009106 <HAL_TIM_PWM_Start+0x216>
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4a2c      	ldr	r2, [pc, #176]	; (800918c <HAL_TIM_PWM_Start+0x29c>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d013      	beq.n	8009106 <HAL_TIM_PWM_Start+0x216>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	4a1d      	ldr	r2, [pc, #116]	; (8009158 <HAL_TIM_PWM_Start+0x268>)
 80090e4:	4293      	cmp	r3, r2
 80090e6:	d00e      	beq.n	8009106 <HAL_TIM_PWM_Start+0x216>
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	4a1b      	ldr	r2, [pc, #108]	; (800915c <HAL_TIM_PWM_Start+0x26c>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d009      	beq.n	8009106 <HAL_TIM_PWM_Start+0x216>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4a1a      	ldr	r2, [pc, #104]	; (8009160 <HAL_TIM_PWM_Start+0x270>)
 80090f8:	4293      	cmp	r3, r2
 80090fa:	d004      	beq.n	8009106 <HAL_TIM_PWM_Start+0x216>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a18      	ldr	r2, [pc, #96]	; (8009164 <HAL_TIM_PWM_Start+0x274>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d115      	bne.n	8009132 <HAL_TIM_PWM_Start+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	689a      	ldr	r2, [r3, #8]
 800910c:	4b20      	ldr	r3, [pc, #128]	; (8009190 <HAL_TIM_PWM_Start+0x2a0>)
 800910e:	4013      	ands	r3, r2
 8009110:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2b06      	cmp	r3, #6
 8009116:	d015      	beq.n	8009144 <HAL_TIM_PWM_Start+0x254>
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800911e:	d011      	beq.n	8009144 <HAL_TIM_PWM_Start+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	681a      	ldr	r2, [r3, #0]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f042 0201 	orr.w	r2, r2, #1
 800912e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009130:	e008      	b.n	8009144 <HAL_TIM_PWM_Start+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	f042 0201 	orr.w	r2, r2, #1
 8009140:	601a      	str	r2, [r3, #0]
 8009142:	e000      	b.n	8009146 <HAL_TIM_PWM_Start+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009144:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009146:	2300      	movs	r3, #0
}
 8009148:	4618      	mov	r0, r3
 800914a:	3710      	adds	r7, #16
 800914c:	46bd      	mov	sp, r7
 800914e:	bd80      	pop	{r7, pc}
 8009150:	40012c00 	.word	0x40012c00
 8009154:	50012c00 	.word	0x50012c00
 8009158:	40013400 	.word	0x40013400
 800915c:	50013400 	.word	0x50013400
 8009160:	40014000 	.word	0x40014000
 8009164:	50014000 	.word	0x50014000
 8009168:	40014400 	.word	0x40014400
 800916c:	50014400 	.word	0x50014400
 8009170:	40014800 	.word	0x40014800
 8009174:	50014800 	.word	0x50014800
 8009178:	40000400 	.word	0x40000400
 800917c:	50000400 	.word	0x50000400
 8009180:	40000800 	.word	0x40000800
 8009184:	50000800 	.word	0x50000800
 8009188:	40000c00 	.word	0x40000c00
 800918c:	50000c00 	.word	0x50000c00
 8009190:	00010007 	.word	0x00010007

08009194 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	691b      	ldr	r3, [r3, #16]
 80091a2:	f003 0302 	and.w	r3, r3, #2
 80091a6:	2b02      	cmp	r3, #2
 80091a8:	d122      	bne.n	80091f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	f003 0302 	and.w	r3, r3, #2
 80091b4:	2b02      	cmp	r3, #2
 80091b6:	d11b      	bne.n	80091f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	f06f 0202 	mvn.w	r2, #2
 80091c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	2201      	movs	r2, #1
 80091c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	699b      	ldr	r3, [r3, #24]
 80091ce:	f003 0303 	and.w	r3, r3, #3
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d003      	beq.n	80091de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 fa84 	bl	80096e4 <HAL_TIM_IC_CaptureCallback>
 80091dc:	e005      	b.n	80091ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 fa76 	bl	80096d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 fa87 	bl	80096f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	2200      	movs	r2, #0
 80091ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	691b      	ldr	r3, [r3, #16]
 80091f6:	f003 0304 	and.w	r3, r3, #4
 80091fa:	2b04      	cmp	r3, #4
 80091fc:	d122      	bne.n	8009244 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	f003 0304 	and.w	r3, r3, #4
 8009208:	2b04      	cmp	r3, #4
 800920a:	d11b      	bne.n	8009244 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f06f 0204 	mvn.w	r2, #4
 8009214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2202      	movs	r2, #2
 800921a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	699b      	ldr	r3, [r3, #24]
 8009222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009226:	2b00      	cmp	r3, #0
 8009228:	d003      	beq.n	8009232 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fa5a 	bl	80096e4 <HAL_TIM_IC_CaptureCallback>
 8009230:	e005      	b.n	800923e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 fa4c 	bl	80096d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f000 fa5d 	bl	80096f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	691b      	ldr	r3, [r3, #16]
 800924a:	f003 0308 	and.w	r3, r3, #8
 800924e:	2b08      	cmp	r3, #8
 8009250:	d122      	bne.n	8009298 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	68db      	ldr	r3, [r3, #12]
 8009258:	f003 0308 	and.w	r3, r3, #8
 800925c:	2b08      	cmp	r3, #8
 800925e:	d11b      	bne.n	8009298 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f06f 0208 	mvn.w	r2, #8
 8009268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2204      	movs	r2, #4
 800926e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	69db      	ldr	r3, [r3, #28]
 8009276:	f003 0303 	and.w	r3, r3, #3
 800927a:	2b00      	cmp	r3, #0
 800927c:	d003      	beq.n	8009286 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 fa30 	bl	80096e4 <HAL_TIM_IC_CaptureCallback>
 8009284:	e005      	b.n	8009292 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 fa22 	bl	80096d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f000 fa33 	bl	80096f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2200      	movs	r2, #0
 8009296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	691b      	ldr	r3, [r3, #16]
 800929e:	f003 0310 	and.w	r3, r3, #16
 80092a2:	2b10      	cmp	r3, #16
 80092a4:	d122      	bne.n	80092ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	68db      	ldr	r3, [r3, #12]
 80092ac:	f003 0310 	and.w	r3, r3, #16
 80092b0:	2b10      	cmp	r3, #16
 80092b2:	d11b      	bne.n	80092ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f06f 0210 	mvn.w	r2, #16
 80092bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2208      	movs	r2, #8
 80092c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	69db      	ldr	r3, [r3, #28]
 80092ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d003      	beq.n	80092da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f000 fa06 	bl	80096e4 <HAL_TIM_IC_CaptureCallback>
 80092d8:	e005      	b.n	80092e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 f9f8 	bl	80096d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 fa09 	bl	80096f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	2200      	movs	r2, #0
 80092ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	691b      	ldr	r3, [r3, #16]
 80092f2:	f003 0301 	and.w	r3, r3, #1
 80092f6:	2b01      	cmp	r3, #1
 80092f8:	d10e      	bne.n	8009318 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	f003 0301 	and.w	r3, r3, #1
 8009304:	2b01      	cmp	r3, #1
 8009306:	d107      	bne.n	8009318 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f06f 0201 	mvn.w	r2, #1
 8009310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009312:	6878      	ldr	r0, [r7, #4]
 8009314:	f000 f9d2 	bl	80096bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	691b      	ldr	r3, [r3, #16]
 800931e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009322:	2b80      	cmp	r3, #128	; 0x80
 8009324:	d10e      	bne.n	8009344 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009330:	2b80      	cmp	r3, #128	; 0x80
 8009332:	d107      	bne.n	8009344 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800933c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 ffb0 	bl	800a2a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	691b      	ldr	r3, [r3, #16]
 800934a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800934e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009352:	d10e      	bne.n	8009372 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	68db      	ldr	r3, [r3, #12]
 800935a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800935e:	2b80      	cmp	r3, #128	; 0x80
 8009360:	d107      	bne.n	8009372 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800936a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 ffa3 	bl	800a2b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	691b      	ldr	r3, [r3, #16]
 8009378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800937c:	2b40      	cmp	r3, #64	; 0x40
 800937e:	d10e      	bne.n	800939e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	68db      	ldr	r3, [r3, #12]
 8009386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800938a:	2b40      	cmp	r3, #64	; 0x40
 800938c:	d107      	bne.n	800939e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009396:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 f9b7 	bl	800970c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	691b      	ldr	r3, [r3, #16]
 80093a4:	f003 0320 	and.w	r3, r3, #32
 80093a8:	2b20      	cmp	r3, #32
 80093aa:	d10e      	bne.n	80093ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	68db      	ldr	r3, [r3, #12]
 80093b2:	f003 0320 	and.w	r3, r3, #32
 80093b6:	2b20      	cmp	r3, #32
 80093b8:	d107      	bne.n	80093ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f06f 0220 	mvn.w	r2, #32
 80093c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 ff63 	bl	800a290 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	691b      	ldr	r3, [r3, #16]
 80093d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80093d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093d8:	d10f      	bne.n	80093fa <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80093e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80093e8:	d107      	bne.n	80093fa <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80093f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 ff69 	bl	800a2cc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	691b      	ldr	r3, [r3, #16]
 8009400:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009404:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009408:	d10f      	bne.n	800942a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	68db      	ldr	r3, [r3, #12]
 8009410:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009414:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009418:	d107      	bne.n	800942a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8009422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 ff5b 	bl	800a2e0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	691b      	ldr	r3, [r3, #16]
 8009430:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009434:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009438:	d10f      	bne.n	800945a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	68db      	ldr	r3, [r3, #12]
 8009440:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009444:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009448:	d107      	bne.n	800945a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8009452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 ff4d 	bl	800a2f4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	691b      	ldr	r3, [r3, #16]
 8009460:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009464:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009468:	d10f      	bne.n	800948a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009474:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009478:	d107      	bne.n	800948a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8009482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 ff3f 	bl	800a308 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800948a:	bf00      	nop
 800948c:	3708      	adds	r7, #8
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
	...

08009494 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b086      	sub	sp, #24
 8009498:	af00      	add	r7, sp, #0
 800949a:	60f8      	str	r0, [r7, #12]
 800949c:	60b9      	str	r1, [r7, #8]
 800949e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094a0:	2300      	movs	r3, #0
 80094a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094aa:	2b01      	cmp	r3, #1
 80094ac:	d101      	bne.n	80094b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80094ae:	2302      	movs	r3, #2
 80094b0:	e0ff      	b.n	80096b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2201      	movs	r2, #1
 80094b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2b14      	cmp	r3, #20
 80094be:	f200 80f0 	bhi.w	80096a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80094c2:	a201      	add	r2, pc, #4	; (adr r2, 80094c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80094c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c8:	0800951d 	.word	0x0800951d
 80094cc:	080096a3 	.word	0x080096a3
 80094d0:	080096a3 	.word	0x080096a3
 80094d4:	080096a3 	.word	0x080096a3
 80094d8:	0800955d 	.word	0x0800955d
 80094dc:	080096a3 	.word	0x080096a3
 80094e0:	080096a3 	.word	0x080096a3
 80094e4:	080096a3 	.word	0x080096a3
 80094e8:	0800959f 	.word	0x0800959f
 80094ec:	080096a3 	.word	0x080096a3
 80094f0:	080096a3 	.word	0x080096a3
 80094f4:	080096a3 	.word	0x080096a3
 80094f8:	080095df 	.word	0x080095df
 80094fc:	080096a3 	.word	0x080096a3
 8009500:	080096a3 	.word	0x080096a3
 8009504:	080096a3 	.word	0x080096a3
 8009508:	08009621 	.word	0x08009621
 800950c:	080096a3 	.word	0x080096a3
 8009510:	080096a3 	.word	0x080096a3
 8009514:	080096a3 	.word	0x080096a3
 8009518:	08009661 	.word	0x08009661
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	68b9      	ldr	r1, [r7, #8]
 8009522:	4618      	mov	r0, r3
 8009524:	f000 f9f6 	bl	8009914 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	699a      	ldr	r2, [r3, #24]
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f042 0208 	orr.w	r2, r2, #8
 8009536:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	699a      	ldr	r2, [r3, #24]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f022 0204 	bic.w	r2, r2, #4
 8009546:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	6999      	ldr	r1, [r3, #24]
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	691a      	ldr	r2, [r3, #16]
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	430a      	orrs	r2, r1
 8009558:	619a      	str	r2, [r3, #24]
      break;
 800955a:	e0a5      	b.n	80096a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	68b9      	ldr	r1, [r7, #8]
 8009562:	4618      	mov	r0, r3
 8009564:	f000 fa98 	bl	8009a98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	699a      	ldr	r2, [r3, #24]
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009576:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	699a      	ldr	r2, [r3, #24]
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009586:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	6999      	ldr	r1, [r3, #24]
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	691b      	ldr	r3, [r3, #16]
 8009592:	021a      	lsls	r2, r3, #8
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	430a      	orrs	r2, r1
 800959a:	619a      	str	r2, [r3, #24]
      break;
 800959c:	e084      	b.n	80096a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	68b9      	ldr	r1, [r7, #8]
 80095a4:	4618      	mov	r0, r3
 80095a6:	f000 fb27 	bl	8009bf8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	69da      	ldr	r2, [r3, #28]
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f042 0208 	orr.w	r2, r2, #8
 80095b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	69da      	ldr	r2, [r3, #28]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f022 0204 	bic.w	r2, r2, #4
 80095c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	69d9      	ldr	r1, [r3, #28]
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	691a      	ldr	r2, [r3, #16]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	430a      	orrs	r2, r1
 80095da:	61da      	str	r2, [r3, #28]
      break;
 80095dc:	e064      	b.n	80096a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	68b9      	ldr	r1, [r7, #8]
 80095e4:	4618      	mov	r0, r3
 80095e6:	f000 fbb5 	bl	8009d54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	69da      	ldr	r2, [r3, #28]
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	69da      	ldr	r2, [r3, #28]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009608:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	69d9      	ldr	r1, [r3, #28]
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	691b      	ldr	r3, [r3, #16]
 8009614:	021a      	lsls	r2, r3, #8
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	430a      	orrs	r2, r1
 800961c:	61da      	str	r2, [r3, #28]
      break;
 800961e:	e043      	b.n	80096a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	68b9      	ldr	r1, [r7, #8]
 8009626:	4618      	mov	r0, r3
 8009628:	f000 fc44 	bl	8009eb4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	f042 0208 	orr.w	r2, r2, #8
 800963a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f022 0204 	bic.w	r2, r2, #4
 800964a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	691a      	ldr	r2, [r3, #16]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	430a      	orrs	r2, r1
 800965c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800965e:	e023      	b.n	80096a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68b9      	ldr	r1, [r7, #8]
 8009666:	4618      	mov	r0, r3
 8009668:	f000 fca6 	bl	8009fb8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800967a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800968a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009692:	68bb      	ldr	r3, [r7, #8]
 8009694:	691b      	ldr	r3, [r3, #16]
 8009696:	021a      	lsls	r2, r3, #8
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	430a      	orrs	r2, r1
 800969e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80096a0:	e002      	b.n	80096a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80096a2:	2301      	movs	r3, #1
 80096a4:	75fb      	strb	r3, [r7, #23]
      break;
 80096a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2200      	movs	r2, #0
 80096ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80096b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3718      	adds	r7, #24
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop

080096bc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80096c4:	bf00      	nop
 80096c6:	370c      	adds	r7, #12
 80096c8:	46bd      	mov	sp, r7
 80096ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ce:	4770      	bx	lr

080096d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80096d0:	b480      	push	{r7}
 80096d2:	b083      	sub	sp, #12
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80096d8:	bf00      	nop
 80096da:	370c      	adds	r7, #12
 80096dc:	46bd      	mov	sp, r7
 80096de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e2:	4770      	bx	lr

080096e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80096ec:	bf00      	nop
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr

080096f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009700:	bf00      	nop
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009714:	bf00      	nop
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009720:	b480      	push	{r7}
 8009722:	b085      	sub	sp, #20
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	4a68      	ldr	r2, [pc, #416]	; (80098d4 <TIM_Base_SetConfig+0x1b4>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d02b      	beq.n	8009790 <TIM_Base_SetConfig+0x70>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	4a67      	ldr	r2, [pc, #412]	; (80098d8 <TIM_Base_SetConfig+0x1b8>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d027      	beq.n	8009790 <TIM_Base_SetConfig+0x70>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009746:	d023      	beq.n	8009790 <TIM_Base_SetConfig+0x70>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800974e:	d01f      	beq.n	8009790 <TIM_Base_SetConfig+0x70>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	4a62      	ldr	r2, [pc, #392]	; (80098dc <TIM_Base_SetConfig+0x1bc>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d01b      	beq.n	8009790 <TIM_Base_SetConfig+0x70>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	4a61      	ldr	r2, [pc, #388]	; (80098e0 <TIM_Base_SetConfig+0x1c0>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d017      	beq.n	8009790 <TIM_Base_SetConfig+0x70>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	4a60      	ldr	r2, [pc, #384]	; (80098e4 <TIM_Base_SetConfig+0x1c4>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d013      	beq.n	8009790 <TIM_Base_SetConfig+0x70>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	4a5f      	ldr	r2, [pc, #380]	; (80098e8 <TIM_Base_SetConfig+0x1c8>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d00f      	beq.n	8009790 <TIM_Base_SetConfig+0x70>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	4a5e      	ldr	r2, [pc, #376]	; (80098ec <TIM_Base_SetConfig+0x1cc>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d00b      	beq.n	8009790 <TIM_Base_SetConfig+0x70>
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	4a5d      	ldr	r2, [pc, #372]	; (80098f0 <TIM_Base_SetConfig+0x1d0>)
 800977c:	4293      	cmp	r3, r2
 800977e:	d007      	beq.n	8009790 <TIM_Base_SetConfig+0x70>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	4a5c      	ldr	r2, [pc, #368]	; (80098f4 <TIM_Base_SetConfig+0x1d4>)
 8009784:	4293      	cmp	r3, r2
 8009786:	d003      	beq.n	8009790 <TIM_Base_SetConfig+0x70>
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	4a5b      	ldr	r2, [pc, #364]	; (80098f8 <TIM_Base_SetConfig+0x1d8>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d108      	bne.n	80097a2 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009796:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	68fa      	ldr	r2, [r7, #12]
 800979e:	4313      	orrs	r3, r2
 80097a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4a4b      	ldr	r2, [pc, #300]	; (80098d4 <TIM_Base_SetConfig+0x1b4>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d043      	beq.n	8009832 <TIM_Base_SetConfig+0x112>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	4a4a      	ldr	r2, [pc, #296]	; (80098d8 <TIM_Base_SetConfig+0x1b8>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d03f      	beq.n	8009832 <TIM_Base_SetConfig+0x112>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097b8:	d03b      	beq.n	8009832 <TIM_Base_SetConfig+0x112>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80097c0:	d037      	beq.n	8009832 <TIM_Base_SetConfig+0x112>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	4a45      	ldr	r2, [pc, #276]	; (80098dc <TIM_Base_SetConfig+0x1bc>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d033      	beq.n	8009832 <TIM_Base_SetConfig+0x112>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	4a44      	ldr	r2, [pc, #272]	; (80098e0 <TIM_Base_SetConfig+0x1c0>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d02f      	beq.n	8009832 <TIM_Base_SetConfig+0x112>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	4a43      	ldr	r2, [pc, #268]	; (80098e4 <TIM_Base_SetConfig+0x1c4>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d02b      	beq.n	8009832 <TIM_Base_SetConfig+0x112>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	4a42      	ldr	r2, [pc, #264]	; (80098e8 <TIM_Base_SetConfig+0x1c8>)
 80097de:	4293      	cmp	r3, r2
 80097e0:	d027      	beq.n	8009832 <TIM_Base_SetConfig+0x112>
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	4a41      	ldr	r2, [pc, #260]	; (80098ec <TIM_Base_SetConfig+0x1cc>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d023      	beq.n	8009832 <TIM_Base_SetConfig+0x112>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4a40      	ldr	r2, [pc, #256]	; (80098f0 <TIM_Base_SetConfig+0x1d0>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d01f      	beq.n	8009832 <TIM_Base_SetConfig+0x112>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	4a3f      	ldr	r2, [pc, #252]	; (80098f4 <TIM_Base_SetConfig+0x1d4>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d01b      	beq.n	8009832 <TIM_Base_SetConfig+0x112>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4a3e      	ldr	r2, [pc, #248]	; (80098f8 <TIM_Base_SetConfig+0x1d8>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d017      	beq.n	8009832 <TIM_Base_SetConfig+0x112>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	4a3d      	ldr	r2, [pc, #244]	; (80098fc <TIM_Base_SetConfig+0x1dc>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d013      	beq.n	8009832 <TIM_Base_SetConfig+0x112>
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	4a3c      	ldr	r2, [pc, #240]	; (8009900 <TIM_Base_SetConfig+0x1e0>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d00f      	beq.n	8009832 <TIM_Base_SetConfig+0x112>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	4a3b      	ldr	r2, [pc, #236]	; (8009904 <TIM_Base_SetConfig+0x1e4>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d00b      	beq.n	8009832 <TIM_Base_SetConfig+0x112>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4a3a      	ldr	r2, [pc, #232]	; (8009908 <TIM_Base_SetConfig+0x1e8>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d007      	beq.n	8009832 <TIM_Base_SetConfig+0x112>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	4a39      	ldr	r2, [pc, #228]	; (800990c <TIM_Base_SetConfig+0x1ec>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d003      	beq.n	8009832 <TIM_Base_SetConfig+0x112>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	4a38      	ldr	r2, [pc, #224]	; (8009910 <TIM_Base_SetConfig+0x1f0>)
 800982e:	4293      	cmp	r3, r2
 8009830:	d108      	bne.n	8009844 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	68db      	ldr	r3, [r3, #12]
 800983e:	68fa      	ldr	r2, [r7, #12]
 8009840:	4313      	orrs	r3, r2
 8009842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800984a:	683b      	ldr	r3, [r7, #0]
 800984c:	695b      	ldr	r3, [r3, #20]
 800984e:	4313      	orrs	r3, r2
 8009850:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	68fa      	ldr	r2, [r7, #12]
 8009856:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	689a      	ldr	r2, [r3, #8]
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	4a1a      	ldr	r2, [pc, #104]	; (80098d4 <TIM_Base_SetConfig+0x1b4>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d023      	beq.n	80098b8 <TIM_Base_SetConfig+0x198>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	4a19      	ldr	r2, [pc, #100]	; (80098d8 <TIM_Base_SetConfig+0x1b8>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d01f      	beq.n	80098b8 <TIM_Base_SetConfig+0x198>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	4a1e      	ldr	r2, [pc, #120]	; (80098f4 <TIM_Base_SetConfig+0x1d4>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d01b      	beq.n	80098b8 <TIM_Base_SetConfig+0x198>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4a1d      	ldr	r2, [pc, #116]	; (80098f8 <TIM_Base_SetConfig+0x1d8>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d017      	beq.n	80098b8 <TIM_Base_SetConfig+0x198>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4a1c      	ldr	r2, [pc, #112]	; (80098fc <TIM_Base_SetConfig+0x1dc>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d013      	beq.n	80098b8 <TIM_Base_SetConfig+0x198>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a1b      	ldr	r2, [pc, #108]	; (8009900 <TIM_Base_SetConfig+0x1e0>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d00f      	beq.n	80098b8 <TIM_Base_SetConfig+0x198>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4a1a      	ldr	r2, [pc, #104]	; (8009904 <TIM_Base_SetConfig+0x1e4>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d00b      	beq.n	80098b8 <TIM_Base_SetConfig+0x198>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a19      	ldr	r2, [pc, #100]	; (8009908 <TIM_Base_SetConfig+0x1e8>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d007      	beq.n	80098b8 <TIM_Base_SetConfig+0x198>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a18      	ldr	r2, [pc, #96]	; (800990c <TIM_Base_SetConfig+0x1ec>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d003      	beq.n	80098b8 <TIM_Base_SetConfig+0x198>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	4a17      	ldr	r2, [pc, #92]	; (8009910 <TIM_Base_SetConfig+0x1f0>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d103      	bne.n	80098c0 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	691a      	ldr	r2, [r3, #16]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2201      	movs	r2, #1
 80098c4:	615a      	str	r2, [r3, #20]
}
 80098c6:	bf00      	nop
 80098c8:	3714      	adds	r7, #20
 80098ca:	46bd      	mov	sp, r7
 80098cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d0:	4770      	bx	lr
 80098d2:	bf00      	nop
 80098d4:	40012c00 	.word	0x40012c00
 80098d8:	50012c00 	.word	0x50012c00
 80098dc:	40000400 	.word	0x40000400
 80098e0:	50000400 	.word	0x50000400
 80098e4:	40000800 	.word	0x40000800
 80098e8:	50000800 	.word	0x50000800
 80098ec:	40000c00 	.word	0x40000c00
 80098f0:	50000c00 	.word	0x50000c00
 80098f4:	40013400 	.word	0x40013400
 80098f8:	50013400 	.word	0x50013400
 80098fc:	40014000 	.word	0x40014000
 8009900:	50014000 	.word	0x50014000
 8009904:	40014400 	.word	0x40014400
 8009908:	50014400 	.word	0x50014400
 800990c:	40014800 	.word	0x40014800
 8009910:	50014800 	.word	0x50014800

08009914 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009914:	b480      	push	{r7}
 8009916:	b087      	sub	sp, #28
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6a1b      	ldr	r3, [r3, #32]
 8009922:	f023 0201 	bic.w	r2, r3, #1
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6a1b      	ldr	r3, [r3, #32]
 800992e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	685b      	ldr	r3, [r3, #4]
 8009934:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	699b      	ldr	r3, [r3, #24]
 800993a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009946:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	f023 0303 	bic.w	r3, r3, #3
 800994e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	68fa      	ldr	r2, [r7, #12]
 8009956:	4313      	orrs	r3, r2
 8009958:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	f023 0302 	bic.w	r3, r3, #2
 8009960:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	689b      	ldr	r3, [r3, #8]
 8009966:	697a      	ldr	r2, [r7, #20]
 8009968:	4313      	orrs	r3, r2
 800996a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	4a40      	ldr	r2, [pc, #256]	; (8009a70 <TIM_OC1_SetConfig+0x15c>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d023      	beq.n	80099bc <TIM_OC1_SetConfig+0xa8>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	4a3f      	ldr	r2, [pc, #252]	; (8009a74 <TIM_OC1_SetConfig+0x160>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d01f      	beq.n	80099bc <TIM_OC1_SetConfig+0xa8>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	4a3e      	ldr	r2, [pc, #248]	; (8009a78 <TIM_OC1_SetConfig+0x164>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d01b      	beq.n	80099bc <TIM_OC1_SetConfig+0xa8>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	4a3d      	ldr	r2, [pc, #244]	; (8009a7c <TIM_OC1_SetConfig+0x168>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d017      	beq.n	80099bc <TIM_OC1_SetConfig+0xa8>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	4a3c      	ldr	r2, [pc, #240]	; (8009a80 <TIM_OC1_SetConfig+0x16c>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d013      	beq.n	80099bc <TIM_OC1_SetConfig+0xa8>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	4a3b      	ldr	r2, [pc, #236]	; (8009a84 <TIM_OC1_SetConfig+0x170>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d00f      	beq.n	80099bc <TIM_OC1_SetConfig+0xa8>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	4a3a      	ldr	r2, [pc, #232]	; (8009a88 <TIM_OC1_SetConfig+0x174>)
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d00b      	beq.n	80099bc <TIM_OC1_SetConfig+0xa8>
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	4a39      	ldr	r2, [pc, #228]	; (8009a8c <TIM_OC1_SetConfig+0x178>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d007      	beq.n	80099bc <TIM_OC1_SetConfig+0xa8>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	4a38      	ldr	r2, [pc, #224]	; (8009a90 <TIM_OC1_SetConfig+0x17c>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d003      	beq.n	80099bc <TIM_OC1_SetConfig+0xa8>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4a37      	ldr	r2, [pc, #220]	; (8009a94 <TIM_OC1_SetConfig+0x180>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d10c      	bne.n	80099d6 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80099bc:	697b      	ldr	r3, [r7, #20]
 80099be:	f023 0308 	bic.w	r3, r3, #8
 80099c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80099c4:	683b      	ldr	r3, [r7, #0]
 80099c6:	68db      	ldr	r3, [r3, #12]
 80099c8:	697a      	ldr	r2, [r7, #20]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	f023 0304 	bic.w	r3, r3, #4
 80099d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	4a25      	ldr	r2, [pc, #148]	; (8009a70 <TIM_OC1_SetConfig+0x15c>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d023      	beq.n	8009a26 <TIM_OC1_SetConfig+0x112>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	4a24      	ldr	r2, [pc, #144]	; (8009a74 <TIM_OC1_SetConfig+0x160>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d01f      	beq.n	8009a26 <TIM_OC1_SetConfig+0x112>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	4a23      	ldr	r2, [pc, #140]	; (8009a78 <TIM_OC1_SetConfig+0x164>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d01b      	beq.n	8009a26 <TIM_OC1_SetConfig+0x112>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	4a22      	ldr	r2, [pc, #136]	; (8009a7c <TIM_OC1_SetConfig+0x168>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d017      	beq.n	8009a26 <TIM_OC1_SetConfig+0x112>
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	4a21      	ldr	r2, [pc, #132]	; (8009a80 <TIM_OC1_SetConfig+0x16c>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d013      	beq.n	8009a26 <TIM_OC1_SetConfig+0x112>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	4a20      	ldr	r2, [pc, #128]	; (8009a84 <TIM_OC1_SetConfig+0x170>)
 8009a02:	4293      	cmp	r3, r2
 8009a04:	d00f      	beq.n	8009a26 <TIM_OC1_SetConfig+0x112>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	4a1f      	ldr	r2, [pc, #124]	; (8009a88 <TIM_OC1_SetConfig+0x174>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d00b      	beq.n	8009a26 <TIM_OC1_SetConfig+0x112>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	4a1e      	ldr	r2, [pc, #120]	; (8009a8c <TIM_OC1_SetConfig+0x178>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d007      	beq.n	8009a26 <TIM_OC1_SetConfig+0x112>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	4a1d      	ldr	r2, [pc, #116]	; (8009a90 <TIM_OC1_SetConfig+0x17c>)
 8009a1a:	4293      	cmp	r3, r2
 8009a1c:	d003      	beq.n	8009a26 <TIM_OC1_SetConfig+0x112>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	4a1c      	ldr	r2, [pc, #112]	; (8009a94 <TIM_OC1_SetConfig+0x180>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d111      	bne.n	8009a4a <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a26:	693b      	ldr	r3, [r7, #16]
 8009a28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	695b      	ldr	r3, [r3, #20]
 8009a3a:	693a      	ldr	r2, [r7, #16]
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	699b      	ldr	r3, [r3, #24]
 8009a44:	693a      	ldr	r2, [r7, #16]
 8009a46:	4313      	orrs	r3, r2
 8009a48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	693a      	ldr	r2, [r7, #16]
 8009a4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	68fa      	ldr	r2, [r7, #12]
 8009a54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	685a      	ldr	r2, [r3, #4]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	697a      	ldr	r2, [r7, #20]
 8009a62:	621a      	str	r2, [r3, #32]
}
 8009a64:	bf00      	nop
 8009a66:	371c      	adds	r7, #28
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr
 8009a70:	40012c00 	.word	0x40012c00
 8009a74:	50012c00 	.word	0x50012c00
 8009a78:	40013400 	.word	0x40013400
 8009a7c:	50013400 	.word	0x50013400
 8009a80:	40014000 	.word	0x40014000
 8009a84:	50014000 	.word	0x50014000
 8009a88:	40014400 	.word	0x40014400
 8009a8c:	50014400 	.word	0x50014400
 8009a90:	40014800 	.word	0x40014800
 8009a94:	50014800 	.word	0x50014800

08009a98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b087      	sub	sp, #28
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	6078      	str	r0, [r7, #4]
 8009aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6a1b      	ldr	r3, [r3, #32]
 8009aa6:	f023 0210 	bic.w	r2, r3, #16
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6a1b      	ldr	r3, [r3, #32]
 8009ab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	699b      	ldr	r3, [r3, #24]
 8009abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ac6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009aca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ad2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	021b      	lsls	r3, r3, #8
 8009ada:	68fa      	ldr	r2, [r7, #12]
 8009adc:	4313      	orrs	r3, r2
 8009ade:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	f023 0320 	bic.w	r3, r3, #32
 8009ae6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	011b      	lsls	r3, r3, #4
 8009aee:	697a      	ldr	r2, [r7, #20]
 8009af0:	4313      	orrs	r3, r2
 8009af2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4a36      	ldr	r2, [pc, #216]	; (8009bd0 <TIM_OC2_SetConfig+0x138>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d00b      	beq.n	8009b14 <TIM_OC2_SetConfig+0x7c>
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	4a35      	ldr	r2, [pc, #212]	; (8009bd4 <TIM_OC2_SetConfig+0x13c>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d007      	beq.n	8009b14 <TIM_OC2_SetConfig+0x7c>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	4a34      	ldr	r2, [pc, #208]	; (8009bd8 <TIM_OC2_SetConfig+0x140>)
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d003      	beq.n	8009b14 <TIM_OC2_SetConfig+0x7c>
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	4a33      	ldr	r2, [pc, #204]	; (8009bdc <TIM_OC2_SetConfig+0x144>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d10d      	bne.n	8009b30 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	68db      	ldr	r3, [r3, #12]
 8009b20:	011b      	lsls	r3, r3, #4
 8009b22:	697a      	ldr	r2, [r7, #20]
 8009b24:	4313      	orrs	r3, r2
 8009b26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	4a27      	ldr	r2, [pc, #156]	; (8009bd0 <TIM_OC2_SetConfig+0x138>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d023      	beq.n	8009b80 <TIM_OC2_SetConfig+0xe8>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	4a26      	ldr	r2, [pc, #152]	; (8009bd4 <TIM_OC2_SetConfig+0x13c>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d01f      	beq.n	8009b80 <TIM_OC2_SetConfig+0xe8>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	4a25      	ldr	r2, [pc, #148]	; (8009bd8 <TIM_OC2_SetConfig+0x140>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d01b      	beq.n	8009b80 <TIM_OC2_SetConfig+0xe8>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4a24      	ldr	r2, [pc, #144]	; (8009bdc <TIM_OC2_SetConfig+0x144>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d017      	beq.n	8009b80 <TIM_OC2_SetConfig+0xe8>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	4a23      	ldr	r2, [pc, #140]	; (8009be0 <TIM_OC2_SetConfig+0x148>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d013      	beq.n	8009b80 <TIM_OC2_SetConfig+0xe8>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4a22      	ldr	r2, [pc, #136]	; (8009be4 <TIM_OC2_SetConfig+0x14c>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d00f      	beq.n	8009b80 <TIM_OC2_SetConfig+0xe8>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4a21      	ldr	r2, [pc, #132]	; (8009be8 <TIM_OC2_SetConfig+0x150>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d00b      	beq.n	8009b80 <TIM_OC2_SetConfig+0xe8>
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	4a20      	ldr	r2, [pc, #128]	; (8009bec <TIM_OC2_SetConfig+0x154>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d007      	beq.n	8009b80 <TIM_OC2_SetConfig+0xe8>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	4a1f      	ldr	r2, [pc, #124]	; (8009bf0 <TIM_OC2_SetConfig+0x158>)
 8009b74:	4293      	cmp	r3, r2
 8009b76:	d003      	beq.n	8009b80 <TIM_OC2_SetConfig+0xe8>
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	4a1e      	ldr	r2, [pc, #120]	; (8009bf4 <TIM_OC2_SetConfig+0x15c>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d113      	bne.n	8009ba8 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	695b      	ldr	r3, [r3, #20]
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	693a      	ldr	r2, [r7, #16]
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	699b      	ldr	r3, [r3, #24]
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	693a      	ldr	r2, [r7, #16]
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	693a      	ldr	r2, [r7, #16]
 8009bac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	68fa      	ldr	r2, [r7, #12]
 8009bb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	685a      	ldr	r2, [r3, #4]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	697a      	ldr	r2, [r7, #20]
 8009bc0:	621a      	str	r2, [r3, #32]
}
 8009bc2:	bf00      	nop
 8009bc4:	371c      	adds	r7, #28
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop
 8009bd0:	40012c00 	.word	0x40012c00
 8009bd4:	50012c00 	.word	0x50012c00
 8009bd8:	40013400 	.word	0x40013400
 8009bdc:	50013400 	.word	0x50013400
 8009be0:	40014000 	.word	0x40014000
 8009be4:	50014000 	.word	0x50014000
 8009be8:	40014400 	.word	0x40014400
 8009bec:	50014400 	.word	0x50014400
 8009bf0:	40014800 	.word	0x40014800
 8009bf4:	50014800 	.word	0x50014800

08009bf8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009bf8:	b480      	push	{r7}
 8009bfa:	b087      	sub	sp, #28
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
 8009c00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6a1b      	ldr	r3, [r3, #32]
 8009c06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6a1b      	ldr	r3, [r3, #32]
 8009c12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	69db      	ldr	r3, [r3, #28]
 8009c1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	f023 0303 	bic.w	r3, r3, #3
 8009c32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	68fa      	ldr	r2, [r7, #12]
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c44:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	689b      	ldr	r3, [r3, #8]
 8009c4a:	021b      	lsls	r3, r3, #8
 8009c4c:	697a      	ldr	r2, [r7, #20]
 8009c4e:	4313      	orrs	r3, r2
 8009c50:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	4a35      	ldr	r2, [pc, #212]	; (8009d2c <TIM_OC3_SetConfig+0x134>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d00b      	beq.n	8009c72 <TIM_OC3_SetConfig+0x7a>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	4a34      	ldr	r2, [pc, #208]	; (8009d30 <TIM_OC3_SetConfig+0x138>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d007      	beq.n	8009c72 <TIM_OC3_SetConfig+0x7a>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4a33      	ldr	r2, [pc, #204]	; (8009d34 <TIM_OC3_SetConfig+0x13c>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d003      	beq.n	8009c72 <TIM_OC3_SetConfig+0x7a>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	4a32      	ldr	r2, [pc, #200]	; (8009d38 <TIM_OC3_SetConfig+0x140>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d10d      	bne.n	8009c8e <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c72:	697b      	ldr	r3, [r7, #20]
 8009c74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	68db      	ldr	r3, [r3, #12]
 8009c7e:	021b      	lsls	r3, r3, #8
 8009c80:	697a      	ldr	r2, [r7, #20]
 8009c82:	4313      	orrs	r3, r2
 8009c84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	4a26      	ldr	r2, [pc, #152]	; (8009d2c <TIM_OC3_SetConfig+0x134>)
 8009c92:	4293      	cmp	r3, r2
 8009c94:	d023      	beq.n	8009cde <TIM_OC3_SetConfig+0xe6>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	4a25      	ldr	r2, [pc, #148]	; (8009d30 <TIM_OC3_SetConfig+0x138>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d01f      	beq.n	8009cde <TIM_OC3_SetConfig+0xe6>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	4a24      	ldr	r2, [pc, #144]	; (8009d34 <TIM_OC3_SetConfig+0x13c>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d01b      	beq.n	8009cde <TIM_OC3_SetConfig+0xe6>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	4a23      	ldr	r2, [pc, #140]	; (8009d38 <TIM_OC3_SetConfig+0x140>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d017      	beq.n	8009cde <TIM_OC3_SetConfig+0xe6>
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	4a22      	ldr	r2, [pc, #136]	; (8009d3c <TIM_OC3_SetConfig+0x144>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d013      	beq.n	8009cde <TIM_OC3_SetConfig+0xe6>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	4a21      	ldr	r2, [pc, #132]	; (8009d40 <TIM_OC3_SetConfig+0x148>)
 8009cba:	4293      	cmp	r3, r2
 8009cbc:	d00f      	beq.n	8009cde <TIM_OC3_SetConfig+0xe6>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	4a20      	ldr	r2, [pc, #128]	; (8009d44 <TIM_OC3_SetConfig+0x14c>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d00b      	beq.n	8009cde <TIM_OC3_SetConfig+0xe6>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	4a1f      	ldr	r2, [pc, #124]	; (8009d48 <TIM_OC3_SetConfig+0x150>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d007      	beq.n	8009cde <TIM_OC3_SetConfig+0xe6>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4a1e      	ldr	r2, [pc, #120]	; (8009d4c <TIM_OC3_SetConfig+0x154>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d003      	beq.n	8009cde <TIM_OC3_SetConfig+0xe6>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4a1d      	ldr	r2, [pc, #116]	; (8009d50 <TIM_OC3_SetConfig+0x158>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d113      	bne.n	8009d06 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	695b      	ldr	r3, [r3, #20]
 8009cf2:	011b      	lsls	r3, r3, #4
 8009cf4:	693a      	ldr	r2, [r7, #16]
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	699b      	ldr	r3, [r3, #24]
 8009cfe:	011b      	lsls	r3, r3, #4
 8009d00:	693a      	ldr	r2, [r7, #16]
 8009d02:	4313      	orrs	r3, r2
 8009d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	693a      	ldr	r2, [r7, #16]
 8009d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	68fa      	ldr	r2, [r7, #12]
 8009d10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	685a      	ldr	r2, [r3, #4]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	697a      	ldr	r2, [r7, #20]
 8009d1e:	621a      	str	r2, [r3, #32]
}
 8009d20:	bf00      	nop
 8009d22:	371c      	adds	r7, #28
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr
 8009d2c:	40012c00 	.word	0x40012c00
 8009d30:	50012c00 	.word	0x50012c00
 8009d34:	40013400 	.word	0x40013400
 8009d38:	50013400 	.word	0x50013400
 8009d3c:	40014000 	.word	0x40014000
 8009d40:	50014000 	.word	0x50014000
 8009d44:	40014400 	.word	0x40014400
 8009d48:	50014400 	.word	0x50014400
 8009d4c:	40014800 	.word	0x40014800
 8009d50:	50014800 	.word	0x50014800

08009d54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b087      	sub	sp, #28
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6a1b      	ldr	r3, [r3, #32]
 8009d62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	6a1b      	ldr	r3, [r3, #32]
 8009d6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	685b      	ldr	r3, [r3, #4]
 8009d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	69db      	ldr	r3, [r3, #28]
 8009d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d90:	683b      	ldr	r3, [r7, #0]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	021b      	lsls	r3, r3, #8
 8009d96:	68fa      	ldr	r2, [r7, #12]
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d9c:	697b      	ldr	r3, [r7, #20]
 8009d9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009da2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	689b      	ldr	r3, [r3, #8]
 8009da8:	031b      	lsls	r3, r3, #12
 8009daa:	697a      	ldr	r2, [r7, #20]
 8009dac:	4313      	orrs	r3, r2
 8009dae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	4a36      	ldr	r2, [pc, #216]	; (8009e8c <TIM_OC4_SetConfig+0x138>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d00b      	beq.n	8009dd0 <TIM_OC4_SetConfig+0x7c>
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	4a35      	ldr	r2, [pc, #212]	; (8009e90 <TIM_OC4_SetConfig+0x13c>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d007      	beq.n	8009dd0 <TIM_OC4_SetConfig+0x7c>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	4a34      	ldr	r2, [pc, #208]	; (8009e94 <TIM_OC4_SetConfig+0x140>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d003      	beq.n	8009dd0 <TIM_OC4_SetConfig+0x7c>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	4a33      	ldr	r2, [pc, #204]	; (8009e98 <TIM_OC4_SetConfig+0x144>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d10d      	bne.n	8009dec <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009dd0:	697b      	ldr	r3, [r7, #20]
 8009dd2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	68db      	ldr	r3, [r3, #12]
 8009ddc:	031b      	lsls	r3, r3, #12
 8009dde:	697a      	ldr	r2, [r7, #20]
 8009de0:	4313      	orrs	r3, r2
 8009de2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009dea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	4a27      	ldr	r2, [pc, #156]	; (8009e8c <TIM_OC4_SetConfig+0x138>)
 8009df0:	4293      	cmp	r3, r2
 8009df2:	d023      	beq.n	8009e3c <TIM_OC4_SetConfig+0xe8>
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	4a26      	ldr	r2, [pc, #152]	; (8009e90 <TIM_OC4_SetConfig+0x13c>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d01f      	beq.n	8009e3c <TIM_OC4_SetConfig+0xe8>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	4a25      	ldr	r2, [pc, #148]	; (8009e94 <TIM_OC4_SetConfig+0x140>)
 8009e00:	4293      	cmp	r3, r2
 8009e02:	d01b      	beq.n	8009e3c <TIM_OC4_SetConfig+0xe8>
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	4a24      	ldr	r2, [pc, #144]	; (8009e98 <TIM_OC4_SetConfig+0x144>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d017      	beq.n	8009e3c <TIM_OC4_SetConfig+0xe8>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	4a23      	ldr	r2, [pc, #140]	; (8009e9c <TIM_OC4_SetConfig+0x148>)
 8009e10:	4293      	cmp	r3, r2
 8009e12:	d013      	beq.n	8009e3c <TIM_OC4_SetConfig+0xe8>
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	4a22      	ldr	r2, [pc, #136]	; (8009ea0 <TIM_OC4_SetConfig+0x14c>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d00f      	beq.n	8009e3c <TIM_OC4_SetConfig+0xe8>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	4a21      	ldr	r2, [pc, #132]	; (8009ea4 <TIM_OC4_SetConfig+0x150>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d00b      	beq.n	8009e3c <TIM_OC4_SetConfig+0xe8>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	4a20      	ldr	r2, [pc, #128]	; (8009ea8 <TIM_OC4_SetConfig+0x154>)
 8009e28:	4293      	cmp	r3, r2
 8009e2a:	d007      	beq.n	8009e3c <TIM_OC4_SetConfig+0xe8>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	4a1f      	ldr	r2, [pc, #124]	; (8009eac <TIM_OC4_SetConfig+0x158>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d003      	beq.n	8009e3c <TIM_OC4_SetConfig+0xe8>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	4a1e      	ldr	r2, [pc, #120]	; (8009eb0 <TIM_OC4_SetConfig+0x15c>)
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	d113      	bne.n	8009e64 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e42:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009e4a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	695b      	ldr	r3, [r3, #20]
 8009e50:	019b      	lsls	r3, r3, #6
 8009e52:	693a      	ldr	r2, [r7, #16]
 8009e54:	4313      	orrs	r3, r2
 8009e56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	699b      	ldr	r3, [r3, #24]
 8009e5c:	019b      	lsls	r3, r3, #6
 8009e5e:	693a      	ldr	r2, [r7, #16]
 8009e60:	4313      	orrs	r3, r2
 8009e62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	693a      	ldr	r2, [r7, #16]
 8009e68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	68fa      	ldr	r2, [r7, #12]
 8009e6e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	685a      	ldr	r2, [r3, #4]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	697a      	ldr	r2, [r7, #20]
 8009e7c:	621a      	str	r2, [r3, #32]
}
 8009e7e:	bf00      	nop
 8009e80:	371c      	adds	r7, #28
 8009e82:	46bd      	mov	sp, r7
 8009e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e88:	4770      	bx	lr
 8009e8a:	bf00      	nop
 8009e8c:	40012c00 	.word	0x40012c00
 8009e90:	50012c00 	.word	0x50012c00
 8009e94:	40013400 	.word	0x40013400
 8009e98:	50013400 	.word	0x50013400
 8009e9c:	40014000 	.word	0x40014000
 8009ea0:	50014000 	.word	0x50014000
 8009ea4:	40014400 	.word	0x40014400
 8009ea8:	50014400 	.word	0x50014400
 8009eac:	40014800 	.word	0x40014800
 8009eb0:	50014800 	.word	0x50014800

08009eb4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009eb4:	b480      	push	{r7}
 8009eb6:	b087      	sub	sp, #28
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6a1b      	ldr	r3, [r3, #32]
 8009ec2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6a1b      	ldr	r3, [r3, #32]
 8009ece:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ee2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ee6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	68fa      	ldr	r2, [r7, #12]
 8009eee:	4313      	orrs	r3, r2
 8009ef0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009ef8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	041b      	lsls	r3, r3, #16
 8009f00:	693a      	ldr	r2, [r7, #16]
 8009f02:	4313      	orrs	r3, r2
 8009f04:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4a21      	ldr	r2, [pc, #132]	; (8009f90 <TIM_OC5_SetConfig+0xdc>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d023      	beq.n	8009f56 <TIM_OC5_SetConfig+0xa2>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	4a20      	ldr	r2, [pc, #128]	; (8009f94 <TIM_OC5_SetConfig+0xe0>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d01f      	beq.n	8009f56 <TIM_OC5_SetConfig+0xa2>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	4a1f      	ldr	r2, [pc, #124]	; (8009f98 <TIM_OC5_SetConfig+0xe4>)
 8009f1a:	4293      	cmp	r3, r2
 8009f1c:	d01b      	beq.n	8009f56 <TIM_OC5_SetConfig+0xa2>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4a1e      	ldr	r2, [pc, #120]	; (8009f9c <TIM_OC5_SetConfig+0xe8>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d017      	beq.n	8009f56 <TIM_OC5_SetConfig+0xa2>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	4a1d      	ldr	r2, [pc, #116]	; (8009fa0 <TIM_OC5_SetConfig+0xec>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d013      	beq.n	8009f56 <TIM_OC5_SetConfig+0xa2>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	4a1c      	ldr	r2, [pc, #112]	; (8009fa4 <TIM_OC5_SetConfig+0xf0>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d00f      	beq.n	8009f56 <TIM_OC5_SetConfig+0xa2>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	4a1b      	ldr	r2, [pc, #108]	; (8009fa8 <TIM_OC5_SetConfig+0xf4>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d00b      	beq.n	8009f56 <TIM_OC5_SetConfig+0xa2>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	4a1a      	ldr	r2, [pc, #104]	; (8009fac <TIM_OC5_SetConfig+0xf8>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d007      	beq.n	8009f56 <TIM_OC5_SetConfig+0xa2>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	4a19      	ldr	r2, [pc, #100]	; (8009fb0 <TIM_OC5_SetConfig+0xfc>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d003      	beq.n	8009f56 <TIM_OC5_SetConfig+0xa2>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	4a18      	ldr	r2, [pc, #96]	; (8009fb4 <TIM_OC5_SetConfig+0x100>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d109      	bne.n	8009f6a <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009f56:	697b      	ldr	r3, [r7, #20]
 8009f58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f5c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	695b      	ldr	r3, [r3, #20]
 8009f62:	021b      	lsls	r3, r3, #8
 8009f64:	697a      	ldr	r2, [r7, #20]
 8009f66:	4313      	orrs	r3, r2
 8009f68:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	697a      	ldr	r2, [r7, #20]
 8009f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	68fa      	ldr	r2, [r7, #12]
 8009f74:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	685a      	ldr	r2, [r3, #4]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	693a      	ldr	r2, [r7, #16]
 8009f82:	621a      	str	r2, [r3, #32]
}
 8009f84:	bf00      	nop
 8009f86:	371c      	adds	r7, #28
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr
 8009f90:	40012c00 	.word	0x40012c00
 8009f94:	50012c00 	.word	0x50012c00
 8009f98:	40013400 	.word	0x40013400
 8009f9c:	50013400 	.word	0x50013400
 8009fa0:	40014000 	.word	0x40014000
 8009fa4:	50014000 	.word	0x50014000
 8009fa8:	40014400 	.word	0x40014400
 8009fac:	50014400 	.word	0x50014400
 8009fb0:	40014800 	.word	0x40014800
 8009fb4:	50014800 	.word	0x50014800

08009fb8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009fb8:	b480      	push	{r7}
 8009fba:	b087      	sub	sp, #28
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	6078      	str	r0, [r7, #4]
 8009fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6a1b      	ldr	r3, [r3, #32]
 8009fc6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6a1b      	ldr	r3, [r3, #32]
 8009fd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	021b      	lsls	r3, r3, #8
 8009ff2:	68fa      	ldr	r2, [r7, #12]
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009ff8:	693b      	ldr	r3, [r7, #16]
 8009ffa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009ffe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	689b      	ldr	r3, [r3, #8]
 800a004:	051b      	lsls	r3, r3, #20
 800a006:	693a      	ldr	r2, [r7, #16]
 800a008:	4313      	orrs	r3, r2
 800a00a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	4a22      	ldr	r2, [pc, #136]	; (800a098 <TIM_OC6_SetConfig+0xe0>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d023      	beq.n	800a05c <TIM_OC6_SetConfig+0xa4>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	4a21      	ldr	r2, [pc, #132]	; (800a09c <TIM_OC6_SetConfig+0xe4>)
 800a018:	4293      	cmp	r3, r2
 800a01a:	d01f      	beq.n	800a05c <TIM_OC6_SetConfig+0xa4>
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	4a20      	ldr	r2, [pc, #128]	; (800a0a0 <TIM_OC6_SetConfig+0xe8>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d01b      	beq.n	800a05c <TIM_OC6_SetConfig+0xa4>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	4a1f      	ldr	r2, [pc, #124]	; (800a0a4 <TIM_OC6_SetConfig+0xec>)
 800a028:	4293      	cmp	r3, r2
 800a02a:	d017      	beq.n	800a05c <TIM_OC6_SetConfig+0xa4>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	4a1e      	ldr	r2, [pc, #120]	; (800a0a8 <TIM_OC6_SetConfig+0xf0>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d013      	beq.n	800a05c <TIM_OC6_SetConfig+0xa4>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	4a1d      	ldr	r2, [pc, #116]	; (800a0ac <TIM_OC6_SetConfig+0xf4>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d00f      	beq.n	800a05c <TIM_OC6_SetConfig+0xa4>
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	4a1c      	ldr	r2, [pc, #112]	; (800a0b0 <TIM_OC6_SetConfig+0xf8>)
 800a040:	4293      	cmp	r3, r2
 800a042:	d00b      	beq.n	800a05c <TIM_OC6_SetConfig+0xa4>
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	4a1b      	ldr	r2, [pc, #108]	; (800a0b4 <TIM_OC6_SetConfig+0xfc>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d007      	beq.n	800a05c <TIM_OC6_SetConfig+0xa4>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	4a1a      	ldr	r2, [pc, #104]	; (800a0b8 <TIM_OC6_SetConfig+0x100>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d003      	beq.n	800a05c <TIM_OC6_SetConfig+0xa4>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	4a19      	ldr	r2, [pc, #100]	; (800a0bc <TIM_OC6_SetConfig+0x104>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d109      	bne.n	800a070 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a062:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	695b      	ldr	r3, [r3, #20]
 800a068:	029b      	lsls	r3, r3, #10
 800a06a:	697a      	ldr	r2, [r7, #20]
 800a06c:	4313      	orrs	r3, r2
 800a06e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	697a      	ldr	r2, [r7, #20]
 800a074:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	68fa      	ldr	r2, [r7, #12]
 800a07a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	685a      	ldr	r2, [r3, #4]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	693a      	ldr	r2, [r7, #16]
 800a088:	621a      	str	r2, [r3, #32]
}
 800a08a:	bf00      	nop
 800a08c:	371c      	adds	r7, #28
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr
 800a096:	bf00      	nop
 800a098:	40012c00 	.word	0x40012c00
 800a09c:	50012c00 	.word	0x50012c00
 800a0a0:	40013400 	.word	0x40013400
 800a0a4:	50013400 	.word	0x50013400
 800a0a8:	40014000 	.word	0x40014000
 800a0ac:	50014000 	.word	0x50014000
 800a0b0:	40014400 	.word	0x40014400
 800a0b4:	50014400 	.word	0x50014400
 800a0b8:	40014800 	.word	0x40014800
 800a0bc:	50014800 	.word	0x50014800

0800a0c0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b087      	sub	sp, #28
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	60f8      	str	r0, [r7, #12]
 800a0c8:	60b9      	str	r1, [r7, #8]
 800a0ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	f003 031f 	and.w	r3, r3, #31
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a0d8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	6a1a      	ldr	r2, [r3, #32]
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	43db      	mvns	r3, r3
 800a0e2:	401a      	ands	r2, r3
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	6a1a      	ldr	r2, [r3, #32]
 800a0ec:	68bb      	ldr	r3, [r7, #8]
 800a0ee:	f003 031f 	and.w	r3, r3, #31
 800a0f2:	6879      	ldr	r1, [r7, #4]
 800a0f4:	fa01 f303 	lsl.w	r3, r1, r3
 800a0f8:	431a      	orrs	r2, r3
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	621a      	str	r2, [r3, #32]
}
 800a0fe:	bf00      	nop
 800a100:	371c      	adds	r7, #28
 800a102:	46bd      	mov	sp, r7
 800a104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a108:	4770      	bx	lr
	...

0800a10c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b085      	sub	sp, #20
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d101      	bne.n	800a124 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a120:	2302      	movs	r3, #2
 800a122:	e097      	b.n	800a254 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	2201      	movs	r2, #1
 800a128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2202      	movs	r2, #2
 800a130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	689b      	ldr	r3, [r3, #8]
 800a142:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a45      	ldr	r2, [pc, #276]	; (800a260 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d00e      	beq.n	800a16c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4a44      	ldr	r2, [pc, #272]	; (800a264 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d009      	beq.n	800a16c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a42      	ldr	r2, [pc, #264]	; (800a268 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d004      	beq.n	800a16c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4a41      	ldr	r2, [pc, #260]	; (800a26c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d108      	bne.n	800a17e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a172:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	68fa      	ldr	r2, [r7, #12]
 800a17a:	4313      	orrs	r3, r2
 800a17c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a188:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	68fa      	ldr	r2, [r7, #12]
 800a190:	4313      	orrs	r3, r2
 800a192:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	68fa      	ldr	r2, [r7, #12]
 800a19a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	4a2f      	ldr	r2, [pc, #188]	; (800a260 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800a1a2:	4293      	cmp	r3, r2
 800a1a4:	d040      	beq.n	800a228 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a2e      	ldr	r2, [pc, #184]	; (800a264 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d03b      	beq.n	800a228 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1b8:	d036      	beq.n	800a228 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a1c2:	d031      	beq.n	800a228 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a29      	ldr	r2, [pc, #164]	; (800a270 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d02c      	beq.n	800a228 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	4a28      	ldr	r2, [pc, #160]	; (800a274 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d027      	beq.n	800a228 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4a26      	ldr	r2, [pc, #152]	; (800a278 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d022      	beq.n	800a228 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	4a25      	ldr	r2, [pc, #148]	; (800a27c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a1e8:	4293      	cmp	r3, r2
 800a1ea:	d01d      	beq.n	800a228 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	4a23      	ldr	r2, [pc, #140]	; (800a280 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d018      	beq.n	800a228 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a22      	ldr	r2, [pc, #136]	; (800a284 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800a1fc:	4293      	cmp	r3, r2
 800a1fe:	d013      	beq.n	800a228 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a18      	ldr	r2, [pc, #96]	; (800a268 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d00e      	beq.n	800a228 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4a17      	ldr	r2, [pc, #92]	; (800a26c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d009      	beq.n	800a228 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a1b      	ldr	r2, [pc, #108]	; (800a288 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d004      	beq.n	800a228 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	4a1a      	ldr	r2, [pc, #104]	; (800a28c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d10c      	bne.n	800a242 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a22e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	689b      	ldr	r3, [r3, #8]
 800a234:	68ba      	ldr	r2, [r7, #8]
 800a236:	4313      	orrs	r3, r2
 800a238:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	68ba      	ldr	r2, [r7, #8]
 800a240:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2201      	movs	r2, #1
 800a246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2200      	movs	r2, #0
 800a24e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a252:	2300      	movs	r3, #0
}
 800a254:	4618      	mov	r0, r3
 800a256:	3714      	adds	r7, #20
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr
 800a260:	40012c00 	.word	0x40012c00
 800a264:	50012c00 	.word	0x50012c00
 800a268:	40013400 	.word	0x40013400
 800a26c:	50013400 	.word	0x50013400
 800a270:	40000400 	.word	0x40000400
 800a274:	50000400 	.word	0x50000400
 800a278:	40000800 	.word	0x40000800
 800a27c:	50000800 	.word	0x50000800
 800a280:	40000c00 	.word	0x40000c00
 800a284:	50000c00 	.word	0x50000c00
 800a288:	40014000 	.word	0x40014000
 800a28c:	50014000 	.word	0x50014000

0800a290 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a290:	b480      	push	{r7}
 800a292:	b083      	sub	sp, #12
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a298:	bf00      	nop
 800a29a:	370c      	adds	r7, #12
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr

0800a2a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a2ac:	bf00      	nop
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b083      	sub	sp, #12
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a2c0:	bf00      	nop
 800a2c2:	370c      	adds	r7, #12
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a2d4:	bf00      	nop
 800a2d6:	370c      	adds	r7, #12
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a2e8:	bf00      	nop
 800a2ea:	370c      	adds	r7, #12
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b083      	sub	sp, #12
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a2fc:	bf00      	nop
 800a2fe:	370c      	adds	r7, #12
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr

0800a308 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a308:	b480      	push	{r7}
 800a30a:	b083      	sub	sp, #12
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a310:	bf00      	nop
 800a312:	370c      	adds	r7, #12
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr

0800a31c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b082      	sub	sp, #8
 800a320:	af00      	add	r7, sp, #0
 800a322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2b00      	cmp	r3, #0
 800a328:	d101      	bne.n	800a32e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	e042      	b.n	800a3b4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a334:	2b00      	cmp	r3, #0
 800a336:	d106      	bne.n	800a346 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	2200      	movs	r2, #0
 800a33c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f7f8 fa1d 	bl	8002780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2224      	movs	r2, #36	; 0x24
 800a34a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f022 0201 	bic.w	r2, r2, #1
 800a35c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f000 f82c 	bl	800a3bc <UART_SetConfig>
 800a364:	4603      	mov	r3, r0
 800a366:	2b01      	cmp	r3, #1
 800a368:	d101      	bne.n	800a36e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a36a:	2301      	movs	r3, #1
 800a36c:	e022      	b.n	800a3b4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a372:	2b00      	cmp	r3, #0
 800a374:	d002      	beq.n	800a37c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	f000 f9c2 	bl	800a700 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	685a      	ldr	r2, [r3, #4]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a38a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	689a      	ldr	r2, [r3, #8]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a39a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	681a      	ldr	r2, [r3, #0]
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f042 0201 	orr.w	r2, r2, #1
 800a3aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 fa49 	bl	800a844 <UART_CheckIdleState>
 800a3b2:	4603      	mov	r3, r0
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3708      	adds	r7, #8
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a3bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a3c0:	b094      	sub	sp, #80	; 0x50
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ce:	681a      	ldr	r2, [r3, #0]
 800a3d0:	4b7e      	ldr	r3, [pc, #504]	; (800a5cc <UART_SetConfig+0x210>)
 800a3d2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a3d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d6:	689a      	ldr	r2, [r3, #8]
 800a3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3da:	691b      	ldr	r3, [r3, #16]
 800a3dc:	431a      	orrs	r2, r3
 800a3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e0:	695b      	ldr	r3, [r3, #20]
 800a3e2:	431a      	orrs	r2, r3
 800a3e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3e6:	69db      	ldr	r3, [r3, #28]
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4977      	ldr	r1, [pc, #476]	; (800a5d0 <UART_SetConfig+0x214>)
 800a3f4:	4019      	ands	r1, r3
 800a3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3f8:	681a      	ldr	r2, [r3, #0]
 800a3fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3fc:	430b      	orrs	r3, r1
 800a3fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a40a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a40c:	68d9      	ldr	r1, [r3, #12]
 800a40e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a410:	681a      	ldr	r2, [r3, #0]
 800a412:	ea40 0301 	orr.w	r3, r0, r1
 800a416:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a41a:	699b      	ldr	r3, [r3, #24]
 800a41c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	4b6a      	ldr	r3, [pc, #424]	; (800a5cc <UART_SetConfig+0x210>)
 800a424:	429a      	cmp	r2, r3
 800a426:	d009      	beq.n	800a43c <UART_SetConfig+0x80>
 800a428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a42a:	681a      	ldr	r2, [r3, #0]
 800a42c:	4b69      	ldr	r3, [pc, #420]	; (800a5d4 <UART_SetConfig+0x218>)
 800a42e:	429a      	cmp	r2, r3
 800a430:	d004      	beq.n	800a43c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a434:	6a1a      	ldr	r2, [r3, #32]
 800a436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a438:	4313      	orrs	r3, r2
 800a43a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	689b      	ldr	r3, [r3, #8]
 800a442:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800a446:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800a44a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a450:	430b      	orrs	r3, r1
 800a452:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a45a:	f023 000f 	bic.w	r0, r3, #15
 800a45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a460:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	ea40 0301 	orr.w	r3, r0, r1
 800a46a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	4b59      	ldr	r3, [pc, #356]	; (800a5d8 <UART_SetConfig+0x21c>)
 800a472:	429a      	cmp	r2, r3
 800a474:	d102      	bne.n	800a47c <UART_SetConfig+0xc0>
 800a476:	2301      	movs	r3, #1
 800a478:	64bb      	str	r3, [r7, #72]	; 0x48
 800a47a:	e029      	b.n	800a4d0 <UART_SetConfig+0x114>
 800a47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a47e:	681a      	ldr	r2, [r3, #0]
 800a480:	4b56      	ldr	r3, [pc, #344]	; (800a5dc <UART_SetConfig+0x220>)
 800a482:	429a      	cmp	r2, r3
 800a484:	d102      	bne.n	800a48c <UART_SetConfig+0xd0>
 800a486:	2302      	movs	r3, #2
 800a488:	64bb      	str	r3, [r7, #72]	; 0x48
 800a48a:	e021      	b.n	800a4d0 <UART_SetConfig+0x114>
 800a48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a48e:	681a      	ldr	r2, [r3, #0]
 800a490:	4b53      	ldr	r3, [pc, #332]	; (800a5e0 <UART_SetConfig+0x224>)
 800a492:	429a      	cmp	r2, r3
 800a494:	d102      	bne.n	800a49c <UART_SetConfig+0xe0>
 800a496:	2304      	movs	r3, #4
 800a498:	64bb      	str	r3, [r7, #72]	; 0x48
 800a49a:	e019      	b.n	800a4d0 <UART_SetConfig+0x114>
 800a49c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a49e:	681a      	ldr	r2, [r3, #0]
 800a4a0:	4b50      	ldr	r3, [pc, #320]	; (800a5e4 <UART_SetConfig+0x228>)
 800a4a2:	429a      	cmp	r2, r3
 800a4a4:	d102      	bne.n	800a4ac <UART_SetConfig+0xf0>
 800a4a6:	2308      	movs	r3, #8
 800a4a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a4aa:	e011      	b.n	800a4d0 <UART_SetConfig+0x114>
 800a4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ae:	681a      	ldr	r2, [r3, #0]
 800a4b0:	4b4d      	ldr	r3, [pc, #308]	; (800a5e8 <UART_SetConfig+0x22c>)
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d102      	bne.n	800a4bc <UART_SetConfig+0x100>
 800a4b6:	2310      	movs	r3, #16
 800a4b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a4ba:	e009      	b.n	800a4d0 <UART_SetConfig+0x114>
 800a4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	4b42      	ldr	r3, [pc, #264]	; (800a5cc <UART_SetConfig+0x210>)
 800a4c2:	429a      	cmp	r2, r3
 800a4c4:	d102      	bne.n	800a4cc <UART_SetConfig+0x110>
 800a4c6:	2320      	movs	r3, #32
 800a4c8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a4ca:	e001      	b.n	800a4d0 <UART_SetConfig+0x114>
 800a4cc:	2300      	movs	r3, #0
 800a4ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d2:	681a      	ldr	r2, [r3, #0]
 800a4d4:	4b3d      	ldr	r3, [pc, #244]	; (800a5cc <UART_SetConfig+0x210>)
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d005      	beq.n	800a4e6 <UART_SetConfig+0x12a>
 800a4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4dc:	681a      	ldr	r2, [r3, #0]
 800a4de:	4b3d      	ldr	r3, [pc, #244]	; (800a5d4 <UART_SetConfig+0x218>)
 800a4e0:	429a      	cmp	r2, r3
 800a4e2:	f040 8085 	bne.w	800a5f0 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a4e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a4e8:	2200      	movs	r2, #0
 800a4ea:	623b      	str	r3, [r7, #32]
 800a4ec:	627a      	str	r2, [r7, #36]	; 0x24
 800a4ee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a4f2:	f7fd f861 	bl	80075b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800a4f6:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800a4f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	f000 80e8 	beq.w	800a6d0 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a504:	4a39      	ldr	r2, [pc, #228]	; (800a5ec <UART_SetConfig+0x230>)
 800a506:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a50a:	461a      	mov	r2, r3
 800a50c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a50e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a512:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a516:	685a      	ldr	r2, [r3, #4]
 800a518:	4613      	mov	r3, r2
 800a51a:	005b      	lsls	r3, r3, #1
 800a51c:	4413      	add	r3, r2
 800a51e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a520:	429a      	cmp	r2, r3
 800a522:	d305      	bcc.n	800a530 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a526:	685b      	ldr	r3, [r3, #4]
 800a528:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a52a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a52c:	429a      	cmp	r2, r3
 800a52e:	d903      	bls.n	800a538 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800a530:	2301      	movs	r3, #1
 800a532:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a536:	e048      	b.n	800a5ca <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a53a:	2200      	movs	r2, #0
 800a53c:	61bb      	str	r3, [r7, #24]
 800a53e:	61fa      	str	r2, [r7, #28]
 800a540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a544:	4a29      	ldr	r2, [pc, #164]	; (800a5ec <UART_SetConfig+0x230>)
 800a546:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a54a:	b29b      	uxth	r3, r3
 800a54c:	2200      	movs	r2, #0
 800a54e:	613b      	str	r3, [r7, #16]
 800a550:	617a      	str	r2, [r7, #20]
 800a552:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a556:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a55a:	f7f6 fb51 	bl	8000c00 <__aeabi_uldivmod>
 800a55e:	4602      	mov	r2, r0
 800a560:	460b      	mov	r3, r1
 800a562:	4610      	mov	r0, r2
 800a564:	4619      	mov	r1, r3
 800a566:	f04f 0200 	mov.w	r2, #0
 800a56a:	f04f 0300 	mov.w	r3, #0
 800a56e:	020b      	lsls	r3, r1, #8
 800a570:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a574:	0202      	lsls	r2, r0, #8
 800a576:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a578:	6849      	ldr	r1, [r1, #4]
 800a57a:	0849      	lsrs	r1, r1, #1
 800a57c:	2000      	movs	r0, #0
 800a57e:	460c      	mov	r4, r1
 800a580:	4605      	mov	r5, r0
 800a582:	eb12 0804 	adds.w	r8, r2, r4
 800a586:	eb43 0905 	adc.w	r9, r3, r5
 800a58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	2200      	movs	r2, #0
 800a590:	60bb      	str	r3, [r7, #8]
 800a592:	60fa      	str	r2, [r7, #12]
 800a594:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a598:	4640      	mov	r0, r8
 800a59a:	4649      	mov	r1, r9
 800a59c:	f7f6 fb30 	bl	8000c00 <__aeabi_uldivmod>
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	460b      	mov	r3, r1
 800a5a4:	4613      	mov	r3, r2
 800a5a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a5a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a5ae:	d308      	bcc.n	800a5c2 <UART_SetConfig+0x206>
 800a5b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a5b6:	d204      	bcs.n	800a5c2 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800a5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a5be:	60da      	str	r2, [r3, #12]
 800a5c0:	e003      	b.n	800a5ca <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800a5c8:	e082      	b.n	800a6d0 <UART_SetConfig+0x314>
 800a5ca:	e081      	b.n	800a6d0 <UART_SetConfig+0x314>
 800a5cc:	46002400 	.word	0x46002400
 800a5d0:	cfff69f3 	.word	0xcfff69f3
 800a5d4:	56002400 	.word	0x56002400
 800a5d8:	40013800 	.word	0x40013800
 800a5dc:	40004400 	.word	0x40004400
 800a5e0:	40004800 	.word	0x40004800
 800a5e4:	40004c00 	.word	0x40004c00
 800a5e8:	40005000 	.word	0x40005000
 800a5ec:	0800c7b0 	.word	0x0800c7b0
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a5f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f2:	69db      	ldr	r3, [r3, #28]
 800a5f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5f8:	d13c      	bne.n	800a674 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a5fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5fc:	2200      	movs	r2, #0
 800a5fe:	603b      	str	r3, [r7, #0]
 800a600:	607a      	str	r2, [r7, #4]
 800a602:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a606:	f7fc ffd7 	bl	80075b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800a60a:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a60c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d05e      	beq.n	800a6d0 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a616:	4a39      	ldr	r2, [pc, #228]	; (800a6fc <UART_SetConfig+0x340>)
 800a618:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a61c:	461a      	mov	r2, r3
 800a61e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a620:	fbb3 f3f2 	udiv	r3, r3, r2
 800a624:	005a      	lsls	r2, r3, #1
 800a626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	085b      	lsrs	r3, r3, #1
 800a62c:	441a      	add	r2, r3
 800a62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	fbb2 f3f3 	udiv	r3, r2, r3
 800a636:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a63a:	2b0f      	cmp	r3, #15
 800a63c:	d916      	bls.n	800a66c <UART_SetConfig+0x2b0>
 800a63e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a644:	d212      	bcs.n	800a66c <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a646:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a648:	b29b      	uxth	r3, r3
 800a64a:	f023 030f 	bic.w	r3, r3, #15
 800a64e:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a650:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a652:	085b      	lsrs	r3, r3, #1
 800a654:	b29b      	uxth	r3, r3
 800a656:	f003 0307 	and.w	r3, r3, #7
 800a65a:	b29a      	uxth	r2, r3
 800a65c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a65e:	4313      	orrs	r3, r2
 800a660:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800a662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a668:	60da      	str	r2, [r3, #12]
 800a66a:	e031      	b.n	800a6d0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800a66c:	2301      	movs	r3, #1
 800a66e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a672:	e02d      	b.n	800a6d0 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a674:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a676:	2200      	movs	r2, #0
 800a678:	469a      	mov	sl, r3
 800a67a:	4693      	mov	fp, r2
 800a67c:	4650      	mov	r0, sl
 800a67e:	4659      	mov	r1, fp
 800a680:	f7fc ff9a 	bl	80075b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800a684:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800a686:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d021      	beq.n	800a6d0 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a690:	4a1a      	ldr	r2, [pc, #104]	; (800a6fc <UART_SetConfig+0x340>)
 800a692:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a696:	461a      	mov	r2, r3
 800a698:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a69a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a0:	685b      	ldr	r3, [r3, #4]
 800a6a2:	085b      	lsrs	r3, r3, #1
 800a6a4:	441a      	add	r2, r3
 800a6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6b2:	2b0f      	cmp	r3, #15
 800a6b4:	d909      	bls.n	800a6ca <UART_SetConfig+0x30e>
 800a6b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6bc:	d205      	bcs.n	800a6ca <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a6be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6c0:	b29a      	uxth	r2, r3
 800a6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	60da      	str	r2, [r3, #12]
 800a6c8:	e002      	b.n	800a6d0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6da:	2201      	movs	r2, #1
 800a6dc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a6ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3750      	adds	r7, #80	; 0x50
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a6fa:	bf00      	nop
 800a6fc:	0800c7b0 	.word	0x0800c7b0

0800a700 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a70c:	f003 0301 	and.w	r3, r3, #1
 800a710:	2b00      	cmp	r3, #0
 800a712:	d00a      	beq.n	800a72a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	685b      	ldr	r3, [r3, #4]
 800a71a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	430a      	orrs	r2, r1
 800a728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a72e:	f003 0302 	and.w	r3, r3, #2
 800a732:	2b00      	cmp	r3, #0
 800a734:	d00a      	beq.n	800a74c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	685b      	ldr	r3, [r3, #4]
 800a73c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	430a      	orrs	r2, r1
 800a74a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a750:	f003 0304 	and.w	r3, r3, #4
 800a754:	2b00      	cmp	r3, #0
 800a756:	d00a      	beq.n	800a76e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	685b      	ldr	r3, [r3, #4]
 800a75e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	430a      	orrs	r2, r1
 800a76c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a772:	f003 0308 	and.w	r3, r3, #8
 800a776:	2b00      	cmp	r3, #0
 800a778:	d00a      	beq.n	800a790 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	685b      	ldr	r3, [r3, #4]
 800a780:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	430a      	orrs	r2, r1
 800a78e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a794:	f003 0310 	and.w	r3, r3, #16
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d00a      	beq.n	800a7b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	689b      	ldr	r3, [r3, #8]
 800a7a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	430a      	orrs	r2, r1
 800a7b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7b6:	f003 0320 	and.w	r3, r3, #32
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	d00a      	beq.n	800a7d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	689b      	ldr	r3, [r3, #8]
 800a7c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	430a      	orrs	r2, r1
 800a7d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d01a      	beq.n	800a816 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	430a      	orrs	r2, r1
 800a7f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a7fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7fe:	d10a      	bne.n	800a816 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	430a      	orrs	r2, r1
 800a814:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a81a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d00a      	beq.n	800a838 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	685b      	ldr	r3, [r3, #4]
 800a828:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	430a      	orrs	r2, r1
 800a836:	605a      	str	r2, [r3, #4]
  }
}
 800a838:	bf00      	nop
 800a83a:	370c      	adds	r7, #12
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr

0800a844 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b086      	sub	sp, #24
 800a848:	af02      	add	r7, sp, #8
 800a84a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2200      	movs	r2, #0
 800a850:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a854:	f7f8 f9e6 	bl	8002c24 <HAL_GetTick>
 800a858:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f003 0308 	and.w	r3, r3, #8
 800a864:	2b08      	cmp	r3, #8
 800a866:	d10e      	bne.n	800a886 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a868:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a86c:	9300      	str	r3, [sp, #0]
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2200      	movs	r2, #0
 800a872:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f000 f82f 	bl	800a8da <UART_WaitOnFlagUntilTimeout>
 800a87c:	4603      	mov	r3, r0
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d001      	beq.n	800a886 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a882:	2303      	movs	r3, #3
 800a884:	e025      	b.n	800a8d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	f003 0304 	and.w	r3, r3, #4
 800a890:	2b04      	cmp	r3, #4
 800a892:	d10e      	bne.n	800a8b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a894:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a898:	9300      	str	r3, [sp, #0]
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	2200      	movs	r2, #0
 800a89e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 f819 	bl	800a8da <UART_WaitOnFlagUntilTimeout>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d001      	beq.n	800a8b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a8ae:	2303      	movs	r3, #3
 800a8b0:	e00f      	b.n	800a8d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2220      	movs	r2, #32
 800a8b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2220      	movs	r2, #32
 800a8be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a8d0:	2300      	movs	r3, #0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3710      	adds	r7, #16
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}

0800a8da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a8da:	b580      	push	{r7, lr}
 800a8dc:	b09c      	sub	sp, #112	; 0x70
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	60f8      	str	r0, [r7, #12]
 800a8e2:	60b9      	str	r1, [r7, #8]
 800a8e4:	603b      	str	r3, [r7, #0]
 800a8e6:	4613      	mov	r3, r2
 800a8e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a8ea:	e0a9      	b.n	800aa40 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a8ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a8ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8f2:	f000 80a5 	beq.w	800aa40 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a8f6:	f7f8 f995 	bl	8002c24 <HAL_GetTick>
 800a8fa:	4602      	mov	r2, r0
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	1ad3      	subs	r3, r2, r3
 800a900:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a902:	429a      	cmp	r2, r3
 800a904:	d302      	bcc.n	800a90c <UART_WaitOnFlagUntilTimeout+0x32>
 800a906:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d140      	bne.n	800a98e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a914:	e853 3f00 	ldrex	r3, [r3]
 800a918:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a91a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a91c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a920:	667b      	str	r3, [r7, #100]	; 0x64
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	461a      	mov	r2, r3
 800a928:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a92a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a92c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a92e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a930:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a932:	e841 2300 	strex	r3, r2, [r1]
 800a936:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a938:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d1e6      	bne.n	800a90c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	3308      	adds	r3, #8
 800a944:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a948:	e853 3f00 	ldrex	r3, [r3]
 800a94c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a94e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a950:	f023 0301 	bic.w	r3, r3, #1
 800a954:	663b      	str	r3, [r7, #96]	; 0x60
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	3308      	adds	r3, #8
 800a95c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a95e:	64ba      	str	r2, [r7, #72]	; 0x48
 800a960:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a962:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a964:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a966:	e841 2300 	strex	r3, r2, [r1]
 800a96a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a96c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d1e5      	bne.n	800a93e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	2220      	movs	r2, #32
 800a976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2220      	movs	r2, #32
 800a97e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2200      	movs	r2, #0
 800a986:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800a98a:	2303      	movs	r3, #3
 800a98c:	e069      	b.n	800aa62 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f003 0304 	and.w	r3, r3, #4
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d051      	beq.n	800aa40 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	69db      	ldr	r3, [r3, #28]
 800a9a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a9a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a9aa:	d149      	bne.n	800aa40 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a9b4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9be:	e853 3f00 	ldrex	r3, [r3]
 800a9c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a9ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a9d4:	637b      	str	r3, [r7, #52]	; 0x34
 800a9d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a9da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a9dc:	e841 2300 	strex	r3, r2, [r1]
 800a9e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d1e6      	bne.n	800a9b6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	3308      	adds	r3, #8
 800a9ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	e853 3f00 	ldrex	r3, [r3]
 800a9f6:	613b      	str	r3, [r7, #16]
   return(result);
 800a9f8:	693b      	ldr	r3, [r7, #16]
 800a9fa:	f023 0301 	bic.w	r3, r3, #1
 800a9fe:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	3308      	adds	r3, #8
 800aa06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aa08:	623a      	str	r2, [r7, #32]
 800aa0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa0c:	69f9      	ldr	r1, [r7, #28]
 800aa0e:	6a3a      	ldr	r2, [r7, #32]
 800aa10:	e841 2300 	strex	r3, r2, [r1]
 800aa14:	61bb      	str	r3, [r7, #24]
   return(result);
 800aa16:	69bb      	ldr	r3, [r7, #24]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d1e5      	bne.n	800a9e8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	2220      	movs	r2, #32
 800aa20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2220      	movs	r2, #32
 800aa28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	2220      	movs	r2, #32
 800aa30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	2200      	movs	r2, #0
 800aa38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800aa3c:	2303      	movs	r3, #3
 800aa3e:	e010      	b.n	800aa62 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	69da      	ldr	r2, [r3, #28]
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	4013      	ands	r3, r2
 800aa4a:	68ba      	ldr	r2, [r7, #8]
 800aa4c:	429a      	cmp	r2, r3
 800aa4e:	bf0c      	ite	eq
 800aa50:	2301      	moveq	r3, #1
 800aa52:	2300      	movne	r3, #0
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	461a      	mov	r2, r3
 800aa58:	79fb      	ldrb	r3, [r7, #7]
 800aa5a:	429a      	cmp	r2, r3
 800aa5c:	f43f af46 	beq.w	800a8ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aa60:	2300      	movs	r3, #0
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3770      	adds	r7, #112	; 0x70
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}

0800aa6a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aa6a:	b480      	push	{r7}
 800aa6c:	b085      	sub	sp, #20
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aa78:	2b01      	cmp	r3, #1
 800aa7a:	d101      	bne.n	800aa80 <HAL_UARTEx_DisableFifoMode+0x16>
 800aa7c:	2302      	movs	r3, #2
 800aa7e:	e027      	b.n	800aad0 <HAL_UARTEx_DisableFifoMode+0x66>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	2201      	movs	r2, #1
 800aa84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2224      	movs	r2, #36	; 0x24
 800aa8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	f022 0201 	bic.w	r2, r2, #1
 800aaa6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800aaae:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	2200      	movs	r2, #0
 800aab4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2220      	movs	r2, #32
 800aac2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	2200      	movs	r2, #0
 800aaca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800aace:	2300      	movs	r3, #0
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	3714      	adds	r7, #20
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aaec:	2b01      	cmp	r3, #1
 800aaee:	d101      	bne.n	800aaf4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800aaf0:	2302      	movs	r3, #2
 800aaf2:	e02d      	b.n	800ab50 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2224      	movs	r2, #36	; 0x24
 800ab00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f022 0201 	bic.w	r2, r2, #1
 800ab1a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	683a      	ldr	r2, [r7, #0]
 800ab2c:	430a      	orrs	r2, r1
 800ab2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f000 f84f 	bl	800abd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	68fa      	ldr	r2, [r7, #12]
 800ab3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2220      	movs	r2, #32
 800ab42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2200      	movs	r2, #0
 800ab4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ab4e:	2300      	movs	r3, #0
}
 800ab50:	4618      	mov	r0, r3
 800ab52:	3710      	adds	r7, #16
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ab68:	2b01      	cmp	r3, #1
 800ab6a:	d101      	bne.n	800ab70 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ab6c:	2302      	movs	r3, #2
 800ab6e:	e02d      	b.n	800abcc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2201      	movs	r2, #1
 800ab74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2224      	movs	r2, #36	; 0x24
 800ab7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	681a      	ldr	r2, [r3, #0]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f022 0201 	bic.w	r2, r2, #1
 800ab96:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	689b      	ldr	r3, [r3, #8]
 800ab9e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	683a      	ldr	r2, [r7, #0]
 800aba8:	430a      	orrs	r2, r1
 800abaa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f000 f811 	bl	800abd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	68fa      	ldr	r2, [r7, #12]
 800abb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2220      	movs	r2, #32
 800abbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	2200      	movs	r2, #0
 800abc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800abca:	2300      	movs	r3, #0
}
 800abcc:	4618      	mov	r0, r3
 800abce:	3710      	adds	r7, #16
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}

0800abd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b085      	sub	sp, #20
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d108      	bne.n	800abf6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	2201      	movs	r2, #1
 800abe8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2201      	movs	r2, #1
 800abf0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800abf4:	e031      	b.n	800ac5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800abf6:	2308      	movs	r3, #8
 800abf8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800abfa:	2308      	movs	r3, #8
 800abfc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	689b      	ldr	r3, [r3, #8]
 800ac04:	0e5b      	lsrs	r3, r3, #25
 800ac06:	b2db      	uxtb	r3, r3
 800ac08:	f003 0307 	and.w	r3, r3, #7
 800ac0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	689b      	ldr	r3, [r3, #8]
 800ac14:	0f5b      	lsrs	r3, r3, #29
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	f003 0307 	and.w	r3, r3, #7
 800ac1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac1e:	7bbb      	ldrb	r3, [r7, #14]
 800ac20:	7b3a      	ldrb	r2, [r7, #12]
 800ac22:	4911      	ldr	r1, [pc, #68]	; (800ac68 <UARTEx_SetNbDataToProcess+0x94>)
 800ac24:	5c8a      	ldrb	r2, [r1, r2]
 800ac26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ac2a:	7b3a      	ldrb	r2, [r7, #12]
 800ac2c:	490f      	ldr	r1, [pc, #60]	; (800ac6c <UARTEx_SetNbDataToProcess+0x98>)
 800ac2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ac30:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac34:	b29a      	uxth	r2, r3
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac3c:	7bfb      	ldrb	r3, [r7, #15]
 800ac3e:	7b7a      	ldrb	r2, [r7, #13]
 800ac40:	4909      	ldr	r1, [pc, #36]	; (800ac68 <UARTEx_SetNbDataToProcess+0x94>)
 800ac42:	5c8a      	ldrb	r2, [r1, r2]
 800ac44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ac48:	7b7a      	ldrb	r2, [r7, #13]
 800ac4a:	4908      	ldr	r1, [pc, #32]	; (800ac6c <UARTEx_SetNbDataToProcess+0x98>)
 800ac4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ac4e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ac52:	b29a      	uxth	r2, r3
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ac5a:	bf00      	nop
 800ac5c:	3714      	adds	r7, #20
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac64:	4770      	bx	lr
 800ac66:	bf00      	nop
 800ac68:	0800c7c8 	.word	0x0800c7c8
 800ac6c:	0800c7d0 	.word	0x0800c7d0

0800ac70 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800ac70:	b480      	push	{r7}
 800ac72:	b083      	sub	sp, #12
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]
 800ac78:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	f043 0202 	orr.w	r2, r3, #2
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800ac86:	683b      	ldr	r3, [r7, #0]
 800ac88:	685a      	ldr	r2, [r3, #4]
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	021b      	lsls	r3, r3, #8
 800ac90:	431a      	orrs	r2, r3
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f023 0202 	bic.w	r2, r3, #2
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	601a      	str	r2, [r3, #0]
}
 800aca2:	bf00      	nop
 800aca4:	370c      	adds	r7, #12
 800aca6:	46bd      	mov	sp, r7
 800aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acac:	4770      	bx	lr

0800acae <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800acae:	b480      	push	{r7}
 800acb0:	b08b      	sub	sp, #44	; 0x2c
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	60f8      	str	r0, [r7, #12]
 800acb6:	60b9      	str	r1, [r7, #8]
 800acb8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	681a      	ldr	r2, [r3, #0]
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800acc2:	697b      	ldr	r3, [r7, #20]
 800acc4:	fa93 f3a3 	rbit	r3, r3
 800acc8:	613b      	str	r3, [r7, #16]
  return result;
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800acce:	69bb      	ldr	r3, [r7, #24]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d101      	bne.n	800acd8 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800acd4:	2320      	movs	r3, #32
 800acd6:	e003      	b.n	800ace0 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800acd8:	69bb      	ldr	r3, [r7, #24]
 800acda:	fab3 f383 	clz	r3, r3
 800acde:	b2db      	uxtb	r3, r3
 800ace0:	005b      	lsls	r3, r3, #1
 800ace2:	2103      	movs	r1, #3
 800ace4:	fa01 f303 	lsl.w	r3, r1, r3
 800ace8:	43db      	mvns	r3, r3
 800acea:	401a      	ands	r2, r3
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800acf0:	6a3b      	ldr	r3, [r7, #32]
 800acf2:	fa93 f3a3 	rbit	r3, r3
 800acf6:	61fb      	str	r3, [r7, #28]
  return result;
 800acf8:	69fb      	ldr	r3, [r7, #28]
 800acfa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800acfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d101      	bne.n	800ad06 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800ad02:	2320      	movs	r3, #32
 800ad04:	e003      	b.n	800ad0e <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800ad06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad08:	fab3 f383 	clz	r3, r3
 800ad0c:	b2db      	uxtb	r3, r3
 800ad0e:	005b      	lsls	r3, r3, #1
 800ad10:	6879      	ldr	r1, [r7, #4]
 800ad12:	fa01 f303 	lsl.w	r3, r1, r3
 800ad16:	431a      	orrs	r2, r3
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	601a      	str	r2, [r3, #0]
}
 800ad1c:	bf00      	nop
 800ad1e:	372c      	adds	r7, #44	; 0x2c
 800ad20:	46bd      	mov	sp, r7
 800ad22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad26:	4770      	bx	lr

0800ad28 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b085      	sub	sp, #20
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	60b9      	str	r1, [r7, #8]
 800ad32:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	685a      	ldr	r2, [r3, #4]
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	43db      	mvns	r3, r3
 800ad3c:	401a      	ands	r2, r3
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	6879      	ldr	r1, [r7, #4]
 800ad42:	fb01 f303 	mul.w	r3, r1, r3
 800ad46:	431a      	orrs	r2, r3
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	605a      	str	r2, [r3, #4]
}
 800ad4c:	bf00      	nop
 800ad4e:	3714      	adds	r7, #20
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr

0800ad58 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b08b      	sub	sp, #44	; 0x2c
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	60f8      	str	r0, [r7, #12]
 800ad60:	60b9      	str	r1, [r7, #8]
 800ad62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	689a      	ldr	r2, [r3, #8]
 800ad68:	68bb      	ldr	r3, [r7, #8]
 800ad6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad6c:	697b      	ldr	r3, [r7, #20]
 800ad6e:	fa93 f3a3 	rbit	r3, r3
 800ad72:	613b      	str	r3, [r7, #16]
  return result;
 800ad74:	693b      	ldr	r3, [r7, #16]
 800ad76:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ad78:	69bb      	ldr	r3, [r7, #24]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d101      	bne.n	800ad82 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800ad7e:	2320      	movs	r3, #32
 800ad80:	e003      	b.n	800ad8a <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800ad82:	69bb      	ldr	r3, [r7, #24]
 800ad84:	fab3 f383 	clz	r3, r3
 800ad88:	b2db      	uxtb	r3, r3
 800ad8a:	005b      	lsls	r3, r3, #1
 800ad8c:	2103      	movs	r1, #3
 800ad8e:	fa01 f303 	lsl.w	r3, r1, r3
 800ad92:	43db      	mvns	r3, r3
 800ad94:	401a      	ands	r2, r3
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad9a:	6a3b      	ldr	r3, [r7, #32]
 800ad9c:	fa93 f3a3 	rbit	r3, r3
 800ada0:	61fb      	str	r3, [r7, #28]
  return result;
 800ada2:	69fb      	ldr	r3, [r7, #28]
 800ada4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800ada6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d101      	bne.n	800adb0 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800adac:	2320      	movs	r3, #32
 800adae:	e003      	b.n	800adb8 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800adb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb2:	fab3 f383 	clz	r3, r3
 800adb6:	b2db      	uxtb	r3, r3
 800adb8:	005b      	lsls	r3, r3, #1
 800adba:	6879      	ldr	r1, [r7, #4]
 800adbc:	fa01 f303 	lsl.w	r3, r1, r3
 800adc0:	431a      	orrs	r2, r3
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800adc6:	bf00      	nop
 800adc8:	372c      	adds	r7, #44	; 0x2c
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr

0800add2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800add2:	b480      	push	{r7}
 800add4:	b08b      	sub	sp, #44	; 0x2c
 800add6:	af00      	add	r7, sp, #0
 800add8:	60f8      	str	r0, [r7, #12]
 800adda:	60b9      	str	r1, [r7, #8]
 800addc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	68da      	ldr	r2, [r3, #12]
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	fa93 f3a3 	rbit	r3, r3
 800adec:	613b      	str	r3, [r7, #16]
  return result;
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d101      	bne.n	800adfc <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800adf8:	2320      	movs	r3, #32
 800adfa:	e003      	b.n	800ae04 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800adfc:	69bb      	ldr	r3, [r7, #24]
 800adfe:	fab3 f383 	clz	r3, r3
 800ae02:	b2db      	uxtb	r3, r3
 800ae04:	005b      	lsls	r3, r3, #1
 800ae06:	2103      	movs	r1, #3
 800ae08:	fa01 f303 	lsl.w	r3, r1, r3
 800ae0c:	43db      	mvns	r3, r3
 800ae0e:	401a      	ands	r2, r3
 800ae10:	68bb      	ldr	r3, [r7, #8]
 800ae12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae14:	6a3b      	ldr	r3, [r7, #32]
 800ae16:	fa93 f3a3 	rbit	r3, r3
 800ae1a:	61fb      	str	r3, [r7, #28]
  return result;
 800ae1c:	69fb      	ldr	r3, [r7, #28]
 800ae1e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800ae20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d101      	bne.n	800ae2a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800ae26:	2320      	movs	r3, #32
 800ae28:	e003      	b.n	800ae32 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800ae2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae2c:	fab3 f383 	clz	r3, r3
 800ae30:	b2db      	uxtb	r3, r3
 800ae32:	005b      	lsls	r3, r3, #1
 800ae34:	6879      	ldr	r1, [r7, #4]
 800ae36:	fa01 f303 	lsl.w	r3, r1, r3
 800ae3a:	431a      	orrs	r2, r3
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	60da      	str	r2, [r3, #12]
}
 800ae40:	bf00      	nop
 800ae42:	372c      	adds	r7, #44	; 0x2c
 800ae44:	46bd      	mov	sp, r7
 800ae46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4a:	4770      	bx	lr

0800ae4c <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	b08b      	sub	sp, #44	; 0x2c
 800ae50:	af00      	add	r7, sp, #0
 800ae52:	60f8      	str	r0, [r7, #12]
 800ae54:	60b9      	str	r1, [r7, #8]
 800ae56:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	6a1a      	ldr	r2, [r3, #32]
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae60:	697b      	ldr	r3, [r7, #20]
 800ae62:	fa93 f3a3 	rbit	r3, r3
 800ae66:	613b      	str	r3, [r7, #16]
  return result;
 800ae68:	693b      	ldr	r3, [r7, #16]
 800ae6a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ae6c:	69bb      	ldr	r3, [r7, #24]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d101      	bne.n	800ae76 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800ae72:	2320      	movs	r3, #32
 800ae74:	e003      	b.n	800ae7e <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800ae76:	69bb      	ldr	r3, [r7, #24]
 800ae78:	fab3 f383 	clz	r3, r3
 800ae7c:	b2db      	uxtb	r3, r3
 800ae7e:	009b      	lsls	r3, r3, #2
 800ae80:	210f      	movs	r1, #15
 800ae82:	fa01 f303 	lsl.w	r3, r1, r3
 800ae86:	43db      	mvns	r3, r3
 800ae88:	401a      	ands	r2, r3
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae8e:	6a3b      	ldr	r3, [r7, #32]
 800ae90:	fa93 f3a3 	rbit	r3, r3
 800ae94:	61fb      	str	r3, [r7, #28]
  return result;
 800ae96:	69fb      	ldr	r3, [r7, #28]
 800ae98:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800ae9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d101      	bne.n	800aea4 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800aea0:	2320      	movs	r3, #32
 800aea2:	e003      	b.n	800aeac <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800aea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aea6:	fab3 f383 	clz	r3, r3
 800aeaa:	b2db      	uxtb	r3, r3
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	6879      	ldr	r1, [r7, #4]
 800aeb0:	fa01 f303 	lsl.w	r3, r1, r3
 800aeb4:	431a      	orrs	r2, r3
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800aeba:	bf00      	nop
 800aebc:	372c      	adds	r7, #44	; 0x2c
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr

0800aec6 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800aec6:	b480      	push	{r7}
 800aec8:	b08b      	sub	sp, #44	; 0x2c
 800aeca:	af00      	add	r7, sp, #0
 800aecc:	60f8      	str	r0, [r7, #12]
 800aece:	60b9      	str	r1, [r7, #8]
 800aed0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	0a1b      	lsrs	r3, r3, #8
 800aeda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aedc:	697b      	ldr	r3, [r7, #20]
 800aede:	fa93 f3a3 	rbit	r3, r3
 800aee2:	613b      	str	r3, [r7, #16]
  return result;
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800aee8:	69bb      	ldr	r3, [r7, #24]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d101      	bne.n	800aef2 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800aeee:	2320      	movs	r3, #32
 800aef0:	e003      	b.n	800aefa <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800aef2:	69bb      	ldr	r3, [r7, #24]
 800aef4:	fab3 f383 	clz	r3, r3
 800aef8:	b2db      	uxtb	r3, r3
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	210f      	movs	r1, #15
 800aefe:	fa01 f303 	lsl.w	r3, r1, r3
 800af02:	43db      	mvns	r3, r3
 800af04:	401a      	ands	r2, r3
 800af06:	68bb      	ldr	r3, [r7, #8]
 800af08:	0a1b      	lsrs	r3, r3, #8
 800af0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af0c:	6a3b      	ldr	r3, [r7, #32]
 800af0e:	fa93 f3a3 	rbit	r3, r3
 800af12:	61fb      	str	r3, [r7, #28]
  return result;
 800af14:	69fb      	ldr	r3, [r7, #28]
 800af16:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800af18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d101      	bne.n	800af22 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800af1e:	2320      	movs	r3, #32
 800af20:	e003      	b.n	800af2a <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800af22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af24:	fab3 f383 	clz	r3, r3
 800af28:	b2db      	uxtb	r3, r3
 800af2a:	009b      	lsls	r3, r3, #2
 800af2c:	6879      	ldr	r1, [r7, #4]
 800af2e:	fa01 f303 	lsl.w	r3, r1, r3
 800af32:	431a      	orrs	r2, r3
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800af38:	bf00      	nop
 800af3a:	372c      	adds	r7, #44	; 0x2c
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr

0800af44 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b08a      	sub	sp, #40	; 0x28
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
 800af4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af54:	69bb      	ldr	r3, [r7, #24]
 800af56:	fa93 f3a3 	rbit	r3, r3
 800af5a:	617b      	str	r3, [r7, #20]
  return result;
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800af60:	69fb      	ldr	r3, [r7, #28]
 800af62:	2b00      	cmp	r3, #0
 800af64:	d101      	bne.n	800af6a <LL_GPIO_Init+0x26>
    return 32U;
 800af66:	2320      	movs	r3, #32
 800af68:	e003      	b.n	800af72 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800af6a:	69fb      	ldr	r3, [r7, #28]
 800af6c:	fab3 f383 	clz	r3, r3
 800af70:	b2db      	uxtb	r3, r3
 800af72:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800af74:	e050      	b.n	800b018 <LL_GPIO_Init+0xd4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	681a      	ldr	r2, [r3, #0]
 800af7a:	2101      	movs	r1, #1
 800af7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7e:	fa01 f303 	lsl.w	r3, r1, r3
 800af82:	4013      	ands	r3, r2
 800af84:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800af86:	6a3b      	ldr	r3, [r7, #32]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d042      	beq.n	800b012 <LL_GPIO_Init+0xce>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	461a      	mov	r2, r3
 800af92:	6a39      	ldr	r1, [r7, #32]
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f7ff fe8a 	bl	800acae <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	685b      	ldr	r3, [r3, #4]
 800af9e:	2b01      	cmp	r3, #1
 800afa0:	d003      	beq.n	800afaa <LL_GPIO_Init+0x66>
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	2b02      	cmp	r3, #2
 800afa8:	d106      	bne.n	800afb8 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	689b      	ldr	r3, [r3, #8]
 800afae:	461a      	mov	r2, r3
 800afb0:	6a39      	ldr	r1, [r7, #32]
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f7ff fed0 	bl	800ad58 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	691b      	ldr	r3, [r3, #16]
 800afbc:	461a      	mov	r2, r3
 800afbe:	6a39      	ldr	r1, [r7, #32]
 800afc0:	6878      	ldr	r0, [r7, #4]
 800afc2:	f7ff ff06 	bl	800add2 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	685b      	ldr	r3, [r3, #4]
 800afca:	2b02      	cmp	r3, #2
 800afcc:	d121      	bne.n	800b012 <LL_GPIO_Init+0xce>
 800afce:	6a3b      	ldr	r3, [r7, #32]
 800afd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	fa93 f3a3 	rbit	r3, r3
 800afd8:	60bb      	str	r3, [r7, #8]
  return result;
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d101      	bne.n	800afe8 <LL_GPIO_Init+0xa4>
    return 32U;
 800afe4:	2320      	movs	r3, #32
 800afe6:	e003      	b.n	800aff0 <LL_GPIO_Init+0xac>
  return __builtin_clz(value);
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	fab3 f383 	clz	r3, r3
 800afee:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800aff0:	2b07      	cmp	r3, #7
 800aff2:	d807      	bhi.n	800b004 <LL_GPIO_Init+0xc0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	695b      	ldr	r3, [r3, #20]
 800aff8:	461a      	mov	r2, r3
 800affa:	6a39      	ldr	r1, [r7, #32]
 800affc:	6878      	ldr	r0, [r7, #4]
 800affe:	f7ff ff25 	bl	800ae4c <LL_GPIO_SetAFPin_0_7>
 800b002:	e006      	b.n	800b012 <LL_GPIO_Init+0xce>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	695b      	ldr	r3, [r3, #20]
 800b008:	461a      	mov	r2, r3
 800b00a:	6a39      	ldr	r1, [r7, #32]
 800b00c:	6878      	ldr	r0, [r7, #4]
 800b00e:	f7ff ff5a 	bl	800aec6 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800b012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b014:	3301      	adds	r3, #1
 800b016:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	681a      	ldr	r2, [r3, #0]
 800b01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b01e:	fa22 f303 	lsr.w	r3, r2, r3
 800b022:	2b00      	cmp	r3, #0
 800b024:	d1a7      	bne.n	800af76 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	685b      	ldr	r3, [r3, #4]
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	d003      	beq.n	800b036 <LL_GPIO_Init+0xf2>
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	2b02      	cmp	r3, #2
 800b034:	d107      	bne.n	800b046 <LL_GPIO_Init+0x102>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	6819      	ldr	r1, [r3, #0]
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	68db      	ldr	r3, [r3, #12]
 800b03e:	461a      	mov	r2, r3
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f7ff fe71 	bl	800ad28 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800b046:	2300      	movs	r3, #0
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3728      	adds	r7, #40	; 0x28
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b050:	b084      	sub	sp, #16
 800b052:	b580      	push	{r7, lr}
 800b054:	b084      	sub	sp, #16
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
 800b05a:	f107 001c 	add.w	r0, r7, #28
 800b05e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	68db      	ldr	r3, [r3, #12]
 800b066:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800b06e:	6878      	ldr	r0, [r7, #4]
 800b070:	f000 fa72 	bl	800b558 <USB_CoreReset>
 800b074:	4603      	mov	r3, r0
 800b076:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800b078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d106      	bne.n	800b08c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b082:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	639a      	str	r2, [r3, #56]	; 0x38
 800b08a:	e005      	b.n	800b098 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b090:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

  return ret;
 800b098:	7bfb      	ldrb	r3, [r7, #15]
}
 800b09a:	4618      	mov	r0, r3
 800b09c:	3710      	adds	r7, #16
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b0a4:	b004      	add	sp, #16
 800b0a6:	4770      	bx	lr

0800b0a8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b083      	sub	sp, #12
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	689b      	ldr	r3, [r3, #8]
 800b0b4:	f023 0201 	bic.w	r2, r3, #1
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b0bc:	2300      	movs	r3, #0
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	370c      	adds	r7, #12
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr

0800b0ca <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b0ca:	b580      	push	{r7, lr}
 800b0cc:	b084      	sub	sp, #16
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	6078      	str	r0, [r7, #4]
 800b0d2:	460b      	mov	r3, r1
 800b0d4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	68db      	ldr	r3, [r3, #12]
 800b0de:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b0e6:	78fb      	ldrb	r3, [r7, #3]
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d115      	bne.n	800b118 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	68db      	ldr	r3, [r3, #12]
 800b0f0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b0f8:	2001      	movs	r0, #1
 800b0fa:	f7f7 fd9f 	bl	8002c3c <HAL_Delay>
      ms++;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	3301      	adds	r3, #1
 800b102:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f000 fa19 	bl	800b53c <USB_GetMode>
 800b10a:	4603      	mov	r3, r0
 800b10c:	2b01      	cmp	r3, #1
 800b10e:	d01e      	beq.n	800b14e <USB_SetCurrentMode+0x84>
 800b110:	68fb      	ldr	r3, [r7, #12]
 800b112:	2b31      	cmp	r3, #49	; 0x31
 800b114:	d9f0      	bls.n	800b0f8 <USB_SetCurrentMode+0x2e>
 800b116:	e01a      	b.n	800b14e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b118:	78fb      	ldrb	r3, [r7, #3]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d115      	bne.n	800b14a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	68db      	ldr	r3, [r3, #12]
 800b122:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b12a:	2001      	movs	r0, #1
 800b12c:	f7f7 fd86 	bl	8002c3c <HAL_Delay>
      ms++;
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	3301      	adds	r3, #1
 800b134:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 fa00 	bl	800b53c <USB_GetMode>
 800b13c:	4603      	mov	r3, r0
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d005      	beq.n	800b14e <USB_SetCurrentMode+0x84>
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	2b31      	cmp	r3, #49	; 0x31
 800b146:	d9f0      	bls.n	800b12a <USB_SetCurrentMode+0x60>
 800b148:	e001      	b.n	800b14e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b14a:	2301      	movs	r3, #1
 800b14c:	e005      	b.n	800b15a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	2b32      	cmp	r3, #50	; 0x32
 800b152:	d101      	bne.n	800b158 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b154:	2301      	movs	r3, #1
 800b156:	e000      	b.n	800b15a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b158:	2300      	movs	r3, #0
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}
	...

0800b164 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b164:	b084      	sub	sp, #16
 800b166:	b580      	push	{r7, lr}
 800b168:	b086      	sub	sp, #24
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
 800b16e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b172:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b176:	2300      	movs	r3, #0
 800b178:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b17e:	2300      	movs	r3, #0
 800b180:	613b      	str	r3, [r7, #16]
 800b182:	e009      	b.n	800b198 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b184:	687a      	ldr	r2, [r7, #4]
 800b186:	693b      	ldr	r3, [r7, #16]
 800b188:	3340      	adds	r3, #64	; 0x40
 800b18a:	009b      	lsls	r3, r3, #2
 800b18c:	4413      	add	r3, r2
 800b18e:	2200      	movs	r2, #0
 800b190:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b192:	693b      	ldr	r3, [r7, #16]
 800b194:	3301      	adds	r3, #1
 800b196:	613b      	str	r3, [r7, #16]
 800b198:	693b      	ldr	r3, [r7, #16]
 800b19a:	2b0e      	cmp	r3, #14
 800b19c:	d9f2      	bls.n	800b184 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b19e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d11c      	bne.n	800b1de <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1aa:	685b      	ldr	r3, [r3, #4]
 800b1ac:	68fa      	ldr	r2, [r7, #12]
 800b1ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b1b2:	f043 0302 	orr.w	r3, r3, #2
 800b1b6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1bc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	639a      	str	r2, [r3, #56]	; 0x38
    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	601a      	str	r2, [r3, #0]
 800b1dc:	e005      	b.n	800b1ea <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b1f0:	461a      	mov	r2, r3
 800b1f2:	2300      	movs	r3, #0
 800b1f4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1fc:	4619      	mov	r1, r3
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b204:	461a      	mov	r2, r3
 800b206:	680b      	ldr	r3, [r1, #0]
 800b208:	6013      	str	r3, [r2, #0]
  }
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b20a:	2103      	movs	r1, #3
 800b20c:	6878      	ldr	r0, [r7, #4]
 800b20e:	f000 f95b 	bl	800b4c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b212:	2110      	movs	r1, #16
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f000 f8f3 	bl	800b400 <USB_FlushTxFifo>
 800b21a:	4603      	mov	r3, r0
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d001      	beq.n	800b224 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800b220:	2301      	movs	r3, #1
 800b222:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	f000 f91f 	bl	800b468 <USB_FlushRxFifo>
 800b22a:	4603      	mov	r3, r0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d001      	beq.n	800b234 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800b230:	2301      	movs	r3, #1
 800b232:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b23a:	461a      	mov	r2, r3
 800b23c:	2300      	movs	r3, #0
 800b23e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b246:	461a      	mov	r2, r3
 800b248:	2300      	movs	r3, #0
 800b24a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b252:	461a      	mov	r2, r3
 800b254:	2300      	movs	r3, #0
 800b256:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b258:	2300      	movs	r3, #0
 800b25a:	613b      	str	r3, [r7, #16]
 800b25c:	e043      	b.n	800b2e6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	015a      	lsls	r2, r3, #5
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	4413      	add	r3, r2
 800b266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b270:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b274:	d118      	bne.n	800b2a8 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d10a      	bne.n	800b292 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b27c:	693b      	ldr	r3, [r7, #16]
 800b27e:	015a      	lsls	r2, r3, #5
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	4413      	add	r3, r2
 800b284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b288:	461a      	mov	r2, r3
 800b28a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b28e:	6013      	str	r3, [r2, #0]
 800b290:	e013      	b.n	800b2ba <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	015a      	lsls	r2, r3, #5
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	4413      	add	r3, r2
 800b29a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b29e:	461a      	mov	r2, r3
 800b2a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b2a4:	6013      	str	r3, [r2, #0]
 800b2a6:	e008      	b.n	800b2ba <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	015a      	lsls	r2, r3, #5
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	4413      	add	r3, r2
 800b2b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2b4:	461a      	mov	r2, r3
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b2ba:	693b      	ldr	r3, [r7, #16]
 800b2bc:	015a      	lsls	r2, r3, #5
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	4413      	add	r3, r2
 800b2c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	015a      	lsls	r2, r3, #5
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	4413      	add	r3, r2
 800b2d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2d8:	461a      	mov	r2, r3
 800b2da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b2de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	613b      	str	r3, [r7, #16]
 800b2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e8:	693a      	ldr	r2, [r7, #16]
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d3b7      	bcc.n	800b25e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	613b      	str	r3, [r7, #16]
 800b2f2:	e043      	b.n	800b37c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b2f4:	693b      	ldr	r3, [r7, #16]
 800b2f6:	015a      	lsls	r2, r3, #5
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	4413      	add	r3, r2
 800b2fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b306:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b30a:	d118      	bne.n	800b33e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d10a      	bne.n	800b328 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	015a      	lsls	r2, r3, #5
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	4413      	add	r3, r2
 800b31a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b31e:	461a      	mov	r2, r3
 800b320:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b324:	6013      	str	r3, [r2, #0]
 800b326:	e013      	b.n	800b350 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	015a      	lsls	r2, r3, #5
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	4413      	add	r3, r2
 800b330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b334:	461a      	mov	r2, r3
 800b336:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b33a:	6013      	str	r3, [r2, #0]
 800b33c:	e008      	b.n	800b350 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b33e:	693b      	ldr	r3, [r7, #16]
 800b340:	015a      	lsls	r2, r3, #5
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	4413      	add	r3, r2
 800b346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b34a:	461a      	mov	r2, r3
 800b34c:	2300      	movs	r3, #0
 800b34e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	015a      	lsls	r2, r3, #5
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	4413      	add	r3, r2
 800b358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b35c:	461a      	mov	r2, r3
 800b35e:	2300      	movs	r3, #0
 800b360:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	015a      	lsls	r2, r3, #5
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	4413      	add	r3, r2
 800b36a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b36e:	461a      	mov	r2, r3
 800b370:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b374:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	3301      	adds	r3, #1
 800b37a:	613b      	str	r3, [r7, #16]
 800b37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b37e:	693a      	ldr	r2, [r7, #16]
 800b380:	429a      	cmp	r2, r3
 800b382:	d3b7      	bcc.n	800b2f4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b38a:	691b      	ldr	r3, [r3, #16]
 800b38c:	68fa      	ldr	r2, [r7, #12]
 800b38e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b392:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b396:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2200      	movs	r2, #0
 800b39c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b3a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d105      	bne.n	800b3b8 <USB_DevInit+0x254>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	699b      	ldr	r3, [r3, #24]
 800b3b0:	f043 0210 	orr.w	r2, r3, #16
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	699a      	ldr	r2, [r3, #24]
 800b3bc:	4b0f      	ldr	r3, [pc, #60]	; (800b3fc <USB_DevInit+0x298>)
 800b3be:	4313      	orrs	r3, r2
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b3c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d005      	beq.n	800b3d6 <USB_DevInit+0x272>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	699b      	ldr	r3, [r3, #24]
 800b3ce:	f043 0208 	orr.w	r2, r3, #8
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b3d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3d8:	2b01      	cmp	r3, #1
 800b3da:	d107      	bne.n	800b3ec <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	699b      	ldr	r3, [r3, #24]
 800b3e0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b3e4:	f043 0304 	orr.w	r3, r3, #4
 800b3e8:	687a      	ldr	r2, [r7, #4]
 800b3ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b3ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3718      	adds	r7, #24
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b3f8:	b004      	add	sp, #16
 800b3fa:	4770      	bx	lr
 800b3fc:	803c3800 	.word	0x803c3800

0800b400 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b400:	b480      	push	{r7}
 800b402:	b085      	sub	sp, #20
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
 800b408:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b40a:	2300      	movs	r3, #0
 800b40c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	3301      	adds	r3, #1
 800b412:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	4a13      	ldr	r2, [pc, #76]	; (800b464 <USB_FlushTxFifo+0x64>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d901      	bls.n	800b420 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b41c:	2303      	movs	r3, #3
 800b41e:	e01b      	b.n	800b458 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	691b      	ldr	r3, [r3, #16]
 800b424:	2b00      	cmp	r3, #0
 800b426:	daf2      	bge.n	800b40e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b428:	2300      	movs	r3, #0
 800b42a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	019b      	lsls	r3, r3, #6
 800b430:	f043 0220 	orr.w	r2, r3, #32
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	3301      	adds	r3, #1
 800b43c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	4a08      	ldr	r2, [pc, #32]	; (800b464 <USB_FlushTxFifo+0x64>)
 800b442:	4293      	cmp	r3, r2
 800b444:	d901      	bls.n	800b44a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b446:	2303      	movs	r3, #3
 800b448:	e006      	b.n	800b458 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	691b      	ldr	r3, [r3, #16]
 800b44e:	f003 0320 	and.w	r3, r3, #32
 800b452:	2b20      	cmp	r3, #32
 800b454:	d0f0      	beq.n	800b438 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b456:	2300      	movs	r3, #0
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3714      	adds	r7, #20
 800b45c:	46bd      	mov	sp, r7
 800b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b462:	4770      	bx	lr
 800b464:	00030d40 	.word	0x00030d40

0800b468 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b468:	b480      	push	{r7}
 800b46a:	b085      	sub	sp, #20
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b470:	2300      	movs	r3, #0
 800b472:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	3301      	adds	r3, #1
 800b478:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	4a11      	ldr	r2, [pc, #68]	; (800b4c4 <USB_FlushRxFifo+0x5c>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d901      	bls.n	800b486 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b482:	2303      	movs	r3, #3
 800b484:	e018      	b.n	800b4b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	691b      	ldr	r3, [r3, #16]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	daf2      	bge.n	800b474 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b48e:	2300      	movs	r3, #0
 800b490:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2210      	movs	r2, #16
 800b496:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	3301      	adds	r3, #1
 800b49c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	4a08      	ldr	r2, [pc, #32]	; (800b4c4 <USB_FlushRxFifo+0x5c>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d901      	bls.n	800b4aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b4a6:	2303      	movs	r3, #3
 800b4a8:	e006      	b.n	800b4b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	691b      	ldr	r3, [r3, #16]
 800b4ae:	f003 0310 	and.w	r3, r3, #16
 800b4b2:	2b10      	cmp	r3, #16
 800b4b4:	d0f0      	beq.n	800b498 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b4b6:	2300      	movs	r3, #0
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3714      	adds	r7, #20
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c2:	4770      	bx	lr
 800b4c4:	00030d40 	.word	0x00030d40

0800b4c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b085      	sub	sp, #20
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4de:	681a      	ldr	r2, [r3, #0]
 800b4e0:	78fb      	ldrb	r3, [r7, #3]
 800b4e2:	68f9      	ldr	r1, [r7, #12]
 800b4e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b4ec:	2300      	movs	r3, #0
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3714      	adds	r7, #20
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f8:	4770      	bx	lr

0800b4fa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b4fa:	b480      	push	{r7}
 800b4fc:	b085      	sub	sp, #20
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	68fa      	ldr	r2, [r7, #12]
 800b510:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b514:	f023 0303 	bic.w	r3, r3, #3
 800b518:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	68fa      	ldr	r2, [r7, #12]
 800b524:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b528:	f043 0302 	orr.w	r3, r3, #2
 800b52c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b52e:	2300      	movs	r3, #0
}
 800b530:	4618      	mov	r0, r3
 800b532:	3714      	adds	r7, #20
 800b534:	46bd      	mov	sp, r7
 800b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53a:	4770      	bx	lr

0800b53c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b083      	sub	sp, #12
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	695b      	ldr	r3, [r3, #20]
 800b548:	f003 0301 	and.w	r3, r3, #1
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	370c      	adds	r7, #12
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr

0800b558 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b558:	b480      	push	{r7}
 800b55a:	b085      	sub	sp, #20
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b560:	2300      	movs	r3, #0
 800b562:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	3301      	adds	r3, #1
 800b568:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	4a13      	ldr	r2, [pc, #76]	; (800b5bc <USB_CoreReset+0x64>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d901      	bls.n	800b576 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b572:	2303      	movs	r3, #3
 800b574:	e01b      	b.n	800b5ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	691b      	ldr	r3, [r3, #16]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	daf2      	bge.n	800b564 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b57e:	2300      	movs	r3, #0
 800b580:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	691b      	ldr	r3, [r3, #16]
 800b586:	f043 0201 	orr.w	r2, r3, #1
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	3301      	adds	r3, #1
 800b592:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	4a09      	ldr	r2, [pc, #36]	; (800b5bc <USB_CoreReset+0x64>)
 800b598:	4293      	cmp	r3, r2
 800b59a:	d901      	bls.n	800b5a0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b59c:	2303      	movs	r3, #3
 800b59e:	e006      	b.n	800b5ae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	691b      	ldr	r3, [r3, #16]
 800b5a4:	f003 0301 	and.w	r3, r3, #1
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	d0f0      	beq.n	800b58e <USB_CoreReset+0x36>

  return HAL_OK;
 800b5ac:	2300      	movs	r3, #0
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3714      	adds	r7, #20
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b8:	4770      	bx	lr
 800b5ba:	bf00      	nop
 800b5bc:	00030d40 	.word	0x00030d40

0800b5c0 <__errno>:
 800b5c0:	4b01      	ldr	r3, [pc, #4]	; (800b5c8 <__errno+0x8>)
 800b5c2:	6818      	ldr	r0, [r3, #0]
 800b5c4:	4770      	bx	lr
 800b5c6:	bf00      	nop
 800b5c8:	2000000c 	.word	0x2000000c

0800b5cc <__libc_init_array>:
 800b5cc:	b570      	push	{r4, r5, r6, lr}
 800b5ce:	4d0d      	ldr	r5, [pc, #52]	; (800b604 <__libc_init_array+0x38>)
 800b5d0:	2600      	movs	r6, #0
 800b5d2:	4c0d      	ldr	r4, [pc, #52]	; (800b608 <__libc_init_array+0x3c>)
 800b5d4:	1b64      	subs	r4, r4, r5
 800b5d6:	10a4      	asrs	r4, r4, #2
 800b5d8:	42a6      	cmp	r6, r4
 800b5da:	d109      	bne.n	800b5f0 <__libc_init_array+0x24>
 800b5dc:	4d0b      	ldr	r5, [pc, #44]	; (800b60c <__libc_init_array+0x40>)
 800b5de:	2600      	movs	r6, #0
 800b5e0:	4c0b      	ldr	r4, [pc, #44]	; (800b610 <__libc_init_array+0x44>)
 800b5e2:	f000 ffa3 	bl	800c52c <_init>
 800b5e6:	1b64      	subs	r4, r4, r5
 800b5e8:	10a4      	asrs	r4, r4, #2
 800b5ea:	42a6      	cmp	r6, r4
 800b5ec:	d105      	bne.n	800b5fa <__libc_init_array+0x2e>
 800b5ee:	bd70      	pop	{r4, r5, r6, pc}
 800b5f0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5f4:	3601      	adds	r6, #1
 800b5f6:	4798      	blx	r3
 800b5f8:	e7ee      	b.n	800b5d8 <__libc_init_array+0xc>
 800b5fa:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5fe:	3601      	adds	r6, #1
 800b600:	4798      	blx	r3
 800b602:	e7f2      	b.n	800b5ea <__libc_init_array+0x1e>
 800b604:	0800c810 	.word	0x0800c810
 800b608:	0800c810 	.word	0x0800c810
 800b60c:	0800c810 	.word	0x0800c810
 800b610:	0800c814 	.word	0x0800c814

0800b614 <memcpy>:
 800b614:	440a      	add	r2, r1
 800b616:	1e43      	subs	r3, r0, #1
 800b618:	4291      	cmp	r1, r2
 800b61a:	d100      	bne.n	800b61e <memcpy+0xa>
 800b61c:	4770      	bx	lr
 800b61e:	b510      	push	{r4, lr}
 800b620:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b624:	4291      	cmp	r1, r2
 800b626:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b62a:	d1f9      	bne.n	800b620 <memcpy+0xc>
 800b62c:	bd10      	pop	{r4, pc}

0800b62e <memset>:
 800b62e:	4402      	add	r2, r0
 800b630:	4603      	mov	r3, r0
 800b632:	4293      	cmp	r3, r2
 800b634:	d100      	bne.n	800b638 <memset+0xa>
 800b636:	4770      	bx	lr
 800b638:	f803 1b01 	strb.w	r1, [r3], #1
 800b63c:	e7f9      	b.n	800b632 <memset+0x4>

0800b63e <strncmp>:
 800b63e:	b510      	push	{r4, lr}
 800b640:	b17a      	cbz	r2, 800b662 <strncmp+0x24>
 800b642:	4603      	mov	r3, r0
 800b644:	3901      	subs	r1, #1
 800b646:	1884      	adds	r4, r0, r2
 800b648:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b64c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b650:	4290      	cmp	r0, r2
 800b652:	d101      	bne.n	800b658 <strncmp+0x1a>
 800b654:	42a3      	cmp	r3, r4
 800b656:	d101      	bne.n	800b65c <strncmp+0x1e>
 800b658:	1a80      	subs	r0, r0, r2
 800b65a:	bd10      	pop	{r4, pc}
 800b65c:	2800      	cmp	r0, #0
 800b65e:	d1f3      	bne.n	800b648 <strncmp+0xa>
 800b660:	e7fa      	b.n	800b658 <strncmp+0x1a>
 800b662:	4610      	mov	r0, r2
 800b664:	e7f9      	b.n	800b65a <strncmp+0x1c>

0800b666 <strncpy>:
 800b666:	3901      	subs	r1, #1
 800b668:	4603      	mov	r3, r0
 800b66a:	b510      	push	{r4, lr}
 800b66c:	b132      	cbz	r2, 800b67c <strncpy+0x16>
 800b66e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b672:	3a01      	subs	r2, #1
 800b674:	f803 4b01 	strb.w	r4, [r3], #1
 800b678:	2c00      	cmp	r4, #0
 800b67a:	d1f7      	bne.n	800b66c <strncpy+0x6>
 800b67c:	441a      	add	r2, r3
 800b67e:	2100      	movs	r1, #0
 800b680:	4293      	cmp	r3, r2
 800b682:	d100      	bne.n	800b686 <strncpy+0x20>
 800b684:	bd10      	pop	{r4, pc}
 800b686:	f803 1b01 	strb.w	r1, [r3], #1
 800b68a:	e7f9      	b.n	800b680 <strncpy+0x1a>

0800b68c <__strtok_r>:
 800b68c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b68e:	b908      	cbnz	r0, 800b694 <__strtok_r+0x8>
 800b690:	6810      	ldr	r0, [r2, #0]
 800b692:	b188      	cbz	r0, 800b6b8 <__strtok_r+0x2c>
 800b694:	4604      	mov	r4, r0
 800b696:	4620      	mov	r0, r4
 800b698:	460f      	mov	r7, r1
 800b69a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b69e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b6a2:	b91e      	cbnz	r6, 800b6ac <__strtok_r+0x20>
 800b6a4:	b965      	cbnz	r5, 800b6c0 <__strtok_r+0x34>
 800b6a6:	4628      	mov	r0, r5
 800b6a8:	6015      	str	r5, [r2, #0]
 800b6aa:	e005      	b.n	800b6b8 <__strtok_r+0x2c>
 800b6ac:	42b5      	cmp	r5, r6
 800b6ae:	d1f6      	bne.n	800b69e <__strtok_r+0x12>
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d1f0      	bne.n	800b696 <__strtok_r+0xa>
 800b6b4:	6014      	str	r4, [r2, #0]
 800b6b6:	7003      	strb	r3, [r0, #0]
 800b6b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6ba:	461c      	mov	r4, r3
 800b6bc:	e00c      	b.n	800b6d8 <__strtok_r+0x4c>
 800b6be:	b915      	cbnz	r5, 800b6c6 <__strtok_r+0x3a>
 800b6c0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b6c4:	460e      	mov	r6, r1
 800b6c6:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b6ca:	42ab      	cmp	r3, r5
 800b6cc:	d1f7      	bne.n	800b6be <__strtok_r+0x32>
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d0f3      	beq.n	800b6ba <__strtok_r+0x2e>
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b6d8:	6014      	str	r4, [r2, #0]
 800b6da:	e7ed      	b.n	800b6b8 <__strtok_r+0x2c>

0800b6dc <strtok_r>:
 800b6dc:	2301      	movs	r3, #1
 800b6de:	f7ff bfd5 	b.w	800b68c <__strtok_r>
	...

0800b6e4 <pow>:
 800b6e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6e6:	ec55 4b11 	vmov	r4, r5, d1
 800b6ea:	ed2d 8b02 	vpush	{d8}
 800b6ee:	eeb0 8a40 	vmov.f32	s16, s0
 800b6f2:	eef0 8a60 	vmov.f32	s17, s1
 800b6f6:	f000 f867 	bl	800b7c8 <__ieee754_pow>
 800b6fa:	4622      	mov	r2, r4
 800b6fc:	462b      	mov	r3, r5
 800b6fe:	4620      	mov	r0, r4
 800b700:	4629      	mov	r1, r5
 800b702:	ec57 6b10 	vmov	r6, r7, d0
 800b706:	f7f5 fa15 	bl	8000b34 <__aeabi_dcmpun>
 800b70a:	2800      	cmp	r0, #0
 800b70c:	d13b      	bne.n	800b786 <pow+0xa2>
 800b70e:	2200      	movs	r2, #0
 800b710:	2300      	movs	r3, #0
 800b712:	ec51 0b18 	vmov	r0, r1, d8
 800b716:	f7f5 f9db 	bl	8000ad0 <__aeabi_dcmpeq>
 800b71a:	b1b8      	cbz	r0, 800b74c <pow+0x68>
 800b71c:	2200      	movs	r2, #0
 800b71e:	2300      	movs	r3, #0
 800b720:	4620      	mov	r0, r4
 800b722:	4629      	mov	r1, r5
 800b724:	f7f5 f9d4 	bl	8000ad0 <__aeabi_dcmpeq>
 800b728:	2800      	cmp	r0, #0
 800b72a:	d146      	bne.n	800b7ba <pow+0xd6>
 800b72c:	ec45 4b10 	vmov	d0, r4, r5
 800b730:	f000 fe69 	bl	800c406 <finite>
 800b734:	b338      	cbz	r0, 800b786 <pow+0xa2>
 800b736:	2200      	movs	r2, #0
 800b738:	2300      	movs	r3, #0
 800b73a:	4620      	mov	r0, r4
 800b73c:	4629      	mov	r1, r5
 800b73e:	f7f5 f9d1 	bl	8000ae4 <__aeabi_dcmplt>
 800b742:	b300      	cbz	r0, 800b786 <pow+0xa2>
 800b744:	f7ff ff3c 	bl	800b5c0 <__errno>
 800b748:	2322      	movs	r3, #34	; 0x22
 800b74a:	e01b      	b.n	800b784 <pow+0xa0>
 800b74c:	ec47 6b10 	vmov	d0, r6, r7
 800b750:	f000 fe59 	bl	800c406 <finite>
 800b754:	b9e0      	cbnz	r0, 800b790 <pow+0xac>
 800b756:	eeb0 0a48 	vmov.f32	s0, s16
 800b75a:	eef0 0a68 	vmov.f32	s1, s17
 800b75e:	f000 fe52 	bl	800c406 <finite>
 800b762:	b1a8      	cbz	r0, 800b790 <pow+0xac>
 800b764:	ec45 4b10 	vmov	d0, r4, r5
 800b768:	f000 fe4d 	bl	800c406 <finite>
 800b76c:	b180      	cbz	r0, 800b790 <pow+0xac>
 800b76e:	4632      	mov	r2, r6
 800b770:	463b      	mov	r3, r7
 800b772:	4630      	mov	r0, r6
 800b774:	4639      	mov	r1, r7
 800b776:	f7f5 f9dd 	bl	8000b34 <__aeabi_dcmpun>
 800b77a:	2800      	cmp	r0, #0
 800b77c:	d0e2      	beq.n	800b744 <pow+0x60>
 800b77e:	f7ff ff1f 	bl	800b5c0 <__errno>
 800b782:	2321      	movs	r3, #33	; 0x21
 800b784:	6003      	str	r3, [r0, #0]
 800b786:	ecbd 8b02 	vpop	{d8}
 800b78a:	ec47 6b10 	vmov	d0, r6, r7
 800b78e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b790:	2200      	movs	r2, #0
 800b792:	2300      	movs	r3, #0
 800b794:	4630      	mov	r0, r6
 800b796:	4639      	mov	r1, r7
 800b798:	f7f5 f99a 	bl	8000ad0 <__aeabi_dcmpeq>
 800b79c:	2800      	cmp	r0, #0
 800b79e:	d0f2      	beq.n	800b786 <pow+0xa2>
 800b7a0:	eeb0 0a48 	vmov.f32	s0, s16
 800b7a4:	eef0 0a68 	vmov.f32	s1, s17
 800b7a8:	f000 fe2d 	bl	800c406 <finite>
 800b7ac:	2800      	cmp	r0, #0
 800b7ae:	d0ea      	beq.n	800b786 <pow+0xa2>
 800b7b0:	ec45 4b10 	vmov	d0, r4, r5
 800b7b4:	f000 fe27 	bl	800c406 <finite>
 800b7b8:	e7c3      	b.n	800b742 <pow+0x5e>
 800b7ba:	2600      	movs	r6, #0
 800b7bc:	4f00      	ldr	r7, [pc, #0]	; (800b7c0 <pow+0xdc>)
 800b7be:	e7e2      	b.n	800b786 <pow+0xa2>
 800b7c0:	3ff00000 	.word	0x3ff00000
 800b7c4:	00000000 	.word	0x00000000

0800b7c8 <__ieee754_pow>:
 800b7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7cc:	ed2d 8b06 	vpush	{d8-d10}
 800b7d0:	b089      	sub	sp, #36	; 0x24
 800b7d2:	ed8d 1b00 	vstr	d1, [sp]
 800b7d6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b7da:	ec57 6b10 	vmov	r6, r7, d0
 800b7de:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b7e2:	ea58 0102 	orrs.w	r1, r8, r2
 800b7e6:	d115      	bne.n	800b814 <__ieee754_pow+0x4c>
 800b7e8:	19b3      	adds	r3, r6, r6
 800b7ea:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b7ee:	4152      	adcs	r2, r2
 800b7f0:	4299      	cmp	r1, r3
 800b7f2:	4b89      	ldr	r3, [pc, #548]	; (800ba18 <__ieee754_pow+0x250>)
 800b7f4:	4193      	sbcs	r3, r2
 800b7f6:	f080 84d3 	bcs.w	800c1a0 <__ieee754_pow+0x9d8>
 800b7fa:	4630      	mov	r0, r6
 800b7fc:	4639      	mov	r1, r7
 800b7fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b802:	f7f4 fd47 	bl	8000294 <__adddf3>
 800b806:	ec41 0b10 	vmov	d0, r0, r1
 800b80a:	b009      	add	sp, #36	; 0x24
 800b80c:	ecbd 8b06 	vpop	{d8-d10}
 800b810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b814:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b818:	4b80      	ldr	r3, [pc, #512]	; (800ba1c <__ieee754_pow+0x254>)
 800b81a:	463d      	mov	r5, r7
 800b81c:	ee10 aa10 	vmov	sl, s0
 800b820:	429c      	cmp	r4, r3
 800b822:	dc06      	bgt.n	800b832 <__ieee754_pow+0x6a>
 800b824:	d101      	bne.n	800b82a <__ieee754_pow+0x62>
 800b826:	2e00      	cmp	r6, #0
 800b828:	d1e7      	bne.n	800b7fa <__ieee754_pow+0x32>
 800b82a:	4598      	cmp	r8, r3
 800b82c:	dc01      	bgt.n	800b832 <__ieee754_pow+0x6a>
 800b82e:	d10f      	bne.n	800b850 <__ieee754_pow+0x88>
 800b830:	b172      	cbz	r2, 800b850 <__ieee754_pow+0x88>
 800b832:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b836:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b83a:	ea55 050a 	orrs.w	r5, r5, sl
 800b83e:	d1dc      	bne.n	800b7fa <__ieee754_pow+0x32>
 800b840:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b844:	18db      	adds	r3, r3, r3
 800b846:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b84a:	4152      	adcs	r2, r2
 800b84c:	429d      	cmp	r5, r3
 800b84e:	e7d0      	b.n	800b7f2 <__ieee754_pow+0x2a>
 800b850:	2d00      	cmp	r5, #0
 800b852:	da3b      	bge.n	800b8cc <__ieee754_pow+0x104>
 800b854:	4b72      	ldr	r3, [pc, #456]	; (800ba20 <__ieee754_pow+0x258>)
 800b856:	4598      	cmp	r8, r3
 800b858:	dc51      	bgt.n	800b8fe <__ieee754_pow+0x136>
 800b85a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b85e:	4598      	cmp	r8, r3
 800b860:	f340 84ad 	ble.w	800c1be <__ieee754_pow+0x9f6>
 800b864:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b868:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b86c:	2b14      	cmp	r3, #20
 800b86e:	dd0f      	ble.n	800b890 <__ieee754_pow+0xc8>
 800b870:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b874:	fa22 f103 	lsr.w	r1, r2, r3
 800b878:	fa01 f303 	lsl.w	r3, r1, r3
 800b87c:	4293      	cmp	r3, r2
 800b87e:	f040 849e 	bne.w	800c1be <__ieee754_pow+0x9f6>
 800b882:	f001 0101 	and.w	r1, r1, #1
 800b886:	f1c1 0302 	rsb	r3, r1, #2
 800b88a:	9304      	str	r3, [sp, #16]
 800b88c:	b182      	cbz	r2, 800b8b0 <__ieee754_pow+0xe8>
 800b88e:	e05f      	b.n	800b950 <__ieee754_pow+0x188>
 800b890:	2a00      	cmp	r2, #0
 800b892:	d15b      	bne.n	800b94c <__ieee754_pow+0x184>
 800b894:	f1c3 0314 	rsb	r3, r3, #20
 800b898:	fa48 f103 	asr.w	r1, r8, r3
 800b89c:	fa01 f303 	lsl.w	r3, r1, r3
 800b8a0:	4543      	cmp	r3, r8
 800b8a2:	f040 8489 	bne.w	800c1b8 <__ieee754_pow+0x9f0>
 800b8a6:	f001 0101 	and.w	r1, r1, #1
 800b8aa:	f1c1 0302 	rsb	r3, r1, #2
 800b8ae:	9304      	str	r3, [sp, #16]
 800b8b0:	4b5c      	ldr	r3, [pc, #368]	; (800ba24 <__ieee754_pow+0x25c>)
 800b8b2:	4598      	cmp	r8, r3
 800b8b4:	d132      	bne.n	800b91c <__ieee754_pow+0x154>
 800b8b6:	f1b9 0f00 	cmp.w	r9, #0
 800b8ba:	f280 8479 	bge.w	800c1b0 <__ieee754_pow+0x9e8>
 800b8be:	4632      	mov	r2, r6
 800b8c0:	463b      	mov	r3, r7
 800b8c2:	2000      	movs	r0, #0
 800b8c4:	4957      	ldr	r1, [pc, #348]	; (800ba24 <__ieee754_pow+0x25c>)
 800b8c6:	f7f4 ffc5 	bl	8000854 <__aeabi_ddiv>
 800b8ca:	e79c      	b.n	800b806 <__ieee754_pow+0x3e>
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	9304      	str	r3, [sp, #16]
 800b8d0:	2a00      	cmp	r2, #0
 800b8d2:	d13d      	bne.n	800b950 <__ieee754_pow+0x188>
 800b8d4:	4b51      	ldr	r3, [pc, #324]	; (800ba1c <__ieee754_pow+0x254>)
 800b8d6:	4598      	cmp	r8, r3
 800b8d8:	d1ea      	bne.n	800b8b0 <__ieee754_pow+0xe8>
 800b8da:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b8de:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b8e2:	ea53 030a 	orrs.w	r3, r3, sl
 800b8e6:	f000 845b 	beq.w	800c1a0 <__ieee754_pow+0x9d8>
 800b8ea:	4b4f      	ldr	r3, [pc, #316]	; (800ba28 <__ieee754_pow+0x260>)
 800b8ec:	429c      	cmp	r4, r3
 800b8ee:	dd08      	ble.n	800b902 <__ieee754_pow+0x13a>
 800b8f0:	f1b9 0f00 	cmp.w	r9, #0
 800b8f4:	f2c0 8458 	blt.w	800c1a8 <__ieee754_pow+0x9e0>
 800b8f8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b8fc:	e783      	b.n	800b806 <__ieee754_pow+0x3e>
 800b8fe:	2302      	movs	r3, #2
 800b900:	e7e5      	b.n	800b8ce <__ieee754_pow+0x106>
 800b902:	f1b9 0f00 	cmp.w	r9, #0
 800b906:	f04f 0000 	mov.w	r0, #0
 800b90a:	f04f 0100 	mov.w	r1, #0
 800b90e:	f6bf af7a 	bge.w	800b806 <__ieee754_pow+0x3e>
 800b912:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b916:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b91a:	e774      	b.n	800b806 <__ieee754_pow+0x3e>
 800b91c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b920:	d106      	bne.n	800b930 <__ieee754_pow+0x168>
 800b922:	4632      	mov	r2, r6
 800b924:	463b      	mov	r3, r7
 800b926:	4630      	mov	r0, r6
 800b928:	4639      	mov	r1, r7
 800b92a:	f7f4 fe69 	bl	8000600 <__aeabi_dmul>
 800b92e:	e76a      	b.n	800b806 <__ieee754_pow+0x3e>
 800b930:	4b3e      	ldr	r3, [pc, #248]	; (800ba2c <__ieee754_pow+0x264>)
 800b932:	4599      	cmp	r9, r3
 800b934:	d10c      	bne.n	800b950 <__ieee754_pow+0x188>
 800b936:	2d00      	cmp	r5, #0
 800b938:	db0a      	blt.n	800b950 <__ieee754_pow+0x188>
 800b93a:	ec47 6b10 	vmov	d0, r6, r7
 800b93e:	b009      	add	sp, #36	; 0x24
 800b940:	ecbd 8b06 	vpop	{d8-d10}
 800b944:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b948:	f000 bc6c 	b.w	800c224 <__ieee754_sqrt>
 800b94c:	2300      	movs	r3, #0
 800b94e:	9304      	str	r3, [sp, #16]
 800b950:	ec47 6b10 	vmov	d0, r6, r7
 800b954:	f000 fd4e 	bl	800c3f4 <fabs>
 800b958:	ec51 0b10 	vmov	r0, r1, d0
 800b95c:	f1ba 0f00 	cmp.w	sl, #0
 800b960:	d129      	bne.n	800b9b6 <__ieee754_pow+0x1ee>
 800b962:	b124      	cbz	r4, 800b96e <__ieee754_pow+0x1a6>
 800b964:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b968:	4b2e      	ldr	r3, [pc, #184]	; (800ba24 <__ieee754_pow+0x25c>)
 800b96a:	429a      	cmp	r2, r3
 800b96c:	d123      	bne.n	800b9b6 <__ieee754_pow+0x1ee>
 800b96e:	f1b9 0f00 	cmp.w	r9, #0
 800b972:	da05      	bge.n	800b980 <__ieee754_pow+0x1b8>
 800b974:	4602      	mov	r2, r0
 800b976:	460b      	mov	r3, r1
 800b978:	2000      	movs	r0, #0
 800b97a:	492a      	ldr	r1, [pc, #168]	; (800ba24 <__ieee754_pow+0x25c>)
 800b97c:	f7f4 ff6a 	bl	8000854 <__aeabi_ddiv>
 800b980:	2d00      	cmp	r5, #0
 800b982:	f6bf af40 	bge.w	800b806 <__ieee754_pow+0x3e>
 800b986:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b98a:	9b04      	ldr	r3, [sp, #16]
 800b98c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b990:	4323      	orrs	r3, r4
 800b992:	d108      	bne.n	800b9a6 <__ieee754_pow+0x1de>
 800b994:	4602      	mov	r2, r0
 800b996:	460b      	mov	r3, r1
 800b998:	4610      	mov	r0, r2
 800b99a:	4619      	mov	r1, r3
 800b99c:	f7f4 fc78 	bl	8000290 <__aeabi_dsub>
 800b9a0:	4602      	mov	r2, r0
 800b9a2:	460b      	mov	r3, r1
 800b9a4:	e78f      	b.n	800b8c6 <__ieee754_pow+0xfe>
 800b9a6:	9b04      	ldr	r3, [sp, #16]
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	f47f af2c 	bne.w	800b806 <__ieee754_pow+0x3e>
 800b9ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	e727      	b.n	800b806 <__ieee754_pow+0x3e>
 800b9b6:	0feb      	lsrs	r3, r5, #31
 800b9b8:	3b01      	subs	r3, #1
 800b9ba:	9306      	str	r3, [sp, #24]
 800b9bc:	9a06      	ldr	r2, [sp, #24]
 800b9be:	9b04      	ldr	r3, [sp, #16]
 800b9c0:	4313      	orrs	r3, r2
 800b9c2:	d102      	bne.n	800b9ca <__ieee754_pow+0x202>
 800b9c4:	4632      	mov	r2, r6
 800b9c6:	463b      	mov	r3, r7
 800b9c8:	e7e6      	b.n	800b998 <__ieee754_pow+0x1d0>
 800b9ca:	4b19      	ldr	r3, [pc, #100]	; (800ba30 <__ieee754_pow+0x268>)
 800b9cc:	4598      	cmp	r8, r3
 800b9ce:	f340 80fb 	ble.w	800bbc8 <__ieee754_pow+0x400>
 800b9d2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800b9d6:	4598      	cmp	r8, r3
 800b9d8:	4b13      	ldr	r3, [pc, #76]	; (800ba28 <__ieee754_pow+0x260>)
 800b9da:	dd0c      	ble.n	800b9f6 <__ieee754_pow+0x22e>
 800b9dc:	429c      	cmp	r4, r3
 800b9de:	dc0f      	bgt.n	800ba00 <__ieee754_pow+0x238>
 800b9e0:	f1b9 0f00 	cmp.w	r9, #0
 800b9e4:	da0f      	bge.n	800ba06 <__ieee754_pow+0x23e>
 800b9e6:	2000      	movs	r0, #0
 800b9e8:	b009      	add	sp, #36	; 0x24
 800b9ea:	ecbd 8b06 	vpop	{d8-d10}
 800b9ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f2:	f000 bcf6 	b.w	800c3e2 <__math_oflow>
 800b9f6:	429c      	cmp	r4, r3
 800b9f8:	dbf2      	blt.n	800b9e0 <__ieee754_pow+0x218>
 800b9fa:	4b0a      	ldr	r3, [pc, #40]	; (800ba24 <__ieee754_pow+0x25c>)
 800b9fc:	429c      	cmp	r4, r3
 800b9fe:	dd19      	ble.n	800ba34 <__ieee754_pow+0x26c>
 800ba00:	f1b9 0f00 	cmp.w	r9, #0
 800ba04:	dcef      	bgt.n	800b9e6 <__ieee754_pow+0x21e>
 800ba06:	2000      	movs	r0, #0
 800ba08:	b009      	add	sp, #36	; 0x24
 800ba0a:	ecbd 8b06 	vpop	{d8-d10}
 800ba0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba12:	f000 bcdd 	b.w	800c3d0 <__math_uflow>
 800ba16:	bf00      	nop
 800ba18:	fff00000 	.word	0xfff00000
 800ba1c:	7ff00000 	.word	0x7ff00000
 800ba20:	433fffff 	.word	0x433fffff
 800ba24:	3ff00000 	.word	0x3ff00000
 800ba28:	3fefffff 	.word	0x3fefffff
 800ba2c:	3fe00000 	.word	0x3fe00000
 800ba30:	41e00000 	.word	0x41e00000
 800ba34:	2200      	movs	r2, #0
 800ba36:	4b60      	ldr	r3, [pc, #384]	; (800bbb8 <__ieee754_pow+0x3f0>)
 800ba38:	f7f4 fc2a 	bl	8000290 <__aeabi_dsub>
 800ba3c:	4604      	mov	r4, r0
 800ba3e:	460d      	mov	r5, r1
 800ba40:	a353      	add	r3, pc, #332	; (adr r3, 800bb90 <__ieee754_pow+0x3c8>)
 800ba42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba46:	f7f4 fddb 	bl	8000600 <__aeabi_dmul>
 800ba4a:	4606      	mov	r6, r0
 800ba4c:	460f      	mov	r7, r1
 800ba4e:	4620      	mov	r0, r4
 800ba50:	4629      	mov	r1, r5
 800ba52:	a351      	add	r3, pc, #324	; (adr r3, 800bb98 <__ieee754_pow+0x3d0>)
 800ba54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba58:	f7f4 fdd2 	bl	8000600 <__aeabi_dmul>
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	4682      	mov	sl, r0
 800ba60:	468b      	mov	fp, r1
 800ba62:	4b56      	ldr	r3, [pc, #344]	; (800bbbc <__ieee754_pow+0x3f4>)
 800ba64:	4620      	mov	r0, r4
 800ba66:	4629      	mov	r1, r5
 800ba68:	f7f4 fdca 	bl	8000600 <__aeabi_dmul>
 800ba6c:	4602      	mov	r2, r0
 800ba6e:	460b      	mov	r3, r1
 800ba70:	a14b      	add	r1, pc, #300	; (adr r1, 800bba0 <__ieee754_pow+0x3d8>)
 800ba72:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba76:	f7f4 fc0b 	bl	8000290 <__aeabi_dsub>
 800ba7a:	4622      	mov	r2, r4
 800ba7c:	462b      	mov	r3, r5
 800ba7e:	f7f4 fdbf 	bl	8000600 <__aeabi_dmul>
 800ba82:	4602      	mov	r2, r0
 800ba84:	460b      	mov	r3, r1
 800ba86:	2000      	movs	r0, #0
 800ba88:	494d      	ldr	r1, [pc, #308]	; (800bbc0 <__ieee754_pow+0x3f8>)
 800ba8a:	f7f4 fc01 	bl	8000290 <__aeabi_dsub>
 800ba8e:	4680      	mov	r8, r0
 800ba90:	4689      	mov	r9, r1
 800ba92:	4622      	mov	r2, r4
 800ba94:	462b      	mov	r3, r5
 800ba96:	4620      	mov	r0, r4
 800ba98:	4629      	mov	r1, r5
 800ba9a:	f7f4 fdb1 	bl	8000600 <__aeabi_dmul>
 800ba9e:	4602      	mov	r2, r0
 800baa0:	460b      	mov	r3, r1
 800baa2:	4640      	mov	r0, r8
 800baa4:	4649      	mov	r1, r9
 800baa6:	f7f4 fdab 	bl	8000600 <__aeabi_dmul>
 800baaa:	a33f      	add	r3, pc, #252	; (adr r3, 800bba8 <__ieee754_pow+0x3e0>)
 800baac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab0:	f7f4 fda6 	bl	8000600 <__aeabi_dmul>
 800bab4:	4602      	mov	r2, r0
 800bab6:	460b      	mov	r3, r1
 800bab8:	4650      	mov	r0, sl
 800baba:	4659      	mov	r1, fp
 800babc:	f7f4 fbe8 	bl	8000290 <__aeabi_dsub>
 800bac0:	4602      	mov	r2, r0
 800bac2:	460b      	mov	r3, r1
 800bac4:	4680      	mov	r8, r0
 800bac6:	4689      	mov	r9, r1
 800bac8:	4630      	mov	r0, r6
 800baca:	4639      	mov	r1, r7
 800bacc:	f7f4 fbe2 	bl	8000294 <__adddf3>
 800bad0:	2000      	movs	r0, #0
 800bad2:	4632      	mov	r2, r6
 800bad4:	463b      	mov	r3, r7
 800bad6:	4604      	mov	r4, r0
 800bad8:	460d      	mov	r5, r1
 800bada:	f7f4 fbd9 	bl	8000290 <__aeabi_dsub>
 800bade:	4602      	mov	r2, r0
 800bae0:	460b      	mov	r3, r1
 800bae2:	4640      	mov	r0, r8
 800bae4:	4649      	mov	r1, r9
 800bae6:	f7f4 fbd3 	bl	8000290 <__aeabi_dsub>
 800baea:	9b04      	ldr	r3, [sp, #16]
 800baec:	9a06      	ldr	r2, [sp, #24]
 800baee:	4682      	mov	sl, r0
 800baf0:	3b01      	subs	r3, #1
 800baf2:	468b      	mov	fp, r1
 800baf4:	4313      	orrs	r3, r2
 800baf6:	f040 81e7 	bne.w	800bec8 <__ieee754_pow+0x700>
 800bafa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800bbb0 <__ieee754_pow+0x3e8>
 800bafe:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bb02:	2600      	movs	r6, #0
 800bb04:	eeb0 8a47 	vmov.f32	s16, s14
 800bb08:	eef0 8a67 	vmov.f32	s17, s15
 800bb0c:	463b      	mov	r3, r7
 800bb0e:	4632      	mov	r2, r6
 800bb10:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb14:	f7f4 fbbc 	bl	8000290 <__aeabi_dsub>
 800bb18:	4622      	mov	r2, r4
 800bb1a:	462b      	mov	r3, r5
 800bb1c:	f7f4 fd70 	bl	8000600 <__aeabi_dmul>
 800bb20:	4680      	mov	r8, r0
 800bb22:	4689      	mov	r9, r1
 800bb24:	4650      	mov	r0, sl
 800bb26:	4659      	mov	r1, fp
 800bb28:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb2c:	f7f4 fd68 	bl	8000600 <__aeabi_dmul>
 800bb30:	4602      	mov	r2, r0
 800bb32:	460b      	mov	r3, r1
 800bb34:	4640      	mov	r0, r8
 800bb36:	4649      	mov	r1, r9
 800bb38:	f7f4 fbac 	bl	8000294 <__adddf3>
 800bb3c:	4680      	mov	r8, r0
 800bb3e:	4689      	mov	r9, r1
 800bb40:	4632      	mov	r2, r6
 800bb42:	463b      	mov	r3, r7
 800bb44:	4620      	mov	r0, r4
 800bb46:	4629      	mov	r1, r5
 800bb48:	f7f4 fd5a 	bl	8000600 <__aeabi_dmul>
 800bb4c:	460b      	mov	r3, r1
 800bb4e:	4604      	mov	r4, r0
 800bb50:	460d      	mov	r5, r1
 800bb52:	4602      	mov	r2, r0
 800bb54:	4649      	mov	r1, r9
 800bb56:	4640      	mov	r0, r8
 800bb58:	f7f4 fb9c 	bl	8000294 <__adddf3>
 800bb5c:	4b19      	ldr	r3, [pc, #100]	; (800bbc4 <__ieee754_pow+0x3fc>)
 800bb5e:	4606      	mov	r6, r0
 800bb60:	460f      	mov	r7, r1
 800bb62:	4299      	cmp	r1, r3
 800bb64:	468b      	mov	fp, r1
 800bb66:	ec45 4b19 	vmov	d9, r4, r5
 800bb6a:	f340 82f2 	ble.w	800c152 <__ieee754_pow+0x98a>
 800bb6e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800bb72:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bb76:	4303      	orrs	r3, r0
 800bb78:	f000 81e4 	beq.w	800bf44 <__ieee754_pow+0x77c>
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	2300      	movs	r3, #0
 800bb80:	ec51 0b18 	vmov	r0, r1, d8
 800bb84:	f7f4 ffae 	bl	8000ae4 <__aeabi_dcmplt>
 800bb88:	3800      	subs	r0, #0
 800bb8a:	bf18      	it	ne
 800bb8c:	2001      	movne	r0, #1
 800bb8e:	e72b      	b.n	800b9e8 <__ieee754_pow+0x220>
 800bb90:	60000000 	.word	0x60000000
 800bb94:	3ff71547 	.word	0x3ff71547
 800bb98:	f85ddf44 	.word	0xf85ddf44
 800bb9c:	3e54ae0b 	.word	0x3e54ae0b
 800bba0:	55555555 	.word	0x55555555
 800bba4:	3fd55555 	.word	0x3fd55555
 800bba8:	652b82fe 	.word	0x652b82fe
 800bbac:	3ff71547 	.word	0x3ff71547
 800bbb0:	00000000 	.word	0x00000000
 800bbb4:	bff00000 	.word	0xbff00000
 800bbb8:	3ff00000 	.word	0x3ff00000
 800bbbc:	3fd00000 	.word	0x3fd00000
 800bbc0:	3fe00000 	.word	0x3fe00000
 800bbc4:	408fffff 	.word	0x408fffff
 800bbc8:	4bd5      	ldr	r3, [pc, #852]	; (800bf20 <__ieee754_pow+0x758>)
 800bbca:	2200      	movs	r2, #0
 800bbcc:	402b      	ands	r3, r5
 800bbce:	b92b      	cbnz	r3, 800bbdc <__ieee754_pow+0x414>
 800bbd0:	4bd4      	ldr	r3, [pc, #848]	; (800bf24 <__ieee754_pow+0x75c>)
 800bbd2:	f7f4 fd15 	bl	8000600 <__aeabi_dmul>
 800bbd6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bbda:	460c      	mov	r4, r1
 800bbdc:	1523      	asrs	r3, r4, #20
 800bbde:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bbe2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bbe6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bbea:	4413      	add	r3, r2
 800bbec:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bbf0:	9305      	str	r3, [sp, #20]
 800bbf2:	4bcd      	ldr	r3, [pc, #820]	; (800bf28 <__ieee754_pow+0x760>)
 800bbf4:	429c      	cmp	r4, r3
 800bbf6:	dd08      	ble.n	800bc0a <__ieee754_pow+0x442>
 800bbf8:	4bcc      	ldr	r3, [pc, #816]	; (800bf2c <__ieee754_pow+0x764>)
 800bbfa:	429c      	cmp	r4, r3
 800bbfc:	f340 8162 	ble.w	800bec4 <__ieee754_pow+0x6fc>
 800bc00:	9b05      	ldr	r3, [sp, #20]
 800bc02:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bc06:	3301      	adds	r3, #1
 800bc08:	9305      	str	r3, [sp, #20]
 800bc0a:	2400      	movs	r4, #0
 800bc0c:	00e3      	lsls	r3, r4, #3
 800bc0e:	4682      	mov	sl, r0
 800bc10:	4629      	mov	r1, r5
 800bc12:	46ab      	mov	fp, r5
 800bc14:	9307      	str	r3, [sp, #28]
 800bc16:	4bc6      	ldr	r3, [pc, #792]	; (800bf30 <__ieee754_pow+0x768>)
 800bc18:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bc1c:	ed93 7b00 	vldr	d7, [r3]
 800bc20:	eeb0 9a47 	vmov.f32	s18, s14
 800bc24:	eef0 9a67 	vmov.f32	s19, s15
 800bc28:	ec53 2b17 	vmov	r2, r3, d7
 800bc2c:	f7f4 fb30 	bl	8000290 <__aeabi_dsub>
 800bc30:	4652      	mov	r2, sl
 800bc32:	4606      	mov	r6, r0
 800bc34:	460f      	mov	r7, r1
 800bc36:	462b      	mov	r3, r5
 800bc38:	106d      	asrs	r5, r5, #1
 800bc3a:	ec51 0b19 	vmov	r0, r1, d9
 800bc3e:	f7f4 fb29 	bl	8000294 <__adddf3>
 800bc42:	4602      	mov	r2, r0
 800bc44:	460b      	mov	r3, r1
 800bc46:	2000      	movs	r0, #0
 800bc48:	49ba      	ldr	r1, [pc, #744]	; (800bf34 <__ieee754_pow+0x76c>)
 800bc4a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800bc4e:	f7f4 fe01 	bl	8000854 <__aeabi_ddiv>
 800bc52:	4602      	mov	r2, r0
 800bc54:	460b      	mov	r3, r1
 800bc56:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bc5a:	ec41 0b1a 	vmov	d10, r0, r1
 800bc5e:	4630      	mov	r0, r6
 800bc60:	4639      	mov	r1, r7
 800bc62:	f7f4 fccd 	bl	8000600 <__aeabi_dmul>
 800bc66:	2300      	movs	r3, #0
 800bc68:	2200      	movs	r2, #0
 800bc6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bc6e:	9302      	str	r3, [sp, #8]
 800bc70:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800bc74:	4614      	mov	r4, r2
 800bc76:	461d      	mov	r5, r3
 800bc78:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bc7c:	ec41 0b18 	vmov	d8, r0, r1
 800bc80:	4640      	mov	r0, r8
 800bc82:	4649      	mov	r1, r9
 800bc84:	f7f4 fcbc 	bl	8000600 <__aeabi_dmul>
 800bc88:	4602      	mov	r2, r0
 800bc8a:	460b      	mov	r3, r1
 800bc8c:	4630      	mov	r0, r6
 800bc8e:	4639      	mov	r1, r7
 800bc90:	f7f4 fafe 	bl	8000290 <__aeabi_dsub>
 800bc94:	4606      	mov	r6, r0
 800bc96:	460f      	mov	r7, r1
 800bc98:	4620      	mov	r0, r4
 800bc9a:	4629      	mov	r1, r5
 800bc9c:	ec53 2b19 	vmov	r2, r3, d9
 800bca0:	f7f4 faf6 	bl	8000290 <__aeabi_dsub>
 800bca4:	4602      	mov	r2, r0
 800bca6:	460b      	mov	r3, r1
 800bca8:	4650      	mov	r0, sl
 800bcaa:	4659      	mov	r1, fp
 800bcac:	f7f4 faf0 	bl	8000290 <__aeabi_dsub>
 800bcb0:	4642      	mov	r2, r8
 800bcb2:	464b      	mov	r3, r9
 800bcb4:	f7f4 fca4 	bl	8000600 <__aeabi_dmul>
 800bcb8:	4602      	mov	r2, r0
 800bcba:	460b      	mov	r3, r1
 800bcbc:	4630      	mov	r0, r6
 800bcbe:	4639      	mov	r1, r7
 800bcc0:	f7f4 fae6 	bl	8000290 <__aeabi_dsub>
 800bcc4:	ec53 2b1a 	vmov	r2, r3, d10
 800bcc8:	f7f4 fc9a 	bl	8000600 <__aeabi_dmul>
 800bccc:	ec53 2b18 	vmov	r2, r3, d8
 800bcd0:	ec41 0b19 	vmov	d9, r0, r1
 800bcd4:	ec51 0b18 	vmov	r0, r1, d8
 800bcd8:	f7f4 fc92 	bl	8000600 <__aeabi_dmul>
 800bcdc:	4604      	mov	r4, r0
 800bcde:	460d      	mov	r5, r1
 800bce0:	a37b      	add	r3, pc, #492	; (adr r3, 800bed0 <__ieee754_pow+0x708>)
 800bce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce6:	f7f4 fc8b 	bl	8000600 <__aeabi_dmul>
 800bcea:	a37b      	add	r3, pc, #492	; (adr r3, 800bed8 <__ieee754_pow+0x710>)
 800bcec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf0:	f7f4 fad0 	bl	8000294 <__adddf3>
 800bcf4:	4622      	mov	r2, r4
 800bcf6:	462b      	mov	r3, r5
 800bcf8:	f7f4 fc82 	bl	8000600 <__aeabi_dmul>
 800bcfc:	a378      	add	r3, pc, #480	; (adr r3, 800bee0 <__ieee754_pow+0x718>)
 800bcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd02:	f7f4 fac7 	bl	8000294 <__adddf3>
 800bd06:	4622      	mov	r2, r4
 800bd08:	462b      	mov	r3, r5
 800bd0a:	f7f4 fc79 	bl	8000600 <__aeabi_dmul>
 800bd0e:	a376      	add	r3, pc, #472	; (adr r3, 800bee8 <__ieee754_pow+0x720>)
 800bd10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd14:	f7f4 fabe 	bl	8000294 <__adddf3>
 800bd18:	4622      	mov	r2, r4
 800bd1a:	462b      	mov	r3, r5
 800bd1c:	f7f4 fc70 	bl	8000600 <__aeabi_dmul>
 800bd20:	a373      	add	r3, pc, #460	; (adr r3, 800bef0 <__ieee754_pow+0x728>)
 800bd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd26:	f7f4 fab5 	bl	8000294 <__adddf3>
 800bd2a:	4622      	mov	r2, r4
 800bd2c:	462b      	mov	r3, r5
 800bd2e:	f7f4 fc67 	bl	8000600 <__aeabi_dmul>
 800bd32:	a371      	add	r3, pc, #452	; (adr r3, 800bef8 <__ieee754_pow+0x730>)
 800bd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd38:	f7f4 faac 	bl	8000294 <__adddf3>
 800bd3c:	4606      	mov	r6, r0
 800bd3e:	460f      	mov	r7, r1
 800bd40:	4622      	mov	r2, r4
 800bd42:	462b      	mov	r3, r5
 800bd44:	4620      	mov	r0, r4
 800bd46:	4629      	mov	r1, r5
 800bd48:	f7f4 fc5a 	bl	8000600 <__aeabi_dmul>
 800bd4c:	4602      	mov	r2, r0
 800bd4e:	460b      	mov	r3, r1
 800bd50:	4630      	mov	r0, r6
 800bd52:	4639      	mov	r1, r7
 800bd54:	f7f4 fc54 	bl	8000600 <__aeabi_dmul>
 800bd58:	4642      	mov	r2, r8
 800bd5a:	4604      	mov	r4, r0
 800bd5c:	460d      	mov	r5, r1
 800bd5e:	464b      	mov	r3, r9
 800bd60:	ec51 0b18 	vmov	r0, r1, d8
 800bd64:	f7f4 fa96 	bl	8000294 <__adddf3>
 800bd68:	ec53 2b19 	vmov	r2, r3, d9
 800bd6c:	f7f4 fc48 	bl	8000600 <__aeabi_dmul>
 800bd70:	4622      	mov	r2, r4
 800bd72:	462b      	mov	r3, r5
 800bd74:	f7f4 fa8e 	bl	8000294 <__adddf3>
 800bd78:	4642      	mov	r2, r8
 800bd7a:	4682      	mov	sl, r0
 800bd7c:	468b      	mov	fp, r1
 800bd7e:	464b      	mov	r3, r9
 800bd80:	4640      	mov	r0, r8
 800bd82:	4649      	mov	r1, r9
 800bd84:	f7f4 fc3c 	bl	8000600 <__aeabi_dmul>
 800bd88:	2200      	movs	r2, #0
 800bd8a:	4b6b      	ldr	r3, [pc, #428]	; (800bf38 <__ieee754_pow+0x770>)
 800bd8c:	4606      	mov	r6, r0
 800bd8e:	460f      	mov	r7, r1
 800bd90:	f7f4 fa80 	bl	8000294 <__adddf3>
 800bd94:	4652      	mov	r2, sl
 800bd96:	465b      	mov	r3, fp
 800bd98:	f7f4 fa7c 	bl	8000294 <__adddf3>
 800bd9c:	2000      	movs	r0, #0
 800bd9e:	460d      	mov	r5, r1
 800bda0:	460b      	mov	r3, r1
 800bda2:	4604      	mov	r4, r0
 800bda4:	4602      	mov	r2, r0
 800bda6:	4649      	mov	r1, r9
 800bda8:	4640      	mov	r0, r8
 800bdaa:	f7f4 fc29 	bl	8000600 <__aeabi_dmul>
 800bdae:	2200      	movs	r2, #0
 800bdb0:	4680      	mov	r8, r0
 800bdb2:	4689      	mov	r9, r1
 800bdb4:	4b60      	ldr	r3, [pc, #384]	; (800bf38 <__ieee754_pow+0x770>)
 800bdb6:	4620      	mov	r0, r4
 800bdb8:	4629      	mov	r1, r5
 800bdba:	f7f4 fa69 	bl	8000290 <__aeabi_dsub>
 800bdbe:	4632      	mov	r2, r6
 800bdc0:	463b      	mov	r3, r7
 800bdc2:	f7f4 fa65 	bl	8000290 <__aeabi_dsub>
 800bdc6:	4602      	mov	r2, r0
 800bdc8:	460b      	mov	r3, r1
 800bdca:	4650      	mov	r0, sl
 800bdcc:	4659      	mov	r1, fp
 800bdce:	f7f4 fa5f 	bl	8000290 <__aeabi_dsub>
 800bdd2:	ec53 2b18 	vmov	r2, r3, d8
 800bdd6:	f7f4 fc13 	bl	8000600 <__aeabi_dmul>
 800bdda:	4606      	mov	r6, r0
 800bddc:	460f      	mov	r7, r1
 800bdde:	4622      	mov	r2, r4
 800bde0:	462b      	mov	r3, r5
 800bde2:	ec51 0b19 	vmov	r0, r1, d9
 800bde6:	f7f4 fc0b 	bl	8000600 <__aeabi_dmul>
 800bdea:	4602      	mov	r2, r0
 800bdec:	460b      	mov	r3, r1
 800bdee:	4630      	mov	r0, r6
 800bdf0:	4639      	mov	r1, r7
 800bdf2:	f7f4 fa4f 	bl	8000294 <__adddf3>
 800bdf6:	4606      	mov	r6, r0
 800bdf8:	460f      	mov	r7, r1
 800bdfa:	4602      	mov	r2, r0
 800bdfc:	460b      	mov	r3, r1
 800bdfe:	4640      	mov	r0, r8
 800be00:	4649      	mov	r1, r9
 800be02:	f7f4 fa47 	bl	8000294 <__adddf3>
 800be06:	2000      	movs	r0, #0
 800be08:	460d      	mov	r5, r1
 800be0a:	4604      	mov	r4, r0
 800be0c:	a33c      	add	r3, pc, #240	; (adr r3, 800bf00 <__ieee754_pow+0x738>)
 800be0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be12:	f7f4 fbf5 	bl	8000600 <__aeabi_dmul>
 800be16:	4642      	mov	r2, r8
 800be18:	464b      	mov	r3, r9
 800be1a:	ec41 0b18 	vmov	d8, r0, r1
 800be1e:	4620      	mov	r0, r4
 800be20:	4629      	mov	r1, r5
 800be22:	f7f4 fa35 	bl	8000290 <__aeabi_dsub>
 800be26:	4602      	mov	r2, r0
 800be28:	460b      	mov	r3, r1
 800be2a:	4630      	mov	r0, r6
 800be2c:	4639      	mov	r1, r7
 800be2e:	f7f4 fa2f 	bl	8000290 <__aeabi_dsub>
 800be32:	a335      	add	r3, pc, #212	; (adr r3, 800bf08 <__ieee754_pow+0x740>)
 800be34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be38:	f7f4 fbe2 	bl	8000600 <__aeabi_dmul>
 800be3c:	4606      	mov	r6, r0
 800be3e:	460f      	mov	r7, r1
 800be40:	4620      	mov	r0, r4
 800be42:	4629      	mov	r1, r5
 800be44:	a332      	add	r3, pc, #200	; (adr r3, 800bf10 <__ieee754_pow+0x748>)
 800be46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4a:	f7f4 fbd9 	bl	8000600 <__aeabi_dmul>
 800be4e:	4602      	mov	r2, r0
 800be50:	460b      	mov	r3, r1
 800be52:	4630      	mov	r0, r6
 800be54:	4639      	mov	r1, r7
 800be56:	f7f4 fa1d 	bl	8000294 <__adddf3>
 800be5a:	9a07      	ldr	r2, [sp, #28]
 800be5c:	4b37      	ldr	r3, [pc, #220]	; (800bf3c <__ieee754_pow+0x774>)
 800be5e:	4413      	add	r3, r2
 800be60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be64:	f7f4 fa16 	bl	8000294 <__adddf3>
 800be68:	4682      	mov	sl, r0
 800be6a:	9805      	ldr	r0, [sp, #20]
 800be6c:	468b      	mov	fp, r1
 800be6e:	f7f4 fb5d 	bl	800052c <__aeabi_i2d>
 800be72:	9a07      	ldr	r2, [sp, #28]
 800be74:	4b32      	ldr	r3, [pc, #200]	; (800bf40 <__ieee754_pow+0x778>)
 800be76:	4606      	mov	r6, r0
 800be78:	460f      	mov	r7, r1
 800be7a:	4413      	add	r3, r2
 800be7c:	4652      	mov	r2, sl
 800be7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800be82:	ec51 0b18 	vmov	r0, r1, d8
 800be86:	465b      	mov	r3, fp
 800be88:	f7f4 fa04 	bl	8000294 <__adddf3>
 800be8c:	4642      	mov	r2, r8
 800be8e:	464b      	mov	r3, r9
 800be90:	f7f4 fa00 	bl	8000294 <__adddf3>
 800be94:	4632      	mov	r2, r6
 800be96:	463b      	mov	r3, r7
 800be98:	f7f4 f9fc 	bl	8000294 <__adddf3>
 800be9c:	2000      	movs	r0, #0
 800be9e:	4632      	mov	r2, r6
 800bea0:	463b      	mov	r3, r7
 800bea2:	4604      	mov	r4, r0
 800bea4:	460d      	mov	r5, r1
 800bea6:	f7f4 f9f3 	bl	8000290 <__aeabi_dsub>
 800beaa:	4642      	mov	r2, r8
 800beac:	464b      	mov	r3, r9
 800beae:	f7f4 f9ef 	bl	8000290 <__aeabi_dsub>
 800beb2:	ec53 2b18 	vmov	r2, r3, d8
 800beb6:	f7f4 f9eb 	bl	8000290 <__aeabi_dsub>
 800beba:	4602      	mov	r2, r0
 800bebc:	460b      	mov	r3, r1
 800bebe:	4650      	mov	r0, sl
 800bec0:	4659      	mov	r1, fp
 800bec2:	e610      	b.n	800bae6 <__ieee754_pow+0x31e>
 800bec4:	2401      	movs	r4, #1
 800bec6:	e6a1      	b.n	800bc0c <__ieee754_pow+0x444>
 800bec8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800bf18 <__ieee754_pow+0x750>
 800becc:	e617      	b.n	800bafe <__ieee754_pow+0x336>
 800bece:	bf00      	nop
 800bed0:	4a454eef 	.word	0x4a454eef
 800bed4:	3fca7e28 	.word	0x3fca7e28
 800bed8:	93c9db65 	.word	0x93c9db65
 800bedc:	3fcd864a 	.word	0x3fcd864a
 800bee0:	a91d4101 	.word	0xa91d4101
 800bee4:	3fd17460 	.word	0x3fd17460
 800bee8:	518f264d 	.word	0x518f264d
 800beec:	3fd55555 	.word	0x3fd55555
 800bef0:	db6fabff 	.word	0xdb6fabff
 800bef4:	3fdb6db6 	.word	0x3fdb6db6
 800bef8:	33333303 	.word	0x33333303
 800befc:	3fe33333 	.word	0x3fe33333
 800bf00:	e0000000 	.word	0xe0000000
 800bf04:	3feec709 	.word	0x3feec709
 800bf08:	dc3a03fd 	.word	0xdc3a03fd
 800bf0c:	3feec709 	.word	0x3feec709
 800bf10:	145b01f5 	.word	0x145b01f5
 800bf14:	be3e2fe0 	.word	0xbe3e2fe0
 800bf18:	00000000 	.word	0x00000000
 800bf1c:	3ff00000 	.word	0x3ff00000
 800bf20:	7ff00000 	.word	0x7ff00000
 800bf24:	43400000 	.word	0x43400000
 800bf28:	0003988e 	.word	0x0003988e
 800bf2c:	000bb679 	.word	0x000bb679
 800bf30:	0800c7d8 	.word	0x0800c7d8
 800bf34:	3ff00000 	.word	0x3ff00000
 800bf38:	40080000 	.word	0x40080000
 800bf3c:	0800c7f8 	.word	0x0800c7f8
 800bf40:	0800c7e8 	.word	0x0800c7e8
 800bf44:	a3b5      	add	r3, pc, #724	; (adr r3, 800c21c <__ieee754_pow+0xa54>)
 800bf46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4a:	4640      	mov	r0, r8
 800bf4c:	4649      	mov	r1, r9
 800bf4e:	f7f4 f9a1 	bl	8000294 <__adddf3>
 800bf52:	4622      	mov	r2, r4
 800bf54:	462b      	mov	r3, r5
 800bf56:	ec41 0b1a 	vmov	d10, r0, r1
 800bf5a:	4630      	mov	r0, r6
 800bf5c:	4639      	mov	r1, r7
 800bf5e:	f7f4 f997 	bl	8000290 <__aeabi_dsub>
 800bf62:	4602      	mov	r2, r0
 800bf64:	460b      	mov	r3, r1
 800bf66:	ec51 0b1a 	vmov	r0, r1, d10
 800bf6a:	f7f4 fdd9 	bl	8000b20 <__aeabi_dcmpgt>
 800bf6e:	2800      	cmp	r0, #0
 800bf70:	f47f ae04 	bne.w	800bb7c <__ieee754_pow+0x3b4>
 800bf74:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bf78:	4aa3      	ldr	r2, [pc, #652]	; (800c208 <__ieee754_pow+0xa40>)
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	f340 8109 	ble.w	800c192 <__ieee754_pow+0x9ca>
 800bf80:	151b      	asrs	r3, r3, #20
 800bf82:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800bf86:	4ea1      	ldr	r6, [pc, #644]	; (800c20c <__ieee754_pow+0xa44>)
 800bf88:	2000      	movs	r0, #0
 800bf8a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bf8e:	f1bb 0f00 	cmp.w	fp, #0
 800bf92:	fa4a f303 	asr.w	r3, sl, r3
 800bf96:	445b      	add	r3, fp
 800bf98:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800bf9c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800bfa0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800bfa4:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800bfa8:	fa46 f602 	asr.w	r6, r6, r2
 800bfac:	f1c2 0214 	rsb	r2, r2, #20
 800bfb0:	ea23 0106 	bic.w	r1, r3, r6
 800bfb4:	fa4a fa02 	asr.w	sl, sl, r2
 800bfb8:	4602      	mov	r2, r0
 800bfba:	4620      	mov	r0, r4
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	4629      	mov	r1, r5
 800bfc0:	bfb8      	it	lt
 800bfc2:	f1ca 0a00 	rsblt	sl, sl, #0
 800bfc6:	f7f4 f963 	bl	8000290 <__aeabi_dsub>
 800bfca:	ec41 0b19 	vmov	d9, r0, r1
 800bfce:	4642      	mov	r2, r8
 800bfd0:	464b      	mov	r3, r9
 800bfd2:	ec51 0b19 	vmov	r0, r1, d9
 800bfd6:	f7f4 f95d 	bl	8000294 <__adddf3>
 800bfda:	2000      	movs	r0, #0
 800bfdc:	460d      	mov	r5, r1
 800bfde:	4604      	mov	r4, r0
 800bfe0:	a379      	add	r3, pc, #484	; (adr r3, 800c1c8 <__ieee754_pow+0xa00>)
 800bfe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfe6:	f7f4 fb0b 	bl	8000600 <__aeabi_dmul>
 800bfea:	4606      	mov	r6, r0
 800bfec:	460f      	mov	r7, r1
 800bfee:	4620      	mov	r0, r4
 800bff0:	4629      	mov	r1, r5
 800bff2:	ec53 2b19 	vmov	r2, r3, d9
 800bff6:	f7f4 f94b 	bl	8000290 <__aeabi_dsub>
 800bffa:	4602      	mov	r2, r0
 800bffc:	460b      	mov	r3, r1
 800bffe:	4640      	mov	r0, r8
 800c000:	4649      	mov	r1, r9
 800c002:	f7f4 f945 	bl	8000290 <__aeabi_dsub>
 800c006:	a372      	add	r3, pc, #456	; (adr r3, 800c1d0 <__ieee754_pow+0xa08>)
 800c008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00c:	f7f4 faf8 	bl	8000600 <__aeabi_dmul>
 800c010:	4680      	mov	r8, r0
 800c012:	4689      	mov	r9, r1
 800c014:	4620      	mov	r0, r4
 800c016:	4629      	mov	r1, r5
 800c018:	a36f      	add	r3, pc, #444	; (adr r3, 800c1d8 <__ieee754_pow+0xa10>)
 800c01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c01e:	f7f4 faef 	bl	8000600 <__aeabi_dmul>
 800c022:	4602      	mov	r2, r0
 800c024:	460b      	mov	r3, r1
 800c026:	4640      	mov	r0, r8
 800c028:	4649      	mov	r1, r9
 800c02a:	f7f4 f933 	bl	8000294 <__adddf3>
 800c02e:	4604      	mov	r4, r0
 800c030:	460d      	mov	r5, r1
 800c032:	4602      	mov	r2, r0
 800c034:	460b      	mov	r3, r1
 800c036:	4630      	mov	r0, r6
 800c038:	4639      	mov	r1, r7
 800c03a:	f7f4 f92b 	bl	8000294 <__adddf3>
 800c03e:	4632      	mov	r2, r6
 800c040:	4680      	mov	r8, r0
 800c042:	4689      	mov	r9, r1
 800c044:	463b      	mov	r3, r7
 800c046:	f7f4 f923 	bl	8000290 <__aeabi_dsub>
 800c04a:	4602      	mov	r2, r0
 800c04c:	460b      	mov	r3, r1
 800c04e:	4620      	mov	r0, r4
 800c050:	4629      	mov	r1, r5
 800c052:	f7f4 f91d 	bl	8000290 <__aeabi_dsub>
 800c056:	4642      	mov	r2, r8
 800c058:	4606      	mov	r6, r0
 800c05a:	460f      	mov	r7, r1
 800c05c:	464b      	mov	r3, r9
 800c05e:	4640      	mov	r0, r8
 800c060:	4649      	mov	r1, r9
 800c062:	f7f4 facd 	bl	8000600 <__aeabi_dmul>
 800c066:	4604      	mov	r4, r0
 800c068:	460d      	mov	r5, r1
 800c06a:	a35d      	add	r3, pc, #372	; (adr r3, 800c1e0 <__ieee754_pow+0xa18>)
 800c06c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c070:	f7f4 fac6 	bl	8000600 <__aeabi_dmul>
 800c074:	a35c      	add	r3, pc, #368	; (adr r3, 800c1e8 <__ieee754_pow+0xa20>)
 800c076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c07a:	f7f4 f909 	bl	8000290 <__aeabi_dsub>
 800c07e:	4622      	mov	r2, r4
 800c080:	462b      	mov	r3, r5
 800c082:	f7f4 fabd 	bl	8000600 <__aeabi_dmul>
 800c086:	a35a      	add	r3, pc, #360	; (adr r3, 800c1f0 <__ieee754_pow+0xa28>)
 800c088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c08c:	f7f4 f902 	bl	8000294 <__adddf3>
 800c090:	4622      	mov	r2, r4
 800c092:	462b      	mov	r3, r5
 800c094:	f7f4 fab4 	bl	8000600 <__aeabi_dmul>
 800c098:	a357      	add	r3, pc, #348	; (adr r3, 800c1f8 <__ieee754_pow+0xa30>)
 800c09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c09e:	f7f4 f8f7 	bl	8000290 <__aeabi_dsub>
 800c0a2:	4622      	mov	r2, r4
 800c0a4:	462b      	mov	r3, r5
 800c0a6:	f7f4 faab 	bl	8000600 <__aeabi_dmul>
 800c0aa:	a355      	add	r3, pc, #340	; (adr r3, 800c200 <__ieee754_pow+0xa38>)
 800c0ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b0:	f7f4 f8f0 	bl	8000294 <__adddf3>
 800c0b4:	4622      	mov	r2, r4
 800c0b6:	462b      	mov	r3, r5
 800c0b8:	f7f4 faa2 	bl	8000600 <__aeabi_dmul>
 800c0bc:	4602      	mov	r2, r0
 800c0be:	460b      	mov	r3, r1
 800c0c0:	4640      	mov	r0, r8
 800c0c2:	4649      	mov	r1, r9
 800c0c4:	f7f4 f8e4 	bl	8000290 <__aeabi_dsub>
 800c0c8:	4604      	mov	r4, r0
 800c0ca:	460d      	mov	r5, r1
 800c0cc:	4602      	mov	r2, r0
 800c0ce:	460b      	mov	r3, r1
 800c0d0:	4640      	mov	r0, r8
 800c0d2:	4649      	mov	r1, r9
 800c0d4:	f7f4 fa94 	bl	8000600 <__aeabi_dmul>
 800c0d8:	2200      	movs	r2, #0
 800c0da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c0de:	ec41 0b19 	vmov	d9, r0, r1
 800c0e2:	4620      	mov	r0, r4
 800c0e4:	4629      	mov	r1, r5
 800c0e6:	f7f4 f8d3 	bl	8000290 <__aeabi_dsub>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	460b      	mov	r3, r1
 800c0ee:	ec51 0b19 	vmov	r0, r1, d9
 800c0f2:	f7f4 fbaf 	bl	8000854 <__aeabi_ddiv>
 800c0f6:	4632      	mov	r2, r6
 800c0f8:	4604      	mov	r4, r0
 800c0fa:	460d      	mov	r5, r1
 800c0fc:	463b      	mov	r3, r7
 800c0fe:	4640      	mov	r0, r8
 800c100:	4649      	mov	r1, r9
 800c102:	f7f4 fa7d 	bl	8000600 <__aeabi_dmul>
 800c106:	4632      	mov	r2, r6
 800c108:	463b      	mov	r3, r7
 800c10a:	f7f4 f8c3 	bl	8000294 <__adddf3>
 800c10e:	4602      	mov	r2, r0
 800c110:	460b      	mov	r3, r1
 800c112:	4620      	mov	r0, r4
 800c114:	4629      	mov	r1, r5
 800c116:	f7f4 f8bb 	bl	8000290 <__aeabi_dsub>
 800c11a:	4642      	mov	r2, r8
 800c11c:	464b      	mov	r3, r9
 800c11e:	f7f4 f8b7 	bl	8000290 <__aeabi_dsub>
 800c122:	460b      	mov	r3, r1
 800c124:	4602      	mov	r2, r0
 800c126:	493a      	ldr	r1, [pc, #232]	; (800c210 <__ieee754_pow+0xa48>)
 800c128:	2000      	movs	r0, #0
 800c12a:	f7f4 f8b1 	bl	8000290 <__aeabi_dsub>
 800c12e:	ec41 0b10 	vmov	d0, r0, r1
 800c132:	ee10 3a90 	vmov	r3, s1
 800c136:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c13a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c13e:	da2b      	bge.n	800c198 <__ieee754_pow+0x9d0>
 800c140:	4650      	mov	r0, sl
 800c142:	f000 f96d 	bl	800c420 <scalbn>
 800c146:	ec51 0b10 	vmov	r0, r1, d0
 800c14a:	ec53 2b18 	vmov	r2, r3, d8
 800c14e:	f7ff bbec 	b.w	800b92a <__ieee754_pow+0x162>
 800c152:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c156:	4b2f      	ldr	r3, [pc, #188]	; (800c214 <__ieee754_pow+0xa4c>)
 800c158:	429e      	cmp	r6, r3
 800c15a:	f77f af0b 	ble.w	800bf74 <__ieee754_pow+0x7ac>
 800c15e:	4b2e      	ldr	r3, [pc, #184]	; (800c218 <__ieee754_pow+0xa50>)
 800c160:	440b      	add	r3, r1
 800c162:	4303      	orrs	r3, r0
 800c164:	d009      	beq.n	800c17a <__ieee754_pow+0x9b2>
 800c166:	2200      	movs	r2, #0
 800c168:	2300      	movs	r3, #0
 800c16a:	ec51 0b18 	vmov	r0, r1, d8
 800c16e:	f7f4 fcb9 	bl	8000ae4 <__aeabi_dcmplt>
 800c172:	3800      	subs	r0, #0
 800c174:	bf18      	it	ne
 800c176:	2001      	movne	r0, #1
 800c178:	e446      	b.n	800ba08 <__ieee754_pow+0x240>
 800c17a:	4622      	mov	r2, r4
 800c17c:	462b      	mov	r3, r5
 800c17e:	f7f4 f887 	bl	8000290 <__aeabi_dsub>
 800c182:	4642      	mov	r2, r8
 800c184:	464b      	mov	r3, r9
 800c186:	f7f4 fcc1 	bl	8000b0c <__aeabi_dcmpge>
 800c18a:	2800      	cmp	r0, #0
 800c18c:	f43f aef2 	beq.w	800bf74 <__ieee754_pow+0x7ac>
 800c190:	e7e9      	b.n	800c166 <__ieee754_pow+0x99e>
 800c192:	f04f 0a00 	mov.w	sl, #0
 800c196:	e71a      	b.n	800bfce <__ieee754_pow+0x806>
 800c198:	ec51 0b10 	vmov	r0, r1, d0
 800c19c:	4619      	mov	r1, r3
 800c19e:	e7d4      	b.n	800c14a <__ieee754_pow+0x982>
 800c1a0:	2000      	movs	r0, #0
 800c1a2:	491b      	ldr	r1, [pc, #108]	; (800c210 <__ieee754_pow+0xa48>)
 800c1a4:	f7ff bb2f 	b.w	800b806 <__ieee754_pow+0x3e>
 800c1a8:	2000      	movs	r0, #0
 800c1aa:	2100      	movs	r1, #0
 800c1ac:	f7ff bb2b 	b.w	800b806 <__ieee754_pow+0x3e>
 800c1b0:	4630      	mov	r0, r6
 800c1b2:	4639      	mov	r1, r7
 800c1b4:	f7ff bb27 	b.w	800b806 <__ieee754_pow+0x3e>
 800c1b8:	9204      	str	r2, [sp, #16]
 800c1ba:	f7ff bb79 	b.w	800b8b0 <__ieee754_pow+0xe8>
 800c1be:	2300      	movs	r3, #0
 800c1c0:	f7ff bb63 	b.w	800b88a <__ieee754_pow+0xc2>
 800c1c4:	f3af 8000 	nop.w
 800c1c8:	00000000 	.word	0x00000000
 800c1cc:	3fe62e43 	.word	0x3fe62e43
 800c1d0:	fefa39ef 	.word	0xfefa39ef
 800c1d4:	3fe62e42 	.word	0x3fe62e42
 800c1d8:	0ca86c39 	.word	0x0ca86c39
 800c1dc:	be205c61 	.word	0xbe205c61
 800c1e0:	72bea4d0 	.word	0x72bea4d0
 800c1e4:	3e663769 	.word	0x3e663769
 800c1e8:	c5d26bf1 	.word	0xc5d26bf1
 800c1ec:	3ebbbd41 	.word	0x3ebbbd41
 800c1f0:	af25de2c 	.word	0xaf25de2c
 800c1f4:	3f11566a 	.word	0x3f11566a
 800c1f8:	16bebd93 	.word	0x16bebd93
 800c1fc:	3f66c16c 	.word	0x3f66c16c
 800c200:	5555553e 	.word	0x5555553e
 800c204:	3fc55555 	.word	0x3fc55555
 800c208:	3fe00000 	.word	0x3fe00000
 800c20c:	000fffff 	.word	0x000fffff
 800c210:	3ff00000 	.word	0x3ff00000
 800c214:	4090cbff 	.word	0x4090cbff
 800c218:	3f6f3400 	.word	0x3f6f3400
 800c21c:	652b82fe 	.word	0x652b82fe
 800c220:	3c971547 	.word	0x3c971547

0800c224 <__ieee754_sqrt>:
 800c224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c228:	4e59      	ldr	r6, [pc, #356]	; (800c390 <__ieee754_sqrt+0x16c>)
 800c22a:	ee10 0a10 	vmov	r0, s0
 800c22e:	ee10 3a10 	vmov	r3, s0
 800c232:	ec55 4b10 	vmov	r4, r5, d0
 800c236:	43ae      	bics	r6, r5
 800c238:	462a      	mov	r2, r5
 800c23a:	4629      	mov	r1, r5
 800c23c:	d110      	bne.n	800c260 <__ieee754_sqrt+0x3c>
 800c23e:	ee10 2a10 	vmov	r2, s0
 800c242:	462b      	mov	r3, r5
 800c244:	f7f4 f9dc 	bl	8000600 <__aeabi_dmul>
 800c248:	4602      	mov	r2, r0
 800c24a:	460b      	mov	r3, r1
 800c24c:	4620      	mov	r0, r4
 800c24e:	4629      	mov	r1, r5
 800c250:	f7f4 f820 	bl	8000294 <__adddf3>
 800c254:	4604      	mov	r4, r0
 800c256:	460d      	mov	r5, r1
 800c258:	ec45 4b10 	vmov	d0, r4, r5
 800c25c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c260:	2d00      	cmp	r5, #0
 800c262:	dc10      	bgt.n	800c286 <__ieee754_sqrt+0x62>
 800c264:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c268:	4330      	orrs	r0, r6
 800c26a:	d0f5      	beq.n	800c258 <__ieee754_sqrt+0x34>
 800c26c:	b15d      	cbz	r5, 800c286 <__ieee754_sqrt+0x62>
 800c26e:	ee10 2a10 	vmov	r2, s0
 800c272:	462b      	mov	r3, r5
 800c274:	ee10 0a10 	vmov	r0, s0
 800c278:	f7f4 f80a 	bl	8000290 <__aeabi_dsub>
 800c27c:	4602      	mov	r2, r0
 800c27e:	460b      	mov	r3, r1
 800c280:	f7f4 fae8 	bl	8000854 <__aeabi_ddiv>
 800c284:	e7e6      	b.n	800c254 <__ieee754_sqrt+0x30>
 800c286:	1512      	asrs	r2, r2, #20
 800c288:	d07a      	beq.n	800c380 <__ieee754_sqrt+0x15c>
 800c28a:	07d4      	lsls	r4, r2, #31
 800c28c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c290:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c294:	f04f 0400 	mov.w	r4, #0
 800c298:	bf58      	it	pl
 800c29a:	0fda      	lsrpl	r2, r3, #31
 800c29c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c2a0:	bf58      	it	pl
 800c2a2:	005b      	lslpl	r3, r3, #1
 800c2a4:	f04f 0516 	mov.w	r5, #22
 800c2a8:	bf58      	it	pl
 800c2aa:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c2ae:	4620      	mov	r0, r4
 800c2b0:	0fda      	lsrs	r2, r3, #31
 800c2b2:	107f      	asrs	r7, r7, #1
 800c2b4:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c2b8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c2bc:	005b      	lsls	r3, r3, #1
 800c2be:	1886      	adds	r6, r0, r2
 800c2c0:	428e      	cmp	r6, r1
 800c2c2:	bfde      	ittt	le
 800c2c4:	1b89      	suble	r1, r1, r6
 800c2c6:	18b0      	addle	r0, r6, r2
 800c2c8:	18a4      	addle	r4, r4, r2
 800c2ca:	3d01      	subs	r5, #1
 800c2cc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c2d0:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c2d4:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c2d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c2dc:	d1ef      	bne.n	800c2be <__ieee754_sqrt+0x9a>
 800c2de:	462a      	mov	r2, r5
 800c2e0:	f04f 0e20 	mov.w	lr, #32
 800c2e4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c2e8:	4281      	cmp	r1, r0
 800c2ea:	eb06 0c05 	add.w	ip, r6, r5
 800c2ee:	dc02      	bgt.n	800c2f6 <__ieee754_sqrt+0xd2>
 800c2f0:	d113      	bne.n	800c31a <__ieee754_sqrt+0xf6>
 800c2f2:	459c      	cmp	ip, r3
 800c2f4:	d811      	bhi.n	800c31a <__ieee754_sqrt+0xf6>
 800c2f6:	f1bc 0f00 	cmp.w	ip, #0
 800c2fa:	eb0c 0506 	add.w	r5, ip, r6
 800c2fe:	da44      	bge.n	800c38a <__ieee754_sqrt+0x166>
 800c300:	2d00      	cmp	r5, #0
 800c302:	db42      	blt.n	800c38a <__ieee754_sqrt+0x166>
 800c304:	f100 0801 	add.w	r8, r0, #1
 800c308:	1a09      	subs	r1, r1, r0
 800c30a:	459c      	cmp	ip, r3
 800c30c:	4432      	add	r2, r6
 800c30e:	eba3 030c 	sub.w	r3, r3, ip
 800c312:	bf88      	it	hi
 800c314:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800c318:	4640      	mov	r0, r8
 800c31a:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c31e:	f1be 0e01 	subs.w	lr, lr, #1
 800c322:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c326:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c32a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c32e:	d1db      	bne.n	800c2e8 <__ieee754_sqrt+0xc4>
 800c330:	430b      	orrs	r3, r1
 800c332:	d006      	beq.n	800c342 <__ieee754_sqrt+0x11e>
 800c334:	1c50      	adds	r0, r2, #1
 800c336:	bf13      	iteet	ne
 800c338:	3201      	addne	r2, #1
 800c33a:	3401      	addeq	r4, #1
 800c33c:	4672      	moveq	r2, lr
 800c33e:	f022 0201 	bicne.w	r2, r2, #1
 800c342:	1063      	asrs	r3, r4, #1
 800c344:	07e1      	lsls	r1, r4, #31
 800c346:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c34a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c34e:	bf48      	it	mi
 800c350:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c354:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c358:	4614      	mov	r4, r2
 800c35a:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c35e:	e77b      	b.n	800c258 <__ieee754_sqrt+0x34>
 800c360:	0ad9      	lsrs	r1, r3, #11
 800c362:	3815      	subs	r0, #21
 800c364:	055b      	lsls	r3, r3, #21
 800c366:	2900      	cmp	r1, #0
 800c368:	d0fa      	beq.n	800c360 <__ieee754_sqrt+0x13c>
 800c36a:	02cd      	lsls	r5, r1, #11
 800c36c:	d50a      	bpl.n	800c384 <__ieee754_sqrt+0x160>
 800c36e:	f1c2 0420 	rsb	r4, r2, #32
 800c372:	1e55      	subs	r5, r2, #1
 800c374:	fa23 f404 	lsr.w	r4, r3, r4
 800c378:	4093      	lsls	r3, r2
 800c37a:	1b42      	subs	r2, r0, r5
 800c37c:	4321      	orrs	r1, r4
 800c37e:	e784      	b.n	800c28a <__ieee754_sqrt+0x66>
 800c380:	4610      	mov	r0, r2
 800c382:	e7f0      	b.n	800c366 <__ieee754_sqrt+0x142>
 800c384:	0049      	lsls	r1, r1, #1
 800c386:	3201      	adds	r2, #1
 800c388:	e7ef      	b.n	800c36a <__ieee754_sqrt+0x146>
 800c38a:	4680      	mov	r8, r0
 800c38c:	e7bc      	b.n	800c308 <__ieee754_sqrt+0xe4>
 800c38e:	bf00      	nop
 800c390:	7ff00000 	.word	0x7ff00000

0800c394 <with_errno>:
 800c394:	b570      	push	{r4, r5, r6, lr}
 800c396:	4604      	mov	r4, r0
 800c398:	460d      	mov	r5, r1
 800c39a:	4616      	mov	r6, r2
 800c39c:	f7ff f910 	bl	800b5c0 <__errno>
 800c3a0:	4629      	mov	r1, r5
 800c3a2:	6006      	str	r6, [r0, #0]
 800c3a4:	4620      	mov	r0, r4
 800c3a6:	bd70      	pop	{r4, r5, r6, pc}

0800c3a8 <xflow>:
 800c3a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3aa:	4614      	mov	r4, r2
 800c3ac:	461d      	mov	r5, r3
 800c3ae:	b108      	cbz	r0, 800c3b4 <xflow+0xc>
 800c3b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c3b4:	4620      	mov	r0, r4
 800c3b6:	4629      	mov	r1, r5
 800c3b8:	e9cd 2300 	strd	r2, r3, [sp]
 800c3bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c3c0:	f7f4 f91e 	bl	8000600 <__aeabi_dmul>
 800c3c4:	2222      	movs	r2, #34	; 0x22
 800c3c6:	b003      	add	sp, #12
 800c3c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c3cc:	f7ff bfe2 	b.w	800c394 <with_errno>

0800c3d0 <__math_uflow>:
 800c3d0:	b508      	push	{r3, lr}
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c3d8:	f7ff ffe6 	bl	800c3a8 <xflow>
 800c3dc:	ec41 0b10 	vmov	d0, r0, r1
 800c3e0:	bd08      	pop	{r3, pc}

0800c3e2 <__math_oflow>:
 800c3e2:	b508      	push	{r3, lr}
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c3ea:	f7ff ffdd 	bl	800c3a8 <xflow>
 800c3ee:	ec41 0b10 	vmov	d0, r0, r1
 800c3f2:	bd08      	pop	{r3, pc}

0800c3f4 <fabs>:
 800c3f4:	ec51 0b10 	vmov	r0, r1, d0
 800c3f8:	ee10 2a10 	vmov	r2, s0
 800c3fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c400:	ec43 2b10 	vmov	d0, r2, r3
 800c404:	4770      	bx	lr

0800c406 <finite>:
 800c406:	b082      	sub	sp, #8
 800c408:	ed8d 0b00 	vstr	d0, [sp]
 800c40c:	9801      	ldr	r0, [sp, #4]
 800c40e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c412:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c416:	0fc0      	lsrs	r0, r0, #31
 800c418:	b002      	add	sp, #8
 800c41a:	4770      	bx	lr
 800c41c:	0000      	movs	r0, r0
	...

0800c420 <scalbn>:
 800c420:	b570      	push	{r4, r5, r6, lr}
 800c422:	ec55 4b10 	vmov	r4, r5, d0
 800c426:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c42a:	4606      	mov	r6, r0
 800c42c:	462b      	mov	r3, r5
 800c42e:	b99a      	cbnz	r2, 800c458 <scalbn+0x38>
 800c430:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c434:	4323      	orrs	r3, r4
 800c436:	d036      	beq.n	800c4a6 <scalbn+0x86>
 800c438:	4b39      	ldr	r3, [pc, #228]	; (800c520 <scalbn+0x100>)
 800c43a:	4629      	mov	r1, r5
 800c43c:	2200      	movs	r2, #0
 800c43e:	ee10 0a10 	vmov	r0, s0
 800c442:	f7f4 f8dd 	bl	8000600 <__aeabi_dmul>
 800c446:	4b37      	ldr	r3, [pc, #220]	; (800c524 <scalbn+0x104>)
 800c448:	4604      	mov	r4, r0
 800c44a:	460d      	mov	r5, r1
 800c44c:	429e      	cmp	r6, r3
 800c44e:	da10      	bge.n	800c472 <scalbn+0x52>
 800c450:	a32b      	add	r3, pc, #172	; (adr r3, 800c500 <scalbn+0xe0>)
 800c452:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c456:	e03a      	b.n	800c4ce <scalbn+0xae>
 800c458:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c45c:	428a      	cmp	r2, r1
 800c45e:	d10c      	bne.n	800c47a <scalbn+0x5a>
 800c460:	ee10 2a10 	vmov	r2, s0
 800c464:	4620      	mov	r0, r4
 800c466:	4629      	mov	r1, r5
 800c468:	f7f3 ff14 	bl	8000294 <__adddf3>
 800c46c:	4604      	mov	r4, r0
 800c46e:	460d      	mov	r5, r1
 800c470:	e019      	b.n	800c4a6 <scalbn+0x86>
 800c472:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c476:	460b      	mov	r3, r1
 800c478:	3a36      	subs	r2, #54	; 0x36
 800c47a:	4432      	add	r2, r6
 800c47c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c480:	428a      	cmp	r2, r1
 800c482:	dd08      	ble.n	800c496 <scalbn+0x76>
 800c484:	2d00      	cmp	r5, #0
 800c486:	a120      	add	r1, pc, #128	; (adr r1, 800c508 <scalbn+0xe8>)
 800c488:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c48c:	da1c      	bge.n	800c4c8 <scalbn+0xa8>
 800c48e:	a120      	add	r1, pc, #128	; (adr r1, 800c510 <scalbn+0xf0>)
 800c490:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c494:	e018      	b.n	800c4c8 <scalbn+0xa8>
 800c496:	2a00      	cmp	r2, #0
 800c498:	dd08      	ble.n	800c4ac <scalbn+0x8c>
 800c49a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c49e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c4a2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c4a6:	ec45 4b10 	vmov	d0, r4, r5
 800c4aa:	bd70      	pop	{r4, r5, r6, pc}
 800c4ac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c4b0:	da19      	bge.n	800c4e6 <scalbn+0xc6>
 800c4b2:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c4b6:	429e      	cmp	r6, r3
 800c4b8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c4bc:	dd0a      	ble.n	800c4d4 <scalbn+0xb4>
 800c4be:	a112      	add	r1, pc, #72	; (adr r1, 800c508 <scalbn+0xe8>)
 800c4c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d1e2      	bne.n	800c48e <scalbn+0x6e>
 800c4c8:	a30f      	add	r3, pc, #60	; (adr r3, 800c508 <scalbn+0xe8>)
 800c4ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c4ce:	f7f4 f897 	bl	8000600 <__aeabi_dmul>
 800c4d2:	e7cb      	b.n	800c46c <scalbn+0x4c>
 800c4d4:	a10a      	add	r1, pc, #40	; (adr r1, 800c500 <scalbn+0xe0>)
 800c4d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d0b8      	beq.n	800c450 <scalbn+0x30>
 800c4de:	a10e      	add	r1, pc, #56	; (adr r1, 800c518 <scalbn+0xf8>)
 800c4e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4e4:	e7b4      	b.n	800c450 <scalbn+0x30>
 800c4e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c4ea:	3236      	adds	r2, #54	; 0x36
 800c4ec:	4620      	mov	r0, r4
 800c4ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c4f2:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	4b0b      	ldr	r3, [pc, #44]	; (800c528 <scalbn+0x108>)
 800c4fa:	e7e8      	b.n	800c4ce <scalbn+0xae>
 800c4fc:	f3af 8000 	nop.w
 800c500:	c2f8f359 	.word	0xc2f8f359
 800c504:	01a56e1f 	.word	0x01a56e1f
 800c508:	8800759c 	.word	0x8800759c
 800c50c:	7e37e43c 	.word	0x7e37e43c
 800c510:	8800759c 	.word	0x8800759c
 800c514:	fe37e43c 	.word	0xfe37e43c
 800c518:	c2f8f359 	.word	0xc2f8f359
 800c51c:	81a56e1f 	.word	0x81a56e1f
 800c520:	43500000 	.word	0x43500000
 800c524:	ffff3cb0 	.word	0xffff3cb0
 800c528:	3c900000 	.word	0x3c900000

0800c52c <_init>:
 800c52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c52e:	bf00      	nop
 800c530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c532:	bc08      	pop	{r3}
 800c534:	469e      	mov	lr, r3
 800c536:	4770      	bx	lr

0800c538 <_fini>:
 800c538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c53a:	bf00      	nop
 800c53c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c53e:	bc08      	pop	{r3}
 800c540:	469e      	mov	lr, r3
 800c542:	4770      	bx	lr
