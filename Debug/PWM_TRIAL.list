
PWM_TRIAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a818  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000014c  0800aa4c  0800aa4c  0001aa4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ab98  0800ab98  0001ab98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800aba0  0800aba0  0001aba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800aba4  0800aba4  0001aba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000009  20000000  0800aba8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000095c  2000000c  0800abb1  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000968  0800abb1  00020968  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020009  2**0
                  CONTENTS, READONLY
 10 .debug_info   000276b1  00000000  00000000  0002003f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000419b  00000000  00000000  000476f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ed8  00000000  00000000  0004b890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001d40  00000000  00000000  0004d768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a051  00000000  00000000  0004f4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000281dc  00000000  00000000  000894f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016c6d8  00000000  00000000  000b16d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0021ddad  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000086b8  00000000  00000000  0021de00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	2000000c 	.word	0x2000000c
 8000250:	00000000 	.word	0x00000000
 8000254:	0800aa34 	.word	0x0800aa34

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000010 	.word	0x20000010
 8000270:	0800aa34 	.word	0x0800aa34

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b982 	b.w	8000590 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002aa:	4604      	mov	r4, r0
 80002ac:	460f      	mov	r7, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d148      	bne.n	8000344 <__udivmoddi4+0xa0>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d961      	bls.n	800037c <__udivmoddi4+0xd8>
 80002b8:	fab2 f382 	clz	r3, r2
 80002bc:	b143      	cbz	r3, 80002d0 <__udivmoddi4+0x2c>
 80002be:	f1c3 0120 	rsb	r1, r3, #32
 80002c2:	409f      	lsls	r7, r3
 80002c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c8:	409c      	lsls	r4, r3
 80002ca:	fa20 f101 	lsr.w	r1, r0, r1
 80002ce:	430f      	orrs	r7, r1
 80002d0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002d4:	fa1f fe8c 	uxth.w	lr, ip
 80002d8:	0c22      	lsrs	r2, r4, #16
 80002da:	fbb7 f6f1 	udiv	r6, r7, r1
 80002de:	fb01 7716 	mls	r7, r1, r6, r7
 80002e2:	fb06 f00e 	mul.w	r0, r6, lr
 80002e6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ea:	4290      	cmp	r0, r2
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0x5c>
 80002ee:	eb1c 0202 	adds.w	r2, ip, r2
 80002f2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0x5a>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f200 8137 	bhi.w	800056c <__udivmoddi4+0x2c8>
 80002fe:	463e      	mov	r6, r7
 8000300:	1a12      	subs	r2, r2, r0
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb2 f0f1 	udiv	r0, r2, r1
 8000308:	fb01 2210 	mls	r2, r1, r0, r2
 800030c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000310:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000314:	45a6      	cmp	lr, r4
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x86>
 8000318:	eb1c 0404 	adds.w	r4, ip, r4
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x84>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f200 811c 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 8000328:	4610      	mov	r0, r2
 800032a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032e:	eba4 040e 	sub.w	r4, r4, lr
 8000332:	2600      	movs	r6, #0
 8000334:	b11d      	cbz	r5, 800033e <__udivmoddi4+0x9a>
 8000336:	40dc      	lsrs	r4, r3
 8000338:	2300      	movs	r3, #0
 800033a:	e9c5 4300 	strd	r4, r3, [r5]
 800033e:	4631      	mov	r1, r6
 8000340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000344:	428b      	cmp	r3, r1
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0xb8>
 8000348:	2d00      	cmp	r5, #0
 800034a:	f000 80fd 	beq.w	8000548 <__udivmoddi4+0x2a4>
 800034e:	2600      	movs	r6, #0
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	4630      	mov	r0, r6
 8000356:	4631      	mov	r1, r6
 8000358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035c:	fab3 f683 	clz	r6, r3
 8000360:	2e00      	cmp	r6, #0
 8000362:	d14b      	bne.n	80003fc <__udivmoddi4+0x158>
 8000364:	428b      	cmp	r3, r1
 8000366:	f0c0 80f2 	bcc.w	800054e <__udivmoddi4+0x2aa>
 800036a:	4282      	cmp	r2, r0
 800036c:	f240 80ef 	bls.w	800054e <__udivmoddi4+0x2aa>
 8000370:	4630      	mov	r0, r6
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e3      	beq.n	800033e <__udivmoddi4+0x9a>
 8000376:	e9c5 4700 	strd	r4, r7, [r5]
 800037a:	e7e0      	b.n	800033e <__udivmoddi4+0x9a>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xdc>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f382 	clz	r3, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 809d 	bne.w	80004c4 <__udivmoddi4+0x220>
 800038a:	1a89      	subs	r1, r1, r2
 800038c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000390:	b297      	uxth	r7, r2
 8000392:	2601      	movs	r6, #1
 8000394:	0c20      	lsrs	r0, r4, #16
 8000396:	fbb1 f2fe 	udiv	r2, r1, lr
 800039a:	fb0e 1112 	mls	r1, lr, r2, r1
 800039e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a2:	fb07 f002 	mul.w	r0, r7, r2
 80003a6:	4288      	cmp	r0, r1
 80003a8:	d90f      	bls.n	80003ca <__udivmoddi4+0x126>
 80003aa:	eb1c 0101 	adds.w	r1, ip, r1
 80003ae:	f102 38ff 	add.w	r8, r2, #4294967295
 80003b2:	bf2c      	ite	cs
 80003b4:	f04f 0901 	movcs.w	r9, #1
 80003b8:	f04f 0900 	movcc.w	r9, #0
 80003bc:	4288      	cmp	r0, r1
 80003be:	d903      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003c0:	f1b9 0f00 	cmp.w	r9, #0
 80003c4:	f000 80cf 	beq.w	8000566 <__udivmoddi4+0x2c2>
 80003c8:	4642      	mov	r2, r8
 80003ca:	1a09      	subs	r1, r1, r0
 80003cc:	b2a4      	uxth	r4, r4
 80003ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d6:	fb00 f707 	mul.w	r7, r0, r7
 80003da:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003de:	42a7      	cmp	r7, r4
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x150>
 80003e2:	eb1c 0404 	adds.w	r4, ip, r4
 80003e6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x14e>
 80003ec:	42a7      	cmp	r7, r4
 80003ee:	f200 80b4 	bhi.w	800055a <__udivmoddi4+0x2b6>
 80003f2:	4608      	mov	r0, r1
 80003f4:	1be4      	subs	r4, r4, r7
 80003f6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003fa:	e79b      	b.n	8000334 <__udivmoddi4+0x90>
 80003fc:	f1c6 0720 	rsb	r7, r6, #32
 8000400:	40b3      	lsls	r3, r6
 8000402:	fa01 f406 	lsl.w	r4, r1, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	40f9      	lsrs	r1, r7
 800040c:	40b2      	lsls	r2, r6
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f307 	lsr.w	r3, r0, r7
 8000416:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041a:	431c      	orrs	r4, r3
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	fb09 1118 	mls	r1, r9, r8, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb08 f00e 	mul.w	r0, r8, lr
 8000436:	4288      	cmp	r0, r1
 8000438:	d90f      	bls.n	800045a <__udivmoddi4+0x1b6>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000442:	bf2c      	ite	cs
 8000444:	f04f 0b01 	movcs.w	fp, #1
 8000448:	f04f 0b00 	movcc.w	fp, #0
 800044c:	4288      	cmp	r0, r1
 800044e:	d903      	bls.n	8000458 <__udivmoddi4+0x1b4>
 8000450:	f1bb 0f00 	cmp.w	fp, #0
 8000454:	f000 808d 	beq.w	8000572 <__udivmoddi4+0x2ce>
 8000458:	46d0      	mov	r8, sl
 800045a:	1a09      	subs	r1, r1, r0
 800045c:	b2a4      	uxth	r4, r4
 800045e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000462:	fb09 1110 	mls	r1, r9, r0, r1
 8000466:	fb00 fe0e 	mul.w	lr, r0, lr
 800046a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046e:	458e      	cmp	lr, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1de>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d201      	bcs.n	8000480 <__udivmoddi4+0x1dc>
 800047c:	458e      	cmp	lr, r1
 800047e:	d87f      	bhi.n	8000580 <__udivmoddi4+0x2dc>
 8000480:	4620      	mov	r0, r4
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	eba1 010e 	sub.w	r1, r1, lr
 800048a:	fba0 9802 	umull	r9, r8, r0, r2
 800048e:	4541      	cmp	r1, r8
 8000490:	464c      	mov	r4, r9
 8000492:	46c6      	mov	lr, r8
 8000494:	d302      	bcc.n	800049c <__udivmoddi4+0x1f8>
 8000496:	d106      	bne.n	80004a6 <__udivmoddi4+0x202>
 8000498:	454b      	cmp	r3, r9
 800049a:	d204      	bcs.n	80004a6 <__udivmoddi4+0x202>
 800049c:	3801      	subs	r0, #1
 800049e:	ebb9 0402 	subs.w	r4, r9, r2
 80004a2:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004a6:	2d00      	cmp	r5, #0
 80004a8:	d070      	beq.n	800058c <__udivmoddi4+0x2e8>
 80004aa:	1b1a      	subs	r2, r3, r4
 80004ac:	eb61 010e 	sbc.w	r1, r1, lr
 80004b0:	fa22 f306 	lsr.w	r3, r2, r6
 80004b4:	fa01 f707 	lsl.w	r7, r1, r7
 80004b8:	40f1      	lsrs	r1, r6
 80004ba:	2600      	movs	r6, #0
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	e73c      	b.n	800033e <__udivmoddi4+0x9a>
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	f1c3 0020 	rsb	r0, r3, #32
 80004cc:	fa01 f203 	lsl.w	r2, r1, r3
 80004d0:	fa21 f600 	lsr.w	r6, r1, r0
 80004d4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004d8:	fa24 f100 	lsr.w	r1, r4, r0
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	409c      	lsls	r4, r3
 80004e2:	4311      	orrs	r1, r2
 80004e4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004e8:	0c0a      	lsrs	r2, r1, #16
 80004ea:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ee:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004f2:	fb00 f607 	mul.w	r6, r0, r7
 80004f6:	4296      	cmp	r6, r2
 80004f8:	d90e      	bls.n	8000518 <__udivmoddi4+0x274>
 80004fa:	eb1c 0202 	adds.w	r2, ip, r2
 80004fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000502:	bf2c      	ite	cs
 8000504:	f04f 0901 	movcs.w	r9, #1
 8000508:	f04f 0900 	movcc.w	r9, #0
 800050c:	4296      	cmp	r6, r2
 800050e:	d902      	bls.n	8000516 <__udivmoddi4+0x272>
 8000510:	f1b9 0f00 	cmp.w	r9, #0
 8000514:	d031      	beq.n	800057a <__udivmoddi4+0x2d6>
 8000516:	4640      	mov	r0, r8
 8000518:	1b92      	subs	r2, r2, r6
 800051a:	b289      	uxth	r1, r1
 800051c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000520:	fb0e 2216 	mls	r2, lr, r6, r2
 8000524:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000528:	fb06 f207 	mul.w	r2, r6, r7
 800052c:	428a      	cmp	r2, r1
 800052e:	d907      	bls.n	8000540 <__udivmoddi4+0x29c>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f106 38ff 	add.w	r8, r6, #4294967295
 8000538:	d201      	bcs.n	800053e <__udivmoddi4+0x29a>
 800053a:	428a      	cmp	r2, r1
 800053c:	d823      	bhi.n	8000586 <__udivmoddi4+0x2e2>
 800053e:	4646      	mov	r6, r8
 8000540:	1a89      	subs	r1, r1, r2
 8000542:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000546:	e725      	b.n	8000394 <__udivmoddi4+0xf0>
 8000548:	462e      	mov	r6, r5
 800054a:	4628      	mov	r0, r5
 800054c:	e6f7      	b.n	800033e <__udivmoddi4+0x9a>
 800054e:	1a84      	subs	r4, r0, r2
 8000550:	eb61 0303 	sbc.w	r3, r1, r3
 8000554:	2001      	movs	r0, #1
 8000556:	461f      	mov	r7, r3
 8000558:	e70b      	b.n	8000372 <__udivmoddi4+0xce>
 800055a:	4464      	add	r4, ip
 800055c:	3802      	subs	r0, #2
 800055e:	e749      	b.n	80003f4 <__udivmoddi4+0x150>
 8000560:	4464      	add	r4, ip
 8000562:	3802      	subs	r0, #2
 8000564:	e6e1      	b.n	800032a <__udivmoddi4+0x86>
 8000566:	3a02      	subs	r2, #2
 8000568:	4461      	add	r1, ip
 800056a:	e72e      	b.n	80003ca <__udivmoddi4+0x126>
 800056c:	3e02      	subs	r6, #2
 800056e:	4462      	add	r2, ip
 8000570:	e6c6      	b.n	8000300 <__udivmoddi4+0x5c>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	e76f      	b.n	800045a <__udivmoddi4+0x1b6>
 800057a:	3802      	subs	r0, #2
 800057c:	4462      	add	r2, ip
 800057e:	e7cb      	b.n	8000518 <__udivmoddi4+0x274>
 8000580:	3802      	subs	r0, #2
 8000582:	4461      	add	r1, ip
 8000584:	e77d      	b.n	8000482 <__udivmoddi4+0x1de>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	e7d9      	b.n	8000540 <__udivmoddi4+0x29c>
 800058c:	462e      	mov	r6, r5
 800058e:	e6d6      	b.n	800033e <__udivmoddi4+0x9a>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <play_descending>:
		}
		init_freq = init_freq + step;
	}
	stop_pwm();
}
void play_descending(float start_freq, float end_freq, int pulse_duration, int pause_duration, int num_steps) {
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af00      	add	r7, sp, #0
 800059a:	ed87 0a05 	vstr	s0, [r7, #20]
 800059e:	edc7 0a04 	vstr	s1, [r7, #16]
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
	float init_freq = start_freq;
 80005a8:	697b      	ldr	r3, [r7, #20]
 80005aa:	627b      	str	r3, [r7, #36]	; 0x24
	float step = (start_freq - end_freq) / num_steps;
 80005ac:	ed97 7a05 	vldr	s14, [r7, #20]
 80005b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80005b4:	ee77 6a67 	vsub.f32	s13, s14, s15
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	ee07 3a90 	vmov	s15, r3
 80005be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80005c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80005c6:	edc7 7a07 	vstr	s15, [r7, #28]
	for (int i = 0; i < num_steps; i++) {
 80005ca:	2300      	movs	r3, #0
 80005cc:	623b      	str	r3, [r7, #32]
 80005ce:	e015      	b.n	80005fc <play_descending+0x68>
		play_frequency(pulse_duration, init_freq);
 80005d0:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80005d4:	68f8      	ldr	r0, [r7, #12]
 80005d6:	f000 f89f 	bl	8000718 <play_frequency>
		if (pause_duration != 0) {
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d002      	beq.n	80005e6 <play_descending+0x52>
			pause_pwm(pause_duration);
 80005e0:	68b8      	ldr	r0, [r7, #8]
 80005e2:	f000 f887 	bl	80006f4 <pause_pwm>
		}
		init_freq = init_freq - step;
 80005e6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80005ea:	edd7 7a07 	vldr	s15, [r7, #28]
 80005ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80005f2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	for (int i = 0; i < num_steps; i++) {
 80005f6:	6a3b      	ldr	r3, [r7, #32]
 80005f8:	3301      	adds	r3, #1
 80005fa:	623b      	str	r3, [r7, #32]
 80005fc:	6a3a      	ldr	r2, [r7, #32]
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	429a      	cmp	r2, r3
 8000602:	dbe5      	blt.n	80005d0 <play_descending+0x3c>
	}
	stop_pwm();
 8000604:	f000 f8c0 	bl	8000788 <stop_pwm>
}
 8000608:	bf00      	nop
 800060a:	3728      	adds	r7, #40	; 0x28
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}

08000610 <MX_TIM3_Init>:


TIM_HandleTypeDef htim3;
//TIM3 initialization function
void MX_TIM3_Init(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b08a      	sub	sp, #40	; 0x28
 8000614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000616:	f107 031c 	add.w	r3, r7, #28
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000622:	463b      	mov	r3, r7
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
 800062e:	611a      	str	r2, [r3, #16]
 8000630:	615a      	str	r2, [r3, #20]
 8000632:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000634:	4b21      	ldr	r3, [pc, #132]	; (80006bc <MX_TIM3_Init+0xac>)
 8000636:	4a22      	ldr	r2, [pc, #136]	; (80006c0 <MX_TIM3_Init+0xb0>)
 8000638:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64;
 800063a:	4b20      	ldr	r3, [pc, #128]	; (80006bc <MX_TIM3_Init+0xac>)
 800063c:	2240      	movs	r2, #64	; 0x40
 800063e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000640:	4b1e      	ldr	r3, [pc, #120]	; (80006bc <MX_TIM3_Init+0xac>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000646:	4b1d      	ldr	r3, [pc, #116]	; (80006bc <MX_TIM3_Init+0xac>)
 8000648:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800064c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800064e:	4b1b      	ldr	r3, [pc, #108]	; (80006bc <MX_TIM3_Init+0xac>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000654:	4b19      	ldr	r3, [pc, #100]	; (80006bc <MX_TIM3_Init+0xac>)
 8000656:	2280      	movs	r2, #128	; 0x80
 8000658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800065a:	4818      	ldr	r0, [pc, #96]	; (80006bc <MX_TIM3_Init+0xac>)
 800065c:	f007 fdfe 	bl	800825c <HAL_TIM_PWM_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000666:	f000 fe3d 	bl	80012e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800066a:	2300      	movs	r3, #0
 800066c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800066e:	2300      	movs	r3, #0
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	4619      	mov	r1, r3
 8000678:	4810      	ldr	r0, [pc, #64]	; (80006bc <MX_TIM3_Init+0xac>)
 800067a:	f008 ff55 	bl	8009528 <HAL_TIMEx_MasterConfigSynchronization>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000684:	f000 fe2e 	bl	80012e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000688:	2360      	movs	r3, #96	; 0x60
 800068a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800068c:	2300      	movs	r3, #0
 800068e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000690:	2300      	movs	r3, #0
 8000692:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000694:	2300      	movs	r3, #0
 8000696:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000698:	463b      	mov	r3, r7
 800069a:	2208      	movs	r2, #8
 800069c:	4619      	mov	r1, r3
 800069e:	4807      	ldr	r0, [pc, #28]	; (80006bc <MX_TIM3_Init+0xac>)
 80006a0:	f008 f906 	bl	80088b0 <HAL_TIM_PWM_ConfigChannel>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80006aa:	f000 fe1b 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80006ae:	4803      	ldr	r0, [pc, #12]	; (80006bc <MX_TIM3_Init+0xac>)
 80006b0:	f001 fa3a 	bl	8001b28 <HAL_TIM_MspPostInit>

}
 80006b4:	bf00      	nop
 80006b6:	3728      	adds	r7, #40	; 0x28
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	20000028 	.word	0x20000028
 80006c0:	40000400 	.word	0x40000400

080006c4 <piezo_init>:

void piezo_init(void) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	MX_TIM3_Init();
 80006c8:	f7ff ffa2 	bl	8000610 <MX_TIM3_Init>
	HAL_TIM_Base_Start(&htim3);
 80006cc:	4807      	ldr	r0, [pc, #28]	; (80006ec <piezo_init+0x28>)
 80006ce:	f007 fd2d 	bl	800812c <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80006d8:	4805      	ldr	r0, [pc, #20]	; (80006f0 <piezo_init+0x2c>)
 80006da:	f002 f845 	bl	8002768 <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80006de:	2108      	movs	r1, #8
 80006e0:	4802      	ldr	r0, [pc, #8]	; (80006ec <piezo_init+0x28>)
 80006e2:	f007 fe13 	bl	800830c <HAL_TIM_PWM_Start>
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000028 	.word	0x20000028
 80006f0:	42020000 	.word	0x42020000

080006f4 <pause_pwm>:
/*
 * function name: pause_pwm
 * purpose: make the duty cycle 0 so no output is provided for the specified duration
 * input: duration of pause in ms
 */
void pause_pwm(int duration_in_ms) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 80006fc:	4b05      	ldr	r3, [pc, #20]	; (8000714 <pause_pwm+0x20>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	2200      	movs	r2, #0
 8000702:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_Delay(duration_in_ms);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4618      	mov	r0, r3
 8000708:	f001 fca6 	bl	8002058 <HAL_Delay>
}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000028 	.word	0x20000028

08000718 <play_frequency>:
/*
 * function name: play_frequency
 * purpose: plays a frequency, for a duration that corresponds to the beat and the tempo
 * input: the beat length, the frequency, the beats per second (tempo)
 */
void play_frequency(int duration_ms, float frequency) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b084      	sub	sp, #16
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	ed87 0a00 	vstr	s0, [r7]
	if (frequency == 0) {
 8000724:	edd7 7a00 	vldr	s15, [r7]
 8000728:	eef5 7a40 	vcmp.f32	s15, #0.0
 800072c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000730:	d103      	bne.n	800073a <play_frequency+0x22>
		pause_pwm(duration_ms);
 8000732:	6878      	ldr	r0, [r7, #4]
 8000734:	f7ff ffde 	bl	80006f4 <pause_pwm>
		__HAL_TIM_SET_AUTORELOAD(&htim3, arr_val);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, arr_val / 2);
		//delaying so the note holds
		HAL_Delay(duration_ms);
	}
}
 8000738:	e01d      	b.n	8000776 <play_frequency+0x5e>
		int arr_val = (int) (CLOCKFREQ/frequency);
 800073a:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000780 <play_frequency+0x68>
 800073e:	ed97 7a00 	vldr	s14, [r7]
 8000742:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000746:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800074a:	ee17 3a90 	vmov	r3, s15
 800074e:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim3, arr_val);
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <play_frequency+0x6c>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	68fa      	ldr	r2, [r7, #12]
 8000756:	62da      	str	r2, [r3, #44]	; 0x2c
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <play_frequency+0x6c>)
 800075c:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, arr_val / 2);
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	0fda      	lsrs	r2, r3, #31
 8000762:	4413      	add	r3, r2
 8000764:	105b      	asrs	r3, r3, #1
 8000766:	461a      	mov	r2, r3
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <play_frequency+0x6c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_Delay(duration_ms);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4618      	mov	r0, r3
 8000772:	f001 fc71 	bl	8002058 <HAL_Delay>
}
 8000776:	bf00      	nop
 8000778:	3710      	adds	r7, #16
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	49742400 	.word	0x49742400
 8000784:	20000028 	.word	0x20000028

08000788 <stop_pwm>:
	}
	play_frequency_array(beats, freq_arr, tempo, note_num);
}

//stops pwm signal by seeting duty cycle to 0
void stop_pwm(void) {
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 800078c:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <stop_pwm+0x18>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2200      	movs	r2, #0
 8000792:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000794:	bf00      	nop
 8000796:	46bd      	mov	sp, r7
 8000798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079c:	4770      	bx	lr
 800079e:	bf00      	nop
 80007a0:	20000028 	.word	0x20000028

080007a4 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 80007ac:	4b0a      	ldr	r3, [pc, #40]	; (80007d8 <LL_AHB2_GRP1_EnableClock+0x34>)
 80007ae:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80007b2:	4909      	ldr	r1, [pc, #36]	; (80007d8 <LL_AHB2_GRP1_EnableClock+0x34>)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	4313      	orrs	r3, r2
 80007b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 80007bc:	4b06      	ldr	r3, [pc, #24]	; (80007d8 <LL_AHB2_GRP1_EnableClock+0x34>)
 80007be:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4013      	ands	r3, r2
 80007c6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007c8:	68fb      	ldr	r3, [r7, #12]
}
 80007ca:	bf00      	nop
 80007cc:	3714      	adds	r7, #20
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	46020c00 	.word	0x46020c00

080007dc <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80007dc:	b480      	push	{r7}
 80007de:	b085      	sub	sp, #20
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80007e4:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <LL_APB1_GRP2_EnableClock+0x34>)
 80007e6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80007ea:	4909      	ldr	r1, [pc, #36]	; (8000810 <LL_APB1_GRP2_EnableClock+0x34>)
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <LL_APB1_GRP2_EnableClock+0x34>)
 80007f6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4013      	ands	r3, r2
 80007fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000800:	68fb      	ldr	r3, [r7, #12]
}
 8000802:	bf00      	nop
 8000804:	3714      	adds	r7, #20
 8000806:	46bd      	mov	sp, r7
 8000808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	46020c00 	.word	0x46020c00

08000814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000814:	b5b0      	push	{r4, r5, r7, lr}
 8000816:	b094      	sub	sp, #80	; 0x50
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081a:	f001 fb99 	bl	8001f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081e:	f000 f847 	bl	80008b0 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000822:	f000 f8a4 	bl	800096e <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000826:	f000 fbdb 	bl	8000fe0 <MX_GPIO_Init>
  MX_ADF1_Init();
 800082a:	f000 f8af 	bl	800098c <MX_ADF1_Init>
  MX_I2C1_Init();
 800082e:	f000 f8f9 	bl	8000a24 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000832:	f000 f937 	bl	8000aa4 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8000836:	f000 f975 	bl	8000b24 <MX_OCTOSPI1_Init>
  MX_OCTOSPI2_Init();
 800083a:	f000 f9ed 	bl	8000c18 <MX_OCTOSPI2_Init>
  MX_SPI2_Init();
 800083e:	f000 fa67 	bl	8000d10 <MX_SPI2_Init>
  MX_UART4_Init();
 8000842:	f000 fad3 	bl	8000dec <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000846:	f000 fb1d 	bl	8000e84 <MX_USART1_UART_Init>
  MX_UCPD1_Init();
 800084a:	f000 fb67 	bl	8000f1c <MX_UCPD1_Init>
  MX_USB_OTG_FS_PCD_Init();
 800084e:	f000 fb9b 	bl	8000f88 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  //int beat_dur[] = {1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2};
  //char twinkle_twinkle_notes[] = "C4 C4 G4 G4 A4 A4 G4 F4 F4 E4 E4 D4 D4 C4 G4 G4 F4 F4 E4 E4 D4 G4 G4 F4 F4 E4 E4 D4 C4 C4 G4 G4 A4 A4 G4 F4 F4 E4 E4 D4 D4 C4 ";
  char xfiles_notes[] = "A3 C4 E4 F4 0 A4 E4 D4 E4 G4 E4";
 8000852:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <main+0x8c>)
 8000854:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000858:	461d      	mov	r5, r3
 800085a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800085c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800085e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000862:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  float xfiles_beats[] = {0.5, 0.5, 0.5, 1, 1, 1, 1, 1, 1, 1, 2};
 8000866:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <main+0x90>)
 8000868:	1d3c      	adds	r4, r7, #4
 800086a:	461d      	mov	r5, r3
 800086c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800086e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000870:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000874:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000878:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	piezo_init();
 800087c:	f7ff ff22 	bl	80006c4 <piezo_init>
	play_descending(500, 300, 200, 0, 5);
 8000880:	2205      	movs	r2, #5
 8000882:	2100      	movs	r1, #0
 8000884:	20c8      	movs	r0, #200	; 0xc8
 8000886:	eddf 0a08 	vldr	s1, [pc, #32]	; 80008a8 <main+0x94>
 800088a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80008ac <main+0x98>
 800088e:	f7ff fe81 	bl	8000594 <play_descending>
	//play_tune(xfiles_beats, xfiles_notes, 120);
	break;
 8000892:	bf00      	nop
 8000894:	2300      	movs	r3, #0
    /* USER CODE END WHILE */
  }
    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8000896:	4618      	mov	r0, r3
 8000898:	3750      	adds	r7, #80	; 0x50
 800089a:	46bd      	mov	sp, r7
 800089c:	bdb0      	pop	{r4, r5, r7, pc}
 800089e:	bf00      	nop
 80008a0:	0800aa4c 	.word	0x0800aa4c
 80008a4:	0800aa6c 	.word	0x0800aa6c
 80008a8:	43960000 	.word	0x43960000
 80008ac:	43fa0000 	.word	0x43fa0000

080008b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b09e      	sub	sp, #120	; 0x78
 80008b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b6:	f107 0318 	add.w	r3, r7, #24
 80008ba:	2260      	movs	r2, #96	; 0x60
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f00a f8b0 	bl	800aa24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c4:	463b      	mov	r3, r7
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	605a      	str	r2, [r3, #4]
 80008cc:	609a      	str	r2, [r3, #8]
 80008ce:	60da      	str	r2, [r3, #12]
 80008d0:	611a      	str	r2, [r3, #16]
 80008d2:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 80008d4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80008d8:	f003 faec 	bl	8003eb4 <HAL_PWREx_ControlVoltageScaling>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0x36>
  {
    Error_Handler();
 80008e2:	f000 fcff 	bl	80012e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 80008e6:	2330      	movs	r3, #48	; 0x30
 80008e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80008ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008f0:	2301      	movs	r3, #1
 80008f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80008f4:	2310      	movs	r3, #16
 80008f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fc:	2302      	movs	r3, #2
 80008fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000900:	2301      	movs	r3, #1
 8000902:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 8000904:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000908:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 800090a:	2303      	movs	r3, #3
 800090c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 800090e:	2308      	movs	r3, #8
 8000910:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000912:	2302      	movs	r3, #2
 8000914:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000916:	2302      	movs	r3, #2
 8000918:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 800091a:	2302      	movs	r3, #2
 800091c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800091e:	230c      	movs	r3, #12
 8000920:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000926:	f107 0318 	add.w	r3, r7, #24
 800092a:	4618      	mov	r0, r3
 800092c:	f003 fbb4 	bl	8004098 <HAL_RCC_OscConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000936:	f000 fcd5 	bl	80012e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800093a:	231f      	movs	r3, #31
 800093c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093e:	2303      	movs	r3, #3
 8000940:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800094a:	2300      	movs	r3, #0
 800094c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000952:	463b      	mov	r3, r7
 8000954:	2102      	movs	r1, #2
 8000956:	4618      	mov	r0, r3
 8000958:	f004 fa74 	bl	8004e44 <HAL_RCC_ClockConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000962:	f000 fcbf 	bl	80012e4 <Error_Handler>
  }
}
 8000966:	bf00      	nop
 8000968:	3778      	adds	r7, #120	; 0x78
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}

0800096e <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8000972:	f003 fb81 	bl	8004078 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 8000976:	2002      	movs	r0, #2
 8000978:	f003 fb1e 	bl	8003fb8 <HAL_PWREx_ConfigSupply>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <SystemPower_Config+0x18>
  {
    Error_Handler();
 8000982:	f000 fcaf 	bl	80012e4 <Error_Handler>
  }
}
 8000986:	bf00      	nop
 8000988:	bd80      	pop	{r7, pc}
	...

0800098c <MX_ADF1_Init>:
  * @brief ADF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADF1_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE END ADF1_Init 1 */

  /**
    AdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  AdfHandle0.Instance = ADF1_Filter0;
 8000990:	4b21      	ldr	r3, [pc, #132]	; (8000a18 <MX_ADF1_Init+0x8c>)
 8000992:	4a22      	ldr	r2, [pc, #136]	; (8000a1c <MX_ADF1_Init+0x90>)
 8000994:	601a      	str	r2, [r3, #0]
  AdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 8000996:	4b20      	ldr	r3, [pc, #128]	; (8000a18 <MX_ADF1_Init+0x8c>)
 8000998:	2201      	movs	r2, #1
 800099a:	609a      	str	r2, [r3, #8]
  AdfHandle0.Init.CommonParam.OutputClock.Activation = DISABLE;
 800099c:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <MX_ADF1_Init+0x8c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	731a      	strb	r2, [r3, #12]
  AdfHandle0.Init.SerialInterface.Activation = ENABLE;
 80009a2:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <MX_ADF1_Init+0x8c>)
 80009a4:	2201      	movs	r2, #1
 80009a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  AdfHandle0.Init.SerialInterface.ClockSource = MDF_SITF_CCK0_SOURCE;
 80009aa:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <MX_ADF1_Init+0x8c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	62da      	str	r2, [r3, #44]	; 0x2c
  AdfHandle0.Init.SerialInterface.Threshold = 4;
 80009b0:	4b19      	ldr	r3, [pc, #100]	; (8000a18 <MX_ADF1_Init+0x8c>)
 80009b2:	2204      	movs	r2, #4
 80009b4:	631a      	str	r2, [r3, #48]	; 0x30
  AdfHandle0.Init.FilterBistream = MDF_BITSTREAM0_FALLING;
 80009b6:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <MX_ADF1_Init+0x8c>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_MDF_Init(&AdfHandle0) != HAL_OK)
 80009bc:	4816      	ldr	r0, [pc, #88]	; (8000a18 <MX_ADF1_Init+0x8c>)
 80009be:	f002 f811 	bl	80029e4 <HAL_MDF_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_ADF1_Init+0x40>
  {
    Error_Handler();
 80009c8:	f000 fc8c 	bl	80012e4 <Error_Handler>
  /**
    AdfFilterConfig0 structure initialization

    WARNING : only structure is filled, no specific init function call for filter
  */
  AdfFilterConfig0.DataSource = MDF_DATA_SOURCE_BSMX;
 80009cc:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_ADF1_Init+0x94>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
  AdfFilterConfig0.Delay = 0;
 80009d2:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <MX_ADF1_Init+0x94>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	605a      	str	r2, [r3, #4]
  AdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC4;
 80009d8:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_ADF1_Init+0x94>)
 80009da:	2240      	movs	r2, #64	; 0x40
 80009dc:	609a      	str	r2, [r3, #8]
  AdfFilterConfig0.DecimationRatio = 2;
 80009de:	4b10      	ldr	r3, [pc, #64]	; (8000a20 <MX_ADF1_Init+0x94>)
 80009e0:	2202      	movs	r2, #2
 80009e2:	60da      	str	r2, [r3, #12]
  AdfFilterConfig0.Gain = 0;
 80009e4:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <MX_ADF1_Init+0x94>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	615a      	str	r2, [r3, #20]
  AdfFilterConfig0.ReshapeFilter.Activation = DISABLE;
 80009ea:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <MX_ADF1_Init+0x94>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	761a      	strb	r2, [r3, #24]
  AdfFilterConfig0.HighPassFilter.Activation = DISABLE;
 80009f0:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <MX_ADF1_Init+0x94>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	f883 2020 	strb.w	r2, [r3, #32]
  AdfFilterConfig0.SoundActivity.Activation = DISABLE;
 80009f8:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_ADF1_Init+0x94>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  AdfFilterConfig0.AcquisitionMode = MDF_MODE_ASYNC_CONT;
 8000a00:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <MX_ADF1_Init+0x94>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	665a      	str	r2, [r3, #100]	; 0x64
  AdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_ADF1_Init+0x94>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	669a      	str	r2, [r3, #104]	; 0x68
  AdfFilterConfig0.DiscardSamples = 0;
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <MX_ADF1_Init+0x94>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	66da      	str	r2, [r3, #108]	; 0x6c
  /* USER CODE BEGIN ADF1_Init 2 */

  /* USER CODE END ADF1_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	20000074 	.word	0x20000074
 8000a1c:	46024080 	.word	0x46024080
 8000a20:	200000b8 	.word	0x200000b8

08000a24 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a28:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a2a:	4a1c      	ldr	r2, [pc, #112]	; (8000a9c <MX_I2C1_Init+0x78>)
 8000a2c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000a2e:	4b1a      	ldr	r3, [pc, #104]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a30:	4a1b      	ldr	r2, [pc, #108]	; (8000aa0 <MX_I2C1_Init+0x7c>)
 8000a32:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a34:	4b18      	ldr	r3, [pc, #96]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a3a:	4b17      	ldr	r3, [pc, #92]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a40:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a46:	4b14      	ldr	r3, [pc, #80]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a52:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a58:	4b0f      	ldr	r3, [pc, #60]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a5e:	480e      	ldr	r0, [pc, #56]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a60:	f001 fe9a 	bl	8002798 <HAL_I2C_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a6a:	f000 fc3b 	bl	80012e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4809      	ldr	r0, [pc, #36]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a72:	f001 ff20 	bl	80028b6 <HAL_I2CEx_ConfigAnalogFilter>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a7c:	f000 fc32 	bl	80012e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a80:	2100      	movs	r1, #0
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <MX_I2C1_Init+0x74>)
 8000a84:	f001 ff62 	bl	800294c <HAL_I2CEx_ConfigDigitalFilter>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a8e:	f000 fc29 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	20000134 	.word	0x20000134
 8000a9c:	40005400 	.word	0x40005400
 8000aa0:	10707dbc 	.word	0x10707dbc

08000aa4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000aa8:	4b1b      	ldr	r3, [pc, #108]	; (8000b18 <MX_I2C2_Init+0x74>)
 8000aaa:	4a1c      	ldr	r2, [pc, #112]	; (8000b1c <MX_I2C2_Init+0x78>)
 8000aac:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 8000aae:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <MX_I2C2_Init+0x74>)
 8000ab0:	4a1b      	ldr	r2, [pc, #108]	; (8000b20 <MX_I2C2_Init+0x7c>)
 8000ab2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ab4:	4b18      	ldr	r3, [pc, #96]	; (8000b18 <MX_I2C2_Init+0x74>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aba:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <MX_I2C2_Init+0x74>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ac0:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <MX_I2C2_Init+0x74>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ac6:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <MX_I2C2_Init+0x74>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000acc:	4b12      	ldr	r3, [pc, #72]	; (8000b18 <MX_I2C2_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <MX_I2C2_Init+0x74>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ad8:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <MX_I2C2_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ade:	480e      	ldr	r0, [pc, #56]	; (8000b18 <MX_I2C2_Init+0x74>)
 8000ae0:	f001 fe5a 	bl	8002798 <HAL_I2C_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000aea:	f000 fbfb 	bl	80012e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000aee:	2100      	movs	r1, #0
 8000af0:	4809      	ldr	r0, [pc, #36]	; (8000b18 <MX_I2C2_Init+0x74>)
 8000af2:	f001 fee0 	bl	80028b6 <HAL_I2CEx_ConfigAnalogFilter>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000afc:	f000 fbf2 	bl	80012e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b00:	2100      	movs	r1, #0
 8000b02:	4805      	ldr	r0, [pc, #20]	; (8000b18 <MX_I2C2_Init+0x74>)
 8000b04:	f001 ff22 	bl	800294c <HAL_I2CEx_ConfigDigitalFilter>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b0e:	f000 fbe9 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000180 	.word	0x20000180
 8000b1c:	40005800 	.word	0x40005800
 8000b20:	10707dbc 	.word	0x10707dbc

08000b24 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b088      	sub	sp, #32
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000b2a:	f107 0308 	add.w	r3, r7, #8
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
 8000b38:	611a      	str	r2, [r3, #16]
 8000b3a:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8000b3c:	463b      	mov	r3, r7
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000b44:	4b31      	ldr	r3, [pc, #196]	; (8000c0c <MX_OCTOSPI1_Init+0xe8>)
 8000b46:	4a32      	ldr	r2, [pc, #200]	; (8000c10 <MX_OCTOSPI1_Init+0xec>)
 8000b48:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000b4a:	4b30      	ldr	r3, [pc, #192]	; (8000c0c <MX_OCTOSPI1_Init+0xe8>)
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000b50:	4b2e      	ldr	r3, [pc, #184]	; (8000c0c <MX_OCTOSPI1_Init+0xe8>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_APMEMORY;
 8000b56:	4b2d      	ldr	r3, [pc, #180]	; (8000c0c <MX_OCTOSPI1_Init+0xe8>)
 8000b58:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000b5c:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 24;
 8000b5e:	4b2b      	ldr	r3, [pc, #172]	; (8000c0c <MX_OCTOSPI1_Init+0xe8>)
 8000b60:	2218      	movs	r2, #24
 8000b62:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000b64:	4b29      	ldr	r3, [pc, #164]	; (8000c0c <MX_OCTOSPI1_Init+0xe8>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000b6a:	4b28      	ldr	r3, [pc, #160]	; (8000c0c <MX_OCTOSPI1_Init+0xe8>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000b70:	4b26      	ldr	r3, [pc, #152]	; (8000c0c <MX_OCTOSPI1_Init+0xe8>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000b76:	4b25      	ldr	r3, [pc, #148]	; (8000c0c <MX_OCTOSPI1_Init+0xe8>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 2;
 8000b7c:	4b23      	ldr	r3, [pc, #140]	; (8000c0c <MX_OCTOSPI1_Init+0xe8>)
 8000b7e:	2202      	movs	r2, #2
 8000b80:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000b82:	4b22      	ldr	r3, [pc, #136]	; (8000c0c <MX_OCTOSPI1_Init+0xe8>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8000b88:	4b20      	ldr	r3, [pc, #128]	; (8000c0c <MX_OCTOSPI1_Init+0xe8>)
 8000b8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000b8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 10;
 8000b90:	4b1e      	ldr	r3, [pc, #120]	; (8000c0c <MX_OCTOSPI1_Init+0xe8>)
 8000b92:	220a      	movs	r2, #10
 8000b94:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 8000b96:	4b1d      	ldr	r3, [pc, #116]	; (8000c0c <MX_OCTOSPI1_Init+0xe8>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8000b9c:	4b1b      	ldr	r3, [pc, #108]	; (8000c0c <MX_OCTOSPI1_Init+0xe8>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 100;
 8000ba2:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <MX_OCTOSPI1_Init+0xe8>)
 8000ba4:	2264      	movs	r2, #100	; 0x64
 8000ba6:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000ba8:	4818      	ldr	r0, [pc, #96]	; (8000c0c <MX_OCTOSPI1_Init+0xe8>)
 8000baa:	f002 f8c7 	bl	8002d3c <HAL_OSPI_Init>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d001      	beq.n	8000bb8 <MX_OCTOSPI1_Init+0x94>
  {
    Error_Handler();
 8000bb4:	f000 fb96 	bl	80012e4 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.DQSPort = 1;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.NCSPort = 1;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000bc4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000bc8:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000bca:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <MX_OCTOSPI1_Init+0xf0>)
 8000bcc:	61bb      	str	r3, [r7, #24]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000bce:	f107 0308 	add.w	r3, r7, #8
 8000bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	480c      	ldr	r0, [pc, #48]	; (8000c0c <MX_OCTOSPI1_Init+0xe8>)
 8000bda:	f002 f9ef 	bl	8002fbc <HAL_OSPIM_Config>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_OCTOSPI1_Init+0xc4>
  {
    Error_Handler();
 8000be4:	f000 fb7e 	bl	80012e4 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8000bf0:	463b      	mov	r3, r7
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_OCTOSPI1_Init+0xe8>)
 8000bf6:	f002 ffcd 	bl	8003b94 <HAL_OSPI_DLYB_SetConfig>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_OCTOSPI1_Init+0xe0>
  {
    Error_Handler();
 8000c00:	f000 fb70 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000c04:	bf00      	nop
 8000c06:	3720      	adds	r7, #32
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	200001cc 	.word	0x200001cc
 8000c10:	420d1400 	.word	0x420d1400
 8000c14:	01000001 	.word	0x01000001

08000c18 <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000c1e:	f107 0308 	add.w	r3, r7, #8
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
 8000c2c:	611a      	str	r2, [r3, #16]
 8000c2e:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8000c30:	463b      	mov	r3, r7
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
 8000c36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 8000c38:	4b31      	ldr	r3, [pc, #196]	; (8000d00 <MX_OCTOSPI2_Init+0xe8>)
 8000c3a:	4a32      	ldr	r2, [pc, #200]	; (8000d04 <MX_OCTOSPI2_Init+0xec>)
 8000c3c:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 4;
 8000c3e:	4b30      	ldr	r3, [pc, #192]	; (8000d00 <MX_OCTOSPI2_Init+0xe8>)
 8000c40:	2204      	movs	r2, #4
 8000c42:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000c44:	4b2e      	ldr	r3, [pc, #184]	; (8000d00 <MX_OCTOSPI2_Init+0xe8>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000c4a:	4b2d      	ldr	r3, [pc, #180]	; (8000d00 <MX_OCTOSPI2_Init+0xe8>)
 8000c4c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c50:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 26;
 8000c52:	4b2b      	ldr	r3, [pc, #172]	; (8000d00 <MX_OCTOSPI2_Init+0xe8>)
 8000c54:	221a      	movs	r2, #26
 8000c56:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 2;
 8000c58:	4b29      	ldr	r3, [pc, #164]	; (8000d00 <MX_OCTOSPI2_Init+0xe8>)
 8000c5a:	2202      	movs	r2, #2
 8000c5c:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000c5e:	4b28      	ldr	r3, [pc, #160]	; (8000d00 <MX_OCTOSPI2_Init+0xe8>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000c64:	4b26      	ldr	r3, [pc, #152]	; (8000d00 <MX_OCTOSPI2_Init+0xe8>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000c6a:	4b25      	ldr	r3, [pc, #148]	; (8000d00 <MX_OCTOSPI2_Init+0xe8>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 4;
 8000c70:	4b23      	ldr	r3, [pc, #140]	; (8000d00 <MX_OCTOSPI2_Init+0xe8>)
 8000c72:	2204      	movs	r2, #4
 8000c74:	625a      	str	r2, [r3, #36]	; 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000c76:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <MX_OCTOSPI2_Init+0xe8>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	629a      	str	r2, [r3, #40]	; 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8000c7c:	4b20      	ldr	r3, [pc, #128]	; (8000d00 <MX_OCTOSPI2_Init+0xe8>)
 8000c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c82:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 8000c84:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <MX_OCTOSPI2_Init+0xe8>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	631a      	str	r2, [r3, #48]	; 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 8000c8a:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <MX_OCTOSPI2_Init+0xe8>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	635a      	str	r2, [r3, #52]	; 0x34
  hospi2.Init.MaxTran = 0;
 8000c90:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <MX_OCTOSPI2_Init+0xe8>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	639a      	str	r2, [r3, #56]	; 0x38
  hospi2.Init.Refresh = 0;
 8000c96:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <MX_OCTOSPI2_Init+0xe8>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000c9c:	4818      	ldr	r0, [pc, #96]	; (8000d00 <MX_OCTOSPI2_Init+0xe8>)
 8000c9e:	f002 f84d 	bl	8002d3c <HAL_OSPI_Init>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_OCTOSPI2_Init+0x94>
  {
    Error_Handler();
 8000ca8:	f000 fb1c 	bl	80012e4 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 2;
 8000cac:	2302      	movs	r3, #2
 8000cae:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.DQSPort = 2;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.NCSPort = 2;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000cb8:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <MX_OCTOSPI2_Init+0xf0>)
 8000cba:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8000cbc:	4b13      	ldr	r3, [pc, #76]	; (8000d0c <MX_OCTOSPI2_Init+0xf4>)
 8000cbe:	61bb      	str	r3, [r7, #24]
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000cc0:	f107 0308 	add.w	r3, r7, #8
 8000cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000cc8:	4619      	mov	r1, r3
 8000cca:	480d      	ldr	r0, [pc, #52]	; (8000d00 <MX_OCTOSPI2_Init+0xe8>)
 8000ccc:	f002 f976 	bl	8002fbc <HAL_OSPIM_Config>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_OCTOSPI2_Init+0xc2>
  {
    Error_Handler();
 8000cd6:	f000 fb05 	bl	80012e4 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi2, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8000ce2:	463b      	mov	r3, r7
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	4806      	ldr	r0, [pc, #24]	; (8000d00 <MX_OCTOSPI2_Init+0xe8>)
 8000ce8:	f002 ff54 	bl	8003b94 <HAL_OSPI_DLYB_SetConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <MX_OCTOSPI2_Init+0xde>
  {
    Error_Handler();
 8000cf2:	f000 faf7 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8000cf6:	bf00      	nop
 8000cf8:	3720      	adds	r7, #32
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000228 	.word	0x20000228
 8000d04:	420d2400 	.word	0x420d2400
 8000d08:	00010002 	.word	0x00010002
 8000d0c:	01000002 	.word	0x01000002

08000d10 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b084      	sub	sp, #16
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000d16:	1d3b      	adds	r3, r7, #4
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d20:	4b30      	ldr	r3, [pc, #192]	; (8000de4 <MX_SPI2_Init+0xd4>)
 8000d22:	4a31      	ldr	r2, [pc, #196]	; (8000de8 <MX_SPI2_Init+0xd8>)
 8000d24:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d26:	4b2f      	ldr	r3, [pc, #188]	; (8000de4 <MX_SPI2_Init+0xd4>)
 8000d28:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d2c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d2e:	4b2d      	ldr	r3, [pc, #180]	; (8000de4 <MX_SPI2_Init+0xd4>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d34:	4b2b      	ldr	r3, [pc, #172]	; (8000de4 <MX_SPI2_Init+0xd4>)
 8000d36:	2203      	movs	r2, #3
 8000d38:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d3a:	4b2a      	ldr	r3, [pc, #168]	; (8000de4 <MX_SPI2_Init+0xd4>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d40:	4b28      	ldr	r3, [pc, #160]	; (8000de4 <MX_SPI2_Init+0xd4>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d46:	4b27      	ldr	r3, [pc, #156]	; (8000de4 <MX_SPI2_Init+0xd4>)
 8000d48:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000d4c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d4e:	4b25      	ldr	r3, [pc, #148]	; (8000de4 <MX_SPI2_Init+0xd4>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d54:	4b23      	ldr	r3, [pc, #140]	; (8000de4 <MX_SPI2_Init+0xd4>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d5a:	4b22      	ldr	r3, [pc, #136]	; (8000de4 <MX_SPI2_Init+0xd4>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d60:	4b20      	ldr	r3, [pc, #128]	; (8000de4 <MX_SPI2_Init+0xd4>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8000d66:	4b1f      	ldr	r3, [pc, #124]	; (8000de4 <MX_SPI2_Init+0xd4>)
 8000d68:	2207      	movs	r2, #7
 8000d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000d6c:	4b1d      	ldr	r3, [pc, #116]	; (8000de4 <MX_SPI2_Init+0xd4>)
 8000d6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d72:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d74:	4b1b      	ldr	r3, [pc, #108]	; (8000de4 <MX_SPI2_Init+0xd4>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d7a:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <MX_SPI2_Init+0xd4>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000d80:	4b18      	ldr	r3, [pc, #96]	; (8000de4 <MX_SPI2_Init+0xd4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000d86:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <MX_SPI2_Init+0xd4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d8c:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <MX_SPI2_Init+0xd4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d92:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <MX_SPI2_Init+0xd4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d98:	4b12      	ldr	r3, [pc, #72]	; (8000de4 <MX_SPI2_Init+0xd4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	659a      	str	r2, [r3, #88]	; 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000d9e:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <MX_SPI2_Init+0xd4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000da4:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <MX_SPI2_Init+0xd4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000daa:	480e      	ldr	r0, [pc, #56]	; (8000de4 <MX_SPI2_Init+0xd4>)
 8000dac:	f007 f86a 	bl	8007e84 <HAL_SPI_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_SPI2_Init+0xaa>
  {
    Error_Handler();
 8000db6:	f000 fa95 	bl	80012e4 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000dbe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000dc2:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4805      	ldr	r0, [pc, #20]	; (8000de4 <MX_SPI2_Init+0xd4>)
 8000dce:	f007 f96c 	bl	80080aa <HAL_SPIEx_SetConfigAutonomousMode>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_SPI2_Init+0xcc>
  {
    Error_Handler();
 8000dd8:	f000 fa84 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ddc:	bf00      	nop
 8000dde:	3710      	adds	r7, #16
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20000284 	.word	0x20000284
 8000de8:	40003800 	.word	0x40003800

08000dec <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000df0:	4b22      	ldr	r3, [pc, #136]	; (8000e7c <MX_UART4_Init+0x90>)
 8000df2:	4a23      	ldr	r2, [pc, #140]	; (8000e80 <MX_UART4_Init+0x94>)
 8000df4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <MX_UART4_Init+0x90>)
 8000df8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dfc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000dfe:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <MX_UART4_Init+0x90>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000e04:	4b1d      	ldr	r3, [pc, #116]	; (8000e7c <MX_UART4_Init+0x90>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <MX_UART4_Init+0x90>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000e10:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <MX_UART4_Init+0x90>)
 8000e12:	220c      	movs	r2, #12
 8000e14:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e16:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <MX_UART4_Init+0x90>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e1c:	4b17      	ldr	r3, [pc, #92]	; (8000e7c <MX_UART4_Init+0x90>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e22:	4b16      	ldr	r3, [pc, #88]	; (8000e7c <MX_UART4_Init+0x90>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e28:	4b14      	ldr	r3, [pc, #80]	; (8000e7c <MX_UART4_Init+0x90>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e2e:	4b13      	ldr	r3, [pc, #76]	; (8000e7c <MX_UART4_Init+0x90>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000e34:	4811      	ldr	r0, [pc, #68]	; (8000e7c <MX_UART4_Init+0x90>)
 8000e36:	f008 fc7f 	bl	8009738 <HAL_UART_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000e40:	f000 fa50 	bl	80012e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e44:	2100      	movs	r1, #0
 8000e46:	480d      	ldr	r0, [pc, #52]	; (8000e7c <MX_UART4_Init+0x90>)
 8000e48:	f009 f856 	bl	8009ef8 <HAL_UARTEx_SetTxFifoThreshold>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000e52:	f000 fa47 	bl	80012e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e56:	2100      	movs	r1, #0
 8000e58:	4808      	ldr	r0, [pc, #32]	; (8000e7c <MX_UART4_Init+0x90>)
 8000e5a:	f009 f88b 	bl	8009f74 <HAL_UARTEx_SetRxFifoThreshold>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000e64:	f000 fa3e 	bl	80012e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000e68:	4804      	ldr	r0, [pc, #16]	; (8000e7c <MX_UART4_Init+0x90>)
 8000e6a:	f009 f80c 	bl	8009e86 <HAL_UARTEx_DisableFifoMode>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000e74:	f000 fa36 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000314 	.word	0x20000314
 8000e80:	40004c00 	.word	0x40004c00

08000e84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e88:	4b22      	ldr	r3, [pc, #136]	; (8000f14 <MX_USART1_UART_Init+0x90>)
 8000e8a:	4a23      	ldr	r2, [pc, #140]	; (8000f18 <MX_USART1_UART_Init+0x94>)
 8000e8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e8e:	4b21      	ldr	r3, [pc, #132]	; (8000f14 <MX_USART1_UART_Init+0x90>)
 8000e90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e96:	4b1f      	ldr	r3, [pc, #124]	; (8000f14 <MX_USART1_UART_Init+0x90>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <MX_USART1_UART_Init+0x90>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ea2:	4b1c      	ldr	r3, [pc, #112]	; (8000f14 <MX_USART1_UART_Init+0x90>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ea8:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <MX_USART1_UART_Init+0x90>)
 8000eaa:	220c      	movs	r2, #12
 8000eac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eae:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <MX_USART1_UART_Init+0x90>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb4:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <MX_USART1_UART_Init+0x90>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eba:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <MX_USART1_UART_Init+0x90>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ec0:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <MX_USART1_UART_Init+0x90>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ec6:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <MX_USART1_UART_Init+0x90>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ecc:	4811      	ldr	r0, [pc, #68]	; (8000f14 <MX_USART1_UART_Init+0x90>)
 8000ece:	f008 fc33 	bl	8009738 <HAL_UART_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000ed8:	f000 fa04 	bl	80012e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000edc:	2100      	movs	r1, #0
 8000ede:	480d      	ldr	r0, [pc, #52]	; (8000f14 <MX_USART1_UART_Init+0x90>)
 8000ee0:	f009 f80a 	bl	8009ef8 <HAL_UARTEx_SetTxFifoThreshold>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000eea:	f000 f9fb 	bl	80012e4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eee:	2100      	movs	r1, #0
 8000ef0:	4808      	ldr	r0, [pc, #32]	; (8000f14 <MX_USART1_UART_Init+0x90>)
 8000ef2:	f009 f83f 	bl	8009f74 <HAL_UARTEx_SetRxFifoThreshold>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000efc:	f000 f9f2 	bl	80012e4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f00:	4804      	ldr	r0, [pc, #16]	; (8000f14 <MX_USART1_UART_Init+0x90>)
 8000f02:	f008 ffc0 	bl	8009e86 <HAL_UARTEx_DisableFifoMode>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f0c:	f000 f9ea 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	200003a4 	.word	0x200003a4
 8000f18:	40013800 	.word	0x40013800

08000f1c <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f22:	463b      	mov	r3, r7
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
 8000f30:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000f32:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000f36:	f7ff fc51 	bl	80007dc <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f7ff fc32 	bl	80007a4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000f40:	2002      	movs	r0, #2
 8000f42:	f7ff fc2f 	bl	80007a4 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PA15 (JTDI)   ------> UCPD1_CC1
  PB15   ------> UCPD1_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f4a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f50:	2300      	movs	r3, #0
 8000f52:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f54:	463b      	mov	r3, r7
 8000f56:	4619      	mov	r1, r3
 8000f58:	4809      	ldr	r0, [pc, #36]	; (8000f80 <MX_UCPD1_Init+0x64>)
 8000f5a:	f009 fa01 	bl	800a360 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f62:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000f64:	2303      	movs	r3, #3
 8000f66:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6c:	463b      	mov	r3, r7
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <MX_UCPD1_Init+0x68>)
 8000f72:	f009 f9f5 	bl	800a360 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000f76:	bf00      	nop
 8000f78:	3718      	adds	r7, #24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	42020000 	.word	0x42020000
 8000f84:	42020400 	.word	0x42020400

08000f88 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000f8e:	4a13      	ldr	r2, [pc, #76]	; (8000fdc <MX_USB_OTG_FS_PCD_Init+0x54>)
 8000f90:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000f94:	2206      	movs	r2, #6
 8000f96:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000fc4:	f002 fe2e 	bl	8003c24 <HAL_PCD_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_USB_OTG_FS_PCD_Init+0x4a>
  {
    Error_Handler();
 8000fce:	f000 f989 	bl	80012e4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000434 	.word	0x20000434
 8000fdc:	42040000 	.word	0x42040000

08000fe0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08e      	sub	sp, #56	; 0x38
 8000fe4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
 8000ff4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ff6:	4bb2      	ldr	r3, [pc, #712]	; (80012c0 <MX_GPIO_Init+0x2e0>)
 8000ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000ffc:	4ab0      	ldr	r2, [pc, #704]	; (80012c0 <MX_GPIO_Init+0x2e0>)
 8000ffe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001002:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001006:	4bae      	ldr	r3, [pc, #696]	; (80012c0 <MX_GPIO_Init+0x2e0>)
 8001008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800100c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001010:	623b      	str	r3, [r7, #32]
 8001012:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001014:	4baa      	ldr	r3, [pc, #680]	; (80012c0 <MX_GPIO_Init+0x2e0>)
 8001016:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800101a:	4aa9      	ldr	r2, [pc, #676]	; (80012c0 <MX_GPIO_Init+0x2e0>)
 800101c:	f043 0304 	orr.w	r3, r3, #4
 8001020:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001024:	4ba6      	ldr	r3, [pc, #664]	; (80012c0 <MX_GPIO_Init+0x2e0>)
 8001026:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800102a:	f003 0304 	and.w	r3, r3, #4
 800102e:	61fb      	str	r3, [r7, #28]
 8001030:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	4ba3      	ldr	r3, [pc, #652]	; (80012c0 <MX_GPIO_Init+0x2e0>)
 8001034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001038:	4aa1      	ldr	r2, [pc, #644]	; (80012c0 <MX_GPIO_Init+0x2e0>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001042:	4b9f      	ldr	r3, [pc, #636]	; (80012c0 <MX_GPIO_Init+0x2e0>)
 8001044:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	61bb      	str	r3, [r7, #24]
 800104e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001050:	4b9b      	ldr	r3, [pc, #620]	; (80012c0 <MX_GPIO_Init+0x2e0>)
 8001052:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001056:	4a9a      	ldr	r2, [pc, #616]	; (80012c0 <MX_GPIO_Init+0x2e0>)
 8001058:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800105c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001060:	4b97      	ldr	r3, [pc, #604]	; (80012c0 <MX_GPIO_Init+0x2e0>)
 8001062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800106e:	4b94      	ldr	r3, [pc, #592]	; (80012c0 <MX_GPIO_Init+0x2e0>)
 8001070:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001074:	4a92      	ldr	r2, [pc, #584]	; (80012c0 <MX_GPIO_Init+0x2e0>)
 8001076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800107a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800107e:	4b90      	ldr	r3, [pc, #576]	; (80012c0 <MX_GPIO_Init+0x2e0>)
 8001080:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001088:	613b      	str	r3, [r7, #16]
 800108a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800108c:	4b8c      	ldr	r3, [pc, #560]	; (80012c0 <MX_GPIO_Init+0x2e0>)
 800108e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001092:	4a8b      	ldr	r2, [pc, #556]	; (80012c0 <MX_GPIO_Init+0x2e0>)
 8001094:	f043 0302 	orr.w	r3, r3, #2
 8001098:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800109c:	4b88      	ldr	r3, [pc, #544]	; (80012c0 <MX_GPIO_Init+0x2e0>)
 800109e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	60fb      	str	r3, [r7, #12]
 80010a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010aa:	4b85      	ldr	r3, [pc, #532]	; (80012c0 <MX_GPIO_Init+0x2e0>)
 80010ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010b0:	4a83      	ldr	r2, [pc, #524]	; (80012c0 <MX_GPIO_Init+0x2e0>)
 80010b2:	f043 0308 	orr.w	r3, r3, #8
 80010b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80010ba:	4b81      	ldr	r3, [pc, #516]	; (80012c0 <MX_GPIO_Init+0x2e0>)
 80010bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010c0:	f003 0308 	and.w	r3, r3, #8
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010c8:	4b7d      	ldr	r3, [pc, #500]	; (80012c0 <MX_GPIO_Init+0x2e0>)
 80010ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010ce:	4a7c      	ldr	r2, [pc, #496]	; (80012c0 <MX_GPIO_Init+0x2e0>)
 80010d0:	f043 0310 	orr.w	r3, r3, #16
 80010d4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80010d8:	4b79      	ldr	r3, [pc, #484]	; (80012c0 <MX_GPIO_Init+0x2e0>)
 80010da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010de:	f003 0310 	and.w	r3, r3, #16
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010e6:	4b76      	ldr	r3, [pc, #472]	; (80012c0 <MX_GPIO_Init+0x2e0>)
 80010e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010ec:	4a74      	ldr	r2, [pc, #464]	; (80012c0 <MX_GPIO_Init+0x2e0>)
 80010ee:	f043 0320 	orr.w	r3, r3, #32
 80010f2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80010f6:	4b72      	ldr	r3, [pc, #456]	; (80012c0 <MX_GPIO_Init+0x2e0>)
 80010f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010fc:	f003 0320 	and.w	r3, r3, #32
 8001100:	603b      	str	r3, [r7, #0]
 8001102:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_PWR_GPIO_Port, UCPD_PWR_Pin, GPIO_PIN_RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	2120      	movs	r1, #32
 8001108:	486e      	ldr	r0, [pc, #440]	; (80012c4 <MX_GPIO_Init+0x2e4>)
 800110a:	f001 fb2d 	bl	8002768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin, GPIO_PIN_RESET);
 800110e:	2200      	movs	r2, #0
 8001110:	21c2      	movs	r1, #194	; 0xc2
 8001112:	486d      	ldr	r0, [pc, #436]	; (80012c8 <MX_GPIO_Init+0x2e8>)
 8001114:	f001 fb28 	bl	8002768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WRLS_WKUP_B_GPIO_Port, WRLS_WKUP_B_Pin, GPIO_PIN_RESET);
 8001118:	2200      	movs	r2, #0
 800111a:	2140      	movs	r1, #64	; 0x40
 800111c:	486b      	ldr	r0, [pc, #428]	; (80012cc <MX_GPIO_Init+0x2ec>)
 800111e:	f001 fb23 	bl	8002768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin, GPIO_PIN_RESET);
 8001122:	2200      	movs	r2, #0
 8001124:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8001128:	4869      	ldr	r0, [pc, #420]	; (80012d0 <MX_GPIO_Init+0x2f0>)
 800112a:	f001 fb1d 	bl	8002768 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WRLS_FLOW_Pin Mems_VLX_GPIO_Pin Mems_INT_LPS22HH_Pin */
  GPIO_InitStruct.Pin = WRLS_FLOW_Pin|Mems_VLX_GPIO_Pin|Mems_INT_LPS22HH_Pin;
 800112e:	f248 0324 	movw	r3, #32804	; 0x8024
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001134:	2300      	movs	r3, #0
 8001136:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800113c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001140:	4619      	mov	r1, r3
 8001142:	4862      	ldr	r0, [pc, #392]	; (80012cc <MX_GPIO_Init+0x2ec>)
 8001144:	f001 f938 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3_BOOT0_Pin */
  GPIO_InitStruct.Pin = PH3_BOOT0_Pin;
 8001148:	2308      	movs	r3, #8
 800114a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800114c:	2300      	movs	r3, #0
 800114e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001150:	2300      	movs	r3, #0
 8001152:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PH3_BOOT0_GPIO_Port, &GPIO_InitStruct);
 8001154:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001158:	4619      	mov	r1, r3
 800115a:	485b      	ldr	r0, [pc, #364]	; (80012c8 <MX_GPIO_Init+0x2e8>)
 800115c:	f001 f92c 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_PWR_Pin */
  GPIO_InitStruct.Pin = UCPD_PWR_Pin;
 8001160:	2320      	movs	r3, #32
 8001162:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001164:	2301      	movs	r3, #1
 8001166:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(UCPD_PWR_GPIO_Port, &GPIO_InitStruct);
 8001170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001174:	4619      	mov	r1, r3
 8001176:	4853      	ldr	r0, [pc, #332]	; (80012c4 <MX_GPIO_Init+0x2e4>)
 8001178:	f001 f91e 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH13_Pin */
  GPIO_InitStruct.Pin = PH13_Pin;
 800117c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001180:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001182:	2303      	movs	r3, #3
 8001184:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PH13_GPIO_Port, &GPIO_InitStruct);
 800118a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118e:	4619      	mov	r1, r3
 8001190:	484d      	ldr	r0, [pc, #308]	; (80012c8 <MX_GPIO_Init+0x2e8>)
 8001192:	f001 f911 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Button_Pin */
  GPIO_InitStruct.Pin = USER_Button_Pin;
 8001196:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800119a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800119c:	2300      	movs	r3, #0
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Button_GPIO_Port, &GPIO_InitStruct);
 80011a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a8:	4619      	mov	r1, r3
 80011aa:	484a      	ldr	r0, [pc, #296]	; (80012d4 <MX_GPIO_Init+0x2f4>)
 80011ac:	f001 f904 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin Mems_VL53_xshut_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin;
 80011b0:	23c2      	movs	r3, #194	; 0xc2
 80011b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b4:	2301      	movs	r3, #1
 80011b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c4:	4619      	mov	r1, r3
 80011c6:	4840      	ldr	r0, [pc, #256]	; (80012c8 <MX_GPIO_Init+0x2e8>)
 80011c8:	f001 f8f6 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CCK1_Pin */
  GPIO_InitStruct.Pin = MIC_CCK1_Pin;
 80011cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2300      	movs	r3, #0
 80011dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 80011de:	2306      	movs	r3, #6
 80011e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_CCK1_GPIO_Port, &GPIO_InitStruct);
 80011e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e6:	4619      	mov	r1, r3
 80011e8:	4839      	ldr	r0, [pc, #228]	; (80012d0 <MX_GPIO_Init+0x2f0>)
 80011ea:	f001 f8e5 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : WRLS_WKUP_B_Pin */
  GPIO_InitStruct.Pin = WRLS_WKUP_B_Pin;
 80011ee:	2340      	movs	r3, #64	; 0x40
 80011f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f2:	2301      	movs	r3, #1
 80011f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f6:	2300      	movs	r3, #0
 80011f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fa:	2300      	movs	r3, #0
 80011fc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WRLS_WKUP_B_GPIO_Port, &GPIO_InitStruct);
 80011fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001202:	4619      	mov	r1, r3
 8001204:	4831      	ldr	r0, [pc, #196]	; (80012cc <MX_GPIO_Init+0x2ec>)
 8001206:	f001 f8d7 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : WRLS_NOTIFY_Pin Mems_INT_IIS2MDC_Pin USB_IANA_Pin Mems_INT_IIS2MDCD9_Pin */
  GPIO_InitStruct.Pin = WRLS_NOTIFY_Pin|Mems_INT_IIS2MDC_Pin|USB_IANA_Pin|Mems_INT_IIS2MDCD9_Pin;
 800120a:	f44f 43cc 	mov.w	r3, #26112	; 0x6600
 800120e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001210:	2300      	movs	r3, #0
 8001212:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121c:	4619      	mov	r1, r3
 800121e:	482e      	ldr	r0, [pc, #184]	; (80012d8 <MX_GPIO_Init+0x2f8>)
 8001220:	f001 f8ca 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_UCPD_FLT_Pin Mems_ISM330DLC_INT1_Pin */
  GPIO_InitStruct.Pin = USB_UCPD_FLT_Pin|Mems_ISM330DLC_INT1_Pin;
 8001224:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800122a:	2300      	movs	r3, #0
 800122c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001236:	4619      	mov	r1, r3
 8001238:	4828      	ldr	r0, [pc, #160]	; (80012dc <MX_GPIO_Init+0x2fc>)
 800123a:	f001 f8bd 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_SENSE_Pin;
 800123e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001242:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001244:	2300      	movs	r3, #0
 8001246:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 800124c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001250:	4619      	mov	r1, r3
 8001252:	481f      	ldr	r0, [pc, #124]	; (80012d0 <MX_GPIO_Init+0x2f0>)
 8001254:	f001 f8b0 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001258:	2304      	movs	r3, #4
 800125a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001268:	2301      	movs	r3, #1
 800126a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001270:	4619      	mov	r1, r3
 8001272:	481b      	ldr	r0, [pc, #108]	; (80012e0 <MX_GPIO_Init+0x300>)
 8001274:	f001 f8a0 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Mems_STSAFE_RESET_Pin WRLS_WKUP_W_Pin */
  GPIO_InitStruct.Pin = Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin;
 8001278:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800127e:	2301      	movs	r3, #1
 8001280:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001286:	2300      	movs	r3, #0
 8001288:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800128a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128e:	4619      	mov	r1, r3
 8001290:	480f      	ldr	r0, [pc, #60]	; (80012d0 <MX_GPIO_Init+0x2f0>)
 8001292:	f001 f891 	bl	80023b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_SDIN0_Pin */
  GPIO_InitStruct.Pin = MIC_SDIN0_Pin;
 8001296:	2302      	movs	r3, #2
 8001298:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129a:	2302      	movs	r3, #2
 800129c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 80012a6:	2306      	movs	r3, #6
 80012a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_SDIN0_GPIO_Port, &GPIO_InitStruct);
 80012aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ae:	4619      	mov	r1, r3
 80012b0:	4804      	ldr	r0, [pc, #16]	; (80012c4 <MX_GPIO_Init+0x2e4>)
 80012b2:	f001 f881 	bl	80023b8 <HAL_GPIO_Init>

}
 80012b6:	bf00      	nop
 80012b8:	3738      	adds	r7, #56	; 0x38
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	46020c00 	.word	0x46020c00
 80012c4:	42020400 	.word	0x42020400
 80012c8:	42021c00 	.word	0x42021c00
 80012cc:	42021800 	.word	0x42021800
 80012d0:	42021400 	.word	0x42021400
 80012d4:	42020800 	.word	0x42020800
 80012d8:	42020c00 	.word	0x42020c00
 80012dc:	42021000 	.word	0x42021000
 80012e0:	42020000 	.word	0x42020000

080012e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e8:	b672      	cpsid	i
}
 80012ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ec:	e7fe      	b.n	80012ec <Error_Handler+0x8>
	...

080012f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80012f6:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <HAL_MspInit+0x30>)
 80012f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012fc:	4a08      	ldr	r2, [pc, #32]	; (8001320 <HAL_MspInit+0x30>)
 80012fe:	f043 0304 	orr.w	r3, r3, #4
 8001302:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001306:	4b06      	ldr	r3, [pc, #24]	; (8001320 <HAL_MspInit+0x30>)
 8001308:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800130c:	f003 0304 	and.w	r3, r3, #4
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	46020c00 	.word	0x46020c00

08001324 <HAL_MDF_MspInit>:
* This function configures the hardware resources used in this example
* @param hmdf: MDF handle pointer
* @retval None
*/
void HAL_MDF_MspInit(MDF_HandleTypeDef* hmdf)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b0bc      	sub	sp, #240	; 0xf0
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800133c:	f107 0310 	add.w	r3, r7, #16
 8001340:	22c8      	movs	r2, #200	; 0xc8
 8001342:	2100      	movs	r1, #0
 8001344:	4618      	mov	r0, r3
 8001346:	f009 fb6d 	bl	800aa24 <memset>
  if(IS_ADF_INSTANCE(hmdf->Instance))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4a27      	ldr	r2, [pc, #156]	; (80013ec <HAL_MDF_MspInit+0xc8>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d146      	bne.n	80013e2 <HAL_MDF_MspInit+0xbe>

  /* USER CODE END ADF1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADF1;
 8001354:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001358:	f04f 0300 	mov.w	r3, #0
 800135c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Adf1ClockSelection = RCC_ADF1CLKSOURCE_HCLK;
 8001360:	2300      	movs	r3, #0
 8001362:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001366:	f107 0310 	add.w	r3, r7, #16
 800136a:	4618      	mov	r0, r3
 800136c:	f004 f940 	bl	80055f0 <HAL_RCCEx_PeriphCLKConfig>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_MDF_MspInit+0x56>
    {
      Error_Handler();
 8001376:	f7ff ffb5 	bl	80012e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADF1_CLK_ENABLE();
 800137a:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <HAL_MDF_MspInit+0xcc>)
 800137c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001380:	4a1b      	ldr	r2, [pc, #108]	; (80013f0 <HAL_MDF_MspInit+0xcc>)
 8001382:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001386:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800138a:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <HAL_MDF_MspInit+0xcc>)
 800138c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001398:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <HAL_MDF_MspInit+0xcc>)
 800139a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800139e:	4a14      	ldr	r2, [pc, #80]	; (80013f0 <HAL_MDF_MspInit+0xcc>)
 80013a0:	f043 0310 	orr.w	r3, r3, #16
 80013a4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <HAL_MDF_MspInit+0xcc>)
 80013aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013ae:	f003 0310 	and.w	r3, r3, #16
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
    /**ADF1 GPIO Configuration
    PE10     ------> ADF1_SDI0
    PE9     ------> ADF1_CCK0
    */
    GPIO_InitStruct.Pin = MIC_SDINx_Pin|MIC_CCK0_Pin;
 80013b6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80013ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013be:	2302      	movs	r3, #2
 80013c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2300      	movs	r3, #0
 80013cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 80013d0:	2303      	movs	r3, #3
 80013d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013d6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80013da:	4619      	mov	r1, r3
 80013dc:	4805      	ldr	r0, [pc, #20]	; (80013f4 <HAL_MDF_MspInit+0xd0>)
 80013de:	f000 ffeb 	bl	80023b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADF1_MspInit 1 */

  /* USER CODE END ADF1_MspInit 1 */
  }

}
 80013e2:	bf00      	nop
 80013e4:	37f0      	adds	r7, #240	; 0xf0
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	46024080 	.word	0x46024080
 80013f0:	46020c00 	.word	0x46020c00
 80013f4:	42021000 	.word	0x42021000

080013f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b0be      	sub	sp, #248	; 0xf8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001400:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001410:	f107 0318 	add.w	r3, r7, #24
 8001414:	22c8      	movs	r2, #200	; 0xc8
 8001416:	2100      	movs	r1, #0
 8001418:	4618      	mov	r0, r3
 800141a:	f009 fb03 	bl	800aa24 <memset>
  if(hi2c->Instance==I2C1)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a4d      	ldr	r2, [pc, #308]	; (8001558 <HAL_I2C_MspInit+0x160>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d147      	bne.n	80014b8 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001428:	f04f 0240 	mov.w	r2, #64	; 0x40
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001434:	2300      	movs	r3, #0
 8001436:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800143a:	f107 0318 	add.w	r3, r7, #24
 800143e:	4618      	mov	r0, r3
 8001440:	f004 f8d6 	bl	80055f0 <HAL_RCCEx_PeriphCLKConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800144a:	f7ff ff4b 	bl	80012e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800144e:	4b43      	ldr	r3, [pc, #268]	; (800155c <HAL_I2C_MspInit+0x164>)
 8001450:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001454:	4a41      	ldr	r2, [pc, #260]	; (800155c <HAL_I2C_MspInit+0x164>)
 8001456:	f043 0302 	orr.w	r3, r3, #2
 800145a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800145e:	4b3f      	ldr	r3, [pc, #252]	; (800155c <HAL_I2C_MspInit+0x164>)
 8001460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001464:	f003 0302 	and.w	r3, r3, #2
 8001468:	617b      	str	r3, [r7, #20]
 800146a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 800146c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001470:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001474:	2312      	movs	r3, #18
 8001476:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001480:	2300      	movs	r3, #0
 8001482:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001486:	2304      	movs	r3, #4
 8001488:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001490:	4619      	mov	r1, r3
 8001492:	4833      	ldr	r0, [pc, #204]	; (8001560 <HAL_I2C_MspInit+0x168>)
 8001494:	f000 ff90 	bl	80023b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001498:	4b30      	ldr	r3, [pc, #192]	; (800155c <HAL_I2C_MspInit+0x164>)
 800149a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800149e:	4a2f      	ldr	r2, [pc, #188]	; (800155c <HAL_I2C_MspInit+0x164>)
 80014a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014a4:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80014a8:	4b2c      	ldr	r3, [pc, #176]	; (800155c <HAL_I2C_MspInit+0x164>)
 80014aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80014ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b2:	613b      	str	r3, [r7, #16]
 80014b4:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014b6:	e04a      	b.n	800154e <HAL_I2C_MspInit+0x156>
  else if(hi2c->Instance==I2C2)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a29      	ldr	r2, [pc, #164]	; (8001564 <HAL_I2C_MspInit+0x16c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d145      	bne.n	800154e <HAL_I2C_MspInit+0x156>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80014c2:	f04f 0280 	mov.w	r2, #128	; 0x80
 80014c6:	f04f 0300 	mov.w	r3, #0
 80014ca:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d4:	f107 0318 	add.w	r3, r7, #24
 80014d8:	4618      	mov	r0, r3
 80014da:	f004 f889 	bl	80055f0 <HAL_RCCEx_PeriphCLKConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 80014e4:	f7ff fefe 	bl	80012e4 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80014e8:	4b1c      	ldr	r3, [pc, #112]	; (800155c <HAL_I2C_MspInit+0x164>)
 80014ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014ee:	4a1b      	ldr	r2, [pc, #108]	; (800155c <HAL_I2C_MspInit+0x164>)
 80014f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014f4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80014f8:	4b18      	ldr	r3, [pc, #96]	; (800155c <HAL_I2C_MspInit+0x164>)
 80014fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001506:	2330      	movs	r3, #48	; 0x30
 8001508:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800150c:	2312      	movs	r3, #18
 800150e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001518:	2300      	movs	r3, #0
 800151a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800151e:	2304      	movs	r3, #4
 8001520:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001524:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001528:	4619      	mov	r1, r3
 800152a:	480f      	ldr	r0, [pc, #60]	; (8001568 <HAL_I2C_MspInit+0x170>)
 800152c:	f000 ff44 	bl	80023b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <HAL_I2C_MspInit+0x164>)
 8001532:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001536:	4a09      	ldr	r2, [pc, #36]	; (800155c <HAL_I2C_MspInit+0x164>)
 8001538:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800153c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <HAL_I2C_MspInit+0x164>)
 8001542:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
}
 800154e:	bf00      	nop
 8001550:	37f8      	adds	r7, #248	; 0xf8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40005400 	.word	0x40005400
 800155c:	46020c00 	.word	0x46020c00
 8001560:	42020400 	.word	0x42020400
 8001564:	40005800 	.word	0x40005800
 8001568:	42021c00 	.word	0x42021c00

0800156c <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b0c6      	sub	sp, #280	; 0x118
 8001570:	af00      	add	r7, sp, #0
 8001572:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001576:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800157a:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
 8001586:	609a      	str	r2, [r3, #8]
 8001588:	60da      	str	r2, [r3, #12]
 800158a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800158c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001590:	22c8      	movs	r2, #200	; 0xc8
 8001592:	2100      	movs	r1, #0
 8001594:	4618      	mov	r0, r3
 8001596:	f009 fa45 	bl	800aa24 <memset>
  if(hospi->Instance==OCTOSPI1)
 800159a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800159e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a96      	ldr	r2, [pc, #600]	; (8001800 <HAL_OSPI_MspInit+0x294>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	f040 813b 	bne.w	8001824 <HAL_OSPI_MspInit+0x2b8>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80015ae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015b2:	f04f 0300 	mov.w	r3, #0
 80015b6:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015c4:	4618      	mov	r0, r3
 80015c6:	f004 f813 	bl	80055f0 <HAL_RCCEx_PeriphCLKConfig>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 80015d0:	f7ff fe88 	bl	80012e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80015d4:	4b8b      	ldr	r3, [pc, #556]	; (8001804 <HAL_OSPI_MspInit+0x298>)
 80015d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015da:	4a8a      	ldr	r2, [pc, #552]	; (8001804 <HAL_OSPI_MspInit+0x298>)
 80015dc:	f043 0310 	orr.w	r3, r3, #16
 80015e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80015e4:	4b87      	ldr	r3, [pc, #540]	; (8001804 <HAL_OSPI_MspInit+0x298>)
 80015e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ea:	f003 0310 	and.w	r3, r3, #16
 80015ee:	637b      	str	r3, [r7, #52]	; 0x34
 80015f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80015f2:	4b84      	ldr	r3, [pc, #528]	; (8001804 <HAL_OSPI_MspInit+0x298>)
 80015f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80015f8:	4a82      	ldr	r2, [pc, #520]	; (8001804 <HAL_OSPI_MspInit+0x298>)
 80015fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001602:	4b80      	ldr	r3, [pc, #512]	; (8001804 <HAL_OSPI_MspInit+0x298>)
 8001604:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800160c:	633b      	str	r3, [r7, #48]	; 0x30
 800160e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001610:	4b7c      	ldr	r3, [pc, #496]	; (8001804 <HAL_OSPI_MspInit+0x298>)
 8001612:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001616:	4a7b      	ldr	r2, [pc, #492]	; (8001804 <HAL_OSPI_MspInit+0x298>)
 8001618:	f043 0310 	orr.w	r3, r3, #16
 800161c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001620:	4b78      	ldr	r3, [pc, #480]	; (8001804 <HAL_OSPI_MspInit+0x298>)
 8001622:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001626:	f003 0310 	and.w	r3, r3, #16
 800162a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800162c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800162e:	4b75      	ldr	r3, [pc, #468]	; (8001804 <HAL_OSPI_MspInit+0x298>)
 8001630:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001634:	4a73      	ldr	r2, [pc, #460]	; (8001804 <HAL_OSPI_MspInit+0x298>)
 8001636:	f043 0308 	orr.w	r3, r3, #8
 800163a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800163e:	4b71      	ldr	r3, [pc, #452]	; (8001804 <HAL_OSPI_MspInit+0x298>)
 8001640:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001644:	f003 0308 	and.w	r3, r3, #8
 8001648:	62bb      	str	r3, [r7, #40]	; 0x28
 800164a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800164c:	4b6d      	ldr	r3, [pc, #436]	; (8001804 <HAL_OSPI_MspInit+0x298>)
 800164e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001652:	4a6c      	ldr	r2, [pc, #432]	; (8001804 <HAL_OSPI_MspInit+0x298>)
 8001654:	f043 0320 	orr.w	r3, r3, #32
 8001658:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800165c:	4b69      	ldr	r3, [pc, #420]	; (8001804 <HAL_OSPI_MspInit+0x298>)
 800165e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001662:	f003 0320 	and.w	r3, r3, #32
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800166a:	4b66      	ldr	r3, [pc, #408]	; (8001804 <HAL_OSPI_MspInit+0x298>)
 800166c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001670:	4a64      	ldr	r2, [pc, #400]	; (8001804 <HAL_OSPI_MspInit+0x298>)
 8001672:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001676:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800167a:	4b62      	ldr	r3, [pc, #392]	; (8001804 <HAL_OSPI_MspInit+0x298>)
 800167c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001684:	623b      	str	r3, [r7, #32]
 8001686:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001688:	4b5e      	ldr	r3, [pc, #376]	; (8001804 <HAL_OSPI_MspInit+0x298>)
 800168a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800168e:	4a5d      	ldr	r2, [pc, #372]	; (8001804 <HAL_OSPI_MspInit+0x298>)
 8001690:	f043 0304 	orr.w	r3, r3, #4
 8001694:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001698:	4b5a      	ldr	r3, [pc, #360]	; (8001804 <HAL_OSPI_MspInit+0x298>)
 800169a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	61fb      	str	r3, [r7, #28]
 80016a4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a6:	4b57      	ldr	r3, [pc, #348]	; (8001804 <HAL_OSPI_MspInit+0x298>)
 80016a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016ac:	4a55      	ldr	r2, [pc, #340]	; (8001804 <HAL_OSPI_MspInit+0x298>)
 80016ae:	f043 0302 	orr.w	r3, r3, #2
 80016b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016b6:	4b53      	ldr	r3, [pc, #332]	; (8001804 <HAL_OSPI_MspInit+0x298>)
 80016b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016bc:	f003 0202 	and.w	r2, r3, #2
 80016c0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80016c4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80016ce:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80016d2:	681b      	ldr	r3, [r3, #0]
    PF6     ------> OCTOSPIM_P1_IO3
    PC3     ------> OCTOSPIM_P1_IO6
    PB10     ------> OCTOSPIM_P1_CLK
    PB11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = OCTOSPI_R_IO5_Pin;
 80016d4:	2301      	movs	r3, #1
 80016d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016da:	2302      	movs	r3, #2
 80016dc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e0:	2300      	movs	r3, #0
 80016e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e6:	2303      	movs	r3, #3
 80016e8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80016ec:	2303      	movs	r3, #3
 80016ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_R_IO5_GPIO_Port, &GPIO_InitStruct);
 80016f2:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80016f6:	4619      	mov	r1, r3
 80016f8:	4843      	ldr	r0, [pc, #268]	; (8001808 <HAL_OSPI_MspInit+0x29c>)
 80016fa:	f000 fe5d 	bl	80023b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_DQS_Pin;
 80016fe:	2308      	movs	r3, #8
 8001700:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170a:	2300      	movs	r3, #0
 800170c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001710:	2303      	movs	r3, #3
 8001712:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8001716:	2303      	movs	r3, #3
 8001718:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_R_DQS_GPIO_Port, &GPIO_InitStruct);
 800171c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001720:	4619      	mov	r1, r3
 8001722:	483a      	ldr	r0, [pc, #232]	; (800180c <HAL_OSPI_MspInit+0x2a0>)
 8001724:	f000 fe48 	bl	80023b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO7_Pin;
 8001728:	2380      	movs	r3, #128	; 0x80
 800172a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172e:	2302      	movs	r3, #2
 8001730:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173a:	2303      	movs	r3, #3
 800173c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001740:	230a      	movs	r3, #10
 8001742:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_R_IO7_GPIO_Port, &GPIO_InitStruct);
 8001746:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800174a:	4619      	mov	r1, r3
 800174c:	4830      	ldr	r0, [pc, #192]	; (8001810 <HAL_OSPI_MspInit+0x2a4>)
 800174e:	f000 fe33 	bl	80023b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO0_Pin|OCTOSPI_R_IO2_Pin|OCTOSPI_R_IO1_Pin|OCTOSPI_R_IO3_Pin;
 8001752:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001756:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175a:	2302      	movs	r3, #2
 800175c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001760:	2300      	movs	r3, #0
 8001762:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001766:	2303      	movs	r3, #3
 8001768:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800176c:	230a      	movs	r3, #10
 800176e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001772:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001776:	4619      	mov	r1, r3
 8001778:	4826      	ldr	r0, [pc, #152]	; (8001814 <HAL_OSPI_MspInit+0x2a8>)
 800177a:	f000 fe1d 	bl	80023b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO4_Pin;
 800177e:	2304      	movs	r3, #4
 8001780:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	2302      	movs	r3, #2
 8001786:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001790:	2303      	movs	r3, #3
 8001792:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8001796:	2303      	movs	r3, #3
 8001798:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_R_IO4_GPIO_Port, &GPIO_InitStruct);
 800179c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80017a0:	4619      	mov	r1, r3
 80017a2:	481d      	ldr	r0, [pc, #116]	; (8001818 <HAL_OSPI_MspInit+0x2ac>)
 80017a4:	f000 fe08 	bl	80023b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO6_Pin;
 80017a8:	2308      	movs	r3, #8
 80017aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ba:	2303      	movs	r3, #3
 80017bc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80017c0:	230a      	movs	r3, #10
 80017c2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_R_IO6_GPIO_Port, &GPIO_InitStruct);
 80017c6:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80017ca:	4619      	mov	r1, r3
 80017cc:	4813      	ldr	r0, [pc, #76]	; (800181c <HAL_OSPI_MspInit+0x2b0>)
 80017ce:	f000 fdf3 	bl	80023b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_CLK_P_Pin|OCTOSPI_R_NCS_Pin;
 80017d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	2300      	movs	r3, #0
 80017e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e6:	2303      	movs	r3, #3
 80017e8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80017ec:	230a      	movs	r3, #10
 80017ee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f2:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80017f6:	4619      	mov	r1, r3
 80017f8:	4809      	ldr	r0, [pc, #36]	; (8001820 <HAL_OSPI_MspInit+0x2b4>)
 80017fa:	f000 fddd 	bl	80023b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 80017fe:	e0cb      	b.n	8001998 <HAL_OSPI_MspInit+0x42c>
 8001800:	420d1400 	.word	0x420d1400
 8001804:	46020c00 	.word	0x46020c00
 8001808:	42022000 	.word	0x42022000
 800180c:	42021000 	.word	0x42021000
 8001810:	42020c00 	.word	0x42020c00
 8001814:	42021400 	.word	0x42021400
 8001818:	42021c00 	.word	0x42021c00
 800181c:	42020800 	.word	0x42020800
 8001820:	42020400 	.word	0x42020400
  else if(hospi->Instance==OCTOSPI2)
 8001824:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001828:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a5c      	ldr	r2, [pc, #368]	; (80019a4 <HAL_OSPI_MspInit+0x438>)
 8001832:	4293      	cmp	r3, r2
 8001834:	f040 80b0 	bne.w	8001998 <HAL_OSPI_MspInit+0x42c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001838:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800183c:	f04f 0300 	mov.w	r3, #0
 8001840:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001844:	2300      	movs	r3, #0
 8001846:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800184a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800184e:	4618      	mov	r0, r3
 8001850:	f003 fece 	bl	80055f0 <HAL_RCCEx_PeriphCLKConfig>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_OSPI_MspInit+0x2f2>
      Error_Handler();
 800185a:	f7ff fd43 	bl	80012e4 <Error_Handler>
    __HAL_RCC_OSPI2_CLK_ENABLE();
 800185e:	4b52      	ldr	r3, [pc, #328]	; (80019a8 <HAL_OSPI_MspInit+0x43c>)
 8001860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001864:	4a50      	ldr	r2, [pc, #320]	; (80019a8 <HAL_OSPI_MspInit+0x43c>)
 8001866:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800186a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800186e:	4b4e      	ldr	r3, [pc, #312]	; (80019a8 <HAL_OSPI_MspInit+0x43c>)
 8001870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001874:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8001878:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800187c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001886:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800188a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800188c:	4b46      	ldr	r3, [pc, #280]	; (80019a8 <HAL_OSPI_MspInit+0x43c>)
 800188e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001892:	4a45      	ldr	r2, [pc, #276]	; (80019a8 <HAL_OSPI_MspInit+0x43c>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001898:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800189c:	4b42      	ldr	r3, [pc, #264]	; (80019a8 <HAL_OSPI_MspInit+0x43c>)
 800189e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018a2:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80018a6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80018aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80018b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80018b8:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ba:	4b3b      	ldr	r3, [pc, #236]	; (80019a8 <HAL_OSPI_MspInit+0x43c>)
 80018bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018c0:	4a39      	ldr	r2, [pc, #228]	; (80019a8 <HAL_OSPI_MspInit+0x43c>)
 80018c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018c6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80018ca:	4b37      	ldr	r3, [pc, #220]	; (80019a8 <HAL_OSPI_MspInit+0x43c>)
 80018cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018d0:	f003 0280 	and.w	r2, r3, #128	; 0x80
 80018d4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80018d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80018e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80018e6:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80018e8:	4b2f      	ldr	r3, [pc, #188]	; (80019a8 <HAL_OSPI_MspInit+0x43c>)
 80018ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018ee:	4a2e      	ldr	r2, [pc, #184]	; (80019a8 <HAL_OSPI_MspInit+0x43c>)
 80018f0:	f043 0320 	orr.w	r3, r3, #32
 80018f4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80018f8:	4b2b      	ldr	r3, [pc, #172]	; (80019a8 <HAL_OSPI_MspInit+0x43c>)
 80018fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018fe:	f003 0220 	and.w	r2, r3, #32
 8001902:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001906:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001910:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001914:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = OCTOSPI_F_NCS_Pin;
 8001916:	2320      	movs	r3, #32
 8001918:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800191c:	2302      	movs	r3, #2
 800191e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001922:	2300      	movs	r3, #0
 8001924:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001928:	2303      	movs	r3, #3
 800192a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 800192e:	2305      	movs	r3, #5
 8001930:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_F_NCS_GPIO_Port, &GPIO_InitStruct);
 8001934:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001938:	4619      	mov	r1, r3
 800193a:	481c      	ldr	r0, [pc, #112]	; (80019ac <HAL_OSPI_MspInit+0x440>)
 800193c:	f000 fd3c 	bl	80023b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCTOSPI_F_IO7_Pin|OCTOSPI_F_IO5_Pin|OCTOSPI_F_IO6_Pin|OCTOSPI_F_IO4_Pin;
 8001940:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 8001944:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001948:	2302      	movs	r3, #2
 800194a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194e:	2300      	movs	r3, #0
 8001950:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001954:	2303      	movs	r3, #3
 8001956:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 800195a:	2305      	movs	r3, #5
 800195c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001960:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001964:	4619      	mov	r1, r3
 8001966:	4812      	ldr	r0, [pc, #72]	; (80019b0 <HAL_OSPI_MspInit+0x444>)
 8001968:	f000 fd26 	bl	80023b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCTOSPI_F_IO0_Pin|OCTOSPI_F_IO1_Pin|OCTOSPI_F_IO2_Pin|OCTOSPI_F_IO3_Pin
 800196c:	f241 031f 	movw	r3, #4127	; 0x101f
 8001970:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197a:	2300      	movs	r3, #0
 800197c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001980:	2303      	movs	r3, #3
 8001982:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8001986:	2305      	movs	r3, #5
 8001988:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800198c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001990:	4619      	mov	r1, r3
 8001992:	4808      	ldr	r0, [pc, #32]	; (80019b4 <HAL_OSPI_MspInit+0x448>)
 8001994:	f000 fd10 	bl	80023b8 <HAL_GPIO_Init>
}
 8001998:	bf00      	nop
 800199a:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	420d2400 	.word	0x420d2400
 80019a8:	46020c00 	.word	0x46020c00
 80019ac:	42022000 	.word	0x42022000
 80019b0:	42021c00 	.word	0x42021c00
 80019b4:	42021400 	.word	0x42021400

080019b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b0be      	sub	sp, #248	; 0xf8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019d0:	f107 0318 	add.w	r3, r7, #24
 80019d4:	22c8      	movs	r2, #200	; 0xc8
 80019d6:	2100      	movs	r1, #0
 80019d8:	4618      	mov	r0, r3
 80019da:	f009 f823 	bl	800aa24 <memset>
  if(hspi->Instance==SPI2)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a39      	ldr	r2, [pc, #228]	; (8001ac8 <HAL_SPI_MspInit+0x110>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d16b      	bne.n	8001ac0 <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80019e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80019ec:	f04f 0300 	mov.w	r3, #0
 80019f0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 80019f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019fc:	f107 0318 	add.w	r3, r7, #24
 8001a00:	4618      	mov	r0, r3
 8001a02:	f003 fdf5 	bl	80055f0 <HAL_RCCEx_PeriphCLKConfig>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001a0c:	f7ff fc6a 	bl	80012e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a10:	4b2e      	ldr	r3, [pc, #184]	; (8001acc <HAL_SPI_MspInit+0x114>)
 8001a12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a16:	4a2d      	ldr	r2, [pc, #180]	; (8001acc <HAL_SPI_MspInit+0x114>)
 8001a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a1c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001a20:	4b2a      	ldr	r3, [pc, #168]	; (8001acc <HAL_SPI_MspInit+0x114>)
 8001a22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a2a:	617b      	str	r3, [r7, #20]
 8001a2c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a2e:	4b27      	ldr	r3, [pc, #156]	; (8001acc <HAL_SPI_MspInit+0x114>)
 8001a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a34:	4a25      	ldr	r2, [pc, #148]	; (8001acc <HAL_SPI_MspInit+0x114>)
 8001a36:	f043 0308 	orr.w	r3, r3, #8
 8001a3a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a3e:	4b23      	ldr	r3, [pc, #140]	; (8001acc <HAL_SPI_MspInit+0x114>)
 8001a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4c:	4b1f      	ldr	r3, [pc, #124]	; (8001acc <HAL_SPI_MspInit+0x114>)
 8001a4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a52:	4a1e      	ldr	r2, [pc, #120]	; (8001acc <HAL_SPI_MspInit+0x114>)
 8001a54:	f043 0302 	orr.w	r3, r3, #2
 8001a58:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a5c:	4b1b      	ldr	r3, [pc, #108]	; (8001acc <HAL_SPI_MspInit+0x114>)
 8001a5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
    PD4     ------> SPI2_MOSI
    PD3     ------> SPI2_MISO
    PD1     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = WRLS_SPI2_MOSI_Pin|WRLS_SPI2_MISO_Pin|WRLS_SPI2_SCK_Pin;
 8001a6a:	231a      	movs	r3, #26
 8001a6c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a70:	2302      	movs	r3, #2
 8001a72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a82:	2305      	movs	r3, #5
 8001a84:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a88:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4810      	ldr	r0, [pc, #64]	; (8001ad0 <HAL_SPI_MspInit+0x118>)
 8001a90:	f000 fc92 	bl	80023b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WRLS_SPI2_NSS_Pin;
 8001a94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a98:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001aae:	2305      	movs	r3, #5
 8001ab0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(WRLS_SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8001ab4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4806      	ldr	r0, [pc, #24]	; (8001ad4 <HAL_SPI_MspInit+0x11c>)
 8001abc:	f000 fc7c 	bl	80023b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ac0:	bf00      	nop
 8001ac2:	37f8      	adds	r7, #248	; 0xf8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	40003800 	.word	0x40003800
 8001acc:	46020c00 	.word	0x46020c00
 8001ad0:	42020c00 	.word	0x42020c00
 8001ad4:	42020400 	.word	0x42020400

08001ad8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0e      	ldr	r2, [pc, #56]	; (8001b20 <HAL_TIM_PWM_MspInit+0x48>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d116      	bne.n	8001b18 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001aea:	4b0e      	ldr	r3, [pc, #56]	; (8001b24 <HAL_TIM_PWM_MspInit+0x4c>)
 8001aec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001af0:	4a0c      	ldr	r2, [pc, #48]	; (8001b24 <HAL_TIM_PWM_MspInit+0x4c>)
 8001af2:	f043 0302 	orr.w	r3, r3, #2
 8001af6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001afa:	4b0a      	ldr	r3, [pc, #40]	; (8001b24 <HAL_TIM_PWM_MspInit+0x4c>)
 8001afc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b00:	f003 0302 	and.w	r3, r3, #2
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	202e      	movs	r0, #46	; 0x2e
 8001b0e:	f000 fba2 	bl	8002256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b12:	202e      	movs	r0, #46	; 0x2e
 8001b14:	f000 fbb9 	bl	800228a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b18:	bf00      	nop
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40000400 	.word	0x40000400
 8001b24:	46020c00 	.word	0x46020c00

08001b28 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b30:	f107 030c 	add.w	r3, r7, #12
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a12      	ldr	r2, [pc, #72]	; (8001b90 <HAL_TIM_MspPostInit+0x68>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d11e      	bne.n	8001b88 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b4a:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <HAL_TIM_MspPostInit+0x6c>)
 8001b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b50:	4a10      	ldr	r2, [pc, #64]	; (8001b94 <HAL_TIM_MspPostInit+0x6c>)
 8001b52:	f043 0310 	orr.w	r3, r3, #16
 8001b56:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <HAL_TIM_MspPostInit+0x6c>)
 8001b5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b60:	f003 0310 	and.w	r3, r3, #16
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE5     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b68:	2320      	movs	r3, #32
 8001b6a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b7c:	f107 030c 	add.w	r3, r7, #12
 8001b80:	4619      	mov	r1, r3
 8001b82:	4805      	ldr	r0, [pc, #20]	; (8001b98 <HAL_TIM_MspPostInit+0x70>)
 8001b84:	f000 fc18 	bl	80023b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b88:	bf00      	nop
 8001b8a:	3720      	adds	r7, #32
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40000400 	.word	0x40000400
 8001b94:	46020c00 	.word	0x46020c00
 8001b98:	42021000 	.word	0x42021000

08001b9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b0be      	sub	sp, #248	; 0xf8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bb4:	f107 0318 	add.w	r3, r7, #24
 8001bb8:	22c8      	movs	r2, #200	; 0xc8
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f008 ff31 	bl	800aa24 <memset>
  if(huart->Instance==UART4)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a4c      	ldr	r2, [pc, #304]	; (8001cf8 <HAL_UART_MspInit+0x15c>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d146      	bne.n	8001c5a <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001bcc:	f04f 0208 	mov.w	r2, #8
 8001bd0:	f04f 0300 	mov.w	r3, #0
 8001bd4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bdc:	f107 0318 	add.w	r3, r7, #24
 8001be0:	4618      	mov	r0, r3
 8001be2:	f003 fd05 	bl	80055f0 <HAL_RCCEx_PeriphCLKConfig>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001bec:	f7ff fb7a 	bl	80012e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001bf0:	4b42      	ldr	r3, [pc, #264]	; (8001cfc <HAL_UART_MspInit+0x160>)
 8001bf2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001bf6:	4a41      	ldr	r2, [pc, #260]	; (8001cfc <HAL_UART_MspInit+0x160>)
 8001bf8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001bfc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001c00:	4b3e      	ldr	r3, [pc, #248]	; (8001cfc <HAL_UART_MspInit+0x160>)
 8001c02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c0e:	4b3b      	ldr	r3, [pc, #236]	; (8001cfc <HAL_UART_MspInit+0x160>)
 8001c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c14:	4a39      	ldr	r2, [pc, #228]	; (8001cfc <HAL_UART_MspInit+0x160>)
 8001c16:	f043 0304 	orr.w	r3, r3, #4
 8001c1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c1e:	4b37      	ldr	r3, [pc, #220]	; (8001cfc <HAL_UART_MspInit+0x160>)
 8001c20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c24:	f003 0304 	and.w	r3, r3, #4
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = WRLS_UART4_RX_Pin|WRLS_UART4_TX_Pin;
 8001c2c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c30:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c34:	2302      	movs	r3, #2
 8001c36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c40:	2300      	movs	r3, #0
 8001c42:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c46:	2308      	movs	r3, #8
 8001c48:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c4c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c50:	4619      	mov	r1, r3
 8001c52:	482b      	ldr	r0, [pc, #172]	; (8001d00 <HAL_UART_MspInit+0x164>)
 8001c54:	f000 fbb0 	bl	80023b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c58:	e04a      	b.n	8001cf0 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART1)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a29      	ldr	r2, [pc, #164]	; (8001d04 <HAL_UART_MspInit+0x168>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d145      	bne.n	8001cf0 <HAL_UART_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c64:	f04f 0201 	mov.w	r2, #1
 8001c68:	f04f 0300 	mov.w	r3, #0
 8001c6c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001c70:	2300      	movs	r3, #0
 8001c72:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c74:	f107 0318 	add.w	r3, r7, #24
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f003 fcb9 	bl	80055f0 <HAL_RCCEx_PeriphCLKConfig>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <HAL_UART_MspInit+0xec>
      Error_Handler();
 8001c84:	f7ff fb2e 	bl	80012e4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c88:	4b1c      	ldr	r3, [pc, #112]	; (8001cfc <HAL_UART_MspInit+0x160>)
 8001c8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001c8e:	4a1b      	ldr	r2, [pc, #108]	; (8001cfc <HAL_UART_MspInit+0x160>)
 8001c90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c94:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001c98:	4b18      	ldr	r3, [pc, #96]	; (8001cfc <HAL_UART_MspInit+0x160>)
 8001c9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ca6:	4b15      	ldr	r3, [pc, #84]	; (8001cfc <HAL_UART_MspInit+0x160>)
 8001ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cac:	4a13      	ldr	r2, [pc, #76]	; (8001cfc <HAL_UART_MspInit+0x160>)
 8001cae:	f043 0301 	orr.w	r3, r3, #1
 8001cb2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001cb6:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <HAL_UART_MspInit+0x160>)
 8001cb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	60bb      	str	r3, [r7, #8]
 8001cc2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8001cc4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001cc8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ccc:	2302      	movs	r3, #2
 8001cce:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cde:	2307      	movs	r3, #7
 8001ce0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ce8:	4619      	mov	r1, r3
 8001cea:	4807      	ldr	r0, [pc, #28]	; (8001d08 <HAL_UART_MspInit+0x16c>)
 8001cec:	f000 fb64 	bl	80023b8 <HAL_GPIO_Init>
}
 8001cf0:	bf00      	nop
 8001cf2:	37f8      	adds	r7, #248	; 0xf8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40004c00 	.word	0x40004c00
 8001cfc:	46020c00 	.word	0x46020c00
 8001d00:	42020800 	.word	0x42020800
 8001d04:	40013800 	.word	0x40013800
 8001d08:	42020000 	.word	0x42020000

08001d0c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b0be      	sub	sp, #248	; 0xf8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d24:	f107 0318 	add.w	r3, r7, #24
 8001d28:	22c8      	movs	r2, #200	; 0xc8
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f008 fe79 	bl	800aa24 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a38      	ldr	r2, [pc, #224]	; (8001e18 <HAL_PCD_MspInit+0x10c>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d169      	bne.n	8001e10 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001d3c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d40:	f04f 0300 	mov.w	r3, #0
 8001d44:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d4e:	f107 0318 	add.w	r3, r7, #24
 8001d52:	4618      	mov	r0, r3
 8001d54:	f003 fc4c 	bl	80055f0 <HAL_RCCEx_PeriphCLKConfig>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8001d5e:	f7ff fac1 	bl	80012e4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d62:	4b2e      	ldr	r3, [pc, #184]	; (8001e1c <HAL_PCD_MspInit+0x110>)
 8001d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d68:	4a2c      	ldr	r2, [pc, #176]	; (8001e1c <HAL_PCD_MspInit+0x110>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d72:	4b2a      	ldr	r3, [pc, #168]	; (8001e1c <HAL_PCD_MspInit+0x110>)
 8001d74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d78:	f003 0301 	and.w	r3, r3, #1
 8001d7c:	617b      	str	r3, [r7, #20]
 8001d7e:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_C_P_Pin|USB_C_PA11_Pin;
 8001d80:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001d84:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d94:	2300      	movs	r3, #0
 8001d96:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001d9a:	230a      	movs	r3, #10
 8001d9c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001da4:	4619      	mov	r1, r3
 8001da6:	481e      	ldr	r0, [pc, #120]	; (8001e20 <HAL_PCD_MspInit+0x114>)
 8001da8:	f000 fb06 	bl	80023b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001dac:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <HAL_PCD_MspInit+0x110>)
 8001dae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001db2:	4a1a      	ldr	r2, [pc, #104]	; (8001e1c <HAL_PCD_MspInit+0x110>)
 8001db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001dbc:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <HAL_PCD_MspInit+0x110>)
 8001dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc6:	613b      	str	r3, [r7, #16]
 8001dc8:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dca:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <HAL_PCD_MspInit+0x110>)
 8001dcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d119      	bne.n	8001e0c <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dd8:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <HAL_PCD_MspInit+0x110>)
 8001dda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dde:	4a0f      	ldr	r2, [pc, #60]	; (8001e1c <HAL_PCD_MspInit+0x110>)
 8001de0:	f043 0304 	orr.w	r3, r3, #4
 8001de4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001de8:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <HAL_PCD_MspInit+0x110>)
 8001dea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dee:	f003 0304 	and.w	r3, r3, #4
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001df6:	f002 f92f 	bl	8004058 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dfa:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <HAL_PCD_MspInit+0x110>)
 8001dfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e00:	4a06      	ldr	r2, [pc, #24]	; (8001e1c <HAL_PCD_MspInit+0x110>)
 8001e02:	f023 0304 	bic.w	r3, r3, #4
 8001e06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001e0a:	e001      	b.n	8001e10 <HAL_PCD_MspInit+0x104>
      HAL_PWREx_EnableVddUSB();
 8001e0c:	f002 f924 	bl	8004058 <HAL_PWREx_EnableVddUSB>
}
 8001e10:	bf00      	nop
 8001e12:	37f8      	adds	r7, #248	; 0xf8
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	42040000 	.word	0x42040000
 8001e1c:	46020c00 	.word	0x46020c00
 8001e20:	42020000 	.word	0x42020000

08001e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e28:	e7fe      	b.n	8001e28 <NMI_Handler+0x4>

08001e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e2e:	e7fe      	b.n	8001e2e <HardFault_Handler+0x4>

08001e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <MemManage_Handler+0x4>

08001e36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e3a:	e7fe      	b.n	8001e3a <BusFault_Handler+0x4>

08001e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <UsageFault_Handler+0x4>

08001e42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr

08001e50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e50:	b480      	push	{r7}
 8001e52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr

08001e5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e62:	bf00      	nop
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr

08001e6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e70:	f000 f8d2 	bl	8002018 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e74:	bf00      	nop
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001e7c:	4802      	ldr	r0, [pc, #8]	; (8001e88 <TIM3_IRQHandler+0x10>)
 8001e7e:	f006 fb97 	bl	80085b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000028 	.word	0x20000028

08001e8c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001e90:	4b18      	ldr	r3, [pc, #96]	; (8001ef4 <SystemInit+0x68>)
 8001e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e96:	4a17      	ldr	r2, [pc, #92]	; (8001ef4 <SystemInit+0x68>)
 8001e98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001ea0:	4b15      	ldr	r3, [pc, #84]	; (8001ef8 <SystemInit+0x6c>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001ea6:	4b14      	ldr	r3, [pc, #80]	; (8001ef8 <SystemInit+0x6c>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001eac:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <SystemInit+0x6c>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001eb2:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <SystemInit+0x6c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001eb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ef8 <SystemInit+0x6c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a0e      	ldr	r2, [pc, #56]	; (8001ef8 <SystemInit+0x6c>)
 8001ebe:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001ec2:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001ec6:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <SystemInit+0x6c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001ece:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <SystemInit+0x6c>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a09      	ldr	r2, [pc, #36]	; (8001ef8 <SystemInit+0x6c>)
 8001ed4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ed8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001eda:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <SystemInit+0x6c>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ee0:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <SystemInit+0x68>)
 8001ee2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ee6:	609a      	str	r2, [r3, #8]
  #endif
}
 8001ee8:	bf00      	nop
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000ed00 	.word	0xe000ed00
 8001ef8:	46020c00 	.word	0x46020c00

08001efc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f34 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001f00:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001f02:	e003      	b.n	8001f0c <LoopCopyDataInit>

08001f04 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001f04:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001f06:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001f08:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001f0a:	3104      	adds	r1, #4

08001f0c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001f0c:	480b      	ldr	r0, [pc, #44]	; (8001f3c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001f0e:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001f10:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001f12:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001f14:	d3f6      	bcc.n	8001f04 <CopyDataInit>
	ldr	r2, =_sbss
 8001f16:	4a0b      	ldr	r2, [pc, #44]	; (8001f44 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001f18:	e002      	b.n	8001f20 <LoopFillZerobss>

08001f1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001f1a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001f1c:	f842 3b04 	str.w	r3, [r2], #4

08001f20 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001f20:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <LoopForever+0x16>)
	cmp	r2, r3
 8001f22:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001f24:	d3f9      	bcc.n	8001f1a <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f26:	f7ff ffb1 	bl	8001e8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f2a:	f008 fd57 	bl	800a9dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f2e:	f7fe fc71 	bl	8000814 <main>

08001f32 <LoopForever>:

LoopForever:
    b LoopForever
 8001f32:	e7fe      	b.n	8001f32 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001f34:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001f38:	0800aba8 	.word	0x0800aba8
	ldr	r0, =_sdata
 8001f3c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001f40:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8001f44:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001f48:	20000968 	.word	0x20000968

08001f4c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f4c:	e7fe      	b.n	8001f4c <ADC1_IRQHandler>
	...

08001f50 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <HAL_Init+0x4c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a10      	ldr	r2, [pc, #64]	; (8001f9c <HAL_Init+0x4c>)
 8001f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f60:	2003      	movs	r0, #3
 8001f62:	f000 f96d 	bl	8002240 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001f66:	f003 f95f 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <HAL_Init+0x50>)
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	f003 030f 	and.w	r3, r3, #15
 8001f74:	490b      	ldr	r1, [pc, #44]	; (8001fa4 <HAL_Init+0x54>)
 8001f76:	5ccb      	ldrb	r3, [r1, r3]
 8001f78:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7c:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <HAL_Init+0x58>)
 8001f7e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f80:	200f      	movs	r0, #15
 8001f82:	f000 f813 	bl	8001fac <HAL_InitTick>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e002      	b.n	8001f96 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f90:	f7ff f9ae 	bl	80012f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40022000 	.word	0x40022000
 8001fa0:	46020c00 	.word	0x46020c00
 8001fa4:	0800aa98 	.word	0x0800aa98
 8001fa8:	20000000 	.word	0x20000000

08001fac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001fb4:	4b15      	ldr	r3, [pc, #84]	; (800200c <HAL_InitTick+0x60>)
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d101      	bne.n	8001fc0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e021      	b.n	8002004 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001fc0:	4b13      	ldr	r3, [pc, #76]	; (8002010 <HAL_InitTick+0x64>)
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	4b11      	ldr	r3, [pc, #68]	; (800200c <HAL_InitTick+0x60>)
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f000 f965 	bl	80022a6 <HAL_SYSTICK_Config>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e00e      	b.n	8002004 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2b0f      	cmp	r3, #15
 8001fea:	d80a      	bhi.n	8002002 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fec:	2200      	movs	r2, #0
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff4:	f000 f92f 	bl	8002256 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ff8:	4a06      	ldr	r2, [pc, #24]	; (8002014 <HAL_InitTick+0x68>)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
 8002000:	e000      	b.n	8002004 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
}
 8002004:	4618      	mov	r0, r3
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	20000008 	.word	0x20000008
 8002010:	20000000 	.word	0x20000000
 8002014:	20000004 	.word	0x20000004

08002018 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <HAL_IncTick+0x20>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	461a      	mov	r2, r3
 8002022:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_IncTick+0x24>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4413      	add	r3, r2
 8002028:	4a04      	ldr	r2, [pc, #16]	; (800203c <HAL_IncTick+0x24>)
 800202a:	6013      	str	r3, [r2, #0]
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	20000008 	.word	0x20000008
 800203c:	20000940 	.word	0x20000940

08002040 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  return uwTick;
 8002044:	4b03      	ldr	r3, [pc, #12]	; (8002054 <HAL_GetTick+0x14>)
 8002046:	681b      	ldr	r3, [r3, #0]
}
 8002048:	4618      	mov	r0, r3
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	20000940 	.word	0x20000940

08002058 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002060:	f7ff ffee 	bl	8002040 <HAL_GetTick>
 8002064:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002070:	d005      	beq.n	800207e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002072:	4b0a      	ldr	r3, [pc, #40]	; (800209c <HAL_Delay+0x44>)
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	4413      	add	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800207e:	bf00      	nop
 8002080:	f7ff ffde 	bl	8002040 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	429a      	cmp	r2, r3
 800208e:	d8f7      	bhi.n	8002080 <HAL_Delay+0x28>
  {
  }
}
 8002090:	bf00      	nop
 8002092:	bf00      	nop
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000008 	.word	0x20000008

080020a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <__NVIC_SetPriorityGrouping+0x44>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020bc:	4013      	ands	r3, r2
 80020be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020d2:	4a04      	ldr	r2, [pc, #16]	; (80020e4 <__NVIC_SetPriorityGrouping+0x44>)
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	60d3      	str	r3, [r2, #12]
}
 80020d8:	bf00      	nop
 80020da:	3714      	adds	r7, #20
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	e000ed00 	.word	0xe000ed00

080020e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020ec:	4b04      	ldr	r3, [pc, #16]	; (8002100 <__NVIC_GetPriorityGrouping+0x18>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	0a1b      	lsrs	r3, r3, #8
 80020f2:	f003 0307 	and.w	r3, r3, #7
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	e000ed00 	.word	0xe000ed00

08002104 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	4603      	mov	r3, r0
 800210c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800210e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002112:	2b00      	cmp	r3, #0
 8002114:	db0b      	blt.n	800212e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	f003 021f 	and.w	r2, r3, #31
 800211c:	4907      	ldr	r1, [pc, #28]	; (800213c <__NVIC_EnableIRQ+0x38>)
 800211e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002122:	095b      	lsrs	r3, r3, #5
 8002124:	2001      	movs	r0, #1
 8002126:	fa00 f202 	lsl.w	r2, r0, r2
 800212a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	e000e100 	.word	0xe000e100

08002140 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	6039      	str	r1, [r7, #0]
 800214a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800214c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002150:	2b00      	cmp	r3, #0
 8002152:	db0a      	blt.n	800216a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	b2da      	uxtb	r2, r3
 8002158:	490c      	ldr	r1, [pc, #48]	; (800218c <__NVIC_SetPriority+0x4c>)
 800215a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215e:	0112      	lsls	r2, r2, #4
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	440b      	add	r3, r1
 8002164:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002168:	e00a      	b.n	8002180 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	b2da      	uxtb	r2, r3
 800216e:	4908      	ldr	r1, [pc, #32]	; (8002190 <__NVIC_SetPriority+0x50>)
 8002170:	79fb      	ldrb	r3, [r7, #7]
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	3b04      	subs	r3, #4
 8002178:	0112      	lsls	r2, r2, #4
 800217a:	b2d2      	uxtb	r2, r2
 800217c:	440b      	add	r3, r1
 800217e:	761a      	strb	r2, [r3, #24]
}
 8002180:	bf00      	nop
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	e000e100 	.word	0xe000e100
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002194:	b480      	push	{r7}
 8002196:	b089      	sub	sp, #36	; 0x24
 8002198:	af00      	add	r7, sp, #0
 800219a:	60f8      	str	r0, [r7, #12]
 800219c:	60b9      	str	r1, [r7, #8]
 800219e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f1c3 0307 	rsb	r3, r3, #7
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	bf28      	it	cs
 80021b2:	2304      	movcs	r3, #4
 80021b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3304      	adds	r3, #4
 80021ba:	2b06      	cmp	r3, #6
 80021bc:	d902      	bls.n	80021c4 <NVIC_EncodePriority+0x30>
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	3b03      	subs	r3, #3
 80021c2:	e000      	b.n	80021c6 <NVIC_EncodePriority+0x32>
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c8:	f04f 32ff 	mov.w	r2, #4294967295
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43da      	mvns	r2, r3
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	401a      	ands	r2, r3
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021dc:	f04f 31ff 	mov.w	r1, #4294967295
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	fa01 f303 	lsl.w	r3, r1, r3
 80021e6:	43d9      	mvns	r1, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021ec:	4313      	orrs	r3, r2
         );
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3724      	adds	r7, #36	; 0x24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
	...

080021fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3b01      	subs	r3, #1
 8002208:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800220c:	d301      	bcc.n	8002212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800220e:	2301      	movs	r3, #1
 8002210:	e00f      	b.n	8002232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002212:	4a0a      	ldr	r2, [pc, #40]	; (800223c <SysTick_Config+0x40>)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3b01      	subs	r3, #1
 8002218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800221a:	210f      	movs	r1, #15
 800221c:	f04f 30ff 	mov.w	r0, #4294967295
 8002220:	f7ff ff8e 	bl	8002140 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002224:	4b05      	ldr	r3, [pc, #20]	; (800223c <SysTick_Config+0x40>)
 8002226:	2200      	movs	r2, #0
 8002228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800222a:	4b04      	ldr	r3, [pc, #16]	; (800223c <SysTick_Config+0x40>)
 800222c:	2207      	movs	r2, #7
 800222e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	e000e010 	.word	0xe000e010

08002240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7ff ff29 	bl	80020a0 <__NVIC_SetPriorityGrouping>
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b086      	sub	sp, #24
 800225a:	af00      	add	r7, sp, #0
 800225c:	4603      	mov	r3, r0
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	607a      	str	r2, [r7, #4]
 8002262:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002264:	f7ff ff40 	bl	80020e8 <__NVIC_GetPriorityGrouping>
 8002268:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	68b9      	ldr	r1, [r7, #8]
 800226e:	6978      	ldr	r0, [r7, #20]
 8002270:	f7ff ff90 	bl	8002194 <NVIC_EncodePriority>
 8002274:	4602      	mov	r2, r0
 8002276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800227a:	4611      	mov	r1, r2
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff ff5f 	bl	8002140 <__NVIC_SetPriority>
}
 8002282:	bf00      	nop
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b082      	sub	sp, #8
 800228e:	af00      	add	r7, sp, #0
 8002290:	4603      	mov	r3, r0
 8002292:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff ff33 	bl	8002104 <__NVIC_EnableIRQ>
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b082      	sub	sp, #8
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff ffa4 	bl	80021fc <SysTick_Config>
 80022b4:	4603      	mov	r3, r0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}

080022be <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 80022be:	b580      	push	{r7, lr}
 80022c0:	b084      	sub	sp, #16
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 80022c6:	f7ff febb 	bl	8002040 <HAL_GetTick>
 80022ca:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e06b      	b.n	80023ae <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d008      	beq.n	80022f4 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2220      	movs	r2, #32
 80022e6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e05c      	b.n	80023ae <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	695a      	ldr	r2, [r3, #20]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f042 0204 	orr.w	r2, r2, #4
 8002302:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2205      	movs	r2, #5
 8002308:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 800230c:	e020      	b.n	8002350 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800230e:	f7ff fe97 	bl	8002040 <HAL_GetTick>
 8002312:	4602      	mov	r2, r0
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	2b05      	cmp	r3, #5
 800231a:	d919      	bls.n	8002350 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002320:	f043 0210 	orr.w	r2, r3, #16
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2203      	movs	r2, #3
 800232c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002340:	2201      	movs	r2, #1
 8002342:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e02e      	b.n	80023ae <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0d7      	beq.n	800230e <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	695a      	ldr	r2, [r3, #20]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f042 0202 	orr.w	r2, r2, #2
 800236c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2204      	movs	r2, #4
 8002372:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 800237e:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2201      	movs	r2, #1
 8002384:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800238c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002390:	2b00      	cmp	r3, #0
 8002392:	d007      	beq.n	80023a4 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002398:	2201      	movs	r2, #1
 800239a:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2200      	movs	r2, #0
 80023a2:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
	...

080023b8 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b089      	sub	sp, #36	; 0x24
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 80023c2:	2300      	movs	r3, #0
 80023c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80023ca:	e1ba      	b.n	8002742 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	2101      	movs	r1, #1
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	fa01 f303 	lsl.w	r3, r1, r3
 80023d8:	4013      	ands	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 81aa 	beq.w	800273c <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a55      	ldr	r2, [pc, #340]	; (8002540 <HAL_GPIO_Init+0x188>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d15d      	bne.n	80024ac <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 80023f6:	2201      	movs	r2, #1
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43db      	mvns	r3, r3
 8002400:	69fa      	ldr	r2, [r7, #28]
 8002402:	4013      	ands	r3, r2
 8002404:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f003 0201 	and.w	r2, r3, #1
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	fa02 f303 	lsl.w	r3, r2, r3
 8002414:	69fa      	ldr	r2, [r7, #28]
 8002416:	4313      	orrs	r3, r2
 8002418:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	69fa      	ldr	r2, [r7, #28]
 800241e:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002420:	4a48      	ldr	r2, [pc, #288]	; (8002544 <HAL_GPIO_Init+0x18c>)
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002428:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 800242a:	4a46      	ldr	r2, [pc, #280]	; (8002544 <HAL_GPIO_Init+0x18c>)
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	00db      	lsls	r3, r3, #3
 8002430:	4413      	add	r3, r2
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	08da      	lsrs	r2, r3, #3
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	3208      	adds	r2, #8
 800243e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002442:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	f003 0307 	and.w	r3, r3, #7
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	220f      	movs	r2, #15
 800244e:	fa02 f303 	lsl.w	r3, r2, r3
 8002452:	43db      	mvns	r3, r3
 8002454:	69fa      	ldr	r2, [r7, #28]
 8002456:	4013      	ands	r3, r2
 8002458:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	220b      	movs	r2, #11
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	69fa      	ldr	r2, [r7, #28]
 800246a:	4313      	orrs	r3, r2
 800246c:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	08da      	lsrs	r2, r3, #3
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	3208      	adds	r2, #8
 8002476:	69f9      	ldr	r1, [r7, #28]
 8002478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	2203      	movs	r2, #3
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	69fa      	ldr	r2, [r7, #28]
 8002490:	4013      	ands	r3, r2
 8002492:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	2202      	movs	r2, #2
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	69fa      	ldr	r2, [r7, #28]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	69fa      	ldr	r2, [r7, #28]
 80024a8:	601a      	str	r2, [r3, #0]
 80024aa:	e067      	b.n	800257c <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_Init+0x104>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	2b12      	cmp	r3, #18
 80024ba:	d145      	bne.n	8002548 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	08da      	lsrs	r2, r3, #3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	3208      	adds	r2, #8
 80024c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	f003 0307 	and.w	r3, r3, #7
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	220f      	movs	r2, #15
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	69fa      	ldr	r2, [r7, #28]
 80024dc:	4013      	ands	r3, r2
 80024de:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	f003 020f 	and.w	r2, r3, #15
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	69fa      	ldr	r2, [r7, #28]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	08da      	lsrs	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3208      	adds	r2, #8
 8002502:	69f9      	ldr	r1, [r7, #28]
 8002504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	2203      	movs	r2, #3
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	69fa      	ldr	r2, [r7, #28]
 800251c:	4013      	ands	r3, r2
 800251e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 0203 	and.w	r2, r3, #3
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	69fa      	ldr	r2, [r7, #28]
 8002532:	4313      	orrs	r3, r2
 8002534:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	69fa      	ldr	r2, [r7, #28]
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	e01e      	b.n	800257c <HAL_GPIO_Init+0x1c4>
 800253e:	bf00      	nop
 8002540:	46020000 	.word	0x46020000
 8002544:	0800aaf0 	.word	0x0800aaf0
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	2203      	movs	r2, #3
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	43db      	mvns	r3, r3
 800255a:	69fa      	ldr	r2, [r7, #28]
 800255c:	4013      	ands	r3, r2
 800255e:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f003 0203 	and.w	r2, r3, #3
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	005b      	lsls	r3, r3, #1
 800256c:	fa02 f303 	lsl.w	r3, r2, r3
 8002570:	69fa      	ldr	r2, [r7, #28]
 8002572:	4313      	orrs	r3, r2
 8002574:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	69fa      	ldr	r2, [r7, #28]
 800257a:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d00b      	beq.n	800259c <HAL_GPIO_Init+0x1e4>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d007      	beq.n	800259c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002590:	2b11      	cmp	r3, #17
 8002592:	d003      	beq.n	800259c <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b12      	cmp	r3, #18
 800259a:	d130      	bne.n	80025fe <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	2203      	movs	r2, #3
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	43db      	mvns	r3, r3
 80025ae:	69fa      	ldr	r2, [r7, #28]
 80025b0:	4013      	ands	r3, r2
 80025b2:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	68da      	ldr	r2, [r3, #12]
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	69fa      	ldr	r2, [r7, #28]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	69fa      	ldr	r2, [r7, #28]
 80025ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 80025d2:	2201      	movs	r2, #1
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	fa02 f303 	lsl.w	r3, r2, r3
 80025da:	43db      	mvns	r3, r3
 80025dc:	69fa      	ldr	r2, [r7, #28]
 80025de:	4013      	ands	r3, r2
 80025e0:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	091b      	lsrs	r3, r3, #4
 80025e8:	f003 0201 	and.w	r2, r3, #1
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	69fa      	ldr	r2, [r7, #28]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	69fa      	ldr	r2, [r7, #28]
 80025fc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b03      	cmp	r3, #3
 8002604:	d017      	beq.n	8002636 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	2203      	movs	r2, #3
 8002612:	fa02 f303 	lsl.w	r3, r2, r3
 8002616:	43db      	mvns	r3, r3
 8002618:	69fa      	ldr	r2, [r7, #28]
 800261a:	4013      	ands	r3, r2
 800261c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	69fa      	ldr	r2, [r7, #28]
 800262c:	4313      	orrs	r3, r2
 800262e:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	69fa      	ldr	r2, [r7, #28]
 8002634:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d07c      	beq.n	800273c <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8002642:	4a47      	ldr	r2, [pc, #284]	; (8002760 <HAL_GPIO_Init+0x3a8>)
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	089b      	lsrs	r3, r3, #2
 8002648:	3318      	adds	r3, #24
 800264a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	f003 0303 	and.w	r3, r3, #3
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	220f      	movs	r2, #15
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	69fa      	ldr	r2, [r7, #28]
 8002662:	4013      	ands	r3, r2
 8002664:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	0a9a      	lsrs	r2, r3, #10
 800266a:	4b3e      	ldr	r3, [pc, #248]	; (8002764 <HAL_GPIO_Init+0x3ac>)
 800266c:	4013      	ands	r3, r2
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	f002 0203 	and.w	r2, r2, #3
 8002674:	00d2      	lsls	r2, r2, #3
 8002676:	4093      	lsls	r3, r2
 8002678:	69fa      	ldr	r2, [r7, #28]
 800267a:	4313      	orrs	r3, r2
 800267c:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 800267e:	4938      	ldr	r1, [pc, #224]	; (8002760 <HAL_GPIO_Init+0x3a8>)
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	089b      	lsrs	r3, r3, #2
 8002684:	3318      	adds	r3, #24
 8002686:	69fa      	ldr	r2, [r7, #28]
 8002688:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800268c:	4b34      	ldr	r3, [pc, #208]	; (8002760 <HAL_GPIO_Init+0x3a8>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	43db      	mvns	r3, r3
 8002696:	69fa      	ldr	r2, [r7, #28]
 8002698:	4013      	ands	r3, r2
 800269a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d003      	beq.n	80026b0 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80026a8:	69fa      	ldr	r2, [r7, #28]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80026b0:	4a2b      	ldr	r2, [pc, #172]	; (8002760 <HAL_GPIO_Init+0x3a8>)
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80026b6:	4b2a      	ldr	r3, [pc, #168]	; (8002760 <HAL_GPIO_Init+0x3a8>)
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	43db      	mvns	r3, r3
 80026c0:	69fa      	ldr	r2, [r7, #28]
 80026c2:	4013      	ands	r3, r2
 80026c4:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d003      	beq.n	80026da <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 80026d2:	69fa      	ldr	r2, [r7, #28]
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 80026da:	4a21      	ldr	r2, [pc, #132]	; (8002760 <HAL_GPIO_Init+0x3a8>)
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 80026e0:	4b1f      	ldr	r3, [pc, #124]	; (8002760 <HAL_GPIO_Init+0x3a8>)
 80026e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026e6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	43db      	mvns	r3, r3
 80026ec:	69fa      	ldr	r2, [r7, #28]
 80026ee:	4013      	ands	r3, r2
 80026f0:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80026fe:	69fa      	ldr	r2, [r7, #28]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	4313      	orrs	r3, r2
 8002704:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8002706:	4a16      	ldr	r2, [pc, #88]	; (8002760 <HAL_GPIO_Init+0x3a8>)
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800270e:	4b14      	ldr	r3, [pc, #80]	; (8002760 <HAL_GPIO_Init+0x3a8>)
 8002710:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002714:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	43db      	mvns	r3, r3
 800271a:	69fa      	ldr	r2, [r7, #28]
 800271c:	4013      	ands	r3, r2
 800271e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 800272c:	69fa      	ldr	r2, [r7, #28]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4313      	orrs	r3, r2
 8002732:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8002734:	4a0a      	ldr	r2, [pc, #40]	; (8002760 <HAL_GPIO_Init+0x3a8>)
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	3301      	adds	r3, #1
 8002740:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	fa22 f303 	lsr.w	r3, r2, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	f47f ae3d 	bne.w	80023cc <HAL_GPIO_Init+0x14>
  }
}
 8002752:	bf00      	nop
 8002754:	bf00      	nop
 8002756:	3724      	adds	r7, #36	; 0x24
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	46022000 	.word	0x46022000
 8002764:	002f7f7f 	.word	0x002f7f7f

08002768 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	460b      	mov	r3, r1
 8002772:	807b      	strh	r3, [r7, #2]
 8002774:	4613      	mov	r3, r2
 8002776:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002778:	787b      	ldrb	r3, [r7, #1]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800277e:	887a      	ldrh	r2, [r7, #2]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8002784:	e002      	b.n	800278c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 8002786:	887a      	ldrh	r2, [r7, #2]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e081      	b.n	80028ae <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d106      	bne.n	80027c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f7fe fe1a 	bl	80013f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2224      	movs	r2, #36	; 0x24
 80027c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f022 0201 	bic.w	r2, r2, #1
 80027da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80027e8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	689a      	ldr	r2, [r3, #8]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027f8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d107      	bne.n	8002812 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800280e:	609a      	str	r2, [r3, #8]
 8002810:	e006      	b.n	8002820 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800281e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68db      	ldr	r3, [r3, #12]
 8002824:	2b02      	cmp	r3, #2
 8002826:	d104      	bne.n	8002832 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002830:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	6812      	ldr	r2, [r2, #0]
 800283c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002840:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002844:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68da      	ldr	r2, [r3, #12]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002854:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	691a      	ldr	r2, [r3, #16]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69d9      	ldr	r1, [r3, #28]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6a1a      	ldr	r2, [r3, #32]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	430a      	orrs	r2, r1
 800287e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f042 0201 	orr.w	r2, r2, #1
 800288e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2220      	movs	r2, #32
 800289a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2200      	movs	r2, #0
 80028a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80028ac:	2300      	movs	r3, #0
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3708      	adds	r7, #8
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}

080028b6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b20      	cmp	r3, #32
 80028ca:	d138      	bne.n	800293e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d101      	bne.n	80028da <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80028d6:	2302      	movs	r3, #2
 80028d8:	e032      	b.n	8002940 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2201      	movs	r2, #1
 80028de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2224      	movs	r2, #36	; 0x24
 80028e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f022 0201 	bic.w	r2, r2, #1
 80028f8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002908:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6819      	ldr	r1, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	683a      	ldr	r2, [r7, #0]
 8002916:	430a      	orrs	r2, r1
 8002918:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f042 0201 	orr.w	r2, r2, #1
 8002928:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2220      	movs	r2, #32
 800292e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800293a:	2300      	movs	r3, #0
 800293c:	e000      	b.n	8002940 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800293e:	2302      	movs	r3, #2
  }
}
 8002940:	4618      	mov	r0, r3
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b20      	cmp	r3, #32
 8002960:	d139      	bne.n	80029d6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002968:	2b01      	cmp	r3, #1
 800296a:	d101      	bne.n	8002970 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800296c:	2302      	movs	r3, #2
 800296e:	e033      	b.n	80029d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2224      	movs	r2, #36	; 0x24
 800297c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0201 	bic.w	r2, r2, #1
 800298e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800299e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	021b      	lsls	r3, r3, #8
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f042 0201 	orr.w	r2, r2, #1
 80029c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2220      	movs	r2, #32
 80029c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	e000      	b.n	80029d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80029d6:	2302      	movs	r3, #2
  }
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d102      	bne.n	80029fc <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	73fb      	strb	r3, [r7, #15]
 80029fa:	e141      	b.n	8002c80 <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f000 f947 	bl	8002c94 <MDF_GetHandleNumberFromInstance>
 8002a06:	4603      	mov	r3, r0
 8002a08:	4a86      	ldr	r2, [pc, #536]	; (8002c24 <HAL_MDF_Init+0x240>)
 8002a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d002      	beq.n	8002a18 <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	73fb      	strb	r3, [r7, #15]
 8002a16:	e133      	b.n	8002c80 <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7fe fc83 	bl	8001324 <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8002a1e:	4b82      	ldr	r3, [pc, #520]	; (8002c28 <HAL_MDF_Init+0x244>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d11d      	bne.n	8002a62 <HAL_MDF_Init+0x7e>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a80      	ldr	r2, [pc, #512]	; (8002c2c <HAL_MDF_Init+0x248>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d023      	beq.n	8002a78 <HAL_MDF_Init+0x94>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a7e      	ldr	r2, [pc, #504]	; (8002c30 <HAL_MDF_Init+0x24c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d01e      	beq.n	8002a78 <HAL_MDF_Init+0x94>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a7d      	ldr	r2, [pc, #500]	; (8002c34 <HAL_MDF_Init+0x250>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d019      	beq.n	8002a78 <HAL_MDF_Init+0x94>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a7b      	ldr	r2, [pc, #492]	; (8002c38 <HAL_MDF_Init+0x254>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d014      	beq.n	8002a78 <HAL_MDF_Init+0x94>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a7a      	ldr	r2, [pc, #488]	; (8002c3c <HAL_MDF_Init+0x258>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d00f      	beq.n	8002a78 <HAL_MDF_Init+0x94>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a78      	ldr	r2, [pc, #480]	; (8002c40 <HAL_MDF_Init+0x25c>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d00a      	beq.n	8002a78 <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8002a62:	4b78      	ldr	r3, [pc, #480]	; (8002c44 <HAL_MDF_Init+0x260>)
 8002a64:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f040 8090 	bne.w	8002b8c <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a75      	ldr	r2, [pc, #468]	; (8002c48 <HAL_MDF_Init+0x264>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	f040 808a 	bne.w	8002b8c <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a72      	ldr	r2, [pc, #456]	; (8002c48 <HAL_MDF_Init+0x264>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d101      	bne.n	8002a86 <HAL_MDF_Init+0xa2>
 8002a82:	4b72      	ldr	r3, [pc, #456]	; (8002c4c <HAL_MDF_Init+0x268>)
 8002a84:	e000      	b.n	8002a88 <HAL_MDF_Init+0xa4>
 8002a86:	4b72      	ldr	r3, [pc, #456]	; (8002c50 <HAL_MDF_Init+0x26c>)
 8002a88:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	da02      	bge.n	8002a98 <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	73fb      	strb	r3, [r7, #15]
 8002a96:	e079      	b.n	8002b8c <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a63      	ldr	r2, [pc, #396]	; (8002c2c <HAL_MDF_Init+0x248>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d018      	beq.n	8002ad4 <HAL_MDF_Init+0xf0>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a62      	ldr	r2, [pc, #392]	; (8002c30 <HAL_MDF_Init+0x24c>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d013      	beq.n	8002ad4 <HAL_MDF_Init+0xf0>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a60      	ldr	r2, [pc, #384]	; (8002c34 <HAL_MDF_Init+0x250>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d00e      	beq.n	8002ad4 <HAL_MDF_Init+0xf0>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a5f      	ldr	r2, [pc, #380]	; (8002c38 <HAL_MDF_Init+0x254>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d009      	beq.n	8002ad4 <HAL_MDF_Init+0xf0>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a5d      	ldr	r2, [pc, #372]	; (8002c3c <HAL_MDF_Init+0x258>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d004      	beq.n	8002ad4 <HAL_MDF_Init+0xf0>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a5c      	ldr	r2, [pc, #368]	; (8002c40 <HAL_MDF_Init+0x25c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d10d      	bne.n	8002af0 <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	011b      	lsls	r3, r3, #4
 8002aea:	431a      	orrs	r2, r3
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	2200      	movs	r2, #0
 8002af4:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	685a      	ldr	r2, [r3, #4]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	3b01      	subs	r3, #1
 8002b00:	061b      	lsls	r3, r3, #24
 8002b02:	431a      	orrs	r2, r3
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	7b1b      	ldrb	r3, [r3, #12]
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d137      	bne.n	8002b80 <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	695b      	ldr	r3, [r3, #20]
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8002b20:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8002b28:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	7e1b      	ldrb	r3, [r3, #24]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d123      	bne.n	8002b80 <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a3b      	ldr	r2, [pc, #236]	; (8002c2c <HAL_MDF_Init+0x248>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d012      	beq.n	8002b68 <HAL_MDF_Init+0x184>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a3a      	ldr	r2, [pc, #232]	; (8002c30 <HAL_MDF_Init+0x24c>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d00d      	beq.n	8002b68 <HAL_MDF_Init+0x184>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a38      	ldr	r2, [pc, #224]	; (8002c34 <HAL_MDF_Init+0x250>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d008      	beq.n	8002b68 <HAL_MDF_Init+0x184>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a37      	ldr	r2, [pc, #220]	; (8002c38 <HAL_MDF_Init+0x254>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d003      	beq.n	8002b68 <HAL_MDF_Init+0x184>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a35      	ldr	r2, [pc, #212]	; (8002c3c <HAL_MDF_Init+0x258>)
 8002b66:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	685a      	ldr	r2, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8002b74:	430b      	orrs	r3, r1
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f043 0210 	orr.w	r2, r3, #16
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f043 0201 	orr.w	r2, r3, #1
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
 8002b8c:	7bfb      	ldrb	r3, [r7, #15]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d128      	bne.n	8002be4 <HAL_MDF_Init+0x200>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d123      	bne.n	8002be4 <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	da02      	bge.n	8002bac <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	73fb      	strb	r3, [r7, #15]
 8002baa:	e01b      	b.n	8002be4 <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	6819      	ldr	r1, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bbe:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8002bc4:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bca:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f042 0201 	orr.w	r2, r2, #1
 8002be2:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d14a      	bne.n	8002c80 <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	685a      	ldr	r2, [r3, #4]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f022 021f 	bic.w	r2, r2, #31
 8002bf8:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6859      	ldr	r1, [r3, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a0d      	ldr	r2, [pc, #52]	; (8002c48 <HAL_MDF_Init+0x264>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d11e      	bne.n	8002c54 <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
 8002c16:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <HAL_MDF_Init+0x260>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	4a09      	ldr	r2, [pc, #36]	; (8002c44 <HAL_MDF_Init+0x260>)
 8002c1e:	6013      	str	r3, [r2, #0]
 8002c20:	e01d      	b.n	8002c5e <HAL_MDF_Init+0x27a>
 8002c22:	bf00      	nop
 8002c24:	2000094c 	.word	0x2000094c
 8002c28:	20000944 	.word	0x20000944
 8002c2c:	40025080 	.word	0x40025080
 8002c30:	40025100 	.word	0x40025100
 8002c34:	40025180 	.word	0x40025180
 8002c38:	40025200 	.word	0x40025200
 8002c3c:	40025280 	.word	0x40025280
 8002c40:	40025300 	.word	0x40025300
 8002c44:	20000948 	.word	0x20000948
 8002c48:	46024080 	.word	0x46024080
 8002c4c:	46024000 	.word	0x46024000
 8002c50:	40025000 	.word	0x40025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
 8002c54:	4b0d      	ldr	r3, [pc, #52]	; (8002c8c <HAL_MDF_Init+0x2a8>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	4a0c      	ldr	r2, [pc, #48]	; (8002c8c <HAL_MDF_Init+0x2a8>)
 8002c5c:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 f816 	bl	8002c94 <MDF_GetHandleNumberFromInstance>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	4909      	ldr	r1, [pc, #36]	; (8002c90 <HAL_MDF_Init+0x2ac>)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2200      	movs	r2, #0
 8002c76:	641a      	str	r2, [r3, #64]	; 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      }
    }
  }

  /* Return function status */
  return status;
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3710      	adds	r7, #16
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000944 	.word	0x20000944
 8002c90:	2000094c 	.word	0x2000094c

08002c94 <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a19      	ldr	r2, [pc, #100]	; (8002d04 <MDF_GetHandleNumberFromInstance+0x70>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d102      	bne.n	8002caa <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	60fb      	str	r3, [r7, #12]
 8002ca8:	e024      	b.n	8002cf4 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4a16      	ldr	r2, [pc, #88]	; (8002d08 <MDF_GetHandleNumberFromInstance+0x74>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d102      	bne.n	8002cb8 <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	60fb      	str	r3, [r7, #12]
 8002cb6:	e01d      	b.n	8002cf4 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter2)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a14      	ldr	r2, [pc, #80]	; (8002d0c <MDF_GetHandleNumberFromInstance+0x78>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d102      	bne.n	8002cc6 <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	60fb      	str	r3, [r7, #12]
 8002cc4:	e016      	b.n	8002cf4 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	4a11      	ldr	r2, [pc, #68]	; (8002d10 <MDF_GetHandleNumberFromInstance+0x7c>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d102      	bne.n	8002cd4 <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	e00f      	b.n	8002cf4 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a0f      	ldr	r2, [pc, #60]	; (8002d14 <MDF_GetHandleNumberFromInstance+0x80>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d102      	bne.n	8002ce2 <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
 8002cdc:	2304      	movs	r3, #4
 8002cde:	60fb      	str	r3, [r7, #12]
 8002ce0:	e008      	b.n	8002cf4 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a0c      	ldr	r2, [pc, #48]	; (8002d18 <MDF_GetHandleNumberFromInstance+0x84>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d102      	bne.n	8002cf0 <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
 8002cea:	2305      	movs	r3, #5
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	e001      	b.n	8002cf4 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
 8002cf0:	2306      	movs	r3, #6
 8002cf2:	60fb      	str	r3, [r7, #12]
  }

  return handle_number;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40025080 	.word	0x40025080
 8002d08:	40025100 	.word	0x40025100
 8002d0c:	40025180 	.word	0x40025180
 8002d10:	40025200 	.word	0x40025200
 8002d14:	40025280 	.word	0x40025280
 8002d18:	40025300 	.word	0x40025300

08002d1c <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f043 0201 	orr.w	r2, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	601a      	str	r2, [r3, #0]
}
 8002d30:	bf00      	nop
 8002d32:	370c      	adds	r7, #12
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr

08002d3c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af02      	add	r7, sp, #8
 8002d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d44:	2300      	movs	r3, #0
 8002d46:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8002d48:	f7ff f97a 	bl	8002040 <HAL_GetTick>
 8002d4c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d102      	bne.n	8002d5a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
 8002d58:	e0a5      	b.n	8002ea6 <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f040 809e 	bne.w	8002ea6 <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7fe fbfe 	bl	800156c <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8002d70:	f241 3188 	movw	r1, #5000	; 0x1388
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 f912 	bl	8002f9e <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	689a      	ldr	r2, [r3, #8]
 8002d80:	4b4b      	ldr	r3, [pc, #300]	; (8002eb0 <HAL_OSPI_Init+0x174>)
 8002d82:	4013      	ands	r3, r2
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	68d1      	ldr	r1, [r2, #12]
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6912      	ldr	r2, [r2, #16]
 8002d8c:	3a01      	subs	r2, #1
 8002d8e:	0412      	lsls	r2, r2, #16
 8002d90:	4311      	orrs	r1, r2
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6952      	ldr	r2, [r2, #20]
 8002d96:	3a01      	subs	r2, #1
 8002d98:	0212      	lsls	r2, r2, #8
 8002d9a:	4311      	orrs	r1, r2
 8002d9c:	687a      	ldr	r2, [r7, #4]
 8002d9e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002da0:	4311      	orrs	r1, r2
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	69d2      	ldr	r2, [r2, #28]
 8002da6:	4311      	orrs	r1, r2
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6812      	ldr	r2, [r2, #0]
 8002dac:	430b      	orrs	r3, r1
 8002dae:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a1a      	ldr	r2, [r3, #32]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dca:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002de0:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	3b01      	subs	r3, #1
 8002df2:	021a      	lsls	r2, r3, #8
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e00:	9300      	str	r3, [sp, #0]
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	2200      	movs	r2, #0
 8002e06:	2120      	movs	r1, #32
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 fdc9 	bl	80039a0 <OSPI_WaitFlagStateUntilTimeout>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002e12:	7bfb      	ldrb	r3, [r7, #15]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d146      	bne.n	8002ea6 <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	1e5a      	subs	r2, r3, #1
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	430a      	orrs	r2, r1
 8002e2e:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e4e:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	430a      	orrs	r2, r1
 8002e62:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f042 0201 	orr.w	r2, r2, #1
 8002e74:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d107      	bne.n	8002e8e <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f042 0202 	orr.w	r2, r2, #2
 8002e8c:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e96:	d103      	bne.n	8002ea0 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	651a      	str	r2, [r3, #80]	; 0x50
 8002e9e:	e002      	b.n	8002ea6 <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2202      	movs	r2, #2
 8002ea4:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3710      	adds	r7, #16
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	f8e0c0f4 	.word	0xf8e0c0f4

08002eb4 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b088      	sub	sp, #32
 8002eb8:	af02      	add	r7, sp, #8
 8002eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8002ec0:	f7ff f8be 	bl	8002040 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eca:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f003 0308 	and.w	r3, r3, #8
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d104      	bne.n	8002ee0 <HAL_OSPI_Abort+0x2c>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d052      	beq.n	8002f86 <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0304 	and.w	r3, r3, #4
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d014      	beq.n	8002f18 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0204 	bic.w	r2, r2, #4
 8002efc:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7ff f9db 	bl	80022be <HAL_DMA_Abort>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8002f0c:	7dfb      	ldrb	r3, [r7, #23]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d002      	beq.n	8002f18 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2204      	movs	r2, #4
 8002f16:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	f003 0320 	and.w	r3, r3, #32
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d02b      	beq.n	8002f7e <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 0202 	orr.w	r2, r2, #2
 8002f34:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	2102      	movs	r1, #2
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 fd2c 	bl	80039a0 <OSPI_WaitFlagStateUntilTimeout>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8002f4c:	7dfb      	ldrb	r3, [r7, #23]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d11f      	bne.n	8002f92 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2202      	movs	r2, #2
 8002f58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	2200      	movs	r2, #0
 8002f64:	2120      	movs	r1, #32
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 fd1a 	bl	80039a0 <OSPI_WaitFlagStateUntilTimeout>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8002f70:	7dfb      	ldrb	r3, [r7, #23]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d10d      	bne.n	8002f92 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2202      	movs	r2, #2
 8002f7a:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8002f7c:	e009      	b.n	8002f92 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2202      	movs	r2, #2
 8002f82:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8002f84:	e005      	b.n	8002f92 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2210      	movs	r2, #16
 8002f8e:	655a      	str	r2, [r3, #84]	; 0x54
 8002f90:	e000      	b.n	8002f94 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8002f92:	bf00      	nop
  }

  /* Return function status */
  return status;
 8002f94:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3718      	adds	r7, #24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
 8002fa6:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	370c      	adds	r7, #12
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b094      	sub	sp, #80	; 0x50
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a9d      	ldr	r2, [pc, #628]	; (8003250 <HAL_OSPIM_Config+0x294>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d105      	bne.n	8002fea <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8002fe8:	e004      	b.n	8002ff4 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8002fea:	2301      	movs	r3, #1
 8002fec:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8002ffa:	e01d      	b.n	8003038 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8002ffc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003000:	3301      	adds	r3, #1
 8003002:	b2d8      	uxtb	r0, r3
 8003004:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8003008:	f107 0114 	add.w	r1, r7, #20
 800300c:	4613      	mov	r3, r2
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	4413      	add	r3, r2
 8003012:	00db      	lsls	r3, r3, #3
 8003014:	440b      	add	r3, r1
 8003016:	4619      	mov	r1, r3
 8003018:	f000 fd02 	bl	8003a20 <OSPIM_GetConfig>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d005      	beq.n	800302e <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2208      	movs	r2, #8
 800302c:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800302e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003032:	3301      	adds	r3, #1
 8003034:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003038:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800303c:	2b01      	cmp	r3, #1
 800303e:	d9dd      	bls.n	8002ffc <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8003040:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003044:	2b00      	cmp	r3, #0
 8003046:	f040 849e 	bne.w	8003986 <HAL_OSPIM_Config+0x9ca>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800304a:	4b81      	ldr	r3, [pc, #516]	; (8003250 <HAL_OSPIM_Config+0x294>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d00b      	beq.n	800306e <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003056:	4b7e      	ldr	r3, [pc, #504]	; (8003250 <HAL_OSPIM_Config+0x294>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a7d      	ldr	r2, [pc, #500]	; (8003250 <HAL_OSPIM_Config+0x294>)
 800305c:	f023 0301 	bic.w	r3, r3, #1
 8003060:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8003062:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003066:	f043 0301 	orr.w	r3, r3, #1
 800306a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800306e:	4b79      	ldr	r3, [pc, #484]	; (8003254 <HAL_OSPIM_Config+0x298>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00b      	beq.n	8003092 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800307a:	4b76      	ldr	r3, [pc, #472]	; (8003254 <HAL_OSPIM_Config+0x298>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a75      	ldr	r2, [pc, #468]	; (8003254 <HAL_OSPIM_Config+0x298>)
 8003080:	f023 0301 	bic.w	r3, r3, #1
 8003084:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8003086:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800308a:	f043 0302 	orr.w	r3, r3, #2
 800308e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8003092:	4971      	ldr	r1, [pc, #452]	; (8003258 <HAL_OSPIM_Config+0x29c>)
 8003094:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003096:	4613      	mov	r3, r2
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	4413      	add	r3, r2
 800309c:	00db      	lsls	r3, r3, #3
 800309e:	3350      	adds	r3, #80	; 0x50
 80030a0:	443b      	add	r3, r7
 80030a2:	3b34      	subs	r3, #52	; 0x34
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	3b01      	subs	r3, #1
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	6859      	ldr	r1, [r3, #4]
 80030ae:	486a      	ldr	r0, [pc, #424]	; (8003258 <HAL_OSPIM_Config+0x29c>)
 80030b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030b2:	4613      	mov	r3, r2
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	4413      	add	r3, r2
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	3350      	adds	r3, #80	; 0x50
 80030bc:	443b      	add	r3, r7
 80030be:	3b34      	subs	r3, #52	; 0x34
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	3b01      	subs	r3, #1
 80030c4:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80030c8:	009b      	lsls	r3, r3, #2
 80030ca:	4403      	add	r3, r0
 80030cc:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80030ce:	4b62      	ldr	r3, [pc, #392]	; (8003258 <HAL_OSPIM_Config+0x29c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0301 	and.w	r3, r3, #1
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	f000 80c0 	beq.w	800325c <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80030dc:	4b5e      	ldr	r3, [pc, #376]	; (8003258 <HAL_OSPIM_Config+0x29c>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a5d      	ldr	r2, [pc, #372]	; (8003258 <HAL_OSPIM_Config+0x29c>)
 80030e2:	f023 0301 	bic.w	r3, r3, #1
 80030e6:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 80030e8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	f040 8162 	bne.w	80033b6 <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 80030f2:	4959      	ldr	r1, [pc, #356]	; (8003258 <HAL_OSPIM_Config+0x29c>)
 80030f4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80030f8:	4613      	mov	r3, r2
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	4413      	add	r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	3350      	adds	r3, #80	; 0x50
 8003102:	443b      	add	r3, r7
 8003104:	3b3c      	subs	r3, #60	; 0x3c
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	3b01      	subs	r3, #1
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	6859      	ldr	r1, [r3, #4]
 8003110:	4851      	ldr	r0, [pc, #324]	; (8003258 <HAL_OSPIM_Config+0x29c>)
 8003112:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003116:	4613      	mov	r3, r2
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	4413      	add	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	3350      	adds	r3, #80	; 0x50
 8003120:	443b      	add	r3, r7
 8003122:	3b3c      	subs	r3, #60	; 0x3c
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	3b01      	subs	r3, #1
 8003128:	f041 0202 	orr.w	r2, r1, #2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4403      	add	r3, r0
 8003130:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8003132:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003136:	4613      	mov	r3, r2
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	4413      	add	r3, r2
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	3350      	adds	r3, #80	; 0x50
 8003140:	443b      	add	r3, r7
 8003142:	3b38      	subs	r3, #56	; 0x38
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d01f      	beq.n	800318a <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 800314a:	4943      	ldr	r1, [pc, #268]	; (8003258 <HAL_OSPIM_Config+0x29c>)
 800314c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003150:	4613      	mov	r3, r2
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	4413      	add	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	3350      	adds	r3, #80	; 0x50
 800315a:	443b      	add	r3, r7
 800315c:	3b38      	subs	r3, #56	; 0x38
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	3b01      	subs	r3, #1
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	6859      	ldr	r1, [r3, #4]
 8003168:	483b      	ldr	r0, [pc, #236]	; (8003258 <HAL_OSPIM_Config+0x29c>)
 800316a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800316e:	4613      	mov	r3, r2
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	4413      	add	r3, r2
 8003174:	00db      	lsls	r3, r3, #3
 8003176:	3350      	adds	r3, #80	; 0x50
 8003178:	443b      	add	r3, r7
 800317a:	3b38      	subs	r3, #56	; 0x38
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	3b01      	subs	r3, #1
 8003180:	f041 0220 	orr.w	r2, r1, #32
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4403      	add	r3, r0
 8003188:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800318a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800318e:	4613      	mov	r3, r2
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	4413      	add	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	3350      	adds	r3, #80	; 0x50
 8003198:	443b      	add	r3, r7
 800319a:	3b30      	subs	r3, #48	; 0x30
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d023      	beq.n	80031ea <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80031a2:	492d      	ldr	r1, [pc, #180]	; (8003258 <HAL_OSPIM_Config+0x29c>)
 80031a4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80031a8:	4613      	mov	r3, r2
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	4413      	add	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	3350      	adds	r3, #80	; 0x50
 80031b2:	443b      	add	r3, r7
 80031b4:	3b30      	subs	r3, #48	; 0x30
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	3b01      	subs	r3, #1
 80031ba:	f003 0301 	and.w	r3, r3, #1
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	440b      	add	r3, r1
 80031c2:	6859      	ldr	r1, [r3, #4]
 80031c4:	4824      	ldr	r0, [pc, #144]	; (8003258 <HAL_OSPIM_Config+0x29c>)
 80031c6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80031ca:	4613      	mov	r3, r2
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	4413      	add	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	3350      	adds	r3, #80	; 0x50
 80031d4:	443b      	add	r3, r7
 80031d6:	3b30      	subs	r3, #48	; 0x30
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	3b01      	subs	r3, #1
 80031dc:	f003 0301 	and.w	r3, r3, #1
 80031e0:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4403      	add	r3, r0
 80031e8:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80031ea:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80031ee:	4613      	mov	r3, r2
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	4413      	add	r3, r2
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	3350      	adds	r3, #80	; 0x50
 80031f8:	443b      	add	r3, r7
 80031fa:	3b2c      	subs	r3, #44	; 0x2c
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 80d9 	beq.w	80033b6 <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003204:	4914      	ldr	r1, [pc, #80]	; (8003258 <HAL_OSPIM_Config+0x29c>)
 8003206:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800320a:	4613      	mov	r3, r2
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	4413      	add	r3, r2
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	3350      	adds	r3, #80	; 0x50
 8003214:	443b      	add	r3, r7
 8003216:	3b2c      	subs	r3, #44	; 0x2c
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	3b01      	subs	r3, #1
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	6859      	ldr	r1, [r3, #4]
 8003226:	480c      	ldr	r0, [pc, #48]	; (8003258 <HAL_OSPIM_Config+0x29c>)
 8003228:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800322c:	4613      	mov	r3, r2
 800322e:	005b      	lsls	r3, r3, #1
 8003230:	4413      	add	r3, r2
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	3350      	adds	r3, #80	; 0x50
 8003236:	443b      	add	r3, r7
 8003238:	3b2c      	subs	r3, #44	; 0x2c
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	3b01      	subs	r3, #1
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4403      	add	r3, r0
 800324a:	605a      	str	r2, [r3, #4]
 800324c:	e0b3      	b.n	80033b6 <HAL_OSPIM_Config+0x3fa>
 800324e:	bf00      	nop
 8003250:	420d1400 	.word	0x420d1400
 8003254:	420d2400 	.word	0x420d2400
 8003258:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 800325c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800325e:	4613      	mov	r3, r2
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	4413      	add	r3, r2
 8003264:	00db      	lsls	r3, r3, #3
 8003266:	3350      	adds	r3, #80	; 0x50
 8003268:	443b      	add	r3, r7
 800326a:	3b3c      	subs	r3, #60	; 0x3c
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	f000 80a1 	beq.w	80033b6 <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8003274:	4993      	ldr	r1, [pc, #588]	; (80034c4 <HAL_OSPIM_Config+0x508>)
 8003276:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003278:	4613      	mov	r3, r2
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	4413      	add	r3, r2
 800327e:	00db      	lsls	r3, r3, #3
 8003280:	3350      	adds	r3, #80	; 0x50
 8003282:	443b      	add	r3, r7
 8003284:	3b3c      	subs	r3, #60	; 0x3c
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	3b01      	subs	r3, #1
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	6859      	ldr	r1, [r3, #4]
 8003290:	488c      	ldr	r0, [pc, #560]	; (80034c4 <HAL_OSPIM_Config+0x508>)
 8003292:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003294:	4613      	mov	r3, r2
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	4413      	add	r3, r2
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	3350      	adds	r3, #80	; 0x50
 800329e:	443b      	add	r3, r7
 80032a0:	3b3c      	subs	r3, #60	; 0x3c
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	3b01      	subs	r3, #1
 80032a6:	f021 0201 	bic.w	r2, r1, #1
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	4403      	add	r3, r0
 80032ae:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80032b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032b2:	4613      	mov	r3, r2
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	4413      	add	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	3350      	adds	r3, #80	; 0x50
 80032bc:	443b      	add	r3, r7
 80032be:	3b38      	subs	r3, #56	; 0x38
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d01d      	beq.n	8003302 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80032c6:	497f      	ldr	r1, [pc, #508]	; (80034c4 <HAL_OSPIM_Config+0x508>)
 80032c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032ca:	4613      	mov	r3, r2
 80032cc:	005b      	lsls	r3, r3, #1
 80032ce:	4413      	add	r3, r2
 80032d0:	00db      	lsls	r3, r3, #3
 80032d2:	3350      	adds	r3, #80	; 0x50
 80032d4:	443b      	add	r3, r7
 80032d6:	3b38      	subs	r3, #56	; 0x38
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	3b01      	subs	r3, #1
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	6859      	ldr	r1, [r3, #4]
 80032e2:	4878      	ldr	r0, [pc, #480]	; (80034c4 <HAL_OSPIM_Config+0x508>)
 80032e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032e6:	4613      	mov	r3, r2
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	4413      	add	r3, r2
 80032ec:	00db      	lsls	r3, r3, #3
 80032ee:	3350      	adds	r3, #80	; 0x50
 80032f0:	443b      	add	r3, r7
 80032f2:	3b38      	subs	r3, #56	; 0x38
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	f021 0210 	bic.w	r2, r1, #16
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4403      	add	r3, r0
 8003300:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003302:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003304:	4613      	mov	r3, r2
 8003306:	005b      	lsls	r3, r3, #1
 8003308:	4413      	add	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	3350      	adds	r3, #80	; 0x50
 800330e:	443b      	add	r3, r7
 8003310:	3b30      	subs	r3, #48	; 0x30
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d021      	beq.n	800335c <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003318:	496a      	ldr	r1, [pc, #424]	; (80034c4 <HAL_OSPIM_Config+0x508>)
 800331a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800331c:	4613      	mov	r3, r2
 800331e:	005b      	lsls	r3, r3, #1
 8003320:	4413      	add	r3, r2
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	3350      	adds	r3, #80	; 0x50
 8003326:	443b      	add	r3, r7
 8003328:	3b30      	subs	r3, #48	; 0x30
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	3b01      	subs	r3, #1
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	6859      	ldr	r1, [r3, #4]
 8003338:	4862      	ldr	r0, [pc, #392]	; (80034c4 <HAL_OSPIM_Config+0x508>)
 800333a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800333c:	4613      	mov	r3, r2
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	4413      	add	r3, r2
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	3350      	adds	r3, #80	; 0x50
 8003346:	443b      	add	r3, r7
 8003348:	3b30      	subs	r3, #48	; 0x30
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	3b01      	subs	r3, #1
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4403      	add	r3, r0
 800335a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800335c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800335e:	4613      	mov	r3, r2
 8003360:	005b      	lsls	r3, r3, #1
 8003362:	4413      	add	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	3350      	adds	r3, #80	; 0x50
 8003368:	443b      	add	r3, r7
 800336a:	3b2c      	subs	r3, #44	; 0x2c
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d021      	beq.n	80033b6 <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003372:	4954      	ldr	r1, [pc, #336]	; (80034c4 <HAL_OSPIM_Config+0x508>)
 8003374:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003376:	4613      	mov	r3, r2
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	4413      	add	r3, r2
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	3350      	adds	r3, #80	; 0x50
 8003380:	443b      	add	r3, r7
 8003382:	3b2c      	subs	r3, #44	; 0x2c
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	3b01      	subs	r3, #1
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	6859      	ldr	r1, [r3, #4]
 8003392:	484c      	ldr	r0, [pc, #304]	; (80034c4 <HAL_OSPIM_Config+0x508>)
 8003394:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003396:	4613      	mov	r3, r2
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	4413      	add	r3, r2
 800339c:	00db      	lsls	r3, r3, #3
 800339e:	3350      	adds	r3, #80	; 0x50
 80033a0:	443b      	add	r3, r7
 80033a2:	3b2c      	subs	r3, #44	; 0x2c
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	3b01      	subs	r3, #1
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4403      	add	r3, r0
 80033b4:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	6819      	ldr	r1, [r3, #0]
 80033ba:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80033be:	4613      	mov	r3, r2
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	4413      	add	r3, r2
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	3350      	adds	r3, #80	; 0x50
 80033c8:	443b      	add	r3, r7
 80033ca:	3b3c      	subs	r3, #60	; 0x3c
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4299      	cmp	r1, r3
 80033d0:	d038      	beq.n	8003444 <HAL_OSPIM_Config+0x488>
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	6859      	ldr	r1, [r3, #4]
 80033d6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80033da:	4613      	mov	r3, r2
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	4413      	add	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	3350      	adds	r3, #80	; 0x50
 80033e4:	443b      	add	r3, r7
 80033e6:	3b38      	subs	r3, #56	; 0x38
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4299      	cmp	r1, r3
 80033ec:	d02a      	beq.n	8003444 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	6899      	ldr	r1, [r3, #8]
 80033f2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80033f6:	4613      	mov	r3, r2
 80033f8:	005b      	lsls	r3, r3, #1
 80033fa:	4413      	add	r3, r2
 80033fc:	00db      	lsls	r3, r3, #3
 80033fe:	3350      	adds	r3, #80	; 0x50
 8003400:	443b      	add	r3, r7
 8003402:	3b34      	subs	r3, #52	; 0x34
 8003404:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003406:	4299      	cmp	r1, r3
 8003408:	d01c      	beq.n	8003444 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	68d9      	ldr	r1, [r3, #12]
 800340e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003412:	4613      	mov	r3, r2
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	4413      	add	r3, r2
 8003418:	00db      	lsls	r3, r3, #3
 800341a:	3350      	adds	r3, #80	; 0x50
 800341c:	443b      	add	r3, r7
 800341e:	3b30      	subs	r3, #48	; 0x30
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4299      	cmp	r1, r3
 8003424:	d00e      	beq.n	8003444 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	6919      	ldr	r1, [r3, #16]
 800342a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800342e:	4613      	mov	r3, r2
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	4413      	add	r3, r2
 8003434:	00db      	lsls	r3, r3, #3
 8003436:	3350      	adds	r3, #80	; 0x50
 8003438:	443b      	add	r3, r7
 800343a:	3b2c      	subs	r3, #44	; 0x2c
 800343c:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800343e:	4299      	cmp	r1, r3
 8003440:	f040 810e 	bne.w	8003660 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	6819      	ldr	r1, [r3, #0]
 8003448:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800344c:	4613      	mov	r3, r2
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	4413      	add	r3, r2
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	3350      	adds	r3, #80	; 0x50
 8003456:	443b      	add	r3, r7
 8003458:	3b3c      	subs	r3, #60	; 0x3c
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4299      	cmp	r1, r3
 800345e:	d133      	bne.n	80034c8 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	6859      	ldr	r1, [r3, #4]
 8003464:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003468:	4613      	mov	r3, r2
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	4413      	add	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	3350      	adds	r3, #80	; 0x50
 8003472:	443b      	add	r3, r7
 8003474:	3b38      	subs	r3, #56	; 0x38
 8003476:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 8003478:	4299      	cmp	r1, r3
 800347a:	d125      	bne.n	80034c8 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	68d9      	ldr	r1, [r3, #12]
 8003480:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003484:	4613      	mov	r3, r2
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	4413      	add	r3, r2
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	3350      	adds	r3, #80	; 0x50
 800348e:	443b      	add	r3, r7
 8003490:	3b30      	subs	r3, #48	; 0x30
 8003492:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8003494:	4299      	cmp	r1, r3
 8003496:	d117      	bne.n	80034c8 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	6919      	ldr	r1, [r3, #16]
 800349c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80034a0:	4613      	mov	r3, r2
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	4413      	add	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	3350      	adds	r3, #80	; 0x50
 80034aa:	443b      	add	r3, r7
 80034ac:	3b2c      	subs	r3, #44	; 0x2c
 80034ae:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80034b0:	4299      	cmp	r1, r3
 80034b2:	d109      	bne.n	80034c8 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80034b4:	4b03      	ldr	r3, [pc, #12]	; (80034c4 <HAL_OSPIM_Config+0x508>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	4a02      	ldr	r2, [pc, #8]	; (80034c4 <HAL_OSPIM_Config+0x508>)
 80034ba:	f043 0301 	orr.w	r3, r3, #1
 80034be:	6013      	str	r3, [r2, #0]
 80034c0:	e0ce      	b.n	8003660 <HAL_OSPIM_Config+0x6a4>
 80034c2:	bf00      	nop
 80034c4:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80034c8:	49a4      	ldr	r1, [pc, #656]	; (800375c <HAL_OSPIM_Config+0x7a0>)
 80034ca:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80034ce:	4613      	mov	r3, r2
 80034d0:	005b      	lsls	r3, r3, #1
 80034d2:	4413      	add	r3, r2
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	3350      	adds	r3, #80	; 0x50
 80034d8:	443b      	add	r3, r7
 80034da:	3b3c      	subs	r3, #60	; 0x3c
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	3b01      	subs	r3, #1
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	440b      	add	r3, r1
 80034e4:	6859      	ldr	r1, [r3, #4]
 80034e6:	489d      	ldr	r0, [pc, #628]	; (800375c <HAL_OSPIM_Config+0x7a0>)
 80034e8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80034ec:	4613      	mov	r3, r2
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	4413      	add	r3, r2
 80034f2:	00db      	lsls	r3, r3, #3
 80034f4:	3350      	adds	r3, #80	; 0x50
 80034f6:	443b      	add	r3, r7
 80034f8:	3b3c      	subs	r3, #60	; 0x3c
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	3b01      	subs	r3, #1
 80034fe:	f021 0201 	bic.w	r2, r1, #1
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4403      	add	r3, r0
 8003506:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8003508:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800350c:	4613      	mov	r3, r2
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	4413      	add	r3, r2
 8003512:	00db      	lsls	r3, r3, #3
 8003514:	3350      	adds	r3, #80	; 0x50
 8003516:	443b      	add	r3, r7
 8003518:	3b38      	subs	r3, #56	; 0x38
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d01f      	beq.n	8003560 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8003520:	498e      	ldr	r1, [pc, #568]	; (800375c <HAL_OSPIM_Config+0x7a0>)
 8003522:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003526:	4613      	mov	r3, r2
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	4413      	add	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	3350      	adds	r3, #80	; 0x50
 8003530:	443b      	add	r3, r7
 8003532:	3b38      	subs	r3, #56	; 0x38
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	3b01      	subs	r3, #1
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	6859      	ldr	r1, [r3, #4]
 800353e:	4887      	ldr	r0, [pc, #540]	; (800375c <HAL_OSPIM_Config+0x7a0>)
 8003540:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003544:	4613      	mov	r3, r2
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	4413      	add	r3, r2
 800354a:	00db      	lsls	r3, r3, #3
 800354c:	3350      	adds	r3, #80	; 0x50
 800354e:	443b      	add	r3, r7
 8003550:	3b38      	subs	r3, #56	; 0x38
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	3b01      	subs	r3, #1
 8003556:	f021 0210 	bic.w	r2, r1, #16
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	4403      	add	r3, r0
 800355e:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8003560:	497e      	ldr	r1, [pc, #504]	; (800375c <HAL_OSPIM_Config+0x7a0>)
 8003562:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003566:	4613      	mov	r3, r2
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	4413      	add	r3, r2
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	3350      	adds	r3, #80	; 0x50
 8003570:	443b      	add	r3, r7
 8003572:	3b34      	subs	r3, #52	; 0x34
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	3b01      	subs	r3, #1
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	440b      	add	r3, r1
 800357c:	6859      	ldr	r1, [r3, #4]
 800357e:	4877      	ldr	r0, [pc, #476]	; (800375c <HAL_OSPIM_Config+0x7a0>)
 8003580:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003584:	4613      	mov	r3, r2
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	4413      	add	r3, r2
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	3350      	adds	r3, #80	; 0x50
 800358e:	443b      	add	r3, r7
 8003590:	3b34      	subs	r3, #52	; 0x34
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	3b01      	subs	r3, #1
 8003596:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4403      	add	r3, r0
 800359e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80035a0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80035a4:	4613      	mov	r3, r2
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	4413      	add	r3, r2
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	3350      	adds	r3, #80	; 0x50
 80035ae:	443b      	add	r3, r7
 80035b0:	3b30      	subs	r3, #48	; 0x30
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d023      	beq.n	8003600 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80035b8:	4968      	ldr	r1, [pc, #416]	; (800375c <HAL_OSPIM_Config+0x7a0>)
 80035ba:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80035be:	4613      	mov	r3, r2
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	4413      	add	r3, r2
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	3350      	adds	r3, #80	; 0x50
 80035c8:	443b      	add	r3, r7
 80035ca:	3b30      	subs	r3, #48	; 0x30
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	3b01      	subs	r3, #1
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	440b      	add	r3, r1
 80035d8:	6859      	ldr	r1, [r3, #4]
 80035da:	4860      	ldr	r0, [pc, #384]	; (800375c <HAL_OSPIM_Config+0x7a0>)
 80035dc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80035e0:	4613      	mov	r3, r2
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	4413      	add	r3, r2
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	3350      	adds	r3, #80	; 0x50
 80035ea:	443b      	add	r3, r7
 80035ec:	3b30      	subs	r3, #48	; 0x30
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	3b01      	subs	r3, #1
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4403      	add	r3, r0
 80035fe:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003600:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003604:	4613      	mov	r3, r2
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	4413      	add	r3, r2
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	3350      	adds	r3, #80	; 0x50
 800360e:	443b      	add	r3, r7
 8003610:	3b2c      	subs	r3, #44	; 0x2c
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d023      	beq.n	8003660 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003618:	4950      	ldr	r1, [pc, #320]	; (800375c <HAL_OSPIM_Config+0x7a0>)
 800361a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800361e:	4613      	mov	r3, r2
 8003620:	005b      	lsls	r3, r3, #1
 8003622:	4413      	add	r3, r2
 8003624:	00db      	lsls	r3, r3, #3
 8003626:	3350      	adds	r3, #80	; 0x50
 8003628:	443b      	add	r3, r7
 800362a:	3b2c      	subs	r3, #44	; 0x2c
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	3b01      	subs	r3, #1
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	6859      	ldr	r1, [r3, #4]
 800363a:	4848      	ldr	r0, [pc, #288]	; (800375c <HAL_OSPIM_Config+0x7a0>)
 800363c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003640:	4613      	mov	r3, r2
 8003642:	005b      	lsls	r3, r3, #1
 8003644:	4413      	add	r3, r2
 8003646:	00db      	lsls	r3, r3, #3
 8003648:	3350      	adds	r3, #80	; 0x50
 800364a:	443b      	add	r3, r7
 800364c:	3b2c      	subs	r3, #44	; 0x2c
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	3b01      	subs	r3, #1
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4403      	add	r3, r0
 800365e:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8003660:	4a3e      	ldr	r2, [pc, #248]	; (800375c <HAL_OSPIM_Config+0x7a0>)
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	3b01      	subs	r3, #1
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4413      	add	r3, r2
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003672:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003674:	025b      	lsls	r3, r3, #9
 8003676:	431a      	orrs	r2, r3
 8003678:	4938      	ldr	r1, [pc, #224]	; (800375c <HAL_OSPIM_Config+0x7a0>)
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	3b01      	subs	r3, #1
 8003680:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	440b      	add	r3, r1
 8003688:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d018      	beq.n	80036c4 <HAL_OSPIM_Config+0x708>
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	695b      	ldr	r3, [r3, #20]
 8003696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800369a:	d813      	bhi.n	80036c4 <HAL_OSPIM_Config+0x708>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	1e5a      	subs	r2, r3, #1
 80036a2:	4b2e      	ldr	r3, [pc, #184]	; (800375c <HAL_OSPIM_Config+0x7a0>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	0c1b      	lsrs	r3, r3, #16
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d90a      	bls.n	80036c4 <HAL_OSPIM_Config+0x708>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 80036ae:	4b2b      	ldr	r3, [pc, #172]	; (800375c <HAL_OSPIM_Config+0x7a0>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	3b01      	subs	r3, #1
 80036bc:	041b      	lsls	r3, r3, #16
 80036be:	4927      	ldr	r1, [pc, #156]	; (800375c <HAL_OSPIM_Config+0x7a0>)
 80036c0:	4313      	orrs	r3, r2
 80036c2:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 80036c4:	4b25      	ldr	r3, [pc, #148]	; (800375c <HAL_OSPIM_Config+0x7a0>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 809a 	beq.w	8003806 <HAL_OSPIM_Config+0x84a>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 80036d2:	4a22      	ldr	r2, [pc, #136]	; (800375c <HAL_OSPIM_Config+0x7a0>)
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	3b01      	subs	r3, #1
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	f023 0203 	bic.w	r2, r3, #3
 80036e4:	491d      	ldr	r1, [pc, #116]	; (800375c <HAL_OSPIM_Config+0x7a0>)
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	3b01      	subs	r3, #1
 80036ec:	f042 0201 	orr.w	r2, r2, #1
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	440b      	add	r3, r1
 80036f4:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d011      	beq.n	8003722 <HAL_OSPIM_Config+0x766>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 80036fe:	4a17      	ldr	r2, [pc, #92]	; (800375c <HAL_OSPIM_Config+0x7a0>)
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	3b01      	subs	r3, #1
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003710:	4912      	ldr	r1, [pc, #72]	; (800375c <HAL_OSPIM_Config+0x7a0>)
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	3b01      	subs	r3, #1
 8003718:	f042 0210 	orr.w	r2, r2, #16
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d018      	beq.n	8003760 <HAL_OSPIM_Config+0x7a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800372e:	4a0b      	ldr	r2, [pc, #44]	; (800375c <HAL_OSPIM_Config+0x7a0>)
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	68db      	ldr	r3, [r3, #12]
 8003734:	3b01      	subs	r3, #1
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003744:	4905      	ldr	r1, [pc, #20]	; (800375c <HAL_OSPIM_Config+0x7a0>)
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	3b01      	subs	r3, #1
 800374c:	f003 0301 	and.w	r3, r3, #1
 8003750:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	605a      	str	r2, [r3, #4]
 800375a:	e01b      	b.n	8003794 <HAL_OSPIM_Config+0x7d8>
 800375c:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d015      	beq.n	8003794 <HAL_OSPIM_Config+0x7d8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003768:	4a8a      	ldr	r2, [pc, #552]	; (8003994 <HAL_OSPIM_Config+0x9d8>)
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	3b01      	subs	r3, #1
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	4413      	add	r3, r2
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800377e:	4985      	ldr	r1, [pc, #532]	; (8003994 <HAL_OSPIM_Config+0x9d8>)
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	3b01      	subs	r3, #1
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	440b      	add	r3, r1
 8003792:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d016      	beq.n	80037ce <HAL_OSPIM_Config+0x812>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80037a0:	4a7c      	ldr	r2, [pc, #496]	; (8003994 <HAL_OSPIM_Config+0x9d8>)
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	f003 0301 	and.w	r3, r3, #1
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	4413      	add	r3, r2
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80037b6:	4977      	ldr	r1, [pc, #476]	; (8003994 <HAL_OSPIM_Config+0x9d8>)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	3b01      	subs	r3, #1
 80037be:	f003 0301 	and.w	r3, r3, #1
 80037c2:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	440b      	add	r3, r1
 80037ca:	605a      	str	r2, [r3, #4]
 80037cc:	e0c3      	b.n	8003956 <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	691b      	ldr	r3, [r3, #16]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 80bf 	beq.w	8003956 <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80037d8:	4a6e      	ldr	r2, [pc, #440]	; (8003994 <HAL_OSPIM_Config+0x9d8>)
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	3b01      	subs	r3, #1
 80037e0:	f003 0301 	and.w	r3, r3, #1
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	4413      	add	r3, r2
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80037ee:	4969      	ldr	r1, [pc, #420]	; (8003994 <HAL_OSPIM_Config+0x9d8>)
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	3b01      	subs	r3, #1
 80037f6:	f003 0301 	and.w	r3, r3, #1
 80037fa:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	605a      	str	r2, [r3, #4]
 8003804:	e0a7      	b.n	8003956 <HAL_OSPIM_Config+0x99a>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8003806:	4a63      	ldr	r2, [pc, #396]	; (8003994 <HAL_OSPIM_Config+0x9d8>)
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	3b01      	subs	r3, #1
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	f023 0203 	bic.w	r2, r3, #3
 8003818:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800381a:	005b      	lsls	r3, r3, #1
 800381c:	431a      	orrs	r2, r3
 800381e:	495d      	ldr	r1, [pc, #372]	; (8003994 <HAL_OSPIM_Config+0x9d8>)
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	3b01      	subs	r3, #1
 8003826:	f042 0201 	orr.w	r2, r2, #1
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d014      	beq.n	8003862 <HAL_OSPIM_Config+0x8a6>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8003838:	4a56      	ldr	r2, [pc, #344]	; (8003994 <HAL_OSPIM_Config+0x9d8>)
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	3b01      	subs	r3, #1
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800384a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800384c:	015b      	lsls	r3, r3, #5
 800384e:	431a      	orrs	r2, r3
 8003850:	4950      	ldr	r1, [pc, #320]	; (8003994 <HAL_OSPIM_Config+0x9d8>)
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	3b01      	subs	r3, #1
 8003858:	f042 0210 	orr.w	r2, r2, #16
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	440b      	add	r3, r1
 8003860:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d019      	beq.n	80038a2 <HAL_OSPIM_Config+0x8e6>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800386e:	4a49      	ldr	r2, [pc, #292]	; (8003994 <HAL_OSPIM_Config+0x9d8>)
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	3b01      	subs	r3, #1
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003886:	049b      	lsls	r3, r3, #18
 8003888:	431a      	orrs	r2, r3
 800388a:	4942      	ldr	r1, [pc, #264]	; (8003994 <HAL_OSPIM_Config+0x9d8>)
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	68db      	ldr	r3, [r3, #12]
 8003890:	3b01      	subs	r3, #1
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	605a      	str	r2, [r3, #4]
 80038a0:	e01c      	b.n	80038dc <HAL_OSPIM_Config+0x920>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d018      	beq.n	80038dc <HAL_OSPIM_Config+0x920>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80038aa:	4a3a      	ldr	r2, [pc, #232]	; (8003994 <HAL_OSPIM_Config+0x9d8>)
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	3b01      	subs	r3, #1
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80038c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038c2:	069b      	lsls	r3, r3, #26
 80038c4:	431a      	orrs	r2, r3
 80038c6:	4933      	ldr	r1, [pc, #204]	; (8003994 <HAL_OSPIM_Config+0x9d8>)
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	3b01      	subs	r3, #1
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d019      	beq.n	800391c <HAL_OSPIM_Config+0x960>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80038e8:	4a2a      	ldr	r2, [pc, #168]	; (8003994 <HAL_OSPIM_Config+0x9d8>)
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	f003 0301 	and.w	r3, r3, #1
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	4413      	add	r3, r2
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80038fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003900:	049b      	lsls	r3, r3, #18
 8003902:	431a      	orrs	r2, r3
 8003904:	4923      	ldr	r1, [pc, #140]	; (8003994 <HAL_OSPIM_Config+0x9d8>)
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	3b01      	subs	r3, #1
 800390c:	f003 0301 	and.w	r3, r3, #1
 8003910:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	440b      	add	r3, r1
 8003918:	605a      	str	r2, [r3, #4]
 800391a:	e01c      	b.n	8003956 <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d018      	beq.n	8003956 <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003924:	4a1b      	ldr	r2, [pc, #108]	; (8003994 <HAL_OSPIM_Config+0x9d8>)
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	3b01      	subs	r3, #1
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800393a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800393c:	069b      	lsls	r3, r3, #26
 800393e:	431a      	orrs	r2, r3
 8003940:	4914      	ldr	r1, [pc, #80]	; (8003994 <HAL_OSPIM_Config+0x9d8>)
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	3b01      	subs	r3, #1
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	440b      	add	r3, r1
 8003954:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8003956:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d005      	beq.n	800396e <HAL_OSPIM_Config+0x9b2>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003962:	4b0d      	ldr	r3, [pc, #52]	; (8003998 <HAL_OSPIM_Config+0x9dc>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a0c      	ldr	r2, [pc, #48]	; (8003998 <HAL_OSPIM_Config+0x9dc>)
 8003968:	f043 0301 	orr.w	r3, r3, #1
 800396c:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 800396e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d005      	beq.n	8003986 <HAL_OSPIM_Config+0x9ca>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800397a:	4b08      	ldr	r3, [pc, #32]	; (800399c <HAL_OSPIM_Config+0x9e0>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a07      	ldr	r2, [pc, #28]	; (800399c <HAL_OSPIM_Config+0x9e0>)
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8003986:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800398a:	4618      	mov	r0, r3
 800398c:	3750      	adds	r7, #80	; 0x50
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	420c4000 	.word	0x420c4000
 8003998:	420d1400 	.word	0x420d1400
 800399c:	420d2400 	.word	0x420d2400

080039a0 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	603b      	str	r3, [r7, #0]
 80039ac:	4613      	mov	r3, r2
 80039ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80039b0:	e022      	b.n	80039f8 <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b8:	d01e      	beq.n	80039f8 <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ba:	f7fe fb41 	bl	8002040 <HAL_GetTick>
 80039be:	4602      	mov	r2, r0
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	1ad3      	subs	r3, r2, r3
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d302      	bcc.n	80039d0 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d113      	bne.n	80039f8 <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	6a1a      	ldr	r2, [r3, #32]
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	401a      	ands	r2, r3
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	429a      	cmp	r2, r3
 80039de:	d00b      	beq.n	80039f8 <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039e6:	651a      	str	r2, [r3, #80]	; 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ec:	f043 0201 	orr.w	r2, r3, #1
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	655a      	str	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e00e      	b.n	8003a16 <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6a1a      	ldr	r2, [r3, #32]
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	4013      	ands	r3, r2
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	bf14      	ite	ne
 8003a06:	2301      	movne	r3, #1
 8003a08:	2300      	moveq	r3, #0
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	79fb      	ldrb	r3, [r7, #7]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d1ce      	bne.n	80039b2 <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
	...

08003a20 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8003a20:	b480      	push	{r7}
 8003a22:	b087      	sub	sp, #28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	4603      	mov	r3, r0
 8003a28:	6039      	str	r1, [r7, #0]
 8003a2a:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003a34:	79fb      	ldrb	r3, [r7, #7]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d005      	beq.n	8003a46 <OSPIM_GetConfig+0x26>
 8003a3a:	79fb      	ldrb	r3, [r7, #7]
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d802      	bhi.n	8003a46 <OSPIM_GetConfig+0x26>
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d102      	bne.n	8003a4c <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	75fb      	strb	r3, [r7, #23]
 8003a4a:	e098      	b.n	8003b7e <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2200      	movs	r2, #0
 8003a56:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2200      	movs	r2, #0
 8003a62:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	2200      	movs	r2, #0
 8003a68:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8003a6a:	79fb      	ldrb	r3, [r7, #7]
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d10b      	bne.n	8003a88 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8003a70:	4b46      	ldr	r3, [pc, #280]	; (8003b8c <OSPIM_GetConfig+0x16c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d102      	bne.n	8003a82 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8003a7c:	4b44      	ldr	r3, [pc, #272]	; (8003b90 <OSPIM_GetConfig+0x170>)
 8003a7e:	613b      	str	r3, [r7, #16]
 8003a80:	e002      	b.n	8003a88 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8003a82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a86:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	e074      	b.n	8003b78 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8003a8e:	4a3f      	ldr	r2, [pc, #252]	; (8003b8c <OSPIM_GetConfig+0x16c>)
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	f003 0301 	and.w	r3, r3, #1
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d00a      	beq.n	8003aba <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003aa4:	68ba      	ldr	r2, [r7, #8]
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	4053      	eors	r3, r2
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d103      	bne.n	8003aba <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	f003 0310 	and.w	r3, r3, #16
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00a      	beq.n	8003ada <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	4053      	eors	r3, r2
 8003aca:	f003 0320 	and.w	r3, r3, #32
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d103      	bne.n	8003ada <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	1c5a      	adds	r2, r3, #1
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00a      	beq.n	8003afa <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	4053      	eors	r3, r2
 8003aea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d103      	bne.n	8003afa <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d018      	beq.n	8003b36 <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	4053      	eors	r3, r2
 8003b0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d111      	bne.n	8003b36 <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d106      	bne.n	8003b2a <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	60da      	str	r2, [r3, #12]
 8003b28:	e005      	b.n	8003b36 <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d018      	beq.n	8003b72 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	4053      	eors	r3, r2
 8003b46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d111      	bne.n	8003b72 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d106      	bne.n	8003b66 <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	611a      	str	r2, [r3, #16]
 8003b64:	e005      	b.n	8003b72 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	3301      	adds	r3, #1
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d987      	bls.n	8003a8e <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8003b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	371c      	adds	r7, #28
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	420c4000 	.word	0x420c4000
 8003b90:	04040222 	.word	0x04040222

08003b94 <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f042 0202 	orr.w	r2, r2, #2
 8003bb0:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2208      	movs	r2, #8
 8003bb6:	651a      	str	r2, [r3, #80]	; 0x50

  if (hospi->Instance == OCTOSPI1)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a15      	ldr	r2, [pc, #84]	; (8003c14 <HAL_OSPI_DLYB_SetConfig+0x80>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d109      	bne.n	8003bd6 <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 8003bc2:	4815      	ldr	r0, [pc, #84]	; (8003c18 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8003bc4:	f7ff f8aa 	bl	8002d1c <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8003bc8:	6839      	ldr	r1, [r7, #0]
 8003bca:	4813      	ldr	r0, [pc, #76]	; (8003c18 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8003bcc:	f006 fa5e 	bl	800a08c <LL_DLYB_SetDelay>
    status = HAL_OK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	73fb      	strb	r3, [r7, #15]
 8003bd4:	e00d      	b.n	8003bf2 <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

  else if (hospi->Instance == OCTOSPI2)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a10      	ldr	r2, [pc, #64]	; (8003c1c <HAL_OSPI_DLYB_SetConfig+0x88>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d108      	bne.n	8003bf2 <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8003be0:	480f      	ldr	r0, [pc, #60]	; (8003c20 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8003be2:	f7ff f89b 	bl	8002d1c <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8003be6:	6839      	ldr	r1, [r7, #0]
 8003be8:	480d      	ldr	r0, [pc, #52]	; (8003c20 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8003bea:	f006 fa4f 	bl	800a08c <LL_DLYB_SetDelay>
    status = HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7ff f95e 	bl	8002eb4 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689a      	ldr	r2, [r3, #8]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0202 	bic.w	r2, r2, #2
 8003c06:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 8003c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	420d1400 	.word	0x420d1400
 8003c18:	420cf000 	.word	0x420cf000
 8003c1c:	420d2400 	.word	0x420d2400
 8003c20:	420cf400 	.word	0x420cf400

08003c24 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c26:	b08f      	sub	sp, #60	; 0x3c
 8003c28:	af0a      	add	r7, sp, #40	; 0x28
 8003c2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e116      	b.n	8003e64 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d106      	bne.n	8003c56 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f7fe f85b 	bl	8001d0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2203      	movs	r2, #3
 8003c5a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d102      	bne.n	8003c70 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f006 fc25 	bl	800a4c4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	603b      	str	r3, [r7, #0]
 8003c80:	687e      	ldr	r6, [r7, #4]
 8003c82:	466d      	mov	r5, sp
 8003c84:	f106 0410 	add.w	r4, r6, #16
 8003c88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c94:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c98:	1d33      	adds	r3, r6, #4
 8003c9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c9c:	6838      	ldr	r0, [r7, #0]
 8003c9e:	f006 fbe5 	bl	800a46c <USB_CoreInit>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d005      	beq.n	8003cb4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	e0d7      	b.n	8003e64 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2100      	movs	r1, #0
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f006 fc13 	bl	800a4e6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	73fb      	strb	r3, [r7, #15]
 8003cc4:	e04a      	b.n	8003d5c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003cc6:	7bfa      	ldrb	r2, [r7, #15]
 8003cc8:	6879      	ldr	r1, [r7, #4]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	4413      	add	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	440b      	add	r3, r1
 8003cd4:	333d      	adds	r3, #61	; 0x3d
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003cda:	7bfa      	ldrb	r2, [r7, #15]
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	4413      	add	r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	333c      	adds	r3, #60	; 0x3c
 8003cea:	7bfa      	ldrb	r2, [r7, #15]
 8003cec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003cee:	7bfa      	ldrb	r2, [r7, #15]
 8003cf0:	7bfb      	ldrb	r3, [r7, #15]
 8003cf2:	b298      	uxth	r0, r3
 8003cf4:	6879      	ldr	r1, [r7, #4]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	00db      	lsls	r3, r3, #3
 8003cfa:	4413      	add	r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	440b      	add	r3, r1
 8003d00:	3344      	adds	r3, #68	; 0x44
 8003d02:	4602      	mov	r2, r0
 8003d04:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d06:	7bfa      	ldrb	r2, [r7, #15]
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	00db      	lsls	r3, r3, #3
 8003d0e:	4413      	add	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	440b      	add	r3, r1
 8003d14:	3340      	adds	r3, #64	; 0x40
 8003d16:	2200      	movs	r2, #0
 8003d18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d1a:	7bfa      	ldrb	r2, [r7, #15]
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	4413      	add	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	440b      	add	r3, r1
 8003d28:	3348      	adds	r3, #72	; 0x48
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d2e:	7bfa      	ldrb	r2, [r7, #15]
 8003d30:	6879      	ldr	r1, [r7, #4]
 8003d32:	4613      	mov	r3, r2
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	4413      	add	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	440b      	add	r3, r1
 8003d3c:	334c      	adds	r3, #76	; 0x4c
 8003d3e:	2200      	movs	r2, #0
 8003d40:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d42:	7bfa      	ldrb	r2, [r7, #15]
 8003d44:	6879      	ldr	r1, [r7, #4]
 8003d46:	4613      	mov	r3, r2
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	4413      	add	r3, r2
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	440b      	add	r3, r1
 8003d50:	3354      	adds	r3, #84	; 0x54
 8003d52:	2200      	movs	r2, #0
 8003d54:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	73fb      	strb	r3, [r7, #15]
 8003d5c:	7bfa      	ldrb	r2, [r7, #15]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d3af      	bcc.n	8003cc6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d66:	2300      	movs	r3, #0
 8003d68:	73fb      	strb	r3, [r7, #15]
 8003d6a:	e044      	b.n	8003df6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d6c:	7bfa      	ldrb	r2, [r7, #15]
 8003d6e:	6879      	ldr	r1, [r7, #4]
 8003d70:	4613      	mov	r3, r2
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	4413      	add	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	440b      	add	r3, r1
 8003d7a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003d7e:	2200      	movs	r2, #0
 8003d80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d82:	7bfa      	ldrb	r2, [r7, #15]
 8003d84:	6879      	ldr	r1, [r7, #4]
 8003d86:	4613      	mov	r3, r2
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	4413      	add	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	440b      	add	r3, r1
 8003d90:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003d94:	7bfa      	ldrb	r2, [r7, #15]
 8003d96:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d98:	7bfa      	ldrb	r2, [r7, #15]
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	4413      	add	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	440b      	add	r3, r1
 8003da6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003daa:	2200      	movs	r2, #0
 8003dac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003dae:	7bfa      	ldrb	r2, [r7, #15]
 8003db0:	6879      	ldr	r1, [r7, #4]
 8003db2:	4613      	mov	r3, r2
 8003db4:	00db      	lsls	r3, r3, #3
 8003db6:	4413      	add	r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	440b      	add	r3, r1
 8003dbc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003dc4:	7bfa      	ldrb	r2, [r7, #15]
 8003dc6:	6879      	ldr	r1, [r7, #4]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	4413      	add	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003dda:	7bfa      	ldrb	r2, [r7, #15]
 8003ddc:	6879      	ldr	r1, [r7, #4]
 8003dde:	4613      	mov	r3, r2
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	4413      	add	r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	440b      	add	r3, r1
 8003de8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003dec:	2200      	movs	r2, #0
 8003dee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
 8003df2:	3301      	adds	r3, #1
 8003df4:	73fb      	strb	r3, [r7, #15]
 8003df6:	7bfa      	ldrb	r2, [r7, #15]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d3b5      	bcc.n	8003d6c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	603b      	str	r3, [r7, #0]
 8003e06:	687e      	ldr	r6, [r7, #4]
 8003e08:	466d      	mov	r5, sp
 8003e0a:	f106 0410 	add.w	r4, r6, #16
 8003e0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e1e:	1d33      	adds	r3, r6, #4
 8003e20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e22:	6838      	ldr	r0, [r7, #0]
 8003e24:	f006 fbac 	bl	800a580 <USB_DevInit>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2202      	movs	r2, #2
 8003e32:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e014      	b.n	8003e64 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d102      	bne.n	8003e58 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f000 f80a 	bl	8003e6c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f006 fd5a 	bl	800a916 <USB_DevDisconnect>

  return HAL_OK;
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e6c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	699b      	ldr	r3, [r3, #24]
 8003e8e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e9e:	f043 0303 	orr.w	r3, r3, #3
 8003ea2:	68fa      	ldr	r2, [r7, #12]
 8003ea4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3714      	adds	r7, #20
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003ebc:	4b34      	ldr	r3, [pc, #208]	; (8003f90 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ec4:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d101      	bne.n	8003ed2 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	e057      	b.n	8003f82 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ed8:	d90a      	bls.n	8003ef0 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003eda:	4b2d      	ldr	r3, [pc, #180]	; (8003f90 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	4a2a      	ldr	r2, [pc, #168]	; (8003f90 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eec:	60d3      	str	r3, [r2, #12]
 8003eee:	e007      	b.n	8003f00 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003ef0:	4b27      	ldr	r3, [pc, #156]	; (8003f90 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003ef8:	4925      	ldr	r1, [pc, #148]	; (8003f90 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003f00:	4b24      	ldr	r3, [pc, #144]	; (8003f94 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a24      	ldr	r2, [pc, #144]	; (8003f98 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8003f06:	fba2 2303 	umull	r2, r3, r2, r3
 8003f0a:	099b      	lsrs	r3, r3, #6
 8003f0c:	2232      	movs	r2, #50	; 0x32
 8003f0e:	fb02 f303 	mul.w	r3, r2, r3
 8003f12:	4a21      	ldr	r2, [pc, #132]	; (8003f98 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8003f14:	fba2 2303 	umull	r2, r3, r2, r3
 8003f18:	099b      	lsrs	r3, r3, #6
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003f1e:	e002      	b.n	8003f26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	3b01      	subs	r3, #1
 8003f24:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003f26:	4b1a      	ldr	r3, [pc, #104]	; (8003f90 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003f28:	68db      	ldr	r3, [r3, #12]
 8003f2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d102      	bne.n	8003f38 <HAL_PWREx_ControlVoltageScaling+0x84>
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1f3      	bne.n	8003f20 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d01b      	beq.n	8003f76 <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003f3e:	4b15      	ldr	r3, [pc, #84]	; (8003f94 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a15      	ldr	r2, [pc, #84]	; (8003f98 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8003f44:	fba2 2303 	umull	r2, r3, r2, r3
 8003f48:	099b      	lsrs	r3, r3, #6
 8003f4a:	2232      	movs	r2, #50	; 0x32
 8003f4c:	fb02 f303 	mul.w	r3, r2, r3
 8003f50:	4a11      	ldr	r2, [pc, #68]	; (8003f98 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8003f52:	fba2 2303 	umull	r2, r3, r2, r3
 8003f56:	099b      	lsrs	r3, r3, #6
 8003f58:	3301      	adds	r3, #1
 8003f5a:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003f5c:	e002      	b.n	8003f64 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	3b01      	subs	r3, #1
 8003f62:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003f64:	4b0a      	ldr	r3, [pc, #40]	; (8003f90 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d102      	bne.n	8003f76 <HAL_PWREx_ControlVoltageScaling+0xc2>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1f3      	bne.n	8003f5e <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e000      	b.n	8003f82 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	46020800 	.word	0x46020800
 8003f94:	20000000 	.word	0x20000000
 8003f98:	10624dd3 	.word	0x10624dd3

08003f9c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003fa0:	4b04      	ldr	r3, [pc, #16]	; (8003fb4 <HAL_PWREx_GetVoltageRange+0x18>)
 8003fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	46020800 	.word	0x46020800

08003fb8 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003fc0:	4b22      	ldr	r3, [pc, #136]	; (800404c <HAL_PWREx_ConfigSupply+0x94>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a22      	ldr	r2, [pc, #136]	; (8004050 <HAL_PWREx_ConfigSupply+0x98>)
 8003fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003fca:	099b      	lsrs	r3, r3, #6
 8003fcc:	2232      	movs	r2, #50	; 0x32
 8003fce:	fb02 f303 	mul.w	r3, r2, r3
 8003fd2:	4a1f      	ldr	r2, [pc, #124]	; (8004050 <HAL_PWREx_ConfigSupply+0x98>)
 8003fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd8:	099b      	lsrs	r3, r3, #6
 8003fda:	3301      	adds	r3, #1
 8003fdc:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d113      	bne.n	800400c <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8003fe4:	4b1b      	ldr	r3, [pc, #108]	; (8004054 <HAL_PWREx_ConfigSupply+0x9c>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	4a1a      	ldr	r2, [pc, #104]	; (8004054 <HAL_PWREx_ConfigSupply+0x9c>)
 8003fea:	f023 0302 	bic.w	r3, r3, #2
 8003fee:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003ff0:	e002      	b.n	8003ff8 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8003ff8:	4b16      	ldr	r3, [pc, #88]	; (8004054 <HAL_PWREx_ConfigSupply+0x9c>)
 8003ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b02      	cmp	r3, #2
 8004002:	d116      	bne.n	8004032 <HAL_PWREx_ConfigSupply+0x7a>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1f3      	bne.n	8003ff2 <HAL_PWREx_ConfigSupply+0x3a>
 800400a:	e012      	b.n	8004032 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800400c:	4b11      	ldr	r3, [pc, #68]	; (8004054 <HAL_PWREx_ConfigSupply+0x9c>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	4a10      	ldr	r2, [pc, #64]	; (8004054 <HAL_PWREx_ConfigSupply+0x9c>)
 8004012:	f043 0302 	orr.w	r3, r3, #2
 8004016:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004018:	e002      	b.n	8004020 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	3b01      	subs	r3, #1
 800401e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004020:	4b0c      	ldr	r3, [pc, #48]	; (8004054 <HAL_PWREx_ConfigSupply+0x9c>)
 8004022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004024:	f003 0302 	and.w	r3, r3, #2
 8004028:	2b00      	cmp	r3, #0
 800402a:	d102      	bne.n	8004032 <HAL_PWREx_ConfigSupply+0x7a>
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d1f3      	bne.n	800401a <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e000      	b.n	800403e <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3714      	adds	r7, #20
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	20000000 	.word	0x20000000
 8004050:	10624dd3 	.word	0x10624dd3
 8004054:	46020800 	.word	0x46020800

08004058 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004058:	b480      	push	{r7}
 800405a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 800405c:	4b05      	ldr	r3, [pc, #20]	; (8004074 <HAL_PWREx_EnableVddUSB+0x1c>)
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	4a04      	ldr	r2, [pc, #16]	; (8004074 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004062:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004066:	6113      	str	r3, [r2, #16]
}
 8004068:	bf00      	nop
 800406a:	46bd      	mov	sp, r7
 800406c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	46020800 	.word	0x46020800

08004078 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 800407c:	4b05      	ldr	r3, [pc, #20]	; (8004094 <HAL_PWREx_EnableVddIO2+0x1c>)
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	4a04      	ldr	r2, [pc, #16]	; (8004094 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004082:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004086:	6113      	str	r3, [r2, #16]
}
 8004088:	bf00      	nop
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	46020800 	.word	0x46020800

08004098 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08e      	sub	sp, #56	; 0x38
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80040a0:	2300      	movs	r3, #0
 80040a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d102      	bne.n	80040b2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	f000 bec3 	b.w	8004e38 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040b2:	4b9c      	ldr	r3, [pc, #624]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 80040b4:	69db      	ldr	r3, [r3, #28]
 80040b6:	f003 030c 	and.w	r3, r3, #12
 80040ba:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040bc:	4b99      	ldr	r3, [pc, #612]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 80040be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c0:	f003 0303 	and.w	r3, r3, #3
 80040c4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0310 	and.w	r3, r3, #16
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 8172 	beq.w	80043b8 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80040d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d007      	beq.n	80040ea <HAL_RCC_OscConfig+0x52>
 80040da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040dc:	2b0c      	cmp	r3, #12
 80040de:	f040 80e4 	bne.w	80042aa <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80040e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	f040 80e0 	bne.w	80042aa <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040ea:	4b8e      	ldr	r3, [pc, #568]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0304 	and.w	r3, r3, #4
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d006      	beq.n	8004104 <HAL_RCC_OscConfig+0x6c>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d102      	bne.n	8004104 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	f000 be9a 	b.w	8004e38 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004108:	4b86      	ldr	r3, [pc, #536]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004110:	2b00      	cmp	r3, #0
 8004112:	d004      	beq.n	800411e <HAL_RCC_OscConfig+0x86>
 8004114:	4b83      	ldr	r3, [pc, #524]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800411c:	e005      	b.n	800412a <HAL_RCC_OscConfig+0x92>
 800411e:	4b81      	ldr	r3, [pc, #516]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 8004120:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004124:	041b      	lsls	r3, r3, #16
 8004126:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800412a:	4293      	cmp	r3, r2
 800412c:	d255      	bcs.n	80041da <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800412e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10a      	bne.n	800414a <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004138:	4618      	mov	r0, r3
 800413a:	f001 f9d3 	bl	80054e4 <RCC_SetFlashLatencyFromMSIRange>
 800413e:	4603      	mov	r3, r0
 8004140:	2b00      	cmp	r3, #0
 8004142:	d002      	beq.n	800414a <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	f000 be77 	b.w	8004e38 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800414a:	4b76      	ldr	r3, [pc, #472]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	4a75      	ldr	r2, [pc, #468]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 8004150:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004154:	6093      	str	r3, [r2, #8]
 8004156:	4b73      	ldr	r3, [pc, #460]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004162:	4970      	ldr	r1, [pc, #448]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 8004164:	4313      	orrs	r3, r2
 8004166:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004170:	d309      	bcc.n	8004186 <HAL_RCC_OscConfig+0xee>
 8004172:	4b6c      	ldr	r3, [pc, #432]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 8004174:	68db      	ldr	r3, [r3, #12]
 8004176:	f023 021f 	bic.w	r2, r3, #31
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	4969      	ldr	r1, [pc, #420]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 8004180:	4313      	orrs	r3, r2
 8004182:	60cb      	str	r3, [r1, #12]
 8004184:	e07e      	b.n	8004284 <HAL_RCC_OscConfig+0x1ec>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	2b00      	cmp	r3, #0
 800418c:	da0a      	bge.n	80041a4 <HAL_RCC_OscConfig+0x10c>
 800418e:	4b65      	ldr	r3, [pc, #404]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	015b      	lsls	r3, r3, #5
 800419c:	4961      	ldr	r1, [pc, #388]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	60cb      	str	r3, [r1, #12]
 80041a2:	e06f      	b.n	8004284 <HAL_RCC_OscConfig+0x1ec>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ac:	d30a      	bcc.n	80041c4 <HAL_RCC_OscConfig+0x12c>
 80041ae:	4b5d      	ldr	r3, [pc, #372]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	029b      	lsls	r3, r3, #10
 80041bc:	4959      	ldr	r1, [pc, #356]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 80041be:	4313      	orrs	r3, r2
 80041c0:	60cb      	str	r3, [r1, #12]
 80041c2:	e05f      	b.n	8004284 <HAL_RCC_OscConfig+0x1ec>
 80041c4:	4b57      	ldr	r3, [pc, #348]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	03db      	lsls	r3, r3, #15
 80041d2:	4954      	ldr	r1, [pc, #336]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	60cb      	str	r3, [r1, #12]
 80041d8:	e054      	b.n	8004284 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80041da:	4b52      	ldr	r3, [pc, #328]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	4a51      	ldr	r2, [pc, #324]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 80041e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041e4:	6093      	str	r3, [r2, #8]
 80041e6:	4b4f      	ldr	r3, [pc, #316]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	494c      	ldr	r1, [pc, #304]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004200:	d309      	bcc.n	8004216 <HAL_RCC_OscConfig+0x17e>
 8004202:	4b48      	ldr	r3, [pc, #288]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f023 021f 	bic.w	r2, r3, #31
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	4945      	ldr	r1, [pc, #276]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 8004210:	4313      	orrs	r3, r2
 8004212:	60cb      	str	r3, [r1, #12]
 8004214:	e028      	b.n	8004268 <HAL_RCC_OscConfig+0x1d0>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421a:	2b00      	cmp	r3, #0
 800421c:	da0a      	bge.n	8004234 <HAL_RCC_OscConfig+0x19c>
 800421e:	4b41      	ldr	r3, [pc, #260]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	015b      	lsls	r3, r3, #5
 800422c:	493d      	ldr	r1, [pc, #244]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 800422e:	4313      	orrs	r3, r2
 8004230:	60cb      	str	r3, [r1, #12]
 8004232:	e019      	b.n	8004268 <HAL_RCC_OscConfig+0x1d0>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800423c:	d30a      	bcc.n	8004254 <HAL_RCC_OscConfig+0x1bc>
 800423e:	4b39      	ldr	r3, [pc, #228]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	029b      	lsls	r3, r3, #10
 800424c:	4935      	ldr	r1, [pc, #212]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 800424e:	4313      	orrs	r3, r2
 8004250:	60cb      	str	r3, [r1, #12]
 8004252:	e009      	b.n	8004268 <HAL_RCC_OscConfig+0x1d0>
 8004254:	4b33      	ldr	r3, [pc, #204]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a1b      	ldr	r3, [r3, #32]
 8004260:	03db      	lsls	r3, r3, #15
 8004262:	4930      	ldr	r1, [pc, #192]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 8004264:	4313      	orrs	r3, r2
 8004266:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10a      	bne.n	8004284 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004272:	4618      	mov	r0, r3
 8004274:	f001 f936 	bl	80054e4 <RCC_SetFlashLatencyFromMSIRange>
 8004278:	4603      	mov	r3, r0
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	f000 bdda 	b.w	8004e38 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004284:	f001 f8d8 	bl	8005438 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004288:	4b27      	ldr	r3, [pc, #156]	; (8004328 <HAL_RCC_OscConfig+0x290>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	4618      	mov	r0, r3
 800428e:	f7fd fe8d 	bl	8001fac <HAL_InitTick>
 8004292:	4603      	mov	r3, r0
 8004294:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8004298:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 808a 	beq.w	80043b6 <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 80042a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042a6:	f000 bdc7 	b.w	8004e38 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d066      	beq.n	8004380 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80042b2:	4b1c      	ldr	r3, [pc, #112]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a1b      	ldr	r2, [pc, #108]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 80042b8:	f043 0301 	orr.w	r3, r3, #1
 80042bc:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80042be:	f7fd febf 	bl	8002040 <HAL_GetTick>
 80042c2:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80042c4:	e009      	b.n	80042da <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80042c6:	f7fd febb 	bl	8002040 <HAL_GetTick>
 80042ca:	4602      	mov	r2, r0
 80042cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	2b02      	cmp	r3, #2
 80042d2:	d902      	bls.n	80042da <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 80042d4:	2303      	movs	r3, #3
 80042d6:	f000 bdaf 	b.w	8004e38 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80042da:	4b12      	ldr	r3, [pc, #72]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0304 	and.w	r3, r3, #4
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d0ef      	beq.n	80042c6 <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80042e6:	4b0f      	ldr	r3, [pc, #60]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	4a0e      	ldr	r2, [pc, #56]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 80042ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042f0:	6093      	str	r3, [r2, #8]
 80042f2:	4b0c      	ldr	r3, [pc, #48]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fe:	4909      	ldr	r1, [pc, #36]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 8004300:	4313      	orrs	r3, r2
 8004302:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004308:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800430c:	d30e      	bcc.n	800432c <HAL_RCC_OscConfig+0x294>
 800430e:	4b05      	ldr	r3, [pc, #20]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	f023 021f 	bic.w	r2, r3, #31
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	4902      	ldr	r1, [pc, #8]	; (8004324 <HAL_RCC_OscConfig+0x28c>)
 800431c:	4313      	orrs	r3, r2
 800431e:	60cb      	str	r3, [r1, #12]
 8004320:	e04a      	b.n	80043b8 <HAL_RCC_OscConfig+0x320>
 8004322:	bf00      	nop
 8004324:	46020c00 	.word	0x46020c00
 8004328:	20000004 	.word	0x20000004
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	2b00      	cmp	r3, #0
 8004332:	da0a      	bge.n	800434a <HAL_RCC_OscConfig+0x2b2>
 8004334:	4b9b      	ldr	r3, [pc, #620]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a1b      	ldr	r3, [r3, #32]
 8004340:	015b      	lsls	r3, r3, #5
 8004342:	4998      	ldr	r1, [pc, #608]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 8004344:	4313      	orrs	r3, r2
 8004346:	60cb      	str	r3, [r1, #12]
 8004348:	e036      	b.n	80043b8 <HAL_RCC_OscConfig+0x320>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800434e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004352:	d30a      	bcc.n	800436a <HAL_RCC_OscConfig+0x2d2>
 8004354:	4b93      	ldr	r3, [pc, #588]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a1b      	ldr	r3, [r3, #32]
 8004360:	029b      	lsls	r3, r3, #10
 8004362:	4990      	ldr	r1, [pc, #576]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 8004364:	4313      	orrs	r3, r2
 8004366:	60cb      	str	r3, [r1, #12]
 8004368:	e026      	b.n	80043b8 <HAL_RCC_OscConfig+0x320>
 800436a:	4b8e      	ldr	r3, [pc, #568]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	03db      	lsls	r3, r3, #15
 8004378:	498a      	ldr	r1, [pc, #552]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 800437a:	4313      	orrs	r3, r2
 800437c:	60cb      	str	r3, [r1, #12]
 800437e:	e01b      	b.n	80043b8 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004380:	4b88      	ldr	r3, [pc, #544]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a87      	ldr	r2, [pc, #540]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 8004386:	f023 0301 	bic.w	r3, r3, #1
 800438a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800438c:	f7fd fe58 	bl	8002040 <HAL_GetTick>
 8004390:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004392:	e009      	b.n	80043a8 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004394:	f7fd fe54 	bl	8002040 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	2b02      	cmp	r3, #2
 80043a0:	d902      	bls.n	80043a8 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	f000 bd48 	b.w	8004e38 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80043a8:	4b7e      	ldr	r3, [pc, #504]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 0304 	and.w	r3, r3, #4
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1ef      	bne.n	8004394 <HAL_RCC_OscConfig+0x2fc>
 80043b4:	e000      	b.n	80043b8 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043b6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 0301 	and.w	r3, r3, #1
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	f000 8094 	beq.w	80044ee <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80043c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d005      	beq.n	80043d8 <HAL_RCC_OscConfig+0x340>
 80043cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ce:	2b0c      	cmp	r3, #12
 80043d0:	d110      	bne.n	80043f4 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80043d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d4:	2b03      	cmp	r3, #3
 80043d6:	d10d      	bne.n	80043f4 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d8:	4b72      	ldr	r3, [pc, #456]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	f000 8083 	beq.w	80044ec <HAL_RCC_OscConfig+0x454>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d17e      	bne.n	80044ec <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	f000 bd22 	b.w	8004e38 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043fc:	d106      	bne.n	800440c <HAL_RCC_OscConfig+0x374>
 80043fe:	4b69      	ldr	r3, [pc, #420]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a68      	ldr	r2, [pc, #416]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 8004404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	e041      	b.n	8004490 <HAL_RCC_OscConfig+0x3f8>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004414:	d112      	bne.n	800443c <HAL_RCC_OscConfig+0x3a4>
 8004416:	4b63      	ldr	r3, [pc, #396]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a62      	ldr	r2, [pc, #392]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 800441c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	4b60      	ldr	r3, [pc, #384]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a5f      	ldr	r2, [pc, #380]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 8004428:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800442c:	6013      	str	r3, [r2, #0]
 800442e:	4b5d      	ldr	r3, [pc, #372]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a5c      	ldr	r2, [pc, #368]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 8004434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004438:	6013      	str	r3, [r2, #0]
 800443a:	e029      	b.n	8004490 <HAL_RCC_OscConfig+0x3f8>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 8004444:	d112      	bne.n	800446c <HAL_RCC_OscConfig+0x3d4>
 8004446:	4b57      	ldr	r3, [pc, #348]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a56      	ldr	r2, [pc, #344]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 800444c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004450:	6013      	str	r3, [r2, #0]
 8004452:	4b54      	ldr	r3, [pc, #336]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a53      	ldr	r2, [pc, #332]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 8004458:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800445c:	6013      	str	r3, [r2, #0]
 800445e:	4b51      	ldr	r3, [pc, #324]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a50      	ldr	r2, [pc, #320]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 8004464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004468:	6013      	str	r3, [r2, #0]
 800446a:	e011      	b.n	8004490 <HAL_RCC_OscConfig+0x3f8>
 800446c:	4b4d      	ldr	r3, [pc, #308]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a4c      	ldr	r2, [pc, #304]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 8004472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004476:	6013      	str	r3, [r2, #0]
 8004478:	4b4a      	ldr	r3, [pc, #296]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a49      	ldr	r2, [pc, #292]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 800447e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	4b47      	ldr	r3, [pc, #284]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a46      	ldr	r2, [pc, #280]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 800448a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800448e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d014      	beq.n	80044c2 <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 8004498:	f7fd fdd2 	bl	8002040 <HAL_GetTick>
 800449c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800449e:	e009      	b.n	80044b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044a0:	f7fd fdce 	bl	8002040 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b64      	cmp	r3, #100	; 0x64
 80044ac:	d902      	bls.n	80044b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	f000 bcc2 	b.w	8004e38 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044b4:	4b3b      	ldr	r3, [pc, #236]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0ef      	beq.n	80044a0 <HAL_RCC_OscConfig+0x408>
 80044c0:	e015      	b.n	80044ee <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 80044c2:	f7fd fdbd 	bl	8002040 <HAL_GetTick>
 80044c6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044c8:	e009      	b.n	80044de <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044ca:	f7fd fdb9 	bl	8002040 <HAL_GetTick>
 80044ce:	4602      	mov	r2, r0
 80044d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d2:	1ad3      	subs	r3, r2, r3
 80044d4:	2b64      	cmp	r3, #100	; 0x64
 80044d6:	d902      	bls.n	80044de <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80044d8:	2303      	movs	r3, #3
 80044da:	f000 bcad 	b.w	8004e38 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044de:	4b31      	ldr	r3, [pc, #196]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d1ef      	bne.n	80044ca <HAL_RCC_OscConfig+0x432>
 80044ea:	e000      	b.n	80044ee <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d066      	beq.n	80045c8 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80044fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044fc:	2b04      	cmp	r3, #4
 80044fe:	d005      	beq.n	800450c <HAL_RCC_OscConfig+0x474>
 8004500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004502:	2b0c      	cmp	r3, #12
 8004504:	d11a      	bne.n	800453c <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004508:	2b02      	cmp	r3, #2
 800450a:	d117      	bne.n	800453c <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800450c:	4b25      	ldr	r3, [pc, #148]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004514:	2b00      	cmp	r3, #0
 8004516:	d006      	beq.n	8004526 <HAL_RCC_OscConfig+0x48e>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d102      	bne.n	8004526 <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	f000 bc89 	b.w	8004e38 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004526:	4b1f      	ldr	r3, [pc, #124]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	041b      	lsls	r3, r3, #16
 8004534:	491b      	ldr	r1, [pc, #108]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 8004536:	4313      	orrs	r3, r2
 8004538:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800453a:	e045      	b.n	80045c8 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d024      	beq.n	800458e <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8004544:	4b17      	ldr	r3, [pc, #92]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a16      	ldr	r2, [pc, #88]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 800454a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800454e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004550:	f7fd fd76 	bl	8002040 <HAL_GetTick>
 8004554:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004556:	e009      	b.n	800456c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004558:	f7fd fd72 	bl	8002040 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d902      	bls.n	800456c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	f000 bc66 	b.w	8004e38 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800456c:	4b0d      	ldr	r3, [pc, #52]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0ef      	beq.n	8004558 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004578:	4b0a      	ldr	r3, [pc, #40]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 800457a:	691b      	ldr	r3, [r3, #16]
 800457c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	041b      	lsls	r3, r3, #16
 8004586:	4907      	ldr	r1, [pc, #28]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 8004588:	4313      	orrs	r3, r2
 800458a:	610b      	str	r3, [r1, #16]
 800458c:	e01c      	b.n	80045c8 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 800458e:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a04      	ldr	r2, [pc, #16]	; (80045a4 <HAL_RCC_OscConfig+0x50c>)
 8004594:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004598:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800459a:	f7fd fd51 	bl	8002040 <HAL_GetTick>
 800459e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045a0:	e00c      	b.n	80045bc <HAL_RCC_OscConfig+0x524>
 80045a2:	bf00      	nop
 80045a4:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045a8:	f7fd fd4a 	bl	8002040 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d902      	bls.n	80045bc <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	f000 bc3e 	b.w	8004e38 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045bc:	4baf      	ldr	r3, [pc, #700]	; (800487c <HAL_RCC_OscConfig+0x7e4>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1ef      	bne.n	80045a8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0308 	and.w	r3, r3, #8
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 80c7 	beq.w	8004764 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 80045d6:	2300      	movs	r3, #0
 80045d8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045dc:	4ba7      	ldr	r3, [pc, #668]	; (800487c <HAL_RCC_OscConfig+0x7e4>)
 80045de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045e2:	f003 0304 	and.w	r3, r3, #4
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d111      	bne.n	800460e <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045ea:	4ba4      	ldr	r3, [pc, #656]	; (800487c <HAL_RCC_OscConfig+0x7e4>)
 80045ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045f0:	4aa2      	ldr	r2, [pc, #648]	; (800487c <HAL_RCC_OscConfig+0x7e4>)
 80045f2:	f043 0304 	orr.w	r3, r3, #4
 80045f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80045fa:	4ba0      	ldr	r3, [pc, #640]	; (800487c <HAL_RCC_OscConfig+0x7e4>)
 80045fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	617b      	str	r3, [r7, #20]
 8004606:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004608:	2301      	movs	r3, #1
 800460a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800460e:	4b9c      	ldr	r3, [pc, #624]	; (8004880 <HAL_RCC_OscConfig+0x7e8>)
 8004610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	2b00      	cmp	r3, #0
 8004618:	d118      	bne.n	800464c <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800461a:	4b99      	ldr	r3, [pc, #612]	; (8004880 <HAL_RCC_OscConfig+0x7e8>)
 800461c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461e:	4a98      	ldr	r2, [pc, #608]	; (8004880 <HAL_RCC_OscConfig+0x7e8>)
 8004620:	f043 0301 	orr.w	r3, r3, #1
 8004624:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004626:	f7fd fd0b 	bl	8002040 <HAL_GetTick>
 800462a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800462c:	e008      	b.n	8004640 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800462e:	f7fd fd07 	bl	8002040 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d901      	bls.n	8004640 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e3fb      	b.n	8004e38 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004640:	4b8f      	ldr	r3, [pc, #572]	; (8004880 <HAL_RCC_OscConfig+0x7e8>)
 8004642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	d0f0      	beq.n	800462e <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	695b      	ldr	r3, [r3, #20]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d05f      	beq.n	8004714 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8004654:	4b89      	ldr	r3, [pc, #548]	; (800487c <HAL_RCC_OscConfig+0x7e4>)
 8004656:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800465a:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	699a      	ldr	r2, [r3, #24]
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004666:	429a      	cmp	r2, r3
 8004668:	d037      	beq.n	80046da <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800466a:	6a3b      	ldr	r3, [r7, #32]
 800466c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d006      	beq.n	8004682 <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8004674:	6a3b      	ldr	r3, [r7, #32]
 8004676:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e3da      	b.n	8004e38 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004688:	2b00      	cmp	r3, #0
 800468a:	d01b      	beq.n	80046c4 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 800468c:	4b7b      	ldr	r3, [pc, #492]	; (800487c <HAL_RCC_OscConfig+0x7e4>)
 800468e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004692:	4a7a      	ldr	r2, [pc, #488]	; (800487c <HAL_RCC_OscConfig+0x7e4>)
 8004694:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8004698:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 800469c:	f7fd fcd0 	bl	8002040 <HAL_GetTick>
 80046a0:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046a4:	f7fd fccc 	bl	8002040 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e3c0      	b.n	8004e38 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80046b6:	4b71      	ldr	r3, [pc, #452]	; (800487c <HAL_RCC_OscConfig+0x7e4>)
 80046b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1ef      	bne.n	80046a4 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 80046c4:	4b6d      	ldr	r3, [pc, #436]	; (800487c <HAL_RCC_OscConfig+0x7e4>)
 80046c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046ca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	496a      	ldr	r1, [pc, #424]	; (800487c <HAL_RCC_OscConfig+0x7e4>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 80046da:	4b68      	ldr	r3, [pc, #416]	; (800487c <HAL_RCC_OscConfig+0x7e4>)
 80046dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046e0:	4a66      	ldr	r2, [pc, #408]	; (800487c <HAL_RCC_OscConfig+0x7e4>)
 80046e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80046ea:	f7fd fca9 	bl	8002040 <HAL_GetTick>
 80046ee:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046f2:	f7fd fca5 	bl	8002040 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e399      	b.n	8004e38 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004704:	4b5d      	ldr	r3, [pc, #372]	; (800487c <HAL_RCC_OscConfig+0x7e4>)
 8004706:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800470a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d0ef      	beq.n	80046f2 <HAL_RCC_OscConfig+0x65a>
 8004712:	e01b      	b.n	800474c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004714:	4b59      	ldr	r3, [pc, #356]	; (800487c <HAL_RCC_OscConfig+0x7e4>)
 8004716:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800471a:	4a58      	ldr	r2, [pc, #352]	; (800487c <HAL_RCC_OscConfig+0x7e4>)
 800471c:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8004720:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8004724:	f7fd fc8c 	bl	8002040 <HAL_GetTick>
 8004728:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800472a:	e008      	b.n	800473e <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800472c:	f7fd fc88 	bl	8002040 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b02      	cmp	r3, #2
 8004738:	d901      	bls.n	800473e <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e37c      	b.n	8004e38 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800473e:	4b4f      	ldr	r3, [pc, #316]	; (800487c <HAL_RCC_OscConfig+0x7e4>)
 8004740:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d1ef      	bne.n	800472c <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800474c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004750:	2b01      	cmp	r3, #1
 8004752:	d107      	bne.n	8004764 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004754:	4b49      	ldr	r3, [pc, #292]	; (800487c <HAL_RCC_OscConfig+0x7e4>)
 8004756:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800475a:	4a48      	ldr	r2, [pc, #288]	; (800487c <HAL_RCC_OscConfig+0x7e4>)
 800475c:	f023 0304 	bic.w	r3, r3, #4
 8004760:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0304 	and.w	r3, r3, #4
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 8112 	beq.w	8004996 <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8004772:	2300      	movs	r3, #0
 8004774:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004778:	4b40      	ldr	r3, [pc, #256]	; (800487c <HAL_RCC_OscConfig+0x7e4>)
 800477a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800477e:	f003 0304 	and.w	r3, r3, #4
 8004782:	2b00      	cmp	r3, #0
 8004784:	d111      	bne.n	80047aa <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004786:	4b3d      	ldr	r3, [pc, #244]	; (800487c <HAL_RCC_OscConfig+0x7e4>)
 8004788:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800478c:	4a3b      	ldr	r2, [pc, #236]	; (800487c <HAL_RCC_OscConfig+0x7e4>)
 800478e:	f043 0304 	orr.w	r3, r3, #4
 8004792:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004796:	4b39      	ldr	r3, [pc, #228]	; (800487c <HAL_RCC_OscConfig+0x7e4>)
 8004798:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800479c:	f003 0304 	and.w	r3, r3, #4
 80047a0:	613b      	str	r3, [r7, #16]
 80047a2:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80047a4:	2301      	movs	r3, #1
 80047a6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80047aa:	4b35      	ldr	r3, [pc, #212]	; (8004880 <HAL_RCC_OscConfig+0x7e8>)
 80047ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d118      	bne.n	80047e8 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80047b6:	4b32      	ldr	r3, [pc, #200]	; (8004880 <HAL_RCC_OscConfig+0x7e8>)
 80047b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ba:	4a31      	ldr	r2, [pc, #196]	; (8004880 <HAL_RCC_OscConfig+0x7e8>)
 80047bc:	f043 0301 	orr.w	r3, r3, #1
 80047c0:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047c2:	f7fd fc3d 	bl	8002040 <HAL_GetTick>
 80047c6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80047c8:	e008      	b.n	80047dc <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ca:	f7fd fc39 	bl	8002040 <HAL_GetTick>
 80047ce:	4602      	mov	r2, r0
 80047d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e32d      	b.n	8004e38 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80047dc:	4b28      	ldr	r3, [pc, #160]	; (8004880 <HAL_RCC_OscConfig+0x7e8>)
 80047de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d0f0      	beq.n	80047ca <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d01f      	beq.n	8004834 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f003 0304 	and.w	r3, r3, #4
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d010      	beq.n	8004822 <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004800:	4b1e      	ldr	r3, [pc, #120]	; (800487c <HAL_RCC_OscConfig+0x7e4>)
 8004802:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004806:	4a1d      	ldr	r2, [pc, #116]	; (800487c <HAL_RCC_OscConfig+0x7e4>)
 8004808:	f043 0304 	orr.w	r3, r3, #4
 800480c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004810:	4b1a      	ldr	r3, [pc, #104]	; (800487c <HAL_RCC_OscConfig+0x7e4>)
 8004812:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004816:	4a19      	ldr	r2, [pc, #100]	; (800487c <HAL_RCC_OscConfig+0x7e4>)
 8004818:	f043 0301 	orr.w	r3, r3, #1
 800481c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004820:	e018      	b.n	8004854 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004822:	4b16      	ldr	r3, [pc, #88]	; (800487c <HAL_RCC_OscConfig+0x7e4>)
 8004824:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004828:	4a14      	ldr	r2, [pc, #80]	; (800487c <HAL_RCC_OscConfig+0x7e4>)
 800482a:	f043 0301 	orr.w	r3, r3, #1
 800482e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004832:	e00f      	b.n	8004854 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004834:	4b11      	ldr	r3, [pc, #68]	; (800487c <HAL_RCC_OscConfig+0x7e4>)
 8004836:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800483a:	4a10      	ldr	r2, [pc, #64]	; (800487c <HAL_RCC_OscConfig+0x7e4>)
 800483c:	f023 0301 	bic.w	r3, r3, #1
 8004840:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004844:	4b0d      	ldr	r3, [pc, #52]	; (800487c <HAL_RCC_OscConfig+0x7e4>)
 8004846:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800484a:	4a0c      	ldr	r2, [pc, #48]	; (800487c <HAL_RCC_OscConfig+0x7e4>)
 800484c:	f023 0304 	bic.w	r3, r3, #4
 8004850:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d058      	beq.n	800490e <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 800485c:	f7fd fbf0 	bl	8002040 <HAL_GetTick>
 8004860:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004862:	e00f      	b.n	8004884 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004864:	f7fd fbec 	bl	8002040 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004872:	4293      	cmp	r3, r2
 8004874:	d906      	bls.n	8004884 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e2de      	b.n	8004e38 <HAL_RCC_OscConfig+0xda0>
 800487a:	bf00      	nop
 800487c:	46020c00 	.word	0x46020c00
 8004880:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004884:	4b9c      	ldr	r3, [pc, #624]	; (8004af8 <HAL_RCC_OscConfig+0xa60>)
 8004886:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800488a:	f003 0302 	and.w	r3, r3, #2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d0e8      	beq.n	8004864 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800489a:	2b00      	cmp	r3, #0
 800489c:	d01b      	beq.n	80048d6 <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800489e:	4b96      	ldr	r3, [pc, #600]	; (8004af8 <HAL_RCC_OscConfig+0xa60>)
 80048a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048a4:	4a94      	ldr	r2, [pc, #592]	; (8004af8 <HAL_RCC_OscConfig+0xa60>)
 80048a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80048ae:	e00a      	b.n	80048c6 <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b0:	f7fd fbc6 	bl	8002040 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80048be:	4293      	cmp	r3, r2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e2b8      	b.n	8004e38 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80048c6:	4b8c      	ldr	r3, [pc, #560]	; (8004af8 <HAL_RCC_OscConfig+0xa60>)
 80048c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d0ed      	beq.n	80048b0 <HAL_RCC_OscConfig+0x818>
 80048d4:	e053      	b.n	800497e <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80048d6:	4b88      	ldr	r3, [pc, #544]	; (8004af8 <HAL_RCC_OscConfig+0xa60>)
 80048d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048dc:	4a86      	ldr	r2, [pc, #536]	; (8004af8 <HAL_RCC_OscConfig+0xa60>)
 80048de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80048e6:	e00a      	b.n	80048fe <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048e8:	f7fd fbaa 	bl	8002040 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e29c      	b.n	8004e38 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80048fe:	4b7e      	ldr	r3, [pc, #504]	; (8004af8 <HAL_RCC_OscConfig+0xa60>)
 8004900:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004904:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1ed      	bne.n	80048e8 <HAL_RCC_OscConfig+0x850>
 800490c:	e037      	b.n	800497e <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 800490e:	f7fd fb97 	bl	8002040 <HAL_GetTick>
 8004912:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004914:	e00a      	b.n	800492c <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004916:	f7fd fb93 	bl	8002040 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	f241 3288 	movw	r2, #5000	; 0x1388
 8004924:	4293      	cmp	r3, r2
 8004926:	d901      	bls.n	800492c <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 8004928:	2303      	movs	r3, #3
 800492a:	e285      	b.n	8004e38 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800492c:	4b72      	ldr	r3, [pc, #456]	; (8004af8 <HAL_RCC_OscConfig+0xa60>)
 800492e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1ed      	bne.n	8004916 <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 800493a:	4b6f      	ldr	r3, [pc, #444]	; (8004af8 <HAL_RCC_OscConfig+0xa60>)
 800493c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004944:	2b00      	cmp	r3, #0
 8004946:	d01a      	beq.n	800497e <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004948:	4b6b      	ldr	r3, [pc, #428]	; (8004af8 <HAL_RCC_OscConfig+0xa60>)
 800494a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800494e:	4a6a      	ldr	r2, [pc, #424]	; (8004af8 <HAL_RCC_OscConfig+0xa60>)
 8004950:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004954:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004958:	e00a      	b.n	8004970 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800495a:	f7fd fb71 	bl	8002040 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	f241 3288 	movw	r2, #5000	; 0x1388
 8004968:	4293      	cmp	r3, r2
 800496a:	d901      	bls.n	8004970 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e263      	b.n	8004e38 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004970:	4b61      	ldr	r3, [pc, #388]	; (8004af8 <HAL_RCC_OscConfig+0xa60>)
 8004972:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800497a:	2b00      	cmp	r3, #0
 800497c:	d1ed      	bne.n	800495a <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800497e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004982:	2b01      	cmp	r3, #1
 8004984:	d107      	bne.n	8004996 <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004986:	4b5c      	ldr	r3, [pc, #368]	; (8004af8 <HAL_RCC_OscConfig+0xa60>)
 8004988:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800498c:	4a5a      	ldr	r2, [pc, #360]	; (8004af8 <HAL_RCC_OscConfig+0xa60>)
 800498e:	f023 0304 	bic.w	r3, r3, #4
 8004992:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f003 0320 	and.w	r3, r3, #32
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d036      	beq.n	8004a10 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d019      	beq.n	80049de <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80049aa:	4b53      	ldr	r3, [pc, #332]	; (8004af8 <HAL_RCC_OscConfig+0xa60>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a52      	ldr	r2, [pc, #328]	; (8004af8 <HAL_RCC_OscConfig+0xa60>)
 80049b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049b4:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80049b6:	f7fd fb43 	bl	8002040 <HAL_GetTick>
 80049ba:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80049bc:	e008      	b.n	80049d0 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049be:	f7fd fb3f 	bl	8002040 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e233      	b.n	8004e38 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80049d0:	4b49      	ldr	r3, [pc, #292]	; (8004af8 <HAL_RCC_OscConfig+0xa60>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0f0      	beq.n	80049be <HAL_RCC_OscConfig+0x926>
 80049dc:	e018      	b.n	8004a10 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 80049de:	4b46      	ldr	r3, [pc, #280]	; (8004af8 <HAL_RCC_OscConfig+0xa60>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a45      	ldr	r2, [pc, #276]	; (8004af8 <HAL_RCC_OscConfig+0xa60>)
 80049e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049e8:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80049ea:	f7fd fb29 	bl	8002040 <HAL_GetTick>
 80049ee:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80049f0:	e008      	b.n	8004a04 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80049f2:	f7fd fb25 	bl	8002040 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d901      	bls.n	8004a04 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e219      	b.n	8004e38 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004a04:	4b3c      	ldr	r3, [pc, #240]	; (8004af8 <HAL_RCC_OscConfig+0xa60>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1f0      	bne.n	80049f2 <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d036      	beq.n	8004a8a <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d019      	beq.n	8004a58 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004a24:	4b34      	ldr	r3, [pc, #208]	; (8004af8 <HAL_RCC_OscConfig+0xa60>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a33      	ldr	r2, [pc, #204]	; (8004af8 <HAL_RCC_OscConfig+0xa60>)
 8004a2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a2e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004a30:	f7fd fb06 	bl	8002040 <HAL_GetTick>
 8004a34:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004a36:	e008      	b.n	8004a4a <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004a38:	f7fd fb02 	bl	8002040 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e1f6      	b.n	8004e38 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004a4a:	4b2b      	ldr	r3, [pc, #172]	; (8004af8 <HAL_RCC_OscConfig+0xa60>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d0f0      	beq.n	8004a38 <HAL_RCC_OscConfig+0x9a0>
 8004a56:	e018      	b.n	8004a8a <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004a58:	4b27      	ldr	r3, [pc, #156]	; (8004af8 <HAL_RCC_OscConfig+0xa60>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a26      	ldr	r2, [pc, #152]	; (8004af8 <HAL_RCC_OscConfig+0xa60>)
 8004a5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a62:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004a64:	f7fd faec 	bl	8002040 <HAL_GetTick>
 8004a68:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004a6c:	f7fd fae8 	bl	8002040 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e1dc      	b.n	8004e38 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004a7e:	4b1e      	ldr	r3, [pc, #120]	; (8004af8 <HAL_RCC_OscConfig+0xa60>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1f0      	bne.n	8004a6c <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d07f      	beq.n	8004b96 <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d062      	beq.n	8004b64 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8004a9e:	4b16      	ldr	r3, [pc, #88]	; (8004af8 <HAL_RCC_OscConfig+0xa60>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	4a15      	ldr	r2, [pc, #84]	; (8004af8 <HAL_RCC_OscConfig+0xa60>)
 8004aa4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004aa8:	6093      	str	r3, [r2, #8]
 8004aaa:	4b13      	ldr	r3, [pc, #76]	; (8004af8 <HAL_RCC_OscConfig+0xa60>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab6:	4910      	ldr	r1, [pc, #64]	; (8004af8 <HAL_RCC_OscConfig+0xa60>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004ac4:	d309      	bcc.n	8004ada <HAL_RCC_OscConfig+0xa42>
 8004ac6:	4b0c      	ldr	r3, [pc, #48]	; (8004af8 <HAL_RCC_OscConfig+0xa60>)
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	f023 021f 	bic.w	r2, r3, #31
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a1b      	ldr	r3, [r3, #32]
 8004ad2:	4909      	ldr	r1, [pc, #36]	; (8004af8 <HAL_RCC_OscConfig+0xa60>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	60cb      	str	r3, [r1, #12]
 8004ad8:	e02a      	b.n	8004b30 <HAL_RCC_OscConfig+0xa98>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	da0c      	bge.n	8004afc <HAL_RCC_OscConfig+0xa64>
 8004ae2:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <HAL_RCC_OscConfig+0xa60>)
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	015b      	lsls	r3, r3, #5
 8004af0:	4901      	ldr	r1, [pc, #4]	; (8004af8 <HAL_RCC_OscConfig+0xa60>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	60cb      	str	r3, [r1, #12]
 8004af6:	e01b      	b.n	8004b30 <HAL_RCC_OscConfig+0xa98>
 8004af8:	46020c00 	.word	0x46020c00
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b04:	d30a      	bcc.n	8004b1c <HAL_RCC_OscConfig+0xa84>
 8004b06:	4ba5      	ldr	r3, [pc, #660]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	029b      	lsls	r3, r3, #10
 8004b14:	49a1      	ldr	r1, [pc, #644]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60cb      	str	r3, [r1, #12]
 8004b1a:	e009      	b.n	8004b30 <HAL_RCC_OscConfig+0xa98>
 8004b1c:	4b9f      	ldr	r3, [pc, #636]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6a1b      	ldr	r3, [r3, #32]
 8004b28:	03db      	lsls	r3, r3, #15
 8004b2a:	499c      	ldr	r1, [pc, #624]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004b30:	4b9a      	ldr	r3, [pc, #616]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a99      	ldr	r2, [pc, #612]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004b36:	f043 0310 	orr.w	r3, r3, #16
 8004b3a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004b3c:	f7fd fa80 	bl	8002040 <HAL_GetTick>
 8004b40:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004b44:	f7fd fa7c 	bl	8002040 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e170      	b.n	8004e38 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004b56:	4b91      	ldr	r3, [pc, #580]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 0320 	and.w	r3, r3, #32
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d0f0      	beq.n	8004b44 <HAL_RCC_OscConfig+0xaac>
 8004b62:	e018      	b.n	8004b96 <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8004b64:	4b8d      	ldr	r3, [pc, #564]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a8c      	ldr	r2, [pc, #560]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004b6a:	f023 0310 	bic.w	r3, r3, #16
 8004b6e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004b70:	f7fd fa66 	bl	8002040 <HAL_GetTick>
 8004b74:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004b76:	e008      	b.n	8004b8a <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004b78:	f7fd fa62 	bl	8002040 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d901      	bls.n	8004b8a <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 8004b86:	2303      	movs	r3, #3
 8004b88:	e156      	b.n	8004e38 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004b8a:	4b84      	ldr	r3, [pc, #528]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0320 	and.w	r3, r3, #32
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d1f0      	bne.n	8004b78 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	f000 814b 	beq.w	8004e36 <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004ba6:	4b7d      	ldr	r3, [pc, #500]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	f003 030c 	and.w	r3, r3, #12
 8004bae:	2b0c      	cmp	r3, #12
 8004bb0:	f000 80fa 	beq.w	8004da8 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	f040 80cc 	bne.w	8004d56 <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004bbe:	4b77      	ldr	r3, [pc, #476]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a76      	ldr	r2, [pc, #472]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004bc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bc8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004bca:	f7fd fa39 	bl	8002040 <HAL_GetTick>
 8004bce:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004bd0:	e008      	b.n	8004be4 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd2:	f7fd fa35 	bl	8002040 <HAL_GetTick>
 8004bd6:	4602      	mov	r2, r0
 8004bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bda:	1ad3      	subs	r3, r2, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e129      	b.n	8004e38 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004be4:	4b6d      	ldr	r3, [pc, #436]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1f0      	bne.n	8004bd2 <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bf0:	4b6a      	ldr	r3, [pc, #424]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004bf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bf6:	f003 0304 	and.w	r3, r3, #4
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d111      	bne.n	8004c22 <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004bfe:	4b67      	ldr	r3, [pc, #412]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004c00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c04:	4a65      	ldr	r2, [pc, #404]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004c06:	f043 0304 	orr.w	r3, r3, #4
 8004c0a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004c0e:	4b63      	ldr	r3, [pc, #396]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004c10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c14:	f003 0304 	and.w	r3, r3, #4
 8004c18:	60fb      	str	r3, [r7, #12]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004c22:	4b5f      	ldr	r3, [pc, #380]	; (8004da0 <HAL_RCC_OscConfig+0xd08>)
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c2e:	d102      	bne.n	8004c36 <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8004c30:	2301      	movs	r3, #1
 8004c32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004c36:	4b5a      	ldr	r3, [pc, #360]	; (8004da0 <HAL_RCC_OscConfig+0xd08>)
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	4a59      	ldr	r2, [pc, #356]	; (8004da0 <HAL_RCC_OscConfig+0xd08>)
 8004c3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c40:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004c42:	4b56      	ldr	r3, [pc, #344]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c4a:	f023 0303 	bic.w	r3, r3, #3
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c56:	3a01      	subs	r2, #1
 8004c58:	0212      	lsls	r2, r2, #8
 8004c5a:	4311      	orrs	r1, r2
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004c60:	430a      	orrs	r2, r1
 8004c62:	494e      	ldr	r1, [pc, #312]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	628b      	str	r3, [r1, #40]	; 0x28
 8004c68:	4b4c      	ldr	r3, [pc, #304]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004c6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c6c:	4b4d      	ldr	r3, [pc, #308]	; (8004da4 <HAL_RCC_OscConfig+0xd0c>)
 8004c6e:	4013      	ands	r3, r2
 8004c70:	687a      	ldr	r2, [r7, #4]
 8004c72:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004c74:	3a01      	subs	r2, #1
 8004c76:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004c7a:	687a      	ldr	r2, [r7, #4]
 8004c7c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004c7e:	3a01      	subs	r2, #1
 8004c80:	0252      	lsls	r2, r2, #9
 8004c82:	b292      	uxth	r2, r2
 8004c84:	4311      	orrs	r1, r2
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004c8a:	3a01      	subs	r2, #1
 8004c8c:	0412      	lsls	r2, r2, #16
 8004c8e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004c92:	4311      	orrs	r1, r2
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004c98:	3a01      	subs	r2, #1
 8004c9a:	0612      	lsls	r2, r2, #24
 8004c9c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	493e      	ldr	r1, [pc, #248]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004ca8:	4b3c      	ldr	r3, [pc, #240]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004caa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cac:	4a3b      	ldr	r2, [pc, #236]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004cae:	f023 0310 	bic.w	r3, r3, #16
 8004cb2:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004cb4:	4b39      	ldr	r3, [pc, #228]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cbc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004cc4:	00d2      	lsls	r2, r2, #3
 8004cc6:	4935      	ldr	r1, [pc, #212]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004ccc:	4b33      	ldr	r3, [pc, #204]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004cce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd0:	4a32      	ldr	r2, [pc, #200]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004cd2:	f043 0310 	orr.w	r3, r3, #16
 8004cd6:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004cd8:	4b30      	ldr	r3, [pc, #192]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cdc:	f023 020c 	bic.w	r2, r3, #12
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce4:	492d      	ldr	r1, [pc, #180]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8004cea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d105      	bne.n	8004cfe <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004cf2:	4b2b      	ldr	r3, [pc, #172]	; (8004da0 <HAL_RCC_OscConfig+0xd08>)
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	4a2a      	ldr	r2, [pc, #168]	; (8004da0 <HAL_RCC_OscConfig+0xd08>)
 8004cf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cfc:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004cfe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d107      	bne.n	8004d16 <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004d06:	4b25      	ldr	r3, [pc, #148]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d0c:	4a23      	ldr	r2, [pc, #140]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004d0e:	f023 0304 	bic.w	r3, r3, #4
 8004d12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004d16:	4b21      	ldr	r3, [pc, #132]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1a:	4a20      	ldr	r2, [pc, #128]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d20:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004d22:	4b1e      	ldr	r3, [pc, #120]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4a1d      	ldr	r2, [pc, #116]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004d28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d2c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004d2e:	f7fd f987 	bl	8002040 <HAL_GetTick>
 8004d32:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004d34:	e008      	b.n	8004d48 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d36:	f7fd f983 	bl	8002040 <HAL_GetTick>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3e:	1ad3      	subs	r3, r2, r3
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d901      	bls.n	8004d48 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e077      	b.n	8004e38 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004d48:	4b14      	ldr	r3, [pc, #80]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0f0      	beq.n	8004d36 <HAL_RCC_OscConfig+0xc9e>
 8004d54:	e06f      	b.n	8004e36 <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004d56:	4b11      	ldr	r3, [pc, #68]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a10      	ldr	r2, [pc, #64]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004d5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d60:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004d62:	f7fd f96d 	bl	8002040 <HAL_GetTick>
 8004d66:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004d68:	e008      	b.n	8004d7c <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d6a:	f7fd f969 	bl	8002040 <HAL_GetTick>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e05d      	b.n	8004e38 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004d7c:	4b07      	ldr	r3, [pc, #28]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d1f0      	bne.n	8004d6a <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004d88:	4b04      	ldr	r3, [pc, #16]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8c:	4a03      	ldr	r2, [pc, #12]	; (8004d9c <HAL_RCC_OscConfig+0xd04>)
 8004d8e:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8004d92:	f023 0303 	bic.w	r3, r3, #3
 8004d96:	6293      	str	r3, [r2, #40]	; 0x28
 8004d98:	e04d      	b.n	8004e36 <HAL_RCC_OscConfig+0xd9e>
 8004d9a:	bf00      	nop
 8004d9c:	46020c00 	.word	0x46020c00
 8004da0:	46020800 	.word	0x46020800
 8004da4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004da8:	4b25      	ldr	r3, [pc, #148]	; (8004e40 <HAL_RCC_OscConfig+0xda8>)
 8004daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dac:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004dae:	4b24      	ldr	r3, [pc, #144]	; (8004e40 <HAL_RCC_OscConfig+0xda8>)
 8004db0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db2:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d03a      	beq.n	8004e32 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	f003 0203 	and.w	r2, r3, #3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d133      	bne.n	8004e32 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	0a1b      	lsrs	r3, r3, #8
 8004dce:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd6:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d12a      	bne.n	8004e32 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	0b1b      	lsrs	r3, r3, #12
 8004de0:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d122      	bne.n	8004e32 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004df6:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d11a      	bne.n	8004e32 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	0a5b      	lsrs	r3, r3, #9
 8004e00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e08:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d111      	bne.n	8004e32 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004e0e:	69bb      	ldr	r3, [r7, #24]
 8004e10:	0c1b      	lsrs	r3, r3, #16
 8004e12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e1a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d108      	bne.n	8004e32 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	0e1b      	lsrs	r3, r3, #24
 8004e24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2c:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d001      	beq.n	8004e36 <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e000      	b.n	8004e38 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3738      	adds	r7, #56	; 0x38
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	46020c00 	.word	0x46020c00

08004e44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e1d9      	b.n	800520c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e58:	4b9b      	ldr	r3, [pc, #620]	; (80050c8 <HAL_RCC_ClockConfig+0x284>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f003 030f 	and.w	r3, r3, #15
 8004e60:	683a      	ldr	r2, [r7, #0]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d910      	bls.n	8004e88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e66:	4b98      	ldr	r3, [pc, #608]	; (80050c8 <HAL_RCC_ClockConfig+0x284>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f023 020f 	bic.w	r2, r3, #15
 8004e6e:	4996      	ldr	r1, [pc, #600]	; (80050c8 <HAL_RCC_ClockConfig+0x284>)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e76:	4b94      	ldr	r3, [pc, #592]	; (80050c8 <HAL_RCC_ClockConfig+0x284>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 030f 	and.w	r3, r3, #15
 8004e7e:	683a      	ldr	r2, [r7, #0]
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d001      	beq.n	8004e88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e1c1      	b.n	800520c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0310 	and.w	r3, r3, #16
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d010      	beq.n	8004eb6 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	695a      	ldr	r2, [r3, #20]
 8004e98:	4b8c      	ldr	r3, [pc, #560]	; (80050cc <HAL_RCC_ClockConfig+0x288>)
 8004e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d908      	bls.n	8004eb6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004ea4:	4b89      	ldr	r3, [pc, #548]	; (80050cc <HAL_RCC_ClockConfig+0x288>)
 8004ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	695b      	ldr	r3, [r3, #20]
 8004eb0:	4986      	ldr	r1, [pc, #536]	; (80050cc <HAL_RCC_ClockConfig+0x288>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0308 	and.w	r3, r3, #8
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d012      	beq.n	8004ee8 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691a      	ldr	r2, [r3, #16]
 8004ec6:	4b81      	ldr	r3, [pc, #516]	; (80050cc <HAL_RCC_ClockConfig+0x288>)
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	091b      	lsrs	r3, r3, #4
 8004ecc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d909      	bls.n	8004ee8 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004ed4:	4b7d      	ldr	r3, [pc, #500]	; (80050cc <HAL_RCC_ClockConfig+0x288>)
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	011b      	lsls	r3, r3, #4
 8004ee2:	497a      	ldr	r1, [pc, #488]	; (80050cc <HAL_RCC_ClockConfig+0x288>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d010      	beq.n	8004f16 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	68da      	ldr	r2, [r3, #12]
 8004ef8:	4b74      	ldr	r3, [pc, #464]	; (80050cc <HAL_RCC_ClockConfig+0x288>)
 8004efa:	6a1b      	ldr	r3, [r3, #32]
 8004efc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d908      	bls.n	8004f16 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004f04:	4b71      	ldr	r3, [pc, #452]	; (80050cc <HAL_RCC_ClockConfig+0x288>)
 8004f06:	6a1b      	ldr	r3, [r3, #32]
 8004f08:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	496e      	ldr	r1, [pc, #440]	; (80050cc <HAL_RCC_ClockConfig+0x288>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0302 	and.w	r3, r3, #2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d010      	beq.n	8004f44 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	689a      	ldr	r2, [r3, #8]
 8004f26:	4b69      	ldr	r3, [pc, #420]	; (80050cc <HAL_RCC_ClockConfig+0x288>)
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	f003 030f 	and.w	r3, r3, #15
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d908      	bls.n	8004f44 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004f32:	4b66      	ldr	r3, [pc, #408]	; (80050cc <HAL_RCC_ClockConfig+0x288>)
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	f023 020f 	bic.w	r2, r3, #15
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	4963      	ldr	r1, [pc, #396]	; (80050cc <HAL_RCC_ClockConfig+0x288>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f000 80d2 	beq.w	80050f6 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004f52:	2300      	movs	r3, #0
 8004f54:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	2b03      	cmp	r3, #3
 8004f5c:	d143      	bne.n	8004fe6 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f5e:	4b5b      	ldr	r3, [pc, #364]	; (80050cc <HAL_RCC_ClockConfig+0x288>)
 8004f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f64:	f003 0304 	and.w	r3, r3, #4
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d110      	bne.n	8004f8e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004f6c:	4b57      	ldr	r3, [pc, #348]	; (80050cc <HAL_RCC_ClockConfig+0x288>)
 8004f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f72:	4a56      	ldr	r2, [pc, #344]	; (80050cc <HAL_RCC_ClockConfig+0x288>)
 8004f74:	f043 0304 	orr.w	r3, r3, #4
 8004f78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004f7c:	4b53      	ldr	r3, [pc, #332]	; (80050cc <HAL_RCC_ClockConfig+0x288>)
 8004f7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f82:	f003 0304 	and.w	r3, r3, #4
 8004f86:	60bb      	str	r3, [r7, #8]
 8004f88:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004f8e:	f7fd f857 	bl	8002040 <HAL_GetTick>
 8004f92:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004f94:	4b4e      	ldr	r3, [pc, #312]	; (80050d0 <HAL_RCC_ClockConfig+0x28c>)
 8004f96:	68db      	ldr	r3, [r3, #12]
 8004f98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00f      	beq.n	8004fc0 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004fa0:	e008      	b.n	8004fb4 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004fa2:	f7fd f84d 	bl	8002040 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e12b      	b.n	800520c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004fb4:	4b46      	ldr	r3, [pc, #280]	; (80050d0 <HAL_RCC_ClockConfig+0x28c>)
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0f0      	beq.n	8004fa2 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004fc0:	7dfb      	ldrb	r3, [r7, #23]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d107      	bne.n	8004fd6 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004fc6:	4b41      	ldr	r3, [pc, #260]	; (80050cc <HAL_RCC_ClockConfig+0x288>)
 8004fc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fcc:	4a3f      	ldr	r2, [pc, #252]	; (80050cc <HAL_RCC_ClockConfig+0x288>)
 8004fce:	f023 0304 	bic.w	r3, r3, #4
 8004fd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004fd6:	4b3d      	ldr	r3, [pc, #244]	; (80050cc <HAL_RCC_ClockConfig+0x288>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d121      	bne.n	8005026 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e112      	b.n	800520c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d107      	bne.n	8004ffe <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fee:	4b37      	ldr	r3, [pc, #220]	; (80050cc <HAL_RCC_ClockConfig+0x288>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d115      	bne.n	8005026 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e106      	b.n	800520c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d107      	bne.n	8005016 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005006:	4b31      	ldr	r3, [pc, #196]	; (80050cc <HAL_RCC_ClockConfig+0x288>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f003 0304 	and.w	r3, r3, #4
 800500e:	2b00      	cmp	r3, #0
 8005010:	d109      	bne.n	8005026 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e0fa      	b.n	800520c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005016:	4b2d      	ldr	r3, [pc, #180]	; (80050cc <HAL_RCC_ClockConfig+0x288>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e0f2      	b.n	800520c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8005026:	4b29      	ldr	r3, [pc, #164]	; (80050cc <HAL_RCC_ClockConfig+0x288>)
 8005028:	69db      	ldr	r3, [r3, #28]
 800502a:	f023 0203 	bic.w	r2, r3, #3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	4926      	ldr	r1, [pc, #152]	; (80050cc <HAL_RCC_ClockConfig+0x288>)
 8005034:	4313      	orrs	r3, r2
 8005036:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005038:	f7fd f802 	bl	8002040 <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	2b03      	cmp	r3, #3
 8005044:	d112      	bne.n	800506c <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005046:	e00a      	b.n	800505e <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005048:	f7fc fffa 	bl	8002040 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	f241 3288 	movw	r2, #5000	; 0x1388
 8005056:	4293      	cmp	r3, r2
 8005058:	d901      	bls.n	800505e <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e0d6      	b.n	800520c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800505e:	4b1b      	ldr	r3, [pc, #108]	; (80050cc <HAL_RCC_ClockConfig+0x288>)
 8005060:	69db      	ldr	r3, [r3, #28]
 8005062:	f003 030c 	and.w	r3, r3, #12
 8005066:	2b0c      	cmp	r3, #12
 8005068:	d1ee      	bne.n	8005048 <HAL_RCC_ClockConfig+0x204>
 800506a:	e044      	b.n	80050f6 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	2b02      	cmp	r3, #2
 8005072:	d112      	bne.n	800509a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005074:	e00a      	b.n	800508c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005076:	f7fc ffe3 	bl	8002040 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	f241 3288 	movw	r2, #5000	; 0x1388
 8005084:	4293      	cmp	r3, r2
 8005086:	d901      	bls.n	800508c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	e0bf      	b.n	800520c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800508c:	4b0f      	ldr	r3, [pc, #60]	; (80050cc <HAL_RCC_ClockConfig+0x288>)
 800508e:	69db      	ldr	r3, [r3, #28]
 8005090:	f003 030c 	and.w	r3, r3, #12
 8005094:	2b08      	cmp	r3, #8
 8005096:	d1ee      	bne.n	8005076 <HAL_RCC_ClockConfig+0x232>
 8005098:	e02d      	b.n	80050f6 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d123      	bne.n	80050ea <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80050a2:	e00a      	b.n	80050ba <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050a4:	f7fc ffcc 	bl	8002040 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e0a8      	b.n	800520c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80050ba:	4b04      	ldr	r3, [pc, #16]	; (80050cc <HAL_RCC_ClockConfig+0x288>)
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	f003 030c 	and.w	r3, r3, #12
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1ee      	bne.n	80050a4 <HAL_RCC_ClockConfig+0x260>
 80050c6:	e016      	b.n	80050f6 <HAL_RCC_ClockConfig+0x2b2>
 80050c8:	40022000 	.word	0x40022000
 80050cc:	46020c00 	.word	0x46020c00
 80050d0:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050d4:	f7fc ffb4 	bl	8002040 <HAL_GetTick>
 80050d8:	4602      	mov	r2, r0
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e090      	b.n	800520c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80050ea:	4b4a      	ldr	r3, [pc, #296]	; (8005214 <HAL_RCC_ClockConfig+0x3d0>)
 80050ec:	69db      	ldr	r3, [r3, #28]
 80050ee:	f003 030c 	and.w	r3, r3, #12
 80050f2:	2b04      	cmp	r3, #4
 80050f4:	d1ee      	bne.n	80050d4 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d010      	beq.n	8005124 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	689a      	ldr	r2, [r3, #8]
 8005106:	4b43      	ldr	r3, [pc, #268]	; (8005214 <HAL_RCC_ClockConfig+0x3d0>)
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	f003 030f 	and.w	r3, r3, #15
 800510e:	429a      	cmp	r2, r3
 8005110:	d208      	bcs.n	8005124 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005112:	4b40      	ldr	r3, [pc, #256]	; (8005214 <HAL_RCC_ClockConfig+0x3d0>)
 8005114:	6a1b      	ldr	r3, [r3, #32]
 8005116:	f023 020f 	bic.w	r2, r3, #15
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	493d      	ldr	r1, [pc, #244]	; (8005214 <HAL_RCC_ClockConfig+0x3d0>)
 8005120:	4313      	orrs	r3, r2
 8005122:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005124:	4b3c      	ldr	r3, [pc, #240]	; (8005218 <HAL_RCC_ClockConfig+0x3d4>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 030f 	and.w	r3, r3, #15
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	429a      	cmp	r2, r3
 8005130:	d210      	bcs.n	8005154 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005132:	4b39      	ldr	r3, [pc, #228]	; (8005218 <HAL_RCC_ClockConfig+0x3d4>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f023 020f 	bic.w	r2, r3, #15
 800513a:	4937      	ldr	r1, [pc, #220]	; (8005218 <HAL_RCC_ClockConfig+0x3d4>)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	4313      	orrs	r3, r2
 8005140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005142:	4b35      	ldr	r3, [pc, #212]	; (8005218 <HAL_RCC_ClockConfig+0x3d4>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 030f 	and.w	r3, r3, #15
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	429a      	cmp	r2, r3
 800514e:	d001      	beq.n	8005154 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e05b      	b.n	800520c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b00      	cmp	r3, #0
 800515e:	d010      	beq.n	8005182 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	68da      	ldr	r2, [r3, #12]
 8005164:	4b2b      	ldr	r3, [pc, #172]	; (8005214 <HAL_RCC_ClockConfig+0x3d0>)
 8005166:	6a1b      	ldr	r3, [r3, #32]
 8005168:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800516c:	429a      	cmp	r2, r3
 800516e:	d208      	bcs.n	8005182 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005170:	4b28      	ldr	r3, [pc, #160]	; (8005214 <HAL_RCC_ClockConfig+0x3d0>)
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	4925      	ldr	r1, [pc, #148]	; (8005214 <HAL_RCC_ClockConfig+0x3d0>)
 800517e:	4313      	orrs	r3, r2
 8005180:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0308 	and.w	r3, r3, #8
 800518a:	2b00      	cmp	r3, #0
 800518c:	d012      	beq.n	80051b4 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691a      	ldr	r2, [r3, #16]
 8005192:	4b20      	ldr	r3, [pc, #128]	; (8005214 <HAL_RCC_ClockConfig+0x3d0>)
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	091b      	lsrs	r3, r3, #4
 8005198:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800519c:	429a      	cmp	r2, r3
 800519e:	d209      	bcs.n	80051b4 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80051a0:	4b1c      	ldr	r3, [pc, #112]	; (8005214 <HAL_RCC_ClockConfig+0x3d0>)
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	011b      	lsls	r3, r3, #4
 80051ae:	4919      	ldr	r1, [pc, #100]	; (8005214 <HAL_RCC_ClockConfig+0x3d0>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0310 	and.w	r3, r3, #16
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d010      	beq.n	80051e2 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	695a      	ldr	r2, [r3, #20]
 80051c4:	4b13      	ldr	r3, [pc, #76]	; (8005214 <HAL_RCC_ClockConfig+0x3d0>)
 80051c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d208      	bcs.n	80051e2 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 80051d0:	4b10      	ldr	r3, [pc, #64]	; (8005214 <HAL_RCC_ClockConfig+0x3d0>)
 80051d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	490d      	ldr	r1, [pc, #52]	; (8005214 <HAL_RCC_ClockConfig+0x3d0>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80051e2:	f000 f821 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 80051e6:	4602      	mov	r2, r0
 80051e8:	4b0a      	ldr	r3, [pc, #40]	; (8005214 <HAL_RCC_ClockConfig+0x3d0>)
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	f003 030f 	and.w	r3, r3, #15
 80051f0:	490a      	ldr	r1, [pc, #40]	; (800521c <HAL_RCC_ClockConfig+0x3d8>)
 80051f2:	5ccb      	ldrb	r3, [r1, r3]
 80051f4:	fa22 f303 	lsr.w	r3, r2, r3
 80051f8:	4a09      	ldr	r2, [pc, #36]	; (8005220 <HAL_RCC_ClockConfig+0x3dc>)
 80051fa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80051fc:	4b09      	ldr	r3, [pc, #36]	; (8005224 <HAL_RCC_ClockConfig+0x3e0>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4618      	mov	r0, r3
 8005202:	f7fc fed3 	bl	8001fac <HAL_InitTick>
 8005206:	4603      	mov	r3, r0
 8005208:	73fb      	strb	r3, [r7, #15]

  return status;
 800520a:	7bfb      	ldrb	r3, [r7, #15]
}
 800520c:	4618      	mov	r0, r3
 800520e:	3718      	adds	r7, #24
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}
 8005214:	46020c00 	.word	0x46020c00
 8005218:	40022000 	.word	0x40022000
 800521c:	0800aa98 	.word	0x0800aa98
 8005220:	20000000 	.word	0x20000000
 8005224:	20000004 	.word	0x20000004

08005228 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005228:	b480      	push	{r7}
 800522a:	b08b      	sub	sp, #44	; 0x2c
 800522c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800522e:	2300      	movs	r3, #0
 8005230:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005232:	2300      	movs	r3, #0
 8005234:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005236:	4b7b      	ldr	r3, [pc, #492]	; (8005424 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	f003 030c 	and.w	r3, r3, #12
 800523e:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005240:	4b78      	ldr	r3, [pc, #480]	; (8005424 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005244:	f003 0303 	and.w	r3, r3, #3
 8005248:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d005      	beq.n	800525c <HAL_RCC_GetSysClockFreq+0x34>
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	2b0c      	cmp	r3, #12
 8005254:	d121      	bne.n	800529a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	2b01      	cmp	r3, #1
 800525a:	d11e      	bne.n	800529a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 800525c:	4b71      	ldr	r3, [pc, #452]	; (8005424 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d107      	bne.n	8005278 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005268:	4b6e      	ldr	r3, [pc, #440]	; (8005424 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800526a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800526e:	0b1b      	lsrs	r3, r3, #12
 8005270:	f003 030f 	and.w	r3, r3, #15
 8005274:	627b      	str	r3, [r7, #36]	; 0x24
 8005276:	e005      	b.n	8005284 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005278:	4b6a      	ldr	r3, [pc, #424]	; (8005424 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	0f1b      	lsrs	r3, r3, #28
 800527e:	f003 030f 	and.w	r3, r3, #15
 8005282:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005284:	4a68      	ldr	r2, [pc, #416]	; (8005428 <HAL_RCC_GetSysClockFreq+0x200>)
 8005286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005288:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800528c:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d110      	bne.n	80052b6 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005296:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005298:	e00d      	b.n	80052b6 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800529a:	4b62      	ldr	r3, [pc, #392]	; (8005424 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	f003 030c 	and.w	r3, r3, #12
 80052a2:	2b04      	cmp	r3, #4
 80052a4:	d102      	bne.n	80052ac <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052a6:	4b61      	ldr	r3, [pc, #388]	; (800542c <HAL_RCC_GetSysClockFreq+0x204>)
 80052a8:	623b      	str	r3, [r7, #32]
 80052aa:	e004      	b.n	80052b6 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052ac:	69bb      	ldr	r3, [r7, #24]
 80052ae:	2b08      	cmp	r3, #8
 80052b0:	d101      	bne.n	80052b6 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052b2:	4b5e      	ldr	r3, [pc, #376]	; (800542c <HAL_RCC_GetSysClockFreq+0x204>)
 80052b4:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052b6:	69bb      	ldr	r3, [r7, #24]
 80052b8:	2b0c      	cmp	r3, #12
 80052ba:	f040 80ac 	bne.w	8005416 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80052be:	4b59      	ldr	r3, [pc, #356]	; (8005424 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80052c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c2:	f003 0303 	and.w	r3, r3, #3
 80052c6:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80052c8:	4b56      	ldr	r3, [pc, #344]	; (8005424 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80052ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052cc:	0a1b      	lsrs	r3, r3, #8
 80052ce:	f003 030f 	and.w	r3, r3, #15
 80052d2:	3301      	adds	r3, #1
 80052d4:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80052d6:	4b53      	ldr	r3, [pc, #332]	; (8005424 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80052d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052da:	091b      	lsrs	r3, r3, #4
 80052dc:	f003 0301 	and.w	r3, r3, #1
 80052e0:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80052e2:	4b50      	ldr	r3, [pc, #320]	; (8005424 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80052e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e6:	08db      	lsrs	r3, r3, #3
 80052e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	fb02 f303 	mul.w	r3, r2, r3
 80052f2:	ee07 3a90 	vmov	s15, r3
 80052f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80052fa:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2b00      	cmp	r3, #0
 8005302:	f000 8086 	beq.w	8005412 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	2b02      	cmp	r3, #2
 800530a:	d003      	beq.n	8005314 <HAL_RCC_GetSysClockFreq+0xec>
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	2b03      	cmp	r3, #3
 8005310:	d022      	beq.n	8005358 <HAL_RCC_GetSysClockFreq+0x130>
 8005312:	e043      	b.n	800539c <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	ee07 3a90 	vmov	s15, r3
 800531a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800531e:	eddf 6a44 	vldr	s13, [pc, #272]	; 8005430 <HAL_RCC_GetSysClockFreq+0x208>
 8005322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005326:	4b3f      	ldr	r3, [pc, #252]	; (8005424 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800532e:	ee07 3a90 	vmov	s15, r3
 8005332:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005336:	ed97 6a01 	vldr	s12, [r7, #4]
 800533a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005434 <HAL_RCC_GetSysClockFreq+0x20c>
 800533e:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005342:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005346:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800534a:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800534e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005352:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005356:	e046      	b.n	80053e6 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	ee07 3a90 	vmov	s15, r3
 800535e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005362:	eddf 6a33 	vldr	s13, [pc, #204]	; 8005430 <HAL_RCC_GetSysClockFreq+0x208>
 8005366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800536a:	4b2e      	ldr	r3, [pc, #184]	; (8005424 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800536c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800536e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005372:	ee07 3a90 	vmov	s15, r3
 8005376:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800537a:	ed97 6a01 	vldr	s12, [r7, #4]
 800537e:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005434 <HAL_RCC_GetSysClockFreq+0x20c>
 8005382:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005386:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800538a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800538e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005396:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800539a:	e024      	b.n	80053e6 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	ee07 3a90 	vmov	s15, r3
 80053a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	ee07 3a90 	vmov	s15, r3
 80053ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053b4:	4b1b      	ldr	r3, [pc, #108]	; (8005424 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80053b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053bc:	ee07 3a90 	vmov	s15, r3
 80053c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80053c4:	ed97 6a01 	vldr	s12, [r7, #4]
 80053c8:	eddf 5a1a 	vldr	s11, [pc, #104]	; 8005434 <HAL_RCC_GetSysClockFreq+0x20c>
 80053cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80053d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053e0:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80053e4:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 80053e6:	4b0f      	ldr	r3, [pc, #60]	; (8005424 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80053e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053ea:	0e1b      	lsrs	r3, r3, #24
 80053ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053f0:	3301      	adds	r3, #1
 80053f2:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	ee07 3a90 	vmov	s15, r3
 80053fa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80053fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8005402:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005406:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800540a:	ee17 3a90 	vmov	r3, s15
 800540e:	623b      	str	r3, [r7, #32]
 8005410:	e001      	b.n	8005416 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8005412:	2300      	movs	r3, #0
 8005414:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8005416:	6a3b      	ldr	r3, [r7, #32]
}
 8005418:	4618      	mov	r0, r3
 800541a:	372c      	adds	r7, #44	; 0x2c
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr
 8005424:	46020c00 	.word	0x46020c00
 8005428:	0800aab0 	.word	0x0800aab0
 800542c:	00f42400 	.word	0x00f42400
 8005430:	4b742400 	.word	0x4b742400
 8005434:	46000000 	.word	0x46000000

08005438 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800543c:	f7ff fef4 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 8005440:	4602      	mov	r2, r0
 8005442:	4b07      	ldr	r3, [pc, #28]	; (8005460 <HAL_RCC_GetHCLKFreq+0x28>)
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	f003 030f 	and.w	r3, r3, #15
 800544a:	4906      	ldr	r1, [pc, #24]	; (8005464 <HAL_RCC_GetHCLKFreq+0x2c>)
 800544c:	5ccb      	ldrb	r3, [r1, r3]
 800544e:	fa22 f303 	lsr.w	r3, r2, r3
 8005452:	4a05      	ldr	r2, [pc, #20]	; (8005468 <HAL_RCC_GetHCLKFreq+0x30>)
 8005454:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 8005456:	4b04      	ldr	r3, [pc, #16]	; (8005468 <HAL_RCC_GetHCLKFreq+0x30>)
 8005458:	681b      	ldr	r3, [r3, #0]
}
 800545a:	4618      	mov	r0, r3
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	46020c00 	.word	0x46020c00
 8005464:	0800aa98 	.word	0x0800aa98
 8005468:	20000000 	.word	0x20000000

0800546c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8005470:	f7ff ffe2 	bl	8005438 <HAL_RCC_GetHCLKFreq>
 8005474:	4602      	mov	r2, r0
 8005476:	4b05      	ldr	r3, [pc, #20]	; (800548c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	091b      	lsrs	r3, r3, #4
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	4903      	ldr	r1, [pc, #12]	; (8005490 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005482:	5ccb      	ldrb	r3, [r1, r3]
 8005484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005488:	4618      	mov	r0, r3
 800548a:	bd80      	pop	{r7, pc}
 800548c:	46020c00 	.word	0x46020c00
 8005490:	0800aaa8 	.word	0x0800aaa8

08005494 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8005498:	f7ff ffce 	bl	8005438 <HAL_RCC_GetHCLKFreq>
 800549c:	4602      	mov	r2, r0
 800549e:	4b05      	ldr	r3, [pc, #20]	; (80054b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	0a1b      	lsrs	r3, r3, #8
 80054a4:	f003 0307 	and.w	r3, r3, #7
 80054a8:	4903      	ldr	r1, [pc, #12]	; (80054b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054aa:	5ccb      	ldrb	r3, [r1, r3]
 80054ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	bd80      	pop	{r7, pc}
 80054b4:	46020c00 	.word	0x46020c00
 80054b8:	0800aaa8 	.word	0x0800aaa8

080054bc <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 80054c0:	f7ff ffba 	bl	8005438 <HAL_RCC_GetHCLKFreq>
 80054c4:	4602      	mov	r2, r0
 80054c6:	4b05      	ldr	r3, [pc, #20]	; (80054dc <HAL_RCC_GetPCLK3Freq+0x20>)
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	091b      	lsrs	r3, r3, #4
 80054cc:	f003 0307 	and.w	r3, r3, #7
 80054d0:	4903      	ldr	r1, [pc, #12]	; (80054e0 <HAL_RCC_GetPCLK3Freq+0x24>)
 80054d2:	5ccb      	ldrb	r3, [r1, r3]
 80054d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054d8:	4618      	mov	r0, r3
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	46020c00 	.word	0x46020c00
 80054e0:	0800aaa8 	.word	0x0800aaa8

080054e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b086      	sub	sp, #24
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80054ec:	4b3e      	ldr	r3, [pc, #248]	; (80055e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80054ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054f2:	f003 0304 	and.w	r3, r3, #4
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80054fa:	f7fe fd4f 	bl	8003f9c <HAL_PWREx_GetVoltageRange>
 80054fe:	6178      	str	r0, [r7, #20]
 8005500:	e019      	b.n	8005536 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005502:	4b39      	ldr	r3, [pc, #228]	; (80055e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005504:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005508:	4a37      	ldr	r2, [pc, #220]	; (80055e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800550a:	f043 0304 	orr.w	r3, r3, #4
 800550e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005512:	4b35      	ldr	r3, [pc, #212]	; (80055e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005514:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005518:	f003 0304 	and.w	r3, r3, #4
 800551c:	60fb      	str	r3, [r7, #12]
 800551e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005520:	f7fe fd3c 	bl	8003f9c <HAL_PWREx_GetVoltageRange>
 8005524:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005526:	4b30      	ldr	r3, [pc, #192]	; (80055e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005528:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800552c:	4a2e      	ldr	r2, [pc, #184]	; (80055e8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800552e:	f023 0304 	bic.w	r3, r3, #4
 8005532:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800553c:	d003      	beq.n	8005546 <RCC_SetFlashLatencyFromMSIRange+0x62>
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005544:	d109      	bne.n	800555a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800554c:	d202      	bcs.n	8005554 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 800554e:	2301      	movs	r3, #1
 8005550:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005552:	e033      	b.n	80055bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005554:	2300      	movs	r3, #0
 8005556:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005558:	e030      	b.n	80055bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005560:	d208      	bcs.n	8005574 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005568:	d102      	bne.n	8005570 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800556a:	2303      	movs	r3, #3
 800556c:	613b      	str	r3, [r7, #16]
 800556e:	e025      	b.n	80055bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e035      	b.n	80055e0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800557a:	d90f      	bls.n	800559c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d109      	bne.n	8005596 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005588:	d902      	bls.n	8005590 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800558a:	2300      	movs	r3, #0
 800558c:	613b      	str	r3, [r7, #16]
 800558e:	e015      	b.n	80055bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8005590:	2301      	movs	r3, #1
 8005592:	613b      	str	r3, [r7, #16]
 8005594:	e012      	b.n	80055bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005596:	2300      	movs	r3, #0
 8005598:	613b      	str	r3, [r7, #16]
 800559a:	e00f      	b.n	80055bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055a2:	d109      	bne.n	80055b8 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055aa:	d102      	bne.n	80055b2 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80055ac:	2301      	movs	r3, #1
 80055ae:	613b      	str	r3, [r7, #16]
 80055b0:	e004      	b.n	80055bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80055b2:	2302      	movs	r3, #2
 80055b4:	613b      	str	r3, [r7, #16]
 80055b6:	e001      	b.n	80055bc <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 80055b8:	2301      	movs	r3, #1
 80055ba:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80055bc:	4b0b      	ldr	r3, [pc, #44]	; (80055ec <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f023 020f 	bic.w	r2, r3, #15
 80055c4:	4909      	ldr	r1, [pc, #36]	; (80055ec <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80055cc:	4b07      	ldr	r3, [pc, #28]	; (80055ec <RCC_SetFlashLatencyFromMSIRange+0x108>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 030f 	and.w	r3, r3, #15
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d001      	beq.n	80055de <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	e000      	b.n	80055e0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 80055de:	2300      	movs	r3, #0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3718      	adds	r7, #24
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	46020c00 	.word	0x46020c00
 80055ec:	40022000 	.word	0x40022000

080055f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 80055f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055f4:	b0ba      	sub	sp, #232	; 0xe8
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055fc:	2300      	movs	r3, #0
 80055fe:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005602:	2300      	movs	r3, #0
 8005604:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005608:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800560c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005610:	f002 0401 	and.w	r4, r2, #1
 8005614:	2500      	movs	r5, #0
 8005616:	ea54 0305 	orrs.w	r3, r4, r5
 800561a:	d00b      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 800561c:	4bcb      	ldr	r3, [pc, #812]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800561e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005622:	f023 0103 	bic.w	r1, r3, #3
 8005626:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800562a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800562c:	4ac7      	ldr	r2, [pc, #796]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800562e:	430b      	orrs	r3, r1
 8005630:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005634:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563c:	f002 0802 	and.w	r8, r2, #2
 8005640:	f04f 0900 	mov.w	r9, #0
 8005644:	ea58 0309 	orrs.w	r3, r8, r9
 8005648:	d00b      	beq.n	8005662 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 800564a:	4bc0      	ldr	r3, [pc, #768]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800564c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005650:	f023 010c 	bic.w	r1, r3, #12
 8005654:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800565a:	4abc      	ldr	r2, [pc, #752]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800565c:	430b      	orrs	r3, r1
 800565e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005662:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800566a:	f002 0a04 	and.w	sl, r2, #4
 800566e:	f04f 0b00 	mov.w	fp, #0
 8005672:	ea5a 030b 	orrs.w	r3, sl, fp
 8005676:	d00b      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005678:	4bb4      	ldr	r3, [pc, #720]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800567a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800567e:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8005682:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005688:	4ab0      	ldr	r2, [pc, #704]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800568a:	430b      	orrs	r3, r1
 800568c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005690:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005698:	f002 0308 	and.w	r3, r2, #8
 800569c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056a0:	2300      	movs	r3, #0
 80056a2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80056a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80056aa:	460b      	mov	r3, r1
 80056ac:	4313      	orrs	r3, r2
 80056ae:	d00b      	beq.n	80056c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80056b0:	4ba6      	ldr	r3, [pc, #664]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80056ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056c0:	4aa2      	ldr	r2, [pc, #648]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056c2:	430b      	orrs	r3, r1
 80056c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056c8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d0:	f002 0310 	and.w	r3, r2, #16
 80056d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80056d8:	2300      	movs	r3, #0
 80056da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80056de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80056e2:	460b      	mov	r3, r1
 80056e4:	4313      	orrs	r3, r2
 80056e6:	d00b      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 80056e8:	4b98      	ldr	r3, [pc, #608]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80056f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056f8:	4a94      	ldr	r2, [pc, #592]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056fa:	430b      	orrs	r3, r1
 80056fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005700:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005708:	f002 0320 	and.w	r3, r2, #32
 800570c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005710:	2300      	movs	r3, #0
 8005712:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005716:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800571a:	460b      	mov	r3, r1
 800571c:	4313      	orrs	r3, r2
 800571e:	d00b      	beq.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005720:	4b8a      	ldr	r3, [pc, #552]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005722:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005726:	f023 0107 	bic.w	r1, r3, #7
 800572a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800572e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005730:	4a86      	ldr	r2, [pc, #536]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005732:	430b      	orrs	r3, r1
 8005734:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005738:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800573c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005740:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8005744:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005748:	2300      	movs	r3, #0
 800574a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800574e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8005752:	460b      	mov	r3, r1
 8005754:	4313      	orrs	r3, r2
 8005756:	d00b      	beq.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005758:	4b7c      	ldr	r3, [pc, #496]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800575a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800575e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8005762:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005766:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005768:	4a78      	ldr	r2, [pc, #480]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800576a:	430b      	orrs	r3, r1
 800576c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005770:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005778:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800577c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005780:	2300      	movs	r3, #0
 8005782:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005786:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800578a:	460b      	mov	r3, r1
 800578c:	4313      	orrs	r3, r2
 800578e:	d00b      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005790:	4b6e      	ldr	r3, [pc, #440]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005796:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800579a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800579e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057a0:	4a6a      	ldr	r2, [pc, #424]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057a2:	430b      	orrs	r3, r1
 80057a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b0:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80057b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80057b8:	2300      	movs	r3, #0
 80057ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80057be:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80057c2:	460b      	mov	r3, r1
 80057c4:	4313      	orrs	r3, r2
 80057c6:	d00b      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 80057c8:	4b60      	ldr	r3, [pc, #384]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057ca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80057ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80057d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057d8:	4a5c      	ldr	r2, [pc, #368]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057da:	430b      	orrs	r3, r1
 80057dc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80057e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80057ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80057f0:	2300      	movs	r3, #0
 80057f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80057f6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80057fa:	460b      	mov	r3, r1
 80057fc:	4313      	orrs	r3, r2
 80057fe:	d00b      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005800:	4b52      	ldr	r3, [pc, #328]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005806:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 800580a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800580e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005810:	4a4e      	ldr	r2, [pc, #312]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005812:	430b      	orrs	r3, r1
 8005814:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005818:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800581c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005820:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8005824:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005828:	2300      	movs	r3, #0
 800582a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800582e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005832:	460b      	mov	r3, r1
 8005834:	4313      	orrs	r3, r2
 8005836:	d00b      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005838:	4b44      	ldr	r3, [pc, #272]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800583a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800583e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8005842:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005846:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005848:	4a40      	ldr	r2, [pc, #256]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800584a:	430b      	orrs	r3, r1
 800584c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005850:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005858:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800585c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005860:	2300      	movs	r3, #0
 8005862:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005866:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800586a:	460b      	mov	r3, r1
 800586c:	4313      	orrs	r3, r2
 800586e:	d00b      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005870:	4b36      	ldr	r3, [pc, #216]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005876:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800587a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800587e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005880:	4a32      	ldr	r2, [pc, #200]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005882:	430b      	orrs	r3, r1
 8005884:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8005888:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800588c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005890:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8005894:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005898:	2300      	movs	r3, #0
 800589a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800589e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80058a2:	460b      	mov	r3, r1
 80058a4:	4313      	orrs	r3, r2
 80058a6:	d00c      	beq.n	80058c2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80058a8:	4b28      	ldr	r3, [pc, #160]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80058ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80058b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058ba:	4a24      	ldr	r2, [pc, #144]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058bc:	430b      	orrs	r3, r1
 80058be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80058c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ca:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80058ce:	67bb      	str	r3, [r7, #120]	; 0x78
 80058d0:	2300      	movs	r3, #0
 80058d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80058d4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80058d8:	460b      	mov	r3, r1
 80058da:	4313      	orrs	r3, r2
 80058dc:	d04f      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 80058de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e6:	2b80      	cmp	r3, #128	; 0x80
 80058e8:	d02d      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x356>
 80058ea:	2b80      	cmp	r3, #128	; 0x80
 80058ec:	d827      	bhi.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80058ee:	2b60      	cmp	r3, #96	; 0x60
 80058f0:	d02e      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80058f2:	2b60      	cmp	r3, #96	; 0x60
 80058f4:	d823      	bhi.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80058f6:	2b40      	cmp	r3, #64	; 0x40
 80058f8:	d006      	beq.n	8005908 <HAL_RCCEx_PeriphCLKConfig+0x318>
 80058fa:	2b40      	cmp	r3, #64	; 0x40
 80058fc:	d81f      	bhi.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d009      	beq.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8005902:	2b20      	cmp	r3, #32
 8005904:	d011      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8005906:	e01a      	b.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005908:	4b10      	ldr	r3, [pc, #64]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800590a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800590c:	4a0f      	ldr	r2, [pc, #60]	; (800594c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800590e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005912:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005914:	e01d      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005916:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800591a:	3308      	adds	r3, #8
 800591c:	4618      	mov	r0, r3
 800591e:	f002 f981 	bl	8007c24 <RCCEx_PLL2_Config>
 8005922:	4603      	mov	r3, r0
 8005924:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005928:	e013      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800592a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800592e:	332c      	adds	r3, #44	; 0x2c
 8005930:	4618      	mov	r0, r3
 8005932:	f002 fa0f 	bl	8007d54 <RCCEx_PLL3_Config>
 8005936:	4603      	mov	r3, r0
 8005938:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 800593c:	e009      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005944:	e005      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8005946:	bf00      	nop
 8005948:	e003      	b.n	8005952 <HAL_RCCEx_PeriphCLKConfig+0x362>
 800594a:	bf00      	nop
 800594c:	46020c00 	.word	0x46020c00
        break;
 8005950:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005952:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10d      	bne.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 800595a:	4bb6      	ldr	r3, [pc, #728]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800595c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005960:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8005964:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800596c:	4ab1      	ldr	r2, [pc, #708]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800596e:	430b      	orrs	r3, r1
 8005970:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005974:	e003      	b.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005976:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800597a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800597e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005982:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005986:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800598a:	673b      	str	r3, [r7, #112]	; 0x70
 800598c:	2300      	movs	r3, #0
 800598e:	677b      	str	r3, [r7, #116]	; 0x74
 8005990:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8005994:	460b      	mov	r3, r1
 8005996:	4313      	orrs	r3, r2
 8005998:	d053      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800599a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800599e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059a6:	d033      	beq.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80059a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ac:	d82c      	bhi.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80059ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059b2:	d02f      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x424>
 80059b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059b8:	d826      	bhi.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80059ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059be:	d008      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 80059c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059c4:	d820      	bhi.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00a      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 80059ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059ce:	d011      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80059d0:	e01a      	b.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80059d2:	4b98      	ldr	r3, [pc, #608]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80059d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d6:	4a97      	ldr	r2, [pc, #604]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80059d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059dc:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 80059de:	e01a      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80059e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059e4:	3308      	adds	r3, #8
 80059e6:	4618      	mov	r0, r3
 80059e8:	f002 f91c 	bl	8007c24 <RCCEx_PLL2_Config>
 80059ec:	4603      	mov	r3, r0
 80059ee:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80059f2:	e010      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80059f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059f8:	332c      	adds	r3, #44	; 0x2c
 80059fa:	4618      	mov	r0, r3
 80059fc:	f002 f9aa 	bl	8007d54 <RCCEx_PLL3_Config>
 8005a00:	4603      	mov	r3, r0
 8005a02:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005a06:	e006      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a08:	2301      	movs	r3, #1
 8005a0a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005a0e:	e002      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8005a10:	bf00      	nop
 8005a12:	e000      	b.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8005a14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a16:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10d      	bne.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005a1e:	4b85      	ldr	r3, [pc, #532]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005a20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005a24:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005a28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a30:	4a80      	ldr	r2, [pc, #512]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005a32:	430b      	orrs	r3, r1
 8005a34:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005a38:	e003      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a3a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005a3e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005a42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005a4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a50:	2300      	movs	r3, #0
 8005a52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a54:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005a58:	460b      	mov	r3, r1
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	d046      	beq.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005a5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a62:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005a66:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005a6a:	d028      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005a6c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005a70:	d821      	bhi.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005a72:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a76:	d022      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005a78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005a7c:	d81b      	bhi.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005a7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a82:	d01c      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005a84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005a88:	d815      	bhi.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005a8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a8e:	d008      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005a90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a94:	d80f      	bhi.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d011      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a9e:	d00e      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005aa0:	e009      	b.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005aa2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005aa6:	3308      	adds	r3, #8
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f002 f8bb 	bl	8007c24 <RCCEx_PLL2_Config>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005ab4:	e004      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005abc:	e000      	b.n	8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8005abe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ac0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d10d      	bne.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005ac8:	4b5a      	ldr	r3, [pc, #360]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005aca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ace:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005ad2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ad6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005ada:	4a56      	ldr	r2, [pc, #344]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005adc:	430b      	orrs	r3, r1
 8005ade:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005ae2:	e003      	b.n	8005aec <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ae4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005ae8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005aec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af4:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005af8:	663b      	str	r3, [r7, #96]	; 0x60
 8005afa:	2300      	movs	r3, #0
 8005afc:	667b      	str	r3, [r7, #100]	; 0x64
 8005afe:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005b02:	460b      	mov	r3, r1
 8005b04:	4313      	orrs	r3, r2
 8005b06:	d03f      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005b08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b10:	2b04      	cmp	r3, #4
 8005b12:	d81e      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8005b14:	a201      	add	r2, pc, #4	; (adr r2, 8005b1c <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8005b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1a:	bf00      	nop
 8005b1c:	08005b5b 	.word	0x08005b5b
 8005b20:	08005b31 	.word	0x08005b31
 8005b24:	08005b3f 	.word	0x08005b3f
 8005b28:	08005b5b 	.word	0x08005b5b
 8005b2c:	08005b5b 	.word	0x08005b5b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005b30:	4b40      	ldr	r3, [pc, #256]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b34:	4a3f      	ldr	r2, [pc, #252]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005b36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b3a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005b3c:	e00e      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b42:	332c      	adds	r3, #44	; 0x2c
 8005b44:	4618      	mov	r0, r3
 8005b46:	f002 f905 	bl	8007d54 <RCCEx_PLL3_Config>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005b50:	e004      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005b58:	e000      	b.n	8005b5c <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8005b5a:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005b5c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10d      	bne.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005b64:	4b33      	ldr	r3, [pc, #204]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005b66:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005b6a:	f023 0107 	bic.w	r1, r3, #7
 8005b6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b76:	4a2f      	ldr	r2, [pc, #188]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005b78:	430b      	orrs	r3, r1
 8005b7a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005b7e:	e003      	b.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b80:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005b84:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005b88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b90:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005b94:	65bb      	str	r3, [r7, #88]	; 0x58
 8005b96:	2300      	movs	r3, #0
 8005b98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b9a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005b9e:	460b      	mov	r3, r1
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	d04d      	beq.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005ba4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bb0:	d028      	beq.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8005bb2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bb6:	d821      	bhi.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005bb8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005bbc:	d024      	beq.n	8005c08 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8005bbe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005bc2:	d81b      	bhi.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005bc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bc8:	d00e      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8005bca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005bce:	d815      	bhi.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d01b      	beq.n	8005c0c <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8005bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bd8:	d110      	bne.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005bda:	4b16      	ldr	r3, [pc, #88]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005bdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bde:	4a15      	ldr	r2, [pc, #84]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005be4:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005be6:	e012      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005be8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bec:	332c      	adds	r3, #44	; 0x2c
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f002 f8b0 	bl	8007d54 <RCCEx_PLL3_Config>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005bfa:	e008      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005c02:	e004      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005c04:	bf00      	nop
 8005c06:	e002      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005c08:	bf00      	nop
 8005c0a:	e000      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005c0c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005c0e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d110      	bne.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8005c16:	4b07      	ldr	r3, [pc, #28]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c1c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005c20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c28:	4a02      	ldr	r2, [pc, #8]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005c2a:	430b      	orrs	r3, r1
 8005c2c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005c30:	e006      	b.n	8005c40 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8005c32:	bf00      	nop
 8005c34:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c38:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005c3c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c48:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005c4c:	653b      	str	r3, [r7, #80]	; 0x50
 8005c4e:	2300      	movs	r3, #0
 8005c50:	657b      	str	r3, [r7, #84]	; 0x54
 8005c52:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005c56:	460b      	mov	r3, r1
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	f000 80b5 	beq.w	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c64:	4b9d      	ldr	r3, [pc, #628]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c6a:	f003 0304 	and.w	r3, r3, #4
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d113      	bne.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c72:	4b9a      	ldr	r3, [pc, #616]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c78:	4a98      	ldr	r2, [pc, #608]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c7a:	f043 0304 	orr.w	r3, r3, #4
 8005c7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005c82:	4b96      	ldr	r3, [pc, #600]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c88:	f003 0304 	and.w	r3, r3, #4
 8005c8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005c90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8005c94:	2301      	movs	r3, #1
 8005c96:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005c9a:	4b91      	ldr	r3, [pc, #580]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c9e:	4a90      	ldr	r2, [pc, #576]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005ca0:	f043 0301 	orr.w	r3, r3, #1
 8005ca4:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ca6:	f7fc f9cb 	bl	8002040 <HAL_GetTick>
 8005caa:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005cae:	e00b      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cb0:	f7fc f9c6 	bl	8002040 <HAL_GetTick>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cba:	1ad3      	subs	r3, r2, r3
 8005cbc:	2b02      	cmp	r3, #2
 8005cbe:	d903      	bls.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8005cc0:	2303      	movs	r3, #3
 8005cc2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005cc6:	e005      	b.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005cc8:	4b85      	ldr	r3, [pc, #532]	; (8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d0ed      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8005cd4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d165      	bne.n	8005da8 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005cdc:	4b7f      	ldr	r3, [pc, #508]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005cde:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ce6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005cea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d023      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8005cf2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005cf6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d01b      	beq.n	8005d3a <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d02:	4b76      	ldr	r3, [pc, #472]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d0c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d10:	4b72      	ldr	r3, [pc, #456]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d16:	4a71      	ldr	r2, [pc, #452]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d1c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d20:	4b6e      	ldr	r3, [pc, #440]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d22:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d26:	4a6d      	ldr	r2, [pc, #436]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d2c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d30:	4a6a      	ldr	r2, [pc, #424]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d36:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d3e:	f003 0301 	and.w	r3, r3, #1
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d019      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d46:	f7fc f97b 	bl	8002040 <HAL_GetTick>
 8005d4a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d4e:	e00d      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d50:	f7fc f976 	bl	8002040 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d5a:	1ad2      	subs	r2, r2, r3
 8005d5c:	f241 3388 	movw	r3, #5000	; 0x1388
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d903      	bls.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8005d6a:	e006      	b.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d6c:	4b5b      	ldr	r3, [pc, #364]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d0ea      	beq.n	8005d50 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8005d7a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10d      	bne.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005d82:	4b56      	ldr	r3, [pc, #344]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d88:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d8c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005d94:	4a51      	ldr	r2, [pc, #324]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d96:	430b      	orrs	r3, r1
 8005d98:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005d9c:	e008      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005d9e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005da2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8005da6:	e003      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005da8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005dac:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005db0:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d107      	bne.n	8005dc8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005db8:	4b48      	ldr	r3, [pc, #288]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dbe:	4a47      	ldr	r2, [pc, #284]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005dc0:	f023 0304 	bic.w	r3, r3, #4
 8005dc4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005dc8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005dd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dda:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005dde:	460b      	mov	r3, r1
 8005de0:	4313      	orrs	r3, r2
 8005de2:	d042      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005de4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005de8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005dec:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005df0:	d022      	beq.n	8005e38 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005df2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005df6:	d81b      	bhi.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005df8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005dfc:	d011      	beq.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8005dfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e02:	d815      	bhi.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d019      	beq.n	8005e3c <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8005e08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e0c:	d110      	bne.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e12:	3308      	adds	r3, #8
 8005e14:	4618      	mov	r0, r3
 8005e16:	f001 ff05 	bl	8007c24 <RCCEx_PLL2_Config>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005e20:	e00d      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e22:	4b2e      	ldr	r3, [pc, #184]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e26:	4a2d      	ldr	r2, [pc, #180]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e2c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005e2e:	e006      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005e36:	e002      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005e38:	bf00      	nop
 8005e3a:	e000      	b.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005e3c:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005e3e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10d      	bne.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005e46:	4b25      	ldr	r3, [pc, #148]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e4c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005e50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e54:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e58:	4a20      	ldr	r2, [pc, #128]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005e5a:	430b      	orrs	r3, r1
 8005e5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005e60:	e003      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e62:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005e66:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005e6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e72:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005e76:	643b      	str	r3, [r7, #64]	; 0x40
 8005e78:	2300      	movs	r3, #0
 8005e7a:	647b      	str	r3, [r7, #68]	; 0x44
 8005e7c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005e80:	460b      	mov	r3, r1
 8005e82:	4313      	orrs	r3, r2
 8005e84:	d032      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005e86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e92:	d00b      	beq.n	8005eac <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005e94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e98:	d804      	bhi.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d008      	beq.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8005e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ea2:	d007      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005eaa:	e004      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005eac:	bf00      	nop
 8005eae:	e002      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005eb0:	bf00      	nop
 8005eb2:	e000      	b.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005eb4:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005eb6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d112      	bne.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005ebe:	4b07      	ldr	r3, [pc, #28]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005ec0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005ec4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ec8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ecc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ed0:	4a02      	ldr	r2, [pc, #8]	; (8005edc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005ed2:	430b      	orrs	r3, r1
 8005ed4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005ed8:	e008      	b.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8005eda:	bf00      	nop
 8005edc:	46020c00 	.word	0x46020c00
 8005ee0:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ee4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005ee8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005eec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ef4:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005ef8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005efa:	2300      	movs	r3, #0
 8005efc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005efe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005f02:	460b      	mov	r3, r1
 8005f04:	4313      	orrs	r3, r2
 8005f06:	d00c      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8005f08:	4b98      	ldr	r3, [pc, #608]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f0a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005f0e:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8005f12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f16:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f1a:	4a94      	ldr	r2, [pc, #592]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f1c:	430b      	orrs	r3, r1
 8005f1e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005f22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f2a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005f2e:	633b      	str	r3, [r7, #48]	; 0x30
 8005f30:	2300      	movs	r3, #0
 8005f32:	637b      	str	r3, [r7, #52]	; 0x34
 8005f34:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005f38:	460b      	mov	r3, r1
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	d019      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005f3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005f46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f4a:	d105      	bne.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005f4c:	4b87      	ldr	r3, [pc, #540]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f50:	4a86      	ldr	r2, [pc, #536]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f56:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005f58:	4b84      	ldr	r3, [pc, #528]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f5a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005f5e:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005f62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005f6a:	4a80      	ldr	r2, [pc, #512]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f6c:	430b      	orrs	r3, r1
 8005f6e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005f72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005f7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f80:	2300      	movs	r3, #0
 8005f82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f84:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005f88:	460b      	mov	r3, r1
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	d00c      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005f8e:	4b77      	ldr	r3, [pc, #476]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005f94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005fa0:	4972      	ldr	r1, [pc, #456]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005fa8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005fb4:	623b      	str	r3, [r7, #32]
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	627b      	str	r3, [r7, #36]	; 0x24
 8005fba:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	d00c      	beq.n	8005fde <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8005fc4:	4b69      	ldr	r3, [pc, #420]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005fc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005fce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fd2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8005fd6:	4965      	ldr	r1, [pc, #404]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8005fde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe6:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8005fea:	61bb      	str	r3, [r7, #24]
 8005fec:	2300      	movs	r3, #0
 8005fee:	61fb      	str	r3, [r7, #28]
 8005ff0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	d00c      	beq.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8005ffa:	4b5c      	ldr	r3, [pc, #368]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005ffc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006000:	f023 0218 	bic.w	r2, r3, #24
 8006004:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006008:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800600c:	4957      	ldr	r1, [pc, #348]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800600e:	4313      	orrs	r3, r2
 8006010:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006014:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601c:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8006020:	613b      	str	r3, [r7, #16]
 8006022:	2300      	movs	r3, #0
 8006024:	617b      	str	r3, [r7, #20]
 8006026:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800602a:	460b      	mov	r3, r1
 800602c:	4313      	orrs	r3, r2
 800602e:	d032      	beq.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006030:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006034:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006038:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800603c:	d105      	bne.n	800604a <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800603e:	4b4b      	ldr	r3, [pc, #300]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006042:	4a4a      	ldr	r2, [pc, #296]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006044:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006048:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800604a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800604e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006052:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006056:	d108      	bne.n	800606a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006058:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800605c:	3308      	adds	r3, #8
 800605e:	4618      	mov	r0, r3
 8006060:	f001 fde0 	bl	8007c24 <RCCEx_PLL2_Config>
 8006064:	4603      	mov	r3, r0
 8006066:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 800606a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10d      	bne.n	800608e <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006072:	4b3e      	ldr	r3, [pc, #248]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006074:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006078:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800607c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006080:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006084:	4939      	ldr	r1, [pc, #228]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006086:	4313      	orrs	r3, r2
 8006088:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800608c:	e003      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800608e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006092:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006096:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800609a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609e:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80060a2:	60bb      	str	r3, [r7, #8]
 80060a4:	2300      	movs	r3, #0
 80060a6:	60fb      	str	r3, [r7, #12]
 80060a8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80060ac:	460b      	mov	r3, r1
 80060ae:	4313      	orrs	r3, r2
 80060b0:	d03a      	beq.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80060b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80060ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060be:	d00e      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xaee>
 80060c0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060c4:	d815      	bhi.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d017      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80060ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060ce:	d110      	bne.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060d0:	4b26      	ldr	r3, [pc, #152]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80060d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d4:	4a25      	ldr	r2, [pc, #148]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80060d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060da:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80060dc:	e00e      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80060de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060e2:	3308      	adds	r3, #8
 80060e4:	4618      	mov	r0, r3
 80060e6:	f001 fd9d 	bl	8007c24 <RCCEx_PLL2_Config>
 80060ea:	4603      	mov	r3, r0
 80060ec:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80060f0:	e004      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80060f8:	e000      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 80060fa:	bf00      	nop
    }
    if (ret == HAL_OK)
 80060fc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006100:	2b00      	cmp	r3, #0
 8006102:	d10d      	bne.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006104:	4b19      	ldr	r3, [pc, #100]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800610a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800610e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006116:	4915      	ldr	r1, [pc, #84]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006118:	4313      	orrs	r3, r2
 800611a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800611e:	e003      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006120:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006124:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006128:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800612c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006130:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006134:	603b      	str	r3, [r7, #0]
 8006136:	2300      	movs	r3, #0
 8006138:	607b      	str	r3, [r7, #4]
 800613a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800613e:	460b      	mov	r3, r1
 8006140:	4313      	orrs	r3, r2
 8006142:	d00c      	beq.n	800615e <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006144:	4b09      	ldr	r3, [pc, #36]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006146:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800614a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800614e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006152:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006156:	4905      	ldr	r1, [pc, #20]	; (800616c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006158:	4313      	orrs	r3, r2
 800615a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800615e:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8006162:	4618      	mov	r0, r3
 8006164:	37e8      	adds	r7, #232	; 0xe8
 8006166:	46bd      	mov	sp, r7
 8006168:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800616c:	46020c00 	.word	0x46020c00

08006170 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006170:	b480      	push	{r7}
 8006172:	b089      	sub	sp, #36	; 0x24
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006178:	4bac      	ldr	r3, [pc, #688]	; (800642c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800617a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800617c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006180:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006182:	4baa      	ldr	r3, [pc, #680]	; (800642c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006186:	f003 0303 	and.w	r3, r3, #3
 800618a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800618c:	4ba7      	ldr	r3, [pc, #668]	; (800642c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800618e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006190:	0a1b      	lsrs	r3, r3, #8
 8006192:	f003 030f 	and.w	r3, r3, #15
 8006196:	3301      	adds	r3, #1
 8006198:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 800619a:	4ba4      	ldr	r3, [pc, #656]	; (800642c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800619c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800619e:	f003 0310 	and.w	r3, r3, #16
 80061a2:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80061a4:	4ba1      	ldr	r3, [pc, #644]	; (800642c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80061a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a8:	08db      	lsrs	r3, r3, #3
 80061aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061ae:	68fa      	ldr	r2, [r7, #12]
 80061b0:	fb02 f303 	mul.w	r3, r2, r3
 80061b4:	ee07 3a90 	vmov	s15, r3
 80061b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061bc:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f000 8123 	beq.w	800640e <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	2b03      	cmp	r3, #3
 80061cc:	d062      	beq.n	8006294 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	2b03      	cmp	r3, #3
 80061d2:	f200 8081 	bhi.w	80062d8 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d024      	beq.n	8006226 <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	2b02      	cmp	r3, #2
 80061e0:	d17a      	bne.n	80062d8 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	ee07 3a90 	vmov	s15, r3
 80061e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061ec:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006430 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 80061f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061f4:	4b8d      	ldr	r3, [pc, #564]	; (800642c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80061f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061fc:	ee07 3a90 	vmov	s15, r3
 8006200:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006204:	ed97 6a02 	vldr	s12, [r7, #8]
 8006208:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8006434 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800620c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006210:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006214:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006218:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800621c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006220:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006224:	e08f      	b.n	8006346 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006226:	4b81      	ldr	r3, [pc, #516]	; (800642c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d005      	beq.n	800623e <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 8006232:	4b7e      	ldr	r3, [pc, #504]	; (800642c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	0f1b      	lsrs	r3, r3, #28
 8006238:	f003 030f 	and.w	r3, r3, #15
 800623c:	e006      	b.n	800624c <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 800623e:	4b7b      	ldr	r3, [pc, #492]	; (800642c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006240:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006244:	041b      	lsls	r3, r3, #16
 8006246:	0f1b      	lsrs	r3, r3, #28
 8006248:	f003 030f 	and.w	r3, r3, #15
 800624c:	4a7a      	ldr	r2, [pc, #488]	; (8006438 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 800624e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006252:	ee07 3a90 	vmov	s15, r3
 8006256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	ee07 3a90 	vmov	s15, r3
 8006260:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006264:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006268:	69bb      	ldr	r3, [r7, #24]
 800626a:	ee07 3a90 	vmov	s15, r3
 800626e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006272:	ed97 6a02 	vldr	s12, [r7, #8]
 8006276:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006434 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800627a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800627e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006286:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800628a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800628e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006292:	e058      	b.n	8006346 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	ee07 3a90 	vmov	s15, r3
 800629a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800629e:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006430 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 80062a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062a6:	4b61      	ldr	r3, [pc, #388]	; (800642c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80062a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062ae:	ee07 3a90 	vmov	s15, r3
 80062b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80062b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80062ba:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006434 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80062be:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80062c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062d6:	e036      	b.n	8006346 <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80062d8:	4b54      	ldr	r3, [pc, #336]	; (800642c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d005      	beq.n	80062f0 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 80062e4:	4b51      	ldr	r3, [pc, #324]	; (800642c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	0f1b      	lsrs	r3, r3, #28
 80062ea:	f003 030f 	and.w	r3, r3, #15
 80062ee:	e006      	b.n	80062fe <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 80062f0:	4b4e      	ldr	r3, [pc, #312]	; (800642c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80062f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80062f6:	041b      	lsls	r3, r3, #16
 80062f8:	0f1b      	lsrs	r3, r3, #28
 80062fa:	f003 030f 	and.w	r3, r3, #15
 80062fe:	4a4e      	ldr	r2, [pc, #312]	; (8006438 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006304:	ee07 3a90 	vmov	s15, r3
 8006308:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	ee07 3a90 	vmov	s15, r3
 8006312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006316:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800631a:	69bb      	ldr	r3, [r7, #24]
 800631c:	ee07 3a90 	vmov	s15, r3
 8006320:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006324:	ed97 6a02 	vldr	s12, [r7, #8]
 8006328:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006434 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800632c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006330:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006334:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006338:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800633c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006340:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006344:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006346:	4b39      	ldr	r3, [pc, #228]	; (800642c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800634a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d017      	beq.n	8006382 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006352:	4b36      	ldr	r3, [pc, #216]	; (800642c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006356:	0a5b      	lsrs	r3, r3, #9
 8006358:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800635c:	ee07 3a90 	vmov	s15, r3
 8006360:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8006364:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006368:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800636c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006370:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006374:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006378:	ee17 2a90 	vmov	r2, s15
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	601a      	str	r2, [r3, #0]
 8006380:	e002      	b.n	8006388 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2200      	movs	r2, #0
 8006386:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 8006388:	4b28      	ldr	r3, [pc, #160]	; (800642c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800638a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d017      	beq.n	80063c4 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006394:	4b25      	ldr	r3, [pc, #148]	; (800642c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006398:	0c1b      	lsrs	r3, r3, #16
 800639a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800639e:	ee07 3a90 	vmov	s15, r3
 80063a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80063a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063aa:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80063ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80063b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063ba:	ee17 2a90 	vmov	r2, s15
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	605a      	str	r2, [r3, #4]
 80063c2:	e002      	b.n	80063ca <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80063ca:	4b18      	ldr	r3, [pc, #96]	; (800642c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80063cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d017      	beq.n	8006406 <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80063d6:	4b15      	ldr	r3, [pc, #84]	; (800642c <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80063d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063da:	0e1b      	lsrs	r3, r3, #24
 80063dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063e0:	ee07 3a90 	vmov	s15, r3
 80063e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80063e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063ec:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80063f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80063f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063fc:	ee17 2a90 	vmov	r2, s15
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8006404:	e00c      	b.n	8006420 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2200      	movs	r2, #0
 800640a:	609a      	str	r2, [r3, #8]
}
 800640c:	e008      	b.n	8006420 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	609a      	str	r2, [r3, #8]
}
 8006420:	bf00      	nop
 8006422:	3724      	adds	r7, #36	; 0x24
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	46020c00 	.word	0x46020c00
 8006430:	4b742400 	.word	0x4b742400
 8006434:	46000000 	.word	0x46000000
 8006438:	0800aab0 	.word	0x0800aab0

0800643c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800643c:	b480      	push	{r7}
 800643e:	b089      	sub	sp, #36	; 0x24
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8006444:	4bac      	ldr	r3, [pc, #688]	; (80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006448:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800644c:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 800644e:	4baa      	ldr	r3, [pc, #680]	; (80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006452:	f003 0303 	and.w	r3, r3, #3
 8006456:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8006458:	4ba7      	ldr	r3, [pc, #668]	; (80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800645a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800645c:	0a1b      	lsrs	r3, r3, #8
 800645e:	f003 030f 	and.w	r3, r3, #15
 8006462:	3301      	adds	r3, #1
 8006464:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 8006466:	4ba4      	ldr	r3, [pc, #656]	; (80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646a:	f003 0310 	and.w	r3, r3, #16
 800646e:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8006470:	4ba1      	ldr	r3, [pc, #644]	; (80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006474:	08db      	lsrs	r3, r3, #3
 8006476:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800647a:	68fa      	ldr	r2, [r7, #12]
 800647c:	fb02 f303 	mul.w	r3, r2, r3
 8006480:	ee07 3a90 	vmov	s15, r3
 8006484:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006488:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	2b00      	cmp	r3, #0
 8006490:	f000 8123 	beq.w	80066da <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	2b03      	cmp	r3, #3
 8006498:	d062      	beq.n	8006560 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	2b03      	cmp	r3, #3
 800649e:	f200 8081 	bhi.w	80065a4 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	d024      	beq.n	80064f2 <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d17a      	bne.n	80065a4 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	ee07 3a90 	vmov	s15, r3
 80064b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064b8:	eddf 6a90 	vldr	s13, [pc, #576]	; 80066fc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 80064bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064c0:	4b8d      	ldr	r3, [pc, #564]	; (80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80064c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064c8:	ee07 3a90 	vmov	s15, r3
 80064cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80064d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80064d4:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8006700 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80064d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80064dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80064e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80064e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064f0:	e08f      	b.n	8006612 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80064f2:	4b81      	ldr	r3, [pc, #516]	; (80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d005      	beq.n	800650a <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 80064fe:	4b7e      	ldr	r3, [pc, #504]	; (80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	0f1b      	lsrs	r3, r3, #28
 8006504:	f003 030f 	and.w	r3, r3, #15
 8006508:	e006      	b.n	8006518 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 800650a:	4b7b      	ldr	r3, [pc, #492]	; (80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800650c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006510:	041b      	lsls	r3, r3, #16
 8006512:	0f1b      	lsrs	r3, r3, #28
 8006514:	f003 030f 	and.w	r3, r3, #15
 8006518:	4a7a      	ldr	r2, [pc, #488]	; (8006704 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 800651a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800651e:	ee07 3a90 	vmov	s15, r3
 8006522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	ee07 3a90 	vmov	s15, r3
 800652c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006530:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006534:	69bb      	ldr	r3, [r7, #24]
 8006536:	ee07 3a90 	vmov	s15, r3
 800653a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800653e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006542:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006700 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800654a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800654e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006552:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8006556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800655a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800655e:	e058      	b.n	8006612 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	ee07 3a90 	vmov	s15, r3
 8006566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800656a:	eddf 6a64 	vldr	s13, [pc, #400]	; 80066fc <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 800656e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006572:	4b61      	ldr	r3, [pc, #388]	; (80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800657a:	ee07 3a90 	vmov	s15, r3
 800657e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006582:	ed97 6a02 	vldr	s12, [r7, #8]
 8006586:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006700 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800658a:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800658e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006596:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800659a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800659e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065a2:	e036      	b.n	8006612 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80065a4:	4b54      	ldr	r3, [pc, #336]	; (80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d005      	beq.n	80065bc <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 80065b0:	4b51      	ldr	r3, [pc, #324]	; (80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	0f1b      	lsrs	r3, r3, #28
 80065b6:	f003 030f 	and.w	r3, r3, #15
 80065ba:	e006      	b.n	80065ca <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 80065bc:	4b4e      	ldr	r3, [pc, #312]	; (80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80065be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80065c2:	041b      	lsls	r3, r3, #16
 80065c4:	0f1b      	lsrs	r3, r3, #28
 80065c6:	f003 030f 	and.w	r3, r3, #15
 80065ca:	4a4e      	ldr	r2, [pc, #312]	; (8006704 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80065cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065d0:	ee07 3a90 	vmov	s15, r3
 80065d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	ee07 3a90 	vmov	s15, r3
 80065de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	ee07 3a90 	vmov	s15, r3
 80065ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065f0:	ed97 6a02 	vldr	s12, [r7, #8]
 80065f4:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006700 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80065f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006600:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006604:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006608:	ee67 7a27 	vmul.f32	s15, s14, s15
 800660c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006610:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8006612:	4b39      	ldr	r3, [pc, #228]	; (80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800661a:	2b00      	cmp	r3, #0
 800661c:	d017      	beq.n	800664e <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800661e:	4b36      	ldr	r3, [pc, #216]	; (80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006622:	0a5b      	lsrs	r3, r3, #9
 8006624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006628:	ee07 3a90 	vmov	s15, r3
 800662c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8006630:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006634:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006638:	edd7 6a07 	vldr	s13, [r7, #28]
 800663c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006640:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006644:	ee17 2a90 	vmov	r2, s15
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	601a      	str	r2, [r3, #0]
 800664c:	e002      	b.n	8006654 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2200      	movs	r2, #0
 8006652:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8006654:	4b28      	ldr	r3, [pc, #160]	; (80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800665c:	2b00      	cmp	r3, #0
 800665e:	d017      	beq.n	8006690 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006660:	4b25      	ldr	r3, [pc, #148]	; (80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006662:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006664:	0c1b      	lsrs	r3, r3, #16
 8006666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800666a:	ee07 3a90 	vmov	s15, r3
 800666e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8006672:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006676:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800667a:	edd7 6a07 	vldr	s13, [r7, #28]
 800667e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006686:	ee17 2a90 	vmov	r2, s15
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	605a      	str	r2, [r3, #4]
 800668e:	e002      	b.n	8006696 <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8006696:	4b18      	ldr	r3, [pc, #96]	; (80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d017      	beq.n	80066d2 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80066a2:	4b15      	ldr	r3, [pc, #84]	; (80066f8 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80066a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a6:	0e1b      	lsrs	r3, r3, #24
 80066a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066ac:	ee07 3a90 	vmov	s15, r3
 80066b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80066b4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066b8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80066bc:	edd7 6a07 	vldr	s13, [r7, #28]
 80066c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066c8:	ee17 2a90 	vmov	r2, s15
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80066d0:	e00c      	b.n	80066ec <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	609a      	str	r2, [r3, #8]
}
 80066d8:	e008      	b.n	80066ec <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	609a      	str	r2, [r3, #8]
}
 80066ec:	bf00      	nop
 80066ee:	3724      	adds	r7, #36	; 0x24
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr
 80066f8:	46020c00 	.word	0x46020c00
 80066fc:	4b742400 	.word	0x4b742400
 8006700:	46000000 	.word	0x46000000
 8006704:	0800aab0 	.word	0x0800aab0

08006708 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006708:	b480      	push	{r7}
 800670a:	b089      	sub	sp, #36	; 0x24
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006710:	4bac      	ldr	r3, [pc, #688]	; (80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006718:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 800671a:	4baa      	ldr	r3, [pc, #680]	; (80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800671c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671e:	f003 0303 	and.w	r3, r3, #3
 8006722:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8006724:	4ba7      	ldr	r3, [pc, #668]	; (80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006726:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006728:	0a1b      	lsrs	r3, r3, #8
 800672a:	f003 030f 	and.w	r3, r3, #15
 800672e:	3301      	adds	r3, #1
 8006730:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 8006732:	4ba4      	ldr	r3, [pc, #656]	; (80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006736:	f003 0310 	and.w	r3, r3, #16
 800673a:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 800673c:	4ba1      	ldr	r3, [pc, #644]	; (80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800673e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006740:	08db      	lsrs	r3, r3, #3
 8006742:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	fb02 f303 	mul.w	r3, r2, r3
 800674c:	ee07 3a90 	vmov	s15, r3
 8006750:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006754:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	2b00      	cmp	r3, #0
 800675c:	f000 8123 	beq.w	80069a6 <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	2b03      	cmp	r3, #3
 8006764:	d062      	beq.n	800682c <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	2b03      	cmp	r3, #3
 800676a:	f200 8081 	bhi.w	8006870 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	2b01      	cmp	r3, #1
 8006772:	d024      	beq.n	80067be <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	2b02      	cmp	r3, #2
 8006778:	d17a      	bne.n	8006870 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	ee07 3a90 	vmov	s15, r3
 8006780:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006784:	eddf 6a90 	vldr	s13, [pc, #576]	; 80069c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8006788:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800678c:	4b8d      	ldr	r3, [pc, #564]	; (80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800678e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006794:	ee07 3a90 	vmov	s15, r3
 8006798:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800679c:	ed97 6a02 	vldr	s12, [r7, #8]
 80067a0:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80069cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80067a4:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80067a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80067ac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067b0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80067b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067b8:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 80067bc:	e08f      	b.n	80068de <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80067be:	4b81      	ldr	r3, [pc, #516]	; (80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d005      	beq.n	80067d6 <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 80067ca:	4b7e      	ldr	r3, [pc, #504]	; (80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80067cc:	689b      	ldr	r3, [r3, #8]
 80067ce:	0f1b      	lsrs	r3, r3, #28
 80067d0:	f003 030f 	and.w	r3, r3, #15
 80067d4:	e006      	b.n	80067e4 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 80067d6:	4b7b      	ldr	r3, [pc, #492]	; (80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80067d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80067dc:	041b      	lsls	r3, r3, #16
 80067de:	0f1b      	lsrs	r3, r3, #28
 80067e0:	f003 030f 	and.w	r3, r3, #15
 80067e4:	4a7a      	ldr	r2, [pc, #488]	; (80069d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80067e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067ea:	ee07 3a90 	vmov	s15, r3
 80067ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	ee07 3a90 	vmov	s15, r3
 80067f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006800:	69bb      	ldr	r3, [r7, #24]
 8006802:	ee07 3a90 	vmov	s15, r3
 8006806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800680a:	ed97 6a02 	vldr	s12, [r7, #8]
 800680e:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80069cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8006812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800681a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800681e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006826:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800682a:	e058      	b.n	80068de <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	ee07 3a90 	vmov	s15, r3
 8006832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006836:	eddf 6a64 	vldr	s13, [pc, #400]	; 80069c8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800683a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800683e:	4b61      	ldr	r3, [pc, #388]	; (80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006846:	ee07 3a90 	vmov	s15, r3
 800684a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800684e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006852:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80069cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8006856:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800685a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 800685e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006862:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800686a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800686e:	e036      	b.n	80068de <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006870:	4b54      	ldr	r3, [pc, #336]	; (80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006878:	2b00      	cmp	r3, #0
 800687a:	d005      	beq.n	8006888 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 800687c:	4b51      	ldr	r3, [pc, #324]	; (80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800687e:	689b      	ldr	r3, [r3, #8]
 8006880:	0f1b      	lsrs	r3, r3, #28
 8006882:	f003 030f 	and.w	r3, r3, #15
 8006886:	e006      	b.n	8006896 <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 8006888:	4b4e      	ldr	r3, [pc, #312]	; (80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800688a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800688e:	041b      	lsls	r3, r3, #16
 8006890:	0f1b      	lsrs	r3, r3, #28
 8006892:	f003 030f 	and.w	r3, r3, #15
 8006896:	4a4e      	ldr	r2, [pc, #312]	; (80069d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 8006898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800689c:	ee07 3a90 	vmov	s15, r3
 80068a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	ee07 3a90 	vmov	s15, r3
 80068aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	ee07 3a90 	vmov	s15, r3
 80068b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068bc:	ed97 6a02 	vldr	s12, [r7, #8]
 80068c0:	eddf 5a42 	vldr	s11, [pc, #264]	; 80069cc <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80068c4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068d0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80068d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068d8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068dc:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 80068de:	4b39      	ldr	r3, [pc, #228]	; (80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80068e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d017      	beq.n	800691a <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80068ea:	4b36      	ldr	r3, [pc, #216]	; (80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80068ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ee:	0a5b      	lsrs	r3, r3, #9
 80068f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068f4:	ee07 3a90 	vmov	s15, r3
 80068f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80068fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006900:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006904:	edd7 6a07 	vldr	s13, [r7, #28]
 8006908:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800690c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006910:	ee17 2a90 	vmov	r2, s15
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	601a      	str	r2, [r3, #0]
 8006918:	e002      	b.n	8006920 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2200      	movs	r2, #0
 800691e:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006920:	4b28      	ldr	r3, [pc, #160]	; (80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d017      	beq.n	800695c <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800692c:	4b25      	ldr	r3, [pc, #148]	; (80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800692e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006930:	0c1b      	lsrs	r3, r3, #16
 8006932:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006936:	ee07 3a90 	vmov	s15, r3
 800693a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 800693e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006942:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006946:	edd7 6a07 	vldr	s13, [r7, #28]
 800694a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800694e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006952:	ee17 2a90 	vmov	r2, s15
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	605a      	str	r2, [r3, #4]
 800695a:	e002      	b.n	8006962 <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2200      	movs	r2, #0
 8006960:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8006962:	4b18      	ldr	r3, [pc, #96]	; (80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006966:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800696a:	2b00      	cmp	r3, #0
 800696c:	d017      	beq.n	800699e <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800696e:	4b15      	ldr	r3, [pc, #84]	; (80069c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006972:	0e1b      	lsrs	r3, r3, #24
 8006974:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006978:	ee07 3a90 	vmov	s15, r3
 800697c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8006980:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006984:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006988:	edd7 6a07 	vldr	s13, [r7, #28]
 800698c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006990:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006994:	ee17 2a90 	vmov	r2, s15
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 800699c:	e00c      	b.n	80069b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	609a      	str	r2, [r3, #8]
}
 80069a4:	e008      	b.n	80069b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2200      	movs	r2, #0
 80069aa:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	609a      	str	r2, [r3, #8]
}
 80069b8:	bf00      	nop
 80069ba:	3724      	adds	r7, #36	; 0x24
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	46020c00 	.word	0x46020c00
 80069c8:	4b742400 	.word	0x4b742400
 80069cc:	46000000 	.word	0x46000000
 80069d0:	0800aab0 	.word	0x0800aab0

080069d4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b08e      	sub	sp, #56	; 0x38
 80069d8:	af00      	add	r7, sp, #0
 80069da:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80069de:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069e2:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 80069e6:	430b      	orrs	r3, r1
 80069e8:	d145      	bne.n	8006a76 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80069ea:	4ba7      	ldr	r3, [pc, #668]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80069ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069f4:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 80069f6:	4ba4      	ldr	r3, [pc, #656]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80069f8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069fc:	f003 0302 	and.w	r3, r3, #2
 8006a00:	2b02      	cmp	r3, #2
 8006a02:	d108      	bne.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a0a:	d104      	bne.n	8006a16 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006a0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a10:	637b      	str	r3, [r7, #52]	; 0x34
 8006a12:	f001 b8fc 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006a16:	4b9c      	ldr	r3, [pc, #624]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a24:	d114      	bne.n	8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8006a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a2c:	d110      	bne.n	8006a50 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a2e:	4b96      	ldr	r3, [pc, #600]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a3c:	d103      	bne.n	8006a46 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8006a3e:	23fa      	movs	r3, #250	; 0xfa
 8006a40:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a42:	f001 b8e4 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8006a46:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006a4a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a4c:	f001 b8df 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006a50:	4b8d      	ldr	r3, [pc, #564]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006a5c:	d107      	bne.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a64:	d103      	bne.n	8006a6e <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8006a66:	4b89      	ldr	r3, [pc, #548]	; (8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006a68:	637b      	str	r3, [r7, #52]	; 0x34
 8006a6a:	f001 b8d0 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	637b      	str	r3, [r7, #52]	; 0x34
 8006a72:	f001 b8cc 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006a76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a7a:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006a7e:	430b      	orrs	r3, r1
 8006a80:	d151      	bne.n	8006b26 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006a82:	4b81      	ldr	r3, [pc, #516]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006a88:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006a8c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a90:	2b80      	cmp	r3, #128	; 0x80
 8006a92:	d035      	beq.n	8006b00 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8006a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a96:	2b80      	cmp	r3, #128	; 0x80
 8006a98:	d841      	bhi.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9c:	2b60      	cmp	r3, #96	; 0x60
 8006a9e:	d02a      	beq.n	8006af6 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8006aa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa2:	2b60      	cmp	r3, #96	; 0x60
 8006aa4:	d83b      	bhi.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa8:	2b40      	cmp	r3, #64	; 0x40
 8006aaa:	d009      	beq.n	8006ac0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aae:	2b40      	cmp	r3, #64	; 0x40
 8006ab0:	d835      	bhi.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00c      	beq.n	8006ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aba:	2b20      	cmp	r3, #32
 8006abc:	d012      	beq.n	8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006abe:	e02e      	b.n	8006b1e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f7ff fb53 	bl	8006170 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006acc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ace:	f001 b89e 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ad2:	f107 0318 	add.w	r3, r7, #24
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	f7ff fcb0 	bl	800643c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ae0:	f001 b895 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ae4:	f107 030c 	add.w	r3, r7, #12
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7ff fe0d 	bl	8006708 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006af2:	f001 b88c 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006af6:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006afa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006afc:	f001 b887 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b00:	4b61      	ldr	r3, [pc, #388]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b0c:	d103      	bne.n	8006b16 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006b0e:	4b60      	ldr	r3, [pc, #384]	; (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006b10:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006b12:	f001 b87c 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006b16:	2300      	movs	r3, #0
 8006b18:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b1a:	f001 b878 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b22:	f001 b874 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006b26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b2a:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006b2e:	430b      	orrs	r3, r1
 8006b30:	d158      	bne.n	8006be4 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006b32:	4b55      	ldr	r3, [pc, #340]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006b34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006b38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b3c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b44:	d03b      	beq.n	8006bbe <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b4c:	d846      	bhi.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b54:	d02e      	beq.n	8006bb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8006b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b5c:	d83e      	bhi.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b64:	d00b      	beq.n	8006b7e <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8006b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b6c:	d836      	bhi.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00d      	beq.n	8006b90 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b7a:	d012      	beq.n	8006ba2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006b7c:	e02e      	b.n	8006bdc <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b82:	4618      	mov	r0, r3
 8006b84:	f7ff faf4 	bl	8006170 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b8c:	f001 b83f 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b90:	f107 0318 	add.w	r3, r7, #24
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7ff fc51 	bl	800643c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b9e:	f001 b836 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ba2:	f107 030c 	add.w	r3, r7, #12
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	f7ff fdae 	bl	8006708 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006bb0:	f001 b82d 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006bb4:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006bb8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006bba:	f001 b828 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006bbe:	4b32      	ldr	r3, [pc, #200]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bca:	d103      	bne.n	8006bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8006bcc:	4b30      	ldr	r3, [pc, #192]	; (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006bce:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006bd0:	f001 b81d 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006bd8:	f001 b819 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006be0:	f001 b815 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8006be4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006be8:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006bec:	430b      	orrs	r3, r1
 8006bee:	d126      	bne.n	8006c3e <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8006bf0:	4b25      	ldr	r3, [pc, #148]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006bf2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006bf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006bfa:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8006bfc:	4b22      	ldr	r3, [pc, #136]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c08:	d106      	bne.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d103      	bne.n	8006c18 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8006c10:	4b1f      	ldr	r3, [pc, #124]	; (8006c90 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006c12:	637b      	str	r3, [r7, #52]	; 0x34
 8006c14:	f000 bffb 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8006c18:	4b1b      	ldr	r3, [pc, #108]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c24:	d107      	bne.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8006c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c2c:	d103      	bne.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8006c2e:	4b19      	ldr	r3, [pc, #100]	; (8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006c30:	637b      	str	r3, [r7, #52]	; 0x34
 8006c32:	f000 bfec 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8006c36:	2300      	movs	r3, #0
 8006c38:	637b      	str	r3, [r7, #52]	; 0x34
 8006c3a:	f000 bfe8 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8006c3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c42:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8006c46:	430b      	orrs	r3, r1
 8006c48:	d164      	bne.n	8006d14 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006c4a:	4b0f      	ldr	r3, [pc, #60]	; (8006c88 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c50:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006c54:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c58:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006c5c:	d03d      	beq.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c60:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006c64:	d852      	bhi.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c6c:	d014      	beq.n	8006c98 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006c74:	d84a      	bhi.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d01f      	beq.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8006c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006c82:	d012      	beq.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8006c84:	e042      	b.n	8006d0c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006c86:	bf00      	nop
 8006c88:	46020c00 	.word	0x46020c00
 8006c8c:	0007a120 	.word	0x0007a120
 8006c90:	00f42400 	.word	0x00f42400
 8006c94:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f7ff fa67 	bl	8006170 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006ca6:	f000 bfb2 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006caa:	f107 0318 	add.w	r3, r7, #24
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7ff fbc4 	bl	800643c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006cb4:	69fb      	ldr	r3, [r7, #28]
 8006cb6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006cb8:	f000 bfa9 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006cbc:	4bab      	ldr	r3, [pc, #684]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cc8:	d103      	bne.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8006cca:	4ba9      	ldr	r3, [pc, #676]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006ccc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006cce:	f000 bf9e 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006cd6:	f000 bf9a 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006cda:	4ba4      	ldr	r3, [pc, #656]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d005      	beq.n	8006cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8006ce6:	4ba1      	ldr	r3, [pc, #644]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006ce8:	689b      	ldr	r3, [r3, #8]
 8006cea:	0e1b      	lsrs	r3, r3, #24
 8006cec:	f003 030f 	and.w	r3, r3, #15
 8006cf0:	e006      	b.n	8006d00 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 8006cf2:	4b9e      	ldr	r3, [pc, #632]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006cf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006cf8:	041b      	lsls	r3, r3, #16
 8006cfa:	0e1b      	lsrs	r3, r3, #24
 8006cfc:	f003 030f 	and.w	r3, r3, #15
 8006d00:	4a9c      	ldr	r2, [pc, #624]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8006d02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d08:	f000 bf81 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d10:	f000 bf7d 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006d14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d18:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8006d1c:	430b      	orrs	r3, r1
 8006d1e:	d175      	bne.n	8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006d20:	4b92      	ldr	r3, [pc, #584]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006d22:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006d26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d2a:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d15b      	bne.n	8006dea <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006d32:	4b8e      	ldr	r3, [pc, #568]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d38:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006d3c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8006d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d40:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006d44:	d034      	beq.n	8006db0 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d48:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006d4c:	d849      	bhi.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d54:	d00b      	beq.n	8006d6e <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8006d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d58:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d5c:	d841      	bhi.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8006d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d016      	beq.n	8006d92 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006d6a:	d009      	beq.n	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8006d6c:	e039      	b.n	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006d6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7ff f9fc 	bl	8006170 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006d7c:	f000 bf47 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006d80:	f107 0318 	add.w	r3, r7, #24
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7ff fb59 	bl	800643c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006d8e:	f000 bf3e 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006d92:	4b76      	ldr	r3, [pc, #472]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d9e:	d103      	bne.n	8006da8 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 8006da0:	4b73      	ldr	r3, [pc, #460]	; (8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006da2:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006da4:	f000 bf33 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 8006da8:	2300      	movs	r3, #0
 8006daa:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006dac:	f000 bf2f 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006db0:	4b6e      	ldr	r3, [pc, #440]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006db2:	689b      	ldr	r3, [r3, #8]
 8006db4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d005      	beq.n	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 8006dbc:	4b6b      	ldr	r3, [pc, #428]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	0e1b      	lsrs	r3, r3, #24
 8006dc2:	f003 030f 	and.w	r3, r3, #15
 8006dc6:	e006      	b.n	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 8006dc8:	4b68      	ldr	r3, [pc, #416]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006dca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006dce:	041b      	lsls	r3, r3, #16
 8006dd0:	0e1b      	lsrs	r3, r3, #24
 8006dd2:	f003 030f 	and.w	r3, r3, #15
 8006dd6:	4a67      	ldr	r2, [pc, #412]	; (8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8006dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ddc:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006dde:	f000 bf16 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 8006de2:	2300      	movs	r3, #0
 8006de4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006de6:	f000 bf12 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006df0:	d108      	bne.n	8006e04 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7ff f9ba 	bl	8006170 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfe:	637b      	str	r3, [r7, #52]	; 0x34
 8006e00:	f000 bf05 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 8006e04:	2300      	movs	r3, #0
 8006e06:	637b      	str	r3, [r7, #52]	; 0x34
 8006e08:	f000 bf01 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006e0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e10:	1e51      	subs	r1, r2, #1
 8006e12:	430b      	orrs	r3, r1
 8006e14:	d136      	bne.n	8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006e16:	4b55      	ldr	r3, [pc, #340]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e1c:	f003 0303 	and.w	r3, r3, #3
 8006e20:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d104      	bne.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006e28:	f7fe fb34 	bl	8005494 <HAL_RCC_GetPCLK2Freq>
 8006e2c:	6378      	str	r0, [r7, #52]	; 0x34
 8006e2e:	f000 beee 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d104      	bne.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006e38:	f7fe f9f6 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 8006e3c:	6378      	str	r0, [r7, #52]	; 0x34
 8006e3e:	f000 bee6 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006e42:	4b4a      	ldr	r3, [pc, #296]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e4e:	d106      	bne.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d103      	bne.n	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 8006e56:	4b48      	ldr	r3, [pc, #288]	; (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006e58:	637b      	str	r3, [r7, #52]	; 0x34
 8006e5a:	f000 bed8 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006e5e:	4b43      	ldr	r3, [pc, #268]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006e60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e64:	f003 0302 	and.w	r3, r3, #2
 8006e68:	2b02      	cmp	r3, #2
 8006e6a:	d107      	bne.n	8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8006e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6e:	2b03      	cmp	r3, #3
 8006e70:	d104      	bne.n	8006e7c <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 8006e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e76:	637b      	str	r3, [r7, #52]	; 0x34
 8006e78:	f000 bec9 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8006e80:	f000 bec5 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006e84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e88:	1e91      	subs	r1, r2, #2
 8006e8a:	430b      	orrs	r3, r1
 8006e8c:	d136      	bne.n	8006efc <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006e8e:	4b37      	ldr	r3, [pc, #220]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e94:	f003 030c 	and.w	r3, r3, #12
 8006e98:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d104      	bne.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006ea0:	f7fe fae4 	bl	800546c <HAL_RCC_GetPCLK1Freq>
 8006ea4:	6378      	str	r0, [r7, #52]	; 0x34
 8006ea6:	f000 beb2 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eac:	2b04      	cmp	r3, #4
 8006eae:	d104      	bne.n	8006eba <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006eb0:	f7fe f9ba 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 8006eb4:	6378      	str	r0, [r7, #52]	; 0x34
 8006eb6:	f000 beaa 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006eba:	4b2c      	ldr	r3, [pc, #176]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ec2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ec6:	d106      	bne.n	8006ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8006ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eca:	2b08      	cmp	r3, #8
 8006ecc:	d103      	bne.n	8006ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 8006ece:	4b2a      	ldr	r3, [pc, #168]	; (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006ed0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ed2:	f000 be9c 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006ed6:	4b25      	ldr	r3, [pc, #148]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006ed8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006edc:	f003 0302 	and.w	r3, r3, #2
 8006ee0:	2b02      	cmp	r3, #2
 8006ee2:	d107      	bne.n	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8006ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee6:	2b0c      	cmp	r3, #12
 8006ee8:	d104      	bne.n	8006ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 8006eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006eee:	637b      	str	r3, [r7, #52]	; 0x34
 8006ef0:	f000 be8d 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ef8:	f000 be89 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006efc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f00:	1f11      	subs	r1, r2, #4
 8006f02:	430b      	orrs	r3, r1
 8006f04:	d13e      	bne.n	8006f84 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006f06:	4b19      	ldr	r3, [pc, #100]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006f08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f0c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006f10:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d104      	bne.n	8006f22 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006f18:	f7fe faa8 	bl	800546c <HAL_RCC_GetPCLK1Freq>
 8006f1c:	6378      	str	r0, [r7, #52]	; 0x34
 8006f1e:	f000 be76 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f24:	2b10      	cmp	r3, #16
 8006f26:	d104      	bne.n	8006f32 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006f28:	f7fe f97e 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 8006f2c:	6378      	str	r0, [r7, #52]	; 0x34
 8006f2e:	f000 be6e 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006f32:	4b0e      	ldr	r3, [pc, #56]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f3e:	d106      	bne.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8006f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f42:	2b20      	cmp	r3, #32
 8006f44:	d103      	bne.n	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8006f46:	4b0c      	ldr	r3, [pc, #48]	; (8006f78 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006f48:	637b      	str	r3, [r7, #52]	; 0x34
 8006f4a:	f000 be60 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006f4e:	4b07      	ldr	r3, [pc, #28]	; (8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006f50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f54:	f003 0302 	and.w	r3, r3, #2
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d10f      	bne.n	8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5e:	2b30      	cmp	r3, #48	; 0x30
 8006f60:	d10c      	bne.n	8006f7c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 8006f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f66:	637b      	str	r3, [r7, #52]	; 0x34
 8006f68:	f000 be51 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006f6c:	46020c00 	.word	0x46020c00
 8006f70:	02dc6c00 	.word	0x02dc6c00
 8006f74:	0800aab0 	.word	0x0800aab0
 8006f78:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f80:	f000 be45 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006f84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f88:	f1a2 0108 	sub.w	r1, r2, #8
 8006f8c:	430b      	orrs	r3, r1
 8006f8e:	d136      	bne.n	8006ffe <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006f90:	4b9f      	ldr	r3, [pc, #636]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006f92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006f9a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d104      	bne.n	8006fac <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006fa2:	f7fe fa63 	bl	800546c <HAL_RCC_GetPCLK1Freq>
 8006fa6:	6378      	str	r0, [r7, #52]	; 0x34
 8006fa8:	f000 be31 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fae:	2b40      	cmp	r3, #64	; 0x40
 8006fb0:	d104      	bne.n	8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006fb2:	f7fe f939 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 8006fb6:	6378      	str	r0, [r7, #52]	; 0x34
 8006fb8:	f000 be29 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8006fbc:	4b94      	ldr	r3, [pc, #592]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fc8:	d106      	bne.n	8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 8006fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fcc:	2b80      	cmp	r3, #128	; 0x80
 8006fce:	d103      	bne.n	8006fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 8006fd0:	4b90      	ldr	r3, [pc, #576]	; (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8006fd2:	637b      	str	r3, [r7, #52]	; 0x34
 8006fd4:	f000 be1b 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8006fd8:	4b8d      	ldr	r3, [pc, #564]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006fda:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006fde:	f003 0302 	and.w	r3, r3, #2
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d107      	bne.n	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 8006fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe8:	2bc0      	cmp	r3, #192	; 0xc0
 8006fea:	d104      	bne.n	8006ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 8006fec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ff0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ff2:	f000 be0c 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8006ffa:	f000 be08 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8006ffe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007002:	f1a2 0110 	sub.w	r1, r2, #16
 8007006:	430b      	orrs	r3, r1
 8007008:	d139      	bne.n	800707e <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 800700a:	4b81      	ldr	r3, [pc, #516]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800700c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007010:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007014:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007018:	2b00      	cmp	r3, #0
 800701a:	d104      	bne.n	8007026 <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800701c:	f7fe fa26 	bl	800546c <HAL_RCC_GetPCLK1Freq>
 8007020:	6378      	str	r0, [r7, #52]	; 0x34
 8007022:	f000 bdf4 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007028:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800702c:	d104      	bne.n	8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800702e:	f7fe f8fb 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 8007032:	6378      	str	r0, [r7, #52]	; 0x34
 8007034:	f000 bdeb 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007038:	4b75      	ldr	r3, [pc, #468]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007044:	d107      	bne.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8007046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007048:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800704c:	d103      	bne.n	8007056 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 800704e:	4b71      	ldr	r3, [pc, #452]	; (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007050:	637b      	str	r3, [r7, #52]	; 0x34
 8007052:	f000 bddc 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007056:	4b6e      	ldr	r3, [pc, #440]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007058:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800705c:	f003 0302 	and.w	r3, r3, #2
 8007060:	2b02      	cmp	r3, #2
 8007062:	d108      	bne.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8007064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007066:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800706a:	d104      	bne.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 800706c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007070:	637b      	str	r3, [r7, #52]	; 0x34
 8007072:	f000 bdcc 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007076:	2300      	movs	r3, #0
 8007078:	637b      	str	r3, [r7, #52]	; 0x34
 800707a:	f000 bdc8 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 800707e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007082:	f1a2 0120 	sub.w	r1, r2, #32
 8007086:	430b      	orrs	r3, r1
 8007088:	d158      	bne.n	800713c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800708a:	4b61      	ldr	r3, [pc, #388]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800708c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007090:	f003 0307 	and.w	r3, r3, #7
 8007094:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007098:	2b00      	cmp	r3, #0
 800709a:	d104      	bne.n	80070a6 <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 800709c:	f7fe fa0e 	bl	80054bc <HAL_RCC_GetPCLK3Freq>
 80070a0:	6378      	str	r0, [r7, #52]	; 0x34
 80070a2:	f000 bdb4 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80070a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070a8:	2b01      	cmp	r3, #1
 80070aa:	d104      	bne.n	80070b6 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80070ac:	f7fe f8bc 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 80070b0:	6378      	str	r0, [r7, #52]	; 0x34
 80070b2:	f000 bdac 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80070b6:	4b56      	ldr	r3, [pc, #344]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070c2:	d106      	bne.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 80070c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d103      	bne.n	80070d2 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 80070ca:	4b52      	ldr	r3, [pc, #328]	; (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80070cc:	637b      	str	r3, [r7, #52]	; 0x34
 80070ce:	f000 bd9e 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80070d2:	4b4f      	ldr	r3, [pc, #316]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80070d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80070d8:	f003 0302 	and.w	r3, r3, #2
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d107      	bne.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 80070e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e2:	2b03      	cmp	r3, #3
 80070e4:	d104      	bne.n	80070f0 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 80070e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070ea:	637b      	str	r3, [r7, #52]	; 0x34
 80070ec:	f000 bd8f 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 80070f0:	4b47      	ldr	r3, [pc, #284]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0320 	and.w	r3, r3, #32
 80070f8:	2b20      	cmp	r3, #32
 80070fa:	d11b      	bne.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 80070fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070fe:	2b04      	cmp	r3, #4
 8007100:	d118      	bne.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007102:	4b43      	ldr	r3, [pc, #268]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800710a:	2b00      	cmp	r3, #0
 800710c:	d005      	beq.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800710e:	4b40      	ldr	r3, [pc, #256]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007110:	689b      	ldr	r3, [r3, #8]
 8007112:	0e1b      	lsrs	r3, r3, #24
 8007114:	f003 030f 	and.w	r3, r3, #15
 8007118:	e006      	b.n	8007128 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 800711a:	4b3d      	ldr	r3, [pc, #244]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800711c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007120:	041b      	lsls	r3, r3, #16
 8007122:	0e1b      	lsrs	r3, r3, #24
 8007124:	f003 030f 	and.w	r3, r3, #15
 8007128:	4a3b      	ldr	r2, [pc, #236]	; (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 800712a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800712e:	637b      	str	r3, [r7, #52]	; 0x34
 8007130:	f000 bd6d 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8007134:	2300      	movs	r3, #0
 8007136:	637b      	str	r3, [r7, #52]	; 0x34
 8007138:	f000 bd69 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800713c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007140:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007144:	430b      	orrs	r3, r1
 8007146:	d169      	bne.n	800721c <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007148:	4b31      	ldr	r3, [pc, #196]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800714a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800714e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007152:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800715a:	d104      	bne.n	8007166 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800715c:	f7fe f864 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 8007160:	6378      	str	r0, [r7, #52]	; 0x34
 8007162:	f000 bd54 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007168:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800716c:	d108      	bne.n	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800716e:	f107 0318 	add.w	r3, r7, #24
 8007172:	4618      	mov	r0, r3
 8007174:	f7ff f962 	bl	800643c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007178:	6a3b      	ldr	r3, [r7, #32]
 800717a:	637b      	str	r3, [r7, #52]	; 0x34
 800717c:	f000 bd47 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007182:	2b00      	cmp	r3, #0
 8007184:	d104      	bne.n	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8007186:	f7fe f957 	bl	8005438 <HAL_RCC_GetHCLKFreq>
 800718a:	6378      	str	r0, [r7, #52]	; 0x34
 800718c:	f000 bd3f 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8007190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007192:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007196:	d118      	bne.n	80071ca <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8007198:	4b1d      	ldr	r3, [pc, #116]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d005      	beq.n	80071b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 80071a4:	4b1a      	ldr	r3, [pc, #104]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	0f1b      	lsrs	r3, r3, #28
 80071aa:	f003 030f 	and.w	r3, r3, #15
 80071ae:	e006      	b.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 80071b0:	4b17      	ldr	r3, [pc, #92]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80071b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071b6:	041b      	lsls	r3, r3, #16
 80071b8:	0f1b      	lsrs	r3, r3, #28
 80071ba:	f003 030f 	and.w	r3, r3, #15
 80071be:	4a16      	ldr	r2, [pc, #88]	; (8007218 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 80071c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071c4:	637b      	str	r3, [r7, #52]	; 0x34
 80071c6:	f000 bd22 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 80071ca:	4b11      	ldr	r3, [pc, #68]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071d6:	d107      	bne.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 80071d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80071de:	d103      	bne.n	80071e8 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 80071e0:	4b0c      	ldr	r3, [pc, #48]	; (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 80071e2:	637b      	str	r3, [r7, #52]	; 0x34
 80071e4:	f000 bd13 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 80071e8:	4b09      	ldr	r3, [pc, #36]	; (8007210 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071f4:	d107      	bne.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 80071f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071fc:	d103      	bne.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 80071fe:	4b05      	ldr	r3, [pc, #20]	; (8007214 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007200:	637b      	str	r3, [r7, #52]	; 0x34
 8007202:	f000 bd04 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8007206:	2300      	movs	r3, #0
 8007208:	637b      	str	r3, [r7, #52]	; 0x34
 800720a:	f000 bd00 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800720e:	bf00      	nop
 8007210:	46020c00 	.word	0x46020c00
 8007214:	00f42400 	.word	0x00f42400
 8007218:	0800aab0 	.word	0x0800aab0
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800721c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007220:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007224:	430b      	orrs	r3, r1
 8007226:	d14e      	bne.n	80072c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007228:	4ba8      	ldr	r3, [pc, #672]	; (80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800722a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800722e:	f003 0307 	and.w	r3, r3, #7
 8007232:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007236:	2b04      	cmp	r3, #4
 8007238:	d841      	bhi.n	80072be <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 800723a:	a201      	add	r2, pc, #4	; (adr r2, 8007240 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 800723c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007240:	08007279 	.word	0x08007279
 8007244:	08007255 	.word	0x08007255
 8007248:	08007267 	.word	0x08007267
 800724c:	08007283 	.word	0x08007283
 8007250:	0800728d 	.word	0x0800728d
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007258:	4618      	mov	r0, r3
 800725a:	f7fe ff89 	bl	8006170 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800725e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007260:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007262:	f000 bcd4 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007266:	f107 030c 	add.w	r3, r7, #12
 800726a:	4618      	mov	r0, r3
 800726c:	f7ff fa4c 	bl	8006708 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007274:	f000 bccb 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007278:	f7fe f8de 	bl	8005438 <HAL_RCC_GetHCLKFreq>
 800727c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800727e:	f000 bcc6 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007282:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007286:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007288:	f000 bcc1 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800728c:	4b8f      	ldr	r3, [pc, #572]	; (80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007294:	2b00      	cmp	r3, #0
 8007296:	d005      	beq.n	80072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8007298:	4b8c      	ldr	r3, [pc, #560]	; (80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	0e1b      	lsrs	r3, r3, #24
 800729e:	f003 030f 	and.w	r3, r3, #15
 80072a2:	e006      	b.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80072a4:	4b89      	ldr	r3, [pc, #548]	; (80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80072a6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80072aa:	041b      	lsls	r3, r3, #16
 80072ac:	0e1b      	lsrs	r3, r3, #24
 80072ae:	f003 030f 	and.w	r3, r3, #15
 80072b2:	4a87      	ldr	r2, [pc, #540]	; (80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80072b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072b8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072ba:	f000 bca8 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80072be:	2300      	movs	r3, #0
 80072c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072c2:	f000 bca4 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 80072c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80072ca:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 80072ce:	430b      	orrs	r3, r1
 80072d0:	d15d      	bne.n	800738e <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 80072d2:	4b7e      	ldr	r3, [pc, #504]	; (80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80072d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80072d8:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80072dc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80072de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80072e4:	d036      	beq.n	8007354 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 80072e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80072ec:	d84b      	bhi.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 80072ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80072f4:	d029      	beq.n	800734a <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 80072f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80072fc:	d843      	bhi.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 80072fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007300:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007304:	d013      	beq.n	800732e <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8007306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007308:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800730c:	d83b      	bhi.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 800730e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007310:	2b00      	cmp	r3, #0
 8007312:	d015      	beq.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8007314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007316:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800731a:	d134      	bne.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800731c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007320:	4618      	mov	r0, r3
 8007322:	f7fe ff25 	bl	8006170 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007328:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800732a:	f000 bc70 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800732e:	f107 030c 	add.w	r3, r7, #12
 8007332:	4618      	mov	r0, r3
 8007334:	f7ff f9e8 	bl	8006708 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800733c:	f000 bc67 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007340:	f7fe f87a 	bl	8005438 <HAL_RCC_GetHCLKFreq>
 8007344:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007346:	f000 bc62 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800734a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800734e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007350:	f000 bc5d 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007354:	4b5d      	ldr	r3, [pc, #372]	; (80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007356:	689b      	ldr	r3, [r3, #8]
 8007358:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800735c:	2b00      	cmp	r3, #0
 800735e:	d005      	beq.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8007360:	4b5a      	ldr	r3, [pc, #360]	; (80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	0e1b      	lsrs	r3, r3, #24
 8007366:	f003 030f 	and.w	r3, r3, #15
 800736a:	e006      	b.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 800736c:	4b57      	ldr	r3, [pc, #348]	; (80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800736e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007372:	041b      	lsls	r3, r3, #16
 8007374:	0e1b      	lsrs	r3, r3, #24
 8007376:	f003 030f 	and.w	r3, r3, #15
 800737a:	4a55      	ldr	r2, [pc, #340]	; (80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800737c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007380:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007382:	f000 bc44 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007386:	2300      	movs	r3, #0
 8007388:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800738a:	f000 bc40 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 800738e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007392:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8007396:	430b      	orrs	r3, r1
 8007398:	d14a      	bne.n	8007430 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800739a:	4b4c      	ldr	r3, [pc, #304]	; (80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800739c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80073a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80073a4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80073a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d104      	bne.n	80073b6 <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80073ac:	f7fe f85e 	bl	800546c <HAL_RCC_GetPCLK1Freq>
 80073b0:	6378      	str	r0, [r7, #52]	; 0x34
 80073b2:	f000 bc2c 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80073b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073bc:	d104      	bne.n	80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80073be:	f7fd ff33 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 80073c2:	6378      	str	r0, [r7, #52]	; 0x34
 80073c4:	f000 bc23 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 80073c8:	4b40      	ldr	r3, [pc, #256]	; (80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073d4:	d107      	bne.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 80073d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80073dc:	d103      	bne.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 80073de:	4b3d      	ldr	r3, [pc, #244]	; (80074d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80073e0:	637b      	str	r3, [r7, #52]	; 0x34
 80073e2:	f000 bc14 	b.w	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 80073e6:	4b39      	ldr	r3, [pc, #228]	; (80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 0320 	and.w	r3, r3, #32
 80073ee:	2b20      	cmp	r3, #32
 80073f0:	d11b      	bne.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 80073f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80073f8:	d117      	bne.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80073fa:	4b34      	ldr	r3, [pc, #208]	; (80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80073fc:	689b      	ldr	r3, [r3, #8]
 80073fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007402:	2b00      	cmp	r3, #0
 8007404:	d005      	beq.n	8007412 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 8007406:	4b31      	ldr	r3, [pc, #196]	; (80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	0e1b      	lsrs	r3, r3, #24
 800740c:	f003 030f 	and.w	r3, r3, #15
 8007410:	e006      	b.n	8007420 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8007412:	4b2e      	ldr	r3, [pc, #184]	; (80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007414:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007418:	041b      	lsls	r3, r3, #16
 800741a:	0e1b      	lsrs	r3, r3, #24
 800741c:	f003 030f 	and.w	r3, r3, #15
 8007420:	4a2b      	ldr	r2, [pc, #172]	; (80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007422:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007426:	637b      	str	r3, [r7, #52]	; 0x34
 8007428:	e3f1      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 800742a:	2300      	movs	r3, #0
 800742c:	637b      	str	r3, [r7, #52]	; 0x34
 800742e:	e3ee      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8007430:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007434:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8007438:	430b      	orrs	r3, r1
 800743a:	d14d      	bne.n	80074d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800743c:	4b23      	ldr	r3, [pc, #140]	; (80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800743e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007442:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007446:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744a:	2b00      	cmp	r3, #0
 800744c:	d103      	bne.n	8007456 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800744e:	f7fe f80d 	bl	800546c <HAL_RCC_GetPCLK1Freq>
 8007452:	6378      	str	r0, [r7, #52]	; 0x34
 8007454:	e3db      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8007456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800745c:	d103      	bne.n	8007466 <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800745e:	f7fd fee3 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 8007462:	6378      	str	r0, [r7, #52]	; 0x34
 8007464:	e3d3      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8007466:	4b19      	ldr	r3, [pc, #100]	; (80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800746e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007472:	d106      	bne.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8007474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007476:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800747a:	d102      	bne.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 800747c:	4b15      	ldr	r3, [pc, #84]	; (80074d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800747e:	637b      	str	r3, [r7, #52]	; 0x34
 8007480:	e3c5      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8007482:	4b12      	ldr	r3, [pc, #72]	; (80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f003 0320 	and.w	r3, r3, #32
 800748a:	2b20      	cmp	r3, #32
 800748c:	d11b      	bne.n	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 800748e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007490:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007494:	d117      	bne.n	80074c6 <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007496:	4b0d      	ldr	r3, [pc, #52]	; (80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d005      	beq.n	80074ae <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 80074a2:	4b0a      	ldr	r3, [pc, #40]	; (80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80074a4:	689b      	ldr	r3, [r3, #8]
 80074a6:	0e1b      	lsrs	r3, r3, #24
 80074a8:	f003 030f 	and.w	r3, r3, #15
 80074ac:	e006      	b.n	80074bc <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 80074ae:	4b07      	ldr	r3, [pc, #28]	; (80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80074b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80074b4:	041b      	lsls	r3, r3, #16
 80074b6:	0e1b      	lsrs	r3, r3, #24
 80074b8:	f003 030f 	and.w	r3, r3, #15
 80074bc:	4a04      	ldr	r2, [pc, #16]	; (80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80074be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074c2:	637b      	str	r3, [r7, #52]	; 0x34
 80074c4:	e3a3      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 80074c6:	2300      	movs	r3, #0
 80074c8:	637b      	str	r3, [r7, #52]	; 0x34
 80074ca:	e3a0      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80074cc:	46020c00 	.word	0x46020c00
 80074d0:	0800aab0 	.word	0x0800aab0
 80074d4:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 80074d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074dc:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80074e0:	430b      	orrs	r3, r1
 80074e2:	d148      	bne.n	8007576 <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80074e4:	4b9d      	ldr	r3, [pc, #628]	; (800775c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80074e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80074ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80074ee:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80074f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f2:	2bc0      	cmp	r3, #192	; 0xc0
 80074f4:	d024      	beq.n	8007540 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 80074f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074f8:	2bc0      	cmp	r3, #192	; 0xc0
 80074fa:	d839      	bhi.n	8007570 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 80074fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fe:	2b80      	cmp	r3, #128	; 0x80
 8007500:	d00d      	beq.n	800751e <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 8007502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007504:	2b80      	cmp	r3, #128	; 0x80
 8007506:	d833      	bhi.n	8007570 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8007508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800750a:	2b00      	cmp	r3, #0
 800750c:	d003      	beq.n	8007516 <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 800750e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007510:	2b40      	cmp	r3, #64	; 0x40
 8007512:	d011      	beq.n	8007538 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8007514:	e02c      	b.n	8007570 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8007516:	f7fd ffd1 	bl	80054bc <HAL_RCC_GetPCLK3Freq>
 800751a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800751c:	e377      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800751e:	4b8f      	ldr	r3, [pc, #572]	; (800775c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007526:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800752a:	d102      	bne.n	8007532 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 800752c:	4b8c      	ldr	r3, [pc, #560]	; (8007760 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800752e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007530:	e36d      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8007532:	2300      	movs	r3, #0
 8007534:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007536:	e36a      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8007538:	f7fd fe76 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 800753c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800753e:	e366      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8007540:	4b86      	ldr	r3, [pc, #536]	; (800775c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007548:	2b00      	cmp	r3, #0
 800754a:	d005      	beq.n	8007558 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 800754c:	4b83      	ldr	r3, [pc, #524]	; (800775c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	0f1b      	lsrs	r3, r3, #28
 8007552:	f003 030f 	and.w	r3, r3, #15
 8007556:	e006      	b.n	8007566 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 8007558:	4b80      	ldr	r3, [pc, #512]	; (800775c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800755a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800755e:	041b      	lsls	r3, r3, #16
 8007560:	0f1b      	lsrs	r3, r3, #28
 8007562:	f003 030f 	and.w	r3, r3, #15
 8007566:	4a7f      	ldr	r2, [pc, #508]	; (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800756c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800756e:	e34e      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 8007570:	2300      	movs	r3, #0
 8007572:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007574:	e34b      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8007576:	e9d7 2300 	ldrd	r2, r3, [r7]
 800757a:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 800757e:	430b      	orrs	r3, r1
 8007580:	d147      	bne.n	8007612 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007582:	4b76      	ldr	r3, [pc, #472]	; (800775c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007584:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007588:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800758c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 800758e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007590:	2b00      	cmp	r3, #0
 8007592:	d103      	bne.n	800759c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007594:	f7fd ff6a 	bl	800546c <HAL_RCC_GetPCLK1Freq>
 8007598:	6378      	str	r0, [r7, #52]	; 0x34
 800759a:	e338      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 800759c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075a2:	d103      	bne.n	80075ac <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80075a4:	f7fd fe40 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 80075a8:	6378      	str	r0, [r7, #52]	; 0x34
 80075aa:	e330      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80075ac:	4b6b      	ldr	r3, [pc, #428]	; (800775c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075b8:	d106      	bne.n	80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 80075ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075c0:	d102      	bne.n	80075c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 80075c2:	4b67      	ldr	r3, [pc, #412]	; (8007760 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80075c4:	637b      	str	r3, [r7, #52]	; 0x34
 80075c6:	e322      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 80075c8:	4b64      	ldr	r3, [pc, #400]	; (800775c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f003 0320 	and.w	r3, r3, #32
 80075d0:	2b20      	cmp	r3, #32
 80075d2:	d11b      	bne.n	800760c <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 80075d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80075da:	d117      	bne.n	800760c <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80075dc:	4b5f      	ldr	r3, [pc, #380]	; (800775c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d005      	beq.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 80075e8:	4b5c      	ldr	r3, [pc, #368]	; (800775c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	0e1b      	lsrs	r3, r3, #24
 80075ee:	f003 030f 	and.w	r3, r3, #15
 80075f2:	e006      	b.n	8007602 <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 80075f4:	4b59      	ldr	r3, [pc, #356]	; (800775c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80075f6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80075fa:	041b      	lsls	r3, r3, #16
 80075fc:	0e1b      	lsrs	r3, r3, #24
 80075fe:	f003 030f 	and.w	r3, r3, #15
 8007602:	4a58      	ldr	r2, [pc, #352]	; (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007604:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007608:	637b      	str	r3, [r7, #52]	; 0x34
 800760a:	e300      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 800760c:	2300      	movs	r3, #0
 800760e:	637b      	str	r3, [r7, #52]	; 0x34
 8007610:	e2fd      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8007612:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007616:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800761a:	430b      	orrs	r3, r1
 800761c:	d15b      	bne.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 800761e:	4b4f      	ldr	r3, [pc, #316]	; (800775c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007620:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007624:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007628:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 800762a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800762c:	2b00      	cmp	r3, #0
 800762e:	d117      	bne.n	8007660 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007630:	4b4a      	ldr	r3, [pc, #296]	; (800775c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007638:	2b00      	cmp	r3, #0
 800763a:	d005      	beq.n	8007648 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 800763c:	4b47      	ldr	r3, [pc, #284]	; (800775c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	0e1b      	lsrs	r3, r3, #24
 8007642:	f003 030f 	and.w	r3, r3, #15
 8007646:	e006      	b.n	8007656 <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 8007648:	4b44      	ldr	r3, [pc, #272]	; (800775c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800764a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800764e:	041b      	lsls	r3, r3, #16
 8007650:	0e1b      	lsrs	r3, r3, #24
 8007652:	f003 030f 	and.w	r3, r3, #15
 8007656:	4a43      	ldr	r2, [pc, #268]	; (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800765c:	637b      	str	r3, [r7, #52]	; 0x34
 800765e:	e2d6      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8007660:	4b3e      	ldr	r3, [pc, #248]	; (800775c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007662:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007666:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800766a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800766e:	d112      	bne.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8007670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007676:	d10e      	bne.n	8007696 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007678:	4b38      	ldr	r3, [pc, #224]	; (800775c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800767a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800767e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007682:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007686:	d102      	bne.n	800768e <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 8007688:	23fa      	movs	r3, #250	; 0xfa
 800768a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800768c:	e2bf      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800768e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007692:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007694:	e2bb      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8007696:	4b31      	ldr	r3, [pc, #196]	; (800775c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800769e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076a2:	d106      	bne.n	80076b2 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 80076a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076aa:	d102      	bne.n	80076b2 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 80076ac:	4b2c      	ldr	r3, [pc, #176]	; (8007760 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80076ae:	637b      	str	r3, [r7, #52]	; 0x34
 80076b0:	e2ad      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80076b2:	4b2a      	ldr	r3, [pc, #168]	; (800775c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80076b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076b8:	f003 0302 	and.w	r3, r3, #2
 80076bc:	2b02      	cmp	r3, #2
 80076be:	d107      	bne.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 80076c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076c6:	d103      	bne.n	80076d0 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 80076c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076cc:	637b      	str	r3, [r7, #52]	; 0x34
 80076ce:	e29e      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 80076d0:	2300      	movs	r3, #0
 80076d2:	637b      	str	r3, [r7, #52]	; 0x34
 80076d4:	e29b      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 80076d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80076da:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80076de:	430b      	orrs	r3, r1
 80076e0:	d162      	bne.n	80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80076e2:	4b1e      	ldr	r3, [pc, #120]	; (800775c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80076e4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80076e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80076ec:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 80076ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d117      	bne.n	8007724 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80076f4:	4b19      	ldr	r3, [pc, #100]	; (800775c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d005      	beq.n	800770c <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8007700:	4b16      	ldr	r3, [pc, #88]	; (800775c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	0e1b      	lsrs	r3, r3, #24
 8007706:	f003 030f 	and.w	r3, r3, #15
 800770a:	e006      	b.n	800771a <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 800770c:	4b13      	ldr	r3, [pc, #76]	; (800775c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800770e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007712:	041b      	lsls	r3, r3, #16
 8007714:	0e1b      	lsrs	r3, r3, #24
 8007716:	f003 030f 	and.w	r3, r3, #15
 800771a:	4a12      	ldr	r2, [pc, #72]	; (8007764 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800771c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007720:	637b      	str	r3, [r7, #52]	; 0x34
 8007722:	e274      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8007724:	4b0d      	ldr	r3, [pc, #52]	; (800775c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007726:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800772a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800772e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007732:	d119      	bne.n	8007768 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 8007734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007736:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800773a:	d115      	bne.n	8007768 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800773c:	4b07      	ldr	r3, [pc, #28]	; (800775c <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800773e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007746:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800774a:	d102      	bne.n	8007752 <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 800774c:	23fa      	movs	r3, #250	; 0xfa
 800774e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007750:	e25d      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8007752:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007756:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007758:	e259      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 800775a:	bf00      	nop
 800775c:	46020c00 	.word	0x46020c00
 8007760:	00f42400 	.word	0x00f42400
 8007764:	0800aab0 	.word	0x0800aab0
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8007768:	4b9d      	ldr	r3, [pc, #628]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007774:	d106      	bne.n	8007784 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 8007776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007778:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800777c:	d102      	bne.n	8007784 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 800777e:	4b99      	ldr	r3, [pc, #612]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8007780:	637b      	str	r3, [r7, #52]	; 0x34
 8007782:	e244      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8007784:	4b96      	ldr	r3, [pc, #600]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007786:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800778a:	f003 0302 	and.w	r3, r3, #2
 800778e:	2b02      	cmp	r3, #2
 8007790:	d107      	bne.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 8007792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007794:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007798:	d103      	bne.n	80077a2 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 800779a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800779e:	637b      	str	r3, [r7, #52]	; 0x34
 80077a0:	e235      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80077a2:	2300      	movs	r3, #0
 80077a4:	637b      	str	r3, [r7, #52]	; 0x34
 80077a6:	e232      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80077a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077ac:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80077b0:	430b      	orrs	r3, r1
 80077b2:	d147      	bne.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80077b4:	4b8a      	ldr	r3, [pc, #552]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80077b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80077ba:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80077be:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 80077c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d103      	bne.n	80077ce <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80077c6:	f7fd fe51 	bl	800546c <HAL_RCC_GetPCLK1Freq>
 80077ca:	6378      	str	r0, [r7, #52]	; 0x34
 80077cc:	e21f      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 80077ce:	4b84      	ldr	r3, [pc, #528]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80077d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80077d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80077d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077dc:	d112      	bne.n	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 80077de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80077e4:	d10e      	bne.n	8007804 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80077e6:	4b7e      	ldr	r3, [pc, #504]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80077e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80077ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077f4:	d102      	bne.n	80077fc <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 80077f6:	23fa      	movs	r3, #250	; 0xfa
 80077f8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80077fa:	e208      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80077fc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007800:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007802:	e204      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8007804:	4b76      	ldr	r3, [pc, #472]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800780c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007810:	d106      	bne.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 8007812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007814:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007818:	d102      	bne.n	8007820 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 800781a:	4b72      	ldr	r3, [pc, #456]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800781c:	637b      	str	r3, [r7, #52]	; 0x34
 800781e:	e1f6      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8007820:	4b6f      	ldr	r3, [pc, #444]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007822:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007826:	f003 0302 	and.w	r3, r3, #2
 800782a:	2b02      	cmp	r3, #2
 800782c:	d107      	bne.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 800782e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007830:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007834:	d103      	bne.n	800783e <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 8007836:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800783a:	637b      	str	r3, [r7, #52]	; 0x34
 800783c:	e1e7      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 800783e:	2300      	movs	r3, #0
 8007840:	637b      	str	r3, [r7, #52]	; 0x34
 8007842:	e1e4      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8007844:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007848:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 800784c:	430b      	orrs	r3, r1
 800784e:	d12d      	bne.n	80078ac <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8007850:	4b63      	ldr	r3, [pc, #396]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007852:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007856:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 800785a:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 800785c:	4b60      	ldr	r3, [pc, #384]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007864:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007868:	d105      	bne.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 800786a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786c:	2b00      	cmp	r3, #0
 800786e:	d102      	bne.n	8007876 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 8007870:	4b5c      	ldr	r3, [pc, #368]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8007872:	637b      	str	r3, [r7, #52]	; 0x34
 8007874:	e1cb      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8007876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007878:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800787c:	d107      	bne.n	800788e <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800787e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007882:	4618      	mov	r0, r3
 8007884:	f7fe fc74 	bl	8006170 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8007888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788a:	637b      	str	r3, [r7, #52]	; 0x34
 800788c:	e1bf      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 800788e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007890:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007894:	d107      	bne.n	80078a6 <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007896:	f107 0318 	add.w	r3, r7, #24
 800789a:	4618      	mov	r0, r3
 800789c:	f7fe fdce 	bl	800643c <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	637b      	str	r3, [r7, #52]	; 0x34
 80078a4:	e1b3      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80078a6:	2300      	movs	r3, #0
 80078a8:	637b      	str	r3, [r7, #52]	; 0x34
 80078aa:	e1b0      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80078ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078b0:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 80078b4:	430b      	orrs	r3, r1
 80078b6:	d14d      	bne.n	8007954 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 80078b8:	4b49      	ldr	r3, [pc, #292]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80078ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078be:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80078c2:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80078c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80078ca:	d028      	beq.n	800791e <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 80078cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80078d2:	d83c      	bhi.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 80078d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078da:	d013      	beq.n	8007904 <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 80078dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80078e2:	d834      	bhi.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 80078e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d004      	beq.n	80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 80078ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078f0:	d004      	beq.n	80078fc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80078f2:	e02c      	b.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 80078f4:	f7fd fdce 	bl	8005494 <HAL_RCC_GetPCLK2Freq>
 80078f8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80078fa:	e188      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80078fc:	f7fd fc94 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 8007900:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007902:	e184      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007904:	4b36      	ldr	r3, [pc, #216]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800790c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007910:	d102      	bne.n	8007918 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 8007912:	4b34      	ldr	r3, [pc, #208]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8007914:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007916:	e17a      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8007918:	2300      	movs	r3, #0
 800791a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800791c:	e177      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800791e:	4b30      	ldr	r3, [pc, #192]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007926:	2b00      	cmp	r3, #0
 8007928:	d005      	beq.n	8007936 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 800792a:	4b2d      	ldr	r3, [pc, #180]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	0e1b      	lsrs	r3, r3, #24
 8007930:	f003 030f 	and.w	r3, r3, #15
 8007934:	e006      	b.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 8007936:	4b2a      	ldr	r3, [pc, #168]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007938:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800793c:	041b      	lsls	r3, r3, #16
 800793e:	0e1b      	lsrs	r3, r3, #24
 8007940:	f003 030f 	and.w	r3, r3, #15
 8007944:	4a28      	ldr	r2, [pc, #160]	; (80079e8 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 8007946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800794a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800794c:	e15f      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800794e:	2300      	movs	r3, #0
 8007950:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007952:	e15c      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8007954:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007958:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800795c:	430b      	orrs	r3, r1
 800795e:	d154      	bne.n	8007a0a <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8007960:	4b1f      	ldr	r3, [pc, #124]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007966:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800796a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800796c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007972:	d028      	beq.n	80079c6 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8007974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007976:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800797a:	d843      	bhi.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 800797c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800797e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007982:	d013      	beq.n	80079ac <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8007984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007986:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800798a:	d83b      	bhi.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 800798c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800798e:	2b00      	cmp	r3, #0
 8007990:	d004      	beq.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8007992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007994:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007998:	d004      	beq.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800799a:	e033      	b.n	8007a04 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800799c:	f7fd fd66 	bl	800546c <HAL_RCC_GetPCLK1Freq>
 80079a0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80079a2:	e134      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80079a4:	f7fd fc40 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 80079a8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80079aa:	e130      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80079ac:	4b0c      	ldr	r3, [pc, #48]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80079b8:	d102      	bne.n	80079c0 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 80079ba:	4b0a      	ldr	r3, [pc, #40]	; (80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80079bc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80079be:	e126      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80079c0:	2300      	movs	r3, #0
 80079c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079c4:	e123      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80079c6:	4b06      	ldr	r3, [pc, #24]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80079c8:	689b      	ldr	r3, [r3, #8]
 80079ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00c      	beq.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 80079d2:	4b03      	ldr	r3, [pc, #12]	; (80079e0 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	0e1b      	lsrs	r3, r3, #24
 80079d8:	f003 030f 	and.w	r3, r3, #15
 80079dc:	e00d      	b.n	80079fa <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 80079de:	bf00      	nop
 80079e0:	46020c00 	.word	0x46020c00
 80079e4:	00f42400 	.word	0x00f42400
 80079e8:	0800aab0 	.word	0x0800aab0
 80079ec:	4b8a      	ldr	r3, [pc, #552]	; (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80079ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80079f2:	041b      	lsls	r3, r3, #16
 80079f4:	0e1b      	lsrs	r3, r3, #24
 80079f6:	f003 030f 	and.w	r3, r3, #15
 80079fa:	4a88      	ldr	r2, [pc, #544]	; (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80079fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a02:	e104      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007a04:	2300      	movs	r3, #0
 8007a06:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a08:	e101      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8007a0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a0e:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8007a12:	430b      	orrs	r3, r1
 8007a14:	d16e      	bne.n	8007af4 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007a16:	4b80      	ldr	r3, [pc, #512]	; (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007a18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007a1c:	f003 0318 	and.w	r3, r3, #24
 8007a20:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8007a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a24:	2b18      	cmp	r3, #24
 8007a26:	d862      	bhi.n	8007aee <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8007a28:	a201      	add	r2, pc, #4	; (adr r2, 8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8007a2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a2e:	bf00      	nop
 8007a30:	08007a95 	.word	0x08007a95
 8007a34:	08007aef 	.word	0x08007aef
 8007a38:	08007aef 	.word	0x08007aef
 8007a3c:	08007aef 	.word	0x08007aef
 8007a40:	08007aef 	.word	0x08007aef
 8007a44:	08007aef 	.word	0x08007aef
 8007a48:	08007aef 	.word	0x08007aef
 8007a4c:	08007aef 	.word	0x08007aef
 8007a50:	08007a9d 	.word	0x08007a9d
 8007a54:	08007aef 	.word	0x08007aef
 8007a58:	08007aef 	.word	0x08007aef
 8007a5c:	08007aef 	.word	0x08007aef
 8007a60:	08007aef 	.word	0x08007aef
 8007a64:	08007aef 	.word	0x08007aef
 8007a68:	08007aef 	.word	0x08007aef
 8007a6c:	08007aef 	.word	0x08007aef
 8007a70:	08007aa5 	.word	0x08007aa5
 8007a74:	08007aef 	.word	0x08007aef
 8007a78:	08007aef 	.word	0x08007aef
 8007a7c:	08007aef 	.word	0x08007aef
 8007a80:	08007aef 	.word	0x08007aef
 8007a84:	08007aef 	.word	0x08007aef
 8007a88:	08007aef 	.word	0x08007aef
 8007a8c:	08007aef 	.word	0x08007aef
 8007a90:	08007abf 	.word	0x08007abf
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8007a94:	f7fd fd12 	bl	80054bc <HAL_RCC_GetPCLK3Freq>
 8007a98:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007a9a:	e0b8      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007a9c:	f7fd fbc4 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 8007aa0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007aa2:	e0b4      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007aa4:	4b5c      	ldr	r3, [pc, #368]	; (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ab0:	d102      	bne.n	8007ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 8007ab2:	4b5b      	ldr	r3, [pc, #364]	; (8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 8007ab4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007ab6:	e0aa      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007abc:	e0a7      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007abe:	4b56      	ldr	r3, [pc, #344]	; (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d005      	beq.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8007aca:	4b53      	ldr	r3, [pc, #332]	; (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	0e1b      	lsrs	r3, r3, #24
 8007ad0:	f003 030f 	and.w	r3, r3, #15
 8007ad4:	e006      	b.n	8007ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 8007ad6:	4b50      	ldr	r3, [pc, #320]	; (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007ad8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007adc:	041b      	lsls	r3, r3, #16
 8007ade:	0e1b      	lsrs	r3, r3, #24
 8007ae0:	f003 030f 	and.w	r3, r3, #15
 8007ae4:	4a4d      	ldr	r2, [pc, #308]	; (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8007ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007aea:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007aec:	e08f      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007aee:	2300      	movs	r3, #0
 8007af0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007af2:	e08c      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8007af4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007af8:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8007afc:	430b      	orrs	r3, r1
 8007afe:	d14c      	bne.n	8007b9a <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007b00:	4b45      	ldr	r3, [pc, #276]	; (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007b02:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007b06:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007b0a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b0e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b12:	d013      	beq.n	8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 8007b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b1a:	d83b      	bhi.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8007b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b22:	d013      	beq.n	8007b4c <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 8007b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b26:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b2a:	d833      	bhi.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8007b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d014      	beq.n	8007b5c <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 8007b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b38:	d014      	beq.n	8007b64 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8007b3a:	e02b      	b.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b3c:	f107 0318 	add.w	r3, r7, #24
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7fe fc7b 	bl	800643c <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b4a:	e060      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b50:	4618      	mov	r0, r3
 8007b52:	f7fe fb0d 	bl	8006170 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b5a:	e058      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007b5c:	f7fd fb64 	bl	8005228 <HAL_RCC_GetSysClockFreq>
 8007b60:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007b62:	e054      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b64:	4b2c      	ldr	r3, [pc, #176]	; (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d005      	beq.n	8007b7c <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 8007b70:	4b29      	ldr	r3, [pc, #164]	; (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007b72:	689b      	ldr	r3, [r3, #8]
 8007b74:	0e1b      	lsrs	r3, r3, #24
 8007b76:	f003 030f 	and.w	r3, r3, #15
 8007b7a:	e006      	b.n	8007b8a <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8007b7c:	4b26      	ldr	r3, [pc, #152]	; (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007b7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b82:	041b      	lsls	r3, r3, #16
 8007b84:	0e1b      	lsrs	r3, r3, #24
 8007b86:	f003 030f 	and.w	r3, r3, #15
 8007b8a:	4a24      	ldr	r2, [pc, #144]	; (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8007b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b92:	e03c      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007b94:	2300      	movs	r3, #0
 8007b96:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b98:	e039      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8007b9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b9e:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8007ba2:	430b      	orrs	r3, r1
 8007ba4:	d131      	bne.n	8007c0a <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007ba6:	4b1c      	ldr	r3, [pc, #112]	; (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007ba8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007bac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bb0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007bb2:	4b19      	ldr	r3, [pc, #100]	; (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007bb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007bb8:	f003 0302 	and.w	r3, r3, #2
 8007bbc:	2b02      	cmp	r3, #2
 8007bbe:	d106      	bne.n	8007bce <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 8007bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d103      	bne.n	8007bce <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 8007bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bca:	637b      	str	r3, [r7, #52]	; 0x34
 8007bcc:	e01f      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007bce:	4b12      	ldr	r3, [pc, #72]	; (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007bd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007bd4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007bdc:	d112      	bne.n	8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 8007bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007be4:	d10e      	bne.n	8007c04 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007be6:	4b0c      	ldr	r3, [pc, #48]	; (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007be8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007bf0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bf4:	d102      	bne.n	8007bfc <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 8007bf6:	23fa      	movs	r3, #250	; 0xfa
 8007bf8:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007bfa:	e008      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8007bfc:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007c00:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007c02:	e004      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8007c04:	2300      	movs	r3, #0
 8007c06:	637b      	str	r3, [r7, #52]	; 0x34
 8007c08:	e001      	b.n	8007c0e <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8007c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3738      	adds	r7, #56	; 0x38
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	46020c00 	.word	0x46020c00
 8007c1c:	0800aab0 	.word	0x0800aab0
 8007c20:	00f42400 	.word	0x00f42400

08007c24 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b084      	sub	sp, #16
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007c2c:	4b47      	ldr	r3, [pc, #284]	; (8007d4c <RCCEx_PLL2_Config+0x128>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a46      	ldr	r2, [pc, #280]	; (8007d4c <RCCEx_PLL2_Config+0x128>)
 8007c32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c36:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007c38:	f7fa fa02 	bl	8002040 <HAL_GetTick>
 8007c3c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c3e:	e008      	b.n	8007c52 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c40:	f7fa f9fe 	bl	8002040 <HAL_GetTick>
 8007c44:	4602      	mov	r2, r0
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d901      	bls.n	8007c52 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e077      	b.n	8007d42 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c52:	4b3e      	ldr	r3, [pc, #248]	; (8007d4c <RCCEx_PLL2_Config+0x128>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d1f0      	bne.n	8007c40 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007c5e:	4b3b      	ldr	r3, [pc, #236]	; (8007d4c <RCCEx_PLL2_Config+0x128>)
 8007c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c62:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007c66:	f023 0303 	bic.w	r3, r3, #3
 8007c6a:	687a      	ldr	r2, [r7, #4]
 8007c6c:	6811      	ldr	r1, [r2, #0]
 8007c6e:	687a      	ldr	r2, [r7, #4]
 8007c70:	6852      	ldr	r2, [r2, #4]
 8007c72:	3a01      	subs	r2, #1
 8007c74:	0212      	lsls	r2, r2, #8
 8007c76:	430a      	orrs	r2, r1
 8007c78:	4934      	ldr	r1, [pc, #208]	; (8007d4c <RCCEx_PLL2_Config+0x128>)
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	62cb      	str	r3, [r1, #44]	; 0x2c
 8007c7e:	4b33      	ldr	r3, [pc, #204]	; (8007d4c <RCCEx_PLL2_Config+0x128>)
 8007c80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c82:	4b33      	ldr	r3, [pc, #204]	; (8007d50 <RCCEx_PLL2_Config+0x12c>)
 8007c84:	4013      	ands	r3, r2
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	6892      	ldr	r2, [r2, #8]
 8007c8a:	3a01      	subs	r2, #1
 8007c8c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	68d2      	ldr	r2, [r2, #12]
 8007c94:	3a01      	subs	r2, #1
 8007c96:	0252      	lsls	r2, r2, #9
 8007c98:	b292      	uxth	r2, r2
 8007c9a:	4311      	orrs	r1, r2
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	6912      	ldr	r2, [r2, #16]
 8007ca0:	3a01      	subs	r2, #1
 8007ca2:	0412      	lsls	r2, r2, #16
 8007ca4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007ca8:	4311      	orrs	r1, r2
 8007caa:	687a      	ldr	r2, [r7, #4]
 8007cac:	6952      	ldr	r2, [r2, #20]
 8007cae:	3a01      	subs	r2, #1
 8007cb0:	0612      	lsls	r2, r2, #24
 8007cb2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007cb6:	430a      	orrs	r2, r1
 8007cb8:	4924      	ldr	r1, [pc, #144]	; (8007d4c <RCCEx_PLL2_Config+0x128>)
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007cbe:	4b23      	ldr	r3, [pc, #140]	; (8007d4c <RCCEx_PLL2_Config+0x128>)
 8007cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc2:	f023 020c 	bic.w	r2, r3, #12
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	699b      	ldr	r3, [r3, #24]
 8007cca:	4920      	ldr	r1, [pc, #128]	; (8007d4c <RCCEx_PLL2_Config+0x128>)
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007cd0:	4b1e      	ldr	r3, [pc, #120]	; (8007d4c <RCCEx_PLL2_Config+0x128>)
 8007cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	6a1b      	ldr	r3, [r3, #32]
 8007cd8:	491c      	ldr	r1, [pc, #112]	; (8007d4c <RCCEx_PLL2_Config+0x128>)
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007cde:	4b1b      	ldr	r3, [pc, #108]	; (8007d4c <RCCEx_PLL2_Config+0x128>)
 8007ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ce2:	4a1a      	ldr	r2, [pc, #104]	; (8007d4c <RCCEx_PLL2_Config+0x128>)
 8007ce4:	f023 0310 	bic.w	r3, r3, #16
 8007ce8:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007cea:	4b18      	ldr	r3, [pc, #96]	; (8007d4c <RCCEx_PLL2_Config+0x128>)
 8007cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cf2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	69d2      	ldr	r2, [r2, #28]
 8007cfa:	00d2      	lsls	r2, r2, #3
 8007cfc:	4913      	ldr	r1, [pc, #76]	; (8007d4c <RCCEx_PLL2_Config+0x128>)
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007d02:	4b12      	ldr	r3, [pc, #72]	; (8007d4c <RCCEx_PLL2_Config+0x128>)
 8007d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d06:	4a11      	ldr	r2, [pc, #68]	; (8007d4c <RCCEx_PLL2_Config+0x128>)
 8007d08:	f043 0310 	orr.w	r3, r3, #16
 8007d0c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007d0e:	4b0f      	ldr	r3, [pc, #60]	; (8007d4c <RCCEx_PLL2_Config+0x128>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a0e      	ldr	r2, [pc, #56]	; (8007d4c <RCCEx_PLL2_Config+0x128>)
 8007d14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d18:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007d1a:	f7fa f991 	bl	8002040 <HAL_GetTick>
 8007d1e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d20:	e008      	b.n	8007d34 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007d22:	f7fa f98d 	bl	8002040 <HAL_GetTick>
 8007d26:	4602      	mov	r2, r0
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	1ad3      	subs	r3, r2, r3
 8007d2c:	2b02      	cmp	r3, #2
 8007d2e:	d901      	bls.n	8007d34 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007d30:	2303      	movs	r3, #3
 8007d32:	e006      	b.n	8007d42 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d34:	4b05      	ldr	r3, [pc, #20]	; (8007d4c <RCCEx_PLL2_Config+0x128>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d0f0      	beq.n	8007d22 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007d40:	2300      	movs	r3, #0

}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	46020c00 	.word	0x46020c00
 8007d50:	80800000 	.word	0x80800000

08007d54 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b084      	sub	sp, #16
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007d5c:	4b47      	ldr	r3, [pc, #284]	; (8007e7c <RCCEx_PLL3_Config+0x128>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a46      	ldr	r2, [pc, #280]	; (8007e7c <RCCEx_PLL3_Config+0x128>)
 8007d62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d66:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007d68:	f7fa f96a 	bl	8002040 <HAL_GetTick>
 8007d6c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d6e:	e008      	b.n	8007d82 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007d70:	f7fa f966 	bl	8002040 <HAL_GetTick>
 8007d74:	4602      	mov	r2, r0
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	1ad3      	subs	r3, r2, r3
 8007d7a:	2b02      	cmp	r3, #2
 8007d7c:	d901      	bls.n	8007d82 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007d7e:	2303      	movs	r3, #3
 8007d80:	e077      	b.n	8007e72 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007d82:	4b3e      	ldr	r3, [pc, #248]	; (8007e7c <RCCEx_PLL3_Config+0x128>)
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1f0      	bne.n	8007d70 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007d8e:	4b3b      	ldr	r3, [pc, #236]	; (8007e7c <RCCEx_PLL3_Config+0x128>)
 8007d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d92:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007d96:	f023 0303 	bic.w	r3, r3, #3
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	6811      	ldr	r1, [r2, #0]
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	6852      	ldr	r2, [r2, #4]
 8007da2:	3a01      	subs	r2, #1
 8007da4:	0212      	lsls	r2, r2, #8
 8007da6:	430a      	orrs	r2, r1
 8007da8:	4934      	ldr	r1, [pc, #208]	; (8007e7c <RCCEx_PLL3_Config+0x128>)
 8007daa:	4313      	orrs	r3, r2
 8007dac:	630b      	str	r3, [r1, #48]	; 0x30
 8007dae:	4b33      	ldr	r3, [pc, #204]	; (8007e7c <RCCEx_PLL3_Config+0x128>)
 8007db0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007db2:	4b33      	ldr	r3, [pc, #204]	; (8007e80 <RCCEx_PLL3_Config+0x12c>)
 8007db4:	4013      	ands	r3, r2
 8007db6:	687a      	ldr	r2, [r7, #4]
 8007db8:	6892      	ldr	r2, [r2, #8]
 8007dba:	3a01      	subs	r2, #1
 8007dbc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007dc0:	687a      	ldr	r2, [r7, #4]
 8007dc2:	68d2      	ldr	r2, [r2, #12]
 8007dc4:	3a01      	subs	r2, #1
 8007dc6:	0252      	lsls	r2, r2, #9
 8007dc8:	b292      	uxth	r2, r2
 8007dca:	4311      	orrs	r1, r2
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	6912      	ldr	r2, [r2, #16]
 8007dd0:	3a01      	subs	r2, #1
 8007dd2:	0412      	lsls	r2, r2, #16
 8007dd4:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007dd8:	4311      	orrs	r1, r2
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	6952      	ldr	r2, [r2, #20]
 8007dde:	3a01      	subs	r2, #1
 8007de0:	0612      	lsls	r2, r2, #24
 8007de2:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007de6:	430a      	orrs	r2, r1
 8007de8:	4924      	ldr	r1, [pc, #144]	; (8007e7c <RCCEx_PLL3_Config+0x128>)
 8007dea:	4313      	orrs	r3, r2
 8007dec:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007dee:	4b23      	ldr	r3, [pc, #140]	; (8007e7c <RCCEx_PLL3_Config+0x128>)
 8007df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df2:	f023 020c 	bic.w	r2, r3, #12
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	699b      	ldr	r3, [r3, #24]
 8007dfa:	4920      	ldr	r1, [pc, #128]	; (8007e7c <RCCEx_PLL3_Config+0x128>)
 8007dfc:	4313      	orrs	r3, r2
 8007dfe:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007e00:	4b1e      	ldr	r3, [pc, #120]	; (8007e7c <RCCEx_PLL3_Config+0x128>)
 8007e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6a1b      	ldr	r3, [r3, #32]
 8007e08:	491c      	ldr	r1, [pc, #112]	; (8007e7c <RCCEx_PLL3_Config+0x128>)
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007e0e:	4b1b      	ldr	r3, [pc, #108]	; (8007e7c <RCCEx_PLL3_Config+0x128>)
 8007e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e12:	4a1a      	ldr	r2, [pc, #104]	; (8007e7c <RCCEx_PLL3_Config+0x128>)
 8007e14:	f023 0310 	bic.w	r3, r3, #16
 8007e18:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007e1a:	4b18      	ldr	r3, [pc, #96]	; (8007e7c <RCCEx_PLL3_Config+0x128>)
 8007e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e22:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007e26:	687a      	ldr	r2, [r7, #4]
 8007e28:	69d2      	ldr	r2, [r2, #28]
 8007e2a:	00d2      	lsls	r2, r2, #3
 8007e2c:	4913      	ldr	r1, [pc, #76]	; (8007e7c <RCCEx_PLL3_Config+0x128>)
 8007e2e:	4313      	orrs	r3, r2
 8007e30:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007e32:	4b12      	ldr	r3, [pc, #72]	; (8007e7c <RCCEx_PLL3_Config+0x128>)
 8007e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e36:	4a11      	ldr	r2, [pc, #68]	; (8007e7c <RCCEx_PLL3_Config+0x128>)
 8007e38:	f043 0310 	orr.w	r3, r3, #16
 8007e3c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007e3e:	4b0f      	ldr	r3, [pc, #60]	; (8007e7c <RCCEx_PLL3_Config+0x128>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a0e      	ldr	r2, [pc, #56]	; (8007e7c <RCCEx_PLL3_Config+0x128>)
 8007e44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e48:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007e4a:	f7fa f8f9 	bl	8002040 <HAL_GetTick>
 8007e4e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e50:	e008      	b.n	8007e64 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007e52:	f7fa f8f5 	bl	8002040 <HAL_GetTick>
 8007e56:	4602      	mov	r2, r0
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	1ad3      	subs	r3, r2, r3
 8007e5c:	2b02      	cmp	r3, #2
 8007e5e:	d901      	bls.n	8007e64 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007e60:	2303      	movs	r3, #3
 8007e62:	e006      	b.n	8007e72 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e64:	4b05      	ldr	r3, [pc, #20]	; (8007e7c <RCCEx_PLL3_Config+0x128>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d0f0      	beq.n	8007e52 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	46020c00 	.word	0x46020c00
 8007e80:	80800000 	.word	0x80800000

08007e84 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b084      	sub	sp, #16
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d101      	bne.n	8007e96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e0dd      	b.n	8008052 <HAL_SPI_Init+0x1ce>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a70      	ldr	r2, [pc, #448]	; (800805c <HAL_SPI_Init+0x1d8>)
 8007e9c:	4293      	cmp	r3, r2
 8007e9e:	d004      	beq.n	8007eaa <HAL_SPI_Init+0x26>
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a6e      	ldr	r2, [pc, #440]	; (8008060 <HAL_SPI_Init+0x1dc>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	e000      	b.n	8007eac <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8007eaa:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	629a      	str	r2, [r3, #40]	; 0x28

  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a69      	ldr	r2, [pc, #420]	; (800805c <HAL_SPI_Init+0x1d8>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d004      	beq.n	8007ec6 <HAL_SPI_Init+0x42>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a67      	ldr	r2, [pc, #412]	; (8008060 <HAL_SPI_Init+0x1dc>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d105      	bne.n	8007ed2 <HAL_SPI_Init+0x4e>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	2b0f      	cmp	r3, #15
 8007ecc:	d901      	bls.n	8007ed2 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e0bf      	b.n	8008052 <HAL_SPI_Init+0x1ce>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f8ce 	bl	8008074 <SPI_GetPacketSize>
 8007ed8:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a5f      	ldr	r2, [pc, #380]	; (800805c <HAL_SPI_Init+0x1d8>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d004      	beq.n	8007eee <HAL_SPI_Init+0x6a>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a5d      	ldr	r2, [pc, #372]	; (8008060 <HAL_SPI_Init+0x1dc>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d102      	bne.n	8007ef4 <HAL_SPI_Init+0x70>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2b08      	cmp	r3, #8
 8007ef2:	d816      	bhi.n	8007f22 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007ef8:	4a5a      	ldr	r2, [pc, #360]	; (8008064 <HAL_SPI_Init+0x1e0>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d00e      	beq.n	8007f1c <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a59      	ldr	r2, [pc, #356]	; (8008068 <HAL_SPI_Init+0x1e4>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d009      	beq.n	8007f1c <HAL_SPI_Init+0x98>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a57      	ldr	r2, [pc, #348]	; (800806c <HAL_SPI_Init+0x1e8>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d004      	beq.n	8007f1c <HAL_SPI_Init+0x98>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a56      	ldr	r2, [pc, #344]	; (8008070 <HAL_SPI_Init+0x1ec>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d104      	bne.n	8007f26 <HAL_SPI_Init+0xa2>
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	2b10      	cmp	r3, #16
 8007f20:	d901      	bls.n	8007f26 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e095      	b.n	8008052 <HAL_SPI_Init+0x1ce>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d106      	bne.n	8007f40 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7f9 fd3c 	bl	80019b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2202      	movs	r2, #2
 8007f44:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	681a      	ldr	r2, [r3, #0]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f022 0201 	bic.w	r2, r2, #1
 8007f56:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007f62:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	699b      	ldr	r3, [r3, #24]
 8007f68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007f6c:	d119      	bne.n	8007fa2 <HAL_SPI_Init+0x11e>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f76:	d103      	bne.n	8007f80 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d008      	beq.n	8007f92 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d10c      	bne.n	8007fa2 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007f8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f90:	d107      	bne.n	8007fa2 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	681a      	ldr	r2, [r3, #0]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007fa0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	69da      	ldr	r2, [r3, #28]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007faa:	431a      	orrs	r2, r3
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	431a      	orrs	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fb4:	ea42 0103 	orr.w	r1, r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	68da      	ldr	r2, [r3, #12]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	430a      	orrs	r2, r1
 8007fc2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fcc:	431a      	orrs	r2, r3
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd2:	431a      	orrs	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	431a      	orrs	r2, r3
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	691b      	ldr	r3, [r3, #16]
 8007fde:	431a      	orrs	r2, r3
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	695b      	ldr	r3, [r3, #20]
 8007fe4:	431a      	orrs	r2, r3
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6a1b      	ldr	r3, [r3, #32]
 8007fea:	431a      	orrs	r2, r3
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	431a      	orrs	r2, r3
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ff6:	431a      	orrs	r2, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	431a      	orrs	r2, r3
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008002:	431a      	orrs	r2, r3
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008008:	431a      	orrs	r2, r3
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800800e:	ea42 0103 	orr.w	r1, r2, r3
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	430a      	orrs	r2, r1
 800801c:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00a      	beq.n	8008040 <HAL_SPI_Init+0x1bc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	430a      	orrs	r2, r1
 800803e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8008050:	2300      	movs	r3, #0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}
 800805a:	bf00      	nop
 800805c:	46002000 	.word	0x46002000
 8008060:	56002000 	.word	0x56002000
 8008064:	40013000 	.word	0x40013000
 8008068:	50013000 	.word	0x50013000
 800806c:	40003800 	.word	0x40003800
 8008070:	50003800 	.word	0x50003800

08008074 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008074:	b480      	push	{r7}
 8008076:	b085      	sub	sp, #20
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008080:	095b      	lsrs	r3, r3, #5
 8008082:	3301      	adds	r3, #1
 8008084:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	3301      	adds	r3, #1
 800808c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	3307      	adds	r3, #7
 8008092:	08db      	lsrs	r3, r3, #3
 8008094:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	fb02 f303 	mul.w	r3, r2, r3
}
 800809e:	4618      	mov	r0, r3
 80080a0:	3714      	adds	r7, #20
 80080a2:	46bd      	mov	sp, r7
 80080a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a8:	4770      	bx	lr

080080aa <HAL_SPIEx_SetConfigAutonomousMode>:
  * @param  sConfig Pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi, SPI_AutonomousModeConfTypeDef *sConfig)
{
 80080aa:	b480      	push	{r7}
 80080ac:	b083      	sub	sp, #12
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 80080ba:	b2db      	uxtb	r3, r3
 80080bc:	2b01      	cmp	r3, #1
 80080be:	d12e      	bne.n	800811e <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d101      	bne.n	80080ce <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 80080ca:	2302      	movs	r3, #2
 80080cc:	e028      	b.n	8008120 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2202      	movs	r2, #2
 80080da:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));

    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f022 0201 	bic.w	r2, r2, #1
 80080ec:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	681a      	ldr	r2, [r3, #0]
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	685b      	ldr	r3, [r3, #4]
 80080f6:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80080fa:	ea42 0103 	orr.w	r1, r2, r3
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	689a      	ldr	r2, [r3, #8]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	430a      	orrs	r2, r1
 8008108:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2201      	movs	r2, #1
 800810e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800811a:	2300      	movs	r3, #0
 800811c:	e000      	b.n	8008120 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800811e:	2301      	movs	r3, #1
  }
}
 8008120:	4618      	mov	r0, r3
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800812c:	b480      	push	{r7}
 800812e:	b085      	sub	sp, #20
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800813a:	b2db      	uxtb	r3, r3
 800813c:	2b01      	cmp	r3, #1
 800813e:	d001      	beq.n	8008144 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008140:	2301      	movs	r3, #1
 8008142:	e06a      	b.n	800821a <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2202      	movs	r2, #2
 8008148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a35      	ldr	r2, [pc, #212]	; (8008228 <HAL_TIM_Base_Start+0xfc>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d040      	beq.n	80081d8 <HAL_TIM_Base_Start+0xac>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a34      	ldr	r2, [pc, #208]	; (800822c <HAL_TIM_Base_Start+0x100>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d03b      	beq.n	80081d8 <HAL_TIM_Base_Start+0xac>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008168:	d036      	beq.n	80081d8 <HAL_TIM_Base_Start+0xac>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008172:	d031      	beq.n	80081d8 <HAL_TIM_Base_Start+0xac>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a2d      	ldr	r2, [pc, #180]	; (8008230 <HAL_TIM_Base_Start+0x104>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d02c      	beq.n	80081d8 <HAL_TIM_Base_Start+0xac>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a2c      	ldr	r2, [pc, #176]	; (8008234 <HAL_TIM_Base_Start+0x108>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d027      	beq.n	80081d8 <HAL_TIM_Base_Start+0xac>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a2a      	ldr	r2, [pc, #168]	; (8008238 <HAL_TIM_Base_Start+0x10c>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d022      	beq.n	80081d8 <HAL_TIM_Base_Start+0xac>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a29      	ldr	r2, [pc, #164]	; (800823c <HAL_TIM_Base_Start+0x110>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d01d      	beq.n	80081d8 <HAL_TIM_Base_Start+0xac>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a27      	ldr	r2, [pc, #156]	; (8008240 <HAL_TIM_Base_Start+0x114>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d018      	beq.n	80081d8 <HAL_TIM_Base_Start+0xac>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a26      	ldr	r2, [pc, #152]	; (8008244 <HAL_TIM_Base_Start+0x118>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d013      	beq.n	80081d8 <HAL_TIM_Base_Start+0xac>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a24      	ldr	r2, [pc, #144]	; (8008248 <HAL_TIM_Base_Start+0x11c>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d00e      	beq.n	80081d8 <HAL_TIM_Base_Start+0xac>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a23      	ldr	r2, [pc, #140]	; (800824c <HAL_TIM_Base_Start+0x120>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d009      	beq.n	80081d8 <HAL_TIM_Base_Start+0xac>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a21      	ldr	r2, [pc, #132]	; (8008250 <HAL_TIM_Base_Start+0x124>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d004      	beq.n	80081d8 <HAL_TIM_Base_Start+0xac>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a20      	ldr	r2, [pc, #128]	; (8008254 <HAL_TIM_Base_Start+0x128>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d115      	bne.n	8008204 <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	689a      	ldr	r2, [r3, #8]
 80081de:	4b1e      	ldr	r3, [pc, #120]	; (8008258 <HAL_TIM_Base_Start+0x12c>)
 80081e0:	4013      	ands	r3, r2
 80081e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2b06      	cmp	r3, #6
 80081e8:	d015      	beq.n	8008216 <HAL_TIM_Base_Start+0xea>
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081f0:	d011      	beq.n	8008216 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f042 0201 	orr.w	r2, r2, #1
 8008200:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008202:	e008      	b.n	8008216 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f042 0201 	orr.w	r2, r2, #1
 8008212:	601a      	str	r2, [r3, #0]
 8008214:	e000      	b.n	8008218 <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008216:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008218:	2300      	movs	r3, #0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3714      	adds	r7, #20
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr
 8008226:	bf00      	nop
 8008228:	40012c00 	.word	0x40012c00
 800822c:	50012c00 	.word	0x50012c00
 8008230:	40000400 	.word	0x40000400
 8008234:	50000400 	.word	0x50000400
 8008238:	40000800 	.word	0x40000800
 800823c:	50000800 	.word	0x50000800
 8008240:	40000c00 	.word	0x40000c00
 8008244:	50000c00 	.word	0x50000c00
 8008248:	40013400 	.word	0x40013400
 800824c:	50013400 	.word	0x50013400
 8008250:	40014000 	.word	0x40014000
 8008254:	50014000 	.word	0x50014000
 8008258:	00010007 	.word	0x00010007

0800825c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d101      	bne.n	800826e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800826a:	2301      	movs	r3, #1
 800826c:	e049      	b.n	8008302 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008274:	b2db      	uxtb	r3, r3
 8008276:	2b00      	cmp	r3, #0
 8008278:	d106      	bne.n	8008288 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f7f9 fc28 	bl	8001ad8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2202      	movs	r2, #2
 800828c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	3304      	adds	r3, #4
 8008298:	4619      	mov	r1, r3
 800829a:	4610      	mov	r0, r2
 800829c:	f000 fc4e 	bl	8008b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008300:	2300      	movs	r3, #0
}
 8008302:	4618      	mov	r0, r3
 8008304:	3708      	adds	r7, #8
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
	...

0800830c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b084      	sub	sp, #16
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d109      	bne.n	8008330 <HAL_TIM_PWM_Start+0x24>
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008322:	b2db      	uxtb	r3, r3
 8008324:	2b01      	cmp	r3, #1
 8008326:	bf14      	ite	ne
 8008328:	2301      	movne	r3, #1
 800832a:	2300      	moveq	r3, #0
 800832c:	b2db      	uxtb	r3, r3
 800832e:	e03c      	b.n	80083aa <HAL_TIM_PWM_Start+0x9e>
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	2b04      	cmp	r3, #4
 8008334:	d109      	bne.n	800834a <HAL_TIM_PWM_Start+0x3e>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800833c:	b2db      	uxtb	r3, r3
 800833e:	2b01      	cmp	r3, #1
 8008340:	bf14      	ite	ne
 8008342:	2301      	movne	r3, #1
 8008344:	2300      	moveq	r3, #0
 8008346:	b2db      	uxtb	r3, r3
 8008348:	e02f      	b.n	80083aa <HAL_TIM_PWM_Start+0x9e>
 800834a:	683b      	ldr	r3, [r7, #0]
 800834c:	2b08      	cmp	r3, #8
 800834e:	d109      	bne.n	8008364 <HAL_TIM_PWM_Start+0x58>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008356:	b2db      	uxtb	r3, r3
 8008358:	2b01      	cmp	r3, #1
 800835a:	bf14      	ite	ne
 800835c:	2301      	movne	r3, #1
 800835e:	2300      	moveq	r3, #0
 8008360:	b2db      	uxtb	r3, r3
 8008362:	e022      	b.n	80083aa <HAL_TIM_PWM_Start+0x9e>
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	2b0c      	cmp	r3, #12
 8008368:	d109      	bne.n	800837e <HAL_TIM_PWM_Start+0x72>
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008370:	b2db      	uxtb	r3, r3
 8008372:	2b01      	cmp	r3, #1
 8008374:	bf14      	ite	ne
 8008376:	2301      	movne	r3, #1
 8008378:	2300      	moveq	r3, #0
 800837a:	b2db      	uxtb	r3, r3
 800837c:	e015      	b.n	80083aa <HAL_TIM_PWM_Start+0x9e>
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	2b10      	cmp	r3, #16
 8008382:	d109      	bne.n	8008398 <HAL_TIM_PWM_Start+0x8c>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800838a:	b2db      	uxtb	r3, r3
 800838c:	2b01      	cmp	r3, #1
 800838e:	bf14      	ite	ne
 8008390:	2301      	movne	r3, #1
 8008392:	2300      	moveq	r3, #0
 8008394:	b2db      	uxtb	r3, r3
 8008396:	e008      	b.n	80083aa <HAL_TIM_PWM_Start+0x9e>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	bf14      	ite	ne
 80083a4:	2301      	movne	r3, #1
 80083a6:	2300      	moveq	r3, #0
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d001      	beq.n	80083b2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80083ae:	2301      	movs	r3, #1
 80083b0:	e0d8      	b.n	8008564 <HAL_TIM_PWM_Start+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d104      	bne.n	80083c2 <HAL_TIM_PWM_Start+0xb6>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2202      	movs	r2, #2
 80083bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083c0:	e023      	b.n	800840a <HAL_TIM_PWM_Start+0xfe>
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	2b04      	cmp	r3, #4
 80083c6:	d104      	bne.n	80083d2 <HAL_TIM_PWM_Start+0xc6>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2202      	movs	r2, #2
 80083cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083d0:	e01b      	b.n	800840a <HAL_TIM_PWM_Start+0xfe>
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	2b08      	cmp	r3, #8
 80083d6:	d104      	bne.n	80083e2 <HAL_TIM_PWM_Start+0xd6>
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2202      	movs	r2, #2
 80083dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083e0:	e013      	b.n	800840a <HAL_TIM_PWM_Start+0xfe>
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	2b0c      	cmp	r3, #12
 80083e6:	d104      	bne.n	80083f2 <HAL_TIM_PWM_Start+0xe6>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2202      	movs	r2, #2
 80083ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80083f0:	e00b      	b.n	800840a <HAL_TIM_PWM_Start+0xfe>
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	2b10      	cmp	r3, #16
 80083f6:	d104      	bne.n	8008402 <HAL_TIM_PWM_Start+0xf6>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2202      	movs	r2, #2
 80083fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008400:	e003      	b.n	800840a <HAL_TIM_PWM_Start+0xfe>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2202      	movs	r2, #2
 8008406:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2201      	movs	r2, #1
 8008410:	6839      	ldr	r1, [r7, #0]
 8008412:	4618      	mov	r0, r3
 8008414:	f001 f862 	bl	80094dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a53      	ldr	r2, [pc, #332]	; (800856c <HAL_TIM_PWM_Start+0x260>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d02c      	beq.n	800847c <HAL_TIM_PWM_Start+0x170>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a52      	ldr	r2, [pc, #328]	; (8008570 <HAL_TIM_PWM_Start+0x264>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d027      	beq.n	800847c <HAL_TIM_PWM_Start+0x170>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a50      	ldr	r2, [pc, #320]	; (8008574 <HAL_TIM_PWM_Start+0x268>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d022      	beq.n	800847c <HAL_TIM_PWM_Start+0x170>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a4f      	ldr	r2, [pc, #316]	; (8008578 <HAL_TIM_PWM_Start+0x26c>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d01d      	beq.n	800847c <HAL_TIM_PWM_Start+0x170>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	4a4d      	ldr	r2, [pc, #308]	; (800857c <HAL_TIM_PWM_Start+0x270>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d018      	beq.n	800847c <HAL_TIM_PWM_Start+0x170>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	4a4c      	ldr	r2, [pc, #304]	; (8008580 <HAL_TIM_PWM_Start+0x274>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d013      	beq.n	800847c <HAL_TIM_PWM_Start+0x170>
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4a4a      	ldr	r2, [pc, #296]	; (8008584 <HAL_TIM_PWM_Start+0x278>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d00e      	beq.n	800847c <HAL_TIM_PWM_Start+0x170>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4a49      	ldr	r2, [pc, #292]	; (8008588 <HAL_TIM_PWM_Start+0x27c>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d009      	beq.n	800847c <HAL_TIM_PWM_Start+0x170>
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a47      	ldr	r2, [pc, #284]	; (800858c <HAL_TIM_PWM_Start+0x280>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d004      	beq.n	800847c <HAL_TIM_PWM_Start+0x170>
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	4a46      	ldr	r2, [pc, #280]	; (8008590 <HAL_TIM_PWM_Start+0x284>)
 8008478:	4293      	cmp	r3, r2
 800847a:	d101      	bne.n	8008480 <HAL_TIM_PWM_Start+0x174>
 800847c:	2301      	movs	r3, #1
 800847e:	e000      	b.n	8008482 <HAL_TIM_PWM_Start+0x176>
 8008480:	2300      	movs	r3, #0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d007      	beq.n	8008496 <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008494:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	4a34      	ldr	r2, [pc, #208]	; (800856c <HAL_TIM_PWM_Start+0x260>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d040      	beq.n	8008522 <HAL_TIM_PWM_Start+0x216>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	4a32      	ldr	r2, [pc, #200]	; (8008570 <HAL_TIM_PWM_Start+0x264>)
 80084a6:	4293      	cmp	r3, r2
 80084a8:	d03b      	beq.n	8008522 <HAL_TIM_PWM_Start+0x216>
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084b2:	d036      	beq.n	8008522 <HAL_TIM_PWM_Start+0x216>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80084bc:	d031      	beq.n	8008522 <HAL_TIM_PWM_Start+0x216>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a34      	ldr	r2, [pc, #208]	; (8008594 <HAL_TIM_PWM_Start+0x288>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d02c      	beq.n	8008522 <HAL_TIM_PWM_Start+0x216>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a32      	ldr	r2, [pc, #200]	; (8008598 <HAL_TIM_PWM_Start+0x28c>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d027      	beq.n	8008522 <HAL_TIM_PWM_Start+0x216>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a31      	ldr	r2, [pc, #196]	; (800859c <HAL_TIM_PWM_Start+0x290>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d022      	beq.n	8008522 <HAL_TIM_PWM_Start+0x216>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a2f      	ldr	r2, [pc, #188]	; (80085a0 <HAL_TIM_PWM_Start+0x294>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d01d      	beq.n	8008522 <HAL_TIM_PWM_Start+0x216>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a2e      	ldr	r2, [pc, #184]	; (80085a4 <HAL_TIM_PWM_Start+0x298>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d018      	beq.n	8008522 <HAL_TIM_PWM_Start+0x216>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a2c      	ldr	r2, [pc, #176]	; (80085a8 <HAL_TIM_PWM_Start+0x29c>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d013      	beq.n	8008522 <HAL_TIM_PWM_Start+0x216>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a1d      	ldr	r2, [pc, #116]	; (8008574 <HAL_TIM_PWM_Start+0x268>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d00e      	beq.n	8008522 <HAL_TIM_PWM_Start+0x216>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a1b      	ldr	r2, [pc, #108]	; (8008578 <HAL_TIM_PWM_Start+0x26c>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d009      	beq.n	8008522 <HAL_TIM_PWM_Start+0x216>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a1a      	ldr	r2, [pc, #104]	; (800857c <HAL_TIM_PWM_Start+0x270>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d004      	beq.n	8008522 <HAL_TIM_PWM_Start+0x216>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a18      	ldr	r2, [pc, #96]	; (8008580 <HAL_TIM_PWM_Start+0x274>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d115      	bne.n	800854e <HAL_TIM_PWM_Start+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	689a      	ldr	r2, [r3, #8]
 8008528:	4b20      	ldr	r3, [pc, #128]	; (80085ac <HAL_TIM_PWM_Start+0x2a0>)
 800852a:	4013      	ands	r3, r2
 800852c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2b06      	cmp	r3, #6
 8008532:	d015      	beq.n	8008560 <HAL_TIM_PWM_Start+0x254>
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800853a:	d011      	beq.n	8008560 <HAL_TIM_PWM_Start+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	681a      	ldr	r2, [r3, #0]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f042 0201 	orr.w	r2, r2, #1
 800854a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800854c:	e008      	b.n	8008560 <HAL_TIM_PWM_Start+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	681a      	ldr	r2, [r3, #0]
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	f042 0201 	orr.w	r2, r2, #1
 800855c:	601a      	str	r2, [r3, #0]
 800855e:	e000      	b.n	8008562 <HAL_TIM_PWM_Start+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008560:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	40012c00 	.word	0x40012c00
 8008570:	50012c00 	.word	0x50012c00
 8008574:	40013400 	.word	0x40013400
 8008578:	50013400 	.word	0x50013400
 800857c:	40014000 	.word	0x40014000
 8008580:	50014000 	.word	0x50014000
 8008584:	40014400 	.word	0x40014400
 8008588:	50014400 	.word	0x50014400
 800858c:	40014800 	.word	0x40014800
 8008590:	50014800 	.word	0x50014800
 8008594:	40000400 	.word	0x40000400
 8008598:	50000400 	.word	0x50000400
 800859c:	40000800 	.word	0x40000800
 80085a0:	50000800 	.word	0x50000800
 80085a4:	40000c00 	.word	0x40000c00
 80085a8:	50000c00 	.word	0x50000c00
 80085ac:	00010007 	.word	0x00010007

080085b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	691b      	ldr	r3, [r3, #16]
 80085be:	f003 0302 	and.w	r3, r3, #2
 80085c2:	2b02      	cmp	r3, #2
 80085c4:	d122      	bne.n	800860c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	68db      	ldr	r3, [r3, #12]
 80085cc:	f003 0302 	and.w	r3, r3, #2
 80085d0:	2b02      	cmp	r3, #2
 80085d2:	d11b      	bne.n	800860c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f06f 0202 	mvn.w	r2, #2
 80085dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2201      	movs	r2, #1
 80085e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	f003 0303 	and.w	r3, r3, #3
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d003      	beq.n	80085fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 fa84 	bl	8008b00 <HAL_TIM_IC_CaptureCallback>
 80085f8:	e005      	b.n	8008606 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 fa76 	bl	8008aec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 fa87 	bl	8008b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	691b      	ldr	r3, [r3, #16]
 8008612:	f003 0304 	and.w	r3, r3, #4
 8008616:	2b04      	cmp	r3, #4
 8008618:	d122      	bne.n	8008660 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	f003 0304 	and.w	r3, r3, #4
 8008624:	2b04      	cmp	r3, #4
 8008626:	d11b      	bne.n	8008660 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	f06f 0204 	mvn.w	r2, #4
 8008630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2202      	movs	r2, #2
 8008636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	699b      	ldr	r3, [r3, #24]
 800863e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008642:	2b00      	cmp	r3, #0
 8008644:	d003      	beq.n	800864e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fa5a 	bl	8008b00 <HAL_TIM_IC_CaptureCallback>
 800864c:	e005      	b.n	800865a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 fa4c 	bl	8008aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 fa5d 	bl	8008b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2200      	movs	r2, #0
 800865e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	691b      	ldr	r3, [r3, #16]
 8008666:	f003 0308 	and.w	r3, r3, #8
 800866a:	2b08      	cmp	r3, #8
 800866c:	d122      	bne.n	80086b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68db      	ldr	r3, [r3, #12]
 8008674:	f003 0308 	and.w	r3, r3, #8
 8008678:	2b08      	cmp	r3, #8
 800867a:	d11b      	bne.n	80086b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f06f 0208 	mvn.w	r2, #8
 8008684:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	2204      	movs	r2, #4
 800868a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	69db      	ldr	r3, [r3, #28]
 8008692:	f003 0303 	and.w	r3, r3, #3
 8008696:	2b00      	cmp	r3, #0
 8008698:	d003      	beq.n	80086a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f000 fa30 	bl	8008b00 <HAL_TIM_IC_CaptureCallback>
 80086a0:	e005      	b.n	80086ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 fa22 	bl	8008aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086a8:	6878      	ldr	r0, [r7, #4]
 80086aa:	f000 fa33 	bl	8008b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2200      	movs	r2, #0
 80086b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	f003 0310 	and.w	r3, r3, #16
 80086be:	2b10      	cmp	r3, #16
 80086c0:	d122      	bne.n	8008708 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	f003 0310 	and.w	r3, r3, #16
 80086cc:	2b10      	cmp	r3, #16
 80086ce:	d11b      	bne.n	8008708 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f06f 0210 	mvn.w	r2, #16
 80086d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2208      	movs	r2, #8
 80086de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	69db      	ldr	r3, [r3, #28]
 80086e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d003      	beq.n	80086f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 fa06 	bl	8008b00 <HAL_TIM_IC_CaptureCallback>
 80086f4:	e005      	b.n	8008702 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 f9f8 	bl	8008aec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 fa09 	bl	8008b14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	f003 0301 	and.w	r3, r3, #1
 8008712:	2b01      	cmp	r3, #1
 8008714:	d10e      	bne.n	8008734 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	f003 0301 	and.w	r3, r3, #1
 8008720:	2b01      	cmp	r3, #1
 8008722:	d107      	bne.n	8008734 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f06f 0201 	mvn.w	r2, #1
 800872c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 f9d2 	bl	8008ad8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800873e:	2b80      	cmp	r3, #128	; 0x80
 8008740:	d10e      	bne.n	8008760 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	68db      	ldr	r3, [r3, #12]
 8008748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800874c:	2b80      	cmp	r3, #128	; 0x80
 800874e:	d107      	bne.n	8008760 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 ffb0 	bl	80096c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800876a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800876e:	d10e      	bne.n	800878e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800877a:	2b80      	cmp	r3, #128	; 0x80
 800877c:	d107      	bne.n	800878e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 ffa3 	bl	80096d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	691b      	ldr	r3, [r3, #16]
 8008794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008798:	2b40      	cmp	r3, #64	; 0x40
 800879a:	d10e      	bne.n	80087ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a6:	2b40      	cmp	r3, #64	; 0x40
 80087a8:	d107      	bne.n	80087ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80087b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f000 f9b7 	bl	8008b28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	691b      	ldr	r3, [r3, #16]
 80087c0:	f003 0320 	and.w	r3, r3, #32
 80087c4:	2b20      	cmp	r3, #32
 80087c6:	d10e      	bne.n	80087e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	f003 0320 	and.w	r3, r3, #32
 80087d2:	2b20      	cmp	r3, #32
 80087d4:	d107      	bne.n	80087e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f06f 0220 	mvn.w	r2, #32
 80087de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 ff63 	bl	80096ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	691b      	ldr	r3, [r3, #16]
 80087ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087f4:	d10f      	bne.n	8008816 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008800:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008804:	d107      	bne.n	8008816 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800880e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008810:	6878      	ldr	r0, [r7, #4]
 8008812:	f000 ff69 	bl	80096e8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	691b      	ldr	r3, [r3, #16]
 800881c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008820:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008824:	d10f      	bne.n	8008846 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008830:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008834:	d107      	bne.n	8008846 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800883e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008840:	6878      	ldr	r0, [r7, #4]
 8008842:	f000 ff5b 	bl	80096fc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008850:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008854:	d10f      	bne.n	8008876 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008860:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008864:	d107      	bne.n	8008876 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800886e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 ff4d 	bl	8009710 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	691b      	ldr	r3, [r3, #16]
 800887c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008880:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008884:	d10f      	bne.n	80088a6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	68db      	ldr	r3, [r3, #12]
 800888c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008890:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008894:	d107      	bne.n	80088a6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800889e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 ff3f 	bl	8009724 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088a6:	bf00      	nop
 80088a8:	3708      	adds	r7, #8
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
	...

080088b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b086      	sub	sp, #24
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088bc:	2300      	movs	r3, #0
 80088be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d101      	bne.n	80088ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80088ca:	2302      	movs	r3, #2
 80088cc:	e0ff      	b.n	8008ace <HAL_TIM_PWM_ConfigChannel+0x21e>
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2201      	movs	r2, #1
 80088d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2b14      	cmp	r3, #20
 80088da:	f200 80f0 	bhi.w	8008abe <HAL_TIM_PWM_ConfigChannel+0x20e>
 80088de:	a201      	add	r2, pc, #4	; (adr r2, 80088e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80088e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088e4:	08008939 	.word	0x08008939
 80088e8:	08008abf 	.word	0x08008abf
 80088ec:	08008abf 	.word	0x08008abf
 80088f0:	08008abf 	.word	0x08008abf
 80088f4:	08008979 	.word	0x08008979
 80088f8:	08008abf 	.word	0x08008abf
 80088fc:	08008abf 	.word	0x08008abf
 8008900:	08008abf 	.word	0x08008abf
 8008904:	080089bb 	.word	0x080089bb
 8008908:	08008abf 	.word	0x08008abf
 800890c:	08008abf 	.word	0x08008abf
 8008910:	08008abf 	.word	0x08008abf
 8008914:	080089fb 	.word	0x080089fb
 8008918:	08008abf 	.word	0x08008abf
 800891c:	08008abf 	.word	0x08008abf
 8008920:	08008abf 	.word	0x08008abf
 8008924:	08008a3d 	.word	0x08008a3d
 8008928:	08008abf 	.word	0x08008abf
 800892c:	08008abf 	.word	0x08008abf
 8008930:	08008abf 	.word	0x08008abf
 8008934:	08008a7d 	.word	0x08008a7d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	68b9      	ldr	r1, [r7, #8]
 800893e:	4618      	mov	r0, r3
 8008940:	f000 f9f6 	bl	8008d30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	699a      	ldr	r2, [r3, #24]
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f042 0208 	orr.w	r2, r2, #8
 8008952:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	699a      	ldr	r2, [r3, #24]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f022 0204 	bic.w	r2, r2, #4
 8008962:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	6999      	ldr	r1, [r3, #24]
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	691a      	ldr	r2, [r3, #16]
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	430a      	orrs	r2, r1
 8008974:	619a      	str	r2, [r3, #24]
      break;
 8008976:	e0a5      	b.n	8008ac4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	68b9      	ldr	r1, [r7, #8]
 800897e:	4618      	mov	r0, r3
 8008980:	f000 fa98 	bl	8008eb4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	699a      	ldr	r2, [r3, #24]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008992:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	699a      	ldr	r2, [r3, #24]
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	6999      	ldr	r1, [r3, #24]
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	021a      	lsls	r2, r3, #8
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	430a      	orrs	r2, r1
 80089b6:	619a      	str	r2, [r3, #24]
      break;
 80089b8:	e084      	b.n	8008ac4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	68b9      	ldr	r1, [r7, #8]
 80089c0:	4618      	mov	r0, r3
 80089c2:	f000 fb27 	bl	8009014 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	69da      	ldr	r2, [r3, #28]
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f042 0208 	orr.w	r2, r2, #8
 80089d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	69da      	ldr	r2, [r3, #28]
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f022 0204 	bic.w	r2, r2, #4
 80089e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	69d9      	ldr	r1, [r3, #28]
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	691a      	ldr	r2, [r3, #16]
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	430a      	orrs	r2, r1
 80089f6:	61da      	str	r2, [r3, #28]
      break;
 80089f8:	e064      	b.n	8008ac4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	68b9      	ldr	r1, [r7, #8]
 8008a00:	4618      	mov	r0, r3
 8008a02:	f000 fbb5 	bl	8009170 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	69da      	ldr	r2, [r3, #28]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	69da      	ldr	r2, [r3, #28]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	69d9      	ldr	r1, [r3, #28]
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	691b      	ldr	r3, [r3, #16]
 8008a30:	021a      	lsls	r2, r3, #8
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	430a      	orrs	r2, r1
 8008a38:	61da      	str	r2, [r3, #28]
      break;
 8008a3a:	e043      	b.n	8008ac4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	68b9      	ldr	r1, [r7, #8]
 8008a42:	4618      	mov	r0, r3
 8008a44:	f000 fc44 	bl	80092d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f042 0208 	orr.w	r2, r2, #8
 8008a56:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	f022 0204 	bic.w	r2, r2, #4
 8008a66:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	691a      	ldr	r2, [r3, #16]
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	430a      	orrs	r2, r1
 8008a78:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008a7a:	e023      	b.n	8008ac4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	68b9      	ldr	r1, [r7, #8]
 8008a82:	4618      	mov	r0, r3
 8008a84:	f000 fca6 	bl	80093d4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a96:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008aa6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008aae:	68bb      	ldr	r3, [r7, #8]
 8008ab0:	691b      	ldr	r3, [r3, #16]
 8008ab2:	021a      	lsls	r2, r3, #8
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	430a      	orrs	r2, r1
 8008aba:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008abc:	e002      	b.n	8008ac4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	75fb      	strb	r3, [r7, #23]
      break;
 8008ac2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3718      	adds	r7, #24
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop

08008ad8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008ae0:	bf00      	nop
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008af4:	bf00      	nop
 8008af6:	370c      	adds	r7, #12
 8008af8:	46bd      	mov	sp, r7
 8008afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afe:	4770      	bx	lr

08008b00 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b00:	b480      	push	{r7}
 8008b02:	b083      	sub	sp, #12
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b08:	bf00      	nop
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b14:	b480      	push	{r7}
 8008b16:	b083      	sub	sp, #12
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b1c:	bf00      	nop
 8008b1e:	370c      	adds	r7, #12
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr

08008b28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b28:	b480      	push	{r7}
 8008b2a:	b083      	sub	sp, #12
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b30:	bf00      	nop
 8008b32:	370c      	adds	r7, #12
 8008b34:	46bd      	mov	sp, r7
 8008b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3a:	4770      	bx	lr

08008b3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	b085      	sub	sp, #20
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	4a68      	ldr	r2, [pc, #416]	; (8008cf0 <TIM_Base_SetConfig+0x1b4>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d02b      	beq.n	8008bac <TIM_Base_SetConfig+0x70>
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4a67      	ldr	r2, [pc, #412]	; (8008cf4 <TIM_Base_SetConfig+0x1b8>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d027      	beq.n	8008bac <TIM_Base_SetConfig+0x70>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b62:	d023      	beq.n	8008bac <TIM_Base_SetConfig+0x70>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008b6a:	d01f      	beq.n	8008bac <TIM_Base_SetConfig+0x70>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4a62      	ldr	r2, [pc, #392]	; (8008cf8 <TIM_Base_SetConfig+0x1bc>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d01b      	beq.n	8008bac <TIM_Base_SetConfig+0x70>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4a61      	ldr	r2, [pc, #388]	; (8008cfc <TIM_Base_SetConfig+0x1c0>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d017      	beq.n	8008bac <TIM_Base_SetConfig+0x70>
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4a60      	ldr	r2, [pc, #384]	; (8008d00 <TIM_Base_SetConfig+0x1c4>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d013      	beq.n	8008bac <TIM_Base_SetConfig+0x70>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4a5f      	ldr	r2, [pc, #380]	; (8008d04 <TIM_Base_SetConfig+0x1c8>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d00f      	beq.n	8008bac <TIM_Base_SetConfig+0x70>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4a5e      	ldr	r2, [pc, #376]	; (8008d08 <TIM_Base_SetConfig+0x1cc>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d00b      	beq.n	8008bac <TIM_Base_SetConfig+0x70>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4a5d      	ldr	r2, [pc, #372]	; (8008d0c <TIM_Base_SetConfig+0x1d0>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d007      	beq.n	8008bac <TIM_Base_SetConfig+0x70>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a5c      	ldr	r2, [pc, #368]	; (8008d10 <TIM_Base_SetConfig+0x1d4>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d003      	beq.n	8008bac <TIM_Base_SetConfig+0x70>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4a5b      	ldr	r2, [pc, #364]	; (8008d14 <TIM_Base_SetConfig+0x1d8>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d108      	bne.n	8008bbe <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	68fa      	ldr	r2, [r7, #12]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	4a4b      	ldr	r2, [pc, #300]	; (8008cf0 <TIM_Base_SetConfig+0x1b4>)
 8008bc2:	4293      	cmp	r3, r2
 8008bc4:	d043      	beq.n	8008c4e <TIM_Base_SetConfig+0x112>
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	4a4a      	ldr	r2, [pc, #296]	; (8008cf4 <TIM_Base_SetConfig+0x1b8>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d03f      	beq.n	8008c4e <TIM_Base_SetConfig+0x112>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bd4:	d03b      	beq.n	8008c4e <TIM_Base_SetConfig+0x112>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bdc:	d037      	beq.n	8008c4e <TIM_Base_SetConfig+0x112>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4a45      	ldr	r2, [pc, #276]	; (8008cf8 <TIM_Base_SetConfig+0x1bc>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d033      	beq.n	8008c4e <TIM_Base_SetConfig+0x112>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	4a44      	ldr	r2, [pc, #272]	; (8008cfc <TIM_Base_SetConfig+0x1c0>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d02f      	beq.n	8008c4e <TIM_Base_SetConfig+0x112>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4a43      	ldr	r2, [pc, #268]	; (8008d00 <TIM_Base_SetConfig+0x1c4>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d02b      	beq.n	8008c4e <TIM_Base_SetConfig+0x112>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	4a42      	ldr	r2, [pc, #264]	; (8008d04 <TIM_Base_SetConfig+0x1c8>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d027      	beq.n	8008c4e <TIM_Base_SetConfig+0x112>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4a41      	ldr	r2, [pc, #260]	; (8008d08 <TIM_Base_SetConfig+0x1cc>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d023      	beq.n	8008c4e <TIM_Base_SetConfig+0x112>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a40      	ldr	r2, [pc, #256]	; (8008d0c <TIM_Base_SetConfig+0x1d0>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d01f      	beq.n	8008c4e <TIM_Base_SetConfig+0x112>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a3f      	ldr	r2, [pc, #252]	; (8008d10 <TIM_Base_SetConfig+0x1d4>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d01b      	beq.n	8008c4e <TIM_Base_SetConfig+0x112>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a3e      	ldr	r2, [pc, #248]	; (8008d14 <TIM_Base_SetConfig+0x1d8>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d017      	beq.n	8008c4e <TIM_Base_SetConfig+0x112>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a3d      	ldr	r2, [pc, #244]	; (8008d18 <TIM_Base_SetConfig+0x1dc>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d013      	beq.n	8008c4e <TIM_Base_SetConfig+0x112>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a3c      	ldr	r2, [pc, #240]	; (8008d1c <TIM_Base_SetConfig+0x1e0>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d00f      	beq.n	8008c4e <TIM_Base_SetConfig+0x112>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a3b      	ldr	r2, [pc, #236]	; (8008d20 <TIM_Base_SetConfig+0x1e4>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d00b      	beq.n	8008c4e <TIM_Base_SetConfig+0x112>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a3a      	ldr	r2, [pc, #232]	; (8008d24 <TIM_Base_SetConfig+0x1e8>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d007      	beq.n	8008c4e <TIM_Base_SetConfig+0x112>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4a39      	ldr	r2, [pc, #228]	; (8008d28 <TIM_Base_SetConfig+0x1ec>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d003      	beq.n	8008c4e <TIM_Base_SetConfig+0x112>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a38      	ldr	r2, [pc, #224]	; (8008d2c <TIM_Base_SetConfig+0x1f0>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d108      	bne.n	8008c60 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	4313      	orrs	r3, r2
 8008c5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	695b      	ldr	r3, [r3, #20]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	68fa      	ldr	r2, [r7, #12]
 8008c72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c74:	683b      	ldr	r3, [r7, #0]
 8008c76:	689a      	ldr	r2, [r3, #8]
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	681a      	ldr	r2, [r3, #0]
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	4a1a      	ldr	r2, [pc, #104]	; (8008cf0 <TIM_Base_SetConfig+0x1b4>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d023      	beq.n	8008cd4 <TIM_Base_SetConfig+0x198>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4a19      	ldr	r2, [pc, #100]	; (8008cf4 <TIM_Base_SetConfig+0x1b8>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d01f      	beq.n	8008cd4 <TIM_Base_SetConfig+0x198>
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	4a1e      	ldr	r2, [pc, #120]	; (8008d10 <TIM_Base_SetConfig+0x1d4>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d01b      	beq.n	8008cd4 <TIM_Base_SetConfig+0x198>
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4a1d      	ldr	r2, [pc, #116]	; (8008d14 <TIM_Base_SetConfig+0x1d8>)
 8008ca0:	4293      	cmp	r3, r2
 8008ca2:	d017      	beq.n	8008cd4 <TIM_Base_SetConfig+0x198>
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	4a1c      	ldr	r2, [pc, #112]	; (8008d18 <TIM_Base_SetConfig+0x1dc>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d013      	beq.n	8008cd4 <TIM_Base_SetConfig+0x198>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	4a1b      	ldr	r2, [pc, #108]	; (8008d1c <TIM_Base_SetConfig+0x1e0>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d00f      	beq.n	8008cd4 <TIM_Base_SetConfig+0x198>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	4a1a      	ldr	r2, [pc, #104]	; (8008d20 <TIM_Base_SetConfig+0x1e4>)
 8008cb8:	4293      	cmp	r3, r2
 8008cba:	d00b      	beq.n	8008cd4 <TIM_Base_SetConfig+0x198>
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	4a19      	ldr	r2, [pc, #100]	; (8008d24 <TIM_Base_SetConfig+0x1e8>)
 8008cc0:	4293      	cmp	r3, r2
 8008cc2:	d007      	beq.n	8008cd4 <TIM_Base_SetConfig+0x198>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	4a18      	ldr	r2, [pc, #96]	; (8008d28 <TIM_Base_SetConfig+0x1ec>)
 8008cc8:	4293      	cmp	r3, r2
 8008cca:	d003      	beq.n	8008cd4 <TIM_Base_SetConfig+0x198>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4a17      	ldr	r2, [pc, #92]	; (8008d2c <TIM_Base_SetConfig+0x1f0>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d103      	bne.n	8008cdc <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	691a      	ldr	r2, [r3, #16]
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	615a      	str	r2, [r3, #20]
}
 8008ce2:	bf00      	nop
 8008ce4:	3714      	adds	r7, #20
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
 8008cee:	bf00      	nop
 8008cf0:	40012c00 	.word	0x40012c00
 8008cf4:	50012c00 	.word	0x50012c00
 8008cf8:	40000400 	.word	0x40000400
 8008cfc:	50000400 	.word	0x50000400
 8008d00:	40000800 	.word	0x40000800
 8008d04:	50000800 	.word	0x50000800
 8008d08:	40000c00 	.word	0x40000c00
 8008d0c:	50000c00 	.word	0x50000c00
 8008d10:	40013400 	.word	0x40013400
 8008d14:	50013400 	.word	0x50013400
 8008d18:	40014000 	.word	0x40014000
 8008d1c:	50014000 	.word	0x50014000
 8008d20:	40014400 	.word	0x40014400
 8008d24:	50014400 	.word	0x50014400
 8008d28:	40014800 	.word	0x40014800
 8008d2c:	50014800 	.word	0x50014800

08008d30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b087      	sub	sp, #28
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6a1b      	ldr	r3, [r3, #32]
 8008d3e:	f023 0201 	bic.w	r2, r3, #1
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6a1b      	ldr	r3, [r3, #32]
 8008d4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	699b      	ldr	r3, [r3, #24]
 8008d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	f023 0303 	bic.w	r3, r3, #3
 8008d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	68fa      	ldr	r2, [r7, #12]
 8008d72:	4313      	orrs	r3, r2
 8008d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	f023 0302 	bic.w	r3, r3, #2
 8008d7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	697a      	ldr	r2, [r7, #20]
 8008d84:	4313      	orrs	r3, r2
 8008d86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	4a40      	ldr	r2, [pc, #256]	; (8008e8c <TIM_OC1_SetConfig+0x15c>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d023      	beq.n	8008dd8 <TIM_OC1_SetConfig+0xa8>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	4a3f      	ldr	r2, [pc, #252]	; (8008e90 <TIM_OC1_SetConfig+0x160>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d01f      	beq.n	8008dd8 <TIM_OC1_SetConfig+0xa8>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a3e      	ldr	r2, [pc, #248]	; (8008e94 <TIM_OC1_SetConfig+0x164>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d01b      	beq.n	8008dd8 <TIM_OC1_SetConfig+0xa8>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	4a3d      	ldr	r2, [pc, #244]	; (8008e98 <TIM_OC1_SetConfig+0x168>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d017      	beq.n	8008dd8 <TIM_OC1_SetConfig+0xa8>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	4a3c      	ldr	r2, [pc, #240]	; (8008e9c <TIM_OC1_SetConfig+0x16c>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d013      	beq.n	8008dd8 <TIM_OC1_SetConfig+0xa8>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4a3b      	ldr	r2, [pc, #236]	; (8008ea0 <TIM_OC1_SetConfig+0x170>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d00f      	beq.n	8008dd8 <TIM_OC1_SetConfig+0xa8>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	4a3a      	ldr	r2, [pc, #232]	; (8008ea4 <TIM_OC1_SetConfig+0x174>)
 8008dbc:	4293      	cmp	r3, r2
 8008dbe:	d00b      	beq.n	8008dd8 <TIM_OC1_SetConfig+0xa8>
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	4a39      	ldr	r2, [pc, #228]	; (8008ea8 <TIM_OC1_SetConfig+0x178>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d007      	beq.n	8008dd8 <TIM_OC1_SetConfig+0xa8>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	4a38      	ldr	r2, [pc, #224]	; (8008eac <TIM_OC1_SetConfig+0x17c>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d003      	beq.n	8008dd8 <TIM_OC1_SetConfig+0xa8>
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4a37      	ldr	r2, [pc, #220]	; (8008eb0 <TIM_OC1_SetConfig+0x180>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d10c      	bne.n	8008df2 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	f023 0308 	bic.w	r3, r3, #8
 8008dde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	68db      	ldr	r3, [r3, #12]
 8008de4:	697a      	ldr	r2, [r7, #20]
 8008de6:	4313      	orrs	r3, r2
 8008de8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	f023 0304 	bic.w	r3, r3, #4
 8008df0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4a25      	ldr	r2, [pc, #148]	; (8008e8c <TIM_OC1_SetConfig+0x15c>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d023      	beq.n	8008e42 <TIM_OC1_SetConfig+0x112>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	4a24      	ldr	r2, [pc, #144]	; (8008e90 <TIM_OC1_SetConfig+0x160>)
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d01f      	beq.n	8008e42 <TIM_OC1_SetConfig+0x112>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a23      	ldr	r2, [pc, #140]	; (8008e94 <TIM_OC1_SetConfig+0x164>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d01b      	beq.n	8008e42 <TIM_OC1_SetConfig+0x112>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a22      	ldr	r2, [pc, #136]	; (8008e98 <TIM_OC1_SetConfig+0x168>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d017      	beq.n	8008e42 <TIM_OC1_SetConfig+0x112>
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	4a21      	ldr	r2, [pc, #132]	; (8008e9c <TIM_OC1_SetConfig+0x16c>)
 8008e16:	4293      	cmp	r3, r2
 8008e18:	d013      	beq.n	8008e42 <TIM_OC1_SetConfig+0x112>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	4a20      	ldr	r2, [pc, #128]	; (8008ea0 <TIM_OC1_SetConfig+0x170>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d00f      	beq.n	8008e42 <TIM_OC1_SetConfig+0x112>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	4a1f      	ldr	r2, [pc, #124]	; (8008ea4 <TIM_OC1_SetConfig+0x174>)
 8008e26:	4293      	cmp	r3, r2
 8008e28:	d00b      	beq.n	8008e42 <TIM_OC1_SetConfig+0x112>
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	4a1e      	ldr	r2, [pc, #120]	; (8008ea8 <TIM_OC1_SetConfig+0x178>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d007      	beq.n	8008e42 <TIM_OC1_SetConfig+0x112>
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	4a1d      	ldr	r2, [pc, #116]	; (8008eac <TIM_OC1_SetConfig+0x17c>)
 8008e36:	4293      	cmp	r3, r2
 8008e38:	d003      	beq.n	8008e42 <TIM_OC1_SetConfig+0x112>
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4a1c      	ldr	r2, [pc, #112]	; (8008eb0 <TIM_OC1_SetConfig+0x180>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d111      	bne.n	8008e66 <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	695b      	ldr	r3, [r3, #20]
 8008e56:	693a      	ldr	r2, [r7, #16]
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	699b      	ldr	r3, [r3, #24]
 8008e60:	693a      	ldr	r2, [r7, #16]
 8008e62:	4313      	orrs	r3, r2
 8008e64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	693a      	ldr	r2, [r7, #16]
 8008e6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	68fa      	ldr	r2, [r7, #12]
 8008e70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e72:	683b      	ldr	r3, [r7, #0]
 8008e74:	685a      	ldr	r2, [r3, #4]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	697a      	ldr	r2, [r7, #20]
 8008e7e:	621a      	str	r2, [r3, #32]
}
 8008e80:	bf00      	nop
 8008e82:	371c      	adds	r7, #28
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr
 8008e8c:	40012c00 	.word	0x40012c00
 8008e90:	50012c00 	.word	0x50012c00
 8008e94:	40013400 	.word	0x40013400
 8008e98:	50013400 	.word	0x50013400
 8008e9c:	40014000 	.word	0x40014000
 8008ea0:	50014000 	.word	0x50014000
 8008ea4:	40014400 	.word	0x40014400
 8008ea8:	50014400 	.word	0x50014400
 8008eac:	40014800 	.word	0x40014800
 8008eb0:	50014800 	.word	0x50014800

08008eb4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b087      	sub	sp, #28
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
 8008ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a1b      	ldr	r3, [r3, #32]
 8008ec2:	f023 0210 	bic.w	r2, r3, #16
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a1b      	ldr	r3, [r3, #32]
 8008ece:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	685b      	ldr	r3, [r3, #4]
 8008ed4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	699b      	ldr	r3, [r3, #24]
 8008eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008eee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	021b      	lsls	r3, r3, #8
 8008ef6:	68fa      	ldr	r2, [r7, #12]
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	f023 0320 	bic.w	r3, r3, #32
 8008f02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	689b      	ldr	r3, [r3, #8]
 8008f08:	011b      	lsls	r3, r3, #4
 8008f0a:	697a      	ldr	r2, [r7, #20]
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4a36      	ldr	r2, [pc, #216]	; (8008fec <TIM_OC2_SetConfig+0x138>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d00b      	beq.n	8008f30 <TIM_OC2_SetConfig+0x7c>
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	4a35      	ldr	r2, [pc, #212]	; (8008ff0 <TIM_OC2_SetConfig+0x13c>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d007      	beq.n	8008f30 <TIM_OC2_SetConfig+0x7c>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	4a34      	ldr	r2, [pc, #208]	; (8008ff4 <TIM_OC2_SetConfig+0x140>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d003      	beq.n	8008f30 <TIM_OC2_SetConfig+0x7c>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4a33      	ldr	r2, [pc, #204]	; (8008ff8 <TIM_OC2_SetConfig+0x144>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d10d      	bne.n	8008f4c <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	011b      	lsls	r3, r3, #4
 8008f3e:	697a      	ldr	r2, [r7, #20]
 8008f40:	4313      	orrs	r3, r2
 8008f42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a27      	ldr	r2, [pc, #156]	; (8008fec <TIM_OC2_SetConfig+0x138>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d023      	beq.n	8008f9c <TIM_OC2_SetConfig+0xe8>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4a26      	ldr	r2, [pc, #152]	; (8008ff0 <TIM_OC2_SetConfig+0x13c>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d01f      	beq.n	8008f9c <TIM_OC2_SetConfig+0xe8>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	4a25      	ldr	r2, [pc, #148]	; (8008ff4 <TIM_OC2_SetConfig+0x140>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d01b      	beq.n	8008f9c <TIM_OC2_SetConfig+0xe8>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a24      	ldr	r2, [pc, #144]	; (8008ff8 <TIM_OC2_SetConfig+0x144>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d017      	beq.n	8008f9c <TIM_OC2_SetConfig+0xe8>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4a23      	ldr	r2, [pc, #140]	; (8008ffc <TIM_OC2_SetConfig+0x148>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d013      	beq.n	8008f9c <TIM_OC2_SetConfig+0xe8>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a22      	ldr	r2, [pc, #136]	; (8009000 <TIM_OC2_SetConfig+0x14c>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d00f      	beq.n	8008f9c <TIM_OC2_SetConfig+0xe8>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	4a21      	ldr	r2, [pc, #132]	; (8009004 <TIM_OC2_SetConfig+0x150>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d00b      	beq.n	8008f9c <TIM_OC2_SetConfig+0xe8>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	4a20      	ldr	r2, [pc, #128]	; (8009008 <TIM_OC2_SetConfig+0x154>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	d007      	beq.n	8008f9c <TIM_OC2_SetConfig+0xe8>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	4a1f      	ldr	r2, [pc, #124]	; (800900c <TIM_OC2_SetConfig+0x158>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d003      	beq.n	8008f9c <TIM_OC2_SetConfig+0xe8>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	4a1e      	ldr	r2, [pc, #120]	; (8009010 <TIM_OC2_SetConfig+0x15c>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d113      	bne.n	8008fc4 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008fa2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008faa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	695b      	ldr	r3, [r3, #20]
 8008fb0:	009b      	lsls	r3, r3, #2
 8008fb2:	693a      	ldr	r2, [r7, #16]
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	699b      	ldr	r3, [r3, #24]
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	693a      	ldr	r2, [r7, #16]
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	693a      	ldr	r2, [r7, #16]
 8008fc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	68fa      	ldr	r2, [r7, #12]
 8008fce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	685a      	ldr	r2, [r3, #4]
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	697a      	ldr	r2, [r7, #20]
 8008fdc:	621a      	str	r2, [r3, #32]
}
 8008fde:	bf00      	nop
 8008fe0:	371c      	adds	r7, #28
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe8:	4770      	bx	lr
 8008fea:	bf00      	nop
 8008fec:	40012c00 	.word	0x40012c00
 8008ff0:	50012c00 	.word	0x50012c00
 8008ff4:	40013400 	.word	0x40013400
 8008ff8:	50013400 	.word	0x50013400
 8008ffc:	40014000 	.word	0x40014000
 8009000:	50014000 	.word	0x50014000
 8009004:	40014400 	.word	0x40014400
 8009008:	50014400 	.word	0x50014400
 800900c:	40014800 	.word	0x40014800
 8009010:	50014800 	.word	0x50014800

08009014 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009014:	b480      	push	{r7}
 8009016:	b087      	sub	sp, #28
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a1b      	ldr	r3, [r3, #32]
 8009022:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6a1b      	ldr	r3, [r3, #32]
 800902e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	69db      	ldr	r3, [r3, #28]
 800903a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f023 0303 	bic.w	r3, r3, #3
 800904e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	68fa      	ldr	r2, [r7, #12]
 8009056:	4313      	orrs	r3, r2
 8009058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800905a:	697b      	ldr	r3, [r7, #20]
 800905c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009060:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	021b      	lsls	r3, r3, #8
 8009068:	697a      	ldr	r2, [r7, #20]
 800906a:	4313      	orrs	r3, r2
 800906c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	4a35      	ldr	r2, [pc, #212]	; (8009148 <TIM_OC3_SetConfig+0x134>)
 8009072:	4293      	cmp	r3, r2
 8009074:	d00b      	beq.n	800908e <TIM_OC3_SetConfig+0x7a>
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	4a34      	ldr	r2, [pc, #208]	; (800914c <TIM_OC3_SetConfig+0x138>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d007      	beq.n	800908e <TIM_OC3_SetConfig+0x7a>
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4a33      	ldr	r2, [pc, #204]	; (8009150 <TIM_OC3_SetConfig+0x13c>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d003      	beq.n	800908e <TIM_OC3_SetConfig+0x7a>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4a32      	ldr	r2, [pc, #200]	; (8009154 <TIM_OC3_SetConfig+0x140>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d10d      	bne.n	80090aa <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009094:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	68db      	ldr	r3, [r3, #12]
 800909a:	021b      	lsls	r3, r3, #8
 800909c:	697a      	ldr	r2, [r7, #20]
 800909e:	4313      	orrs	r3, r2
 80090a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80090a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4a26      	ldr	r2, [pc, #152]	; (8009148 <TIM_OC3_SetConfig+0x134>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d023      	beq.n	80090fa <TIM_OC3_SetConfig+0xe6>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4a25      	ldr	r2, [pc, #148]	; (800914c <TIM_OC3_SetConfig+0x138>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d01f      	beq.n	80090fa <TIM_OC3_SetConfig+0xe6>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4a24      	ldr	r2, [pc, #144]	; (8009150 <TIM_OC3_SetConfig+0x13c>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d01b      	beq.n	80090fa <TIM_OC3_SetConfig+0xe6>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	4a23      	ldr	r2, [pc, #140]	; (8009154 <TIM_OC3_SetConfig+0x140>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d017      	beq.n	80090fa <TIM_OC3_SetConfig+0xe6>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4a22      	ldr	r2, [pc, #136]	; (8009158 <TIM_OC3_SetConfig+0x144>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d013      	beq.n	80090fa <TIM_OC3_SetConfig+0xe6>
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4a21      	ldr	r2, [pc, #132]	; (800915c <TIM_OC3_SetConfig+0x148>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d00f      	beq.n	80090fa <TIM_OC3_SetConfig+0xe6>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	4a20      	ldr	r2, [pc, #128]	; (8009160 <TIM_OC3_SetConfig+0x14c>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d00b      	beq.n	80090fa <TIM_OC3_SetConfig+0xe6>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	4a1f      	ldr	r2, [pc, #124]	; (8009164 <TIM_OC3_SetConfig+0x150>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d007      	beq.n	80090fa <TIM_OC3_SetConfig+0xe6>
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	4a1e      	ldr	r2, [pc, #120]	; (8009168 <TIM_OC3_SetConfig+0x154>)
 80090ee:	4293      	cmp	r3, r2
 80090f0:	d003      	beq.n	80090fa <TIM_OC3_SetConfig+0xe6>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	4a1d      	ldr	r2, [pc, #116]	; (800916c <TIM_OC3_SetConfig+0x158>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d113      	bne.n	8009122 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	695b      	ldr	r3, [r3, #20]
 800910e:	011b      	lsls	r3, r3, #4
 8009110:	693a      	ldr	r2, [r7, #16]
 8009112:	4313      	orrs	r3, r2
 8009114:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	699b      	ldr	r3, [r3, #24]
 800911a:	011b      	lsls	r3, r3, #4
 800911c:	693a      	ldr	r2, [r7, #16]
 800911e:	4313      	orrs	r3, r2
 8009120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	693a      	ldr	r2, [r7, #16]
 8009126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	68fa      	ldr	r2, [r7, #12]
 800912c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	685a      	ldr	r2, [r3, #4]
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	697a      	ldr	r2, [r7, #20]
 800913a:	621a      	str	r2, [r3, #32]
}
 800913c:	bf00      	nop
 800913e:	371c      	adds	r7, #28
 8009140:	46bd      	mov	sp, r7
 8009142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009146:	4770      	bx	lr
 8009148:	40012c00 	.word	0x40012c00
 800914c:	50012c00 	.word	0x50012c00
 8009150:	40013400 	.word	0x40013400
 8009154:	50013400 	.word	0x50013400
 8009158:	40014000 	.word	0x40014000
 800915c:	50014000 	.word	0x50014000
 8009160:	40014400 	.word	0x40014400
 8009164:	50014400 	.word	0x50014400
 8009168:	40014800 	.word	0x40014800
 800916c:	50014800 	.word	0x50014800

08009170 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009170:	b480      	push	{r7}
 8009172:	b087      	sub	sp, #28
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6a1b      	ldr	r3, [r3, #32]
 800917e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6a1b      	ldr	r3, [r3, #32]
 800918a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	685b      	ldr	r3, [r3, #4]
 8009190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	69db      	ldr	r3, [r3, #28]
 8009196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800919e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091ac:	683b      	ldr	r3, [r7, #0]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	021b      	lsls	r3, r3, #8
 80091b2:	68fa      	ldr	r2, [r7, #12]
 80091b4:	4313      	orrs	r3, r2
 80091b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80091be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80091c0:	683b      	ldr	r3, [r7, #0]
 80091c2:	689b      	ldr	r3, [r3, #8]
 80091c4:	031b      	lsls	r3, r3, #12
 80091c6:	697a      	ldr	r2, [r7, #20]
 80091c8:	4313      	orrs	r3, r2
 80091ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4a36      	ldr	r2, [pc, #216]	; (80092a8 <TIM_OC4_SetConfig+0x138>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d00b      	beq.n	80091ec <TIM_OC4_SetConfig+0x7c>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a35      	ldr	r2, [pc, #212]	; (80092ac <TIM_OC4_SetConfig+0x13c>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d007      	beq.n	80091ec <TIM_OC4_SetConfig+0x7c>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4a34      	ldr	r2, [pc, #208]	; (80092b0 <TIM_OC4_SetConfig+0x140>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d003      	beq.n	80091ec <TIM_OC4_SetConfig+0x7c>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	4a33      	ldr	r2, [pc, #204]	; (80092b4 <TIM_OC4_SetConfig+0x144>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d10d      	bne.n	8009208 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80091ec:	697b      	ldr	r3, [r7, #20]
 80091ee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80091f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	031b      	lsls	r3, r3, #12
 80091fa:	697a      	ldr	r2, [r7, #20]
 80091fc:	4313      	orrs	r3, r2
 80091fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009206:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4a27      	ldr	r2, [pc, #156]	; (80092a8 <TIM_OC4_SetConfig+0x138>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d023      	beq.n	8009258 <TIM_OC4_SetConfig+0xe8>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4a26      	ldr	r2, [pc, #152]	; (80092ac <TIM_OC4_SetConfig+0x13c>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d01f      	beq.n	8009258 <TIM_OC4_SetConfig+0xe8>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a25      	ldr	r2, [pc, #148]	; (80092b0 <TIM_OC4_SetConfig+0x140>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d01b      	beq.n	8009258 <TIM_OC4_SetConfig+0xe8>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	4a24      	ldr	r2, [pc, #144]	; (80092b4 <TIM_OC4_SetConfig+0x144>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d017      	beq.n	8009258 <TIM_OC4_SetConfig+0xe8>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	4a23      	ldr	r2, [pc, #140]	; (80092b8 <TIM_OC4_SetConfig+0x148>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d013      	beq.n	8009258 <TIM_OC4_SetConfig+0xe8>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4a22      	ldr	r2, [pc, #136]	; (80092bc <TIM_OC4_SetConfig+0x14c>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d00f      	beq.n	8009258 <TIM_OC4_SetConfig+0xe8>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4a21      	ldr	r2, [pc, #132]	; (80092c0 <TIM_OC4_SetConfig+0x150>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d00b      	beq.n	8009258 <TIM_OC4_SetConfig+0xe8>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	4a20      	ldr	r2, [pc, #128]	; (80092c4 <TIM_OC4_SetConfig+0x154>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d007      	beq.n	8009258 <TIM_OC4_SetConfig+0xe8>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4a1f      	ldr	r2, [pc, #124]	; (80092c8 <TIM_OC4_SetConfig+0x158>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d003      	beq.n	8009258 <TIM_OC4_SetConfig+0xe8>
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4a1e      	ldr	r2, [pc, #120]	; (80092cc <TIM_OC4_SetConfig+0x15c>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d113      	bne.n	8009280 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800925e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009266:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	695b      	ldr	r3, [r3, #20]
 800926c:	019b      	lsls	r3, r3, #6
 800926e:	693a      	ldr	r2, [r7, #16]
 8009270:	4313      	orrs	r3, r2
 8009272:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	699b      	ldr	r3, [r3, #24]
 8009278:	019b      	lsls	r3, r3, #6
 800927a:	693a      	ldr	r2, [r7, #16]
 800927c:	4313      	orrs	r3, r2
 800927e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	693a      	ldr	r2, [r7, #16]
 8009284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	685a      	ldr	r2, [r3, #4]
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	697a      	ldr	r2, [r7, #20]
 8009298:	621a      	str	r2, [r3, #32]
}
 800929a:	bf00      	nop
 800929c:	371c      	adds	r7, #28
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr
 80092a6:	bf00      	nop
 80092a8:	40012c00 	.word	0x40012c00
 80092ac:	50012c00 	.word	0x50012c00
 80092b0:	40013400 	.word	0x40013400
 80092b4:	50013400 	.word	0x50013400
 80092b8:	40014000 	.word	0x40014000
 80092bc:	50014000 	.word	0x50014000
 80092c0:	40014400 	.word	0x40014400
 80092c4:	50014400 	.word	0x50014400
 80092c8:	40014800 	.word	0x40014800
 80092cc:	50014800 	.word	0x50014800

080092d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b087      	sub	sp, #28
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a1b      	ldr	r3, [r3, #32]
 80092de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6a1b      	ldr	r3, [r3, #32]
 80092ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009302:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	68fa      	ldr	r2, [r7, #12]
 800930a:	4313      	orrs	r3, r2
 800930c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009314:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	041b      	lsls	r3, r3, #16
 800931c:	693a      	ldr	r2, [r7, #16]
 800931e:	4313      	orrs	r3, r2
 8009320:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	4a21      	ldr	r2, [pc, #132]	; (80093ac <TIM_OC5_SetConfig+0xdc>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d023      	beq.n	8009372 <TIM_OC5_SetConfig+0xa2>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	4a20      	ldr	r2, [pc, #128]	; (80093b0 <TIM_OC5_SetConfig+0xe0>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d01f      	beq.n	8009372 <TIM_OC5_SetConfig+0xa2>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	4a1f      	ldr	r2, [pc, #124]	; (80093b4 <TIM_OC5_SetConfig+0xe4>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d01b      	beq.n	8009372 <TIM_OC5_SetConfig+0xa2>
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	4a1e      	ldr	r2, [pc, #120]	; (80093b8 <TIM_OC5_SetConfig+0xe8>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d017      	beq.n	8009372 <TIM_OC5_SetConfig+0xa2>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	4a1d      	ldr	r2, [pc, #116]	; (80093bc <TIM_OC5_SetConfig+0xec>)
 8009346:	4293      	cmp	r3, r2
 8009348:	d013      	beq.n	8009372 <TIM_OC5_SetConfig+0xa2>
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	4a1c      	ldr	r2, [pc, #112]	; (80093c0 <TIM_OC5_SetConfig+0xf0>)
 800934e:	4293      	cmp	r3, r2
 8009350:	d00f      	beq.n	8009372 <TIM_OC5_SetConfig+0xa2>
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	4a1b      	ldr	r2, [pc, #108]	; (80093c4 <TIM_OC5_SetConfig+0xf4>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d00b      	beq.n	8009372 <TIM_OC5_SetConfig+0xa2>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	4a1a      	ldr	r2, [pc, #104]	; (80093c8 <TIM_OC5_SetConfig+0xf8>)
 800935e:	4293      	cmp	r3, r2
 8009360:	d007      	beq.n	8009372 <TIM_OC5_SetConfig+0xa2>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	4a19      	ldr	r2, [pc, #100]	; (80093cc <TIM_OC5_SetConfig+0xfc>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d003      	beq.n	8009372 <TIM_OC5_SetConfig+0xa2>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	4a18      	ldr	r2, [pc, #96]	; (80093d0 <TIM_OC5_SetConfig+0x100>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d109      	bne.n	8009386 <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009378:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800937a:	683b      	ldr	r3, [r7, #0]
 800937c:	695b      	ldr	r3, [r3, #20]
 800937e:	021b      	lsls	r3, r3, #8
 8009380:	697a      	ldr	r2, [r7, #20]
 8009382:	4313      	orrs	r3, r2
 8009384:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	697a      	ldr	r2, [r7, #20]
 800938a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	68fa      	ldr	r2, [r7, #12]
 8009390:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	685a      	ldr	r2, [r3, #4]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	693a      	ldr	r2, [r7, #16]
 800939e:	621a      	str	r2, [r3, #32]
}
 80093a0:	bf00      	nop
 80093a2:	371c      	adds	r7, #28
 80093a4:	46bd      	mov	sp, r7
 80093a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093aa:	4770      	bx	lr
 80093ac:	40012c00 	.word	0x40012c00
 80093b0:	50012c00 	.word	0x50012c00
 80093b4:	40013400 	.word	0x40013400
 80093b8:	50013400 	.word	0x50013400
 80093bc:	40014000 	.word	0x40014000
 80093c0:	50014000 	.word	0x50014000
 80093c4:	40014400 	.word	0x40014400
 80093c8:	50014400 	.word	0x50014400
 80093cc:	40014800 	.word	0x40014800
 80093d0:	50014800 	.word	0x50014800

080093d4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b087      	sub	sp, #28
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
 80093dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6a1b      	ldr	r3, [r3, #32]
 80093e2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6a1b      	ldr	r3, [r3, #32]
 80093ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009402:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009406:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	021b      	lsls	r3, r3, #8
 800940e:	68fa      	ldr	r2, [r7, #12]
 8009410:	4313      	orrs	r3, r2
 8009412:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800941a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800941c:	683b      	ldr	r3, [r7, #0]
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	051b      	lsls	r3, r3, #20
 8009422:	693a      	ldr	r2, [r7, #16]
 8009424:	4313      	orrs	r3, r2
 8009426:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	4a22      	ldr	r2, [pc, #136]	; (80094b4 <TIM_OC6_SetConfig+0xe0>)
 800942c:	4293      	cmp	r3, r2
 800942e:	d023      	beq.n	8009478 <TIM_OC6_SetConfig+0xa4>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	4a21      	ldr	r2, [pc, #132]	; (80094b8 <TIM_OC6_SetConfig+0xe4>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d01f      	beq.n	8009478 <TIM_OC6_SetConfig+0xa4>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	4a20      	ldr	r2, [pc, #128]	; (80094bc <TIM_OC6_SetConfig+0xe8>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d01b      	beq.n	8009478 <TIM_OC6_SetConfig+0xa4>
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a1f      	ldr	r2, [pc, #124]	; (80094c0 <TIM_OC6_SetConfig+0xec>)
 8009444:	4293      	cmp	r3, r2
 8009446:	d017      	beq.n	8009478 <TIM_OC6_SetConfig+0xa4>
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	4a1e      	ldr	r2, [pc, #120]	; (80094c4 <TIM_OC6_SetConfig+0xf0>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d013      	beq.n	8009478 <TIM_OC6_SetConfig+0xa4>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	4a1d      	ldr	r2, [pc, #116]	; (80094c8 <TIM_OC6_SetConfig+0xf4>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d00f      	beq.n	8009478 <TIM_OC6_SetConfig+0xa4>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	4a1c      	ldr	r2, [pc, #112]	; (80094cc <TIM_OC6_SetConfig+0xf8>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d00b      	beq.n	8009478 <TIM_OC6_SetConfig+0xa4>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	4a1b      	ldr	r2, [pc, #108]	; (80094d0 <TIM_OC6_SetConfig+0xfc>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d007      	beq.n	8009478 <TIM_OC6_SetConfig+0xa4>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	4a1a      	ldr	r2, [pc, #104]	; (80094d4 <TIM_OC6_SetConfig+0x100>)
 800946c:	4293      	cmp	r3, r2
 800946e:	d003      	beq.n	8009478 <TIM_OC6_SetConfig+0xa4>
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a19      	ldr	r2, [pc, #100]	; (80094d8 <TIM_OC6_SetConfig+0x104>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d109      	bne.n	800948c <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800947e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	695b      	ldr	r3, [r3, #20]
 8009484:	029b      	lsls	r3, r3, #10
 8009486:	697a      	ldr	r2, [r7, #20]
 8009488:	4313      	orrs	r3, r2
 800948a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	697a      	ldr	r2, [r7, #20]
 8009490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	685a      	ldr	r2, [r3, #4]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	693a      	ldr	r2, [r7, #16]
 80094a4:	621a      	str	r2, [r3, #32]
}
 80094a6:	bf00      	nop
 80094a8:	371c      	adds	r7, #28
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr
 80094b2:	bf00      	nop
 80094b4:	40012c00 	.word	0x40012c00
 80094b8:	50012c00 	.word	0x50012c00
 80094bc:	40013400 	.word	0x40013400
 80094c0:	50013400 	.word	0x50013400
 80094c4:	40014000 	.word	0x40014000
 80094c8:	50014000 	.word	0x50014000
 80094cc:	40014400 	.word	0x40014400
 80094d0:	50014400 	.word	0x50014400
 80094d4:	40014800 	.word	0x40014800
 80094d8:	50014800 	.word	0x50014800

080094dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80094dc:	b480      	push	{r7}
 80094de:	b087      	sub	sp, #28
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	60b9      	str	r1, [r7, #8]
 80094e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	f003 031f 	and.w	r3, r3, #31
 80094ee:	2201      	movs	r2, #1
 80094f0:	fa02 f303 	lsl.w	r3, r2, r3
 80094f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	6a1a      	ldr	r2, [r3, #32]
 80094fa:	697b      	ldr	r3, [r7, #20]
 80094fc:	43db      	mvns	r3, r3
 80094fe:	401a      	ands	r2, r3
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	6a1a      	ldr	r2, [r3, #32]
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	f003 031f 	and.w	r3, r3, #31
 800950e:	6879      	ldr	r1, [r7, #4]
 8009510:	fa01 f303 	lsl.w	r3, r1, r3
 8009514:	431a      	orrs	r2, r3
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	621a      	str	r2, [r3, #32]
}
 800951a:	bf00      	nop
 800951c:	371c      	adds	r7, #28
 800951e:	46bd      	mov	sp, r7
 8009520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009524:	4770      	bx	lr
	...

08009528 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009528:	b480      	push	{r7}
 800952a:	b085      	sub	sp, #20
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
 8009530:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009538:	2b01      	cmp	r3, #1
 800953a:	d101      	bne.n	8009540 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800953c:	2302      	movs	r3, #2
 800953e:	e097      	b.n	8009670 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2201      	movs	r2, #1
 8009544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2202      	movs	r2, #2
 800954c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a45      	ldr	r2, [pc, #276]	; (800967c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d00e      	beq.n	8009588 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	4a44      	ldr	r2, [pc, #272]	; (8009680 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d009      	beq.n	8009588 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a42      	ldr	r2, [pc, #264]	; (8009684 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d004      	beq.n	8009588 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4a41      	ldr	r2, [pc, #260]	; (8009688 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d108      	bne.n	800959a <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800958e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	68fa      	ldr	r2, [r7, #12]
 8009596:	4313      	orrs	r3, r2
 8009598:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80095a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	68fa      	ldr	r2, [r7, #12]
 80095ac:	4313      	orrs	r3, r2
 80095ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	68fa      	ldr	r2, [r7, #12]
 80095b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a2f      	ldr	r2, [pc, #188]	; (800967c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d040      	beq.n	8009644 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a2e      	ldr	r2, [pc, #184]	; (8009680 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d03b      	beq.n	8009644 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095d4:	d036      	beq.n	8009644 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80095de:	d031      	beq.n	8009644 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4a29      	ldr	r2, [pc, #164]	; (800968c <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d02c      	beq.n	8009644 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a28      	ldr	r2, [pc, #160]	; (8009690 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d027      	beq.n	8009644 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a26      	ldr	r2, [pc, #152]	; (8009694 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 80095fa:	4293      	cmp	r3, r2
 80095fc:	d022      	beq.n	8009644 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4a25      	ldr	r2, [pc, #148]	; (8009698 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d01d      	beq.n	8009644 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a23      	ldr	r2, [pc, #140]	; (800969c <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d018      	beq.n	8009644 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a22      	ldr	r2, [pc, #136]	; (80096a0 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d013      	beq.n	8009644 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a18      	ldr	r2, [pc, #96]	; (8009684 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d00e      	beq.n	8009644 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a17      	ldr	r2, [pc, #92]	; (8009688 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d009      	beq.n	8009644 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a1b      	ldr	r2, [pc, #108]	; (80096a4 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d004      	beq.n	8009644 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a1a      	ldr	r2, [pc, #104]	; (80096a8 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d10c      	bne.n	800965e <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800964a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	68ba      	ldr	r2, [r7, #8]
 8009652:	4313      	orrs	r3, r2
 8009654:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	68ba      	ldr	r2, [r7, #8]
 800965c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2201      	movs	r2, #1
 8009662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3714      	adds	r7, #20
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr
 800967c:	40012c00 	.word	0x40012c00
 8009680:	50012c00 	.word	0x50012c00
 8009684:	40013400 	.word	0x40013400
 8009688:	50013400 	.word	0x50013400
 800968c:	40000400 	.word	0x40000400
 8009690:	50000400 	.word	0x50000400
 8009694:	40000800 	.word	0x40000800
 8009698:	50000800 	.word	0x50000800
 800969c:	40000c00 	.word	0x40000c00
 80096a0:	50000c00 	.word	0x50000c00
 80096a4:	40014000 	.word	0x40014000
 80096a8:	50014000 	.word	0x50014000

080096ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096b4:	bf00      	nop
 80096b6:	370c      	adds	r7, #12
 80096b8:	46bd      	mov	sp, r7
 80096ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096be:	4770      	bx	lr

080096c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b083      	sub	sp, #12
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096c8:	bf00      	nop
 80096ca:	370c      	adds	r7, #12
 80096cc:	46bd      	mov	sp, r7
 80096ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d2:	4770      	bx	lr

080096d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80096dc:	bf00      	nop
 80096de:	370c      	adds	r7, #12
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr

080096e8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80096f0:	bf00      	nop
 80096f2:	370c      	adds	r7, #12
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8009704:	bf00      	nop
 8009706:	370c      	adds	r7, #12
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009710:	b480      	push	{r7}
 8009712:	b083      	sub	sp, #12
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009718:	bf00      	nop
 800971a:	370c      	adds	r7, #12
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8009724:	b480      	push	{r7}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800972c:	bf00      	nop
 800972e:	370c      	adds	r7, #12
 8009730:	46bd      	mov	sp, r7
 8009732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009736:	4770      	bx	lr

08009738 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d101      	bne.n	800974a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009746:	2301      	movs	r3, #1
 8009748:	e042      	b.n	80097d0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009750:	2b00      	cmp	r3, #0
 8009752:	d106      	bne.n	8009762 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2200      	movs	r2, #0
 8009758:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f7f8 fa1d 	bl	8001b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2224      	movs	r2, #36	; 0x24
 8009766:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f022 0201 	bic.w	r2, r2, #1
 8009778:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 f82c 	bl	80097d8 <UART_SetConfig>
 8009780:	4603      	mov	r3, r0
 8009782:	2b01      	cmp	r3, #1
 8009784:	d101      	bne.n	800978a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009786:	2301      	movs	r3, #1
 8009788:	e022      	b.n	80097d0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800978e:	2b00      	cmp	r3, #0
 8009790:	d002      	beq.n	8009798 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009792:	6878      	ldr	r0, [r7, #4]
 8009794:	f000 f9c2 	bl	8009b1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	685a      	ldr	r2, [r3, #4]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80097a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	689a      	ldr	r2, [r3, #8]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80097b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	681a      	ldr	r2, [r3, #0]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f042 0201 	orr.w	r2, r2, #1
 80097c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f000 fa49 	bl	8009c60 <UART_CheckIdleState>
 80097ce:	4603      	mov	r3, r0
}
 80097d0:	4618      	mov	r0, r3
 80097d2:	3708      	adds	r7, #8
 80097d4:	46bd      	mov	sp, r7
 80097d6:	bd80      	pop	{r7, pc}

080097d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80097d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097dc:	b094      	sub	sp, #80	; 0x50
 80097de:	af00      	add	r7, sp, #0
 80097e0:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80097e2:	2300      	movs	r3, #0
 80097e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 80097e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ea:	681a      	ldr	r2, [r3, #0]
 80097ec:	4b7e      	ldr	r3, [pc, #504]	; (80099e8 <UART_SetConfig+0x210>)
 80097ee:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80097f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f2:	689a      	ldr	r2, [r3, #8]
 80097f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097f6:	691b      	ldr	r3, [r3, #16]
 80097f8:	431a      	orrs	r2, r3
 80097fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097fc:	695b      	ldr	r3, [r3, #20]
 80097fe:	431a      	orrs	r2, r3
 8009800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009802:	69db      	ldr	r3, [r3, #28]
 8009804:	4313      	orrs	r3, r2
 8009806:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4977      	ldr	r1, [pc, #476]	; (80099ec <UART_SetConfig+0x214>)
 8009810:	4019      	ands	r1, r3
 8009812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009814:	681a      	ldr	r2, [r3, #0]
 8009816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009818:	430b      	orrs	r3, r1
 800981a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800981c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	685b      	ldr	r3, [r3, #4]
 8009822:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009828:	68d9      	ldr	r1, [r3, #12]
 800982a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	ea40 0301 	orr.w	r3, r0, r1
 8009832:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009836:	699b      	ldr	r3, [r3, #24]
 8009838:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800983a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	4b6a      	ldr	r3, [pc, #424]	; (80099e8 <UART_SetConfig+0x210>)
 8009840:	429a      	cmp	r2, r3
 8009842:	d009      	beq.n	8009858 <UART_SetConfig+0x80>
 8009844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	4b69      	ldr	r3, [pc, #420]	; (80099f0 <UART_SetConfig+0x218>)
 800984a:	429a      	cmp	r2, r3
 800984c:	d004      	beq.n	8009858 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800984e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009850:	6a1a      	ldr	r2, [r3, #32]
 8009852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009854:	4313      	orrs	r3, r2
 8009856:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	689b      	ldr	r3, [r3, #8]
 800985e:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 8009862:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8009866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800986c:	430b      	orrs	r3, r1
 800986e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009876:	f023 000f 	bic.w	r0, r3, #15
 800987a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800987c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800987e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	ea40 0301 	orr.w	r3, r0, r1
 8009886:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800988a:	681a      	ldr	r2, [r3, #0]
 800988c:	4b59      	ldr	r3, [pc, #356]	; (80099f4 <UART_SetConfig+0x21c>)
 800988e:	429a      	cmp	r2, r3
 8009890:	d102      	bne.n	8009898 <UART_SetConfig+0xc0>
 8009892:	2301      	movs	r3, #1
 8009894:	64bb      	str	r3, [r7, #72]	; 0x48
 8009896:	e029      	b.n	80098ec <UART_SetConfig+0x114>
 8009898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800989a:	681a      	ldr	r2, [r3, #0]
 800989c:	4b56      	ldr	r3, [pc, #344]	; (80099f8 <UART_SetConfig+0x220>)
 800989e:	429a      	cmp	r2, r3
 80098a0:	d102      	bne.n	80098a8 <UART_SetConfig+0xd0>
 80098a2:	2302      	movs	r3, #2
 80098a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80098a6:	e021      	b.n	80098ec <UART_SetConfig+0x114>
 80098a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098aa:	681a      	ldr	r2, [r3, #0]
 80098ac:	4b53      	ldr	r3, [pc, #332]	; (80099fc <UART_SetConfig+0x224>)
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d102      	bne.n	80098b8 <UART_SetConfig+0xe0>
 80098b2:	2304      	movs	r3, #4
 80098b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80098b6:	e019      	b.n	80098ec <UART_SetConfig+0x114>
 80098b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ba:	681a      	ldr	r2, [r3, #0]
 80098bc:	4b50      	ldr	r3, [pc, #320]	; (8009a00 <UART_SetConfig+0x228>)
 80098be:	429a      	cmp	r2, r3
 80098c0:	d102      	bne.n	80098c8 <UART_SetConfig+0xf0>
 80098c2:	2308      	movs	r3, #8
 80098c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80098c6:	e011      	b.n	80098ec <UART_SetConfig+0x114>
 80098c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ca:	681a      	ldr	r2, [r3, #0]
 80098cc:	4b4d      	ldr	r3, [pc, #308]	; (8009a04 <UART_SetConfig+0x22c>)
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d102      	bne.n	80098d8 <UART_SetConfig+0x100>
 80098d2:	2310      	movs	r3, #16
 80098d4:	64bb      	str	r3, [r7, #72]	; 0x48
 80098d6:	e009      	b.n	80098ec <UART_SetConfig+0x114>
 80098d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098da:	681a      	ldr	r2, [r3, #0]
 80098dc:	4b42      	ldr	r3, [pc, #264]	; (80099e8 <UART_SetConfig+0x210>)
 80098de:	429a      	cmp	r2, r3
 80098e0:	d102      	bne.n	80098e8 <UART_SetConfig+0x110>
 80098e2:	2320      	movs	r3, #32
 80098e4:	64bb      	str	r3, [r7, #72]	; 0x48
 80098e6:	e001      	b.n	80098ec <UART_SetConfig+0x114>
 80098e8:	2300      	movs	r3, #0
 80098ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80098ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ee:	681a      	ldr	r2, [r3, #0]
 80098f0:	4b3d      	ldr	r3, [pc, #244]	; (80099e8 <UART_SetConfig+0x210>)
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d005      	beq.n	8009902 <UART_SetConfig+0x12a>
 80098f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f8:	681a      	ldr	r2, [r3, #0]
 80098fa:	4b3d      	ldr	r3, [pc, #244]	; (80099f0 <UART_SetConfig+0x218>)
 80098fc:	429a      	cmp	r2, r3
 80098fe:	f040 8085 	bne.w	8009a0c <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009904:	2200      	movs	r2, #0
 8009906:	623b      	str	r3, [r7, #32]
 8009908:	627a      	str	r2, [r7, #36]	; 0x24
 800990a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800990e:	f7fd f861 	bl	80069d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009912:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 8009914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009916:	2b00      	cmp	r3, #0
 8009918:	f000 80e8 	beq.w	8009aec <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800991c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800991e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009920:	4a39      	ldr	r2, [pc, #228]	; (8009a08 <UART_SetConfig+0x230>)
 8009922:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009926:	461a      	mov	r2, r3
 8009928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800992a:	fbb3 f3f2 	udiv	r3, r3, r2
 800992e:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009932:	685a      	ldr	r2, [r3, #4]
 8009934:	4613      	mov	r3, r2
 8009936:	005b      	lsls	r3, r3, #1
 8009938:	4413      	add	r3, r2
 800993a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800993c:	429a      	cmp	r2, r3
 800993e:	d305      	bcc.n	800994c <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009940:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009946:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009948:	429a      	cmp	r2, r3
 800994a:	d903      	bls.n	8009954 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800994c:	2301      	movs	r3, #1
 800994e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009952:	e048      	b.n	80099e6 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009954:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009956:	2200      	movs	r2, #0
 8009958:	61bb      	str	r3, [r7, #24]
 800995a:	61fa      	str	r2, [r7, #28]
 800995c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800995e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009960:	4a29      	ldr	r2, [pc, #164]	; (8009a08 <UART_SetConfig+0x230>)
 8009962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009966:	b29b      	uxth	r3, r3
 8009968:	2200      	movs	r2, #0
 800996a:	613b      	str	r3, [r7, #16]
 800996c:	617a      	str	r2, [r7, #20]
 800996e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009972:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8009976:	f7f6 fc7d 	bl	8000274 <__aeabi_uldivmod>
 800997a:	4602      	mov	r2, r0
 800997c:	460b      	mov	r3, r1
 800997e:	4610      	mov	r0, r2
 8009980:	4619      	mov	r1, r3
 8009982:	f04f 0200 	mov.w	r2, #0
 8009986:	f04f 0300 	mov.w	r3, #0
 800998a:	020b      	lsls	r3, r1, #8
 800998c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009990:	0202      	lsls	r2, r0, #8
 8009992:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009994:	6849      	ldr	r1, [r1, #4]
 8009996:	0849      	lsrs	r1, r1, #1
 8009998:	2000      	movs	r0, #0
 800999a:	460c      	mov	r4, r1
 800999c:	4605      	mov	r5, r0
 800999e:	eb12 0804 	adds.w	r8, r2, r4
 80099a2:	eb43 0905 	adc.w	r9, r3, r5
 80099a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	2200      	movs	r2, #0
 80099ac:	60bb      	str	r3, [r7, #8]
 80099ae:	60fa      	str	r2, [r7, #12]
 80099b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80099b4:	4640      	mov	r0, r8
 80099b6:	4649      	mov	r1, r9
 80099b8:	f7f6 fc5c 	bl	8000274 <__aeabi_uldivmod>
 80099bc:	4602      	mov	r2, r0
 80099be:	460b      	mov	r3, r1
 80099c0:	4613      	mov	r3, r2
 80099c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80099c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80099ca:	d308      	bcc.n	80099de <UART_SetConfig+0x206>
 80099cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099d2:	d204      	bcs.n	80099de <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 80099d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80099da:	60da      	str	r2, [r3, #12]
 80099dc:	e003      	b.n	80099e6 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 80099e4:	e082      	b.n	8009aec <UART_SetConfig+0x314>
 80099e6:	e081      	b.n	8009aec <UART_SetConfig+0x314>
 80099e8:	46002400 	.word	0x46002400
 80099ec:	cfff69f3 	.word	0xcfff69f3
 80099f0:	56002400 	.word	0x56002400
 80099f4:	40013800 	.word	0x40013800
 80099f8:	40004400 	.word	0x40004400
 80099fc:	40004800 	.word	0x40004800
 8009a00:	40004c00 	.word	0x40004c00
 8009a04:	40005000 	.word	0x40005000
 8009a08:	0800ab70 	.word	0x0800ab70
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a0e:	69db      	ldr	r3, [r3, #28]
 8009a10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a14:	d13c      	bne.n	8009a90 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a18:	2200      	movs	r2, #0
 8009a1a:	603b      	str	r3, [r7, #0]
 8009a1c:	607a      	str	r2, [r7, #4]
 8009a1e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a22:	f7fc ffd7 	bl	80069d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009a26:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009a28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d05e      	beq.n	8009aec <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a32:	4a39      	ldr	r2, [pc, #228]	; (8009b18 <UART_SetConfig+0x340>)
 8009a34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a38:	461a      	mov	r2, r3
 8009a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a40:	005a      	lsls	r2, r3, #1
 8009a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a44:	685b      	ldr	r3, [r3, #4]
 8009a46:	085b      	lsrs	r3, r3, #1
 8009a48:	441a      	add	r2, r3
 8009a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a4c:	685b      	ldr	r3, [r3, #4]
 8009a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a52:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a56:	2b0f      	cmp	r3, #15
 8009a58:	d916      	bls.n	8009a88 <UART_SetConfig+0x2b0>
 8009a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a60:	d212      	bcs.n	8009a88 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	f023 030f 	bic.w	r3, r3, #15
 8009a6a:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a6e:	085b      	lsrs	r3, r3, #1
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	f003 0307 	and.w	r3, r3, #7
 8009a76:	b29a      	uxth	r2, r3
 8009a78:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009a7a:	4313      	orrs	r3, r2
 8009a7c:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8009a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009a84:	60da      	str	r2, [r3, #12]
 8009a86:	e031      	b.n	8009aec <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009a8e:	e02d      	b.n	8009aec <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009a90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a92:	2200      	movs	r2, #0
 8009a94:	469a      	mov	sl, r3
 8009a96:	4693      	mov	fp, r2
 8009a98:	4650      	mov	r0, sl
 8009a9a:	4659      	mov	r1, fp
 8009a9c:	f7fc ff9a 	bl	80069d4 <HAL_RCCEx_GetPeriphCLKFreq>
 8009aa0:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8009aa2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d021      	beq.n	8009aec <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aac:	4a1a      	ldr	r2, [pc, #104]	; (8009b18 <UART_SetConfig+0x340>)
 8009aae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009ab2:	461a      	mov	r2, r3
 8009ab4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009ab6:	fbb3 f2f2 	udiv	r2, r3, r2
 8009aba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009abc:	685b      	ldr	r3, [r3, #4]
 8009abe:	085b      	lsrs	r3, r3, #1
 8009ac0:	441a      	add	r2, r3
 8009ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009aca:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ace:	2b0f      	cmp	r3, #15
 8009ad0:	d909      	bls.n	8009ae6 <UART_SetConfig+0x30e>
 8009ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ad8:	d205      	bcs.n	8009ae6 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009ada:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009adc:	b29a      	uxth	r2, r3
 8009ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	60da      	str	r2, [r3, #12]
 8009ae4:	e002      	b.n	8009aec <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aee:	2201      	movs	r2, #1
 8009af0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af6:	2201      	movs	r2, #1
 8009af8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009afe:	2200      	movs	r2, #0
 8009b00:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b04:	2200      	movs	r2, #0
 8009b06:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009b08:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3750      	adds	r7, #80	; 0x50
 8009b10:	46bd      	mov	sp, r7
 8009b12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b16:	bf00      	nop
 8009b18:	0800ab70 	.word	0x0800ab70

08009b1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b083      	sub	sp, #12
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b28:	f003 0301 	and.w	r3, r3, #1
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d00a      	beq.n	8009b46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	430a      	orrs	r2, r1
 8009b44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b4a:	f003 0302 	and.w	r3, r3, #2
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d00a      	beq.n	8009b68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	430a      	orrs	r2, r1
 8009b66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b6c:	f003 0304 	and.w	r3, r3, #4
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d00a      	beq.n	8009b8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	685b      	ldr	r3, [r3, #4]
 8009b7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	430a      	orrs	r2, r1
 8009b88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b8e:	f003 0308 	and.w	r3, r3, #8
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d00a      	beq.n	8009bac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	430a      	orrs	r2, r1
 8009baa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bb0:	f003 0310 	and.w	r3, r3, #16
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d00a      	beq.n	8009bce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	689b      	ldr	r3, [r3, #8]
 8009bbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	430a      	orrs	r2, r1
 8009bcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd2:	f003 0320 	and.w	r3, r3, #32
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00a      	beq.n	8009bf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	689b      	ldr	r3, [r3, #8]
 8009be0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	430a      	orrs	r2, r1
 8009bee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d01a      	beq.n	8009c32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	430a      	orrs	r2, r1
 8009c10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c1a:	d10a      	bne.n	8009c32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	685b      	ldr	r3, [r3, #4]
 8009c22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	430a      	orrs	r2, r1
 8009c30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d00a      	beq.n	8009c54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	430a      	orrs	r2, r1
 8009c52:	605a      	str	r2, [r3, #4]
  }
}
 8009c54:	bf00      	nop
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b086      	sub	sp, #24
 8009c64:	af02      	add	r7, sp, #8
 8009c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009c70:	f7f8 f9e6 	bl	8002040 <HAL_GetTick>
 8009c74:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	f003 0308 	and.w	r3, r3, #8
 8009c80:	2b08      	cmp	r3, #8
 8009c82:	d10e      	bne.n	8009ca2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009c88:	9300      	str	r3, [sp, #0]
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 f82f 	bl	8009cf6 <UART_WaitOnFlagUntilTimeout>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d001      	beq.n	8009ca2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c9e:	2303      	movs	r3, #3
 8009ca0:	e025      	b.n	8009cee <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f003 0304 	and.w	r3, r3, #4
 8009cac:	2b04      	cmp	r3, #4
 8009cae:	d10e      	bne.n	8009cce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009cb0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009cb4:	9300      	str	r3, [sp, #0]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 f819 	bl	8009cf6 <UART_WaitOnFlagUntilTimeout>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d001      	beq.n	8009cce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009cca:	2303      	movs	r3, #3
 8009ccc:	e00f      	b.n	8009cee <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2220      	movs	r2, #32
 8009cd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2220      	movs	r2, #32
 8009cda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009cec:	2300      	movs	r3, #0
}
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3710      	adds	r7, #16
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}

08009cf6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009cf6:	b580      	push	{r7, lr}
 8009cf8:	b09c      	sub	sp, #112	; 0x70
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	60f8      	str	r0, [r7, #12]
 8009cfe:	60b9      	str	r1, [r7, #8]
 8009d00:	603b      	str	r3, [r7, #0]
 8009d02:	4613      	mov	r3, r2
 8009d04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d06:	e0a9      	b.n	8009e5c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d0e:	f000 80a5 	beq.w	8009e5c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d12:	f7f8 f995 	bl	8002040 <HAL_GetTick>
 8009d16:	4602      	mov	r2, r0
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	1ad3      	subs	r3, r2, r3
 8009d1c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009d1e:	429a      	cmp	r2, r3
 8009d20:	d302      	bcc.n	8009d28 <UART_WaitOnFlagUntilTimeout+0x32>
 8009d22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d140      	bne.n	8009daa <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d30:	e853 3f00 	ldrex	r3, [r3]
 8009d34:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d38:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009d3c:	667b      	str	r3, [r7, #100]	; 0x64
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	461a      	mov	r2, r3
 8009d44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d48:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d4a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009d4c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009d4e:	e841 2300 	strex	r3, r2, [r1]
 8009d52:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009d54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d1e6      	bne.n	8009d28 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	3308      	adds	r3, #8
 8009d60:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d64:	e853 3f00 	ldrex	r3, [r3]
 8009d68:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009d6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d6c:	f023 0301 	bic.w	r3, r3, #1
 8009d70:	663b      	str	r3, [r7, #96]	; 0x60
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	3308      	adds	r3, #8
 8009d78:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009d7a:	64ba      	str	r2, [r7, #72]	; 0x48
 8009d7c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009d80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d82:	e841 2300 	strex	r3, r2, [r1]
 8009d86:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d1e5      	bne.n	8009d5a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2220      	movs	r2, #32
 8009d92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	2220      	movs	r2, #32
 8009d9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2200      	movs	r2, #0
 8009da2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009da6:	2303      	movs	r3, #3
 8009da8:	e069      	b.n	8009e7e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	f003 0304 	and.w	r3, r3, #4
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d051      	beq.n	8009e5c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	69db      	ldr	r3, [r3, #28]
 8009dbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009dc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009dc6:	d149      	bne.n	8009e5c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009dd0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dda:	e853 3f00 	ldrex	r3, [r3]
 8009dde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009de6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	461a      	mov	r2, r3
 8009dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009df0:	637b      	str	r3, [r7, #52]	; 0x34
 8009df2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009df6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009df8:	e841 2300 	strex	r3, r2, [r1]
 8009dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d1e6      	bne.n	8009dd2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	3308      	adds	r3, #8
 8009e0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	e853 3f00 	ldrex	r3, [r3]
 8009e12:	613b      	str	r3, [r7, #16]
   return(result);
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	f023 0301 	bic.w	r3, r3, #1
 8009e1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	3308      	adds	r3, #8
 8009e22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009e24:	623a      	str	r2, [r7, #32]
 8009e26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e28:	69f9      	ldr	r1, [r7, #28]
 8009e2a:	6a3a      	ldr	r2, [r7, #32]
 8009e2c:	e841 2300 	strex	r3, r2, [r1]
 8009e30:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e32:	69bb      	ldr	r3, [r7, #24]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d1e5      	bne.n	8009e04 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	2220      	movs	r2, #32
 8009e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2220      	movs	r2, #32
 8009e44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2220      	movs	r2, #32
 8009e4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	2200      	movs	r2, #0
 8009e54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009e58:	2303      	movs	r3, #3
 8009e5a:	e010      	b.n	8009e7e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	69da      	ldr	r2, [r3, #28]
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	4013      	ands	r3, r2
 8009e66:	68ba      	ldr	r2, [r7, #8]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	bf0c      	ite	eq
 8009e6c:	2301      	moveq	r3, #1
 8009e6e:	2300      	movne	r3, #0
 8009e70:	b2db      	uxtb	r3, r3
 8009e72:	461a      	mov	r2, r3
 8009e74:	79fb      	ldrb	r3, [r7, #7]
 8009e76:	429a      	cmp	r2, r3
 8009e78:	f43f af46 	beq.w	8009d08 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009e7c:	2300      	movs	r3, #0
}
 8009e7e:	4618      	mov	r0, r3
 8009e80:	3770      	adds	r7, #112	; 0x70
 8009e82:	46bd      	mov	sp, r7
 8009e84:	bd80      	pop	{r7, pc}

08009e86 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009e86:	b480      	push	{r7}
 8009e88:	b085      	sub	sp, #20
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	d101      	bne.n	8009e9c <HAL_UARTEx_DisableFifoMode+0x16>
 8009e98:	2302      	movs	r3, #2
 8009e9a:	e027      	b.n	8009eec <HAL_UARTEx_DisableFifoMode+0x66>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2201      	movs	r2, #1
 8009ea0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2224      	movs	r2, #36	; 0x24
 8009ea8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	681a      	ldr	r2, [r3, #0]
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f022 0201 	bic.w	r2, r2, #1
 8009ec2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009eca:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2200      	movs	r2, #0
 8009ed0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	68fa      	ldr	r2, [r7, #12]
 8009ed8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2220      	movs	r2, #32
 8009ede:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009eea:	2300      	movs	r3, #0
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3714      	adds	r7, #20
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d101      	bne.n	8009f10 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009f0c:	2302      	movs	r3, #2
 8009f0e:	e02d      	b.n	8009f6c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2201      	movs	r2, #1
 8009f14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2224      	movs	r2, #36	; 0x24
 8009f1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f022 0201 	bic.w	r2, r2, #1
 8009f36:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	689b      	ldr	r3, [r3, #8]
 8009f3e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	683a      	ldr	r2, [r7, #0]
 8009f48:	430a      	orrs	r2, r1
 8009f4a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f4c:	6878      	ldr	r0, [r7, #4]
 8009f4e:	f000 f84f 	bl	8009ff0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	68fa      	ldr	r2, [r7, #12]
 8009f58:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2220      	movs	r2, #32
 8009f5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2200      	movs	r2, #0
 8009f66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009f6a:	2300      	movs	r3, #0
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3710      	adds	r7, #16
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d101      	bne.n	8009f8c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009f88:	2302      	movs	r3, #2
 8009f8a:	e02d      	b.n	8009fe8 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2224      	movs	r2, #36	; 0x24
 8009f98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f022 0201 	bic.w	r2, r2, #1
 8009fb2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	689b      	ldr	r3, [r3, #8]
 8009fba:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	683a      	ldr	r2, [r7, #0]
 8009fc4:	430a      	orrs	r2, r1
 8009fc6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f000 f811 	bl	8009ff0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	68fa      	ldr	r2, [r7, #12]
 8009fd4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2220      	movs	r2, #32
 8009fda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009fe6:	2300      	movs	r3, #0
}
 8009fe8:	4618      	mov	r0, r3
 8009fea:	3710      	adds	r7, #16
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b085      	sub	sp, #20
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d108      	bne.n	800a012 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2201      	movs	r2, #1
 800a004:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2201      	movs	r2, #1
 800a00c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a010:	e031      	b.n	800a076 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a012:	2308      	movs	r3, #8
 800a014:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a016:	2308      	movs	r3, #8
 800a018:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	689b      	ldr	r3, [r3, #8]
 800a020:	0e5b      	lsrs	r3, r3, #25
 800a022:	b2db      	uxtb	r3, r3
 800a024:	f003 0307 	and.w	r3, r3, #7
 800a028:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	689b      	ldr	r3, [r3, #8]
 800a030:	0f5b      	lsrs	r3, r3, #29
 800a032:	b2db      	uxtb	r3, r3
 800a034:	f003 0307 	and.w	r3, r3, #7
 800a038:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a03a:	7bbb      	ldrb	r3, [r7, #14]
 800a03c:	7b3a      	ldrb	r2, [r7, #12]
 800a03e:	4911      	ldr	r1, [pc, #68]	; (800a084 <UARTEx_SetNbDataToProcess+0x94>)
 800a040:	5c8a      	ldrb	r2, [r1, r2]
 800a042:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a046:	7b3a      	ldrb	r2, [r7, #12]
 800a048:	490f      	ldr	r1, [pc, #60]	; (800a088 <UARTEx_SetNbDataToProcess+0x98>)
 800a04a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a04c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a050:	b29a      	uxth	r2, r3
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a058:	7bfb      	ldrb	r3, [r7, #15]
 800a05a:	7b7a      	ldrb	r2, [r7, #13]
 800a05c:	4909      	ldr	r1, [pc, #36]	; (800a084 <UARTEx_SetNbDataToProcess+0x94>)
 800a05e:	5c8a      	ldrb	r2, [r1, r2]
 800a060:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a064:	7b7a      	ldrb	r2, [r7, #13]
 800a066:	4908      	ldr	r1, [pc, #32]	; (800a088 <UARTEx_SetNbDataToProcess+0x98>)
 800a068:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a06a:	fb93 f3f2 	sdiv	r3, r3, r2
 800a06e:	b29a      	uxth	r2, r3
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a076:	bf00      	nop
 800a078:	3714      	adds	r7, #20
 800a07a:	46bd      	mov	sp, r7
 800a07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a080:	4770      	bx	lr
 800a082:	bf00      	nop
 800a084:	0800ab88 	.word	0x0800ab88
 800a088:	0800ab90 	.word	0x0800ab90

0800a08c <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f043 0202 	orr.w	r2, r3, #2
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	685a      	ldr	r2, [r3, #4]
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	021b      	lsls	r3, r3, #8
 800a0ac:	431a      	orrs	r2, r3
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f023 0202 	bic.w	r2, r3, #2
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	601a      	str	r2, [r3, #0]
}
 800a0be:	bf00      	nop
 800a0c0:	370c      	adds	r7, #12
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr

0800a0ca <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800a0ca:	b480      	push	{r7}
 800a0cc:	b08b      	sub	sp, #44	; 0x2c
 800a0ce:	af00      	add	r7, sp, #0
 800a0d0:	60f8      	str	r0, [r7, #12]
 800a0d2:	60b9      	str	r1, [r7, #8]
 800a0d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	fa93 f3a3 	rbit	r3, r3
 800a0e4:	613b      	str	r3, [r7, #16]
  return result;
 800a0e6:	693b      	ldr	r3, [r7, #16]
 800a0e8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a0ea:	69bb      	ldr	r3, [r7, #24]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d101      	bne.n	800a0f4 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800a0f0:	2320      	movs	r3, #32
 800a0f2:	e003      	b.n	800a0fc <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800a0f4:	69bb      	ldr	r3, [r7, #24]
 800a0f6:	fab3 f383 	clz	r3, r3
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	005b      	lsls	r3, r3, #1
 800a0fe:	2103      	movs	r1, #3
 800a100:	fa01 f303 	lsl.w	r3, r1, r3
 800a104:	43db      	mvns	r3, r3
 800a106:	401a      	ands	r2, r3
 800a108:	68bb      	ldr	r3, [r7, #8]
 800a10a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a10c:	6a3b      	ldr	r3, [r7, #32]
 800a10e:	fa93 f3a3 	rbit	r3, r3
 800a112:	61fb      	str	r3, [r7, #28]
  return result;
 800a114:	69fb      	ldr	r3, [r7, #28]
 800a116:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d101      	bne.n	800a122 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800a11e:	2320      	movs	r3, #32
 800a120:	e003      	b.n	800a12a <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800a122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a124:	fab3 f383 	clz	r3, r3
 800a128:	b2db      	uxtb	r3, r3
 800a12a:	005b      	lsls	r3, r3, #1
 800a12c:	6879      	ldr	r1, [r7, #4]
 800a12e:	fa01 f303 	lsl.w	r3, r1, r3
 800a132:	431a      	orrs	r2, r3
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	601a      	str	r2, [r3, #0]
}
 800a138:	bf00      	nop
 800a13a:	372c      	adds	r7, #44	; 0x2c
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr

0800a144 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800a144:	b480      	push	{r7}
 800a146:	b085      	sub	sp, #20
 800a148:	af00      	add	r7, sp, #0
 800a14a:	60f8      	str	r0, [r7, #12]
 800a14c:	60b9      	str	r1, [r7, #8]
 800a14e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	685a      	ldr	r2, [r3, #4]
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	43db      	mvns	r3, r3
 800a158:	401a      	ands	r2, r3
 800a15a:	68bb      	ldr	r3, [r7, #8]
 800a15c:	6879      	ldr	r1, [r7, #4]
 800a15e:	fb01 f303 	mul.w	r3, r1, r3
 800a162:	431a      	orrs	r2, r3
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	605a      	str	r2, [r3, #4]
}
 800a168:	bf00      	nop
 800a16a:	3714      	adds	r7, #20
 800a16c:	46bd      	mov	sp, r7
 800a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a172:	4770      	bx	lr

0800a174 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800a174:	b480      	push	{r7}
 800a176:	b08b      	sub	sp, #44	; 0x2c
 800a178:	af00      	add	r7, sp, #0
 800a17a:	60f8      	str	r0, [r7, #12]
 800a17c:	60b9      	str	r1, [r7, #8]
 800a17e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	689a      	ldr	r2, [r3, #8]
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a188:	697b      	ldr	r3, [r7, #20]
 800a18a:	fa93 f3a3 	rbit	r3, r3
 800a18e:	613b      	str	r3, [r7, #16]
  return result;
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a194:	69bb      	ldr	r3, [r7, #24]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d101      	bne.n	800a19e <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800a19a:	2320      	movs	r3, #32
 800a19c:	e003      	b.n	800a1a6 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800a19e:	69bb      	ldr	r3, [r7, #24]
 800a1a0:	fab3 f383 	clz	r3, r3
 800a1a4:	b2db      	uxtb	r3, r3
 800a1a6:	005b      	lsls	r3, r3, #1
 800a1a8:	2103      	movs	r1, #3
 800a1aa:	fa01 f303 	lsl.w	r3, r1, r3
 800a1ae:	43db      	mvns	r3, r3
 800a1b0:	401a      	ands	r2, r3
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a1b6:	6a3b      	ldr	r3, [r7, #32]
 800a1b8:	fa93 f3a3 	rbit	r3, r3
 800a1bc:	61fb      	str	r3, [r7, #28]
  return result;
 800a1be:	69fb      	ldr	r3, [r7, #28]
 800a1c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d101      	bne.n	800a1cc <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800a1c8:	2320      	movs	r3, #32
 800a1ca:	e003      	b.n	800a1d4 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800a1cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ce:	fab3 f383 	clz	r3, r3
 800a1d2:	b2db      	uxtb	r3, r3
 800a1d4:	005b      	lsls	r3, r3, #1
 800a1d6:	6879      	ldr	r1, [r7, #4]
 800a1d8:	fa01 f303 	lsl.w	r3, r1, r3
 800a1dc:	431a      	orrs	r2, r3
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800a1e2:	bf00      	nop
 800a1e4:	372c      	adds	r7, #44	; 0x2c
 800a1e6:	46bd      	mov	sp, r7
 800a1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ec:	4770      	bx	lr

0800a1ee <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800a1ee:	b480      	push	{r7}
 800a1f0:	b08b      	sub	sp, #44	; 0x2c
 800a1f2:	af00      	add	r7, sp, #0
 800a1f4:	60f8      	str	r0, [r7, #12]
 800a1f6:	60b9      	str	r1, [r7, #8]
 800a1f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	68da      	ldr	r2, [r3, #12]
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	fa93 f3a3 	rbit	r3, r3
 800a208:	613b      	str	r3, [r7, #16]
  return result;
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a20e:	69bb      	ldr	r3, [r7, #24]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d101      	bne.n	800a218 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800a214:	2320      	movs	r3, #32
 800a216:	e003      	b.n	800a220 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800a218:	69bb      	ldr	r3, [r7, #24]
 800a21a:	fab3 f383 	clz	r3, r3
 800a21e:	b2db      	uxtb	r3, r3
 800a220:	005b      	lsls	r3, r3, #1
 800a222:	2103      	movs	r1, #3
 800a224:	fa01 f303 	lsl.w	r3, r1, r3
 800a228:	43db      	mvns	r3, r3
 800a22a:	401a      	ands	r2, r3
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a230:	6a3b      	ldr	r3, [r7, #32]
 800a232:	fa93 f3a3 	rbit	r3, r3
 800a236:	61fb      	str	r3, [r7, #28]
  return result;
 800a238:	69fb      	ldr	r3, [r7, #28]
 800a23a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d101      	bne.n	800a246 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800a242:	2320      	movs	r3, #32
 800a244:	e003      	b.n	800a24e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800a246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a248:	fab3 f383 	clz	r3, r3
 800a24c:	b2db      	uxtb	r3, r3
 800a24e:	005b      	lsls	r3, r3, #1
 800a250:	6879      	ldr	r1, [r7, #4]
 800a252:	fa01 f303 	lsl.w	r3, r1, r3
 800a256:	431a      	orrs	r2, r3
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	60da      	str	r2, [r3, #12]
}
 800a25c:	bf00      	nop
 800a25e:	372c      	adds	r7, #44	; 0x2c
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr

0800a268 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a268:	b480      	push	{r7}
 800a26a:	b08b      	sub	sp, #44	; 0x2c
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	6a1a      	ldr	r2, [r3, #32]
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a27c:	697b      	ldr	r3, [r7, #20]
 800a27e:	fa93 f3a3 	rbit	r3, r3
 800a282:	613b      	str	r3, [r7, #16]
  return result;
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d101      	bne.n	800a292 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800a28e:	2320      	movs	r3, #32
 800a290:	e003      	b.n	800a29a <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800a292:	69bb      	ldr	r3, [r7, #24]
 800a294:	fab3 f383 	clz	r3, r3
 800a298:	b2db      	uxtb	r3, r3
 800a29a:	009b      	lsls	r3, r3, #2
 800a29c:	210f      	movs	r1, #15
 800a29e:	fa01 f303 	lsl.w	r3, r1, r3
 800a2a2:	43db      	mvns	r3, r3
 800a2a4:	401a      	ands	r2, r3
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2aa:	6a3b      	ldr	r3, [r7, #32]
 800a2ac:	fa93 f3a3 	rbit	r3, r3
 800a2b0:	61fb      	str	r3, [r7, #28]
  return result;
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d101      	bne.n	800a2c0 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800a2bc:	2320      	movs	r3, #32
 800a2be:	e003      	b.n	800a2c8 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800a2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c2:	fab3 f383 	clz	r3, r3
 800a2c6:	b2db      	uxtb	r3, r3
 800a2c8:	009b      	lsls	r3, r3, #2
 800a2ca:	6879      	ldr	r1, [r7, #4]
 800a2cc:	fa01 f303 	lsl.w	r3, r1, r3
 800a2d0:	431a      	orrs	r2, r3
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800a2d6:	bf00      	nop
 800a2d8:	372c      	adds	r7, #44	; 0x2c
 800a2da:	46bd      	mov	sp, r7
 800a2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e0:	4770      	bx	lr

0800a2e2 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a2e2:	b480      	push	{r7}
 800a2e4:	b08b      	sub	sp, #44	; 0x2c
 800a2e6:	af00      	add	r7, sp, #0
 800a2e8:	60f8      	str	r0, [r7, #12]
 800a2ea:	60b9      	str	r1, [r7, #8]
 800a2ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	0a1b      	lsrs	r3, r3, #8
 800a2f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2f8:	697b      	ldr	r3, [r7, #20]
 800a2fa:	fa93 f3a3 	rbit	r3, r3
 800a2fe:	613b      	str	r3, [r7, #16]
  return result;
 800a300:	693b      	ldr	r3, [r7, #16]
 800a302:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a304:	69bb      	ldr	r3, [r7, #24]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d101      	bne.n	800a30e <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800a30a:	2320      	movs	r3, #32
 800a30c:	e003      	b.n	800a316 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800a30e:	69bb      	ldr	r3, [r7, #24]
 800a310:	fab3 f383 	clz	r3, r3
 800a314:	b2db      	uxtb	r3, r3
 800a316:	009b      	lsls	r3, r3, #2
 800a318:	210f      	movs	r1, #15
 800a31a:	fa01 f303 	lsl.w	r3, r1, r3
 800a31e:	43db      	mvns	r3, r3
 800a320:	401a      	ands	r2, r3
 800a322:	68bb      	ldr	r3, [r7, #8]
 800a324:	0a1b      	lsrs	r3, r3, #8
 800a326:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a328:	6a3b      	ldr	r3, [r7, #32]
 800a32a:	fa93 f3a3 	rbit	r3, r3
 800a32e:	61fb      	str	r3, [r7, #28]
  return result;
 800a330:	69fb      	ldr	r3, [r7, #28]
 800a332:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a336:	2b00      	cmp	r3, #0
 800a338:	d101      	bne.n	800a33e <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800a33a:	2320      	movs	r3, #32
 800a33c:	e003      	b.n	800a346 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800a33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a340:	fab3 f383 	clz	r3, r3
 800a344:	b2db      	uxtb	r3, r3
 800a346:	009b      	lsls	r3, r3, #2
 800a348:	6879      	ldr	r1, [r7, #4]
 800a34a:	fa01 f303 	lsl.w	r3, r1, r3
 800a34e:	431a      	orrs	r2, r3
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800a354:	bf00      	nop
 800a356:	372c      	adds	r7, #44	; 0x2c
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr

0800a360 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b08a      	sub	sp, #40	; 0x28
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a370:	69bb      	ldr	r3, [r7, #24]
 800a372:	fa93 f3a3 	rbit	r3, r3
 800a376:	617b      	str	r3, [r7, #20]
  return result;
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d101      	bne.n	800a386 <LL_GPIO_Init+0x26>
    return 32U;
 800a382:	2320      	movs	r3, #32
 800a384:	e003      	b.n	800a38e <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800a386:	69fb      	ldr	r3, [r7, #28]
 800a388:	fab3 f383 	clz	r3, r3
 800a38c:	b2db      	uxtb	r3, r3
 800a38e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800a390:	e050      	b.n	800a434 <LL_GPIO_Init+0xd4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	2101      	movs	r1, #1
 800a398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a39a:	fa01 f303 	lsl.w	r3, r1, r3
 800a39e:	4013      	ands	r3, r2
 800a3a0:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800a3a2:	6a3b      	ldr	r3, [r7, #32]
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d042      	beq.n	800a42e <LL_GPIO_Init+0xce>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	6a39      	ldr	r1, [r7, #32]
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f7ff fe8a 	bl	800a0ca <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	2b01      	cmp	r3, #1
 800a3bc:	d003      	beq.n	800a3c6 <LL_GPIO_Init+0x66>
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	2b02      	cmp	r3, #2
 800a3c4:	d106      	bne.n	800a3d4 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	689b      	ldr	r3, [r3, #8]
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	6a39      	ldr	r1, [r7, #32]
 800a3ce:	6878      	ldr	r0, [r7, #4]
 800a3d0:	f7ff fed0 	bl	800a174 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	691b      	ldr	r3, [r3, #16]
 800a3d8:	461a      	mov	r2, r3
 800a3da:	6a39      	ldr	r1, [r7, #32]
 800a3dc:	6878      	ldr	r0, [r7, #4]
 800a3de:	f7ff ff06 	bl	800a1ee <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	685b      	ldr	r3, [r3, #4]
 800a3e6:	2b02      	cmp	r3, #2
 800a3e8:	d121      	bne.n	800a42e <LL_GPIO_Init+0xce>
 800a3ea:	6a3b      	ldr	r3, [r7, #32]
 800a3ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	fa93 f3a3 	rbit	r3, r3
 800a3f4:	60bb      	str	r3, [r7, #8]
  return result;
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d101      	bne.n	800a404 <LL_GPIO_Init+0xa4>
    return 32U;
 800a400:	2320      	movs	r3, #32
 800a402:	e003      	b.n	800a40c <LL_GPIO_Init+0xac>
  return __builtin_clz(value);
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	fab3 f383 	clz	r3, r3
 800a40a:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800a40c:	2b07      	cmp	r3, #7
 800a40e:	d807      	bhi.n	800a420 <LL_GPIO_Init+0xc0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a410:	683b      	ldr	r3, [r7, #0]
 800a412:	695b      	ldr	r3, [r3, #20]
 800a414:	461a      	mov	r2, r3
 800a416:	6a39      	ldr	r1, [r7, #32]
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f7ff ff25 	bl	800a268 <LL_GPIO_SetAFPin_0_7>
 800a41e:	e006      	b.n	800a42e <LL_GPIO_Init+0xce>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	695b      	ldr	r3, [r3, #20]
 800a424:	461a      	mov	r2, r3
 800a426:	6a39      	ldr	r1, [r7, #32]
 800a428:	6878      	ldr	r0, [r7, #4]
 800a42a:	f7ff ff5a 	bl	800a2e2 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800a42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a430:	3301      	adds	r3, #1
 800a432:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a43a:	fa22 f303 	lsr.w	r3, r2, r3
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d1a7      	bne.n	800a392 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	2b01      	cmp	r3, #1
 800a448:	d003      	beq.n	800a452 <LL_GPIO_Init+0xf2>
 800a44a:	683b      	ldr	r3, [r7, #0]
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	2b02      	cmp	r3, #2
 800a450:	d107      	bne.n	800a462 <LL_GPIO_Init+0x102>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	6819      	ldr	r1, [r3, #0]
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	68db      	ldr	r3, [r3, #12]
 800a45a:	461a      	mov	r2, r3
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f7ff fe71 	bl	800a144 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800a462:	2300      	movs	r3, #0
}
 800a464:	4618      	mov	r0, r3
 800a466:	3728      	adds	r7, #40	; 0x28
 800a468:	46bd      	mov	sp, r7
 800a46a:	bd80      	pop	{r7, pc}

0800a46c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a46c:	b084      	sub	sp, #16
 800a46e:	b580      	push	{r7, lr}
 800a470:	b084      	sub	sp, #16
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
 800a476:	f107 001c 	add.w	r0, r7, #28
 800a47a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	68db      	ldr	r3, [r3, #12]
 800a482:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800a48a:	6878      	ldr	r0, [r7, #4]
 800a48c:	f000 fa72 	bl	800a974 <USB_CoreReset>
 800a490:	4603      	mov	r3, r0
 800a492:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800a494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a496:	2b00      	cmp	r3, #0
 800a498:	d106      	bne.n	800a4a8 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a49e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	639a      	str	r2, [r3, #56]	; 0x38
 800a4a6:	e005      	b.n	800a4b4 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4ac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

  return ret;
 800a4b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3710      	adds	r7, #16
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a4c0:	b004      	add	sp, #16
 800a4c2:	4770      	bx	lr

0800a4c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b083      	sub	sp, #12
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	689b      	ldr	r3, [r3, #8]
 800a4d0:	f023 0201 	bic.w	r2, r3, #1
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	370c      	adds	r7, #12
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr

0800a4e6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b084      	sub	sp, #16
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	68db      	ldr	r3, [r3, #12]
 800a4fa:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a502:	78fb      	ldrb	r3, [r7, #3]
 800a504:	2b01      	cmp	r3, #1
 800a506:	d115      	bne.n	800a534 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	68db      	ldr	r3, [r3, #12]
 800a50c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a514:	2001      	movs	r0, #1
 800a516:	f7f7 fd9f 	bl	8002058 <HAL_Delay>
      ms++;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	3301      	adds	r3, #1
 800a51e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 fa19 	bl	800a958 <USB_GetMode>
 800a526:	4603      	mov	r3, r0
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d01e      	beq.n	800a56a <USB_SetCurrentMode+0x84>
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	2b31      	cmp	r3, #49	; 0x31
 800a530:	d9f0      	bls.n	800a514 <USB_SetCurrentMode+0x2e>
 800a532:	e01a      	b.n	800a56a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a534:	78fb      	ldrb	r3, [r7, #3]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d115      	bne.n	800a566 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a546:	2001      	movs	r0, #1
 800a548:	f7f7 fd86 	bl	8002058 <HAL_Delay>
      ms++;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	3301      	adds	r3, #1
 800a550:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f000 fa00 	bl	800a958 <USB_GetMode>
 800a558:	4603      	mov	r3, r0
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d005      	beq.n	800a56a <USB_SetCurrentMode+0x84>
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2b31      	cmp	r3, #49	; 0x31
 800a562:	d9f0      	bls.n	800a546 <USB_SetCurrentMode+0x60>
 800a564:	e001      	b.n	800a56a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a566:	2301      	movs	r3, #1
 800a568:	e005      	b.n	800a576 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	2b32      	cmp	r3, #50	; 0x32
 800a56e:	d101      	bne.n	800a574 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a570:	2301      	movs	r3, #1
 800a572:	e000      	b.n	800a576 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a574:	2300      	movs	r3, #0
}
 800a576:	4618      	mov	r0, r3
 800a578:	3710      	adds	r7, #16
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}
	...

0800a580 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a580:	b084      	sub	sp, #16
 800a582:	b580      	push	{r7, lr}
 800a584:	b086      	sub	sp, #24
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
 800a58a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a58e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a592:	2300      	movs	r3, #0
 800a594:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a59a:	2300      	movs	r3, #0
 800a59c:	613b      	str	r3, [r7, #16]
 800a59e:	e009      	b.n	800a5b4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a5a0:	687a      	ldr	r2, [r7, #4]
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	3340      	adds	r3, #64	; 0x40
 800a5a6:	009b      	lsls	r3, r3, #2
 800a5a8:	4413      	add	r3, r2
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	613b      	str	r3, [r7, #16]
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	2b0e      	cmp	r3, #14
 800a5b8:	d9f2      	bls.n	800a5a0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a5ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d11c      	bne.n	800a5fa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a5c6:	685b      	ldr	r3, [r3, #4]
 800a5c8:	68fa      	ldr	r2, [r7, #12]
 800a5ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a5ce:	f043 0302 	orr.w	r3, r3, #2
 800a5d2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5d8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	639a      	str	r2, [r3, #56]	; 0x38
    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	601a      	str	r2, [r3, #0]
 800a5f8:	e005      	b.n	800a606 <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5fe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a60c:	461a      	mov	r2, r3
 800a60e:	2300      	movs	r3, #0
 800a610:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a618:	4619      	mov	r1, r3
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a620:	461a      	mov	r2, r3
 800a622:	680b      	ldr	r3, [r1, #0]
 800a624:	6013      	str	r3, [r2, #0]
  }
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a626:	2103      	movs	r1, #3
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 f95b 	bl	800a8e4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a62e:	2110      	movs	r1, #16
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 f8f3 	bl	800a81c <USB_FlushTxFifo>
 800a636:	4603      	mov	r3, r0
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d001      	beq.n	800a640 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800a63c:	2301      	movs	r3, #1
 800a63e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 f91f 	bl	800a884 <USB_FlushRxFifo>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d001      	beq.n	800a650 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800a64c:	2301      	movs	r3, #1
 800a64e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a656:	461a      	mov	r2, r3
 800a658:	2300      	movs	r3, #0
 800a65a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a662:	461a      	mov	r2, r3
 800a664:	2300      	movs	r3, #0
 800a666:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a66e:	461a      	mov	r2, r3
 800a670:	2300      	movs	r3, #0
 800a672:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a674:	2300      	movs	r3, #0
 800a676:	613b      	str	r3, [r7, #16]
 800a678:	e043      	b.n	800a702 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	015a      	lsls	r2, r3, #5
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	4413      	add	r3, r2
 800a682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a68c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a690:	d118      	bne.n	800a6c4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800a692:	693b      	ldr	r3, [r7, #16]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d10a      	bne.n	800a6ae <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a698:	693b      	ldr	r3, [r7, #16]
 800a69a:	015a      	lsls	r2, r3, #5
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	4413      	add	r3, r2
 800a6a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a6aa:	6013      	str	r3, [r2, #0]
 800a6ac:	e013      	b.n	800a6d6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a6ae:	693b      	ldr	r3, [r7, #16]
 800a6b0:	015a      	lsls	r2, r3, #5
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	4413      	add	r3, r2
 800a6b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a6c0:	6013      	str	r3, [r2, #0]
 800a6c2:	e008      	b.n	800a6d6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a6c4:	693b      	ldr	r3, [r7, #16]
 800a6c6:	015a      	lsls	r2, r3, #5
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	4413      	add	r3, r2
 800a6cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	015a      	lsls	r2, r3, #5
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	4413      	add	r3, r2
 800a6de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	015a      	lsls	r2, r3, #5
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	4413      	add	r3, r2
 800a6f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a6fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	3301      	adds	r3, #1
 800a700:	613b      	str	r3, [r7, #16]
 800a702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a704:	693a      	ldr	r2, [r7, #16]
 800a706:	429a      	cmp	r2, r3
 800a708:	d3b7      	bcc.n	800a67a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a70a:	2300      	movs	r3, #0
 800a70c:	613b      	str	r3, [r7, #16]
 800a70e:	e043      	b.n	800a798 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a710:	693b      	ldr	r3, [r7, #16]
 800a712:	015a      	lsls	r2, r3, #5
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	4413      	add	r3, r2
 800a718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a722:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a726:	d118      	bne.n	800a75a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800a728:	693b      	ldr	r3, [r7, #16]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d10a      	bne.n	800a744 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a72e:	693b      	ldr	r3, [r7, #16]
 800a730:	015a      	lsls	r2, r3, #5
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	4413      	add	r3, r2
 800a736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a73a:	461a      	mov	r2, r3
 800a73c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a740:	6013      	str	r3, [r2, #0]
 800a742:	e013      	b.n	800a76c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	015a      	lsls	r2, r3, #5
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	4413      	add	r3, r2
 800a74c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a750:	461a      	mov	r2, r3
 800a752:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a756:	6013      	str	r3, [r2, #0]
 800a758:	e008      	b.n	800a76c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	015a      	lsls	r2, r3, #5
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	4413      	add	r3, r2
 800a762:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a766:	461a      	mov	r2, r3
 800a768:	2300      	movs	r3, #0
 800a76a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	015a      	lsls	r2, r3, #5
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	4413      	add	r3, r2
 800a774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a778:	461a      	mov	r2, r3
 800a77a:	2300      	movs	r3, #0
 800a77c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	015a      	lsls	r2, r3, #5
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	4413      	add	r3, r2
 800a786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a78a:	461a      	mov	r2, r3
 800a78c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a790:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	3301      	adds	r3, #1
 800a796:	613b      	str	r3, [r7, #16]
 800a798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a79a:	693a      	ldr	r2, [r7, #16]
 800a79c:	429a      	cmp	r2, r3
 800a79e:	d3b7      	bcc.n	800a710 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7a6:	691b      	ldr	r3, [r3, #16]
 800a7a8:	68fa      	ldr	r2, [r7, #12]
 800a7aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a7ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7b2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a7c0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a7c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d105      	bne.n	800a7d4 <USB_DevInit+0x254>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	699b      	ldr	r3, [r3, #24]
 800a7cc:	f043 0210 	orr.w	r2, r3, #16
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	699a      	ldr	r2, [r3, #24]
 800a7d8:	4b0f      	ldr	r3, [pc, #60]	; (800a818 <USB_DevInit+0x298>)
 800a7da:	4313      	orrs	r3, r2
 800a7dc:	687a      	ldr	r2, [r7, #4]
 800a7de:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a7e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d005      	beq.n	800a7f2 <USB_DevInit+0x272>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	699b      	ldr	r3, [r3, #24]
 800a7ea:	f043 0208 	orr.w	r2, r3, #8
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a7f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d107      	bne.n	800a808 <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	699b      	ldr	r3, [r3, #24]
 800a7fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a800:	f043 0304 	orr.w	r3, r3, #4
 800a804:	687a      	ldr	r2, [r7, #4]
 800a806:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a808:	7dfb      	ldrb	r3, [r7, #23]
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3718      	adds	r7, #24
 800a80e:	46bd      	mov	sp, r7
 800a810:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a814:	b004      	add	sp, #16
 800a816:	4770      	bx	lr
 800a818:	803c3800 	.word	0x803c3800

0800a81c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b085      	sub	sp, #20
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a826:	2300      	movs	r3, #0
 800a828:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	3301      	adds	r3, #1
 800a82e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	4a13      	ldr	r2, [pc, #76]	; (800a880 <USB_FlushTxFifo+0x64>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d901      	bls.n	800a83c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a838:	2303      	movs	r3, #3
 800a83a:	e01b      	b.n	800a874 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	691b      	ldr	r3, [r3, #16]
 800a840:	2b00      	cmp	r3, #0
 800a842:	daf2      	bge.n	800a82a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a844:	2300      	movs	r3, #0
 800a846:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	019b      	lsls	r3, r3, #6
 800a84c:	f043 0220 	orr.w	r2, r3, #32
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	3301      	adds	r3, #1
 800a858:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	4a08      	ldr	r2, [pc, #32]	; (800a880 <USB_FlushTxFifo+0x64>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d901      	bls.n	800a866 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a862:	2303      	movs	r3, #3
 800a864:	e006      	b.n	800a874 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	691b      	ldr	r3, [r3, #16]
 800a86a:	f003 0320 	and.w	r3, r3, #32
 800a86e:	2b20      	cmp	r3, #32
 800a870:	d0f0      	beq.n	800a854 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a872:	2300      	movs	r3, #0
}
 800a874:	4618      	mov	r0, r3
 800a876:	3714      	adds	r7, #20
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr
 800a880:	00030d40 	.word	0x00030d40

0800a884 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a884:	b480      	push	{r7}
 800a886:	b085      	sub	sp, #20
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a88c:	2300      	movs	r3, #0
 800a88e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	3301      	adds	r3, #1
 800a894:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	4a11      	ldr	r2, [pc, #68]	; (800a8e0 <USB_FlushRxFifo+0x5c>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d901      	bls.n	800a8a2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a89e:	2303      	movs	r3, #3
 800a8a0:	e018      	b.n	800a8d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	691b      	ldr	r3, [r3, #16]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	daf2      	bge.n	800a890 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2210      	movs	r2, #16
 800a8b2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	3301      	adds	r3, #1
 800a8b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	4a08      	ldr	r2, [pc, #32]	; (800a8e0 <USB_FlushRxFifo+0x5c>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d901      	bls.n	800a8c6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a8c2:	2303      	movs	r3, #3
 800a8c4:	e006      	b.n	800a8d4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	691b      	ldr	r3, [r3, #16]
 800a8ca:	f003 0310 	and.w	r3, r3, #16
 800a8ce:	2b10      	cmp	r3, #16
 800a8d0:	d0f0      	beq.n	800a8b4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a8d2:	2300      	movs	r3, #0
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3714      	adds	r7, #20
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr
 800a8e0:	00030d40 	.word	0x00030d40

0800a8e4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b085      	sub	sp, #20
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
 800a8ec:	460b      	mov	r3, r1
 800a8ee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8fa:	681a      	ldr	r2, [r3, #0]
 800a8fc:	78fb      	ldrb	r3, [r7, #3]
 800a8fe:	68f9      	ldr	r1, [r7, #12]
 800a900:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a904:	4313      	orrs	r3, r2
 800a906:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a908:	2300      	movs	r3, #0
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3714      	adds	r7, #20
 800a90e:	46bd      	mov	sp, r7
 800a910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a914:	4770      	bx	lr

0800a916 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a916:	b480      	push	{r7}
 800a918:	b085      	sub	sp, #20
 800a91a:	af00      	add	r7, sp, #0
 800a91c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	68fa      	ldr	r2, [r7, #12]
 800a92c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a930:	f023 0303 	bic.w	r3, r3, #3
 800a934:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	68fa      	ldr	r2, [r7, #12]
 800a940:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a944:	f043 0302 	orr.w	r3, r3, #2
 800a948:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a94a:	2300      	movs	r3, #0
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3714      	adds	r7, #20
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr

0800a958 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a958:	b480      	push	{r7}
 800a95a:	b083      	sub	sp, #12
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	695b      	ldr	r3, [r3, #20]
 800a964:	f003 0301 	and.w	r3, r3, #1
}
 800a968:	4618      	mov	r0, r3
 800a96a:	370c      	adds	r7, #12
 800a96c:	46bd      	mov	sp, r7
 800a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a972:	4770      	bx	lr

0800a974 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a974:	b480      	push	{r7}
 800a976:	b085      	sub	sp, #20
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a97c:	2300      	movs	r3, #0
 800a97e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	3301      	adds	r3, #1
 800a984:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	4a13      	ldr	r2, [pc, #76]	; (800a9d8 <USB_CoreReset+0x64>)
 800a98a:	4293      	cmp	r3, r2
 800a98c:	d901      	bls.n	800a992 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a98e:	2303      	movs	r3, #3
 800a990:	e01b      	b.n	800a9ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	691b      	ldr	r3, [r3, #16]
 800a996:	2b00      	cmp	r3, #0
 800a998:	daf2      	bge.n	800a980 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a99a:	2300      	movs	r3, #0
 800a99c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	691b      	ldr	r3, [r3, #16]
 800a9a2:	f043 0201 	orr.w	r2, r3, #1
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	4a09      	ldr	r2, [pc, #36]	; (800a9d8 <USB_CoreReset+0x64>)
 800a9b4:	4293      	cmp	r3, r2
 800a9b6:	d901      	bls.n	800a9bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a9b8:	2303      	movs	r3, #3
 800a9ba:	e006      	b.n	800a9ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	691b      	ldr	r3, [r3, #16]
 800a9c0:	f003 0301 	and.w	r3, r3, #1
 800a9c4:	2b01      	cmp	r3, #1
 800a9c6:	d0f0      	beq.n	800a9aa <USB_CoreReset+0x36>

  return HAL_OK;
 800a9c8:	2300      	movs	r3, #0
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3714      	adds	r7, #20
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr
 800a9d6:	bf00      	nop
 800a9d8:	00030d40 	.word	0x00030d40

0800a9dc <__libc_init_array>:
 800a9dc:	b570      	push	{r4, r5, r6, lr}
 800a9de:	4d0d      	ldr	r5, [pc, #52]	; (800aa14 <__libc_init_array+0x38>)
 800a9e0:	2600      	movs	r6, #0
 800a9e2:	4c0d      	ldr	r4, [pc, #52]	; (800aa18 <__libc_init_array+0x3c>)
 800a9e4:	1b64      	subs	r4, r4, r5
 800a9e6:	10a4      	asrs	r4, r4, #2
 800a9e8:	42a6      	cmp	r6, r4
 800a9ea:	d109      	bne.n	800aa00 <__libc_init_array+0x24>
 800a9ec:	4d0b      	ldr	r5, [pc, #44]	; (800aa1c <__libc_init_array+0x40>)
 800a9ee:	2600      	movs	r6, #0
 800a9f0:	4c0b      	ldr	r4, [pc, #44]	; (800aa20 <__libc_init_array+0x44>)
 800a9f2:	f000 f81f 	bl	800aa34 <_init>
 800a9f6:	1b64      	subs	r4, r4, r5
 800a9f8:	10a4      	asrs	r4, r4, #2
 800a9fa:	42a6      	cmp	r6, r4
 800a9fc:	d105      	bne.n	800aa0a <__libc_init_array+0x2e>
 800a9fe:	bd70      	pop	{r4, r5, r6, pc}
 800aa00:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa04:	3601      	adds	r6, #1
 800aa06:	4798      	blx	r3
 800aa08:	e7ee      	b.n	800a9e8 <__libc_init_array+0xc>
 800aa0a:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa0e:	3601      	adds	r6, #1
 800aa10:	4798      	blx	r3
 800aa12:	e7f2      	b.n	800a9fa <__libc_init_array+0x1e>
 800aa14:	0800aba0 	.word	0x0800aba0
 800aa18:	0800aba0 	.word	0x0800aba0
 800aa1c:	0800aba0 	.word	0x0800aba0
 800aa20:	0800aba4 	.word	0x0800aba4

0800aa24 <memset>:
 800aa24:	4402      	add	r2, r0
 800aa26:	4603      	mov	r3, r0
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d100      	bne.n	800aa2e <memset+0xa>
 800aa2c:	4770      	bx	lr
 800aa2e:	f803 1b01 	strb.w	r1, [r3], #1
 800aa32:	e7f9      	b.n	800aa28 <memset+0x4>

0800aa34 <_init>:
 800aa34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa36:	bf00      	nop
 800aa38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa3a:	bc08      	pop	{r3}
 800aa3c:	469e      	mov	lr, r3
 800aa3e:	4770      	bx	lr

0800aa40 <_fini>:
 800aa40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa42:	bf00      	nop
 800aa44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa46:	bc08      	pop	{r3}
 800aa48:	469e      	mov	lr, r3
 800aa4a:	4770      	bx	lr
