
PWM_TRIAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c454  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000818  0800c690  0800c690  0001c690  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800cea8  0800cea8  0001cea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ceb0  0800ceb0  0001ceb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ceb4  0800ceb4  0001ceb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  0800ceb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000095c  20000070  0800cf28  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  200009cc  0800cf28  000209cc  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00027551  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000040be  00000000  00000000  000475f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001ea8  00000000  00000000  0004b6b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001d20  00000000  00000000  0004d560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000395b2  00000000  00000000  0004f280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000280ee  00000000  00000000  00088832  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016c687  00000000  00000000  000b0920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0021cfa7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008c28  00000000  00000000  0021cff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000070 	.word	0x20000070
 8000254:	00000000 	.word	0x00000000
 8000258:	0800c674 	.word	0x0800c674

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000074 	.word	0x20000074
 8000274:	0800c674 	.word	0x0800c674

08000278 <strlen>:
 8000278:	4603      	mov	r3, r0
 800027a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800027e:	2a00      	cmp	r2, #0
 8000280:	d1fb      	bne.n	800027a <strlen+0x2>
 8000282:	1a18      	subs	r0, r3, r0
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	; 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	3c01      	subs	r4, #1
 80003c4:	bf28      	it	cs
 80003c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003ca:	d2e9      	bcs.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000572:	bf08      	it	eq
 8000574:	4770      	bxeq	lr
 8000576:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800057a:	bf04      	itt	eq
 800057c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e71c      	b.n	80003cc <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aed8 	beq.w	800037a <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6bd      	b.n	800037a <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_d2f>:
 8000bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb8:	bf24      	itt	cs
 8000bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bc2:	d90d      	bls.n	8000be0 <__aeabi_d2f+0x30>
 8000bc4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd8:	bf08      	it	eq
 8000bda:	f020 0001 	biceq.w	r0, r0, #1
 8000bde:	4770      	bx	lr
 8000be0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be4:	d121      	bne.n	8000c2a <__aeabi_d2f+0x7a>
 8000be6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bea:	bfbc      	itt	lt
 8000bec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	4770      	bxlt	lr
 8000bf2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfa:	f1c2 0218 	rsb	r2, r2, #24
 8000bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8000c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c06:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0a:	bf18      	it	ne
 8000c0c:	f040 0001 	orrne.w	r0, r0, #1
 8000c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c1c:	ea40 000c 	orr.w	r0, r0, ip
 8000c20:	fa23 f302 	lsr.w	r3, r3, r2
 8000c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c28:	e7cc      	b.n	8000bc4 <__aeabi_d2f+0x14>
 8000c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2e:	d107      	bne.n	8000c40 <__aeabi_d2f+0x90>
 8000c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c34:	bf1e      	ittt	ne
 8000c36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3e:	4770      	bxne	lr
 8000c40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <__aeabi_uldivmod>:
 8000c50:	b953      	cbnz	r3, 8000c68 <__aeabi_uldivmod+0x18>
 8000c52:	b94a      	cbnz	r2, 8000c68 <__aeabi_uldivmod+0x18>
 8000c54:	2900      	cmp	r1, #0
 8000c56:	bf08      	it	eq
 8000c58:	2800      	cmpeq	r0, #0
 8000c5a:	bf1c      	itt	ne
 8000c5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c60:	f04f 30ff 	movne.w	r0, #4294967295
 8000c64:	f000 b982 	b.w	8000f6c <__aeabi_idiv0>
 8000c68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c70:	f000 f806 	bl	8000c80 <__udivmoddi4>
 8000c74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7c:	b004      	add	sp, #16
 8000c7e:	4770      	bx	lr

08000c80 <__udivmoddi4>:
 8000c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c84:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000c86:	4604      	mov	r4, r0
 8000c88:	460f      	mov	r7, r1
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d148      	bne.n	8000d20 <__udivmoddi4+0xa0>
 8000c8e:	428a      	cmp	r2, r1
 8000c90:	4694      	mov	ip, r2
 8000c92:	d961      	bls.n	8000d58 <__udivmoddi4+0xd8>
 8000c94:	fab2 f382 	clz	r3, r2
 8000c98:	b143      	cbz	r3, 8000cac <__udivmoddi4+0x2c>
 8000c9a:	f1c3 0120 	rsb	r1, r3, #32
 8000c9e:	409f      	lsls	r7, r3
 8000ca0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	fa20 f101 	lsr.w	r1, r0, r1
 8000caa:	430f      	orrs	r7, r1
 8000cac:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000cb0:	fa1f fe8c 	uxth.w	lr, ip
 8000cb4:	0c22      	lsrs	r2, r4, #16
 8000cb6:	fbb7 f6f1 	udiv	r6, r7, r1
 8000cba:	fb01 7716 	mls	r7, r1, r6, r7
 8000cbe:	fb06 f00e 	mul.w	r0, r6, lr
 8000cc2:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cc6:	4290      	cmp	r0, r2
 8000cc8:	d908      	bls.n	8000cdc <__udivmoddi4+0x5c>
 8000cca:	eb1c 0202 	adds.w	r2, ip, r2
 8000cce:	f106 37ff 	add.w	r7, r6, #4294967295
 8000cd2:	d202      	bcs.n	8000cda <__udivmoddi4+0x5a>
 8000cd4:	4290      	cmp	r0, r2
 8000cd6:	f200 8137 	bhi.w	8000f48 <__udivmoddi4+0x2c8>
 8000cda:	463e      	mov	r6, r7
 8000cdc:	1a12      	subs	r2, r2, r0
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb2 f0f1 	udiv	r0, r2, r1
 8000ce4:	fb01 2210 	mls	r2, r1, r0, r2
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	d908      	bls.n	8000d06 <__udivmoddi4+0x86>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfc:	d202      	bcs.n	8000d04 <__udivmoddi4+0x84>
 8000cfe:	45a6      	cmp	lr, r4
 8000d00:	f200 811c 	bhi.w	8000f3c <__udivmoddi4+0x2bc>
 8000d04:	4610      	mov	r0, r2
 8000d06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0a:	eba4 040e 	sub.w	r4, r4, lr
 8000d0e:	2600      	movs	r6, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0x9a>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1a:	4631      	mov	r1, r6
 8000d1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d20:	428b      	cmp	r3, r1
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0xb8>
 8000d24:	2d00      	cmp	r5, #0
 8000d26:	f000 80fd 	beq.w	8000f24 <__udivmoddi4+0x2a4>
 8000d2a:	2600      	movs	r6, #0
 8000d2c:	e9c5 0100 	strd	r0, r1, [r5]
 8000d30:	4630      	mov	r0, r6
 8000d32:	4631      	mov	r1, r6
 8000d34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d38:	fab3 f683 	clz	r6, r3
 8000d3c:	2e00      	cmp	r6, #0
 8000d3e:	d14b      	bne.n	8000dd8 <__udivmoddi4+0x158>
 8000d40:	428b      	cmp	r3, r1
 8000d42:	f0c0 80f2 	bcc.w	8000f2a <__udivmoddi4+0x2aa>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f240 80ef 	bls.w	8000f2a <__udivmoddi4+0x2aa>
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	2d00      	cmp	r5, #0
 8000d50:	d0e3      	beq.n	8000d1a <__udivmoddi4+0x9a>
 8000d52:	e9c5 4700 	strd	r4, r7, [r5]
 8000d56:	e7e0      	b.n	8000d1a <__udivmoddi4+0x9a>
 8000d58:	b902      	cbnz	r2, 8000d5c <__udivmoddi4+0xdc>
 8000d5a:	deff      	udf	#255	; 0xff
 8000d5c:	fab2 f382 	clz	r3, r2
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	f040 809d 	bne.w	8000ea0 <__udivmoddi4+0x220>
 8000d66:	1a89      	subs	r1, r1, r2
 8000d68:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000d6c:	b297      	uxth	r7, r2
 8000d6e:	2601      	movs	r6, #1
 8000d70:	0c20      	lsrs	r0, r4, #16
 8000d72:	fbb1 f2fe 	udiv	r2, r1, lr
 8000d76:	fb0e 1112 	mls	r1, lr, r2, r1
 8000d7a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7e:	fb07 f002 	mul.w	r0, r7, r2
 8000d82:	4288      	cmp	r0, r1
 8000d84:	d90f      	bls.n	8000da6 <__udivmoddi4+0x126>
 8000d86:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8a:	f102 38ff 	add.w	r8, r2, #4294967295
 8000d8e:	bf2c      	ite	cs
 8000d90:	f04f 0901 	movcs.w	r9, #1
 8000d94:	f04f 0900 	movcc.w	r9, #0
 8000d98:	4288      	cmp	r0, r1
 8000d9a:	d903      	bls.n	8000da4 <__udivmoddi4+0x124>
 8000d9c:	f1b9 0f00 	cmp.w	r9, #0
 8000da0:	f000 80cf 	beq.w	8000f42 <__udivmoddi4+0x2c2>
 8000da4:	4642      	mov	r2, r8
 8000da6:	1a09      	subs	r1, r1, r0
 8000da8:	b2a4      	uxth	r4, r4
 8000daa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dae:	fb0e 1110 	mls	r1, lr, r0, r1
 8000db2:	fb00 f707 	mul.w	r7, r0, r7
 8000db6:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dba:	42a7      	cmp	r7, r4
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x150>
 8000dbe:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc2:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x14e>
 8000dc8:	42a7      	cmp	r7, r4
 8000dca:	f200 80b4 	bhi.w	8000f36 <__udivmoddi4+0x2b6>
 8000dce:	4608      	mov	r0, r1
 8000dd0:	1be4      	subs	r4, r4, r7
 8000dd2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000dd6:	e79b      	b.n	8000d10 <__udivmoddi4+0x90>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa01 f406 	lsl.w	r4, r1, r6
 8000de2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de6:	40f9      	lsrs	r1, r7
 8000de8:	40b2      	lsls	r2, r6
 8000dea:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dee:	fa20 f307 	lsr.w	r3, r0, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	431c      	orrs	r4, r3
 8000df8:	fa1f fe8c 	uxth.w	lr, ip
 8000dfc:	fa00 f306 	lsl.w	r3, r0, r6
 8000e00:	0c20      	lsrs	r0, r4, #16
 8000e02:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e06:	fb09 1118 	mls	r1, r9, r8, r1
 8000e0a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0e:	fb08 f00e 	mul.w	r0, r8, lr
 8000e12:	4288      	cmp	r0, r1
 8000e14:	d90f      	bls.n	8000e36 <__udivmoddi4+0x1b6>
 8000e16:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1a:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e1e:	bf2c      	ite	cs
 8000e20:	f04f 0b01 	movcs.w	fp, #1
 8000e24:	f04f 0b00 	movcc.w	fp, #0
 8000e28:	4288      	cmp	r0, r1
 8000e2a:	d903      	bls.n	8000e34 <__udivmoddi4+0x1b4>
 8000e2c:	f1bb 0f00 	cmp.w	fp, #0
 8000e30:	f000 808d 	beq.w	8000f4e <__udivmoddi4+0x2ce>
 8000e34:	46d0      	mov	r8, sl
 8000e36:	1a09      	subs	r1, r1, r0
 8000e38:	b2a4      	uxth	r4, r4
 8000e3a:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e3e:	fb09 1110 	mls	r1, r9, r0, r1
 8000e42:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e46:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e4a:	458e      	cmp	lr, r1
 8000e4c:	d907      	bls.n	8000e5e <__udivmoddi4+0x1de>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e56:	d201      	bcs.n	8000e5c <__udivmoddi4+0x1dc>
 8000e58:	458e      	cmp	lr, r1
 8000e5a:	d87f      	bhi.n	8000f5c <__udivmoddi4+0x2dc>
 8000e5c:	4620      	mov	r0, r4
 8000e5e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	fba0 9802 	umull	r9, r8, r0, r2
 8000e6a:	4541      	cmp	r1, r8
 8000e6c:	464c      	mov	r4, r9
 8000e6e:	46c6      	mov	lr, r8
 8000e70:	d302      	bcc.n	8000e78 <__udivmoddi4+0x1f8>
 8000e72:	d106      	bne.n	8000e82 <__udivmoddi4+0x202>
 8000e74:	454b      	cmp	r3, r9
 8000e76:	d204      	bcs.n	8000e82 <__udivmoddi4+0x202>
 8000e78:	3801      	subs	r0, #1
 8000e7a:	ebb9 0402 	subs.w	r4, r9, r2
 8000e7e:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000e82:	2d00      	cmp	r5, #0
 8000e84:	d070      	beq.n	8000f68 <__udivmoddi4+0x2e8>
 8000e86:	1b1a      	subs	r2, r3, r4
 8000e88:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8c:	fa22 f306 	lsr.w	r3, r2, r6
 8000e90:	fa01 f707 	lsl.w	r7, r1, r7
 8000e94:	40f1      	lsrs	r1, r6
 8000e96:	2600      	movs	r6, #0
 8000e98:	431f      	orrs	r7, r3
 8000e9a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9e:	e73c      	b.n	8000d1a <__udivmoddi4+0x9a>
 8000ea0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ea4:	f1c3 0020 	rsb	r0, r3, #32
 8000ea8:	fa01 f203 	lsl.w	r2, r1, r3
 8000eac:	fa21 f600 	lsr.w	r6, r1, r0
 8000eb0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000eb4:	fa24 f100 	lsr.w	r1, r4, r0
 8000eb8:	fa1f f78c 	uxth.w	r7, ip
 8000ebc:	409c      	lsls	r4, r3
 8000ebe:	4311      	orrs	r1, r2
 8000ec0:	fbb6 f0fe 	udiv	r0, r6, lr
 8000ec4:	0c0a      	lsrs	r2, r1, #16
 8000ec6:	fb0e 6610 	mls	r6, lr, r0, r6
 8000eca:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 8000ece:	fb00 f607 	mul.w	r6, r0, r7
 8000ed2:	4296      	cmp	r6, r2
 8000ed4:	d90e      	bls.n	8000ef4 <__udivmoddi4+0x274>
 8000ed6:	eb1c 0202 	adds.w	r2, ip, r2
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	bf2c      	ite	cs
 8000ee0:	f04f 0901 	movcs.w	r9, #1
 8000ee4:	f04f 0900 	movcc.w	r9, #0
 8000ee8:	4296      	cmp	r6, r2
 8000eea:	d902      	bls.n	8000ef2 <__udivmoddi4+0x272>
 8000eec:	f1b9 0f00 	cmp.w	r9, #0
 8000ef0:	d031      	beq.n	8000f56 <__udivmoddi4+0x2d6>
 8000ef2:	4640      	mov	r0, r8
 8000ef4:	1b92      	subs	r2, r2, r6
 8000ef6:	b289      	uxth	r1, r1
 8000ef8:	fbb2 f6fe 	udiv	r6, r2, lr
 8000efc:	fb0e 2216 	mls	r2, lr, r6, r2
 8000f00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000f04:	fb06 f207 	mul.w	r2, r6, r7
 8000f08:	428a      	cmp	r2, r1
 8000f0a:	d907      	bls.n	8000f1c <__udivmoddi4+0x29c>
 8000f0c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f10:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f14:	d201      	bcs.n	8000f1a <__udivmoddi4+0x29a>
 8000f16:	428a      	cmp	r2, r1
 8000f18:	d823      	bhi.n	8000f62 <__udivmoddi4+0x2e2>
 8000f1a:	4646      	mov	r6, r8
 8000f1c:	1a89      	subs	r1, r1, r2
 8000f1e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f22:	e725      	b.n	8000d70 <__udivmoddi4+0xf0>
 8000f24:	462e      	mov	r6, r5
 8000f26:	4628      	mov	r0, r5
 8000f28:	e6f7      	b.n	8000d1a <__udivmoddi4+0x9a>
 8000f2a:	1a84      	subs	r4, r0, r2
 8000f2c:	eb61 0303 	sbc.w	r3, r1, r3
 8000f30:	2001      	movs	r0, #1
 8000f32:	461f      	mov	r7, r3
 8000f34:	e70b      	b.n	8000d4e <__udivmoddi4+0xce>
 8000f36:	4464      	add	r4, ip
 8000f38:	3802      	subs	r0, #2
 8000f3a:	e749      	b.n	8000dd0 <__udivmoddi4+0x150>
 8000f3c:	4464      	add	r4, ip
 8000f3e:	3802      	subs	r0, #2
 8000f40:	e6e1      	b.n	8000d06 <__udivmoddi4+0x86>
 8000f42:	3a02      	subs	r2, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	e72e      	b.n	8000da6 <__udivmoddi4+0x126>
 8000f48:	3e02      	subs	r6, #2
 8000f4a:	4462      	add	r2, ip
 8000f4c:	e6c6      	b.n	8000cdc <__udivmoddi4+0x5c>
 8000f4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f52:	4461      	add	r1, ip
 8000f54:	e76f      	b.n	8000e36 <__udivmoddi4+0x1b6>
 8000f56:	3802      	subs	r0, #2
 8000f58:	4462      	add	r2, ip
 8000f5a:	e7cb      	b.n	8000ef4 <__udivmoddi4+0x274>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4461      	add	r1, ip
 8000f60:	e77d      	b.n	8000e5e <__udivmoddi4+0x1de>
 8000f62:	3e02      	subs	r6, #2
 8000f64:	4461      	add	r1, ip
 8000f66:	e7d9      	b.n	8000f1c <__udivmoddi4+0x29c>
 8000f68:	462e      	mov	r6, r5
 8000f6a:	e6d6      	b.n	8000d1a <__udivmoddi4+0x9a>

08000f6c <__aeabi_idiv0>:
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop

08000f70 <MX_TIM3_Init>:


TIM_HandleTypeDef htim3;
//TIM3 initialization function
void MX_TIM3_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08a      	sub	sp, #40	; 0x28
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f76:	f107 031c 	add.w	r3, r7, #28
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f82:	463b      	mov	r3, r7
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
 8000f90:	615a      	str	r2, [r3, #20]
 8000f92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f94:	4b21      	ldr	r3, [pc, #132]	; (800101c <MX_TIM3_Init+0xac>)
 8000f96:	4a22      	ldr	r2, [pc, #136]	; (8001020 <MX_TIM3_Init+0xb0>)
 8000f98:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64;
 8000f9a:	4b20      	ldr	r3, [pc, #128]	; (800101c <MX_TIM3_Init+0xac>)
 8000f9c:	2240      	movs	r2, #64	; 0x40
 8000f9e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fa0:	4b1e      	ldr	r3, [pc, #120]	; (800101c <MX_TIM3_Init+0xac>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 8000fa6:	4b1d      	ldr	r3, [pc, #116]	; (800101c <MX_TIM3_Init+0xac>)
 8000fa8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fae:	4b1b      	ldr	r3, [pc, #108]	; (800101c <MX_TIM3_Init+0xac>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fb4:	4b19      	ldr	r3, [pc, #100]	; (800101c <MX_TIM3_Init+0xac>)
 8000fb6:	2280      	movs	r2, #128	; 0x80
 8000fb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fba:	4818      	ldr	r0, [pc, #96]	; (800101c <MX_TIM3_Init+0xac>)
 8000fbc:	f007 ffa0 	bl	8008f00 <HAL_TIM_PWM_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000fc6:	f000 ffdf 	bl	8001f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fd2:	f107 031c 	add.w	r3, r7, #28
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4810      	ldr	r0, [pc, #64]	; (800101c <MX_TIM3_Init+0xac>)
 8000fda:	f009 f8f7 	bl	800a1cc <HAL_TIMEx_MasterConfigSynchronization>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000fe4:	f000 ffd0 	bl	8001f88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fe8:	2360      	movs	r3, #96	; 0x60
 8000fea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	2208      	movs	r2, #8
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4807      	ldr	r0, [pc, #28]	; (800101c <MX_TIM3_Init+0xac>)
 8001000:	f008 faa8 	bl	8009554 <HAL_TIM_PWM_ConfigChannel>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800100a:	f000 ffbd 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800100e:	4803      	ldr	r0, [pc, #12]	; (800101c <MX_TIM3_Init+0xac>)
 8001010:	f001 fbdc 	bl	80027cc <HAL_TIM_MspPostInit>

}
 8001014:	bf00      	nop
 8001016:	3728      	adds	r7, #40	; 0x28
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	2000008c 	.word	0x2000008c
 8001020:	40000400 	.word	0x40000400

08001024 <piezo_init>:

void piezo_init(void) {
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
	MX_TIM3_Init();
 8001028:	f7ff ffa2 	bl	8000f70 <MX_TIM3_Init>
	HAL_TIM_Base_Start(&htim3);
 800102c:	4807      	ldr	r0, [pc, #28]	; (800104c <piezo_init+0x28>)
 800102e:	f007 fecf 	bl	8008dd0 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8001032:	2201      	movs	r2, #1
 8001034:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001038:	4805      	ldr	r0, [pc, #20]	; (8001050 <piezo_init+0x2c>)
 800103a:	f002 f9e7 	bl	800340c <HAL_GPIO_WritePin>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800103e:	2108      	movs	r1, #8
 8001040:	4802      	ldr	r0, [pc, #8]	; (800104c <piezo_init+0x28>)
 8001042:	f007 ffb5 	bl	8008fb0 <HAL_TIM_PWM_Start>
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	2000008c 	.word	0x2000008c
 8001050:	42020000 	.word	0x42020000
 8001054:	00000000 	.word	0x00000000

08001058 <get_freq_from_note>:
/*
 * function name: get_freq_from_note
 * purpose: convert a string representing a note & octave to its corresponding frequency
 * input: string representing a note (see NOTES array below for possible notes) followed by an octave (ex A#3).
 */
float get_freq_from_note(char note[]) {
 8001058:	b5b0      	push	{r4, r5, r7, lr}
 800105a:	b08e      	sub	sp, #56	; 0x38
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	char NOTES[12][2] = {"A", "A#", "B", "C", "C#", "D", "D#", "E", "F", "F#", "G", "G#"};
 8001060:	4b4b      	ldr	r3, [pc, #300]	; (8001190 <get_freq_from_note+0x138>)
 8001062:	f107 0410 	add.w	r4, r7, #16
 8001066:	461d      	mov	r5, r3
 8001068:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800106a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800106c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001070:	e884 0003 	stmia.w	r4, {r0, r1}
	int octave;
	char curr_note[2];
	int note_len = strlen(note);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f7ff f8ff 	bl	8000278 <strlen>
 800107a:	4603      	mov	r3, r0
 800107c:	62bb      	str	r3, [r7, #40]	; 0x28
	//extracting the octave number from the char that was passed in
	if (note_len == 3) {
 800107e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001080:	2b03      	cmp	r3, #3
 8001082:	d10c      	bne.n	800109e <get_freq_from_note+0x46>
		octave = (int) note[2] - '0';
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	3302      	adds	r3, #2
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	3b30      	subs	r3, #48	; 0x30
 800108c:	637b      	str	r3, [r7, #52]	; 0x34
		strncpy(curr_note, note, 2);
 800108e:	f107 030c 	add.w	r3, r7, #12
 8001092:	2202      	movs	r2, #2
 8001094:	6879      	ldr	r1, [r7, #4]
 8001096:	4618      	mov	r0, r3
 8001098:	f00a fb45 	bl	800b726 <strncpy>
 800109c:	e012      	b.n	80010c4 <get_freq_from_note+0x6c>
	} else if (note_len == 2) {
 800109e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d10c      	bne.n	80010be <get_freq_from_note+0x66>
		octave = (int) note[1] - '0';
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3301      	adds	r3, #1
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	3b30      	subs	r3, #48	; 0x30
 80010ac:	637b      	str	r3, [r7, #52]	; 0x34
		strncpy(curr_note, note, 1);
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	2201      	movs	r2, #1
 80010b4:	6879      	ldr	r1, [r7, #4]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f00a fb35 	bl	800b726 <strncpy>
 80010bc:	e002      	b.n	80010c4 <get_freq_from_note+0x6c>
	} else {
		return 0;
 80010be:	f04f 0300 	mov.w	r3, #0
 80010c2:	e05a      	b.n	800117a <get_freq_from_note+0x122>
	}
	//extracting the index (as per the NOTES array above) of the note passed in
	int keyIndex = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	633b      	str	r3, [r7, #48]	; 0x30
	for (int i = 0; i < NUM_NOTES; i++) {
 80010c8:	2300      	movs	r3, #0
 80010ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010cc:	e013      	b.n	80010f6 <get_freq_from_note+0x9e>
		if (strncmp(curr_note, NOTES[i], 2) == 0) {
 80010ce:	f107 0210 	add.w	r2, r7, #16
 80010d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d4:	005b      	lsls	r3, r3, #1
 80010d6:	18d1      	adds	r1, r2, r3
 80010d8:	f107 030c 	add.w	r3, r7, #12
 80010dc:	2202      	movs	r2, #2
 80010de:	4618      	mov	r0, r3
 80010e0:	f00a fb0d 	bl	800b6fe <strncmp>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d102      	bne.n	80010f0 <get_freq_from_note+0x98>
			keyIndex = i;
 80010ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ec:	633b      	str	r3, [r7, #48]	; 0x30
			break;
 80010ee:	e005      	b.n	80010fc <get_freq_from_note+0xa4>
	for (int i = 0; i < NUM_NOTES; i++) {
 80010f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f2:	3301      	adds	r3, #1
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80010f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010f8:	2b0b      	cmp	r3, #11
 80010fa:	dde8      	ble.n	80010ce <get_freq_from_note+0x76>
		}
	}
	//@source: https://gist.github.com/stuartmemo/3766449#file-note-to-frequency
	//math to calculate the frequency from the note index
	if (keyIndex < 3) {
 80010fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010fe:	2b02      	cmp	r3, #2
 8001100:	dc0c      	bgt.n	800111c <get_freq_from_note+0xc4>
		keyIndex = keyIndex + 12 + ((octave - 1) * 12) + 1;
 8001102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001104:	f103 010c 	add.w	r1, r3, #12
 8001108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800110a:	1e5a      	subs	r2, r3, #1
 800110c:	4613      	mov	r3, r2
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	4413      	add	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	440b      	add	r3, r1
 8001116:	3301      	adds	r3, #1
 8001118:	633b      	str	r3, [r7, #48]	; 0x30
 800111a:	e00a      	b.n	8001132 <get_freq_from_note+0xda>
	} else {
		keyIndex = keyIndex + ((octave - 1) * 12) + 1;
 800111c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800111e:	1e5a      	subs	r2, r3, #1
 8001120:	4613      	mov	r3, r2
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	4413      	add	r3, r2
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	461a      	mov	r2, r3
 800112a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800112c:	4413      	add	r3, r2
 800112e:	3301      	adds	r3, #1
 8001130:	633b      	str	r3, [r7, #48]	; 0x30
	}
	// Return frequency of note
	return 440 * pow(2, ((float) (keyIndex - 49)) / 12);
 8001132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001134:	3b31      	subs	r3, #49	; 0x31
 8001136:	ee07 3a90 	vmov	s15, r3
 800113a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800113e:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 8001142:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001146:	ee16 0a90 	vmov	r0, s13
 800114a:	f7ff fa01 	bl	8000550 <__aeabi_f2d>
 800114e:	4602      	mov	r2, r0
 8001150:	460b      	mov	r3, r1
 8001152:	ec43 2b11 	vmov	d1, r2, r3
 8001156:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8001188 <get_freq_from_note+0x130>
 800115a:	f00a fb69 	bl	800b830 <pow>
 800115e:	ec51 0b10 	vmov	r0, r1, d0
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <get_freq_from_note+0x13c>)
 8001168:	f7ff fa4a 	bl	8000600 <__aeabi_dmul>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	4610      	mov	r0, r2
 8001172:	4619      	mov	r1, r3
 8001174:	f7ff fd1c 	bl	8000bb0 <__aeabi_d2f>
 8001178:	4603      	mov	r3, r0
}
 800117a:	ee07 3a90 	vmov	s15, r3
 800117e:	eeb0 0a67 	vmov.f32	s0, s15
 8001182:	3738      	adds	r7, #56	; 0x38
 8001184:	46bd      	mov	sp, r7
 8001186:	bdb0      	pop	{r4, r5, r7, pc}
 8001188:	00000000 	.word	0x00000000
 800118c:	40000000 	.word	0x40000000
 8001190:	0800c690 	.word	0x0800c690
 8001194:	407b8000 	.word	0x407b8000

08001198 <pause_pwm>:
/*
 * function name: pause_pwm
 * purpose: make the duty cycle 0 so no output is provided for the specified duration
 * input: duration of pause in ms
 */
void pause_pwm(int duration_in_ms) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 80011a0:	4b05      	ldr	r3, [pc, #20]	; (80011b8 <pause_pwm+0x20>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2200      	movs	r2, #0
 80011a6:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_Delay(duration_in_ms);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f001 fda6 	bl	8002cfc <HAL_Delay>
}
 80011b0:	bf00      	nop
 80011b2:	3708      	adds	r7, #8
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	2000008c 	.word	0x2000008c

080011bc <play_frequency>:
/*
 * function name: play_frequency
 * purpose: plays a frequency, for a duration that corresponds to the beat and the tempo
 * input: the beat length, the frequency, the beats per second (tempo)
 */
void play_frequency(int duration_ms, float frequency) {
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
 80011c4:	ed87 0a00 	vstr	s0, [r7]
	if (frequency == 0) {
 80011c8:	edd7 7a00 	vldr	s15, [r7]
 80011cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80011d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011d4:	d103      	bne.n	80011de <play_frequency+0x22>
		pause_pwm(duration_ms);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ffde 	bl	8001198 <pause_pwm>
		__HAL_TIM_SET_AUTORELOAD(&htim3, arr_val);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, arr_val / 2);
		//delaying so the note holds
		HAL_Delay(duration_ms);
	}
}
 80011dc:	e01d      	b.n	800121a <play_frequency+0x5e>
		int arr_val = (CLOCKFREQ/frequency);
 80011de:	eddf 6a11 	vldr	s13, [pc, #68]	; 8001224 <play_frequency+0x68>
 80011e2:	ed97 7a00 	vldr	s14, [r7]
 80011e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80011ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011ee:	ee17 3a90 	vmov	r3, s15
 80011f2:	60fb      	str	r3, [r7, #12]
		__HAL_TIM_SET_AUTORELOAD(&htim3, arr_val);
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <play_frequency+0x6c>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	68fa      	ldr	r2, [r7, #12]
 80011fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <play_frequency+0x6c>)
 8001200:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, arr_val / 2);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	0fda      	lsrs	r2, r3, #31
 8001206:	4413      	add	r3, r2
 8001208:	105b      	asrs	r3, r3, #1
 800120a:	461a      	mov	r2, r3
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <play_frequency+0x6c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_Delay(duration_ms);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4618      	mov	r0, r3
 8001216:	f001 fd71 	bl	8002cfc <HAL_Delay>
}
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	49742400 	.word	0x49742400
 8001228:	2000008c 	.word	0x2000008c

0800122c <play_frequency_array>:
/*
 * function name: play_frequency_array
 * purpose: plays an array of frequency, for a duration derived from the beats and tempo
 * input: length of beats, array of frequencies, tempo, number of notes in the song
 */
void play_frequency_array(float beats[], float frequencies[], float tempo, int song_len) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b088      	sub	sp, #32
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	ed87 0a01 	vstr	s0, [r7, #4]
 800123a:	603a      	str	r2, [r7, #0]
	float beats_per_sec = tempo/60;
 800123c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001240:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80012fc <play_frequency_array+0xd0>
 8001244:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001248:	edc7 7a06 	vstr	s15, [r7, #24]
	pause_pwm(100);
 800124c:	2064      	movs	r0, #100	; 0x64
 800124e:	f7ff ffa3 	bl	8001198 <pause_pwm>
	for (int i = 0; i < song_len; i++) {
 8001252:	2300      	movs	r3, #0
 8001254:	61fb      	str	r3, [r7, #28]
 8001256:	e047      	b.n	80012e8 <play_frequency_array+0xbc>
		int duration_ms = round((beats[i]/beats_per_sec)*1000);
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	009b      	lsls	r3, r3, #2
 800125c:	68fa      	ldr	r2, [r7, #12]
 800125e:	4413      	add	r3, r2
 8001260:	edd3 6a00 	vldr	s13, [r3]
 8001264:	ed97 7a06 	vldr	s14, [r7, #24]
 8001268:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800126c:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001300 <play_frequency_array+0xd4>
 8001270:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001274:	ee17 0a90 	vmov	r0, s15
 8001278:	f7ff f96a 	bl	8000550 <__aeabi_f2d>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	ec43 2b10 	vmov	d0, r2, r3
 8001284:	f00a fa8e 	bl	800b7a4 <round>
 8001288:	ec53 2b10 	vmov	r2, r3, d0
 800128c:	4610      	mov	r0, r2
 800128e:	4619      	mov	r1, r3
 8001290:	f7ff fc66 	bl	8000b60 <__aeabi_d2iz>
 8001294:	4603      	mov	r3, r0
 8001296:	617b      	str	r3, [r7, #20]
		play_frequency(duration_ms, frequencies[i]);
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	68ba      	ldr	r2, [r7, #8]
 800129e:	4413      	add	r3, r2
 80012a0:	edd3 7a00 	vldr	s15, [r3]
 80012a4:	eeb0 0a67 	vmov.f32	s0, s15
 80012a8:	6978      	ldr	r0, [r7, #20]
 80012aa:	f7ff ff87 	bl	80011bc <play_frequency>
		pause_pwm(round(50/(beats_per_sec)));
 80012ae:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001304 <play_frequency_array+0xd8>
 80012b2:	edd7 7a06 	vldr	s15, [r7, #24]
 80012b6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80012ba:	ee16 0a90 	vmov	r0, s13
 80012be:	f7ff f947 	bl	8000550 <__aeabi_f2d>
 80012c2:	4602      	mov	r2, r0
 80012c4:	460b      	mov	r3, r1
 80012c6:	ec43 2b10 	vmov	d0, r2, r3
 80012ca:	f00a fa6b 	bl	800b7a4 <round>
 80012ce:	ec53 2b10 	vmov	r2, r3, d0
 80012d2:	4610      	mov	r0, r2
 80012d4:	4619      	mov	r1, r3
 80012d6:	f7ff fc43 	bl	8000b60 <__aeabi_d2iz>
 80012da:	4603      	mov	r3, r0
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff ff5b 	bl	8001198 <pause_pwm>
	for (int i = 0; i < song_len; i++) {
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3301      	adds	r3, #1
 80012e6:	61fb      	str	r3, [r7, #28]
 80012e8:	69fa      	ldr	r2, [r7, #28]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	dbb3      	blt.n	8001258 <play_frequency_array+0x2c>
	}
}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	3720      	adds	r7, #32
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	42700000 	.word	0x42700000
 8001300:	447a0000 	.word	0x447a0000
 8001304:	42480000 	.word	0x42480000

08001308 <play_tune>:
/* function name: play_tune
 * purpose: plays a song based on the notes specified and the beats specified
 * input: array of beat-lengths, string of song notes, tempo.
 */

void play_tune(float beats[], char *song_notes, float tempo) {
 8001308:	b580      	push	{r7, lr}
 800130a:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 800130e:	af00      	add	r7, sp, #0
 8001310:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001314:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 8001318:	6018      	str	r0, [r3, #0]
 800131a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800131e:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001322:	6019      	str	r1, [r3, #0]
 8001324:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001328:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800132c:	ed83 0a00 	vstr	s0, [r3]
	int note_num = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
	float freq_arr[250];
	char *context = NULL;
 8001336:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800133a:	f5a3 737d 	sub.w	r3, r3, #1012	; 0x3f4
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
	char *space_split = strtok_r(song_notes, " ", &context);
 8001342:	f107 0214 	add.w	r2, r7, #20
 8001346:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800134a:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800134e:	4920      	ldr	r1, [pc, #128]	; (80013d0 <play_tune+0xc8>)
 8001350:	6818      	ldr	r0, [r3, #0]
 8001352:	f00a fa23 	bl	800b79c <strtok_r>
 8001356:	f8c7 0400 	str.w	r0, [r7, #1024]	; 0x400
	while (space_split != NULL) {
 800135a:	e01d      	b.n	8001398 <play_tune+0x90>
		freq_arr[note_num] = get_freq_from_note(space_split);
 800135c:	f8d7 0400 	ldr.w	r0, [r7, #1024]	; 0x400
 8001360:	f7ff fe7a 	bl	8001058 <get_freq_from_note>
 8001364:	eef0 7a40 	vmov.f32	s15, s0
 8001368:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800136c:	f5a3 727c 	sub.w	r2, r3, #1008	; 0x3f0
 8001370:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4413      	add	r3, r2
 8001378:	edc3 7a00 	vstr	s15, [r3]
		note_num += 1;
 800137c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8001380:	3301      	adds	r3, #1
 8001382:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
		space_split = strtok_r(NULL, " ", &context);
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	461a      	mov	r2, r3
 800138c:	4910      	ldr	r1, [pc, #64]	; (80013d0 <play_tune+0xc8>)
 800138e:	2000      	movs	r0, #0
 8001390:	f00a fa04 	bl	800b79c <strtok_r>
 8001394:	f8c7 0400 	str.w	r0, [r7, #1024]	; 0x400
	while (space_split != NULL) {
 8001398:	f8d7 3400 	ldr.w	r3, [r7, #1024]	; 0x400
 800139c:	2b00      	cmp	r3, #0
 800139e:	d1dd      	bne.n	800135c <play_tune+0x54>
	}
	play_frequency_array(beats, freq_arr, tempo, note_num);
 80013a0:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80013a4:	f2a3 4104 	subw	r1, r3, #1028	; 0x404
 80013a8:	f107 0018 	add.w	r0, r7, #24
 80013ac:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 80013b0:	f5a3 737f 	sub.w	r3, r3, #1020	; 0x3fc
 80013b4:	f8d7 2404 	ldr.w	r2, [r7, #1028]	; 0x404
 80013b8:	ed91 0a00 	vldr	s0, [r1]
 80013bc:	4601      	mov	r1, r0
 80013be:	6818      	ldr	r0, [r3, #0]
 80013c0:	f7ff ff34 	bl	800122c <play_frequency_array>
}
 80013c4:	bf00      	nop
 80013c6:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	0800c6a8 	.word	0x0800c6a8

080013d4 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b085      	sub	sp, #20
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 80013dc:	4b0a      	ldr	r3, [pc, #40]	; (8001408 <LL_AHB2_GRP1_EnableClock+0x34>)
 80013de:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80013e2:	4909      	ldr	r1, [pc, #36]	; (8001408 <LL_AHB2_GRP1_EnableClock+0x34>)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 80013ec:	4b06      	ldr	r3, [pc, #24]	; (8001408 <LL_AHB2_GRP1_EnableClock+0x34>)
 80013ee:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	4013      	ands	r3, r2
 80013f6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80013f8:	68fb      	ldr	r3, [r7, #12]
}
 80013fa:	bf00      	nop
 80013fc:	3714      	adds	r7, #20
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	46020c00 	.word	0x46020c00

0800140c <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8001414:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <LL_APB1_GRP2_EnableClock+0x34>)
 8001416:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800141a:	4909      	ldr	r1, [pc, #36]	; (8001440 <LL_APB1_GRP2_EnableClock+0x34>)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	4313      	orrs	r3, r2
 8001420:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8001424:	4b06      	ldr	r3, [pc, #24]	; (8001440 <LL_APB1_GRP2_EnableClock+0x34>)
 8001426:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4013      	ands	r3, r2
 800142e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001430:	68fb      	ldr	r3, [r7, #12]
}
 8001432:	bf00      	nop
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	46020c00 	.word	0x46020c00

08001444 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001444:	b5b0      	push	{r4, r5, r7, lr}
 8001446:	f5ad 6dd9 	sub.w	sp, sp, #1736	; 0x6c8
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800144c:	f001 fbd2 	bl	8002bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001450:	f000 f880 	bl	8001554 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8001454:	f000 f8dd 	bl	8001612 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001458:	f000 fc14 	bl	8001c84 <MX_GPIO_Init>
  MX_ADF1_Init();
 800145c:	f000 f8e8 	bl	8001630 <MX_ADF1_Init>
  MX_I2C1_Init();
 8001460:	f000 f932 	bl	80016c8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001464:	f000 f970 	bl	8001748 <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8001468:	f000 f9ae 	bl	80017c8 <MX_OCTOSPI1_Init>
  MX_OCTOSPI2_Init();
 800146c:	f000 fa26 	bl	80018bc <MX_OCTOSPI2_Init>
  MX_SPI2_Init();
 8001470:	f000 faa0 	bl	80019b4 <MX_SPI2_Init>
  MX_UART4_Init();
 8001474:	f000 fb0c 	bl	8001a90 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8001478:	f000 fb56 	bl	8001b28 <MX_USART1_UART_Init>
  MX_UCPD1_Init();
 800147c:	f000 fba0 	bl	8001bc0 <MX_UCPD1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001480:	f000 fbd4 	bl	8001c2c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  float twinkle_twinkle_beats[] = {1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2};
 8001484:	4a2c      	ldr	r2, [pc, #176]	; (8001538 <main+0xf4>)
 8001486:	f507 63c4 	add.w	r3, r7, #1568	; 0x620
 800148a:	4611      	mov	r1, r2
 800148c:	22a8      	movs	r2, #168	; 0xa8
 800148e:	4618      	mov	r0, r3
 8001490:	f00a f920 	bl	800b6d4 <memcpy>
  char twinkle_twinkle_notes[] = "C4 C4 G4 G4 A4 A4 G4 F4 F4 E4 E4 D4 D4 C4 G4 G4 F4 F4 E4 E4 D4 G4 G4 F4 F4 E4 E4 D4 C4 C4 G4 G4 A4 A4 G4 F4 F4 E4 E4 D4 D4 C4 ";
 8001494:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 8001498:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800149c:	4a27      	ldr	r2, [pc, #156]	; (800153c <main+0xf8>)
 800149e:	4618      	mov	r0, r3
 80014a0:	4611      	mov	r1, r2
 80014a2:	237f      	movs	r3, #127	; 0x7f
 80014a4:	461a      	mov	r2, r3
 80014a6:	f00a f915 	bl	800b6d4 <memcpy>
  char xfiles_notes[] = "A3 C4 E4 F4 0 A4 E4 D4 E4 G4 E4";
 80014aa:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 80014ae:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80014b2:	4a23      	ldr	r2, [pc, #140]	; (8001540 <main+0xfc>)
 80014b4:	461c      	mov	r4, r3
 80014b6:	4615      	mov	r5, r2
 80014b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80014c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  float xfiles_beats[] = {0.5, 0.5, 0.5, 1, 1, 1, 1, 1, 1, 1, 2};
 80014c4:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 80014c8:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80014cc:	4a1d      	ldr	r2, [pc, #116]	; (8001544 <main+0x100>)
 80014ce:	461c      	mov	r4, r3
 80014d0:	4615      	mov	r5, r2
 80014d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014da:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  char pirates_of_carribean_notes[] = "E4 G4 A4 A4 0 A4 B4 C5 C5 0 C5 D5 B4 B4 0 "
 80014e2:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 80014e6:	f5a3 7367 	sub.w	r3, r3, #924	; 0x39c
 80014ea:	4a17      	ldr	r2, [pc, #92]	; (8001548 <main+0x104>)
 80014ec:	4618      	mov	r0, r3
 80014ee:	4611      	mov	r1, r2
 80014f0:	f240 2327 	movw	r3, #551	; 0x227
 80014f4:	461a      	mov	r2, r3
 80014f6:	f00a f8ed 	bl	800b6d4 <memcpy>
  		  "A4 B4 C5 C5 0 C5 D5 B4 B4 0 A4 G4 A4 0 E4 G4 A4 A4 0 A4 B4 C5 C5 0 C5 D5 B4 B4 0 "
  		  "A4 G4 A4 0 E4 G4 A4 A4 0 A4 C5 D5 D5 0 D5 E5 F5 F5 0 E5 D5 E5 A4 0 "
  		  "A4 B4 C5 C5 0 D5 E5 A4 0 A4 C5 B4 B4 0 C5 A4 B4 0 "
  		  "E5 0 0 F5 0 0 E5 E5 0 G5 0 E5 D5 0 0 D5 0 0 C5 0 0 B4 C5 0 B4 0 A4 E5 0 0 F5 0 0 E5 E5 0 G5 0 E5 D5 0 0 D5 0 0 C5 0 0 B4 C5 0 B4 0 A4 ";

    float pirates_beat[] = {
 80014fa:	f507 63d9 	add.w	r3, r7, #1736	; 0x6c8
 80014fe:	f5a3 63d9 	sub.w	r3, r3, #1736	; 0x6c8
 8001502:	4a12      	ldr	r2, [pc, #72]	; (800154c <main+0x108>)
 8001504:	4618      	mov	r0, r3
 8001506:	4611      	mov	r1, r2
 8001508:	f44f 734b 	mov.w	r3, #812	; 0x32c
 800150c:	461a      	mov	r2, r3
 800150e:	f00a f8e1 	bl	800b6d4 <memcpy>
        0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.375,
        0.250, 0.125, 0.375, 0.250, 0.125, 0.375,
        0.125, 0.125, 0.125, 0.125, 0.125, 0.500};
  //float ascending_frqs[] = {350, 375, 400, 425, 450};
  //float beat_duration[] = {1, 1, 1, 1, 1};
  piezo_init();
 8001512:	f7ff fd87 	bl	8001024 <piezo_init>
  {
	//play_frequency_repeat(500, 300, 4, 100);
	//play_ascending(1000, 1500, 100, 0, 10);
	//play_descending(1500, 1000, 100, 0, 10);

	play_tune(pirates_beat, pirates_of_carribean_notes, 80);
 8001516:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 800151a:	463b      	mov	r3, r7
 800151c:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8001550 <main+0x10c>
 8001520:	4611      	mov	r1, r2
 8001522:	4618      	mov	r0, r3
 8001524:	f7ff fef0 	bl	8001308 <play_tune>
	break;
 8001528:	bf00      	nop
 800152a:	2300      	movs	r3, #0
    /* USER CODE END WHILE */
  }
    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 800152c:	4618      	mov	r0, r3
 800152e:	f507 67d9 	add.w	r7, r7, #1736	; 0x6c8
 8001532:	46bd      	mov	sp, r7
 8001534:	bdb0      	pop	{r4, r5, r7, pc}
 8001536:	bf00      	nop
 8001538:	0800c6ac 	.word	0x0800c6ac
 800153c:	0800c754 	.word	0x0800c754
 8001540:	0800c7d4 	.word	0x0800c7d4
 8001544:	0800c7f4 	.word	0x0800c7f4
 8001548:	0800c820 	.word	0x0800c820
 800154c:	0800ca48 	.word	0x0800ca48
 8001550:	42a00000 	.word	0x42a00000

08001554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b09e      	sub	sp, #120	; 0x78
 8001558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800155a:	f107 0318 	add.w	r3, r7, #24
 800155e:	2260      	movs	r2, #96	; 0x60
 8001560:	2100      	movs	r1, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f00a f8c3 	bl	800b6ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001568:	463b      	mov	r3, r7
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	605a      	str	r2, [r3, #4]
 8001570:	609a      	str	r2, [r3, #8]
 8001572:	60da      	str	r2, [r3, #12]
 8001574:	611a      	str	r2, [r3, #16]
 8001576:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 8001578:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800157c:	f003 faec 	bl	8004b58 <HAL_PWREx_ControlVoltageScaling>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <SystemClock_Config+0x36>
  {
    Error_Handler();
 8001586:	f000 fcff 	bl	8001f88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 800158a:	2330      	movs	r3, #48	; 0x30
 800158c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800158e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001592:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001594:	2301      	movs	r3, #1
 8001596:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001598:	2310      	movs	r3, #16
 800159a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 800159c:	2300      	movs	r3, #0
 800159e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a0:	2302      	movs	r3, #2
 80015a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80015a4:	2301      	movs	r3, #1
 80015a6:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 80015a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 80015ae:	2303      	movs	r3, #3
 80015b0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 80015b2:	2308      	movs	r3, #8
 80015b4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 80015b6:	2302      	movs	r3, #2
 80015b8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80015ba:	2302      	movs	r3, #2
 80015bc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015be:	2302      	movs	r3, #2
 80015c0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 80015c2:	230c      	movs	r3, #12
 80015c4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ca:	f107 0318 	add.w	r3, r7, #24
 80015ce:	4618      	mov	r0, r3
 80015d0:	f003 fbb4 	bl	8004d3c <HAL_RCC_OscConfig>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80015da:	f000 fcd5 	bl	8001f88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015de:	231f      	movs	r3, #31
 80015e0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e2:	2303      	movs	r3, #3
 80015e4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e6:	2300      	movs	r3, #0
 80015e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015ee:	2300      	movs	r3, #0
 80015f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015f6:	463b      	mov	r3, r7
 80015f8:	2102      	movs	r1, #2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f004 fa74 	bl	8005ae8 <HAL_RCC_ClockConfig>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001606:	f000 fcbf 	bl	8001f88 <Error_Handler>
  }
}
 800160a:	bf00      	nop
 800160c:	3778      	adds	r7, #120	; 0x78
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 8001616:	f003 fb81 	bl	8004d1c <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 800161a:	2002      	movs	r0, #2
 800161c:	f003 fb1e 	bl	8004c5c <HAL_PWREx_ConfigSupply>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <SystemPower_Config+0x18>
  {
    Error_Handler();
 8001626:	f000 fcaf 	bl	8001f88 <Error_Handler>
  }
}
 800162a:	bf00      	nop
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <MX_ADF1_Init>:
  * @brief ADF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADF1_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END ADF1_Init 1 */

  /**
    AdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  AdfHandle0.Instance = ADF1_Filter0;
 8001634:	4b21      	ldr	r3, [pc, #132]	; (80016bc <MX_ADF1_Init+0x8c>)
 8001636:	4a22      	ldr	r2, [pc, #136]	; (80016c0 <MX_ADF1_Init+0x90>)
 8001638:	601a      	str	r2, [r3, #0]
  AdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 800163a:	4b20      	ldr	r3, [pc, #128]	; (80016bc <MX_ADF1_Init+0x8c>)
 800163c:	2201      	movs	r2, #1
 800163e:	609a      	str	r2, [r3, #8]
  AdfHandle0.Init.CommonParam.OutputClock.Activation = DISABLE;
 8001640:	4b1e      	ldr	r3, [pc, #120]	; (80016bc <MX_ADF1_Init+0x8c>)
 8001642:	2200      	movs	r2, #0
 8001644:	731a      	strb	r2, [r3, #12]
  AdfHandle0.Init.SerialInterface.Activation = ENABLE;
 8001646:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <MX_ADF1_Init+0x8c>)
 8001648:	2201      	movs	r2, #1
 800164a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  AdfHandle0.Init.SerialInterface.ClockSource = MDF_SITF_CCK0_SOURCE;
 800164e:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <MX_ADF1_Init+0x8c>)
 8001650:	2200      	movs	r2, #0
 8001652:	62da      	str	r2, [r3, #44]	; 0x2c
  AdfHandle0.Init.SerialInterface.Threshold = 4;
 8001654:	4b19      	ldr	r3, [pc, #100]	; (80016bc <MX_ADF1_Init+0x8c>)
 8001656:	2204      	movs	r2, #4
 8001658:	631a      	str	r2, [r3, #48]	; 0x30
  AdfHandle0.Init.FilterBistream = MDF_BITSTREAM0_FALLING;
 800165a:	4b18      	ldr	r3, [pc, #96]	; (80016bc <MX_ADF1_Init+0x8c>)
 800165c:	2201      	movs	r2, #1
 800165e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_MDF_Init(&AdfHandle0) != HAL_OK)
 8001660:	4816      	ldr	r0, [pc, #88]	; (80016bc <MX_ADF1_Init+0x8c>)
 8001662:	f002 f811 	bl	8003688 <HAL_MDF_Init>
 8001666:	4603      	mov	r3, r0
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <MX_ADF1_Init+0x40>
  {
    Error_Handler();
 800166c:	f000 fc8c 	bl	8001f88 <Error_Handler>
  /**
    AdfFilterConfig0 structure initialization

    WARNING : only structure is filled, no specific init function call for filter
  */
  AdfFilterConfig0.DataSource = MDF_DATA_SOURCE_BSMX;
 8001670:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <MX_ADF1_Init+0x94>)
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
  AdfFilterConfig0.Delay = 0;
 8001676:	4b13      	ldr	r3, [pc, #76]	; (80016c4 <MX_ADF1_Init+0x94>)
 8001678:	2200      	movs	r2, #0
 800167a:	605a      	str	r2, [r3, #4]
  AdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC4;
 800167c:	4b11      	ldr	r3, [pc, #68]	; (80016c4 <MX_ADF1_Init+0x94>)
 800167e:	2240      	movs	r2, #64	; 0x40
 8001680:	609a      	str	r2, [r3, #8]
  AdfFilterConfig0.DecimationRatio = 2;
 8001682:	4b10      	ldr	r3, [pc, #64]	; (80016c4 <MX_ADF1_Init+0x94>)
 8001684:	2202      	movs	r2, #2
 8001686:	60da      	str	r2, [r3, #12]
  AdfFilterConfig0.Gain = 0;
 8001688:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <MX_ADF1_Init+0x94>)
 800168a:	2200      	movs	r2, #0
 800168c:	615a      	str	r2, [r3, #20]
  AdfFilterConfig0.ReshapeFilter.Activation = DISABLE;
 800168e:	4b0d      	ldr	r3, [pc, #52]	; (80016c4 <MX_ADF1_Init+0x94>)
 8001690:	2200      	movs	r2, #0
 8001692:	761a      	strb	r2, [r3, #24]
  AdfFilterConfig0.HighPassFilter.Activation = DISABLE;
 8001694:	4b0b      	ldr	r3, [pc, #44]	; (80016c4 <MX_ADF1_Init+0x94>)
 8001696:	2200      	movs	r2, #0
 8001698:	f883 2020 	strb.w	r2, [r3, #32]
  AdfFilterConfig0.SoundActivity.Activation = DISABLE;
 800169c:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <MX_ADF1_Init+0x94>)
 800169e:	2200      	movs	r2, #0
 80016a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  AdfFilterConfig0.AcquisitionMode = MDF_MODE_ASYNC_CONT;
 80016a4:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <MX_ADF1_Init+0x94>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	665a      	str	r2, [r3, #100]	; 0x64
  AdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <MX_ADF1_Init+0x94>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	669a      	str	r2, [r3, #104]	; 0x68
  AdfFilterConfig0.DiscardSamples = 0;
 80016b0:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <MX_ADF1_Init+0x94>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	66da      	str	r2, [r3, #108]	; 0x6c
  /* USER CODE BEGIN ADF1_Init 2 */

  /* USER CODE END ADF1_Init 2 */

}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200000d8 	.word	0x200000d8
 80016c0:	46024080 	.word	0x46024080
 80016c4:	2000011c 	.word	0x2000011c

080016c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <MX_I2C1_Init+0x74>)
 80016ce:	4a1c      	ldr	r2, [pc, #112]	; (8001740 <MX_I2C1_Init+0x78>)
 80016d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 80016d2:	4b1a      	ldr	r3, [pc, #104]	; (800173c <MX_I2C1_Init+0x74>)
 80016d4:	4a1b      	ldr	r2, [pc, #108]	; (8001744 <MX_I2C1_Init+0x7c>)
 80016d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80016d8:	4b18      	ldr	r3, [pc, #96]	; (800173c <MX_I2C1_Init+0x74>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016de:	4b17      	ldr	r3, [pc, #92]	; (800173c <MX_I2C1_Init+0x74>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016e4:	4b15      	ldr	r3, [pc, #84]	; (800173c <MX_I2C1_Init+0x74>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80016ea:	4b14      	ldr	r3, [pc, #80]	; (800173c <MX_I2C1_Init+0x74>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <MX_I2C1_Init+0x74>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016f6:	4b11      	ldr	r3, [pc, #68]	; (800173c <MX_I2C1_Init+0x74>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016fc:	4b0f      	ldr	r3, [pc, #60]	; (800173c <MX_I2C1_Init+0x74>)
 80016fe:	2200      	movs	r2, #0
 8001700:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001702:	480e      	ldr	r0, [pc, #56]	; (800173c <MX_I2C1_Init+0x74>)
 8001704:	f001 fe9a 	bl	800343c <HAL_I2C_Init>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800170e:	f000 fc3b 	bl	8001f88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001712:	2100      	movs	r1, #0
 8001714:	4809      	ldr	r0, [pc, #36]	; (800173c <MX_I2C1_Init+0x74>)
 8001716:	f001 ff20 	bl	800355a <HAL_I2CEx_ConfigAnalogFilter>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001720:	f000 fc32 	bl	8001f88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001724:	2100      	movs	r1, #0
 8001726:	4805      	ldr	r0, [pc, #20]	; (800173c <MX_I2C1_Init+0x74>)
 8001728:	f001 ff62 	bl	80035f0 <HAL_I2CEx_ConfigDigitalFilter>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001732:	f000 fc29 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	20000198 	.word	0x20000198
 8001740:	40005400 	.word	0x40005400
 8001744:	10707dbc 	.word	0x10707dbc

08001748 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800174c:	4b1b      	ldr	r3, [pc, #108]	; (80017bc <MX_I2C2_Init+0x74>)
 800174e:	4a1c      	ldr	r2, [pc, #112]	; (80017c0 <MX_I2C2_Init+0x78>)
 8001750:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 8001752:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <MX_I2C2_Init+0x74>)
 8001754:	4a1b      	ldr	r2, [pc, #108]	; (80017c4 <MX_I2C2_Init+0x7c>)
 8001756:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001758:	4b18      	ldr	r3, [pc, #96]	; (80017bc <MX_I2C2_Init+0x74>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800175e:	4b17      	ldr	r3, [pc, #92]	; (80017bc <MX_I2C2_Init+0x74>)
 8001760:	2201      	movs	r2, #1
 8001762:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001764:	4b15      	ldr	r3, [pc, #84]	; (80017bc <MX_I2C2_Init+0x74>)
 8001766:	2200      	movs	r2, #0
 8001768:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800176a:	4b14      	ldr	r3, [pc, #80]	; (80017bc <MX_I2C2_Init+0x74>)
 800176c:	2200      	movs	r2, #0
 800176e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <MX_I2C2_Init+0x74>)
 8001772:	2200      	movs	r2, #0
 8001774:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001776:	4b11      	ldr	r3, [pc, #68]	; (80017bc <MX_I2C2_Init+0x74>)
 8001778:	2200      	movs	r2, #0
 800177a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800177c:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <MX_I2C2_Init+0x74>)
 800177e:	2200      	movs	r2, #0
 8001780:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001782:	480e      	ldr	r0, [pc, #56]	; (80017bc <MX_I2C2_Init+0x74>)
 8001784:	f001 fe5a 	bl	800343c <HAL_I2C_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800178e:	f000 fbfb 	bl	8001f88 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001792:	2100      	movs	r1, #0
 8001794:	4809      	ldr	r0, [pc, #36]	; (80017bc <MX_I2C2_Init+0x74>)
 8001796:	f001 fee0 	bl	800355a <HAL_I2CEx_ConfigAnalogFilter>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80017a0:	f000 fbf2 	bl	8001f88 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80017a4:	2100      	movs	r1, #0
 80017a6:	4805      	ldr	r0, [pc, #20]	; (80017bc <MX_I2C2_Init+0x74>)
 80017a8:	f001 ff22 	bl	80035f0 <HAL_I2CEx_ConfigDigitalFilter>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80017b2:	f000 fbe9 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80017b6:	bf00      	nop
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200001e4 	.word	0x200001e4
 80017c0:	40005800 	.word	0x40005800
 80017c4:	10707dbc 	.word	0x10707dbc

080017c8 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80017ce:	f107 0308 	add.w	r3, r7, #8
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]
 80017d8:	609a      	str	r2, [r3, #8]
 80017da:	60da      	str	r2, [r3, #12]
 80017dc:	611a      	str	r2, [r3, #16]
 80017de:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 80017e0:	463b      	mov	r3, r7
 80017e2:	2200      	movs	r2, #0
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80017e8:	4b31      	ldr	r3, [pc, #196]	; (80018b0 <MX_OCTOSPI1_Init+0xe8>)
 80017ea:	4a32      	ldr	r2, [pc, #200]	; (80018b4 <MX_OCTOSPI1_Init+0xec>)
 80017ec:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80017ee:	4b30      	ldr	r3, [pc, #192]	; (80018b0 <MX_OCTOSPI1_Init+0xe8>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80017f4:	4b2e      	ldr	r3, [pc, #184]	; (80018b0 <MX_OCTOSPI1_Init+0xe8>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_APMEMORY;
 80017fa:	4b2d      	ldr	r3, [pc, #180]	; (80018b0 <MX_OCTOSPI1_Init+0xe8>)
 80017fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001800:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 24;
 8001802:	4b2b      	ldr	r3, [pc, #172]	; (80018b0 <MX_OCTOSPI1_Init+0xe8>)
 8001804:	2218      	movs	r2, #24
 8001806:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8001808:	4b29      	ldr	r3, [pc, #164]	; (80018b0 <MX_OCTOSPI1_Init+0xe8>)
 800180a:	2201      	movs	r2, #1
 800180c:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800180e:	4b28      	ldr	r3, [pc, #160]	; (80018b0 <MX_OCTOSPI1_Init+0xe8>)
 8001810:	2200      	movs	r2, #0
 8001812:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001814:	4b26      	ldr	r3, [pc, #152]	; (80018b0 <MX_OCTOSPI1_Init+0xe8>)
 8001816:	2200      	movs	r2, #0
 8001818:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800181a:	4b25      	ldr	r3, [pc, #148]	; (80018b0 <MX_OCTOSPI1_Init+0xe8>)
 800181c:	2200      	movs	r2, #0
 800181e:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 2;
 8001820:	4b23      	ldr	r3, [pc, #140]	; (80018b0 <MX_OCTOSPI1_Init+0xe8>)
 8001822:	2202      	movs	r2, #2
 8001824:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8001826:	4b22      	ldr	r3, [pc, #136]	; (80018b0 <MX_OCTOSPI1_Init+0xe8>)
 8001828:	2200      	movs	r2, #0
 800182a:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800182c:	4b20      	ldr	r3, [pc, #128]	; (80018b0 <MX_OCTOSPI1_Init+0xe8>)
 800182e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001832:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 10;
 8001834:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <MX_OCTOSPI1_Init+0xe8>)
 8001836:	220a      	movs	r2, #10
 8001838:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 800183a:	4b1d      	ldr	r3, [pc, #116]	; (80018b0 <MX_OCTOSPI1_Init+0xe8>)
 800183c:	2200      	movs	r2, #0
 800183e:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8001840:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <MX_OCTOSPI1_Init+0xe8>)
 8001842:	2200      	movs	r2, #0
 8001844:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 100;
 8001846:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <MX_OCTOSPI1_Init+0xe8>)
 8001848:	2264      	movs	r2, #100	; 0x64
 800184a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800184c:	4818      	ldr	r0, [pc, #96]	; (80018b0 <MX_OCTOSPI1_Init+0xe8>)
 800184e:	f002 f8c7 	bl	80039e0 <HAL_OSPI_Init>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_OCTOSPI1_Init+0x94>
  {
    Error_Handler();
 8001858:	f000 fb96 	bl	8001f88 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 800185c:	2301      	movs	r3, #1
 800185e:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.DQSPort = 1;
 8001860:	2301      	movs	r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.NCSPort = 1;
 8001864:	2301      	movs	r3, #1
 8001866:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8001868:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800186c:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 800186e:	4b12      	ldr	r3, [pc, #72]	; (80018b8 <MX_OCTOSPI1_Init+0xf0>)
 8001870:	61bb      	str	r3, [r7, #24]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001872:	f107 0308 	add.w	r3, r7, #8
 8001876:	f241 3288 	movw	r2, #5000	; 0x1388
 800187a:	4619      	mov	r1, r3
 800187c:	480c      	ldr	r0, [pc, #48]	; (80018b0 <MX_OCTOSPI1_Init+0xe8>)
 800187e:	f002 f9ef 	bl	8003c60 <HAL_OSPIM_Config>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_OCTOSPI1_Init+0xc4>
  {
    Error_Handler();
 8001888:	f000 fb7e 	bl	8001f88 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 800188c:	2300      	movs	r3, #0
 800188e:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8001890:	2300      	movs	r3, #0
 8001892:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8001894:	463b      	mov	r3, r7
 8001896:	4619      	mov	r1, r3
 8001898:	4805      	ldr	r0, [pc, #20]	; (80018b0 <MX_OCTOSPI1_Init+0xe8>)
 800189a:	f002 ffcd 	bl	8004838 <HAL_OSPI_DLYB_SetConfig>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <MX_OCTOSPI1_Init+0xe0>
  {
    Error_Handler();
 80018a4:	f000 fb70 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80018a8:	bf00      	nop
 80018aa:	3720      	adds	r7, #32
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000230 	.word	0x20000230
 80018b4:	420d1400 	.word	0x420d1400
 80018b8:	01000001 	.word	0x01000001

080018bc <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b088      	sub	sp, #32
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 80018c2:	f107 0308 	add.w	r3, r7, #8
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
 80018d0:	611a      	str	r2, [r3, #16]
 80018d2:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 80018d4:	463b      	mov	r3, r7
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
 80018da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 80018dc:	4b31      	ldr	r3, [pc, #196]	; (80019a4 <MX_OCTOSPI2_Init+0xe8>)
 80018de:	4a32      	ldr	r2, [pc, #200]	; (80019a8 <MX_OCTOSPI2_Init+0xec>)
 80018e0:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 4;
 80018e2:	4b30      	ldr	r3, [pc, #192]	; (80019a4 <MX_OCTOSPI2_Init+0xe8>)
 80018e4:	2204      	movs	r2, #4
 80018e6:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80018e8:	4b2e      	ldr	r3, [pc, #184]	; (80019a4 <MX_OCTOSPI2_Init+0xe8>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80018ee:	4b2d      	ldr	r3, [pc, #180]	; (80019a4 <MX_OCTOSPI2_Init+0xe8>)
 80018f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018f4:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 26;
 80018f6:	4b2b      	ldr	r3, [pc, #172]	; (80019a4 <MX_OCTOSPI2_Init+0xe8>)
 80018f8:	221a      	movs	r2, #26
 80018fa:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 2;
 80018fc:	4b29      	ldr	r3, [pc, #164]	; (80019a4 <MX_OCTOSPI2_Init+0xe8>)
 80018fe:	2202      	movs	r2, #2
 8001900:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8001902:	4b28      	ldr	r3, [pc, #160]	; (80019a4 <MX_OCTOSPI2_Init+0xe8>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8001908:	4b26      	ldr	r3, [pc, #152]	; (80019a4 <MX_OCTOSPI2_Init+0xe8>)
 800190a:	2200      	movs	r2, #0
 800190c:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 800190e:	4b25      	ldr	r3, [pc, #148]	; (80019a4 <MX_OCTOSPI2_Init+0xe8>)
 8001910:	2200      	movs	r2, #0
 8001912:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 4;
 8001914:	4b23      	ldr	r3, [pc, #140]	; (80019a4 <MX_OCTOSPI2_Init+0xe8>)
 8001916:	2204      	movs	r2, #4
 8001918:	625a      	str	r2, [r3, #36]	; 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800191a:	4b22      	ldr	r3, [pc, #136]	; (80019a4 <MX_OCTOSPI2_Init+0xe8>)
 800191c:	2200      	movs	r2, #0
 800191e:	629a      	str	r2, [r3, #40]	; 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8001920:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <MX_OCTOSPI2_Init+0xe8>)
 8001922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001926:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 8001928:	4b1e      	ldr	r3, [pc, #120]	; (80019a4 <MX_OCTOSPI2_Init+0xe8>)
 800192a:	2200      	movs	r2, #0
 800192c:	631a      	str	r2, [r3, #48]	; 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 800192e:	4b1d      	ldr	r3, [pc, #116]	; (80019a4 <MX_OCTOSPI2_Init+0xe8>)
 8001930:	2200      	movs	r2, #0
 8001932:	635a      	str	r2, [r3, #52]	; 0x34
  hospi2.Init.MaxTran = 0;
 8001934:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <MX_OCTOSPI2_Init+0xe8>)
 8001936:	2200      	movs	r2, #0
 8001938:	639a      	str	r2, [r3, #56]	; 0x38
  hospi2.Init.Refresh = 0;
 800193a:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <MX_OCTOSPI2_Init+0xe8>)
 800193c:	2200      	movs	r2, #0
 800193e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8001940:	4818      	ldr	r0, [pc, #96]	; (80019a4 <MX_OCTOSPI2_Init+0xe8>)
 8001942:	f002 f84d 	bl	80039e0 <HAL_OSPI_Init>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_OCTOSPI2_Init+0x94>
  {
    Error_Handler();
 800194c:	f000 fb1c 	bl	8001f88 <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 2;
 8001950:	2302      	movs	r3, #2
 8001952:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.DQSPort = 2;
 8001954:	2302      	movs	r3, #2
 8001956:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.NCSPort = 2;
 8001958:	2302      	movs	r3, #2
 800195a:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 800195c:	4b13      	ldr	r3, [pc, #76]	; (80019ac <MX_OCTOSPI2_Init+0xf0>)
 800195e:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8001960:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <MX_OCTOSPI2_Init+0xf4>)
 8001962:	61bb      	str	r3, [r7, #24]
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001964:	f107 0308 	add.w	r3, r7, #8
 8001968:	f241 3288 	movw	r2, #5000	; 0x1388
 800196c:	4619      	mov	r1, r3
 800196e:	480d      	ldr	r0, [pc, #52]	; (80019a4 <MX_OCTOSPI2_Init+0xe8>)
 8001970:	f002 f976 	bl	8003c60 <HAL_OSPIM_Config>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_OCTOSPI2_Init+0xc2>
  {
    Error_Handler();
 800197a:	f000 fb05 	bl	8001f88 <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi2, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8001986:	463b      	mov	r3, r7
 8001988:	4619      	mov	r1, r3
 800198a:	4806      	ldr	r0, [pc, #24]	; (80019a4 <MX_OCTOSPI2_Init+0xe8>)
 800198c:	f002 ff54 	bl	8004838 <HAL_OSPI_DLYB_SetConfig>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_OCTOSPI2_Init+0xde>
  {
    Error_Handler();
 8001996:	f000 faf7 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 800199a:	bf00      	nop
 800199c:	3720      	adds	r7, #32
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	2000028c 	.word	0x2000028c
 80019a8:	420d2400 	.word	0x420d2400
 80019ac:	00010002 	.word	0x00010002
 80019b0:	01000002 	.word	0x01000002

080019b4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80019ba:	1d3b      	adds	r3, r7, #4
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80019c4:	4b30      	ldr	r3, [pc, #192]	; (8001a88 <MX_SPI2_Init+0xd4>)
 80019c6:	4a31      	ldr	r2, [pc, #196]	; (8001a8c <MX_SPI2_Init+0xd8>)
 80019c8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80019ca:	4b2f      	ldr	r3, [pc, #188]	; (8001a88 <MX_SPI2_Init+0xd4>)
 80019cc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80019d0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80019d2:	4b2d      	ldr	r3, [pc, #180]	; (8001a88 <MX_SPI2_Init+0xd4>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80019d8:	4b2b      	ldr	r3, [pc, #172]	; (8001a88 <MX_SPI2_Init+0xd4>)
 80019da:	2203      	movs	r2, #3
 80019dc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019de:	4b2a      	ldr	r3, [pc, #168]	; (8001a88 <MX_SPI2_Init+0xd4>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019e4:	4b28      	ldr	r3, [pc, #160]	; (8001a88 <MX_SPI2_Init+0xd4>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80019ea:	4b27      	ldr	r3, [pc, #156]	; (8001a88 <MX_SPI2_Init+0xd4>)
 80019ec:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80019f0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019f2:	4b25      	ldr	r3, [pc, #148]	; (8001a88 <MX_SPI2_Init+0xd4>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019f8:	4b23      	ldr	r3, [pc, #140]	; (8001a88 <MX_SPI2_Init+0xd4>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80019fe:	4b22      	ldr	r3, [pc, #136]	; (8001a88 <MX_SPI2_Init+0xd4>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a04:	4b20      	ldr	r3, [pc, #128]	; (8001a88 <MX_SPI2_Init+0xd4>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8001a0a:	4b1f      	ldr	r3, [pc, #124]	; (8001a88 <MX_SPI2_Init+0xd4>)
 8001a0c:	2207      	movs	r2, #7
 8001a0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a10:	4b1d      	ldr	r3, [pc, #116]	; (8001a88 <MX_SPI2_Init+0xd4>)
 8001a12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a16:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001a18:	4b1b      	ldr	r3, [pc, #108]	; (8001a88 <MX_SPI2_Init+0xd4>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001a1e:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <MX_SPI2_Init+0xd4>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001a24:	4b18      	ldr	r3, [pc, #96]	; (8001a88 <MX_SPI2_Init+0xd4>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001a2a:	4b17      	ldr	r3, [pc, #92]	; (8001a88 <MX_SPI2_Init+0xd4>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001a30:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <MX_SPI2_Init+0xd4>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001a36:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <MX_SPI2_Init+0xd4>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001a3c:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <MX_SPI2_Init+0xd4>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	659a      	str	r2, [r3, #88]	; 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001a42:	4b11      	ldr	r3, [pc, #68]	; (8001a88 <MX_SPI2_Init+0xd4>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8001a48:	4b0f      	ldr	r3, [pc, #60]	; (8001a88 <MX_SPI2_Init+0xd4>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001a4e:	480e      	ldr	r0, [pc, #56]	; (8001a88 <MX_SPI2_Init+0xd4>)
 8001a50:	f007 f86a 	bl	8008b28 <HAL_SPI_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_SPI2_Init+0xaa>
  {
    Error_Handler();
 8001a5a:	f000 fa95 	bl	8001f88 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8001a62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001a66:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001a6c:	1d3b      	adds	r3, r7, #4
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4805      	ldr	r0, [pc, #20]	; (8001a88 <MX_SPI2_Init+0xd4>)
 8001a72:	f007 f96c 	bl	8008d4e <HAL_SPIEx_SetConfigAutonomousMode>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_SPI2_Init+0xcc>
  {
    Error_Handler();
 8001a7c:	f000 fa84 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001a80:	bf00      	nop
 8001a82:	3710      	adds	r7, #16
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	200002e8 	.word	0x200002e8
 8001a8c:	40003800 	.word	0x40003800

08001a90 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001a94:	4b22      	ldr	r3, [pc, #136]	; (8001b20 <MX_UART4_Init+0x90>)
 8001a96:	4a23      	ldr	r2, [pc, #140]	; (8001b24 <MX_UART4_Init+0x94>)
 8001a98:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001a9a:	4b21      	ldr	r3, [pc, #132]	; (8001b20 <MX_UART4_Init+0x90>)
 8001a9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001aa0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001aa2:	4b1f      	ldr	r3, [pc, #124]	; (8001b20 <MX_UART4_Init+0x90>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001aa8:	4b1d      	ldr	r3, [pc, #116]	; (8001b20 <MX_UART4_Init+0x90>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001aae:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <MX_UART4_Init+0x90>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001ab4:	4b1a      	ldr	r3, [pc, #104]	; (8001b20 <MX_UART4_Init+0x90>)
 8001ab6:	220c      	movs	r2, #12
 8001ab8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aba:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <MX_UART4_Init+0x90>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac0:	4b17      	ldr	r3, [pc, #92]	; (8001b20 <MX_UART4_Init+0x90>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ac6:	4b16      	ldr	r3, [pc, #88]	; (8001b20 <MX_UART4_Init+0x90>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001acc:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <MX_UART4_Init+0x90>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ad2:	4b13      	ldr	r3, [pc, #76]	; (8001b20 <MX_UART4_Init+0x90>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001ad8:	4811      	ldr	r0, [pc, #68]	; (8001b20 <MX_UART4_Init+0x90>)
 8001ada:	f008 fc7f 	bl	800a3dc <HAL_UART_Init>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8001ae4:	f000 fa50 	bl	8001f88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ae8:	2100      	movs	r1, #0
 8001aea:	480d      	ldr	r0, [pc, #52]	; (8001b20 <MX_UART4_Init+0x90>)
 8001aec:	f009 f856 	bl	800ab9c <HAL_UARTEx_SetTxFifoThreshold>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8001af6:	f000 fa47 	bl	8001f88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001afa:	2100      	movs	r1, #0
 8001afc:	4808      	ldr	r0, [pc, #32]	; (8001b20 <MX_UART4_Init+0x90>)
 8001afe:	f009 f88b 	bl	800ac18 <HAL_UARTEx_SetRxFifoThreshold>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8001b08:	f000 fa3e 	bl	8001f88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8001b0c:	4804      	ldr	r0, [pc, #16]	; (8001b20 <MX_UART4_Init+0x90>)
 8001b0e:	f009 f80c 	bl	800ab2a <HAL_UARTEx_DisableFifoMode>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8001b18:	f000 fa36 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001b1c:	bf00      	nop
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20000378 	.word	0x20000378
 8001b24:	40004c00 	.word	0x40004c00

08001b28 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b2c:	4b22      	ldr	r3, [pc, #136]	; (8001bb8 <MX_USART1_UART_Init+0x90>)
 8001b2e:	4a23      	ldr	r2, [pc, #140]	; (8001bbc <MX_USART1_UART_Init+0x94>)
 8001b30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b32:	4b21      	ldr	r3, [pc, #132]	; (8001bb8 <MX_USART1_UART_Init+0x90>)
 8001b34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b3a:	4b1f      	ldr	r3, [pc, #124]	; (8001bb8 <MX_USART1_UART_Init+0x90>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b40:	4b1d      	ldr	r3, [pc, #116]	; (8001bb8 <MX_USART1_UART_Init+0x90>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b46:	4b1c      	ldr	r3, [pc, #112]	; (8001bb8 <MX_USART1_UART_Init+0x90>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b4c:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <MX_USART1_UART_Init+0x90>)
 8001b4e:	220c      	movs	r2, #12
 8001b50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b52:	4b19      	ldr	r3, [pc, #100]	; (8001bb8 <MX_USART1_UART_Init+0x90>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b58:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <MX_USART1_UART_Init+0x90>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b5e:	4b16      	ldr	r3, [pc, #88]	; (8001bb8 <MX_USART1_UART_Init+0x90>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b64:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <MX_USART1_UART_Init+0x90>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b6a:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <MX_USART1_UART_Init+0x90>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b70:	4811      	ldr	r0, [pc, #68]	; (8001bb8 <MX_USART1_UART_Init+0x90>)
 8001b72:	f008 fc33 	bl	800a3dc <HAL_UART_Init>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001b7c:	f000 fa04 	bl	8001f88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b80:	2100      	movs	r1, #0
 8001b82:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <MX_USART1_UART_Init+0x90>)
 8001b84:	f009 f80a 	bl	800ab9c <HAL_UARTEx_SetTxFifoThreshold>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d001      	beq.n	8001b92 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001b8e:	f000 f9fb 	bl	8001f88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b92:	2100      	movs	r1, #0
 8001b94:	4808      	ldr	r0, [pc, #32]	; (8001bb8 <MX_USART1_UART_Init+0x90>)
 8001b96:	f009 f83f 	bl	800ac18 <HAL_UARTEx_SetRxFifoThreshold>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d001      	beq.n	8001ba4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001ba0:	f000 f9f2 	bl	8001f88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001ba4:	4804      	ldr	r0, [pc, #16]	; (8001bb8 <MX_USART1_UART_Init+0x90>)
 8001ba6:	f008 ffc0 	bl	800ab2a <HAL_UARTEx_DisableFifoMode>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001bb0:	f000 f9ea 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	20000408 	.word	0x20000408
 8001bbc:	40013800 	.word	0x40013800

08001bc0 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
 8001bd4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8001bd6:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001bda:	f7ff fc17 	bl	800140c <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001bde:	2001      	movs	r0, #1
 8001be0:	f7ff fbf8 	bl	80013d4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001be4:	2002      	movs	r0, #2
 8001be6:	f7ff fbf5 	bl	80013d4 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PA15 (JTDI)   ------> UCPD1_CC1
  PB15   ------> UCPD1_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bee:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf8:	463b      	mov	r3, r7
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	4809      	ldr	r0, [pc, #36]	; (8001c24 <MX_UCPD1_Init+0x64>)
 8001bfe:	f009 fa01 	bl	800b004 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8001c02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c06:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c10:	463b      	mov	r3, r7
 8001c12:	4619      	mov	r1, r3
 8001c14:	4804      	ldr	r0, [pc, #16]	; (8001c28 <MX_UCPD1_Init+0x68>)
 8001c16:	f009 f9f5 	bl	800b004 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8001c1a:	bf00      	nop
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	42020000 	.word	0x42020000
 8001c28:	42020400 	.word	0x42020400

08001c2c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001c32:	4a13      	ldr	r2, [pc, #76]	; (8001c80 <MX_USB_OTG_FS_PCD_Init+0x54>)
 8001c34:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001c36:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001c38:	2206      	movs	r2, #6
 8001c3a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001c3c:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001c3e:	2202      	movs	r2, #2
 8001c40:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001c42:	4b0e      	ldr	r3, [pc, #56]	; (8001c7c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001c48:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8001c54:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001c5a:	4b08      	ldr	r3, [pc, #32]	; (8001c7c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001c60:	4b06      	ldr	r3, [pc, #24]	; (8001c7c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001c66:	4805      	ldr	r0, [pc, #20]	; (8001c7c <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001c68:	f002 fe2e 	bl	80048c8 <HAL_PCD_Init>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_USB_OTG_FS_PCD_Init+0x4a>
  {
    Error_Handler();
 8001c72:	f000 f989 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	20000498 	.word	0x20000498
 8001c80:	42040000 	.word	0x42040000

08001c84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b08e      	sub	sp, #56	; 0x38
 8001c88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	609a      	str	r2, [r3, #8]
 8001c96:	60da      	str	r2, [r3, #12]
 8001c98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c9a:	4bb2      	ldr	r3, [pc, #712]	; (8001f64 <MX_GPIO_Init+0x2e0>)
 8001c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ca0:	4ab0      	ldr	r2, [pc, #704]	; (8001f64 <MX_GPIO_Init+0x2e0>)
 8001ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ca6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001caa:	4bae      	ldr	r3, [pc, #696]	; (8001f64 <MX_GPIO_Init+0x2e0>)
 8001cac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb4:	623b      	str	r3, [r7, #32]
 8001cb6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb8:	4baa      	ldr	r3, [pc, #680]	; (8001f64 <MX_GPIO_Init+0x2e0>)
 8001cba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cbe:	4aa9      	ldr	r2, [pc, #676]	; (8001f64 <MX_GPIO_Init+0x2e0>)
 8001cc0:	f043 0304 	orr.w	r3, r3, #4
 8001cc4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001cc8:	4ba6      	ldr	r3, [pc, #664]	; (8001f64 <MX_GPIO_Init+0x2e0>)
 8001cca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cce:	f003 0304 	and.w	r3, r3, #4
 8001cd2:	61fb      	str	r3, [r7, #28]
 8001cd4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd6:	4ba3      	ldr	r3, [pc, #652]	; (8001f64 <MX_GPIO_Init+0x2e0>)
 8001cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cdc:	4aa1      	ldr	r2, [pc, #644]	; (8001f64 <MX_GPIO_Init+0x2e0>)
 8001cde:	f043 0301 	orr.w	r3, r3, #1
 8001ce2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001ce6:	4b9f      	ldr	r3, [pc, #636]	; (8001f64 <MX_GPIO_Init+0x2e0>)
 8001ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	61bb      	str	r3, [r7, #24]
 8001cf2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001cf4:	4b9b      	ldr	r3, [pc, #620]	; (8001f64 <MX_GPIO_Init+0x2e0>)
 8001cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cfa:	4a9a      	ldr	r2, [pc, #616]	; (8001f64 <MX_GPIO_Init+0x2e0>)
 8001cfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d00:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d04:	4b97      	ldr	r3, [pc, #604]	; (8001f64 <MX_GPIO_Init+0x2e0>)
 8001d06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d12:	4b94      	ldr	r3, [pc, #592]	; (8001f64 <MX_GPIO_Init+0x2e0>)
 8001d14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d18:	4a92      	ldr	r2, [pc, #584]	; (8001f64 <MX_GPIO_Init+0x2e0>)
 8001d1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d1e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d22:	4b90      	ldr	r3, [pc, #576]	; (8001f64 <MX_GPIO_Init+0x2e0>)
 8001d24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d2c:	613b      	str	r3, [r7, #16]
 8001d2e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d30:	4b8c      	ldr	r3, [pc, #560]	; (8001f64 <MX_GPIO_Init+0x2e0>)
 8001d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d36:	4a8b      	ldr	r2, [pc, #556]	; (8001f64 <MX_GPIO_Init+0x2e0>)
 8001d38:	f043 0302 	orr.w	r3, r3, #2
 8001d3c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d40:	4b88      	ldr	r3, [pc, #544]	; (8001f64 <MX_GPIO_Init+0x2e0>)
 8001d42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	60fb      	str	r3, [r7, #12]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d4e:	4b85      	ldr	r3, [pc, #532]	; (8001f64 <MX_GPIO_Init+0x2e0>)
 8001d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d54:	4a83      	ldr	r2, [pc, #524]	; (8001f64 <MX_GPIO_Init+0x2e0>)
 8001d56:	f043 0308 	orr.w	r3, r3, #8
 8001d5a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d5e:	4b81      	ldr	r3, [pc, #516]	; (8001f64 <MX_GPIO_Init+0x2e0>)
 8001d60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	60bb      	str	r3, [r7, #8]
 8001d6a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d6c:	4b7d      	ldr	r3, [pc, #500]	; (8001f64 <MX_GPIO_Init+0x2e0>)
 8001d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d72:	4a7c      	ldr	r2, [pc, #496]	; (8001f64 <MX_GPIO_Init+0x2e0>)
 8001d74:	f043 0310 	orr.w	r3, r3, #16
 8001d78:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d7c:	4b79      	ldr	r3, [pc, #484]	; (8001f64 <MX_GPIO_Init+0x2e0>)
 8001d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d82:	f003 0310 	and.w	r3, r3, #16
 8001d86:	607b      	str	r3, [r7, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d8a:	4b76      	ldr	r3, [pc, #472]	; (8001f64 <MX_GPIO_Init+0x2e0>)
 8001d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d90:	4a74      	ldr	r2, [pc, #464]	; (8001f64 <MX_GPIO_Init+0x2e0>)
 8001d92:	f043 0320 	orr.w	r3, r3, #32
 8001d96:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d9a:	4b72      	ldr	r3, [pc, #456]	; (8001f64 <MX_GPIO_Init+0x2e0>)
 8001d9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001da0:	f003 0320 	and.w	r3, r3, #32
 8001da4:	603b      	str	r3, [r7, #0]
 8001da6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_PWR_GPIO_Port, UCPD_PWR_Pin, GPIO_PIN_RESET);
 8001da8:	2200      	movs	r2, #0
 8001daa:	2120      	movs	r1, #32
 8001dac:	486e      	ldr	r0, [pc, #440]	; (8001f68 <MX_GPIO_Init+0x2e4>)
 8001dae:	f001 fb2d 	bl	800340c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin, GPIO_PIN_RESET);
 8001db2:	2200      	movs	r2, #0
 8001db4:	21c2      	movs	r1, #194	; 0xc2
 8001db6:	486d      	ldr	r0, [pc, #436]	; (8001f6c <MX_GPIO_Init+0x2e8>)
 8001db8:	f001 fb28 	bl	800340c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WRLS_WKUP_B_GPIO_Port, WRLS_WKUP_B_Pin, GPIO_PIN_RESET);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2140      	movs	r1, #64	; 0x40
 8001dc0:	486b      	ldr	r0, [pc, #428]	; (8001f70 <MX_GPIO_Init+0x2ec>)
 8001dc2:	f001 fb23 	bl	800340c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin, GPIO_PIN_RESET);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8001dcc:	4869      	ldr	r0, [pc, #420]	; (8001f74 <MX_GPIO_Init+0x2f0>)
 8001dce:	f001 fb1d 	bl	800340c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WRLS_FLOW_Pin Mems_VLX_GPIO_Pin Mems_INT_LPS22HH_Pin */
  GPIO_InitStruct.Pin = WRLS_FLOW_Pin|Mems_VLX_GPIO_Pin|Mems_INT_LPS22HH_Pin;
 8001dd2:	f248 0324 	movw	r3, #32804	; 0x8024
 8001dd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001de0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de4:	4619      	mov	r1, r3
 8001de6:	4862      	ldr	r0, [pc, #392]	; (8001f70 <MX_GPIO_Init+0x2ec>)
 8001de8:	f001 f938 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3_BOOT0_Pin */
  GPIO_InitStruct.Pin = PH3_BOOT0_Pin;
 8001dec:	2308      	movs	r3, #8
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001df0:	2300      	movs	r3, #0
 8001df2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PH3_BOOT0_GPIO_Port, &GPIO_InitStruct);
 8001df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	485b      	ldr	r0, [pc, #364]	; (8001f6c <MX_GPIO_Init+0x2e8>)
 8001e00:	f001 f92c 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_PWR_Pin */
  GPIO_InitStruct.Pin = UCPD_PWR_Pin;
 8001e04:	2320      	movs	r3, #32
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e10:	2300      	movs	r3, #0
 8001e12:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(UCPD_PWR_GPIO_Port, &GPIO_InitStruct);
 8001e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e18:	4619      	mov	r1, r3
 8001e1a:	4853      	ldr	r0, [pc, #332]	; (8001f68 <MX_GPIO_Init+0x2e4>)
 8001e1c:	f001 f91e 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pin : PH13_Pin */
  GPIO_InitStruct.Pin = PH13_Pin;
 8001e20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e26:	2303      	movs	r3, #3
 8001e28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PH13_GPIO_Port, &GPIO_InitStruct);
 8001e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e32:	4619      	mov	r1, r3
 8001e34:	484d      	ldr	r0, [pc, #308]	; (8001f6c <MX_GPIO_Init+0x2e8>)
 8001e36:	f001 f911 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Button_Pin */
  GPIO_InitStruct.Pin = USER_Button_Pin;
 8001e3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e40:	2300      	movs	r3, #0
 8001e42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Button_GPIO_Port, &GPIO_InitStruct);
 8001e48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	484a      	ldr	r0, [pc, #296]	; (8001f78 <MX_GPIO_Init+0x2f4>)
 8001e50:	f001 f904 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin Mems_VL53_xshut_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin;
 8001e54:	23c2      	movs	r3, #194	; 0xc2
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e60:	2300      	movs	r3, #0
 8001e62:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001e64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4840      	ldr	r0, [pc, #256]	; (8001f6c <MX_GPIO_Init+0x2e8>)
 8001e6c:	f001 f8f6 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CCK1_Pin */
  GPIO_InitStruct.Pin = MIC_CCK1_Pin;
 8001e70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e76:	2302      	movs	r3, #2
 8001e78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8001e82:	2306      	movs	r3, #6
 8001e84:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_CCK1_GPIO_Port, &GPIO_InitStruct);
 8001e86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4839      	ldr	r0, [pc, #228]	; (8001f74 <MX_GPIO_Init+0x2f0>)
 8001e8e:	f001 f8e5 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pin : WRLS_WKUP_B_Pin */
  GPIO_InitStruct.Pin = WRLS_WKUP_B_Pin;
 8001e92:	2340      	movs	r3, #64	; 0x40
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e96:	2301      	movs	r3, #1
 8001e98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WRLS_WKUP_B_GPIO_Port, &GPIO_InitStruct);
 8001ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4831      	ldr	r0, [pc, #196]	; (8001f70 <MX_GPIO_Init+0x2ec>)
 8001eaa:	f001 f8d7 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pins : WRLS_NOTIFY_Pin Mems_INT_IIS2MDC_Pin USB_IANA_Pin Mems_INT_IIS2MDCD9_Pin */
  GPIO_InitStruct.Pin = WRLS_NOTIFY_Pin|Mems_INT_IIS2MDC_Pin|USB_IANA_Pin|Mems_INT_IIS2MDCD9_Pin;
 8001eae:	f44f 43cc 	mov.w	r3, #26112	; 0x6600
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	482e      	ldr	r0, [pc, #184]	; (8001f7c <MX_GPIO_Init+0x2f8>)
 8001ec4:	f001 f8ca 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_UCPD_FLT_Pin Mems_ISM330DLC_INT1_Pin */
  GPIO_InitStruct.Pin = USB_UCPD_FLT_Pin|Mems_ISM330DLC_INT1_Pin;
 8001ec8:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ed6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eda:	4619      	mov	r1, r3
 8001edc:	4828      	ldr	r0, [pc, #160]	; (8001f80 <MX_GPIO_Init+0x2fc>)
 8001ede:	f001 f8bd 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_SENSE_Pin;
 8001ee2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ee6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001ef0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	481f      	ldr	r0, [pc, #124]	; (8001f74 <MX_GPIO_Init+0x2f0>)
 8001ef8:	f001 f8b0 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001efc:	2304      	movs	r3, #4
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f00:	2302      	movs	r3, #2
 8001f02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f04:	2300      	movs	r3, #0
 8001f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f14:	4619      	mov	r1, r3
 8001f16:	481b      	ldr	r0, [pc, #108]	; (8001f84 <MX_GPIO_Init+0x300>)
 8001f18:	f001 f8a0 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pins : Mems_STSAFE_RESET_Pin WRLS_WKUP_W_Pin */
  GPIO_InitStruct.Pin = Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin;
 8001f1c:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 8001f20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f22:	2301      	movs	r3, #1
 8001f24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f26:	2300      	movs	r3, #0
 8001f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f32:	4619      	mov	r1, r3
 8001f34:	480f      	ldr	r0, [pc, #60]	; (8001f74 <MX_GPIO_Init+0x2f0>)
 8001f36:	f001 f891 	bl	800305c <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_SDIN0_Pin */
  GPIO_InitStruct.Pin = MIC_SDIN0_Pin;
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f46:	2300      	movs	r3, #0
 8001f48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8001f4a:	2306      	movs	r3, #6
 8001f4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_SDIN0_GPIO_Port, &GPIO_InitStruct);
 8001f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f52:	4619      	mov	r1, r3
 8001f54:	4804      	ldr	r0, [pc, #16]	; (8001f68 <MX_GPIO_Init+0x2e4>)
 8001f56:	f001 f881 	bl	800305c <HAL_GPIO_Init>

}
 8001f5a:	bf00      	nop
 8001f5c:	3738      	adds	r7, #56	; 0x38
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	46020c00 	.word	0x46020c00
 8001f68:	42020400 	.word	0x42020400
 8001f6c:	42021c00 	.word	0x42021c00
 8001f70:	42021800 	.word	0x42021800
 8001f74:	42021400 	.word	0x42021400
 8001f78:	42020800 	.word	0x42020800
 8001f7c:	42020c00 	.word	0x42020c00
 8001f80:	42021000 	.word	0x42021000
 8001f84:	42020000 	.word	0x42020000

08001f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f8c:	b672      	cpsid	i
}
 8001f8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f90:	e7fe      	b.n	8001f90 <Error_Handler+0x8>
	...

08001f94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001f9a:	4b0a      	ldr	r3, [pc, #40]	; (8001fc4 <HAL_MspInit+0x30>)
 8001f9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa0:	4a08      	ldr	r2, [pc, #32]	; (8001fc4 <HAL_MspInit+0x30>)
 8001fa2:	f043 0304 	orr.w	r3, r3, #4
 8001fa6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_MspInit+0x30>)
 8001fac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	607b      	str	r3, [r7, #4]
 8001fb6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	46020c00 	.word	0x46020c00

08001fc8 <HAL_MDF_MspInit>:
* This function configures the hardware resources used in this example
* @param hmdf: MDF handle pointer
* @retval None
*/
void HAL_MDF_MspInit(MDF_HandleTypeDef* hmdf)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b0bc      	sub	sp, #240	; 0xf0
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	605a      	str	r2, [r3, #4]
 8001fda:	609a      	str	r2, [r3, #8]
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fe0:	f107 0310 	add.w	r3, r7, #16
 8001fe4:	22c8      	movs	r2, #200	; 0xc8
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f009 fb80 	bl	800b6ee <memset>
  if(IS_ADF_INSTANCE(hmdf->Instance))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a27      	ldr	r2, [pc, #156]	; (8002090 <HAL_MDF_MspInit+0xc8>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d146      	bne.n	8002086 <HAL_MDF_MspInit+0xbe>

  /* USER CODE END ADF1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADF1;
 8001ff8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ffc:	f04f 0300 	mov.w	r3, #0
 8002000:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Adf1ClockSelection = RCC_ADF1CLKSOURCE_HCLK;
 8002004:	2300      	movs	r3, #0
 8002006:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800200a:	f107 0310 	add.w	r3, r7, #16
 800200e:	4618      	mov	r0, r3
 8002010:	f004 f940 	bl	8006294 <HAL_RCCEx_PeriphCLKConfig>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <HAL_MDF_MspInit+0x56>
    {
      Error_Handler();
 800201a:	f7ff ffb5 	bl	8001f88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADF1_CLK_ENABLE();
 800201e:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <HAL_MDF_MspInit+0xcc>)
 8002020:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002024:	4a1b      	ldr	r2, [pc, #108]	; (8002094 <HAL_MDF_MspInit+0xcc>)
 8002026:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800202a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800202e:	4b19      	ldr	r3, [pc, #100]	; (8002094 <HAL_MDF_MspInit+0xcc>)
 8002030:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002034:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800203c:	4b15      	ldr	r3, [pc, #84]	; (8002094 <HAL_MDF_MspInit+0xcc>)
 800203e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002042:	4a14      	ldr	r2, [pc, #80]	; (8002094 <HAL_MDF_MspInit+0xcc>)
 8002044:	f043 0310 	orr.w	r3, r3, #16
 8002048:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <HAL_MDF_MspInit+0xcc>)
 800204e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002052:	f003 0310 	and.w	r3, r3, #16
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	68bb      	ldr	r3, [r7, #8]
    /**ADF1 GPIO Configuration
    PE10     ------> ADF1_SDI0
    PE9     ------> ADF1_CCK0
    */
    GPIO_InitStruct.Pin = MIC_SDINx_Pin|MIC_CCK0_Pin;
 800205a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800205e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002062:	2302      	movs	r3, #2
 8002064:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206e:	2300      	movs	r3, #0
 8002070:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 8002074:	2303      	movs	r3, #3
 8002076:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800207a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800207e:	4619      	mov	r1, r3
 8002080:	4805      	ldr	r0, [pc, #20]	; (8002098 <HAL_MDF_MspInit+0xd0>)
 8002082:	f000 ffeb 	bl	800305c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADF1_MspInit 1 */

  /* USER CODE END ADF1_MspInit 1 */
  }

}
 8002086:	bf00      	nop
 8002088:	37f0      	adds	r7, #240	; 0xf0
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	46024080 	.word	0x46024080
 8002094:	46020c00 	.word	0x46020c00
 8002098:	42021000 	.word	0x42021000

0800209c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b0be      	sub	sp, #248	; 0xf8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80020b4:	f107 0318 	add.w	r3, r7, #24
 80020b8:	22c8      	movs	r2, #200	; 0xc8
 80020ba:	2100      	movs	r1, #0
 80020bc:	4618      	mov	r0, r3
 80020be:	f009 fb16 	bl	800b6ee <memset>
  if(hi2c->Instance==I2C1)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a4d      	ldr	r2, [pc, #308]	; (80021fc <HAL_I2C_MspInit+0x160>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d147      	bne.n	800215c <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80020cc:	f04f 0240 	mov.w	r2, #64	; 0x40
 80020d0:	f04f 0300 	mov.w	r3, #0
 80020d4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80020d8:	2300      	movs	r3, #0
 80020da:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020de:	f107 0318 	add.w	r3, r7, #24
 80020e2:	4618      	mov	r0, r3
 80020e4:	f004 f8d6 	bl	8006294 <HAL_RCCEx_PeriphCLKConfig>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80020ee:	f7ff ff4b 	bl	8001f88 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f2:	4b43      	ldr	r3, [pc, #268]	; (8002200 <HAL_I2C_MspInit+0x164>)
 80020f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020f8:	4a41      	ldr	r2, [pc, #260]	; (8002200 <HAL_I2C_MspInit+0x164>)
 80020fa:	f043 0302 	orr.w	r3, r3, #2
 80020fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002102:	4b3f      	ldr	r3, [pc, #252]	; (8002200 <HAL_I2C_MspInit+0x164>)
 8002104:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002108:	f003 0302 	and.w	r3, r3, #2
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 8002110:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002114:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002118:	2312      	movs	r3, #18
 800211a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211e:	2300      	movs	r3, #0
 8002120:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002124:	2300      	movs	r3, #0
 8002126:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800212a:	2304      	movs	r3, #4
 800212c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002130:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002134:	4619      	mov	r1, r3
 8002136:	4833      	ldr	r0, [pc, #204]	; (8002204 <HAL_I2C_MspInit+0x168>)
 8002138:	f000 ff90 	bl	800305c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800213c:	4b30      	ldr	r3, [pc, #192]	; (8002200 <HAL_I2C_MspInit+0x164>)
 800213e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002142:	4a2f      	ldr	r2, [pc, #188]	; (8002200 <HAL_I2C_MspInit+0x164>)
 8002144:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002148:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800214c:	4b2c      	ldr	r3, [pc, #176]	; (8002200 <HAL_I2C_MspInit+0x164>)
 800214e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002152:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002156:	613b      	str	r3, [r7, #16]
 8002158:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800215a:	e04a      	b.n	80021f2 <HAL_I2C_MspInit+0x156>
  else if(hi2c->Instance==I2C2)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a29      	ldr	r2, [pc, #164]	; (8002208 <HAL_I2C_MspInit+0x16c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d145      	bne.n	80021f2 <HAL_I2C_MspInit+0x156>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002166:	f04f 0280 	mov.w	r2, #128	; 0x80
 800216a:	f04f 0300 	mov.w	r3, #0
 800216e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002172:	2300      	movs	r3, #0
 8002174:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002178:	f107 0318 	add.w	r3, r7, #24
 800217c:	4618      	mov	r0, r3
 800217e:	f004 f889 	bl	8006294 <HAL_RCCEx_PeriphCLKConfig>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8002188:	f7ff fefe 	bl	8001f88 <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800218c:	4b1c      	ldr	r3, [pc, #112]	; (8002200 <HAL_I2C_MspInit+0x164>)
 800218e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002192:	4a1b      	ldr	r2, [pc, #108]	; (8002200 <HAL_I2C_MspInit+0x164>)
 8002194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002198:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800219c:	4b18      	ldr	r3, [pc, #96]	; (8002200 <HAL_I2C_MspInit+0x164>)
 800219e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80021aa:	2330      	movs	r3, #48	; 0x30
 80021ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021b0:	2312      	movs	r3, #18
 80021b2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021bc:	2300      	movs	r3, #0
 80021be:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80021c2:	2304      	movs	r3, #4
 80021c4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80021c8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80021cc:	4619      	mov	r1, r3
 80021ce:	480f      	ldr	r0, [pc, #60]	; (800220c <HAL_I2C_MspInit+0x170>)
 80021d0:	f000 ff44 	bl	800305c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021d4:	4b0a      	ldr	r3, [pc, #40]	; (8002200 <HAL_I2C_MspInit+0x164>)
 80021d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021da:	4a09      	ldr	r2, [pc, #36]	; (8002200 <HAL_I2C_MspInit+0x164>)
 80021dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021e0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80021e4:	4b06      	ldr	r3, [pc, #24]	; (8002200 <HAL_I2C_MspInit+0x164>)
 80021e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ee:	60bb      	str	r3, [r7, #8]
 80021f0:	68bb      	ldr	r3, [r7, #8]
}
 80021f2:	bf00      	nop
 80021f4:	37f8      	adds	r7, #248	; 0xf8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40005400 	.word	0x40005400
 8002200:	46020c00 	.word	0x46020c00
 8002204:	42020400 	.word	0x42020400
 8002208:	40005800 	.word	0x40005800
 800220c:	42021c00 	.word	0x42021c00

08002210 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b0c6      	sub	sp, #280	; 0x118
 8002214:	af00      	add	r7, sp, #0
 8002216:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800221a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800221e:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002220:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002224:	2200      	movs	r2, #0
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	605a      	str	r2, [r3, #4]
 800222a:	609a      	str	r2, [r3, #8]
 800222c:	60da      	str	r2, [r3, #12]
 800222e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002230:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002234:	22c8      	movs	r2, #200	; 0xc8
 8002236:	2100      	movs	r1, #0
 8002238:	4618      	mov	r0, r3
 800223a:	f009 fa58 	bl	800b6ee <memset>
  if(hospi->Instance==OCTOSPI1)
 800223e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002242:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a96      	ldr	r2, [pc, #600]	; (80024a4 <HAL_OSPI_MspInit+0x294>)
 800224c:	4293      	cmp	r3, r2
 800224e:	f040 813b 	bne.w	80024c8 <HAL_OSPI_MspInit+0x2b8>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8002252:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002256:	f04f 0300 	mov.w	r3, #0
 800225a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800225e:	2300      	movs	r3, #0
 8002260:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002264:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002268:	4618      	mov	r0, r3
 800226a:	f004 f813 	bl	8006294 <HAL_RCCEx_PeriphCLKConfig>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 8002274:	f7ff fe88 	bl	8001f88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8002278:	4b8b      	ldr	r3, [pc, #556]	; (80024a8 <HAL_OSPI_MspInit+0x298>)
 800227a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227e:	4a8a      	ldr	r2, [pc, #552]	; (80024a8 <HAL_OSPI_MspInit+0x298>)
 8002280:	f043 0310 	orr.w	r3, r3, #16
 8002284:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002288:	4b87      	ldr	r3, [pc, #540]	; (80024a8 <HAL_OSPI_MspInit+0x298>)
 800228a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228e:	f003 0310 	and.w	r3, r3, #16
 8002292:	637b      	str	r3, [r7, #52]	; 0x34
 8002294:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002296:	4b84      	ldr	r3, [pc, #528]	; (80024a8 <HAL_OSPI_MspInit+0x298>)
 8002298:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800229c:	4a82      	ldr	r2, [pc, #520]	; (80024a8 <HAL_OSPI_MspInit+0x298>)
 800229e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80022a6:	4b80      	ldr	r3, [pc, #512]	; (80024a8 <HAL_OSPI_MspInit+0x298>)
 80022a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b0:	633b      	str	r3, [r7, #48]	; 0x30
 80022b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022b4:	4b7c      	ldr	r3, [pc, #496]	; (80024a8 <HAL_OSPI_MspInit+0x298>)
 80022b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022ba:	4a7b      	ldr	r2, [pc, #492]	; (80024a8 <HAL_OSPI_MspInit+0x298>)
 80022bc:	f043 0310 	orr.w	r3, r3, #16
 80022c0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80022c4:	4b78      	ldr	r3, [pc, #480]	; (80024a8 <HAL_OSPI_MspInit+0x298>)
 80022c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022ca:	f003 0310 	and.w	r3, r3, #16
 80022ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022d2:	4b75      	ldr	r3, [pc, #468]	; (80024a8 <HAL_OSPI_MspInit+0x298>)
 80022d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022d8:	4a73      	ldr	r2, [pc, #460]	; (80024a8 <HAL_OSPI_MspInit+0x298>)
 80022da:	f043 0308 	orr.w	r3, r3, #8
 80022de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80022e2:	4b71      	ldr	r3, [pc, #452]	; (80024a8 <HAL_OSPI_MspInit+0x298>)
 80022e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022e8:	f003 0308 	and.w	r3, r3, #8
 80022ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80022ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80022f0:	4b6d      	ldr	r3, [pc, #436]	; (80024a8 <HAL_OSPI_MspInit+0x298>)
 80022f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022f6:	4a6c      	ldr	r2, [pc, #432]	; (80024a8 <HAL_OSPI_MspInit+0x298>)
 80022f8:	f043 0320 	orr.w	r3, r3, #32
 80022fc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002300:	4b69      	ldr	r3, [pc, #420]	; (80024a8 <HAL_OSPI_MspInit+0x298>)
 8002302:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002306:	f003 0320 	and.w	r3, r3, #32
 800230a:	627b      	str	r3, [r7, #36]	; 0x24
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800230e:	4b66      	ldr	r3, [pc, #408]	; (80024a8 <HAL_OSPI_MspInit+0x298>)
 8002310:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002314:	4a64      	ldr	r2, [pc, #400]	; (80024a8 <HAL_OSPI_MspInit+0x298>)
 8002316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800231a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800231e:	4b62      	ldr	r3, [pc, #392]	; (80024a8 <HAL_OSPI_MspInit+0x298>)
 8002320:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002324:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002328:	623b      	str	r3, [r7, #32]
 800232a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800232c:	4b5e      	ldr	r3, [pc, #376]	; (80024a8 <HAL_OSPI_MspInit+0x298>)
 800232e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002332:	4a5d      	ldr	r2, [pc, #372]	; (80024a8 <HAL_OSPI_MspInit+0x298>)
 8002334:	f043 0304 	orr.w	r3, r3, #4
 8002338:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800233c:	4b5a      	ldr	r3, [pc, #360]	; (80024a8 <HAL_OSPI_MspInit+0x298>)
 800233e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002342:	f003 0304 	and.w	r3, r3, #4
 8002346:	61fb      	str	r3, [r7, #28]
 8002348:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800234a:	4b57      	ldr	r3, [pc, #348]	; (80024a8 <HAL_OSPI_MspInit+0x298>)
 800234c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002350:	4a55      	ldr	r2, [pc, #340]	; (80024a8 <HAL_OSPI_MspInit+0x298>)
 8002352:	f043 0302 	orr.w	r3, r3, #2
 8002356:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800235a:	4b53      	ldr	r3, [pc, #332]	; (80024a8 <HAL_OSPI_MspInit+0x298>)
 800235c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002360:	f003 0202 	and.w	r2, r3, #2
 8002364:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002368:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002372:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002376:	681b      	ldr	r3, [r3, #0]
    PF6     ------> OCTOSPIM_P1_IO3
    PC3     ------> OCTOSPIM_P1_IO6
    PB10     ------> OCTOSPIM_P1_CLK
    PB11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = OCTOSPI_R_IO5_Pin;
 8002378:	2301      	movs	r3, #1
 800237a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237e:	2302      	movs	r3, #2
 8002380:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238a:	2303      	movs	r3, #3
 800238c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8002390:	2303      	movs	r3, #3
 8002392:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_R_IO5_GPIO_Port, &GPIO_InitStruct);
 8002396:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800239a:	4619      	mov	r1, r3
 800239c:	4843      	ldr	r0, [pc, #268]	; (80024ac <HAL_OSPI_MspInit+0x29c>)
 800239e:	f000 fe5d 	bl	800305c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_DQS_Pin;
 80023a2:	2308      	movs	r3, #8
 80023a4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a8:	2302      	movs	r3, #2
 80023aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b4:	2303      	movs	r3, #3
 80023b6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80023ba:	2303      	movs	r3, #3
 80023bc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_R_DQS_GPIO_Port, &GPIO_InitStruct);
 80023c0:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80023c4:	4619      	mov	r1, r3
 80023c6:	483a      	ldr	r0, [pc, #232]	; (80024b0 <HAL_OSPI_MspInit+0x2a0>)
 80023c8:	f000 fe48 	bl	800305c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO7_Pin;
 80023cc:	2380      	movs	r3, #128	; 0x80
 80023ce:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d2:	2302      	movs	r3, #2
 80023d4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d8:	2300      	movs	r3, #0
 80023da:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023de:	2303      	movs	r3, #3
 80023e0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80023e4:	230a      	movs	r3, #10
 80023e6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_R_IO7_GPIO_Port, &GPIO_InitStruct);
 80023ea:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80023ee:	4619      	mov	r1, r3
 80023f0:	4830      	ldr	r0, [pc, #192]	; (80024b4 <HAL_OSPI_MspInit+0x2a4>)
 80023f2:	f000 fe33 	bl	800305c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO0_Pin|OCTOSPI_R_IO2_Pin|OCTOSPI_R_IO1_Pin|OCTOSPI_R_IO3_Pin;
 80023f6:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80023fa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fe:	2302      	movs	r3, #2
 8002400:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002404:	2300      	movs	r3, #0
 8002406:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800240a:	2303      	movs	r3, #3
 800240c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8002410:	230a      	movs	r3, #10
 8002412:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002416:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800241a:	4619      	mov	r1, r3
 800241c:	4826      	ldr	r0, [pc, #152]	; (80024b8 <HAL_OSPI_MspInit+0x2a8>)
 800241e:	f000 fe1d 	bl	800305c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO4_Pin;
 8002422:	2304      	movs	r3, #4
 8002424:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002428:	2302      	movs	r3, #2
 800242a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800242e:	2300      	movs	r3, #0
 8002430:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002434:	2303      	movs	r3, #3
 8002436:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 800243a:	2303      	movs	r3, #3
 800243c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_R_IO4_GPIO_Port, &GPIO_InitStruct);
 8002440:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002444:	4619      	mov	r1, r3
 8002446:	481d      	ldr	r0, [pc, #116]	; (80024bc <HAL_OSPI_MspInit+0x2ac>)
 8002448:	f000 fe08 	bl	800305c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO6_Pin;
 800244c:	2308      	movs	r3, #8
 800244e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002452:	2302      	movs	r3, #2
 8002454:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002458:	2300      	movs	r3, #0
 800245a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800245e:	2303      	movs	r3, #3
 8002460:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8002464:	230a      	movs	r3, #10
 8002466:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_R_IO6_GPIO_Port, &GPIO_InitStruct);
 800246a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800246e:	4619      	mov	r1, r3
 8002470:	4813      	ldr	r0, [pc, #76]	; (80024c0 <HAL_OSPI_MspInit+0x2b0>)
 8002472:	f000 fdf3 	bl	800305c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_CLK_P_Pin|OCTOSPI_R_NCS_Pin;
 8002476:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800247a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247e:	2302      	movs	r3, #2
 8002480:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002484:	2300      	movs	r3, #0
 8002486:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248a:	2303      	movs	r3, #3
 800248c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8002490:	230a      	movs	r3, #10
 8002492:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002496:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800249a:	4619      	mov	r1, r3
 800249c:	4809      	ldr	r0, [pc, #36]	; (80024c4 <HAL_OSPI_MspInit+0x2b4>)
 800249e:	f000 fddd 	bl	800305c <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 80024a2:	e0cb      	b.n	800263c <HAL_OSPI_MspInit+0x42c>
 80024a4:	420d1400 	.word	0x420d1400
 80024a8:	46020c00 	.word	0x46020c00
 80024ac:	42022000 	.word	0x42022000
 80024b0:	42021000 	.word	0x42021000
 80024b4:	42020c00 	.word	0x42020c00
 80024b8:	42021400 	.word	0x42021400
 80024bc:	42021c00 	.word	0x42021c00
 80024c0:	42020800 	.word	0x42020800
 80024c4:	42020400 	.word	0x42020400
  else if(hospi->Instance==OCTOSPI2)
 80024c8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80024cc:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a5c      	ldr	r2, [pc, #368]	; (8002648 <HAL_OSPI_MspInit+0x438>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	f040 80b0 	bne.w	800263c <HAL_OSPI_MspInit+0x42c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80024dc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 80024e8:	2300      	movs	r3, #0
 80024ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80024f2:	4618      	mov	r0, r3
 80024f4:	f003 fece 	bl	8006294 <HAL_RCCEx_PeriphCLKConfig>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_OSPI_MspInit+0x2f2>
      Error_Handler();
 80024fe:	f7ff fd43 	bl	8001f88 <Error_Handler>
    __HAL_RCC_OSPI2_CLK_ENABLE();
 8002502:	4b52      	ldr	r3, [pc, #328]	; (800264c <HAL_OSPI_MspInit+0x43c>)
 8002504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002508:	4a50      	ldr	r2, [pc, #320]	; (800264c <HAL_OSPI_MspInit+0x43c>)
 800250a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800250e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002512:	4b4e      	ldr	r3, [pc, #312]	; (800264c <HAL_OSPI_MspInit+0x43c>)
 8002514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002518:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800251c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002520:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002524:	601a      	str	r2, [r3, #0]
 8002526:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800252a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800252e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002530:	4b46      	ldr	r3, [pc, #280]	; (800264c <HAL_OSPI_MspInit+0x43c>)
 8002532:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002536:	4a45      	ldr	r2, [pc, #276]	; (800264c <HAL_OSPI_MspInit+0x43c>)
 8002538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800253c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002540:	4b42      	ldr	r3, [pc, #264]	; (800264c <HAL_OSPI_MspInit+0x43c>)
 8002542:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002546:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800254a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800254e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002558:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800255c:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800255e:	4b3b      	ldr	r3, [pc, #236]	; (800264c <HAL_OSPI_MspInit+0x43c>)
 8002560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002564:	4a39      	ldr	r2, [pc, #228]	; (800264c <HAL_OSPI_MspInit+0x43c>)
 8002566:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800256a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800256e:	4b37      	ldr	r3, [pc, #220]	; (800264c <HAL_OSPI_MspInit+0x43c>)
 8002570:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002574:	f003 0280 	and.w	r2, r3, #128	; 0x80
 8002578:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800257c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8002586:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800258a:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800258c:	4b2f      	ldr	r3, [pc, #188]	; (800264c <HAL_OSPI_MspInit+0x43c>)
 800258e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002592:	4a2e      	ldr	r2, [pc, #184]	; (800264c <HAL_OSPI_MspInit+0x43c>)
 8002594:	f043 0320 	orr.w	r3, r3, #32
 8002598:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800259c:	4b2b      	ldr	r3, [pc, #172]	; (800264c <HAL_OSPI_MspInit+0x43c>)
 800259e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025a2:	f003 0220 	and.w	r2, r3, #32
 80025a6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025aa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80025b4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80025b8:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = OCTOSPI_F_NCS_Pin;
 80025ba:	2320      	movs	r3, #32
 80025bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c0:	2302      	movs	r3, #2
 80025c2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025cc:	2303      	movs	r3, #3
 80025ce:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 80025d2:	2305      	movs	r3, #5
 80025d4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_F_NCS_GPIO_Port, &GPIO_InitStruct);
 80025d8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80025dc:	4619      	mov	r1, r3
 80025de:	481c      	ldr	r0, [pc, #112]	; (8002650 <HAL_OSPI_MspInit+0x440>)
 80025e0:	f000 fd3c 	bl	800305c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCTOSPI_F_IO7_Pin|OCTOSPI_F_IO5_Pin|OCTOSPI_F_IO6_Pin|OCTOSPI_F_IO4_Pin;
 80025e4:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 80025e8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ec:	2302      	movs	r3, #2
 80025ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025f8:	2303      	movs	r3, #3
 80025fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 80025fe:	2305      	movs	r3, #5
 8002600:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002604:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002608:	4619      	mov	r1, r3
 800260a:	4812      	ldr	r0, [pc, #72]	; (8002654 <HAL_OSPI_MspInit+0x444>)
 800260c:	f000 fd26 	bl	800305c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCTOSPI_F_IO0_Pin|OCTOSPI_F_IO1_Pin|OCTOSPI_F_IO2_Pin|OCTOSPI_F_IO3_Pin
 8002610:	f241 031f 	movw	r3, #4127	; 0x101f
 8002614:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002618:	2302      	movs	r3, #2
 800261a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002624:	2303      	movs	r3, #3
 8002626:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 800262a:	2305      	movs	r3, #5
 800262c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002630:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8002634:	4619      	mov	r1, r3
 8002636:	4808      	ldr	r0, [pc, #32]	; (8002658 <HAL_OSPI_MspInit+0x448>)
 8002638:	f000 fd10 	bl	800305c <HAL_GPIO_Init>
}
 800263c:	bf00      	nop
 800263e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	420d2400 	.word	0x420d2400
 800264c:	46020c00 	.word	0x46020c00
 8002650:	42022000 	.word	0x42022000
 8002654:	42021c00 	.word	0x42021c00
 8002658:	42021400 	.word	0x42021400

0800265c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b0be      	sub	sp, #248	; 0xf8
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002664:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	609a      	str	r2, [r3, #8]
 8002670:	60da      	str	r2, [r3, #12]
 8002672:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002674:	f107 0318 	add.w	r3, r7, #24
 8002678:	22c8      	movs	r2, #200	; 0xc8
 800267a:	2100      	movs	r1, #0
 800267c:	4618      	mov	r0, r3
 800267e:	f009 f836 	bl	800b6ee <memset>
  if(hspi->Instance==SPI2)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a39      	ldr	r2, [pc, #228]	; (800276c <HAL_SPI_MspInit+0x110>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d16b      	bne.n	8002764 <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 800268c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 8002698:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800269c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026a0:	f107 0318 	add.w	r3, r7, #24
 80026a4:	4618      	mov	r0, r3
 80026a6:	f003 fdf5 	bl	8006294 <HAL_RCCEx_PeriphCLKConfig>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d001      	beq.n	80026b4 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 80026b0:	f7ff fc6a 	bl	8001f88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026b4:	4b2e      	ldr	r3, [pc, #184]	; (8002770 <HAL_SPI_MspInit+0x114>)
 80026b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026ba:	4a2d      	ldr	r2, [pc, #180]	; (8002770 <HAL_SPI_MspInit+0x114>)
 80026bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026c0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80026c4:	4b2a      	ldr	r3, [pc, #168]	; (8002770 <HAL_SPI_MspInit+0x114>)
 80026c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80026ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80026d2:	4b27      	ldr	r3, [pc, #156]	; (8002770 <HAL_SPI_MspInit+0x114>)
 80026d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026d8:	4a25      	ldr	r2, [pc, #148]	; (8002770 <HAL_SPI_MspInit+0x114>)
 80026da:	f043 0308 	orr.w	r3, r3, #8
 80026de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80026e2:	4b23      	ldr	r3, [pc, #140]	; (8002770 <HAL_SPI_MspInit+0x114>)
 80026e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026e8:	f003 0308 	and.w	r3, r3, #8
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f0:	4b1f      	ldr	r3, [pc, #124]	; (8002770 <HAL_SPI_MspInit+0x114>)
 80026f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80026f6:	4a1e      	ldr	r2, [pc, #120]	; (8002770 <HAL_SPI_MspInit+0x114>)
 80026f8:	f043 0302 	orr.w	r3, r3, #2
 80026fc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002700:	4b1b      	ldr	r3, [pc, #108]	; (8002770 <HAL_SPI_MspInit+0x114>)
 8002702:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	68fb      	ldr	r3, [r7, #12]
    PD4     ------> SPI2_MOSI
    PD3     ------> SPI2_MISO
    PD1     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = WRLS_SPI2_MOSI_Pin|WRLS_SPI2_MISO_Pin|WRLS_SPI2_SCK_Pin;
 800270e:	231a      	movs	r3, #26
 8002710:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002714:	2302      	movs	r3, #2
 8002716:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002720:	2300      	movs	r3, #0
 8002722:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002726:	2305      	movs	r3, #5
 8002728:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800272c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002730:	4619      	mov	r1, r3
 8002732:	4810      	ldr	r0, [pc, #64]	; (8002774 <HAL_SPI_MspInit+0x118>)
 8002734:	f000 fc92 	bl	800305c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WRLS_SPI2_NSS_Pin;
 8002738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800273c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002740:	2302      	movs	r3, #2
 8002742:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002746:	2300      	movs	r3, #0
 8002748:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274c:	2300      	movs	r3, #0
 800274e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002752:	2305      	movs	r3, #5
 8002754:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(WRLS_SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8002758:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800275c:	4619      	mov	r1, r3
 800275e:	4806      	ldr	r0, [pc, #24]	; (8002778 <HAL_SPI_MspInit+0x11c>)
 8002760:	f000 fc7c 	bl	800305c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002764:	bf00      	nop
 8002766:	37f8      	adds	r7, #248	; 0xf8
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	40003800 	.word	0x40003800
 8002770:	46020c00 	.word	0x46020c00
 8002774:	42020c00 	.word	0x42020c00
 8002778:	42020400 	.word	0x42020400

0800277c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a0e      	ldr	r2, [pc, #56]	; (80027c4 <HAL_TIM_PWM_MspInit+0x48>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d116      	bne.n	80027bc <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800278e:	4b0e      	ldr	r3, [pc, #56]	; (80027c8 <HAL_TIM_PWM_MspInit+0x4c>)
 8002790:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002794:	4a0c      	ldr	r2, [pc, #48]	; (80027c8 <HAL_TIM_PWM_MspInit+0x4c>)
 8002796:	f043 0302 	orr.w	r3, r3, #2
 800279a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800279e:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <HAL_TIM_PWM_MspInit+0x4c>)
 80027a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80027ac:	2200      	movs	r2, #0
 80027ae:	2100      	movs	r1, #0
 80027b0:	202e      	movs	r0, #46	; 0x2e
 80027b2:	f000 fba2 	bl	8002efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80027b6:	202e      	movs	r0, #46	; 0x2e
 80027b8:	f000 fbb9 	bl	8002f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80027bc:	bf00      	nop
 80027be:	3710      	adds	r7, #16
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40000400 	.word	0x40000400
 80027c8:	46020c00 	.word	0x46020c00

080027cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b088      	sub	sp, #32
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d4:	f107 030c 	add.w	r3, r7, #12
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a12      	ldr	r2, [pc, #72]	; (8002834 <HAL_TIM_MspPostInit+0x68>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d11e      	bne.n	800282c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80027ee:	4b12      	ldr	r3, [pc, #72]	; (8002838 <HAL_TIM_MspPostInit+0x6c>)
 80027f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027f4:	4a10      	ldr	r2, [pc, #64]	; (8002838 <HAL_TIM_MspPostInit+0x6c>)
 80027f6:	f043 0310 	orr.w	r3, r3, #16
 80027fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80027fe:	4b0e      	ldr	r3, [pc, #56]	; (8002838 <HAL_TIM_MspPostInit+0x6c>)
 8002800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002804:	f003 0310 	and.w	r3, r3, #16
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE5     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800280c:	2320      	movs	r3, #32
 800280e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002810:	2302      	movs	r3, #2
 8002812:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002814:	2300      	movs	r3, #0
 8002816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002818:	2300      	movs	r3, #0
 800281a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800281c:	2302      	movs	r3, #2
 800281e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002820:	f107 030c 	add.w	r3, r7, #12
 8002824:	4619      	mov	r1, r3
 8002826:	4805      	ldr	r0, [pc, #20]	; (800283c <HAL_TIM_MspPostInit+0x70>)
 8002828:	f000 fc18 	bl	800305c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800282c:	bf00      	nop
 800282e:	3720      	adds	r7, #32
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40000400 	.word	0x40000400
 8002838:	46020c00 	.word	0x46020c00
 800283c:	42021000 	.word	0x42021000

08002840 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b0be      	sub	sp, #248	; 0xf8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002848:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800284c:	2200      	movs	r2, #0
 800284e:	601a      	str	r2, [r3, #0]
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	609a      	str	r2, [r3, #8]
 8002854:	60da      	str	r2, [r3, #12]
 8002856:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002858:	f107 0318 	add.w	r3, r7, #24
 800285c:	22c8      	movs	r2, #200	; 0xc8
 800285e:	2100      	movs	r1, #0
 8002860:	4618      	mov	r0, r3
 8002862:	f008 ff44 	bl	800b6ee <memset>
  if(huart->Instance==UART4)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a4c      	ldr	r2, [pc, #304]	; (800299c <HAL_UART_MspInit+0x15c>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d146      	bne.n	80028fe <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002870:	f04f 0208 	mov.w	r2, #8
 8002874:	f04f 0300 	mov.w	r3, #0
 8002878:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800287c:	2300      	movs	r3, #0
 800287e:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002880:	f107 0318 	add.w	r3, r7, #24
 8002884:	4618      	mov	r0, r3
 8002886:	f003 fd05 	bl	8006294 <HAL_RCCEx_PeriphCLKConfig>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8002890:	f7ff fb7a 	bl	8001f88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002894:	4b42      	ldr	r3, [pc, #264]	; (80029a0 <HAL_UART_MspInit+0x160>)
 8002896:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800289a:	4a41      	ldr	r2, [pc, #260]	; (80029a0 <HAL_UART_MspInit+0x160>)
 800289c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80028a0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80028a4:	4b3e      	ldr	r3, [pc, #248]	; (80029a0 <HAL_UART_MspInit+0x160>)
 80028a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028ae:	617b      	str	r3, [r7, #20]
 80028b0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028b2:	4b3b      	ldr	r3, [pc, #236]	; (80029a0 <HAL_UART_MspInit+0x160>)
 80028b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028b8:	4a39      	ldr	r2, [pc, #228]	; (80029a0 <HAL_UART_MspInit+0x160>)
 80028ba:	f043 0304 	orr.w	r3, r3, #4
 80028be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80028c2:	4b37      	ldr	r3, [pc, #220]	; (80029a0 <HAL_UART_MspInit+0x160>)
 80028c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	613b      	str	r3, [r7, #16]
 80028ce:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = WRLS_UART4_RX_Pin|WRLS_UART4_TX_Pin;
 80028d0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d8:	2302      	movs	r3, #2
 80028da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028e4:	2300      	movs	r3, #0
 80028e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80028ea:	2308      	movs	r3, #8
 80028ec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028f0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80028f4:	4619      	mov	r1, r3
 80028f6:	482b      	ldr	r0, [pc, #172]	; (80029a4 <HAL_UART_MspInit+0x164>)
 80028f8:	f000 fbb0 	bl	800305c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80028fc:	e04a      	b.n	8002994 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART1)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a29      	ldr	r2, [pc, #164]	; (80029a8 <HAL_UART_MspInit+0x168>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d145      	bne.n	8002994 <HAL_UART_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002908:	f04f 0201 	mov.w	r2, #1
 800290c:	f04f 0300 	mov.w	r3, #0
 8002910:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002914:	2300      	movs	r3, #0
 8002916:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002918:	f107 0318 	add.w	r3, r7, #24
 800291c:	4618      	mov	r0, r3
 800291e:	f003 fcb9 	bl	8006294 <HAL_RCCEx_PeriphCLKConfig>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d001      	beq.n	800292c <HAL_UART_MspInit+0xec>
      Error_Handler();
 8002928:	f7ff fb2e 	bl	8001f88 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800292c:	4b1c      	ldr	r3, [pc, #112]	; (80029a0 <HAL_UART_MspInit+0x160>)
 800292e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002932:	4a1b      	ldr	r2, [pc, #108]	; (80029a0 <HAL_UART_MspInit+0x160>)
 8002934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002938:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800293c:	4b18      	ldr	r3, [pc, #96]	; (80029a0 <HAL_UART_MspInit+0x160>)
 800293e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002946:	60fb      	str	r3, [r7, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800294a:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <HAL_UART_MspInit+0x160>)
 800294c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002950:	4a13      	ldr	r2, [pc, #76]	; (80029a0 <HAL_UART_MspInit+0x160>)
 8002952:	f043 0301 	orr.w	r3, r3, #1
 8002956:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800295a:	4b11      	ldr	r3, [pc, #68]	; (80029a0 <HAL_UART_MspInit+0x160>)
 800295c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8002968:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800296c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002970:	2302      	movs	r3, #2
 8002972:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002976:	2300      	movs	r3, #0
 8002978:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800297c:	2300      	movs	r3, #0
 800297e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002982:	2307      	movs	r3, #7
 8002984:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002988:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800298c:	4619      	mov	r1, r3
 800298e:	4807      	ldr	r0, [pc, #28]	; (80029ac <HAL_UART_MspInit+0x16c>)
 8002990:	f000 fb64 	bl	800305c <HAL_GPIO_Init>
}
 8002994:	bf00      	nop
 8002996:	37f8      	adds	r7, #248	; 0xf8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	40004c00 	.word	0x40004c00
 80029a0:	46020c00 	.word	0x46020c00
 80029a4:	42020800 	.word	0x42020800
 80029a8:	40013800 	.word	0x40013800
 80029ac:	42020000 	.word	0x42020000

080029b0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b0be      	sub	sp, #248	; 0xf8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80029bc:	2200      	movs	r2, #0
 80029be:	601a      	str	r2, [r3, #0]
 80029c0:	605a      	str	r2, [r3, #4]
 80029c2:	609a      	str	r2, [r3, #8]
 80029c4:	60da      	str	r2, [r3, #12]
 80029c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029c8:	f107 0318 	add.w	r3, r7, #24
 80029cc:	22c8      	movs	r2, #200	; 0xc8
 80029ce:	2100      	movs	r1, #0
 80029d0:	4618      	mov	r0, r3
 80029d2:	f008 fe8c 	bl	800b6ee <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a38      	ldr	r2, [pc, #224]	; (8002abc <HAL_PCD_MspInit+0x10c>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d169      	bne.n	8002ab4 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80029e0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80029e4:	f04f 0300 	mov.w	r3, #0
 80029e8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 80029ec:	2300      	movs	r3, #0
 80029ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029f2:	f107 0318 	add.w	r3, r7, #24
 80029f6:	4618      	mov	r0, r3
 80029f8:	f003 fc4c 	bl	8006294 <HAL_RCCEx_PeriphCLKConfig>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d001      	beq.n	8002a06 <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8002a02:	f7ff fac1 	bl	8001f88 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a06:	4b2e      	ldr	r3, [pc, #184]	; (8002ac0 <HAL_PCD_MspInit+0x110>)
 8002a08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a0c:	4a2c      	ldr	r2, [pc, #176]	; (8002ac0 <HAL_PCD_MspInit+0x110>)
 8002a0e:	f043 0301 	orr.w	r3, r3, #1
 8002a12:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a16:	4b2a      	ldr	r3, [pc, #168]	; (8002ac0 <HAL_PCD_MspInit+0x110>)
 8002a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	617b      	str	r3, [r7, #20]
 8002a22:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_C_P_Pin|USB_C_PA11_Pin;
 8002a24:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002a28:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2c:	2302      	movs	r3, #2
 8002a2e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002a3e:	230a      	movs	r3, #10
 8002a40:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a44:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002a48:	4619      	mov	r1, r3
 8002a4a:	481e      	ldr	r0, [pc, #120]	; (8002ac4 <HAL_PCD_MspInit+0x114>)
 8002a4c:	f000 fb06 	bl	800305c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002a50:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <HAL_PCD_MspInit+0x110>)
 8002a52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a56:	4a1a      	ldr	r2, [pc, #104]	; (8002ac0 <HAL_PCD_MspInit+0x110>)
 8002a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a5c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a60:	4b17      	ldr	r3, [pc, #92]	; (8002ac0 <HAL_PCD_MspInit+0x110>)
 8002a62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a6a:	613b      	str	r3, [r7, #16]
 8002a6c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a6e:	4b14      	ldr	r3, [pc, #80]	; (8002ac0 <HAL_PCD_MspInit+0x110>)
 8002a70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d119      	bne.n	8002ab0 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a7c:	4b10      	ldr	r3, [pc, #64]	; (8002ac0 <HAL_PCD_MspInit+0x110>)
 8002a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a82:	4a0f      	ldr	r2, [pc, #60]	; (8002ac0 <HAL_PCD_MspInit+0x110>)
 8002a84:	f043 0304 	orr.w	r3, r3, #4
 8002a88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <HAL_PCD_MspInit+0x110>)
 8002a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8002a9a:	f002 f92f 	bl	8004cfc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a9e:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <HAL_PCD_MspInit+0x110>)
 8002aa0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aa4:	4a06      	ldr	r2, [pc, #24]	; (8002ac0 <HAL_PCD_MspInit+0x110>)
 8002aa6:	f023 0304 	bic.w	r3, r3, #4
 8002aaa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002aae:	e001      	b.n	8002ab4 <HAL_PCD_MspInit+0x104>
      HAL_PWREx_EnableVddUSB();
 8002ab0:	f002 f924 	bl	8004cfc <HAL_PWREx_EnableVddUSB>
}
 8002ab4:	bf00      	nop
 8002ab6:	37f8      	adds	r7, #248	; 0xf8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	42040000 	.word	0x42040000
 8002ac0:	46020c00 	.word	0x46020c00
 8002ac4:	42020000 	.word	0x42020000

08002ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002acc:	e7fe      	b.n	8002acc <NMI_Handler+0x4>

08002ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ad2:	e7fe      	b.n	8002ad2 <HardFault_Handler+0x4>

08002ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ad8:	e7fe      	b.n	8002ad8 <MemManage_Handler+0x4>

08002ada <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ada:	b480      	push	{r7}
 8002adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ade:	e7fe      	b.n	8002ade <BusFault_Handler+0x4>

08002ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ae4:	e7fe      	b.n	8002ae4 <UsageFault_Handler+0x4>

08002ae6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002aea:	bf00      	nop
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002af8:	bf00      	nop
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr

08002b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b02:	b480      	push	{r7}
 8002b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b06:	bf00      	nop
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b14:	f000 f8d2 	bl	8002cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b18:	bf00      	nop
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002b20:	4802      	ldr	r0, [pc, #8]	; (8002b2c <TIM3_IRQHandler+0x10>)
 8002b22:	f006 fb97 	bl	8009254 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002b26:	bf00      	nop
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	2000008c 	.word	0x2000008c

08002b30 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002b34:	4b18      	ldr	r3, [pc, #96]	; (8002b98 <SystemInit+0x68>)
 8002b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3a:	4a17      	ldr	r2, [pc, #92]	; (8002b98 <SystemInit+0x68>)
 8002b3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002b44:	4b15      	ldr	r3, [pc, #84]	; (8002b9c <SystemInit+0x6c>)
 8002b46:	2201      	movs	r2, #1
 8002b48:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002b4a:	4b14      	ldr	r3, [pc, #80]	; (8002b9c <SystemInit+0x6c>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002b50:	4b12      	ldr	r3, [pc, #72]	; (8002b9c <SystemInit+0x6c>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002b56:	4b11      	ldr	r3, [pc, #68]	; (8002b9c <SystemInit+0x6c>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002b5c:	4b0f      	ldr	r3, [pc, #60]	; (8002b9c <SystemInit+0x6c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a0e      	ldr	r2, [pc, #56]	; (8002b9c <SystemInit+0x6c>)
 8002b62:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002b66:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002b6a:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002b6c:	4b0b      	ldr	r3, [pc, #44]	; (8002b9c <SystemInit+0x6c>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002b72:	4b0a      	ldr	r3, [pc, #40]	; (8002b9c <SystemInit+0x6c>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a09      	ldr	r2, [pc, #36]	; (8002b9c <SystemInit+0x6c>)
 8002b78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b7c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002b7e:	4b07      	ldr	r3, [pc, #28]	; (8002b9c <SystemInit+0x6c>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b84:	4b04      	ldr	r3, [pc, #16]	; (8002b98 <SystemInit+0x68>)
 8002b86:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b8a:	609a      	str	r2, [r3, #8]
  #endif
}
 8002b8c:	bf00      	nop
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	e000ed00 	.word	0xe000ed00
 8002b9c:	46020c00 	.word	0x46020c00

08002ba0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002bd8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002ba4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002ba6:	e003      	b.n	8002bb0 <LoopCopyDataInit>

08002ba8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002ba8:	4b0c      	ldr	r3, [pc, #48]	; (8002bdc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002baa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002bac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002bae:	3104      	adds	r1, #4

08002bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002bb0:	480b      	ldr	r0, [pc, #44]	; (8002be0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002bb2:	4b0c      	ldr	r3, [pc, #48]	; (8002be4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002bb4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002bb6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002bb8:	d3f6      	bcc.n	8002ba8 <CopyDataInit>
	ldr	r2, =_sbss
 8002bba:	4a0b      	ldr	r2, [pc, #44]	; (8002be8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002bbc:	e002      	b.n	8002bc4 <LoopFillZerobss>

08002bbe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002bbe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002bc0:	f842 3b04 	str.w	r3, [r2], #4

08002bc4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002bc4:	4b09      	ldr	r3, [pc, #36]	; (8002bec <LoopForever+0x16>)
	cmp	r2, r3
 8002bc6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002bc8:	d3f9      	bcc.n	8002bbe <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002bca:	f7ff ffb1 	bl	8002b30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002bce:	f008 fd5d 	bl	800b68c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002bd2:	f7fe fc37 	bl	8001444 <main>

08002bd6 <LoopForever>:

LoopForever:
    b LoopForever
 8002bd6:	e7fe      	b.n	8002bd6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002bd8:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8002bdc:	0800ceb8 	.word	0x0800ceb8
	ldr	r0, =_sdata
 8002be0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002be4:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8002be8:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8002bec:	200009cc 	.word	0x200009cc

08002bf0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002bf0:	e7fe      	b.n	8002bf0 <ADC1_IRQHandler>
	...

08002bf4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bf8:	4b11      	ldr	r3, [pc, #68]	; (8002c40 <HAL_Init+0x4c>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a10      	ldr	r2, [pc, #64]	; (8002c40 <HAL_Init+0x4c>)
 8002bfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c04:	2003      	movs	r0, #3
 8002c06:	f000 f96d 	bl	8002ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002c0a:	f003 f95f 	bl	8005ecc <HAL_RCC_GetSysClockFreq>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <HAL_Init+0x50>)
 8002c12:	6a1b      	ldr	r3, [r3, #32]
 8002c14:	f003 030f 	and.w	r3, r3, #15
 8002c18:	490b      	ldr	r1, [pc, #44]	; (8002c48 <HAL_Init+0x54>)
 8002c1a:	5ccb      	ldrb	r3, [r1, r3]
 8002c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c20:	4a0a      	ldr	r2, [pc, #40]	; (8002c4c <HAL_Init+0x58>)
 8002c22:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c24:	200f      	movs	r0, #15
 8002c26:	f000 f813 	bl	8002c50 <HAL_InitTick>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e002      	b.n	8002c3a <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002c34:	f7ff f9ae 	bl	8001f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40022000 	.word	0x40022000
 8002c44:	46020c00 	.word	0x46020c00
 8002c48:	0800cd74 	.word	0x0800cd74
 8002c4c:	20000000 	.word	0x20000000

08002c50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b082      	sub	sp, #8
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8002c58:	4b15      	ldr	r3, [pc, #84]	; (8002cb0 <HAL_InitTick+0x60>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e021      	b.n	8002ca8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002c64:	4b13      	ldr	r3, [pc, #76]	; (8002cb4 <HAL_InitTick+0x64>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <HAL_InitTick+0x60>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c72:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 f965 	bl	8002f4a <HAL_SYSTICK_Config>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e00e      	b.n	8002ca8 <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2b0f      	cmp	r3, #15
 8002c8e:	d80a      	bhi.n	8002ca6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c90:	2200      	movs	r2, #0
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	f04f 30ff 	mov.w	r0, #4294967295
 8002c98:	f000 f92f 	bl	8002efa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c9c:	4a06      	ldr	r2, [pc, #24]	; (8002cb8 <HAL_InitTick+0x68>)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	e000      	b.n	8002ca8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3708      	adds	r7, #8
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	20000008 	.word	0x20000008
 8002cb4:	20000000 	.word	0x20000000
 8002cb8:	20000004 	.word	0x20000004

08002cbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002cc0:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <HAL_IncTick+0x20>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <HAL_IncTick+0x24>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4413      	add	r3, r2
 8002ccc:	4a04      	ldr	r2, [pc, #16]	; (8002ce0 <HAL_IncTick+0x24>)
 8002cce:	6013      	str	r3, [r2, #0]
}
 8002cd0:	bf00      	nop
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	20000008 	.word	0x20000008
 8002ce0:	200009a4 	.word	0x200009a4

08002ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ce8:	4b03      	ldr	r3, [pc, #12]	; (8002cf8 <HAL_GetTick+0x14>)
 8002cea:	681b      	ldr	r3, [r3, #0]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	200009a4 	.word	0x200009a4

08002cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d04:	f7ff ffee 	bl	8002ce4 <HAL_GetTick>
 8002d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d14:	d005      	beq.n	8002d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d16:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <HAL_Delay+0x44>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4413      	add	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d22:	bf00      	nop
 8002d24:	f7ff ffde 	bl	8002ce4 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d8f7      	bhi.n	8002d24 <HAL_Delay+0x28>
  {
  }
}
 8002d34:	bf00      	nop
 8002d36:	bf00      	nop
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000008 	.word	0x20000008

08002d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d54:	4b0c      	ldr	r3, [pc, #48]	; (8002d88 <__NVIC_SetPriorityGrouping+0x44>)
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d5a:	68ba      	ldr	r2, [r7, #8]
 8002d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d60:	4013      	ands	r3, r2
 8002d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d76:	4a04      	ldr	r2, [pc, #16]	; (8002d88 <__NVIC_SetPriorityGrouping+0x44>)
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	60d3      	str	r3, [r2, #12]
}
 8002d7c:	bf00      	nop
 8002d7e:	3714      	adds	r7, #20
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	e000ed00 	.word	0xe000ed00

08002d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d90:	4b04      	ldr	r3, [pc, #16]	; (8002da4 <__NVIC_GetPriorityGrouping+0x18>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	0a1b      	lsrs	r3, r3, #8
 8002d96:	f003 0307 	and.w	r3, r3, #7
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr
 8002da4:	e000ed00 	.word	0xe000ed00

08002da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	4603      	mov	r3, r0
 8002db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	db0b      	blt.n	8002dd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dba:	79fb      	ldrb	r3, [r7, #7]
 8002dbc:	f003 021f 	and.w	r2, r3, #31
 8002dc0:	4907      	ldr	r1, [pc, #28]	; (8002de0 <__NVIC_EnableIRQ+0x38>)
 8002dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	2001      	movs	r0, #1
 8002dca:	fa00 f202 	lsl.w	r2, r0, r2
 8002dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	e000e100 	.word	0xe000e100

08002de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	6039      	str	r1, [r7, #0]
 8002dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	db0a      	blt.n	8002e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	b2da      	uxtb	r2, r3
 8002dfc:	490c      	ldr	r1, [pc, #48]	; (8002e30 <__NVIC_SetPriority+0x4c>)
 8002dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e02:	0112      	lsls	r2, r2, #4
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	440b      	add	r3, r1
 8002e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e0c:	e00a      	b.n	8002e24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	4908      	ldr	r1, [pc, #32]	; (8002e34 <__NVIC_SetPriority+0x50>)
 8002e14:	79fb      	ldrb	r3, [r7, #7]
 8002e16:	f003 030f 	and.w	r3, r3, #15
 8002e1a:	3b04      	subs	r3, #4
 8002e1c:	0112      	lsls	r2, r2, #4
 8002e1e:	b2d2      	uxtb	r2, r2
 8002e20:	440b      	add	r3, r1
 8002e22:	761a      	strb	r2, [r3, #24]
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr
 8002e30:	e000e100 	.word	0xe000e100
 8002e34:	e000ed00 	.word	0xe000ed00

08002e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b089      	sub	sp, #36	; 0x24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f1c3 0307 	rsb	r3, r3, #7
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	bf28      	it	cs
 8002e56:	2304      	movcs	r3, #4
 8002e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	2b06      	cmp	r3, #6
 8002e60:	d902      	bls.n	8002e68 <NVIC_EncodePriority+0x30>
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	3b03      	subs	r3, #3
 8002e66:	e000      	b.n	8002e6a <NVIC_EncodePriority+0x32>
 8002e68:	2300      	movs	r3, #0
 8002e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43da      	mvns	r2, r3
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e80:	f04f 31ff 	mov.w	r1, #4294967295
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8a:	43d9      	mvns	r1, r3
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e90:	4313      	orrs	r3, r2
         );
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3724      	adds	r7, #36	; 0x24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
	...

08002ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002eb0:	d301      	bcc.n	8002eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e00f      	b.n	8002ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eb6:	4a0a      	ldr	r2, [pc, #40]	; (8002ee0 <SysTick_Config+0x40>)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ebe:	210f      	movs	r1, #15
 8002ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec4:	f7ff ff8e 	bl	8002de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ec8:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <SysTick_Config+0x40>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ece:	4b04      	ldr	r3, [pc, #16]	; (8002ee0 <SysTick_Config+0x40>)
 8002ed0:	2207      	movs	r2, #7
 8002ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	e000e010 	.word	0xe000e010

08002ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f7ff ff29 	bl	8002d44 <__NVIC_SetPriorityGrouping>
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b086      	sub	sp, #24
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	4603      	mov	r3, r0
 8002f02:	60b9      	str	r1, [r7, #8]
 8002f04:	607a      	str	r2, [r7, #4]
 8002f06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f08:	f7ff ff40 	bl	8002d8c <__NVIC_GetPriorityGrouping>
 8002f0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	68b9      	ldr	r1, [r7, #8]
 8002f12:	6978      	ldr	r0, [r7, #20]
 8002f14:	f7ff ff90 	bl	8002e38 <NVIC_EncodePriority>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f1e:	4611      	mov	r1, r2
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7ff ff5f 	bl	8002de4 <__NVIC_SetPriority>
}
 8002f26:	bf00      	nop
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f2e:	b580      	push	{r7, lr}
 8002f30:	b082      	sub	sp, #8
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	4603      	mov	r3, r0
 8002f36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f7ff ff33 	bl	8002da8 <__NVIC_EnableIRQ>
}
 8002f42:	bf00      	nop
 8002f44:	3708      	adds	r7, #8
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b082      	sub	sp, #8
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7ff ffa4 	bl	8002ea0 <SysTick_Config>
 8002f58:	4603      	mov	r3, r0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	3708      	adds	r7, #8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}

08002f62 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8002f62:	b580      	push	{r7, lr}
 8002f64:	b084      	sub	sp, #16
 8002f66:	af00      	add	r7, sp, #0
 8002f68:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8002f6a:	f7ff febb 	bl	8002ce4 <HAL_GetTick>
 8002f6e:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e06b      	b.n	8003052 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d008      	beq.n	8002f98 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2220      	movs	r2, #32
 8002f8a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e05c      	b.n	8003052 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	695a      	ldr	r2, [r3, #20]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0204 	orr.w	r2, r2, #4
 8002fa6:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2205      	movs	r2, #5
 8002fac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002fb0:	e020      	b.n	8002ff4 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002fb2:	f7ff fe97 	bl	8002ce4 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b05      	cmp	r3, #5
 8002fbe:	d919      	bls.n	8002ff4 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc4:	f043 0210 	orr.w	r2, r3, #16
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2203      	movs	r2, #3
 8002fd0:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d003      	beq.n	8002fe8 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e02e      	b.n	8003052 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	691b      	ldr	r3, [r3, #16]
 8002ffa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0d7      	beq.n	8002fb2 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695a      	ldr	r2, [r3, #20]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f042 0202 	orr.w	r2, r2, #2
 8003010:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2204      	movs	r2, #4
 8003016:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8003022:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003030:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003034:	2b00      	cmp	r3, #0
 8003036:	d007      	beq.n	8003048 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800303c:	2201      	movs	r2, #1
 800303e:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2200      	movs	r2, #0
 8003046:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
	...

0800305c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800305c:	b480      	push	{r7}
 800305e:	b089      	sub	sp, #36	; 0x24
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8003066:	2300      	movs	r3, #0
 8003068:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800306e:	e1ba      	b.n	80033e6 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	2101      	movs	r1, #1
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	fa01 f303 	lsl.w	r3, r1, r3
 800307c:	4013      	ands	r3, r2
 800307e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2b00      	cmp	r3, #0
 8003088:	f000 81aa 	beq.w	80033e0 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	4a55      	ldr	r2, [pc, #340]	; (80031e4 <HAL_GPIO_Init+0x188>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d15d      	bne.n	8003150 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800309a:	2201      	movs	r2, #1
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	fa02 f303 	lsl.w	r3, r2, r3
 80030a2:	43db      	mvns	r3, r3
 80030a4:	69fa      	ldr	r2, [r7, #28]
 80030a6:	4013      	ands	r3, r2
 80030a8:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f003 0201 	and.w	r2, r3, #1
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	69fa      	ldr	r2, [r7, #28]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69fa      	ldr	r2, [r7, #28]
 80030c2:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80030c4:	4a48      	ldr	r2, [pc, #288]	; (80031e8 <HAL_GPIO_Init+0x18c>)
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80030cc:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80030ce:	4a46      	ldr	r2, [pc, #280]	; (80031e8 <HAL_GPIO_Init+0x18c>)
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	4413      	add	r3, r2
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	08da      	lsrs	r2, r3, #3
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	3208      	adds	r2, #8
 80030e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030e6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	220f      	movs	r2, #15
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	43db      	mvns	r3, r3
 80030f8:	69fa      	ldr	r2, [r7, #28]
 80030fa:	4013      	ands	r3, r2
 80030fc:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	f003 0307 	and.w	r3, r3, #7
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	220b      	movs	r2, #11
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	69fa      	ldr	r2, [r7, #28]
 800310e:	4313      	orrs	r3, r2
 8003110:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	08da      	lsrs	r2, r3, #3
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	3208      	adds	r2, #8
 800311a:	69f9      	ldr	r1, [r7, #28]
 800311c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	2203      	movs	r2, #3
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	43db      	mvns	r3, r3
 8003132:	69fa      	ldr	r2, [r7, #28]
 8003134:	4013      	ands	r3, r2
 8003136:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	2202      	movs	r2, #2
 800313e:	fa02 f303 	lsl.w	r3, r2, r3
 8003142:	69fa      	ldr	r2, [r7, #28]
 8003144:	4313      	orrs	r3, r2
 8003146:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	69fa      	ldr	r2, [r7, #28]
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	e067      	b.n	8003220 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	2b02      	cmp	r3, #2
 8003156:	d003      	beq.n	8003160 <HAL_GPIO_Init+0x104>
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	2b12      	cmp	r3, #18
 800315e:	d145      	bne.n	80031ec <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	08da      	lsrs	r2, r3, #3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	3208      	adds	r2, #8
 8003168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800316c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	220f      	movs	r2, #15
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	43db      	mvns	r3, r3
 800317e:	69fa      	ldr	r2, [r7, #28]
 8003180:	4013      	ands	r3, r2
 8003182:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	f003 020f 	and.w	r2, r3, #15
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	f003 0307 	and.w	r3, r3, #7
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	69fa      	ldr	r2, [r7, #28]
 800319a:	4313      	orrs	r3, r2
 800319c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	08da      	lsrs	r2, r3, #3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3208      	adds	r2, #8
 80031a6:	69f9      	ldr	r1, [r7, #28]
 80031a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	005b      	lsls	r3, r3, #1
 80031b6:	2203      	movs	r2, #3
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	43db      	mvns	r3, r3
 80031be:	69fa      	ldr	r2, [r7, #28]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f003 0203 	and.w	r2, r3, #3
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	69fa      	ldr	r2, [r7, #28]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	69fa      	ldr	r2, [r7, #28]
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	e01e      	b.n	8003220 <HAL_GPIO_Init+0x1c4>
 80031e2:	bf00      	nop
 80031e4:	46020000 	.word	0x46020000
 80031e8:	0800cdcc 	.word	0x0800cdcc
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	2203      	movs	r2, #3
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	69fa      	ldr	r2, [r7, #28]
 8003200:	4013      	ands	r3, r2
 8003202:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f003 0203 	and.w	r2, r3, #3
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	69fa      	ldr	r2, [r7, #28]
 8003216:	4313      	orrs	r3, r2
 8003218:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	69fa      	ldr	r2, [r7, #28]
 800321e:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d00b      	beq.n	8003240 <HAL_GPIO_Init+0x1e4>
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	2b02      	cmp	r3, #2
 800322e:	d007      	beq.n	8003240 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003234:	2b11      	cmp	r3, #17
 8003236:	d003      	beq.n	8003240 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	2b12      	cmp	r3, #18
 800323e:	d130      	bne.n	80032a2 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	2203      	movs	r2, #3
 800324c:	fa02 f303 	lsl.w	r3, r2, r3
 8003250:	43db      	mvns	r3, r3
 8003252:	69fa      	ldr	r2, [r7, #28]
 8003254:	4013      	ands	r3, r2
 8003256:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	69fa      	ldr	r2, [r7, #28]
 8003266:	4313      	orrs	r3, r2
 8003268:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	69fa      	ldr	r2, [r7, #28]
 800326e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8003276:	2201      	movs	r2, #1
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	43db      	mvns	r3, r3
 8003280:	69fa      	ldr	r2, [r7, #28]
 8003282:	4013      	ands	r3, r2
 8003284:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	091b      	lsrs	r3, r3, #4
 800328c:	f003 0201 	and.w	r2, r3, #1
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	fa02 f303 	lsl.w	r3, r2, r3
 8003296:	69fa      	ldr	r2, [r7, #28]
 8003298:	4313      	orrs	r3, r2
 800329a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	69fa      	ldr	r2, [r7, #28]
 80032a0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	d017      	beq.n	80032da <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 80032b0:	69bb      	ldr	r3, [r7, #24]
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	2203      	movs	r2, #3
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	43db      	mvns	r3, r3
 80032bc:	69fa      	ldr	r2, [r7, #28]
 80032be:	4013      	ands	r3, r2
 80032c0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	fa02 f303 	lsl.w	r3, r2, r3
 80032ce:	69fa      	ldr	r2, [r7, #28]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	69fa      	ldr	r2, [r7, #28]
 80032d8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d07c      	beq.n	80033e0 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80032e6:	4a47      	ldr	r2, [pc, #284]	; (8003404 <HAL_GPIO_Init+0x3a8>)
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	089b      	lsrs	r3, r3, #2
 80032ec:	3318      	adds	r3, #24
 80032ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032f2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	f003 0303 	and.w	r3, r3, #3
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	220f      	movs	r2, #15
 80032fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003302:	43db      	mvns	r3, r3
 8003304:	69fa      	ldr	r2, [r7, #28]
 8003306:	4013      	ands	r3, r2
 8003308:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	0a9a      	lsrs	r2, r3, #10
 800330e:	4b3e      	ldr	r3, [pc, #248]	; (8003408 <HAL_GPIO_Init+0x3ac>)
 8003310:	4013      	ands	r3, r2
 8003312:	697a      	ldr	r2, [r7, #20]
 8003314:	f002 0203 	and.w	r2, r2, #3
 8003318:	00d2      	lsls	r2, r2, #3
 800331a:	4093      	lsls	r3, r2
 800331c:	69fa      	ldr	r2, [r7, #28]
 800331e:	4313      	orrs	r3, r2
 8003320:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003322:	4938      	ldr	r1, [pc, #224]	; (8003404 <HAL_GPIO_Init+0x3a8>)
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	089b      	lsrs	r3, r3, #2
 8003328:	3318      	adds	r3, #24
 800332a:	69fa      	ldr	r2, [r7, #28]
 800332c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003330:	4b34      	ldr	r3, [pc, #208]	; (8003404 <HAL_GPIO_Init+0x3a8>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	43db      	mvns	r3, r3
 800333a:	69fa      	ldr	r2, [r7, #28]
 800333c:	4013      	ands	r3, r2
 800333e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800334c:	69fa      	ldr	r2, [r7, #28]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4313      	orrs	r3, r2
 8003352:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8003354:	4a2b      	ldr	r2, [pc, #172]	; (8003404 <HAL_GPIO_Init+0x3a8>)
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800335a:	4b2a      	ldr	r3, [pc, #168]	; (8003404 <HAL_GPIO_Init+0x3a8>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	43db      	mvns	r3, r3
 8003364:	69fa      	ldr	r2, [r7, #28]
 8003366:	4013      	ands	r3, r2
 8003368:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8003376:	69fa      	ldr	r2, [r7, #28]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4313      	orrs	r3, r2
 800337c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800337e:	4a21      	ldr	r2, [pc, #132]	; (8003404 <HAL_GPIO_Init+0x3a8>)
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003384:	4b1f      	ldr	r3, [pc, #124]	; (8003404 <HAL_GPIO_Init+0x3a8>)
 8003386:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800338a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	43db      	mvns	r3, r3
 8003390:	69fa      	ldr	r2, [r7, #28]
 8003392:	4013      	ands	r3, r2
 8003394:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 80033a2:	69fa      	ldr	r2, [r7, #28]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 80033aa:	4a16      	ldr	r2, [pc, #88]	; (8003404 <HAL_GPIO_Init+0x3a8>)
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 80033b2:	4b14      	ldr	r3, [pc, #80]	; (8003404 <HAL_GPIO_Init+0x3a8>)
 80033b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033b8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	43db      	mvns	r3, r3
 80033be:	69fa      	ldr	r2, [r7, #28]
 80033c0:	4013      	ands	r3, r2
 80033c2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80033d0:	69fa      	ldr	r2, [r7, #28]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80033d8:	4a0a      	ldr	r2, [pc, #40]	; (8003404 <HAL_GPIO_Init+0x3a8>)
 80033da:	69fb      	ldr	r3, [r7, #28]
 80033dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 80033e0:	697b      	ldr	r3, [r7, #20]
 80033e2:	3301      	adds	r3, #1
 80033e4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	f47f ae3d 	bne.w	8003070 <HAL_GPIO_Init+0x14>
  }
}
 80033f6:	bf00      	nop
 80033f8:	bf00      	nop
 80033fa:	3724      	adds	r7, #36	; 0x24
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	46022000 	.word	0x46022000
 8003408:	002f7f7f 	.word	0x002f7f7f

0800340c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	460b      	mov	r3, r1
 8003416:	807b      	strh	r3, [r7, #2]
 8003418:	4613      	mov	r3, r2
 800341a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800341c:	787b      	ldrb	r3, [r7, #1]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003422:	887a      	ldrh	r2, [r7, #2]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8003428:	e002      	b.n	8003430 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800342a:	887a      	ldrh	r2, [r7, #2]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e081      	b.n	8003552 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d106      	bne.n	8003468 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7fe fe1a 	bl	800209c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2224      	movs	r2, #36	; 0x24
 800346c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f022 0201 	bic.w	r2, r2, #1
 800347e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800348c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800349c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d107      	bne.n	80034b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034b2:	609a      	str	r2, [r3, #8]
 80034b4:	e006      	b.n	80034c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80034c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	68db      	ldr	r3, [r3, #12]
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d104      	bne.n	80034d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	6812      	ldr	r2, [r2, #0]
 80034e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68da      	ldr	r2, [r3, #12]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	691a      	ldr	r2, [r3, #16]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	695b      	ldr	r3, [r3, #20]
 8003502:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	430a      	orrs	r2, r1
 8003512:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	69d9      	ldr	r1, [r3, #28]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a1a      	ldr	r2, [r3, #32]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f042 0201 	orr.w	r2, r2, #1
 8003532:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2220      	movs	r2, #32
 800353e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2200      	movs	r2, #0
 800354c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800356a:	b2db      	uxtb	r3, r3
 800356c:	2b20      	cmp	r3, #32
 800356e:	d138      	bne.n	80035e2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003576:	2b01      	cmp	r3, #1
 8003578:	d101      	bne.n	800357e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800357a:	2302      	movs	r3, #2
 800357c:	e032      	b.n	80035e4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2224      	movs	r2, #36	; 0x24
 800358a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0201 	bic.w	r2, r2, #1
 800359c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035ac:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6819      	ldr	r1, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f042 0201 	orr.w	r2, r2, #1
 80035cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035de:	2300      	movs	r3, #0
 80035e0:	e000      	b.n	80035e4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035e2:	2302      	movs	r3, #2
  }
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b20      	cmp	r3, #32
 8003604:	d139      	bne.n	800367a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800360c:	2b01      	cmp	r3, #1
 800360e:	d101      	bne.n	8003614 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003610:	2302      	movs	r3, #2
 8003612:	e033      	b.n	800367c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2224      	movs	r2, #36	; 0x24
 8003620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0201 	bic.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003642:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	021b      	lsls	r3, r3, #8
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	4313      	orrs	r3, r2
 800364c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f042 0201 	orr.w	r2, r2, #1
 8003664:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2220      	movs	r2, #32
 800366a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003676:	2300      	movs	r3, #0
 8003678:	e000      	b.n	800367c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800367a:	2302      	movs	r3, #2
  }
}
 800367c:	4618      	mov	r0, r3
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d102      	bne.n	80036a0 <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	73fb      	strb	r3, [r7, #15]
 800369e:	e141      	b.n	8003924 <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 f947 	bl	8003938 <MDF_GetHandleNumberFromInstance>
 80036aa:	4603      	mov	r3, r0
 80036ac:	4a86      	ldr	r2, [pc, #536]	; (80038c8 <HAL_MDF_Init+0x240>)
 80036ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d002      	beq.n	80036bc <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	73fb      	strb	r3, [r7, #15]
 80036ba:	e133      	b.n	8003924 <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7fe fc83 	bl	8001fc8 <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 80036c2:	4b82      	ldr	r3, [pc, #520]	; (80038cc <HAL_MDF_Init+0x244>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d11d      	bne.n	8003706 <HAL_MDF_Init+0x7e>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a80      	ldr	r2, [pc, #512]	; (80038d0 <HAL_MDF_Init+0x248>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d023      	beq.n	800371c <HAL_MDF_Init+0x94>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a7e      	ldr	r2, [pc, #504]	; (80038d4 <HAL_MDF_Init+0x24c>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d01e      	beq.n	800371c <HAL_MDF_Init+0x94>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a7d      	ldr	r2, [pc, #500]	; (80038d8 <HAL_MDF_Init+0x250>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d019      	beq.n	800371c <HAL_MDF_Init+0x94>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a7b      	ldr	r2, [pc, #492]	; (80038dc <HAL_MDF_Init+0x254>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d014      	beq.n	800371c <HAL_MDF_Init+0x94>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a7a      	ldr	r2, [pc, #488]	; (80038e0 <HAL_MDF_Init+0x258>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d00f      	beq.n	800371c <HAL_MDF_Init+0x94>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a78      	ldr	r2, [pc, #480]	; (80038e4 <HAL_MDF_Init+0x25c>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d00a      	beq.n	800371c <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8003706:	4b78      	ldr	r3, [pc, #480]	; (80038e8 <HAL_MDF_Init+0x260>)
 8003708:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 800370a:	2b00      	cmp	r3, #0
 800370c:	f040 8090 	bne.w	8003830 <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a75      	ldr	r2, [pc, #468]	; (80038ec <HAL_MDF_Init+0x264>)
 8003716:	4293      	cmp	r3, r2
 8003718:	f040 808a 	bne.w	8003830 <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a72      	ldr	r2, [pc, #456]	; (80038ec <HAL_MDF_Init+0x264>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d101      	bne.n	800372a <HAL_MDF_Init+0xa2>
 8003726:	4b72      	ldr	r3, [pc, #456]	; (80038f0 <HAL_MDF_Init+0x268>)
 8003728:	e000      	b.n	800372c <HAL_MDF_Init+0xa4>
 800372a:	4b72      	ldr	r3, [pc, #456]	; (80038f4 <HAL_MDF_Init+0x26c>)
 800372c:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	da02      	bge.n	800373c <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	73fb      	strb	r3, [r7, #15]
 800373a:	e079      	b.n	8003830 <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a63      	ldr	r2, [pc, #396]	; (80038d0 <HAL_MDF_Init+0x248>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d018      	beq.n	8003778 <HAL_MDF_Init+0xf0>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a62      	ldr	r2, [pc, #392]	; (80038d4 <HAL_MDF_Init+0x24c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d013      	beq.n	8003778 <HAL_MDF_Init+0xf0>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a60      	ldr	r2, [pc, #384]	; (80038d8 <HAL_MDF_Init+0x250>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d00e      	beq.n	8003778 <HAL_MDF_Init+0xf0>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a5f      	ldr	r2, [pc, #380]	; (80038dc <HAL_MDF_Init+0x254>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d009      	beq.n	8003778 <HAL_MDF_Init+0xf0>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a5d      	ldr	r2, [pc, #372]	; (80038e0 <HAL_MDF_Init+0x258>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d004      	beq.n	8003778 <HAL_MDF_Init+0xf0>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a5c      	ldr	r2, [pc, #368]	; (80038e4 <HAL_MDF_Init+0x25c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d10d      	bne.n	8003794 <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	011b      	lsls	r3, r3, #4
 800378e:	431a      	orrs	r2, r3
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	2200      	movs	r2, #0
 8003798:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	3b01      	subs	r3, #1
 80037a4:	061b      	lsls	r3, r3, #24
 80037a6:	431a      	orrs	r2, r3
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	7b1b      	ldrb	r3, [r3, #12]
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d137      	bne.n	8003824 <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	685a      	ldr	r2, [r3, #4]
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	3b01      	subs	r3, #1
 80037be:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 80037c4:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
 80037cc:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 80037ce:	431a      	orrs	r2, r3
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	7e1b      	ldrb	r3, [r3, #24]
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d123      	bne.n	8003824 <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a3b      	ldr	r2, [pc, #236]	; (80038d0 <HAL_MDF_Init+0x248>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d012      	beq.n	800380c <HAL_MDF_Init+0x184>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a3a      	ldr	r2, [pc, #232]	; (80038d4 <HAL_MDF_Init+0x24c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d00d      	beq.n	800380c <HAL_MDF_Init+0x184>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a38      	ldr	r2, [pc, #224]	; (80038d8 <HAL_MDF_Init+0x250>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d008      	beq.n	800380c <HAL_MDF_Init+0x184>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a37      	ldr	r2, [pc, #220]	; (80038dc <HAL_MDF_Init+0x254>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d003      	beq.n	800380c <HAL_MDF_Init+0x184>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a35      	ldr	r2, [pc, #212]	; (80038e0 <HAL_MDF_Init+0x258>)
 800380a:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8003818:	430b      	orrs	r3, r1
 800381a:	4313      	orrs	r3, r2
 800381c:	f043 0210 	orr.w	r2, r3, #16
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f043 0201 	orr.w	r2, r3, #1
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
 8003830:	7bfb      	ldrb	r3, [r7, #15]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d128      	bne.n	8003888 <HAL_MDF_Init+0x200>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800383c:	2b01      	cmp	r3, #1
 800383e:	d123      	bne.n	8003888 <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	2b00      	cmp	r3, #0
 8003848:	da02      	bge.n	8003850 <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	73fb      	strb	r3, [r7, #15]
 800384e:	e01b      	b.n	8003888 <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2200      	movs	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6819      	ldr	r1, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8003868:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800386e:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	430a      	orrs	r2, r1
 8003876:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f042 0201 	orr.w	r2, r2, #1
 8003886:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 8003888:	7bfb      	ldrb	r3, [r7, #15]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d14a      	bne.n	8003924 <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 021f 	bic.w	r2, r2, #31
 800389c:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	6859      	ldr	r1, [r3, #4]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a0d      	ldr	r2, [pc, #52]	; (80038ec <HAL_MDF_Init+0x264>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d11e      	bne.n	80038f8 <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
 80038ba:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <HAL_MDF_Init+0x260>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	3301      	adds	r3, #1
 80038c0:	4a09      	ldr	r2, [pc, #36]	; (80038e8 <HAL_MDF_Init+0x260>)
 80038c2:	6013      	str	r3, [r2, #0]
 80038c4:	e01d      	b.n	8003902 <HAL_MDF_Init+0x27a>
 80038c6:	bf00      	nop
 80038c8:	200009b0 	.word	0x200009b0
 80038cc:	200009a8 	.word	0x200009a8
 80038d0:	40025080 	.word	0x40025080
 80038d4:	40025100 	.word	0x40025100
 80038d8:	40025180 	.word	0x40025180
 80038dc:	40025200 	.word	0x40025200
 80038e0:	40025280 	.word	0x40025280
 80038e4:	40025300 	.word	0x40025300
 80038e8:	200009ac 	.word	0x200009ac
 80038ec:	46024080 	.word	0x46024080
 80038f0:	46024000 	.word	0x46024000
 80038f4:	40025000 	.word	0x40025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
 80038f8:	4b0d      	ldr	r3, [pc, #52]	; (8003930 <HAL_MDF_Init+0x2a8>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3301      	adds	r3, #1
 80038fe:	4a0c      	ldr	r2, [pc, #48]	; (8003930 <HAL_MDF_Init+0x2a8>)
 8003900:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f000 f816 	bl	8003938 <MDF_GetHandleNumberFromInstance>
 800390c:	4602      	mov	r2, r0
 800390e:	4909      	ldr	r1, [pc, #36]	; (8003934 <HAL_MDF_Init+0x2ac>)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	641a      	str	r2, [r3, #64]	; 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      }
    }
  }

  /* Return function status */
  return status;
 8003924:	7bfb      	ldrb	r3, [r7, #15]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	200009a8 	.word	0x200009a8
 8003934:	200009b0 	.word	0x200009b0

08003938 <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a19      	ldr	r2, [pc, #100]	; (80039a8 <MDF_GetHandleNumberFromInstance+0x70>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d102      	bne.n	800394e <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
 8003948:	2300      	movs	r3, #0
 800394a:	60fb      	str	r3, [r7, #12]
 800394c:	e024      	b.n	8003998 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a16      	ldr	r2, [pc, #88]	; (80039ac <MDF_GetHandleNumberFromInstance+0x74>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d102      	bne.n	800395c <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
 8003956:	2301      	movs	r3, #1
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	e01d      	b.n	8003998 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter2)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a14      	ldr	r2, [pc, #80]	; (80039b0 <MDF_GetHandleNumberFromInstance+0x78>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d102      	bne.n	800396a <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
 8003964:	2302      	movs	r3, #2
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	e016      	b.n	8003998 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a11      	ldr	r2, [pc, #68]	; (80039b4 <MDF_GetHandleNumberFromInstance+0x7c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d102      	bne.n	8003978 <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
 8003972:	2303      	movs	r3, #3
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	e00f      	b.n	8003998 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a0f      	ldr	r2, [pc, #60]	; (80039b8 <MDF_GetHandleNumberFromInstance+0x80>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d102      	bne.n	8003986 <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
 8003980:	2304      	movs	r3, #4
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	e008      	b.n	8003998 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	4a0c      	ldr	r2, [pc, #48]	; (80039bc <MDF_GetHandleNumberFromInstance+0x84>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d102      	bne.n	8003994 <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
 800398e:	2305      	movs	r3, #5
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	e001      	b.n	8003998 <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
 8003994:	2306      	movs	r3, #6
 8003996:	60fb      	str	r3, [r7, #12]
  }

  return handle_number;
 8003998:	68fb      	ldr	r3, [r7, #12]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr
 80039a6:	bf00      	nop
 80039a8:	40025080 	.word	0x40025080
 80039ac:	40025100 	.word	0x40025100
 80039b0:	40025180 	.word	0x40025180
 80039b4:	40025200 	.word	0x40025200
 80039b8:	40025280 	.word	0x40025280
 80039bc:	40025300 	.word	0x40025300

080039c0 <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f043 0201 	orr.w	r2, r3, #1
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	601a      	str	r2, [r3, #0]
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af02      	add	r7, sp, #8
 80039e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039e8:	2300      	movs	r3, #0
 80039ea:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80039ec:	f7ff f97a 	bl	8002ce4 <HAL_GetTick>
 80039f0:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d102      	bne.n	80039fe <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	73fb      	strb	r3, [r7, #15]
 80039fc:	e0a5      	b.n	8003b4a <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	f040 809e 	bne.w	8003b4a <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7fe fbfe 	bl	8002210 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003a14:	f241 3188 	movw	r1, #5000	; 0x1388
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 f912 	bl	8003c42 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689a      	ldr	r2, [r3, #8]
 8003a24:	4b4b      	ldr	r3, [pc, #300]	; (8003b54 <HAL_OSPI_Init+0x174>)
 8003a26:	4013      	ands	r3, r2
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	68d1      	ldr	r1, [r2, #12]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	6912      	ldr	r2, [r2, #16]
 8003a30:	3a01      	subs	r2, #1
 8003a32:	0412      	lsls	r2, r2, #16
 8003a34:	4311      	orrs	r1, r2
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6952      	ldr	r2, [r2, #20]
 8003a3a:	3a01      	subs	r2, #1
 8003a3c:	0212      	lsls	r2, r2, #8
 8003a3e:	4311      	orrs	r1, r2
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a44:	4311      	orrs	r1, r2
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	69d2      	ldr	r2, [r2, #28]
 8003a4a:	4311      	orrs	r1, r2
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6812      	ldr	r2, [r2, #0]
 8003a50:	430b      	orrs	r3, r1
 8003a52:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1a      	ldr	r2, [r3, #32]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003a84:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	3b01      	subs	r3, #1
 8003a96:	021a      	lsls	r2, r3, #8
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	2120      	movs	r1, #32
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fdc9 	bl	8004644 <OSPI_WaitFlagStateUntilTimeout>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d146      	bne.n	8003b4a <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	1e5a      	subs	r2, r3, #1
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	430a      	orrs	r2, r1
 8003ad2:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8003af2:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	430a      	orrs	r2, r1
 8003b06:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0201 	orr.w	r2, r2, #1
 8003b18:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d107      	bne.n	8003b32 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0202 	orr.w	r2, r2, #2
 8003b30:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	68db      	ldr	r3, [r3, #12]
 8003b36:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b3a:	d103      	bne.n	8003b44 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	651a      	str	r2, [r3, #80]	; 0x50
 8003b42:	e002      	b.n	8003b4a <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2202      	movs	r2, #2
 8003b48:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8003b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	f8e0c0f4 	.word	0xf8e0c0f4

08003b58 <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b088      	sub	sp, #32
 8003b5c:	af02      	add	r7, sp, #8
 8003b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b60:	2300      	movs	r3, #0
 8003b62:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8003b64:	f7ff f8be 	bl	8002ce4 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b6e:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f003 0308 	and.w	r3, r3, #8
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d104      	bne.n	8003b84 <HAL_OSPI_Abort+0x2c>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d052      	beq.n	8003c2a <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0304 	and.w	r3, r3, #4
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d014      	beq.n	8003bbc <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0204 	bic.w	r2, r2, #4
 8003ba0:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7ff f9db 	bl	8002f62 <HAL_DMA_Abort>
 8003bac:	4603      	mov	r3, r0
 8003bae:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8003bb0:	7dfb      	ldrb	r3, [r7, #23]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2204      	movs	r2, #4
 8003bba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	f003 0320 	and.w	r3, r3, #32
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d02b      	beq.n	8003c22 <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f042 0202 	orr.w	r2, r2, #2
 8003bd8:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	2201      	movs	r2, #1
 8003be4:	2102      	movs	r1, #2
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 fd2c 	bl	8004644 <OSPI_WaitFlagStateUntilTimeout>
 8003bec:	4603      	mov	r3, r0
 8003bee:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8003bf0:	7dfb      	ldrb	r3, [r7, #23]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d11f      	bne.n	8003c36 <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c02:	9300      	str	r3, [sp, #0]
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	2200      	movs	r2, #0
 8003c08:	2120      	movs	r1, #32
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f000 fd1a 	bl	8004644 <OSPI_WaitFlagStateUntilTimeout>
 8003c10:	4603      	mov	r3, r0
 8003c12:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8003c14:	7dfb      	ldrb	r3, [r7, #23]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10d      	bne.n	8003c36 <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2202      	movs	r2, #2
 8003c1e:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8003c20:	e009      	b.n	8003c36 <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2202      	movs	r2, #2
 8003c26:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8003c28:	e005      	b.n	8003c36 <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2210      	movs	r2, #16
 8003c32:	655a      	str	r2, [r3, #84]	; 0x54
 8003c34:	e000      	b.n	8003c38 <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8003c36:	bf00      	nop
  }

  /* Return function status */
  return status;
 8003c38:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3718      	adds	r7, #24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
 8003c4a:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b094      	sub	sp, #80	; 0x50
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a9d      	ldr	r2, [pc, #628]	; (8003ef4 <HAL_OSPIM_Config+0x294>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d105      	bne.n	8003c8e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 8003c86:	2301      	movs	r3, #1
 8003c88:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8003c8c:	e004      	b.n	8003c98 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003c98:	2300      	movs	r3, #0
 8003c9a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003c9e:	e01d      	b.n	8003cdc <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8003ca0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	b2d8      	uxtb	r0, r3
 8003ca8:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8003cac:	f107 0114 	add.w	r1, r7, #20
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	005b      	lsls	r3, r3, #1
 8003cb4:	4413      	add	r3, r2
 8003cb6:	00db      	lsls	r3, r3, #3
 8003cb8:	440b      	add	r3, r1
 8003cba:	4619      	mov	r1, r3
 8003cbc:	f000 fd02 	bl	80046c4 <OSPIM_GetConfig>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d005      	beq.n	8003cd2 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2208      	movs	r2, #8
 8003cd0:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003cd2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003cdc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d9dd      	bls.n	8003ca0 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8003ce4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	f040 849e 	bne.w	800462a <HAL_OSPIM_Config+0x9ca>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003cee:	4b81      	ldr	r3, [pc, #516]	; (8003ef4 <HAL_OSPIM_Config+0x294>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00b      	beq.n	8003d12 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003cfa:	4b7e      	ldr	r3, [pc, #504]	; (8003ef4 <HAL_OSPIM_Config+0x294>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a7d      	ldr	r2, [pc, #500]	; (8003ef4 <HAL_OSPIM_Config+0x294>)
 8003d00:	f023 0301 	bic.w	r3, r3, #1
 8003d04:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8003d06:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003d0a:	f043 0301 	orr.w	r3, r3, #1
 8003d0e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8003d12:	4b79      	ldr	r3, [pc, #484]	; (8003ef8 <HAL_OSPIM_Config+0x298>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d00b      	beq.n	8003d36 <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003d1e:	4b76      	ldr	r3, [pc, #472]	; (8003ef8 <HAL_OSPIM_Config+0x298>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a75      	ldr	r2, [pc, #468]	; (8003ef8 <HAL_OSPIM_Config+0x298>)
 8003d24:	f023 0301 	bic.w	r3, r3, #1
 8003d28:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8003d2a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003d2e:	f043 0302 	orr.w	r3, r3, #2
 8003d32:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8003d36:	4971      	ldr	r1, [pc, #452]	; (8003efc <HAL_OSPIM_Config+0x29c>)
 8003d38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	4413      	add	r3, r2
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	3350      	adds	r3, #80	; 0x50
 8003d44:	443b      	add	r3, r7
 8003d46:	3b34      	subs	r3, #52	; 0x34
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	440b      	add	r3, r1
 8003d50:	6859      	ldr	r1, [r3, #4]
 8003d52:	486a      	ldr	r0, [pc, #424]	; (8003efc <HAL_OSPIM_Config+0x29c>)
 8003d54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d56:	4613      	mov	r3, r2
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	4413      	add	r3, r2
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	3350      	adds	r3, #80	; 0x50
 8003d60:	443b      	add	r3, r7
 8003d62:	3b34      	subs	r3, #52	; 0x34
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	3b01      	subs	r3, #1
 8003d68:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4403      	add	r3, r0
 8003d70:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8003d72:	4b62      	ldr	r3, [pc, #392]	; (8003efc <HAL_OSPIM_Config+0x29c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f000 80c0 	beq.w	8003f00 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8003d80:	4b5e      	ldr	r3, [pc, #376]	; (8003efc <HAL_OSPIM_Config+0x29c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a5d      	ldr	r2, [pc, #372]	; (8003efc <HAL_OSPIM_Config+0x29c>)
 8003d86:	f023 0301 	bic.w	r3, r3, #1
 8003d8a:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8003d8c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	f040 8162 	bne.w	800405a <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 8003d96:	4959      	ldr	r1, [pc, #356]	; (8003efc <HAL_OSPIM_Config+0x29c>)
 8003d98:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	4413      	add	r3, r2
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	3350      	adds	r3, #80	; 0x50
 8003da6:	443b      	add	r3, r7
 8003da8:	3b3c      	subs	r3, #60	; 0x3c
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3b01      	subs	r3, #1
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	6859      	ldr	r1, [r3, #4]
 8003db4:	4851      	ldr	r0, [pc, #324]	; (8003efc <HAL_OSPIM_Config+0x29c>)
 8003db6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003dba:	4613      	mov	r3, r2
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	4413      	add	r3, r2
 8003dc0:	00db      	lsls	r3, r3, #3
 8003dc2:	3350      	adds	r3, #80	; 0x50
 8003dc4:	443b      	add	r3, r7
 8003dc6:	3b3c      	subs	r3, #60	; 0x3c
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	f041 0202 	orr.w	r2, r1, #2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	4403      	add	r3, r0
 8003dd4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8003dd6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003dda:	4613      	mov	r3, r2
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	4413      	add	r3, r2
 8003de0:	00db      	lsls	r3, r3, #3
 8003de2:	3350      	adds	r3, #80	; 0x50
 8003de4:	443b      	add	r3, r7
 8003de6:	3b38      	subs	r3, #56	; 0x38
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d01f      	beq.n	8003e2e <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8003dee:	4943      	ldr	r1, [pc, #268]	; (8003efc <HAL_OSPIM_Config+0x29c>)
 8003df0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003df4:	4613      	mov	r3, r2
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	4413      	add	r3, r2
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	3350      	adds	r3, #80	; 0x50
 8003dfe:	443b      	add	r3, r7
 8003e00:	3b38      	subs	r3, #56	; 0x38
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	3b01      	subs	r3, #1
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	440b      	add	r3, r1
 8003e0a:	6859      	ldr	r1, [r3, #4]
 8003e0c:	483b      	ldr	r0, [pc, #236]	; (8003efc <HAL_OSPIM_Config+0x29c>)
 8003e0e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003e12:	4613      	mov	r3, r2
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	4413      	add	r3, r2
 8003e18:	00db      	lsls	r3, r3, #3
 8003e1a:	3350      	adds	r3, #80	; 0x50
 8003e1c:	443b      	add	r3, r7
 8003e1e:	3b38      	subs	r3, #56	; 0x38
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	f041 0220 	orr.w	r2, r1, #32
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4403      	add	r3, r0
 8003e2c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003e2e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003e32:	4613      	mov	r3, r2
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	4413      	add	r3, r2
 8003e38:	00db      	lsls	r3, r3, #3
 8003e3a:	3350      	adds	r3, #80	; 0x50
 8003e3c:	443b      	add	r3, r7
 8003e3e:	3b30      	subs	r3, #48	; 0x30
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d023      	beq.n	8003e8e <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003e46:	492d      	ldr	r1, [pc, #180]	; (8003efc <HAL_OSPIM_Config+0x29c>)
 8003e48:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	4413      	add	r3, r2
 8003e52:	00db      	lsls	r3, r3, #3
 8003e54:	3350      	adds	r3, #80	; 0x50
 8003e56:	443b      	add	r3, r7
 8003e58:	3b30      	subs	r3, #48	; 0x30
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	6859      	ldr	r1, [r3, #4]
 8003e68:	4824      	ldr	r0, [pc, #144]	; (8003efc <HAL_OSPIM_Config+0x29c>)
 8003e6a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003e6e:	4613      	mov	r3, r2
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	4413      	add	r3, r2
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	3350      	adds	r3, #80	; 0x50
 8003e78:	443b      	add	r3, r7
 8003e7a:	3b30      	subs	r3, #48	; 0x30
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4403      	add	r3, r0
 8003e8c:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003e8e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003e92:	4613      	mov	r3, r2
 8003e94:	005b      	lsls	r3, r3, #1
 8003e96:	4413      	add	r3, r2
 8003e98:	00db      	lsls	r3, r3, #3
 8003e9a:	3350      	adds	r3, #80	; 0x50
 8003e9c:	443b      	add	r3, r7
 8003e9e:	3b2c      	subs	r3, #44	; 0x2c
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 80d9 	beq.w	800405a <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003ea8:	4914      	ldr	r1, [pc, #80]	; (8003efc <HAL_OSPIM_Config+0x29c>)
 8003eaa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003eae:	4613      	mov	r3, r2
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	4413      	add	r3, r2
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	3350      	adds	r3, #80	; 0x50
 8003eb8:	443b      	add	r3, r7
 8003eba:	3b2c      	subs	r3, #44	; 0x2c
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	6859      	ldr	r1, [r3, #4]
 8003eca:	480c      	ldr	r0, [pc, #48]	; (8003efc <HAL_OSPIM_Config+0x29c>)
 8003ecc:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	005b      	lsls	r3, r3, #1
 8003ed4:	4413      	add	r3, r2
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	3350      	adds	r3, #80	; 0x50
 8003eda:	443b      	add	r3, r7
 8003edc:	3b2c      	subs	r3, #44	; 0x2c
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4403      	add	r3, r0
 8003eee:	605a      	str	r2, [r3, #4]
 8003ef0:	e0b3      	b.n	800405a <HAL_OSPIM_Config+0x3fa>
 8003ef2:	bf00      	nop
 8003ef4:	420d1400 	.word	0x420d1400
 8003ef8:	420d2400 	.word	0x420d2400
 8003efc:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 8003f00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f02:	4613      	mov	r3, r2
 8003f04:	005b      	lsls	r3, r3, #1
 8003f06:	4413      	add	r3, r2
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	3350      	adds	r3, #80	; 0x50
 8003f0c:	443b      	add	r3, r7
 8003f0e:	3b3c      	subs	r3, #60	; 0x3c
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 80a1 	beq.w	800405a <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8003f18:	4993      	ldr	r1, [pc, #588]	; (8004168 <HAL_OSPIM_Config+0x508>)
 8003f1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	4413      	add	r3, r2
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	3350      	adds	r3, #80	; 0x50
 8003f26:	443b      	add	r3, r7
 8003f28:	3b3c      	subs	r3, #60	; 0x3c
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	6859      	ldr	r1, [r3, #4]
 8003f34:	488c      	ldr	r0, [pc, #560]	; (8004168 <HAL_OSPIM_Config+0x508>)
 8003f36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f38:	4613      	mov	r3, r2
 8003f3a:	005b      	lsls	r3, r3, #1
 8003f3c:	4413      	add	r3, r2
 8003f3e:	00db      	lsls	r3, r3, #3
 8003f40:	3350      	adds	r3, #80	; 0x50
 8003f42:	443b      	add	r3, r7
 8003f44:	3b3c      	subs	r3, #60	; 0x3c
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	f021 0201 	bic.w	r2, r1, #1
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4403      	add	r3, r0
 8003f52:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8003f54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f56:	4613      	mov	r3, r2
 8003f58:	005b      	lsls	r3, r3, #1
 8003f5a:	4413      	add	r3, r2
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	3350      	adds	r3, #80	; 0x50
 8003f60:	443b      	add	r3, r7
 8003f62:	3b38      	subs	r3, #56	; 0x38
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d01d      	beq.n	8003fa6 <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8003f6a:	497f      	ldr	r1, [pc, #508]	; (8004168 <HAL_OSPIM_Config+0x508>)
 8003f6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f6e:	4613      	mov	r3, r2
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	4413      	add	r3, r2
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	3350      	adds	r3, #80	; 0x50
 8003f78:	443b      	add	r3, r7
 8003f7a:	3b38      	subs	r3, #56	; 0x38
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	6859      	ldr	r1, [r3, #4]
 8003f86:	4878      	ldr	r0, [pc, #480]	; (8004168 <HAL_OSPIM_Config+0x508>)
 8003f88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f8a:	4613      	mov	r3, r2
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	4413      	add	r3, r2
 8003f90:	00db      	lsls	r3, r3, #3
 8003f92:	3350      	adds	r3, #80	; 0x50
 8003f94:	443b      	add	r3, r7
 8003f96:	3b38      	subs	r3, #56	; 0x38
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	f021 0210 	bic.w	r2, r1, #16
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4403      	add	r3, r0
 8003fa4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003fa6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fa8:	4613      	mov	r3, r2
 8003faa:	005b      	lsls	r3, r3, #1
 8003fac:	4413      	add	r3, r2
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	3350      	adds	r3, #80	; 0x50
 8003fb2:	443b      	add	r3, r7
 8003fb4:	3b30      	subs	r3, #48	; 0x30
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d021      	beq.n	8004000 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003fbc:	496a      	ldr	r1, [pc, #424]	; (8004168 <HAL_OSPIM_Config+0x508>)
 8003fbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	4413      	add	r3, r2
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	3350      	adds	r3, #80	; 0x50
 8003fca:	443b      	add	r3, r7
 8003fcc:	3b30      	subs	r3, #48	; 0x30
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	3b01      	subs	r3, #1
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	440b      	add	r3, r1
 8003fda:	6859      	ldr	r1, [r3, #4]
 8003fdc:	4862      	ldr	r0, [pc, #392]	; (8004168 <HAL_OSPIM_Config+0x508>)
 8003fde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	4413      	add	r3, r2
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	3350      	adds	r3, #80	; 0x50
 8003fea:	443b      	add	r3, r7
 8003fec:	3b30      	subs	r3, #48	; 0x30
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4403      	add	r3, r0
 8003ffe:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004000:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004002:	4613      	mov	r3, r2
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	4413      	add	r3, r2
 8004008:	00db      	lsls	r3, r3, #3
 800400a:	3350      	adds	r3, #80	; 0x50
 800400c:	443b      	add	r3, r7
 800400e:	3b2c      	subs	r3, #44	; 0x2c
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d021      	beq.n	800405a <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8004016:	4954      	ldr	r1, [pc, #336]	; (8004168 <HAL_OSPIM_Config+0x508>)
 8004018:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800401a:	4613      	mov	r3, r2
 800401c:	005b      	lsls	r3, r3, #1
 800401e:	4413      	add	r3, r2
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	3350      	adds	r3, #80	; 0x50
 8004024:	443b      	add	r3, r7
 8004026:	3b2c      	subs	r3, #44	; 0x2c
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	3b01      	subs	r3, #1
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	440b      	add	r3, r1
 8004034:	6859      	ldr	r1, [r3, #4]
 8004036:	484c      	ldr	r0, [pc, #304]	; (8004168 <HAL_OSPIM_Config+0x508>)
 8004038:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800403a:	4613      	mov	r3, r2
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	4413      	add	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	3350      	adds	r3, #80	; 0x50
 8004044:	443b      	add	r3, r7
 8004046:	3b2c      	subs	r3, #44	; 0x2c
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	3b01      	subs	r3, #1
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	4403      	add	r3, r0
 8004058:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	6819      	ldr	r1, [r3, #0]
 800405e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004062:	4613      	mov	r3, r2
 8004064:	005b      	lsls	r3, r3, #1
 8004066:	4413      	add	r3, r2
 8004068:	00db      	lsls	r3, r3, #3
 800406a:	3350      	adds	r3, #80	; 0x50
 800406c:	443b      	add	r3, r7
 800406e:	3b3c      	subs	r3, #60	; 0x3c
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4299      	cmp	r1, r3
 8004074:	d038      	beq.n	80040e8 <HAL_OSPIM_Config+0x488>
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	6859      	ldr	r1, [r3, #4]
 800407a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800407e:	4613      	mov	r3, r2
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	4413      	add	r3, r2
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	3350      	adds	r3, #80	; 0x50
 8004088:	443b      	add	r3, r7
 800408a:	3b38      	subs	r3, #56	; 0x38
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4299      	cmp	r1, r3
 8004090:	d02a      	beq.n	80040e8 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	6899      	ldr	r1, [r3, #8]
 8004096:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800409a:	4613      	mov	r3, r2
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	4413      	add	r3, r2
 80040a0:	00db      	lsls	r3, r3, #3
 80040a2:	3350      	adds	r3, #80	; 0x50
 80040a4:	443b      	add	r3, r7
 80040a6:	3b34      	subs	r3, #52	; 0x34
 80040a8:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80040aa:	4299      	cmp	r1, r3
 80040ac:	d01c      	beq.n	80040e8 <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	68d9      	ldr	r1, [r3, #12]
 80040b2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80040b6:	4613      	mov	r3, r2
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	4413      	add	r3, r2
 80040bc:	00db      	lsls	r3, r3, #3
 80040be:	3350      	adds	r3, #80	; 0x50
 80040c0:	443b      	add	r3, r7
 80040c2:	3b30      	subs	r3, #48	; 0x30
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4299      	cmp	r1, r3
 80040c8:	d00e      	beq.n	80040e8 <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	6919      	ldr	r1, [r3, #16]
 80040ce:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80040d2:	4613      	mov	r3, r2
 80040d4:	005b      	lsls	r3, r3, #1
 80040d6:	4413      	add	r3, r2
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	3350      	adds	r3, #80	; 0x50
 80040dc:	443b      	add	r3, r7
 80040de:	3b2c      	subs	r3, #44	; 0x2c
 80040e0:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80040e2:	4299      	cmp	r1, r3
 80040e4:	f040 810e 	bne.w	8004304 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	6819      	ldr	r1, [r3, #0]
 80040ec:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80040f0:	4613      	mov	r3, r2
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	4413      	add	r3, r2
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	3350      	adds	r3, #80	; 0x50
 80040fa:	443b      	add	r3, r7
 80040fc:	3b3c      	subs	r3, #60	; 0x3c
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4299      	cmp	r1, r3
 8004102:	d133      	bne.n	800416c <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	6859      	ldr	r1, [r3, #4]
 8004108:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800410c:	4613      	mov	r3, r2
 800410e:	005b      	lsls	r3, r3, #1
 8004110:	4413      	add	r3, r2
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	3350      	adds	r3, #80	; 0x50
 8004116:	443b      	add	r3, r7
 8004118:	3b38      	subs	r3, #56	; 0x38
 800411a:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800411c:	4299      	cmp	r1, r3
 800411e:	d125      	bne.n	800416c <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	68d9      	ldr	r1, [r3, #12]
 8004124:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004128:	4613      	mov	r3, r2
 800412a:	005b      	lsls	r3, r3, #1
 800412c:	4413      	add	r3, r2
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	3350      	adds	r3, #80	; 0x50
 8004132:	443b      	add	r3, r7
 8004134:	3b30      	subs	r3, #48	; 0x30
 8004136:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 8004138:	4299      	cmp	r1, r3
 800413a:	d117      	bne.n	800416c <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	6919      	ldr	r1, [r3, #16]
 8004140:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004144:	4613      	mov	r3, r2
 8004146:	005b      	lsls	r3, r3, #1
 8004148:	4413      	add	r3, r2
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	3350      	adds	r3, #80	; 0x50
 800414e:	443b      	add	r3, r7
 8004150:	3b2c      	subs	r3, #44	; 0x2c
 8004152:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 8004154:	4299      	cmp	r1, r3
 8004156:	d109      	bne.n	800416c <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8004158:	4b03      	ldr	r3, [pc, #12]	; (8004168 <HAL_OSPIM_Config+0x508>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a02      	ldr	r2, [pc, #8]	; (8004168 <HAL_OSPIM_Config+0x508>)
 800415e:	f043 0301 	orr.w	r3, r3, #1
 8004162:	6013      	str	r3, [r2, #0]
 8004164:	e0ce      	b.n	8004304 <HAL_OSPIM_Config+0x6a4>
 8004166:	bf00      	nop
 8004168:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 800416c:	49a4      	ldr	r1, [pc, #656]	; (8004400 <HAL_OSPIM_Config+0x7a0>)
 800416e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004172:	4613      	mov	r3, r2
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	4413      	add	r3, r2
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	3350      	adds	r3, #80	; 0x50
 800417c:	443b      	add	r3, r7
 800417e:	3b3c      	subs	r3, #60	; 0x3c
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	3b01      	subs	r3, #1
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	440b      	add	r3, r1
 8004188:	6859      	ldr	r1, [r3, #4]
 800418a:	489d      	ldr	r0, [pc, #628]	; (8004400 <HAL_OSPIM_Config+0x7a0>)
 800418c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004190:	4613      	mov	r3, r2
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	4413      	add	r3, r2
 8004196:	00db      	lsls	r3, r3, #3
 8004198:	3350      	adds	r3, #80	; 0x50
 800419a:	443b      	add	r3, r7
 800419c:	3b3c      	subs	r3, #60	; 0x3c
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3b01      	subs	r3, #1
 80041a2:	f021 0201 	bic.w	r2, r1, #1
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4403      	add	r3, r0
 80041aa:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80041ac:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80041b0:	4613      	mov	r3, r2
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	4413      	add	r3, r2
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	3350      	adds	r3, #80	; 0x50
 80041ba:	443b      	add	r3, r7
 80041bc:	3b38      	subs	r3, #56	; 0x38
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d01f      	beq.n	8004204 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 80041c4:	498e      	ldr	r1, [pc, #568]	; (8004400 <HAL_OSPIM_Config+0x7a0>)
 80041c6:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80041ca:	4613      	mov	r3, r2
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	4413      	add	r3, r2
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	3350      	adds	r3, #80	; 0x50
 80041d4:	443b      	add	r3, r7
 80041d6:	3b38      	subs	r3, #56	; 0x38
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	3b01      	subs	r3, #1
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	440b      	add	r3, r1
 80041e0:	6859      	ldr	r1, [r3, #4]
 80041e2:	4887      	ldr	r0, [pc, #540]	; (8004400 <HAL_OSPIM_Config+0x7a0>)
 80041e4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80041e8:	4613      	mov	r3, r2
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	4413      	add	r3, r2
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	3350      	adds	r3, #80	; 0x50
 80041f2:	443b      	add	r3, r7
 80041f4:	3b38      	subs	r3, #56	; 0x38
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	3b01      	subs	r3, #1
 80041fa:	f021 0210 	bic.w	r2, r1, #16
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4403      	add	r3, r0
 8004202:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 8004204:	497e      	ldr	r1, [pc, #504]	; (8004400 <HAL_OSPIM_Config+0x7a0>)
 8004206:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800420a:	4613      	mov	r3, r2
 800420c:	005b      	lsls	r3, r3, #1
 800420e:	4413      	add	r3, r2
 8004210:	00db      	lsls	r3, r3, #3
 8004212:	3350      	adds	r3, #80	; 0x50
 8004214:	443b      	add	r3, r7
 8004216:	3b34      	subs	r3, #52	; 0x34
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	3b01      	subs	r3, #1
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	440b      	add	r3, r1
 8004220:	6859      	ldr	r1, [r3, #4]
 8004222:	4877      	ldr	r0, [pc, #476]	; (8004400 <HAL_OSPIM_Config+0x7a0>)
 8004224:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004228:	4613      	mov	r3, r2
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	4413      	add	r3, r2
 800422e:	00db      	lsls	r3, r3, #3
 8004230:	3350      	adds	r3, #80	; 0x50
 8004232:	443b      	add	r3, r7
 8004234:	3b34      	subs	r3, #52	; 0x34
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	3b01      	subs	r3, #1
 800423a:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4403      	add	r3, r0
 8004242:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004244:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004248:	4613      	mov	r3, r2
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	4413      	add	r3, r2
 800424e:	00db      	lsls	r3, r3, #3
 8004250:	3350      	adds	r3, #80	; 0x50
 8004252:	443b      	add	r3, r7
 8004254:	3b30      	subs	r3, #48	; 0x30
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d023      	beq.n	80042a4 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800425c:	4968      	ldr	r1, [pc, #416]	; (8004400 <HAL_OSPIM_Config+0x7a0>)
 800425e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004262:	4613      	mov	r3, r2
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	4413      	add	r3, r2
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	3350      	adds	r3, #80	; 0x50
 800426c:	443b      	add	r3, r7
 800426e:	3b30      	subs	r3, #48	; 0x30
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	3b01      	subs	r3, #1
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	440b      	add	r3, r1
 800427c:	6859      	ldr	r1, [r3, #4]
 800427e:	4860      	ldr	r0, [pc, #384]	; (8004400 <HAL_OSPIM_Config+0x7a0>)
 8004280:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8004284:	4613      	mov	r3, r2
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	4413      	add	r3, r2
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	3350      	adds	r3, #80	; 0x50
 800428e:	443b      	add	r3, r7
 8004290:	3b30      	subs	r3, #48	; 0x30
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	3b01      	subs	r3, #1
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4403      	add	r3, r0
 80042a2:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80042a4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80042a8:	4613      	mov	r3, r2
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	4413      	add	r3, r2
 80042ae:	00db      	lsls	r3, r3, #3
 80042b0:	3350      	adds	r3, #80	; 0x50
 80042b2:	443b      	add	r3, r7
 80042b4:	3b2c      	subs	r3, #44	; 0x2c
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d023      	beq.n	8004304 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80042bc:	4950      	ldr	r1, [pc, #320]	; (8004400 <HAL_OSPIM_Config+0x7a0>)
 80042be:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80042c2:	4613      	mov	r3, r2
 80042c4:	005b      	lsls	r3, r3, #1
 80042c6:	4413      	add	r3, r2
 80042c8:	00db      	lsls	r3, r3, #3
 80042ca:	3350      	adds	r3, #80	; 0x50
 80042cc:	443b      	add	r3, r7
 80042ce:	3b2c      	subs	r3, #44	; 0x2c
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3b01      	subs	r3, #1
 80042d4:	f003 0301 	and.w	r3, r3, #1
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	440b      	add	r3, r1
 80042dc:	6859      	ldr	r1, [r3, #4]
 80042de:	4848      	ldr	r0, [pc, #288]	; (8004400 <HAL_OSPIM_Config+0x7a0>)
 80042e0:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80042e4:	4613      	mov	r3, r2
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	4413      	add	r3, r2
 80042ea:	00db      	lsls	r3, r3, #3
 80042ec:	3350      	adds	r3, #80	; 0x50
 80042ee:	443b      	add	r3, r7
 80042f0:	3b2c      	subs	r3, #44	; 0x2c
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	3b01      	subs	r3, #1
 80042f6:	f003 0301 	and.w	r3, r3, #1
 80042fa:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4403      	add	r3, r0
 8004302:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8004304:	4a3e      	ldr	r2, [pc, #248]	; (8004400 <HAL_OSPIM_Config+0x7a0>)
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	3b01      	subs	r3, #1
 800430c:	009b      	lsls	r3, r3, #2
 800430e:	4413      	add	r3, r2
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004316:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004318:	025b      	lsls	r3, r3, #9
 800431a:	431a      	orrs	r2, r3
 800431c:	4938      	ldr	r1, [pc, #224]	; (8004400 <HAL_OSPIM_Config+0x7a0>)
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	3b01      	subs	r3, #1
 8004324:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	440b      	add	r3, r1
 800432c:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d018      	beq.n	8004368 <HAL_OSPIM_Config+0x708>
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800433e:	d813      	bhi.n	8004368 <HAL_OSPIM_Config+0x708>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	1e5a      	subs	r2, r3, #1
 8004346:	4b2e      	ldr	r3, [pc, #184]	; (8004400 <HAL_OSPIM_Config+0x7a0>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	0c1b      	lsrs	r3, r3, #16
 800434c:	b2db      	uxtb	r3, r3
 800434e:	429a      	cmp	r2, r3
 8004350:	d90a      	bls.n	8004368 <HAL_OSPIM_Config+0x708>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 8004352:	4b2b      	ldr	r3, [pc, #172]	; (8004400 <HAL_OSPIM_Config+0x7a0>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	695b      	ldr	r3, [r3, #20]
 800435e:	3b01      	subs	r3, #1
 8004360:	041b      	lsls	r3, r3, #16
 8004362:	4927      	ldr	r1, [pc, #156]	; (8004400 <HAL_OSPIM_Config+0x7a0>)
 8004364:	4313      	orrs	r3, r2
 8004366:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8004368:	4b25      	ldr	r3, [pc, #148]	; (8004400 <HAL_OSPIM_Config+0x7a0>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 809a 	beq.w	80044aa <HAL_OSPIM_Config+0x84a>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 8004376:	4a22      	ldr	r2, [pc, #136]	; (8004400 <HAL_OSPIM_Config+0x7a0>)
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	3b01      	subs	r3, #1
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f023 0203 	bic.w	r2, r3, #3
 8004388:	491d      	ldr	r1, [pc, #116]	; (8004400 <HAL_OSPIM_Config+0x7a0>)
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	3b01      	subs	r3, #1
 8004390:	f042 0201 	orr.w	r2, r2, #1
 8004394:	009b      	lsls	r3, r3, #2
 8004396:	440b      	add	r3, r1
 8004398:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d011      	beq.n	80043c6 <HAL_OSPIM_Config+0x766>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 80043a2:	4a17      	ldr	r2, [pc, #92]	; (8004400 <HAL_OSPIM_Config+0x7a0>)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	3b01      	subs	r3, #1
 80043aa:	009b      	lsls	r3, r3, #2
 80043ac:	4413      	add	r3, r2
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80043b4:	4912      	ldr	r1, [pc, #72]	; (8004400 <HAL_OSPIM_Config+0x7a0>)
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	3b01      	subs	r3, #1
 80043bc:	f042 0210 	orr.w	r2, r2, #16
 80043c0:	009b      	lsls	r3, r3, #2
 80043c2:	440b      	add	r3, r1
 80043c4:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d018      	beq.n	8004404 <HAL_OSPIM_Config+0x7a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80043d2:	4a0b      	ldr	r2, [pc, #44]	; (8004400 <HAL_OSPIM_Config+0x7a0>)
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	3b01      	subs	r3, #1
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4413      	add	r3, r2
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80043e8:	4905      	ldr	r1, [pc, #20]	; (8004400 <HAL_OSPIM_Config+0x7a0>)
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	3b01      	subs	r3, #1
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80043f8:	009b      	lsls	r3, r3, #2
 80043fa:	440b      	add	r3, r1
 80043fc:	605a      	str	r2, [r3, #4]
 80043fe:	e01b      	b.n	8004438 <HAL_OSPIM_Config+0x7d8>
 8004400:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d015      	beq.n	8004438 <HAL_OSPIM_Config+0x7d8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800440c:	4a8a      	ldr	r2, [pc, #552]	; (8004638 <HAL_OSPIM_Config+0x9d8>)
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	3b01      	subs	r3, #1
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	009b      	lsls	r3, r3, #2
 800441a:	4413      	add	r3, r2
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004422:	4985      	ldr	r1, [pc, #532]	; (8004638 <HAL_OSPIM_Config+0x9d8>)
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	3b01      	subs	r3, #1
 800442a:	f003 0301 	and.w	r3, r3, #1
 800442e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	440b      	add	r3, r1
 8004436:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004440:	2b00      	cmp	r3, #0
 8004442:	d016      	beq.n	8004472 <HAL_OSPIM_Config+0x812>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004444:	4a7c      	ldr	r2, [pc, #496]	; (8004638 <HAL_OSPIM_Config+0x9d8>)
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	3b01      	subs	r3, #1
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	4413      	add	r3, r2
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800445a:	4977      	ldr	r1, [pc, #476]	; (8004638 <HAL_OSPIM_Config+0x9d8>)
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	3b01      	subs	r3, #1
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	440b      	add	r3, r1
 800446e:	605a      	str	r2, [r3, #4]
 8004470:	e0c3      	b.n	80045fa <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 80bf 	beq.w	80045fa <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800447c:	4a6e      	ldr	r2, [pc, #440]	; (8004638 <HAL_OSPIM_Config+0x9d8>)
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	3b01      	subs	r3, #1
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	4413      	add	r3, r2
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004492:	4969      	ldr	r1, [pc, #420]	; (8004638 <HAL_OSPIM_Config+0x9d8>)
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	3b01      	subs	r3, #1
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	440b      	add	r3, r1
 80044a6:	605a      	str	r2, [r3, #4]
 80044a8:	e0a7      	b.n	80045fa <HAL_OSPIM_Config+0x99a>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80044aa:	4a63      	ldr	r2, [pc, #396]	; (8004638 <HAL_OSPIM_Config+0x9d8>)
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	3b01      	subs	r3, #1
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	4413      	add	r3, r2
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f023 0203 	bic.w	r2, r3, #3
 80044bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	431a      	orrs	r2, r3
 80044c2:	495d      	ldr	r1, [pc, #372]	; (8004638 <HAL_OSPIM_Config+0x9d8>)
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	3b01      	subs	r3, #1
 80044ca:	f042 0201 	orr.w	r2, r2, #1
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	440b      	add	r3, r1
 80044d2:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d014      	beq.n	8004506 <HAL_OSPIM_Config+0x8a6>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 80044dc:	4a56      	ldr	r2, [pc, #344]	; (8004638 <HAL_OSPIM_Config+0x9d8>)
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	3b01      	subs	r3, #1
 80044e4:	009b      	lsls	r3, r3, #2
 80044e6:	4413      	add	r3, r2
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80044ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044f0:	015b      	lsls	r3, r3, #5
 80044f2:	431a      	orrs	r2, r3
 80044f4:	4950      	ldr	r1, [pc, #320]	; (8004638 <HAL_OSPIM_Config+0x9d8>)
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	3b01      	subs	r3, #1
 80044fc:	f042 0210 	orr.w	r2, r2, #16
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	440b      	add	r3, r1
 8004504:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d019      	beq.n	8004546 <HAL_OSPIM_Config+0x8e6>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8004512:	4a49      	ldr	r2, [pc, #292]	; (8004638 <HAL_OSPIM_Config+0x9d8>)
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	68db      	ldr	r3, [r3, #12]
 8004518:	3b01      	subs	r3, #1
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	4413      	add	r3, r2
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800452a:	049b      	lsls	r3, r3, #18
 800452c:	431a      	orrs	r2, r3
 800452e:	4942      	ldr	r1, [pc, #264]	; (8004638 <HAL_OSPIM_Config+0x9d8>)
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	3b01      	subs	r3, #1
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	440b      	add	r3, r1
 8004542:	605a      	str	r2, [r3, #4]
 8004544:	e01c      	b.n	8004580 <HAL_OSPIM_Config+0x920>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d018      	beq.n	8004580 <HAL_OSPIM_Config+0x920>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 800454e:	4a3a      	ldr	r2, [pc, #232]	; (8004638 <HAL_OSPIM_Config+0x9d8>)
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	3b01      	subs	r3, #1
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4413      	add	r3, r2
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004566:	069b      	lsls	r3, r3, #26
 8004568:	431a      	orrs	r2, r3
 800456a:	4933      	ldr	r1, [pc, #204]	; (8004638 <HAL_OSPIM_Config+0x9d8>)
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	68db      	ldr	r3, [r3, #12]
 8004570:	3b01      	subs	r3, #1
 8004572:	f003 0301 	and.w	r3, r3, #1
 8004576:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800457a:	009b      	lsls	r3, r3, #2
 800457c:	440b      	add	r3, r1
 800457e:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d019      	beq.n	80045c0 <HAL_OSPIM_Config+0x960>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800458c:	4a2a      	ldr	r2, [pc, #168]	; (8004638 <HAL_OSPIM_Config+0x9d8>)
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	3b01      	subs	r3, #1
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	4413      	add	r3, r2
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80045a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045a4:	049b      	lsls	r3, r3, #18
 80045a6:	431a      	orrs	r2, r3
 80045a8:	4923      	ldr	r1, [pc, #140]	; (8004638 <HAL_OSPIM_Config+0x9d8>)
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	3b01      	subs	r3, #1
 80045b0:	f003 0301 	and.w	r3, r3, #1
 80045b4:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	440b      	add	r3, r1
 80045bc:	605a      	str	r2, [r3, #4]
 80045be:	e01c      	b.n	80045fa <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d018      	beq.n	80045fa <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80045c8:	4a1b      	ldr	r2, [pc, #108]	; (8004638 <HAL_OSPIM_Config+0x9d8>)
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	3b01      	subs	r3, #1
 80045d0:	f003 0301 	and.w	r3, r3, #1
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	4413      	add	r3, r2
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80045de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045e0:	069b      	lsls	r3, r3, #26
 80045e2:	431a      	orrs	r2, r3
 80045e4:	4914      	ldr	r1, [pc, #80]	; (8004638 <HAL_OSPIM_Config+0x9d8>)
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	691b      	ldr	r3, [r3, #16]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	f003 0301 	and.w	r3, r3, #1
 80045f0:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	440b      	add	r3, r1
 80045f8:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80045fa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d005      	beq.n	8004612 <HAL_OSPIM_Config+0x9b2>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8004606:	4b0d      	ldr	r3, [pc, #52]	; (800463c <HAL_OSPIM_Config+0x9dc>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a0c      	ldr	r2, [pc, #48]	; (800463c <HAL_OSPIM_Config+0x9dc>)
 800460c:	f043 0301 	orr.w	r3, r3, #1
 8004610:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8004612:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b00      	cmp	r3, #0
 800461c:	d005      	beq.n	800462a <HAL_OSPIM_Config+0x9ca>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800461e:	4b08      	ldr	r3, [pc, #32]	; (8004640 <HAL_OSPIM_Config+0x9e0>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a07      	ldr	r2, [pc, #28]	; (8004640 <HAL_OSPIM_Config+0x9e0>)
 8004624:	f043 0301 	orr.w	r3, r3, #1
 8004628:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800462a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800462e:	4618      	mov	r0, r3
 8004630:	3750      	adds	r7, #80	; 0x50
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop
 8004638:	420c4000 	.word	0x420c4000
 800463c:	420d1400 	.word	0x420d1400
 8004640:	420d2400 	.word	0x420d2400

08004644 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	603b      	str	r3, [r7, #0]
 8004650:	4613      	mov	r3, r2
 8004652:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004654:	e022      	b.n	800469c <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004656:	69bb      	ldr	r3, [r7, #24]
 8004658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465c:	d01e      	beq.n	800469c <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800465e:	f7fe fb41 	bl	8002ce4 <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	429a      	cmp	r2, r3
 800466c:	d302      	bcc.n	8004674 <OSPI_WaitFlagStateUntilTimeout+0x30>
 800466e:	69bb      	ldr	r3, [r7, #24]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d113      	bne.n	800469c <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6a1a      	ldr	r2, [r3, #32]
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	401a      	ands	r2, r3
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	429a      	cmp	r2, r3
 8004682:	d00b      	beq.n	800469c <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f44f 7200 	mov.w	r2, #512	; 0x200
 800468a:	651a      	str	r2, [r3, #80]	; 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004690:	f043 0201 	orr.w	r2, r3, #1
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	655a      	str	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e00e      	b.n	80046ba <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	6a1a      	ldr	r2, [r3, #32]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	4013      	ands	r3, r2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	bf14      	ite	ne
 80046aa:	2301      	movne	r3, #1
 80046ac:	2300      	moveq	r3, #0
 80046ae:	b2db      	uxtb	r3, r3
 80046b0:	461a      	mov	r2, r3
 80046b2:	79fb      	ldrb	r3, [r7, #7]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d1ce      	bne.n	8004656 <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
	...

080046c4 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	4603      	mov	r3, r0
 80046cc:	6039      	str	r1, [r7, #0]
 80046ce:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80046d0:	2300      	movs	r3, #0
 80046d2:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80046d8:	79fb      	ldrb	r3, [r7, #7]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d005      	beq.n	80046ea <OSPIM_GetConfig+0x26>
 80046de:	79fb      	ldrb	r3, [r7, #7]
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	d802      	bhi.n	80046ea <OSPIM_GetConfig+0x26>
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d102      	bne.n	80046f0 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	75fb      	strb	r3, [r7, #23]
 80046ee:	e098      	b.n	8004822 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	2200      	movs	r2, #0
 80046f4:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2200      	movs	r2, #0
 80046fa:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	2200      	movs	r2, #0
 8004700:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	2200      	movs	r2, #0
 8004706:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	2200      	movs	r2, #0
 800470c:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800470e:	79fb      	ldrb	r3, [r7, #7]
 8004710:	2b02      	cmp	r3, #2
 8004712:	d10b      	bne.n	800472c <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8004714:	4b46      	ldr	r3, [pc, #280]	; (8004830 <OSPIM_GetConfig+0x16c>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b00      	cmp	r3, #0
 800471e:	d102      	bne.n	8004726 <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8004720:	4b44      	ldr	r3, [pc, #272]	; (8004834 <OSPIM_GetConfig+0x170>)
 8004722:	613b      	str	r3, [r7, #16]
 8004724:	e002      	b.n	800472c <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8004726:	f44f 7300 	mov.w	r3, #512	; 0x200
 800472a:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 800472c:	2300      	movs	r3, #0
 800472e:	60fb      	str	r3, [r7, #12]
 8004730:	e074      	b.n	800481c <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8004732:	4a3f      	ldr	r2, [pc, #252]	; (8004830 <OSPIM_GetConfig+0x16c>)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	4413      	add	r3, r2
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00a      	beq.n	800475e <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	4053      	eors	r3, r2
 800474e:	f003 0302 	and.w	r3, r3, #2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d103      	bne.n	800475e <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	1c5a      	adds	r2, r3, #1
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	f003 0310 	and.w	r3, r3, #16
 8004764:	2b00      	cmp	r3, #0
 8004766:	d00a      	beq.n	800477e <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8004768:	68ba      	ldr	r2, [r7, #8]
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	4053      	eors	r3, r2
 800476e:	f003 0320 	and.w	r3, r3, #32
 8004772:	2b00      	cmp	r3, #0
 8004774:	d103      	bne.n	800477e <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00a      	beq.n	800479e <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8004788:	68ba      	ldr	r2, [r7, #8]
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	4053      	eors	r3, r2
 800478e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004792:	2b00      	cmp	r3, #0
 8004794:	d103      	bne.n	800479e <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	1c5a      	adds	r2, r3, #1
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d018      	beq.n	80047da <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	4053      	eors	r3, r2
 80047ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d111      	bne.n	80047da <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d106      	bne.n	80047ce <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	3301      	adds	r3, #1
 80047c4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	60da      	str	r2, [r3, #12]
 80047cc:	e005      	b.n	80047da <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	3301      	adds	r3, #1
 80047d2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d018      	beq.n	8004816 <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	4053      	eors	r3, r2
 80047ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d111      	bne.n	8004816 <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d106      	bne.n	800480a <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	3301      	adds	r3, #1
 8004800:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	611a      	str	r2, [r3, #16]
 8004808:	e005      	b.n	8004816 <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	3301      	adds	r3, #1
 800480e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	3301      	adds	r3, #1
 800481a:	60fb      	str	r3, [r7, #12]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2b01      	cmp	r3, #1
 8004820:	d987      	bls.n	8004732 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8004822:	7dfb      	ldrb	r3, [r7, #23]
}
 8004824:	4618      	mov	r0, r3
 8004826:	371c      	adds	r7, #28
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	420c4000 	.word	0x420c4000
 8004834:	04040222 	.word	0x04040222

08004838 <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	689a      	ldr	r2, [r3, #8]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f042 0202 	orr.w	r2, r2, #2
 8004854:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2208      	movs	r2, #8
 800485a:	651a      	str	r2, [r3, #80]	; 0x50

  if (hospi->Instance == OCTOSPI1)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a15      	ldr	r2, [pc, #84]	; (80048b8 <HAL_OSPI_DLYB_SetConfig+0x80>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d109      	bne.n	800487a <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 8004866:	4815      	ldr	r0, [pc, #84]	; (80048bc <HAL_OSPI_DLYB_SetConfig+0x84>)
 8004868:	f7ff f8aa 	bl	80039c0 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 800486c:	6839      	ldr	r1, [r7, #0]
 800486e:	4813      	ldr	r0, [pc, #76]	; (80048bc <HAL_OSPI_DLYB_SetConfig+0x84>)
 8004870:	f006 fa5e 	bl	800ad30 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8004874:	2300      	movs	r3, #0
 8004876:	73fb      	strb	r3, [r7, #15]
 8004878:	e00d      	b.n	8004896 <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

  else if (hospi->Instance == OCTOSPI2)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a10      	ldr	r2, [pc, #64]	; (80048c0 <HAL_OSPI_DLYB_SetConfig+0x88>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d108      	bne.n	8004896 <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8004884:	480f      	ldr	r0, [pc, #60]	; (80048c4 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8004886:	f7ff f89b 	bl	80039c0 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 800488a:	6839      	ldr	r1, [r7, #0]
 800488c:	480d      	ldr	r0, [pc, #52]	; (80048c4 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 800488e:	f006 fa4f 	bl	800ad30 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8004892:	2300      	movs	r3, #0
 8004894:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 8004896:	6878      	ldr	r0, [r7, #4]
 8004898:	f7ff f95e 	bl	8003b58 <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	689a      	ldr	r2, [r3, #8]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0202 	bic.w	r2, r2, #2
 80048aa:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 80048ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	420d1400 	.word	0x420d1400
 80048bc:	420cf000 	.word	0x420cf000
 80048c0:	420d2400 	.word	0x420d2400
 80048c4:	420cf400 	.word	0x420cf400

080048c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80048c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048ca:	b08f      	sub	sp, #60	; 0x3c
 80048cc:	af0a      	add	r7, sp, #40	; 0x28
 80048ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e116      	b.n	8004b08 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d106      	bne.n	80048fa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f7fe f85b 	bl	80029b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2203      	movs	r2, #3
 80048fe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800490a:	2b00      	cmp	r3, #0
 800490c:	d102      	bne.n	8004914 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4618      	mov	r0, r3
 800491a:	f006 fc25 	bl	800b168 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	603b      	str	r3, [r7, #0]
 8004924:	687e      	ldr	r6, [r7, #4]
 8004926:	466d      	mov	r5, sp
 8004928:	f106 0410 	add.w	r4, r6, #16
 800492c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800492e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004930:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004932:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004934:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004938:	e885 0003 	stmia.w	r5, {r0, r1}
 800493c:	1d33      	adds	r3, r6, #4
 800493e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004940:	6838      	ldr	r0, [r7, #0]
 8004942:	f006 fbe5 	bl	800b110 <USB_CoreInit>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d005      	beq.n	8004958 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2202      	movs	r2, #2
 8004950:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e0d7      	b.n	8004b08 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2100      	movs	r1, #0
 800495e:	4618      	mov	r0, r3
 8004960:	f006 fc13 	bl	800b18a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004964:	2300      	movs	r3, #0
 8004966:	73fb      	strb	r3, [r7, #15]
 8004968:	e04a      	b.n	8004a00 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800496a:	7bfa      	ldrb	r2, [r7, #15]
 800496c:	6879      	ldr	r1, [r7, #4]
 800496e:	4613      	mov	r3, r2
 8004970:	00db      	lsls	r3, r3, #3
 8004972:	4413      	add	r3, r2
 8004974:	009b      	lsls	r3, r3, #2
 8004976:	440b      	add	r3, r1
 8004978:	333d      	adds	r3, #61	; 0x3d
 800497a:	2201      	movs	r2, #1
 800497c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800497e:	7bfa      	ldrb	r2, [r7, #15]
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	4613      	mov	r3, r2
 8004984:	00db      	lsls	r3, r3, #3
 8004986:	4413      	add	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	440b      	add	r3, r1
 800498c:	333c      	adds	r3, #60	; 0x3c
 800498e:	7bfa      	ldrb	r2, [r7, #15]
 8004990:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004992:	7bfa      	ldrb	r2, [r7, #15]
 8004994:	7bfb      	ldrb	r3, [r7, #15]
 8004996:	b298      	uxth	r0, r3
 8004998:	6879      	ldr	r1, [r7, #4]
 800499a:	4613      	mov	r3, r2
 800499c:	00db      	lsls	r3, r3, #3
 800499e:	4413      	add	r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	440b      	add	r3, r1
 80049a4:	3344      	adds	r3, #68	; 0x44
 80049a6:	4602      	mov	r2, r0
 80049a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80049aa:	7bfa      	ldrb	r2, [r7, #15]
 80049ac:	6879      	ldr	r1, [r7, #4]
 80049ae:	4613      	mov	r3, r2
 80049b0:	00db      	lsls	r3, r3, #3
 80049b2:	4413      	add	r3, r2
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	440b      	add	r3, r1
 80049b8:	3340      	adds	r3, #64	; 0x40
 80049ba:	2200      	movs	r2, #0
 80049bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80049be:	7bfa      	ldrb	r2, [r7, #15]
 80049c0:	6879      	ldr	r1, [r7, #4]
 80049c2:	4613      	mov	r3, r2
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	4413      	add	r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	440b      	add	r3, r1
 80049cc:	3348      	adds	r3, #72	; 0x48
 80049ce:	2200      	movs	r2, #0
 80049d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80049d2:	7bfa      	ldrb	r2, [r7, #15]
 80049d4:	6879      	ldr	r1, [r7, #4]
 80049d6:	4613      	mov	r3, r2
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	4413      	add	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	440b      	add	r3, r1
 80049e0:	334c      	adds	r3, #76	; 0x4c
 80049e2:	2200      	movs	r2, #0
 80049e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80049e6:	7bfa      	ldrb	r2, [r7, #15]
 80049e8:	6879      	ldr	r1, [r7, #4]
 80049ea:	4613      	mov	r3, r2
 80049ec:	00db      	lsls	r3, r3, #3
 80049ee:	4413      	add	r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	440b      	add	r3, r1
 80049f4:	3354      	adds	r3, #84	; 0x54
 80049f6:	2200      	movs	r2, #0
 80049f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049fa:	7bfb      	ldrb	r3, [r7, #15]
 80049fc:	3301      	adds	r3, #1
 80049fe:	73fb      	strb	r3, [r7, #15]
 8004a00:	7bfa      	ldrb	r2, [r7, #15]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d3af      	bcc.n	800496a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	73fb      	strb	r3, [r7, #15]
 8004a0e:	e044      	b.n	8004a9a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a10:	7bfa      	ldrb	r2, [r7, #15]
 8004a12:	6879      	ldr	r1, [r7, #4]
 8004a14:	4613      	mov	r3, r2
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	4413      	add	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	440b      	add	r3, r1
 8004a1e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004a22:	2200      	movs	r2, #0
 8004a24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a26:	7bfa      	ldrb	r2, [r7, #15]
 8004a28:	6879      	ldr	r1, [r7, #4]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	00db      	lsls	r3, r3, #3
 8004a2e:	4413      	add	r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	440b      	add	r3, r1
 8004a34:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004a38:	7bfa      	ldrb	r2, [r7, #15]
 8004a3a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a3c:	7bfa      	ldrb	r2, [r7, #15]
 8004a3e:	6879      	ldr	r1, [r7, #4]
 8004a40:	4613      	mov	r3, r2
 8004a42:	00db      	lsls	r3, r3, #3
 8004a44:	4413      	add	r3, r2
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	440b      	add	r3, r1
 8004a4a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004a4e:	2200      	movs	r2, #0
 8004a50:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a52:	7bfa      	ldrb	r2, [r7, #15]
 8004a54:	6879      	ldr	r1, [r7, #4]
 8004a56:	4613      	mov	r3, r2
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	4413      	add	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	440b      	add	r3, r1
 8004a60:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004a64:	2200      	movs	r2, #0
 8004a66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a68:	7bfa      	ldrb	r2, [r7, #15]
 8004a6a:	6879      	ldr	r1, [r7, #4]
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	4413      	add	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	440b      	add	r3, r1
 8004a76:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a7e:	7bfa      	ldrb	r2, [r7, #15]
 8004a80:	6879      	ldr	r1, [r7, #4]
 8004a82:	4613      	mov	r3, r2
 8004a84:	00db      	lsls	r3, r3, #3
 8004a86:	4413      	add	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	440b      	add	r3, r1
 8004a8c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004a90:	2200      	movs	r2, #0
 8004a92:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a94:	7bfb      	ldrb	r3, [r7, #15]
 8004a96:	3301      	adds	r3, #1
 8004a98:	73fb      	strb	r3, [r7, #15]
 8004a9a:	7bfa      	ldrb	r2, [r7, #15]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d3b5      	bcc.n	8004a10 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	603b      	str	r3, [r7, #0]
 8004aaa:	687e      	ldr	r6, [r7, #4]
 8004aac:	466d      	mov	r5, sp
 8004aae:	f106 0410 	add.w	r4, r6, #16
 8004ab2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ab4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004ab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004ab8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004aba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004abe:	e885 0003 	stmia.w	r5, {r0, r1}
 8004ac2:	1d33      	adds	r3, r6, #4
 8004ac4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ac6:	6838      	ldr	r0, [r7, #0]
 8004ac8:	f006 fbac 	bl	800b224 <USB_DevInit>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d005      	beq.n	8004ade <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004ada:	2301      	movs	r3, #1
 8004adc:	e014      	b.n	8004b08 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d102      	bne.n	8004afc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f80a 	bl	8004b10 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4618      	mov	r0, r3
 8004b02:	f006 fd5a 	bl	800b5ba <USB_DevDisconnect>

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3714      	adds	r7, #20
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004b10 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	699b      	ldr	r3, [r3, #24]
 8004b32:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b42:	f043 0303 	orr.w	r3, r3, #3
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3714      	adds	r7, #20
 8004b50:	46bd      	mov	sp, r7
 8004b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b56:	4770      	bx	lr

08004b58 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004b60:	4b34      	ldr	r3, [pc, #208]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b68:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004b6a:	68ba      	ldr	r2, [r7, #8]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d101      	bne.n	8004b76 <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8004b72:	2300      	movs	r3, #0
 8004b74:	e057      	b.n	8004c26 <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b7c:	d90a      	bls.n	8004b94 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004b7e:	4b2d      	ldr	r3, [pc, #180]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	4a2a      	ldr	r2, [pc, #168]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004b8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b90:	60d3      	str	r3, [r2, #12]
 8004b92:	e007      	b.n	8004ba4 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8004b94:	4b27      	ldr	r3, [pc, #156]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004b9c:	4925      	ldr	r1, [pc, #148]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004ba4:	4b24      	ldr	r3, [pc, #144]	; (8004c38 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a24      	ldr	r2, [pc, #144]	; (8004c3c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004baa:	fba2 2303 	umull	r2, r3, r2, r3
 8004bae:	099b      	lsrs	r3, r3, #6
 8004bb0:	2232      	movs	r2, #50	; 0x32
 8004bb2:	fb02 f303 	mul.w	r3, r2, r3
 8004bb6:	4a21      	ldr	r2, [pc, #132]	; (8004c3c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bbc:	099b      	lsrs	r3, r3, #6
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004bc2:	e002      	b.n	8004bca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8004bca:	4b1a      	ldr	r3, [pc, #104]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d102      	bne.n	8004bdc <HAL_PWREx_ControlVoltageScaling+0x84>
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1f3      	bne.n	8004bc4 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d01b      	beq.n	8004c1a <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004be2:	4b15      	ldr	r3, [pc, #84]	; (8004c38 <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a15      	ldr	r2, [pc, #84]	; (8004c3c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004be8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bec:	099b      	lsrs	r3, r3, #6
 8004bee:	2232      	movs	r2, #50	; 0x32
 8004bf0:	fb02 f303 	mul.w	r3, r2, r3
 8004bf4:	4a11      	ldr	r2, [pc, #68]	; (8004c3c <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8004bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfa:	099b      	lsrs	r3, r3, #6
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004c00:	e002      	b.n	8004c08 <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	3b01      	subs	r3, #1
 8004c06:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8004c08:	4b0a      	ldr	r3, [pc, #40]	; (8004c34 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8004c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d102      	bne.n	8004c1a <HAL_PWREx_ControlVoltageScaling+0xc2>
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1f3      	bne.n	8004c02 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d101      	bne.n	8004c24 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8004c20:	2303      	movs	r3, #3
 8004c22:	e000      	b.n	8004c26 <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8004c24:	2300      	movs	r3, #0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	46020800 	.word	0x46020800
 8004c38:	20000000 	.word	0x20000000
 8004c3c:	10624dd3 	.word	0x10624dd3

08004c40 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8004c44:	4b04      	ldr	r3, [pc, #16]	; (8004c58 <HAL_PWREx_GetVoltageRange+0x18>)
 8004c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	46020800 	.word	0x46020800

08004c5c <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004c64:	4b22      	ldr	r3, [pc, #136]	; (8004cf0 <HAL_PWREx_ConfigSupply+0x94>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a22      	ldr	r2, [pc, #136]	; (8004cf4 <HAL_PWREx_ConfigSupply+0x98>)
 8004c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6e:	099b      	lsrs	r3, r3, #6
 8004c70:	2232      	movs	r2, #50	; 0x32
 8004c72:	fb02 f303 	mul.w	r3, r2, r3
 8004c76:	4a1f      	ldr	r2, [pc, #124]	; (8004cf4 <HAL_PWREx_ConfigSupply+0x98>)
 8004c78:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7c:	099b      	lsrs	r3, r3, #6
 8004c7e:	3301      	adds	r3, #1
 8004c80:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d113      	bne.n	8004cb0 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004c88:	4b1b      	ldr	r3, [pc, #108]	; (8004cf8 <HAL_PWREx_ConfigSupply+0x9c>)
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	4a1a      	ldr	r2, [pc, #104]	; (8004cf8 <HAL_PWREx_ConfigSupply+0x9c>)
 8004c8e:	f023 0302 	bic.w	r3, r3, #2
 8004c92:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004c94:	e002      	b.n	8004c9c <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004c9c:	4b16      	ldr	r3, [pc, #88]	; (8004cf8 <HAL_PWREx_ConfigSupply+0x9c>)
 8004c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d116      	bne.n	8004cd6 <HAL_PWREx_ConfigSupply+0x7a>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1f3      	bne.n	8004c96 <HAL_PWREx_ConfigSupply+0x3a>
 8004cae:	e012      	b.n	8004cd6 <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004cb0:	4b11      	ldr	r3, [pc, #68]	; (8004cf8 <HAL_PWREx_ConfigSupply+0x9c>)
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	4a10      	ldr	r2, [pc, #64]	; (8004cf8 <HAL_PWREx_ConfigSupply+0x9c>)
 8004cb6:	f043 0302 	orr.w	r3, r3, #2
 8004cba:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004cbc:	e002      	b.n	8004cc4 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004cc4:	4b0c      	ldr	r3, [pc, #48]	; (8004cf8 <HAL_PWREx_ConfigSupply+0x9c>)
 8004cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d102      	bne.n	8004cd6 <HAL_PWREx_ConfigSupply+0x7a>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d1f3      	bne.n	8004cbe <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d101      	bne.n	8004ce0 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e000      	b.n	8004ce2 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	20000000 	.word	0x20000000
 8004cf4:	10624dd3 	.word	0x10624dd3
 8004cf8:	46020800 	.word	0x46020800

08004cfc <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 8004d00:	4b05      	ldr	r3, [pc, #20]	; (8004d18 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004d02:	691b      	ldr	r3, [r3, #16]
 8004d04:	4a04      	ldr	r2, [pc, #16]	; (8004d18 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d0a:	6113      	str	r3, [r2, #16]
}
 8004d0c:	bf00      	nop
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	46020800 	.word	0x46020800

08004d1c <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 8004d20:	4b05      	ldr	r3, [pc, #20]	; (8004d38 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	4a04      	ldr	r2, [pc, #16]	; (8004d38 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004d26:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d2a:	6113      	str	r3, [r2, #16]
}
 8004d2c:	bf00      	nop
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr
 8004d36:	bf00      	nop
 8004d38:	46020800 	.word	0x46020800

08004d3c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b08e      	sub	sp, #56	; 0x38
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8004d44:	2300      	movs	r3, #0
 8004d46:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d102      	bne.n	8004d56 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	f000 bec3 	b.w	8005adc <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d56:	4b9c      	ldr	r3, [pc, #624]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004d58:	69db      	ldr	r3, [r3, #28]
 8004d5a:	f003 030c 	and.w	r3, r3, #12
 8004d5e:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d60:	4b99      	ldr	r3, [pc, #612]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d64:	f003 0303 	and.w	r3, r3, #3
 8004d68:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0310 	and.w	r3, r3, #16
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	f000 8172 	beq.w	800505c <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d007      	beq.n	8004d8e <HAL_RCC_OscConfig+0x52>
 8004d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d80:	2b0c      	cmp	r3, #12
 8004d82:	f040 80e4 	bne.w	8004f4e <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	f040 80e0 	bne.w	8004f4e <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d8e:	4b8e      	ldr	r3, [pc, #568]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0304 	and.w	r3, r3, #4
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d006      	beq.n	8004da8 <HAL_RCC_OscConfig+0x6c>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d102      	bne.n	8004da8 <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	f000 be9a 	b.w	8005adc <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dac:	4b86      	ldr	r3, [pc, #536]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d004      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x86>
 8004db8:	4b83      	ldr	r3, [pc, #524]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004dc0:	e005      	b.n	8004dce <HAL_RCC_OscConfig+0x92>
 8004dc2:	4b81      	ldr	r3, [pc, #516]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004dc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004dc8:	041b      	lsls	r3, r3, #16
 8004dca:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d255      	bcs.n	8004e7e <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10a      	bne.n	8004dee <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f001 f9d3 	bl	8006188 <RCC_SetFlashLatencyFromMSIRange>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d002      	beq.n	8004dee <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	f000 be77 	b.w	8005adc <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004dee:	4b76      	ldr	r3, [pc, #472]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	4a75      	ldr	r2, [pc, #468]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004df4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004df8:	6093      	str	r3, [r2, #8]
 8004dfa:	4b73      	ldr	r3, [pc, #460]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	4970      	ldr	r1, [pc, #448]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e10:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004e14:	d309      	bcc.n	8004e2a <HAL_RCC_OscConfig+0xee>
 8004e16:	4b6c      	ldr	r3, [pc, #432]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	f023 021f 	bic.w	r2, r3, #31
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	4969      	ldr	r1, [pc, #420]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	60cb      	str	r3, [r1, #12]
 8004e28:	e07e      	b.n	8004f28 <HAL_RCC_OscConfig+0x1ec>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	da0a      	bge.n	8004e48 <HAL_RCC_OscConfig+0x10c>
 8004e32:	4b65      	ldr	r3, [pc, #404]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	015b      	lsls	r3, r3, #5
 8004e40:	4961      	ldr	r1, [pc, #388]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	60cb      	str	r3, [r1, #12]
 8004e46:	e06f      	b.n	8004f28 <HAL_RCC_OscConfig+0x1ec>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e50:	d30a      	bcc.n	8004e68 <HAL_RCC_OscConfig+0x12c>
 8004e52:	4b5d      	ldr	r3, [pc, #372]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	029b      	lsls	r3, r3, #10
 8004e60:	4959      	ldr	r1, [pc, #356]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	60cb      	str	r3, [r1, #12]
 8004e66:	e05f      	b.n	8004f28 <HAL_RCC_OscConfig+0x1ec>
 8004e68:	4b57      	ldr	r3, [pc, #348]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004e6a:	68db      	ldr	r3, [r3, #12]
 8004e6c:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a1b      	ldr	r3, [r3, #32]
 8004e74:	03db      	lsls	r3, r3, #15
 8004e76:	4954      	ldr	r1, [pc, #336]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	60cb      	str	r3, [r1, #12]
 8004e7c:	e054      	b.n	8004f28 <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004e7e:	4b52      	ldr	r3, [pc, #328]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	4a51      	ldr	r2, [pc, #324]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004e84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e88:	6093      	str	r3, [r2, #8]
 8004e8a:	4b4f      	ldr	r3, [pc, #316]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e96:	494c      	ldr	r1, [pc, #304]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea0:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004ea4:	d309      	bcc.n	8004eba <HAL_RCC_OscConfig+0x17e>
 8004ea6:	4b48      	ldr	r3, [pc, #288]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f023 021f 	bic.w	r2, r3, #31
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a1b      	ldr	r3, [r3, #32]
 8004eb2:	4945      	ldr	r1, [pc, #276]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	60cb      	str	r3, [r1, #12]
 8004eb8:	e028      	b.n	8004f0c <HAL_RCC_OscConfig+0x1d0>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	da0a      	bge.n	8004ed8 <HAL_RCC_OscConfig+0x19c>
 8004ec2:	4b41      	ldr	r3, [pc, #260]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004ec4:	68db      	ldr	r3, [r3, #12]
 8004ec6:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	015b      	lsls	r3, r3, #5
 8004ed0:	493d      	ldr	r1, [pc, #244]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	60cb      	str	r3, [r1, #12]
 8004ed6:	e019      	b.n	8004f0c <HAL_RCC_OscConfig+0x1d0>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ee0:	d30a      	bcc.n	8004ef8 <HAL_RCC_OscConfig+0x1bc>
 8004ee2:	4b39      	ldr	r3, [pc, #228]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	029b      	lsls	r3, r3, #10
 8004ef0:	4935      	ldr	r1, [pc, #212]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	60cb      	str	r3, [r1, #12]
 8004ef6:	e009      	b.n	8004f0c <HAL_RCC_OscConfig+0x1d0>
 8004ef8:	4b33      	ldr	r3, [pc, #204]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a1b      	ldr	r3, [r3, #32]
 8004f04:	03db      	lsls	r3, r3, #15
 8004f06:	4930      	ldr	r1, [pc, #192]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d10a      	bne.n	8004f28 <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	4618      	mov	r0, r3
 8004f18:	f001 f936 	bl	8006188 <RCC_SetFlashLatencyFromMSIRange>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d002      	beq.n	8004f28 <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	f000 bdda 	b.w	8005adc <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004f28:	f001 f8d8 	bl	80060dc <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004f2c:	4b27      	ldr	r3, [pc, #156]	; (8004fcc <HAL_RCC_OscConfig+0x290>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f7fd fe8d 	bl	8002c50 <HAL_InitTick>
 8004f36:	4603      	mov	r3, r0
 8004f38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8004f3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	f000 808a 	beq.w	800505a <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 8004f46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f4a:	f000 bdc7 	b.w	8005adc <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	69db      	ldr	r3, [r3, #28]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d066      	beq.n	8005024 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004f56:	4b1c      	ldr	r3, [pc, #112]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a1b      	ldr	r2, [pc, #108]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004f5c:	f043 0301 	orr.w	r3, r3, #1
 8004f60:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004f62:	f7fd febf 	bl	8002ce4 <HAL_GetTick>
 8004f66:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004f68:	e009      	b.n	8004f7e <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f6a:	f7fd febb 	bl	8002ce4 <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b02      	cmp	r3, #2
 8004f76:	d902      	bls.n	8004f7e <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	f000 bdaf 	b.w	8005adc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004f7e:	4b12      	ldr	r3, [pc, #72]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f003 0304 	and.w	r3, r3, #4
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0ef      	beq.n	8004f6a <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004f8a:	4b0f      	ldr	r3, [pc, #60]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	4a0e      	ldr	r2, [pc, #56]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004f90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f94:	6093      	str	r3, [r2, #8]
 8004f96:	4b0c      	ldr	r3, [pc, #48]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	4909      	ldr	r1, [pc, #36]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fac:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004fb0:	d30e      	bcc.n	8004fd0 <HAL_RCC_OscConfig+0x294>
 8004fb2:	4b05      	ldr	r3, [pc, #20]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	f023 021f 	bic.w	r2, r3, #31
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	4902      	ldr	r1, [pc, #8]	; (8004fc8 <HAL_RCC_OscConfig+0x28c>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	60cb      	str	r3, [r1, #12]
 8004fc4:	e04a      	b.n	800505c <HAL_RCC_OscConfig+0x320>
 8004fc6:	bf00      	nop
 8004fc8:	46020c00 	.word	0x46020c00
 8004fcc:	20000004 	.word	0x20000004
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	da0a      	bge.n	8004fee <HAL_RCC_OscConfig+0x2b2>
 8004fd8:	4b9b      	ldr	r3, [pc, #620]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	015b      	lsls	r3, r3, #5
 8004fe6:	4998      	ldr	r1, [pc, #608]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	60cb      	str	r3, [r1, #12]
 8004fec:	e036      	b.n	800505c <HAL_RCC_OscConfig+0x320>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ff6:	d30a      	bcc.n	800500e <HAL_RCC_OscConfig+0x2d2>
 8004ff8:	4b93      	ldr	r3, [pc, #588]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6a1b      	ldr	r3, [r3, #32]
 8005004:	029b      	lsls	r3, r3, #10
 8005006:	4990      	ldr	r1, [pc, #576]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 8005008:	4313      	orrs	r3, r2
 800500a:	60cb      	str	r3, [r1, #12]
 800500c:	e026      	b.n	800505c <HAL_RCC_OscConfig+0x320>
 800500e:	4b8e      	ldr	r3, [pc, #568]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 8005010:	68db      	ldr	r3, [r3, #12]
 8005012:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	03db      	lsls	r3, r3, #15
 800501c:	498a      	ldr	r1, [pc, #552]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 800501e:	4313      	orrs	r3, r2
 8005020:	60cb      	str	r3, [r1, #12]
 8005022:	e01b      	b.n	800505c <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8005024:	4b88      	ldr	r3, [pc, #544]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a87      	ldr	r2, [pc, #540]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 800502a:	f023 0301 	bic.w	r3, r3, #1
 800502e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005030:	f7fd fe58 	bl	8002ce4 <HAL_GetTick>
 8005034:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005036:	e009      	b.n	800504c <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005038:	f7fd fe54 	bl	8002ce4 <HAL_GetTick>
 800503c:	4602      	mov	r2, r0
 800503e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005040:	1ad3      	subs	r3, r2, r3
 8005042:	2b02      	cmp	r3, #2
 8005044:	d902      	bls.n	800504c <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 8005046:	2303      	movs	r3, #3
 8005048:	f000 bd48 	b.w	8005adc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 800504c:	4b7e      	ldr	r3, [pc, #504]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0304 	and.w	r3, r3, #4
 8005054:	2b00      	cmp	r3, #0
 8005056:	d1ef      	bne.n	8005038 <HAL_RCC_OscConfig+0x2fc>
 8005058:	e000      	b.n	800505c <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800505a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	f000 8094 	beq.w	8005192 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800506a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506c:	2b08      	cmp	r3, #8
 800506e:	d005      	beq.n	800507c <HAL_RCC_OscConfig+0x340>
 8005070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005072:	2b0c      	cmp	r3, #12
 8005074:	d110      	bne.n	8005098 <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005078:	2b03      	cmp	r3, #3
 800507a:	d10d      	bne.n	8005098 <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800507c:	4b72      	ldr	r3, [pc, #456]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005084:	2b00      	cmp	r3, #0
 8005086:	f000 8083 	beq.w	8005190 <HAL_RCC_OscConfig+0x454>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d17e      	bne.n	8005190 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	f000 bd22 	b.w	8005adc <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050a0:	d106      	bne.n	80050b0 <HAL_RCC_OscConfig+0x374>
 80050a2:	4b69      	ldr	r3, [pc, #420]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a68      	ldr	r2, [pc, #416]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 80050a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ac:	6013      	str	r3, [r2, #0]
 80050ae:	e041      	b.n	8005134 <HAL_RCC_OscConfig+0x3f8>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050b8:	d112      	bne.n	80050e0 <HAL_RCC_OscConfig+0x3a4>
 80050ba:	4b63      	ldr	r3, [pc, #396]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a62      	ldr	r2, [pc, #392]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 80050c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050c4:	6013      	str	r3, [r2, #0]
 80050c6:	4b60      	ldr	r3, [pc, #384]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a5f      	ldr	r2, [pc, #380]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 80050cc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80050d0:	6013      	str	r3, [r2, #0]
 80050d2:	4b5d      	ldr	r3, [pc, #372]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a5c      	ldr	r2, [pc, #368]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 80050d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050dc:	6013      	str	r3, [r2, #0]
 80050de:	e029      	b.n	8005134 <HAL_RCC_OscConfig+0x3f8>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80050e8:	d112      	bne.n	8005110 <HAL_RCC_OscConfig+0x3d4>
 80050ea:	4b57      	ldr	r3, [pc, #348]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a56      	ldr	r2, [pc, #344]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 80050f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050f4:	6013      	str	r3, [r2, #0]
 80050f6:	4b54      	ldr	r3, [pc, #336]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a53      	ldr	r2, [pc, #332]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 80050fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005100:	6013      	str	r3, [r2, #0]
 8005102:	4b51      	ldr	r3, [pc, #324]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a50      	ldr	r2, [pc, #320]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 8005108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	e011      	b.n	8005134 <HAL_RCC_OscConfig+0x3f8>
 8005110:	4b4d      	ldr	r3, [pc, #308]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a4c      	ldr	r2, [pc, #304]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 8005116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800511a:	6013      	str	r3, [r2, #0]
 800511c:	4b4a      	ldr	r3, [pc, #296]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a49      	ldr	r2, [pc, #292]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 8005122:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005126:	6013      	str	r3, [r2, #0]
 8005128:	4b47      	ldr	r3, [pc, #284]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a46      	ldr	r2, [pc, #280]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 800512e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d014      	beq.n	8005166 <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 800513c:	f7fd fdd2 	bl	8002ce4 <HAL_GetTick>
 8005140:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005142:	e009      	b.n	8005158 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005144:	f7fd fdce 	bl	8002ce4 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b64      	cmp	r3, #100	; 0x64
 8005150:	d902      	bls.n	8005158 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	f000 bcc2 	b.w	8005adc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005158:	4b3b      	ldr	r3, [pc, #236]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d0ef      	beq.n	8005144 <HAL_RCC_OscConfig+0x408>
 8005164:	e015      	b.n	8005192 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8005166:	f7fd fdbd 	bl	8002ce4 <HAL_GetTick>
 800516a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800516c:	e009      	b.n	8005182 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800516e:	f7fd fdb9 	bl	8002ce4 <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b64      	cmp	r3, #100	; 0x64
 800517a:	d902      	bls.n	8005182 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	f000 bcad 	b.w	8005adc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005182:	4b31      	ldr	r3, [pc, #196]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1ef      	bne.n	800516e <HAL_RCC_OscConfig+0x432>
 800518e:	e000      	b.n	8005192 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d066      	beq.n	800526c <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800519e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a0:	2b04      	cmp	r3, #4
 80051a2:	d005      	beq.n	80051b0 <HAL_RCC_OscConfig+0x474>
 80051a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a6:	2b0c      	cmp	r3, #12
 80051a8:	d11a      	bne.n	80051e0 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80051aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d117      	bne.n	80051e0 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051b0:	4b25      	ldr	r3, [pc, #148]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d006      	beq.n	80051ca <HAL_RCC_OscConfig+0x48e>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d102      	bne.n	80051ca <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	f000 bc89 	b.w	8005adc <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80051ca:	4b1f      	ldr	r3, [pc, #124]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 80051cc:	691b      	ldr	r3, [r3, #16]
 80051ce:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	041b      	lsls	r3, r3, #16
 80051d8:	491b      	ldr	r1, [pc, #108]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051de:	e045      	b.n	800526c <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d024      	beq.n	8005232 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80051e8:	4b17      	ldr	r3, [pc, #92]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a16      	ldr	r2, [pc, #88]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 80051ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051f2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80051f4:	f7fd fd76 	bl	8002ce4 <HAL_GetTick>
 80051f8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051fa:	e009      	b.n	8005210 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80051fc:	f7fd fd72 	bl	8002ce4 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d902      	bls.n	8005210 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	f000 bc66 	b.w	8005adc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005210:	4b0d      	ldr	r3, [pc, #52]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005218:	2b00      	cmp	r3, #0
 800521a:	d0ef      	beq.n	80051fc <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800521c:	4b0a      	ldr	r3, [pc, #40]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	041b      	lsls	r3, r3, #16
 800522a:	4907      	ldr	r1, [pc, #28]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 800522c:	4313      	orrs	r3, r2
 800522e:	610b      	str	r3, [r1, #16]
 8005230:	e01c      	b.n	800526c <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8005232:	4b05      	ldr	r3, [pc, #20]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a04      	ldr	r2, [pc, #16]	; (8005248 <HAL_RCC_OscConfig+0x50c>)
 8005238:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800523c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800523e:	f7fd fd51 	bl	8002ce4 <HAL_GetTick>
 8005242:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005244:	e00c      	b.n	8005260 <HAL_RCC_OscConfig+0x524>
 8005246:	bf00      	nop
 8005248:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800524c:	f7fd fd4a 	bl	8002ce4 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b02      	cmp	r3, #2
 8005258:	d902      	bls.n	8005260 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	f000 bc3e 	b.w	8005adc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005260:	4baf      	ldr	r3, [pc, #700]	; (8005520 <HAL_RCC_OscConfig+0x7e4>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1ef      	bne.n	800524c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 0308 	and.w	r3, r3, #8
 8005274:	2b00      	cmp	r3, #0
 8005276:	f000 80c7 	beq.w	8005408 <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800527a:	2300      	movs	r3, #0
 800527c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005280:	4ba7      	ldr	r3, [pc, #668]	; (8005520 <HAL_RCC_OscConfig+0x7e4>)
 8005282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005286:	f003 0304 	and.w	r3, r3, #4
 800528a:	2b00      	cmp	r3, #0
 800528c:	d111      	bne.n	80052b2 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800528e:	4ba4      	ldr	r3, [pc, #656]	; (8005520 <HAL_RCC_OscConfig+0x7e4>)
 8005290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005294:	4aa2      	ldr	r2, [pc, #648]	; (8005520 <HAL_RCC_OscConfig+0x7e4>)
 8005296:	f043 0304 	orr.w	r3, r3, #4
 800529a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800529e:	4ba0      	ldr	r3, [pc, #640]	; (8005520 <HAL_RCC_OscConfig+0x7e4>)
 80052a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	617b      	str	r3, [r7, #20]
 80052aa:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 80052ac:	2301      	movs	r3, #1
 80052ae:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80052b2:	4b9c      	ldr	r3, [pc, #624]	; (8005524 <HAL_RCC_OscConfig+0x7e8>)
 80052b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d118      	bne.n	80052f0 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80052be:	4b99      	ldr	r3, [pc, #612]	; (8005524 <HAL_RCC_OscConfig+0x7e8>)
 80052c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c2:	4a98      	ldr	r2, [pc, #608]	; (8005524 <HAL_RCC_OscConfig+0x7e8>)
 80052c4:	f043 0301 	orr.w	r3, r3, #1
 80052c8:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052ca:	f7fd fd0b 	bl	8002ce4 <HAL_GetTick>
 80052ce:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80052d0:	e008      	b.n	80052e4 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052d2:	f7fd fd07 	bl	8002ce4 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d901      	bls.n	80052e4 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e3fb      	b.n	8005adc <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80052e4:	4b8f      	ldr	r3, [pc, #572]	; (8005524 <HAL_RCC_OscConfig+0x7e8>)
 80052e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e8:	f003 0301 	and.w	r3, r3, #1
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d0f0      	beq.n	80052d2 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	695b      	ldr	r3, [r3, #20]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d05f      	beq.n	80053b8 <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80052f8:	4b89      	ldr	r3, [pc, #548]	; (8005520 <HAL_RCC_OscConfig+0x7e4>)
 80052fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80052fe:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	699a      	ldr	r2, [r3, #24]
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800530a:	429a      	cmp	r2, r3
 800530c:	d037      	beq.n	800537e <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d006      	beq.n	8005326 <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e3da      	b.n	8005adc <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d01b      	beq.n	8005368 <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 8005330:	4b7b      	ldr	r3, [pc, #492]	; (8005520 <HAL_RCC_OscConfig+0x7e4>)
 8005332:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005336:	4a7a      	ldr	r2, [pc, #488]	; (8005520 <HAL_RCC_OscConfig+0x7e4>)
 8005338:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 800533c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8005340:	f7fd fcd0 	bl	8002ce4 <HAL_GetTick>
 8005344:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005346:	e008      	b.n	800535a <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005348:	f7fd fccc 	bl	8002ce4 <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e3c0      	b.n	8005adc <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 800535a:	4b71      	ldr	r3, [pc, #452]	; (8005520 <HAL_RCC_OscConfig+0x7e4>)
 800535c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005360:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1ef      	bne.n	8005348 <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8005368:	4b6d      	ldr	r3, [pc, #436]	; (8005520 <HAL_RCC_OscConfig+0x7e4>)
 800536a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800536e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	496a      	ldr	r1, [pc, #424]	; (8005520 <HAL_RCC_OscConfig+0x7e4>)
 8005378:	4313      	orrs	r3, r2
 800537a:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 800537e:	4b68      	ldr	r3, [pc, #416]	; (8005520 <HAL_RCC_OscConfig+0x7e4>)
 8005380:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005384:	4a66      	ldr	r2, [pc, #408]	; (8005520 <HAL_RCC_OscConfig+0x7e4>)
 8005386:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800538a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800538e:	f7fd fca9 	bl	8002ce4 <HAL_GetTick>
 8005392:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005394:	e008      	b.n	80053a8 <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005396:	f7fd fca5 	bl	8002ce4 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d901      	bls.n	80053a8 <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e399      	b.n	8005adc <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 80053a8:	4b5d      	ldr	r3, [pc, #372]	; (8005520 <HAL_RCC_OscConfig+0x7e4>)
 80053aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d0ef      	beq.n	8005396 <HAL_RCC_OscConfig+0x65a>
 80053b6:	e01b      	b.n	80053f0 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 80053b8:	4b59      	ldr	r3, [pc, #356]	; (8005520 <HAL_RCC_OscConfig+0x7e4>)
 80053ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053be:	4a58      	ldr	r2, [pc, #352]	; (8005520 <HAL_RCC_OscConfig+0x7e4>)
 80053c0:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80053c4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 80053c8:	f7fd fc8c 	bl	8002ce4 <HAL_GetTick>
 80053cc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80053ce:	e008      	b.n	80053e2 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053d0:	f7fd fc88 	bl	8002ce4 <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e37c      	b.n	8005adc <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80053e2:	4b4f      	ldr	r3, [pc, #316]	; (8005520 <HAL_RCC_OscConfig+0x7e4>)
 80053e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80053e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d1ef      	bne.n	80053d0 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053f0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d107      	bne.n	8005408 <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053f8:	4b49      	ldr	r3, [pc, #292]	; (8005520 <HAL_RCC_OscConfig+0x7e4>)
 80053fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053fe:	4a48      	ldr	r2, [pc, #288]	; (8005520 <HAL_RCC_OscConfig+0x7e4>)
 8005400:	f023 0304 	bic.w	r3, r3, #4
 8005404:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 0304 	and.w	r3, r3, #4
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 8112 	beq.w	800563a <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 8005416:	2300      	movs	r3, #0
 8005418:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800541c:	4b40      	ldr	r3, [pc, #256]	; (8005520 <HAL_RCC_OscConfig+0x7e4>)
 800541e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005422:	f003 0304 	and.w	r3, r3, #4
 8005426:	2b00      	cmp	r3, #0
 8005428:	d111      	bne.n	800544e <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800542a:	4b3d      	ldr	r3, [pc, #244]	; (8005520 <HAL_RCC_OscConfig+0x7e4>)
 800542c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005430:	4a3b      	ldr	r2, [pc, #236]	; (8005520 <HAL_RCC_OscConfig+0x7e4>)
 8005432:	f043 0304 	orr.w	r3, r3, #4
 8005436:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800543a:	4b39      	ldr	r3, [pc, #228]	; (8005520 <HAL_RCC_OscConfig+0x7e4>)
 800543c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005440:	f003 0304 	and.w	r3, r3, #4
 8005444:	613b      	str	r3, [r7, #16]
 8005446:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8005448:	2301      	movs	r3, #1
 800544a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800544e:	4b35      	ldr	r3, [pc, #212]	; (8005524 <HAL_RCC_OscConfig+0x7e8>)
 8005450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b00      	cmp	r3, #0
 8005458:	d118      	bne.n	800548c <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800545a:	4b32      	ldr	r3, [pc, #200]	; (8005524 <HAL_RCC_OscConfig+0x7e8>)
 800545c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545e:	4a31      	ldr	r2, [pc, #196]	; (8005524 <HAL_RCC_OscConfig+0x7e8>)
 8005460:	f043 0301 	orr.w	r3, r3, #1
 8005464:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005466:	f7fd fc3d 	bl	8002ce4 <HAL_GetTick>
 800546a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800546c:	e008      	b.n	8005480 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800546e:	f7fd fc39 	bl	8002ce4 <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d901      	bls.n	8005480 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e32d      	b.n	8005adc <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005480:	4b28      	ldr	r3, [pc, #160]	; (8005524 <HAL_RCC_OscConfig+0x7e8>)
 8005482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	2b00      	cmp	r3, #0
 800548a:	d0f0      	beq.n	800546e <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f003 0301 	and.w	r3, r3, #1
 8005494:	2b00      	cmp	r3, #0
 8005496:	d01f      	beq.n	80054d8 <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	f003 0304 	and.w	r3, r3, #4
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d010      	beq.n	80054c6 <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80054a4:	4b1e      	ldr	r3, [pc, #120]	; (8005520 <HAL_RCC_OscConfig+0x7e4>)
 80054a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054aa:	4a1d      	ldr	r2, [pc, #116]	; (8005520 <HAL_RCC_OscConfig+0x7e4>)
 80054ac:	f043 0304 	orr.w	r3, r3, #4
 80054b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80054b4:	4b1a      	ldr	r3, [pc, #104]	; (8005520 <HAL_RCC_OscConfig+0x7e4>)
 80054b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054ba:	4a19      	ldr	r2, [pc, #100]	; (8005520 <HAL_RCC_OscConfig+0x7e4>)
 80054bc:	f043 0301 	orr.w	r3, r3, #1
 80054c0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80054c4:	e018      	b.n	80054f8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80054c6:	4b16      	ldr	r3, [pc, #88]	; (8005520 <HAL_RCC_OscConfig+0x7e4>)
 80054c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054cc:	4a14      	ldr	r2, [pc, #80]	; (8005520 <HAL_RCC_OscConfig+0x7e4>)
 80054ce:	f043 0301 	orr.w	r3, r3, #1
 80054d2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80054d6:	e00f      	b.n	80054f8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80054d8:	4b11      	ldr	r3, [pc, #68]	; (8005520 <HAL_RCC_OscConfig+0x7e4>)
 80054da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054de:	4a10      	ldr	r2, [pc, #64]	; (8005520 <HAL_RCC_OscConfig+0x7e4>)
 80054e0:	f023 0301 	bic.w	r3, r3, #1
 80054e4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80054e8:	4b0d      	ldr	r3, [pc, #52]	; (8005520 <HAL_RCC_OscConfig+0x7e4>)
 80054ea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80054ee:	4a0c      	ldr	r2, [pc, #48]	; (8005520 <HAL_RCC_OscConfig+0x7e4>)
 80054f0:	f023 0304 	bic.w	r3, r3, #4
 80054f4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d058      	beq.n	80055b2 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 8005500:	f7fd fbf0 	bl	8002ce4 <HAL_GetTick>
 8005504:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005506:	e00f      	b.n	8005528 <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005508:	f7fd fbec 	bl	8002ce4 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	f241 3288 	movw	r2, #5000	; 0x1388
 8005516:	4293      	cmp	r3, r2
 8005518:	d906      	bls.n	8005528 <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 800551a:	2303      	movs	r3, #3
 800551c:	e2de      	b.n	8005adc <HAL_RCC_OscConfig+0xda0>
 800551e:	bf00      	nop
 8005520:	46020c00 	.word	0x46020c00
 8005524:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005528:	4b9c      	ldr	r3, [pc, #624]	; (800579c <HAL_RCC_OscConfig+0xa60>)
 800552a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d0e8      	beq.n	8005508 <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553e:	2b00      	cmp	r3, #0
 8005540:	d01b      	beq.n	800557a <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005542:	4b96      	ldr	r3, [pc, #600]	; (800579c <HAL_RCC_OscConfig+0xa60>)
 8005544:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005548:	4a94      	ldr	r2, [pc, #592]	; (800579c <HAL_RCC_OscConfig+0xa60>)
 800554a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800554e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005552:	e00a      	b.n	800556a <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005554:	f7fd fbc6 	bl	8002ce4 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005562:	4293      	cmp	r3, r2
 8005564:	d901      	bls.n	800556a <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 8005566:	2303      	movs	r3, #3
 8005568:	e2b8      	b.n	8005adc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800556a:	4b8c      	ldr	r3, [pc, #560]	; (800579c <HAL_RCC_OscConfig+0xa60>)
 800556c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005570:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005574:	2b00      	cmp	r3, #0
 8005576:	d0ed      	beq.n	8005554 <HAL_RCC_OscConfig+0x818>
 8005578:	e053      	b.n	8005622 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800557a:	4b88      	ldr	r3, [pc, #544]	; (800579c <HAL_RCC_OscConfig+0xa60>)
 800557c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005580:	4a86      	ldr	r2, [pc, #536]	; (800579c <HAL_RCC_OscConfig+0xa60>)
 8005582:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005586:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800558a:	e00a      	b.n	80055a2 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800558c:	f7fd fbaa 	bl	8002ce4 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	f241 3288 	movw	r2, #5000	; 0x1388
 800559a:	4293      	cmp	r3, r2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e29c      	b.n	8005adc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80055a2:	4b7e      	ldr	r3, [pc, #504]	; (800579c <HAL_RCC_OscConfig+0xa60>)
 80055a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1ed      	bne.n	800558c <HAL_RCC_OscConfig+0x850>
 80055b0:	e037      	b.n	8005622 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 80055b2:	f7fd fb97 	bl	8002ce4 <HAL_GetTick>
 80055b6:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055b8:	e00a      	b.n	80055d0 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ba:	f7fd fb93 	bl	8002ce4 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d901      	bls.n	80055d0 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e285      	b.n	8005adc <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80055d0:	4b72      	ldr	r3, [pc, #456]	; (800579c <HAL_RCC_OscConfig+0xa60>)
 80055d2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1ed      	bne.n	80055ba <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80055de:	4b6f      	ldr	r3, [pc, #444]	; (800579c <HAL_RCC_OscConfig+0xa60>)
 80055e0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d01a      	beq.n	8005622 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80055ec:	4b6b      	ldr	r3, [pc, #428]	; (800579c <HAL_RCC_OscConfig+0xa60>)
 80055ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80055f2:	4a6a      	ldr	r2, [pc, #424]	; (800579c <HAL_RCC_OscConfig+0xa60>)
 80055f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055f8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80055fc:	e00a      	b.n	8005614 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055fe:	f7fd fb71 	bl	8002ce4 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	f241 3288 	movw	r2, #5000	; 0x1388
 800560c:	4293      	cmp	r3, r2
 800560e:	d901      	bls.n	8005614 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 8005610:	2303      	movs	r3, #3
 8005612:	e263      	b.n	8005adc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005614:	4b61      	ldr	r3, [pc, #388]	; (800579c <HAL_RCC_OscConfig+0xa60>)
 8005616:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800561a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800561e:	2b00      	cmp	r3, #0
 8005620:	d1ed      	bne.n	80055fe <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005622:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005626:	2b01      	cmp	r3, #1
 8005628:	d107      	bne.n	800563a <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800562a:	4b5c      	ldr	r3, [pc, #368]	; (800579c <HAL_RCC_OscConfig+0xa60>)
 800562c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005630:	4a5a      	ldr	r2, [pc, #360]	; (800579c <HAL_RCC_OscConfig+0xa60>)
 8005632:	f023 0304 	bic.w	r3, r3, #4
 8005636:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0320 	and.w	r3, r3, #32
 8005642:	2b00      	cmp	r3, #0
 8005644:	d036      	beq.n	80056b4 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800564a:	2b00      	cmp	r3, #0
 800564c:	d019      	beq.n	8005682 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 800564e:	4b53      	ldr	r3, [pc, #332]	; (800579c <HAL_RCC_OscConfig+0xa60>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a52      	ldr	r2, [pc, #328]	; (800579c <HAL_RCC_OscConfig+0xa60>)
 8005654:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005658:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800565a:	f7fd fb43 	bl	8002ce4 <HAL_GetTick>
 800565e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005660:	e008      	b.n	8005674 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005662:	f7fd fb3f 	bl	8002ce4 <HAL_GetTick>
 8005666:	4602      	mov	r2, r0
 8005668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	2b02      	cmp	r3, #2
 800566e:	d901      	bls.n	8005674 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8005670:	2303      	movs	r3, #3
 8005672:	e233      	b.n	8005adc <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005674:	4b49      	ldr	r3, [pc, #292]	; (800579c <HAL_RCC_OscConfig+0xa60>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d0f0      	beq.n	8005662 <HAL_RCC_OscConfig+0x926>
 8005680:	e018      	b.n	80056b4 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8005682:	4b46      	ldr	r3, [pc, #280]	; (800579c <HAL_RCC_OscConfig+0xa60>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a45      	ldr	r2, [pc, #276]	; (800579c <HAL_RCC_OscConfig+0xa60>)
 8005688:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800568c:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 800568e:	f7fd fb29 	bl	8002ce4 <HAL_GetTick>
 8005692:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005694:	e008      	b.n	80056a8 <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005696:	f7fd fb25 	bl	8002ce4 <HAL_GetTick>
 800569a:	4602      	mov	r2, r0
 800569c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d901      	bls.n	80056a8 <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 80056a4:	2303      	movs	r3, #3
 80056a6:	e219      	b.n	8005adc <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80056a8:	4b3c      	ldr	r3, [pc, #240]	; (800579c <HAL_RCC_OscConfig+0xa60>)
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1f0      	bne.n	8005696 <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d036      	beq.n	800572e <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d019      	beq.n	80056fc <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 80056c8:	4b34      	ldr	r3, [pc, #208]	; (800579c <HAL_RCC_OscConfig+0xa60>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a33      	ldr	r2, [pc, #204]	; (800579c <HAL_RCC_OscConfig+0xa60>)
 80056ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056d2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80056d4:	f7fd fb06 	bl	8002ce4 <HAL_GetTick>
 80056d8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80056da:	e008      	b.n	80056ee <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 80056dc:	f7fd fb02 	bl	8002ce4 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e1f6      	b.n	8005adc <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 80056ee:	4b2b      	ldr	r3, [pc, #172]	; (800579c <HAL_RCC_OscConfig+0xa60>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d0f0      	beq.n	80056dc <HAL_RCC_OscConfig+0x9a0>
 80056fa:	e018      	b.n	800572e <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 80056fc:	4b27      	ldr	r3, [pc, #156]	; (800579c <HAL_RCC_OscConfig+0xa60>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a26      	ldr	r2, [pc, #152]	; (800579c <HAL_RCC_OscConfig+0xa60>)
 8005702:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005706:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005708:	f7fd faec 	bl	8002ce4 <HAL_GetTick>
 800570c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 800570e:	e008      	b.n	8005722 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005710:	f7fd fae8 	bl	8002ce4 <HAL_GetTick>
 8005714:	4602      	mov	r2, r0
 8005716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	2b02      	cmp	r3, #2
 800571c:	d901      	bls.n	8005722 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	e1dc      	b.n	8005adc <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005722:	4b1e      	ldr	r3, [pc, #120]	; (800579c <HAL_RCC_OscConfig+0xa60>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1f0      	bne.n	8005710 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005736:	2b00      	cmp	r3, #0
 8005738:	d07f      	beq.n	800583a <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800573e:	2b00      	cmp	r3, #0
 8005740:	d062      	beq.n	8005808 <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8005742:	4b16      	ldr	r3, [pc, #88]	; (800579c <HAL_RCC_OscConfig+0xa60>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	4a15      	ldr	r2, [pc, #84]	; (800579c <HAL_RCC_OscConfig+0xa60>)
 8005748:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800574c:	6093      	str	r3, [r2, #8]
 800574e:	4b13      	ldr	r3, [pc, #76]	; (800579c <HAL_RCC_OscConfig+0xa60>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575a:	4910      	ldr	r1, [pc, #64]	; (800579c <HAL_RCC_OscConfig+0xa60>)
 800575c:	4313      	orrs	r3, r2
 800575e:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005768:	d309      	bcc.n	800577e <HAL_RCC_OscConfig+0xa42>
 800576a:	4b0c      	ldr	r3, [pc, #48]	; (800579c <HAL_RCC_OscConfig+0xa60>)
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f023 021f 	bic.w	r2, r3, #31
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	4909      	ldr	r1, [pc, #36]	; (800579c <HAL_RCC_OscConfig+0xa60>)
 8005778:	4313      	orrs	r3, r2
 800577a:	60cb      	str	r3, [r1, #12]
 800577c:	e02a      	b.n	80057d4 <HAL_RCC_OscConfig+0xa98>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	2b00      	cmp	r3, #0
 8005784:	da0c      	bge.n	80057a0 <HAL_RCC_OscConfig+0xa64>
 8005786:	4b05      	ldr	r3, [pc, #20]	; (800579c <HAL_RCC_OscConfig+0xa60>)
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	015b      	lsls	r3, r3, #5
 8005794:	4901      	ldr	r1, [pc, #4]	; (800579c <HAL_RCC_OscConfig+0xa60>)
 8005796:	4313      	orrs	r3, r2
 8005798:	60cb      	str	r3, [r1, #12]
 800579a:	e01b      	b.n	80057d4 <HAL_RCC_OscConfig+0xa98>
 800579c:	46020c00 	.word	0x46020c00
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a8:	d30a      	bcc.n	80057c0 <HAL_RCC_OscConfig+0xa84>
 80057aa:	4ba5      	ldr	r3, [pc, #660]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 80057ac:	68db      	ldr	r3, [r3, #12]
 80057ae:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a1b      	ldr	r3, [r3, #32]
 80057b6:	029b      	lsls	r3, r3, #10
 80057b8:	49a1      	ldr	r1, [pc, #644]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	60cb      	str	r3, [r1, #12]
 80057be:	e009      	b.n	80057d4 <HAL_RCC_OscConfig+0xa98>
 80057c0:	4b9f      	ldr	r3, [pc, #636]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	03db      	lsls	r3, r3, #15
 80057ce:	499c      	ldr	r1, [pc, #624]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80057d4:	4b9a      	ldr	r3, [pc, #616]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a99      	ldr	r2, [pc, #612]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 80057da:	f043 0310 	orr.w	r3, r3, #16
 80057de:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80057e0:	f7fd fa80 	bl	8002ce4 <HAL_GetTick>
 80057e4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80057e6:	e008      	b.n	80057fa <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80057e8:	f7fd fa7c 	bl	8002ce4 <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	2b02      	cmp	r3, #2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e170      	b.n	8005adc <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80057fa:	4b91      	ldr	r3, [pc, #580]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0320 	and.w	r3, r3, #32
 8005802:	2b00      	cmp	r3, #0
 8005804:	d0f0      	beq.n	80057e8 <HAL_RCC_OscConfig+0xaac>
 8005806:	e018      	b.n	800583a <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8005808:	4b8d      	ldr	r3, [pc, #564]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a8c      	ldr	r2, [pc, #560]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 800580e:	f023 0310 	bic.w	r3, r3, #16
 8005812:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005814:	f7fd fa66 	bl	8002ce4 <HAL_GetTick>
 8005818:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800581a:	e008      	b.n	800582e <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800581c:	f7fd fa62 	bl	8002ce4 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b02      	cmp	r3, #2
 8005828:	d901      	bls.n	800582e <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 800582a:	2303      	movs	r3, #3
 800582c:	e156      	b.n	8005adc <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 800582e:	4b84      	ldr	r3, [pc, #528]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0320 	and.w	r3, r3, #32
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1f0      	bne.n	800581c <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 814b 	beq.w	8005ada <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 8005844:	2300      	movs	r3, #0
 8005846:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800584a:	4b7d      	ldr	r3, [pc, #500]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 800584c:	69db      	ldr	r3, [r3, #28]
 800584e:	f003 030c 	and.w	r3, r3, #12
 8005852:	2b0c      	cmp	r3, #12
 8005854:	f000 80fa 	beq.w	8005a4c <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585c:	2b02      	cmp	r3, #2
 800585e:	f040 80cc 	bne.w	80059fa <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8005862:	4b77      	ldr	r3, [pc, #476]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a76      	ldr	r2, [pc, #472]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 8005868:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800586c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800586e:	f7fd fa39 	bl	8002ce4 <HAL_GetTick>
 8005872:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005874:	e008      	b.n	8005888 <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005876:	f7fd fa35 	bl	8002ce4 <HAL_GetTick>
 800587a:	4602      	mov	r2, r0
 800587c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587e:	1ad3      	subs	r3, r2, r3
 8005880:	2b02      	cmp	r3, #2
 8005882:	d901      	bls.n	8005888 <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 8005884:	2303      	movs	r3, #3
 8005886:	e129      	b.n	8005adc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005888:	4b6d      	ldr	r3, [pc, #436]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1f0      	bne.n	8005876 <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005894:	4b6a      	ldr	r3, [pc, #424]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 8005896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800589a:	f003 0304 	and.w	r3, r3, #4
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d111      	bne.n	80058c6 <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 80058a2:	4b67      	ldr	r3, [pc, #412]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 80058a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058a8:	4a65      	ldr	r2, [pc, #404]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 80058aa:	f043 0304 	orr.w	r3, r3, #4
 80058ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80058b2:	4b63      	ldr	r3, [pc, #396]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 80058b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058b8:	f003 0304 	and.w	r3, r3, #4
 80058bc:	60fb      	str	r3, [r7, #12]
 80058be:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 80058c0:	2301      	movs	r3, #1
 80058c2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 80058c6:	4b5f      	ldr	r3, [pc, #380]	; (8005a44 <HAL_RCC_OscConfig+0xd08>)
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058ce:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80058d2:	d102      	bne.n	80058da <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 80058d4:	2301      	movs	r3, #1
 80058d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80058da:	4b5a      	ldr	r3, [pc, #360]	; (8005a44 <HAL_RCC_OscConfig+0xd08>)
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	4a59      	ldr	r2, [pc, #356]	; (8005a44 <HAL_RCC_OscConfig+0xd08>)
 80058e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058e4:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80058e6:	4b56      	ldr	r3, [pc, #344]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 80058e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80058ee:	f023 0303 	bic.w	r3, r3, #3
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80058fa:	3a01      	subs	r2, #1
 80058fc:	0212      	lsls	r2, r2, #8
 80058fe:	4311      	orrs	r1, r2
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005904:	430a      	orrs	r2, r1
 8005906:	494e      	ldr	r1, [pc, #312]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 8005908:	4313      	orrs	r3, r2
 800590a:	628b      	str	r3, [r1, #40]	; 0x28
 800590c:	4b4c      	ldr	r3, [pc, #304]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 800590e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005910:	4b4d      	ldr	r3, [pc, #308]	; (8005a48 <HAL_RCC_OscConfig+0xd0c>)
 8005912:	4013      	ands	r3, r2
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005918:	3a01      	subs	r2, #1
 800591a:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005922:	3a01      	subs	r2, #1
 8005924:	0252      	lsls	r2, r2, #9
 8005926:	b292      	uxth	r2, r2
 8005928:	4311      	orrs	r1, r2
 800592a:	687a      	ldr	r2, [r7, #4]
 800592c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800592e:	3a01      	subs	r2, #1
 8005930:	0412      	lsls	r2, r2, #16
 8005932:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8005936:	4311      	orrs	r1, r2
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800593c:	3a01      	subs	r2, #1
 800593e:	0612      	lsls	r2, r2, #24
 8005940:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8005944:	430a      	orrs	r2, r1
 8005946:	493e      	ldr	r1, [pc, #248]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 8005948:	4313      	orrs	r3, r2
 800594a:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 800594c:	4b3c      	ldr	r3, [pc, #240]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 800594e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005950:	4a3b      	ldr	r2, [pc, #236]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 8005952:	f023 0310 	bic.w	r3, r3, #16
 8005956:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005958:	4b39      	ldr	r3, [pc, #228]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 800595a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005960:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005964:	687a      	ldr	r2, [r7, #4]
 8005966:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005968:	00d2      	lsls	r2, r2, #3
 800596a:	4935      	ldr	r1, [pc, #212]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 800596c:	4313      	orrs	r3, r2
 800596e:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8005970:	4b33      	ldr	r3, [pc, #204]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 8005972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005974:	4a32      	ldr	r2, [pc, #200]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 8005976:	f043 0310 	orr.w	r3, r3, #16
 800597a:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800597c:	4b30      	ldr	r3, [pc, #192]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 800597e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005980:	f023 020c 	bic.w	r2, r3, #12
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005988:	492d      	ldr	r1, [pc, #180]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 800598a:	4313      	orrs	r3, r2
 800598c:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800598e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005992:	2b01      	cmp	r3, #1
 8005994:	d105      	bne.n	80059a2 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005996:	4b2b      	ldr	r3, [pc, #172]	; (8005a44 <HAL_RCC_OscConfig+0xd08>)
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	4a2a      	ldr	r2, [pc, #168]	; (8005a44 <HAL_RCC_OscConfig+0xd08>)
 800599c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059a0:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 80059a2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d107      	bne.n	80059ba <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 80059aa:	4b25      	ldr	r3, [pc, #148]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 80059ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059b0:	4a23      	ldr	r2, [pc, #140]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 80059b2:	f023 0304 	bic.w	r3, r3, #4
 80059b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80059ba:	4b21      	ldr	r3, [pc, #132]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 80059bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059be:	4a20      	ldr	r2, [pc, #128]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 80059c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059c4:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 80059c6:	4b1e      	ldr	r3, [pc, #120]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a1d      	ldr	r2, [pc, #116]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 80059cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059d0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80059d2:	f7fd f987 	bl	8002ce4 <HAL_GetTick>
 80059d6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80059d8:	e008      	b.n	80059ec <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059da:	f7fd f983 	bl	8002ce4 <HAL_GetTick>
 80059de:	4602      	mov	r2, r0
 80059e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e2:	1ad3      	subs	r3, r2, r3
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d901      	bls.n	80059ec <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e077      	b.n	8005adc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80059ec:	4b14      	ldr	r3, [pc, #80]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d0f0      	beq.n	80059da <HAL_RCC_OscConfig+0xc9e>
 80059f8:	e06f      	b.n	8005ada <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80059fa:	4b11      	ldr	r3, [pc, #68]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a10      	ldr	r2, [pc, #64]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 8005a00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a04:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005a06:	f7fd f96d 	bl	8002ce4 <HAL_GetTick>
 8005a0a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005a0c:	e008      	b.n	8005a20 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a0e:	f7fd f969 	bl	8002ce4 <HAL_GetTick>
 8005a12:	4602      	mov	r2, r0
 8005a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a16:	1ad3      	subs	r3, r2, r3
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d901      	bls.n	8005a20 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e05d      	b.n	8005adc <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8005a20:	4b07      	ldr	r3, [pc, #28]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1f0      	bne.n	8005a0e <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8005a2c:	4b04      	ldr	r3, [pc, #16]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 8005a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a30:	4a03      	ldr	r2, [pc, #12]	; (8005a40 <HAL_RCC_OscConfig+0xd04>)
 8005a32:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8005a36:	f023 0303 	bic.w	r3, r3, #3
 8005a3a:	6293      	str	r3, [r2, #40]	; 0x28
 8005a3c:	e04d      	b.n	8005ada <HAL_RCC_OscConfig+0xd9e>
 8005a3e:	bf00      	nop
 8005a40:	46020c00 	.word	0x46020c00
 8005a44:	46020800 	.word	0x46020800
 8005a48:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8005a4c:	4b25      	ldr	r3, [pc, #148]	; (8005ae4 <HAL_RCC_OscConfig+0xda8>)
 8005a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a50:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005a52:	4b24      	ldr	r3, [pc, #144]	; (8005ae4 <HAL_RCC_OscConfig+0xda8>)
 8005a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a56:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d03a      	beq.n	8005ad6 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	f003 0203 	and.w	r2, r3, #3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	d133      	bne.n	8005ad6 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	0a1b      	lsrs	r3, r3, #8
 8005a72:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a7a:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d12a      	bne.n	8005ad6 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	0b1b      	lsrs	r3, r3, #12
 8005a84:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d122      	bne.n	8005ad6 <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a9a:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d11a      	bne.n	8005ad6 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8005aa0:	69bb      	ldr	r3, [r7, #24]
 8005aa2:	0a5b      	lsrs	r3, r3, #9
 8005aa4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aac:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005aae:	429a      	cmp	r2, r3
 8005ab0:	d111      	bne.n	8005ad6 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	0c1b      	lsrs	r3, r3, #16
 8005ab6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005abe:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d108      	bne.n	8005ad6 <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	0e1b      	lsrs	r3, r3, #24
 8005ac8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad0:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d001      	beq.n	8005ada <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e000      	b.n	8005adc <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3738      	adds	r7, #56	; 0x38
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	46020c00 	.word	0x46020c00

08005ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d101      	bne.n	8005afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e1d9      	b.n	8005eb0 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005afc:	4b9b      	ldr	r3, [pc, #620]	; (8005d6c <HAL_RCC_ClockConfig+0x284>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 030f 	and.w	r3, r3, #15
 8005b04:	683a      	ldr	r2, [r7, #0]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d910      	bls.n	8005b2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b0a:	4b98      	ldr	r3, [pc, #608]	; (8005d6c <HAL_RCC_ClockConfig+0x284>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f023 020f 	bic.w	r2, r3, #15
 8005b12:	4996      	ldr	r1, [pc, #600]	; (8005d6c <HAL_RCC_ClockConfig+0x284>)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b1a:	4b94      	ldr	r3, [pc, #592]	; (8005d6c <HAL_RCC_ClockConfig+0x284>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 030f 	and.w	r3, r3, #15
 8005b22:	683a      	ldr	r2, [r7, #0]
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d001      	beq.n	8005b2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e1c1      	b.n	8005eb0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0310 	and.w	r3, r3, #16
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d010      	beq.n	8005b5a <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	695a      	ldr	r2, [r3, #20]
 8005b3c:	4b8c      	ldr	r3, [pc, #560]	; (8005d70 <HAL_RCC_ClockConfig+0x288>)
 8005b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d908      	bls.n	8005b5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8005b48:	4b89      	ldr	r3, [pc, #548]	; (8005d70 <HAL_RCC_ClockConfig+0x288>)
 8005b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	695b      	ldr	r3, [r3, #20]
 8005b54:	4986      	ldr	r1, [pc, #536]	; (8005d70 <HAL_RCC_ClockConfig+0x288>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0308 	and.w	r3, r3, #8
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d012      	beq.n	8005b8c <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	691a      	ldr	r2, [r3, #16]
 8005b6a:	4b81      	ldr	r3, [pc, #516]	; (8005d70 <HAL_RCC_ClockConfig+0x288>)
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	091b      	lsrs	r3, r3, #4
 8005b70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d909      	bls.n	8005b8c <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005b78:	4b7d      	ldr	r3, [pc, #500]	; (8005d70 <HAL_RCC_ClockConfig+0x288>)
 8005b7a:	6a1b      	ldr	r3, [r3, #32]
 8005b7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	011b      	lsls	r3, r3, #4
 8005b86:	497a      	ldr	r1, [pc, #488]	; (8005d70 <HAL_RCC_ClockConfig+0x288>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 0304 	and.w	r3, r3, #4
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d010      	beq.n	8005bba <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	68da      	ldr	r2, [r3, #12]
 8005b9c:	4b74      	ldr	r3, [pc, #464]	; (8005d70 <HAL_RCC_ClockConfig+0x288>)
 8005b9e:	6a1b      	ldr	r3, [r3, #32]
 8005ba0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d908      	bls.n	8005bba <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005ba8:	4b71      	ldr	r3, [pc, #452]	; (8005d70 <HAL_RCC_ClockConfig+0x288>)
 8005baa:	6a1b      	ldr	r3, [r3, #32]
 8005bac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	496e      	ldr	r1, [pc, #440]	; (8005d70 <HAL_RCC_ClockConfig+0x288>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f003 0302 	and.w	r3, r3, #2
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d010      	beq.n	8005be8 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	689a      	ldr	r2, [r3, #8]
 8005bca:	4b69      	ldr	r3, [pc, #420]	; (8005d70 <HAL_RCC_ClockConfig+0x288>)
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	f003 030f 	and.w	r3, r3, #15
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d908      	bls.n	8005be8 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005bd6:	4b66      	ldr	r3, [pc, #408]	; (8005d70 <HAL_RCC_ClockConfig+0x288>)
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	f023 020f 	bic.w	r2, r3, #15
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	4963      	ldr	r1, [pc, #396]	; (8005d70 <HAL_RCC_ClockConfig+0x288>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 80d2 	beq.w	8005d9a <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	2b03      	cmp	r3, #3
 8005c00:	d143      	bne.n	8005c8a <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c02:	4b5b      	ldr	r3, [pc, #364]	; (8005d70 <HAL_RCC_ClockConfig+0x288>)
 8005c04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c08:	f003 0304 	and.w	r3, r3, #4
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d110      	bne.n	8005c32 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005c10:	4b57      	ldr	r3, [pc, #348]	; (8005d70 <HAL_RCC_ClockConfig+0x288>)
 8005c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c16:	4a56      	ldr	r2, [pc, #344]	; (8005d70 <HAL_RCC_ClockConfig+0x288>)
 8005c18:	f043 0304 	orr.w	r3, r3, #4
 8005c1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005c20:	4b53      	ldr	r3, [pc, #332]	; (8005d70 <HAL_RCC_ClockConfig+0x288>)
 8005c22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c26:	f003 0304 	and.w	r3, r3, #4
 8005c2a:	60bb      	str	r3, [r7, #8]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005c2e:	2301      	movs	r3, #1
 8005c30:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8005c32:	f7fd f857 	bl	8002ce4 <HAL_GetTick>
 8005c36:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8005c38:	4b4e      	ldr	r3, [pc, #312]	; (8005d74 <HAL_RCC_ClockConfig+0x28c>)
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d00f      	beq.n	8005c64 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005c44:	e008      	b.n	8005c58 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8005c46:	f7fd f84d 	bl	8002ce4 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d901      	bls.n	8005c58 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e12b      	b.n	8005eb0 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005c58:	4b46      	ldr	r3, [pc, #280]	; (8005d74 <HAL_RCC_ClockConfig+0x28c>)
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d0f0      	beq.n	8005c46 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005c64:	7dfb      	ldrb	r3, [r7, #23]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d107      	bne.n	8005c7a <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005c6a:	4b41      	ldr	r3, [pc, #260]	; (8005d70 <HAL_RCC_ClockConfig+0x288>)
 8005c6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c70:	4a3f      	ldr	r2, [pc, #252]	; (8005d70 <HAL_RCC_ClockConfig+0x288>)
 8005c72:	f023 0304 	bic.w	r3, r3, #4
 8005c76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8005c7a:	4b3d      	ldr	r3, [pc, #244]	; (8005d70 <HAL_RCC_ClockConfig+0x288>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d121      	bne.n	8005cca <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e112      	b.n	8005eb0 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d107      	bne.n	8005ca2 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c92:	4b37      	ldr	r3, [pc, #220]	; (8005d70 <HAL_RCC_ClockConfig+0x288>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d115      	bne.n	8005cca <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e106      	b.n	8005eb0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d107      	bne.n	8005cba <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005caa:	4b31      	ldr	r3, [pc, #196]	; (8005d70 <HAL_RCC_ClockConfig+0x288>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0304 	and.w	r3, r3, #4
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d109      	bne.n	8005cca <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e0fa      	b.n	8005eb0 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005cba:	4b2d      	ldr	r3, [pc, #180]	; (8005d70 <HAL_RCC_ClockConfig+0x288>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e0f2      	b.n	8005eb0 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 8005cca:	4b29      	ldr	r3, [pc, #164]	; (8005d70 <HAL_RCC_ClockConfig+0x288>)
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	f023 0203 	bic.w	r2, r3, #3
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	4926      	ldr	r1, [pc, #152]	; (8005d70 <HAL_RCC_ClockConfig+0x288>)
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005cdc:	f7fd f802 	bl	8002ce4 <HAL_GetTick>
 8005ce0:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	2b03      	cmp	r3, #3
 8005ce8:	d112      	bne.n	8005d10 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005cea:	e00a      	b.n	8005d02 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cec:	f7fc fffa 	bl	8002ce4 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d901      	bls.n	8005d02 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e0d6      	b.n	8005eb0 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d02:	4b1b      	ldr	r3, [pc, #108]	; (8005d70 <HAL_RCC_ClockConfig+0x288>)
 8005d04:	69db      	ldr	r3, [r3, #28]
 8005d06:	f003 030c 	and.w	r3, r3, #12
 8005d0a:	2b0c      	cmp	r3, #12
 8005d0c:	d1ee      	bne.n	8005cec <HAL_RCC_ClockConfig+0x204>
 8005d0e:	e044      	b.n	8005d9a <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d112      	bne.n	8005d3e <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d18:	e00a      	b.n	8005d30 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d1a:	f7fc ffe3 	bl	8002ce4 <HAL_GetTick>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	1ad3      	subs	r3, r2, r3
 8005d24:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d901      	bls.n	8005d30 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005d2c:	2303      	movs	r3, #3
 8005d2e:	e0bf      	b.n	8005eb0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d30:	4b0f      	ldr	r3, [pc, #60]	; (8005d70 <HAL_RCC_ClockConfig+0x288>)
 8005d32:	69db      	ldr	r3, [r3, #28]
 8005d34:	f003 030c 	and.w	r3, r3, #12
 8005d38:	2b08      	cmp	r3, #8
 8005d3a:	d1ee      	bne.n	8005d1a <HAL_RCC_ClockConfig+0x232>
 8005d3c:	e02d      	b.n	8005d9a <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d123      	bne.n	8005d8e <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005d46:	e00a      	b.n	8005d5e <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d48:	f7fc ffcc 	bl	8002ce4 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d901      	bls.n	8005d5e <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e0a8      	b.n	8005eb0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005d5e:	4b04      	ldr	r3, [pc, #16]	; (8005d70 <HAL_RCC_ClockConfig+0x288>)
 8005d60:	69db      	ldr	r3, [r3, #28]
 8005d62:	f003 030c 	and.w	r3, r3, #12
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d1ee      	bne.n	8005d48 <HAL_RCC_ClockConfig+0x260>
 8005d6a:	e016      	b.n	8005d9a <HAL_RCC_ClockConfig+0x2b2>
 8005d6c:	40022000 	.word	0x40022000
 8005d70:	46020c00 	.word	0x46020c00
 8005d74:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d78:	f7fc ffb4 	bl	8002ce4 <HAL_GetTick>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	1ad3      	subs	r3, r2, r3
 8005d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d901      	bls.n	8005d8e <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e090      	b.n	8005eb0 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d8e:	4b4a      	ldr	r3, [pc, #296]	; (8005eb8 <HAL_RCC_ClockConfig+0x3d0>)
 8005d90:	69db      	ldr	r3, [r3, #28]
 8005d92:	f003 030c 	and.w	r3, r3, #12
 8005d96:	2b04      	cmp	r3, #4
 8005d98:	d1ee      	bne.n	8005d78 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 0302 	and.w	r3, r3, #2
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d010      	beq.n	8005dc8 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	689a      	ldr	r2, [r3, #8]
 8005daa:	4b43      	ldr	r3, [pc, #268]	; (8005eb8 <HAL_RCC_ClockConfig+0x3d0>)
 8005dac:	6a1b      	ldr	r3, [r3, #32]
 8005dae:	f003 030f 	and.w	r3, r3, #15
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d208      	bcs.n	8005dc8 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8005db6:	4b40      	ldr	r3, [pc, #256]	; (8005eb8 <HAL_RCC_ClockConfig+0x3d0>)
 8005db8:	6a1b      	ldr	r3, [r3, #32]
 8005dba:	f023 020f 	bic.w	r2, r3, #15
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	493d      	ldr	r1, [pc, #244]	; (8005eb8 <HAL_RCC_ClockConfig+0x3d0>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005dc8:	4b3c      	ldr	r3, [pc, #240]	; (8005ebc <HAL_RCC_ClockConfig+0x3d4>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 030f 	and.w	r3, r3, #15
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d210      	bcs.n	8005df8 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dd6:	4b39      	ldr	r3, [pc, #228]	; (8005ebc <HAL_RCC_ClockConfig+0x3d4>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f023 020f 	bic.w	r2, r3, #15
 8005dde:	4937      	ldr	r1, [pc, #220]	; (8005ebc <HAL_RCC_ClockConfig+0x3d4>)
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005de6:	4b35      	ldr	r3, [pc, #212]	; (8005ebc <HAL_RCC_ClockConfig+0x3d4>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 030f 	and.w	r3, r3, #15
 8005dee:	683a      	ldr	r2, [r7, #0]
 8005df0:	429a      	cmp	r2, r3
 8005df2:	d001      	beq.n	8005df8 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e05b      	b.n	8005eb0 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0304 	and.w	r3, r3, #4
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d010      	beq.n	8005e26 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68da      	ldr	r2, [r3, #12]
 8005e08:	4b2b      	ldr	r3, [pc, #172]	; (8005eb8 <HAL_RCC_ClockConfig+0x3d0>)
 8005e0a:	6a1b      	ldr	r3, [r3, #32]
 8005e0c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d208      	bcs.n	8005e26 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005e14:	4b28      	ldr	r3, [pc, #160]	; (8005eb8 <HAL_RCC_ClockConfig+0x3d0>)
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	4925      	ldr	r1, [pc, #148]	; (8005eb8 <HAL_RCC_ClockConfig+0x3d0>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0308 	and.w	r3, r3, #8
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d012      	beq.n	8005e58 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	691a      	ldr	r2, [r3, #16]
 8005e36:	4b20      	ldr	r3, [pc, #128]	; (8005eb8 <HAL_RCC_ClockConfig+0x3d0>)
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	091b      	lsrs	r3, r3, #4
 8005e3c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d209      	bcs.n	8005e58 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005e44:	4b1c      	ldr	r3, [pc, #112]	; (8005eb8 <HAL_RCC_ClockConfig+0x3d0>)
 8005e46:	6a1b      	ldr	r3, [r3, #32]
 8005e48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	011b      	lsls	r3, r3, #4
 8005e52:	4919      	ldr	r1, [pc, #100]	; (8005eb8 <HAL_RCC_ClockConfig+0x3d0>)
 8005e54:	4313      	orrs	r3, r2
 8005e56:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0310 	and.w	r3, r3, #16
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d010      	beq.n	8005e86 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	695a      	ldr	r2, [r3, #20]
 8005e68:	4b13      	ldr	r3, [pc, #76]	; (8005eb8 <HAL_RCC_ClockConfig+0x3d0>)
 8005e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d208      	bcs.n	8005e86 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005e74:	4b10      	ldr	r3, [pc, #64]	; (8005eb8 <HAL_RCC_ClockConfig+0x3d0>)
 8005e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	490d      	ldr	r1, [pc, #52]	; (8005eb8 <HAL_RCC_ClockConfig+0x3d0>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005e86:	f000 f821 	bl	8005ecc <HAL_RCC_GetSysClockFreq>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	4b0a      	ldr	r3, [pc, #40]	; (8005eb8 <HAL_RCC_ClockConfig+0x3d0>)
 8005e8e:	6a1b      	ldr	r3, [r3, #32]
 8005e90:	f003 030f 	and.w	r3, r3, #15
 8005e94:	490a      	ldr	r1, [pc, #40]	; (8005ec0 <HAL_RCC_ClockConfig+0x3d8>)
 8005e96:	5ccb      	ldrb	r3, [r1, r3]
 8005e98:	fa22 f303 	lsr.w	r3, r2, r3
 8005e9c:	4a09      	ldr	r2, [pc, #36]	; (8005ec4 <HAL_RCC_ClockConfig+0x3dc>)
 8005e9e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005ea0:	4b09      	ldr	r3, [pc, #36]	; (8005ec8 <HAL_RCC_ClockConfig+0x3e0>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7fc fed3 	bl	8002c50 <HAL_InitTick>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	73fb      	strb	r3, [r7, #15]

  return status;
 8005eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	3718      	adds	r7, #24
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}
 8005eb8:	46020c00 	.word	0x46020c00
 8005ebc:	40022000 	.word	0x40022000
 8005ec0:	0800cd74 	.word	0x0800cd74
 8005ec4:	20000000 	.word	0x20000000
 8005ec8:	20000004 	.word	0x20000004

08005ecc <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b08b      	sub	sp, #44	; 0x2c
 8005ed0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005eda:	4b7b      	ldr	r3, [pc, #492]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	f003 030c 	and.w	r3, r3, #12
 8005ee2:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ee4:	4b78      	ldr	r3, [pc, #480]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee8:	f003 0303 	and.w	r3, r3, #3
 8005eec:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d005      	beq.n	8005f00 <HAL_RCC_GetSysClockFreq+0x34>
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	2b0c      	cmp	r3, #12
 8005ef8:	d121      	bne.n	8005f3e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d11e      	bne.n	8005f3e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8005f00:	4b71      	ldr	r3, [pc, #452]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d107      	bne.n	8005f1c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005f0c:	4b6e      	ldr	r3, [pc, #440]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f0e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005f12:	0b1b      	lsrs	r3, r3, #12
 8005f14:	f003 030f 	and.w	r3, r3, #15
 8005f18:	627b      	str	r3, [r7, #36]	; 0x24
 8005f1a:	e005      	b.n	8005f28 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005f1c:	4b6a      	ldr	r3, [pc, #424]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	0f1b      	lsrs	r3, r3, #28
 8005f22:	f003 030f 	and.w	r3, r3, #15
 8005f26:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005f28:	4a68      	ldr	r2, [pc, #416]	; (80060cc <HAL_RCC_GetSysClockFreq+0x200>)
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f30:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d110      	bne.n	8005f5a <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3a:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005f3c:	e00d      	b.n	8005f5a <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f3e:	4b62      	ldr	r3, [pc, #392]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	f003 030c 	and.w	r3, r3, #12
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	d102      	bne.n	8005f50 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f4a:	4b61      	ldr	r3, [pc, #388]	; (80060d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f4c:	623b      	str	r3, [r7, #32]
 8005f4e:	e004      	b.n	8005f5a <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	2b08      	cmp	r3, #8
 8005f54:	d101      	bne.n	8005f5a <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f56:	4b5e      	ldr	r3, [pc, #376]	; (80060d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f58:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	2b0c      	cmp	r3, #12
 8005f5e:	f040 80ac 	bne.w	80060ba <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005f62:	4b59      	ldr	r3, [pc, #356]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f66:	f003 0303 	and.w	r3, r3, #3
 8005f6a:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005f6c:	4b56      	ldr	r3, [pc, #344]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f70:	0a1b      	lsrs	r3, r3, #8
 8005f72:	f003 030f 	and.w	r3, r3, #15
 8005f76:	3301      	adds	r3, #1
 8005f78:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8005f7a:	4b53      	ldr	r3, [pc, #332]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7e:	091b      	lsrs	r3, r3, #4
 8005f80:	f003 0301 	and.w	r3, r3, #1
 8005f84:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8005f86:	4b50      	ldr	r3, [pc, #320]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005f88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f8a:	08db      	lsrs	r3, r3, #3
 8005f8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	fb02 f303 	mul.w	r3, r2, r3
 8005f96:	ee07 3a90 	vmov	s15, r3
 8005f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f9e:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f000 8086 	beq.w	80060b6 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d003      	beq.n	8005fb8 <HAL_RCC_GetSysClockFreq+0xec>
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	2b03      	cmp	r3, #3
 8005fb4:	d022      	beq.n	8005ffc <HAL_RCC_GetSysClockFreq+0x130>
 8005fb6:	e043      	b.n	8006040 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	ee07 3a90 	vmov	s15, r3
 8005fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fc2:	eddf 6a44 	vldr	s13, [pc, #272]	; 80060d4 <HAL_RCC_GetSysClockFreq+0x208>
 8005fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005fca:	4b3f      	ldr	r3, [pc, #252]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fd2:	ee07 3a90 	vmov	s15, r3
 8005fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005fda:	ed97 6a01 	vldr	s12, [r7, #4]
 8005fde:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80060d8 <HAL_RCC_GetSysClockFreq+0x20c>
 8005fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005fea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ff6:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8005ffa:	e046      	b.n	800608a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	ee07 3a90 	vmov	s15, r3
 8006002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006006:	eddf 6a33 	vldr	s13, [pc, #204]	; 80060d4 <HAL_RCC_GetSysClockFreq+0x208>
 800600a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800600e:	4b2e      	ldr	r3, [pc, #184]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006016:	ee07 3a90 	vmov	s15, r3
 800601a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800601e:	ed97 6a01 	vldr	s12, [r7, #4]
 8006022:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80060d8 <HAL_RCC_GetSysClockFreq+0x20c>
 8006026:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800602a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800602e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006032:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800603a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800603e:	e024      	b.n	800608a <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006042:	ee07 3a90 	vmov	s15, r3
 8006046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	ee07 3a90 	vmov	s15, r3
 8006050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006054:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006058:	4b1b      	ldr	r3, [pc, #108]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800605a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800605c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006060:	ee07 3a90 	vmov	s15, r3
 8006064:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006068:	ed97 6a01 	vldr	s12, [r7, #4]
 800606c:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80060d8 <HAL_RCC_GetSysClockFreq+0x20c>
 8006070:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006074:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006078:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800607c:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006084:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8006088:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800608a:	4b0f      	ldr	r3, [pc, #60]	; (80060c8 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800608c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800608e:	0e1b      	lsrs	r3, r3, #24
 8006090:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006094:	3301      	adds	r3, #1
 8006096:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	ee07 3a90 	vmov	s15, r3
 800609e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80060a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80060a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80060aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80060ae:	ee17 3a90 	vmov	r3, s15
 80060b2:	623b      	str	r3, [r7, #32]
 80060b4:	e001      	b.n	80060ba <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 80060b6:	2300      	movs	r3, #0
 80060b8:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 80060ba:	6a3b      	ldr	r3, [r7, #32]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	372c      	adds	r7, #44	; 0x2c
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr
 80060c8:	46020c00 	.word	0x46020c00
 80060cc:	0800cd8c 	.word	0x0800cd8c
 80060d0:	00f42400 	.word	0x00f42400
 80060d4:	4b742400 	.word	0x4b742400
 80060d8:	46000000 	.word	0x46000000

080060dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80060e0:	f7ff fef4 	bl	8005ecc <HAL_RCC_GetSysClockFreq>
 80060e4:	4602      	mov	r2, r0
 80060e6:	4b07      	ldr	r3, [pc, #28]	; (8006104 <HAL_RCC_GetHCLKFreq+0x28>)
 80060e8:	6a1b      	ldr	r3, [r3, #32]
 80060ea:	f003 030f 	and.w	r3, r3, #15
 80060ee:	4906      	ldr	r1, [pc, #24]	; (8006108 <HAL_RCC_GetHCLKFreq+0x2c>)
 80060f0:	5ccb      	ldrb	r3, [r1, r3]
 80060f2:	fa22 f303 	lsr.w	r3, r2, r3
 80060f6:	4a05      	ldr	r2, [pc, #20]	; (800610c <HAL_RCC_GetHCLKFreq+0x30>)
 80060f8:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80060fa:	4b04      	ldr	r3, [pc, #16]	; (800610c <HAL_RCC_GetHCLKFreq+0x30>)
 80060fc:	681b      	ldr	r3, [r3, #0]
}
 80060fe:	4618      	mov	r0, r3
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	46020c00 	.word	0x46020c00
 8006108:	0800cd74 	.word	0x0800cd74
 800610c:	20000000 	.word	0x20000000

08006110 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8006114:	f7ff ffe2 	bl	80060dc <HAL_RCC_GetHCLKFreq>
 8006118:	4602      	mov	r2, r0
 800611a:	4b05      	ldr	r3, [pc, #20]	; (8006130 <HAL_RCC_GetPCLK1Freq+0x20>)
 800611c:	6a1b      	ldr	r3, [r3, #32]
 800611e:	091b      	lsrs	r3, r3, #4
 8006120:	f003 0307 	and.w	r3, r3, #7
 8006124:	4903      	ldr	r1, [pc, #12]	; (8006134 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006126:	5ccb      	ldrb	r3, [r1, r3]
 8006128:	fa22 f303 	lsr.w	r3, r2, r3
}
 800612c:	4618      	mov	r0, r3
 800612e:	bd80      	pop	{r7, pc}
 8006130:	46020c00 	.word	0x46020c00
 8006134:	0800cd84 	.word	0x0800cd84

08006138 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 800613c:	f7ff ffce 	bl	80060dc <HAL_RCC_GetHCLKFreq>
 8006140:	4602      	mov	r2, r0
 8006142:	4b05      	ldr	r3, [pc, #20]	; (8006158 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	0a1b      	lsrs	r3, r3, #8
 8006148:	f003 0307 	and.w	r3, r3, #7
 800614c:	4903      	ldr	r1, [pc, #12]	; (800615c <HAL_RCC_GetPCLK2Freq+0x24>)
 800614e:	5ccb      	ldrb	r3, [r1, r3]
 8006150:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006154:	4618      	mov	r0, r3
 8006156:	bd80      	pop	{r7, pc}
 8006158:	46020c00 	.word	0x46020c00
 800615c:	0800cd84 	.word	0x0800cd84

08006160 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8006164:	f7ff ffba 	bl	80060dc <HAL_RCC_GetHCLKFreq>
 8006168:	4602      	mov	r2, r0
 800616a:	4b05      	ldr	r3, [pc, #20]	; (8006180 <HAL_RCC_GetPCLK3Freq+0x20>)
 800616c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616e:	091b      	lsrs	r3, r3, #4
 8006170:	f003 0307 	and.w	r3, r3, #7
 8006174:	4903      	ldr	r1, [pc, #12]	; (8006184 <HAL_RCC_GetPCLK3Freq+0x24>)
 8006176:	5ccb      	ldrb	r3, [r1, r3]
 8006178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800617c:	4618      	mov	r0, r3
 800617e:	bd80      	pop	{r7, pc}
 8006180:	46020c00 	.word	0x46020c00
 8006184:	0800cd84 	.word	0x0800cd84

08006188 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006190:	4b3e      	ldr	r3, [pc, #248]	; (800628c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006196:	f003 0304 	and.w	r3, r3, #4
 800619a:	2b00      	cmp	r3, #0
 800619c:	d003      	beq.n	80061a6 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800619e:	f7fe fd4f 	bl	8004c40 <HAL_PWREx_GetVoltageRange>
 80061a2:	6178      	str	r0, [r7, #20]
 80061a4:	e019      	b.n	80061da <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80061a6:	4b39      	ldr	r3, [pc, #228]	; (800628c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80061a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061ac:	4a37      	ldr	r2, [pc, #220]	; (800628c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80061ae:	f043 0304 	orr.w	r3, r3, #4
 80061b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80061b6:	4b35      	ldr	r3, [pc, #212]	; (800628c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80061b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061bc:	f003 0304 	and.w	r3, r3, #4
 80061c0:	60fb      	str	r3, [r7, #12]
 80061c2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80061c4:	f7fe fd3c 	bl	8004c40 <HAL_PWREx_GetVoltageRange>
 80061c8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80061ca:	4b30      	ldr	r3, [pc, #192]	; (800628c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80061cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061d0:	4a2e      	ldr	r2, [pc, #184]	; (800628c <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80061d2:	f023 0304 	bic.w	r3, r3, #4
 80061d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80061da:	697b      	ldr	r3, [r7, #20]
 80061dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80061e0:	d003      	beq.n	80061ea <RCC_SetFlashLatencyFromMSIRange+0x62>
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80061e8:	d109      	bne.n	80061fe <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061f0:	d202      	bcs.n	80061f8 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80061f2:	2301      	movs	r3, #1
 80061f4:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80061f6:	e033      	b.n	8006260 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 80061f8:	2300      	movs	r3, #0
 80061fa:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80061fc:	e030      	b.n	8006260 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006204:	d208      	bcs.n	8006218 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800620c:	d102      	bne.n	8006214 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 800620e:	2303      	movs	r3, #3
 8006210:	613b      	str	r3, [r7, #16]
 8006212:	e025      	b.n	8006260 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8006214:	2301      	movs	r3, #1
 8006216:	e035      	b.n	8006284 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800621e:	d90f      	bls.n	8006240 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8006220:	697b      	ldr	r3, [r7, #20]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d109      	bne.n	800623a <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800622c:	d902      	bls.n	8006234 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 800622e:	2300      	movs	r3, #0
 8006230:	613b      	str	r3, [r7, #16]
 8006232:	e015      	b.n	8006260 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8006234:	2301      	movs	r3, #1
 8006236:	613b      	str	r3, [r7, #16]
 8006238:	e012      	b.n	8006260 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 800623a:	2300      	movs	r3, #0
 800623c:	613b      	str	r3, [r7, #16]
 800623e:	e00f      	b.n	8006260 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006246:	d109      	bne.n	800625c <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006248:	697b      	ldr	r3, [r7, #20]
 800624a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800624e:	d102      	bne.n	8006256 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8006250:	2301      	movs	r3, #1
 8006252:	613b      	str	r3, [r7, #16]
 8006254:	e004      	b.n	8006260 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8006256:	2302      	movs	r3, #2
 8006258:	613b      	str	r3, [r7, #16]
 800625a:	e001      	b.n	8006260 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 800625c:	2301      	movs	r3, #1
 800625e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006260:	4b0b      	ldr	r3, [pc, #44]	; (8006290 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f023 020f 	bic.w	r2, r3, #15
 8006268:	4909      	ldr	r1, [pc, #36]	; (8006290 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800626a:	693b      	ldr	r3, [r7, #16]
 800626c:	4313      	orrs	r3, r2
 800626e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8006270:	4b07      	ldr	r3, [pc, #28]	; (8006290 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 030f 	and.w	r3, r3, #15
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	429a      	cmp	r2, r3
 800627c:	d001      	beq.n	8006282 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e000      	b.n	8006284 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3718      	adds	r7, #24
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	46020c00 	.word	0x46020c00
 8006290:	40022000 	.word	0x40022000

08006294 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006298:	b0ba      	sub	sp, #232	; 0xe8
 800629a:	af00      	add	r7, sp, #0
 800629c:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80062a0:	2300      	movs	r3, #0
 80062a2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80062a6:	2300      	movs	r3, #0
 80062a8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80062ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b4:	f002 0401 	and.w	r4, r2, #1
 80062b8:	2500      	movs	r5, #0
 80062ba:	ea54 0305 	orrs.w	r3, r4, r5
 80062be:	d00b      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80062c0:	4bcb      	ldr	r3, [pc, #812]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062c6:	f023 0103 	bic.w	r1, r3, #3
 80062ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062d0:	4ac7      	ldr	r2, [pc, #796]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062d2:	430b      	orrs	r3, r1
 80062d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e0:	f002 0802 	and.w	r8, r2, #2
 80062e4:	f04f 0900 	mov.w	r9, #0
 80062e8:	ea58 0309 	orrs.w	r3, r8, r9
 80062ec:	d00b      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80062ee:	4bc0      	ldr	r3, [pc, #768]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80062f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80062f4:	f023 010c 	bic.w	r1, r3, #12
 80062f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062fe:	4abc      	ldr	r2, [pc, #752]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006300:	430b      	orrs	r3, r1
 8006302:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006306:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800630a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630e:	f002 0a04 	and.w	sl, r2, #4
 8006312:	f04f 0b00 	mov.w	fp, #0
 8006316:	ea5a 030b 	orrs.w	r3, sl, fp
 800631a:	d00b      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 800631c:	4bb4      	ldr	r3, [pc, #720]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800631e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006322:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006326:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800632a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800632c:	4ab0      	ldr	r2, [pc, #704]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800632e:	430b      	orrs	r3, r1
 8006330:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006334:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633c:	f002 0308 	and.w	r3, r2, #8
 8006340:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006344:	2300      	movs	r3, #0
 8006346:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800634a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800634e:	460b      	mov	r3, r1
 8006350:	4313      	orrs	r3, r2
 8006352:	d00b      	beq.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8006354:	4ba6      	ldr	r3, [pc, #664]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006356:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800635a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800635e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006364:	4aa2      	ldr	r2, [pc, #648]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006366:	430b      	orrs	r3, r1
 8006368:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800636c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006370:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006374:	f002 0310 	and.w	r3, r2, #16
 8006378:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800637c:	2300      	movs	r3, #0
 800637e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006382:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006386:	460b      	mov	r3, r1
 8006388:	4313      	orrs	r3, r2
 800638a:	d00b      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 800638c:	4b98      	ldr	r3, [pc, #608]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800638e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006392:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006396:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800639a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800639c:	4a94      	ldr	r2, [pc, #592]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800639e:	430b      	orrs	r3, r1
 80063a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ac:	f002 0320 	and.w	r3, r2, #32
 80063b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80063b4:	2300      	movs	r3, #0
 80063b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80063ba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80063be:	460b      	mov	r3, r1
 80063c0:	4313      	orrs	r3, r2
 80063c2:	d00b      	beq.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 80063c4:	4b8a      	ldr	r3, [pc, #552]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80063ca:	f023 0107 	bic.w	r1, r3, #7
 80063ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063d4:	4a86      	ldr	r2, [pc, #536]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063d6:	430b      	orrs	r3, r1
 80063d8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80063e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e4:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80063e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063ec:	2300      	movs	r3, #0
 80063ee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80063f2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80063f6:	460b      	mov	r3, r1
 80063f8:	4313      	orrs	r3, r2
 80063fa:	d00b      	beq.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80063fc:	4b7c      	ldr	r3, [pc, #496]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80063fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006402:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8006406:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800640a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800640c:	4a78      	ldr	r2, [pc, #480]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800640e:	430b      	orrs	r3, r1
 8006410:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006414:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641c:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006420:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006424:	2300      	movs	r3, #0
 8006426:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800642a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800642e:	460b      	mov	r3, r1
 8006430:	4313      	orrs	r3, r2
 8006432:	d00b      	beq.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006434:	4b6e      	ldr	r3, [pc, #440]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006436:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800643a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800643e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006444:	4a6a      	ldr	r2, [pc, #424]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006446:	430b      	orrs	r3, r1
 8006448:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800644c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006454:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8006458:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800645c:	2300      	movs	r3, #0
 800645e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006462:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006466:	460b      	mov	r3, r1
 8006468:	4313      	orrs	r3, r2
 800646a:	d00b      	beq.n	8006484 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 800646c:	4b60      	ldr	r3, [pc, #384]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800646e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006472:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006476:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800647a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800647c:	4a5c      	ldr	r2, [pc, #368]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800647e:	430b      	orrs	r3, r1
 8006480:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006484:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006490:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006494:	2300      	movs	r3, #0
 8006496:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800649a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800649e:	460b      	mov	r3, r1
 80064a0:	4313      	orrs	r3, r2
 80064a2:	d00b      	beq.n	80064bc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 80064a4:	4b52      	ldr	r3, [pc, #328]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064aa:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 80064ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064b4:	4a4e      	ldr	r2, [pc, #312]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064b6:	430b      	orrs	r3, r1
 80064b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80064bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c4:	f402 7300 	and.w	r3, r2, #512	; 0x200
 80064c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80064cc:	2300      	movs	r3, #0
 80064ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80064d2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80064d6:	460b      	mov	r3, r1
 80064d8:	4313      	orrs	r3, r2
 80064da:	d00b      	beq.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 80064dc:	4b44      	ldr	r3, [pc, #272]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80064e2:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80064e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064ec:	4a40      	ldr	r2, [pc, #256]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80064ee:	430b      	orrs	r3, r1
 80064f0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80064f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80064f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fc:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006500:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006504:	2300      	movs	r3, #0
 8006506:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800650a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800650e:	460b      	mov	r3, r1
 8006510:	4313      	orrs	r3, r2
 8006512:	d00b      	beq.n	800652c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006514:	4b36      	ldr	r3, [pc, #216]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800651a:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 800651e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006522:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006524:	4a32      	ldr	r2, [pc, #200]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006526:	430b      	orrs	r3, r1
 8006528:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 800652c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006534:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006538:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800653c:	2300      	movs	r3, #0
 800653e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006542:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006546:	460b      	mov	r3, r1
 8006548:	4313      	orrs	r3, r2
 800654a:	d00c      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 800654c:	4b28      	ldr	r3, [pc, #160]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800654e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006552:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006556:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800655a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800655e:	4a24      	ldr	r2, [pc, #144]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006560:	430b      	orrs	r3, r1
 8006562:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006566:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800656a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800656e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006572:	67bb      	str	r3, [r7, #120]	; 0x78
 8006574:	2300      	movs	r3, #0
 8006576:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006578:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800657c:	460b      	mov	r3, r1
 800657e:	4313      	orrs	r3, r2
 8006580:	d04f      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8006582:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800658a:	2b80      	cmp	r3, #128	; 0x80
 800658c:	d02d      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x356>
 800658e:	2b80      	cmp	r3, #128	; 0x80
 8006590:	d827      	bhi.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006592:	2b60      	cmp	r3, #96	; 0x60
 8006594:	d02e      	beq.n	80065f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006596:	2b60      	cmp	r3, #96	; 0x60
 8006598:	d823      	bhi.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800659a:	2b40      	cmp	r3, #64	; 0x40
 800659c:	d006      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x318>
 800659e:	2b40      	cmp	r3, #64	; 0x40
 80065a0:	d81f      	bhi.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d009      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x326>
 80065a6:	2b20      	cmp	r3, #32
 80065a8:	d011      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x33a>
 80065aa:	e01a      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80065ac:	4b10      	ldr	r3, [pc, #64]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b0:	4a0f      	ldr	r2, [pc, #60]	; (80065f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80065b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065b6:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 80065b8:	e01d      	b.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80065ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065be:	3308      	adds	r3, #8
 80065c0:	4618      	mov	r0, r3
 80065c2:	f002 f981 	bl	80088c8 <RCCEx_PLL2_Config>
 80065c6:	4603      	mov	r3, r0
 80065c8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80065cc:	e013      	b.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80065ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80065d2:	332c      	adds	r3, #44	; 0x2c
 80065d4:	4618      	mov	r0, r3
 80065d6:	f002 fa0f 	bl	80089f8 <RCCEx_PLL3_Config>
 80065da:	4603      	mov	r3, r0
 80065dc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 80065e0:	e009      	b.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065e2:	2301      	movs	r3, #1
 80065e4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80065e8:	e005      	b.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 80065ea:	bf00      	nop
 80065ec:	e003      	b.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x362>
 80065ee:	bf00      	nop
 80065f0:	46020c00 	.word	0x46020c00
        break;
 80065f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065f6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10d      	bne.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80065fe:	4bb6      	ldr	r3, [pc, #728]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006600:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006604:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8006608:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800660c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006610:	4ab1      	ldr	r2, [pc, #708]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006612:	430b      	orrs	r3, r1
 8006614:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006618:	e003      	b.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800661a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800661e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006622:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662a:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800662e:	673b      	str	r3, [r7, #112]	; 0x70
 8006630:	2300      	movs	r3, #0
 8006632:	677b      	str	r3, [r7, #116]	; 0x74
 8006634:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006638:	460b      	mov	r3, r1
 800663a:	4313      	orrs	r3, r2
 800663c:	d053      	beq.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 800663e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006642:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006646:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800664a:	d033      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800664c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006650:	d82c      	bhi.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006652:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006656:	d02f      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8006658:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800665c:	d826      	bhi.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x418>
 800665e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006662:	d008      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8006664:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006668:	d820      	bhi.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x418>
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00a      	beq.n	8006684 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 800666e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006672:	d011      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006674:	e01a      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006676:	4b98      	ldr	r3, [pc, #608]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667a:	4a97      	ldr	r2, [pc, #604]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800667c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006680:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006682:	e01a      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006684:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006688:	3308      	adds	r3, #8
 800668a:	4618      	mov	r0, r3
 800668c:	f002 f91c 	bl	80088c8 <RCCEx_PLL2_Config>
 8006690:	4603      	mov	r3, r0
 8006692:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006696:	e010      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006698:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800669c:	332c      	adds	r3, #44	; 0x2c
 800669e:	4618      	mov	r0, r3
 80066a0:	f002 f9aa 	bl	80089f8 <RCCEx_PLL3_Config>
 80066a4:	4603      	mov	r3, r0
 80066a6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 80066aa:	e006      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80066b2:	e002      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80066b4:	bf00      	nop
 80066b6:	e000      	b.n	80066ba <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 80066b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066ba:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d10d      	bne.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 80066c2:	4b85      	ldr	r3, [pc, #532]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80066c4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80066c8:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80066cc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066d4:	4a80      	ldr	r2, [pc, #512]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80066d6:	430b      	orrs	r3, r1
 80066d8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80066dc:	e003      	b.n	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066de:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80066e2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 80066e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ee:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80066f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80066f4:	2300      	movs	r3, #0
 80066f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066f8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80066fc:	460b      	mov	r3, r1
 80066fe:	4313      	orrs	r3, r2
 8006700:	d046      	beq.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8006702:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006706:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800670a:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800670e:	d028      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006710:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8006714:	d821      	bhi.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006716:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800671a:	d022      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800671c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006720:	d81b      	bhi.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8006722:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006726:	d01c      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006728:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800672c:	d815      	bhi.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800672e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006732:	d008      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8006734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006738:	d80f      	bhi.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800673a:	2b00      	cmp	r3, #0
 800673c:	d011      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800673e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006742:	d00e      	beq.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8006744:	e009      	b.n	800675a <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006746:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800674a:	3308      	adds	r3, #8
 800674c:	4618      	mov	r0, r3
 800674e:	f002 f8bb 	bl	80088c8 <RCCEx_PLL2_Config>
 8006752:	4603      	mov	r3, r0
 8006754:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006758:	e004      	b.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006760:	e000      	b.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8006762:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006764:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10d      	bne.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 800676c:	4b5a      	ldr	r3, [pc, #360]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800676e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006772:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8006776:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800677a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800677e:	4a56      	ldr	r2, [pc, #344]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006780:	430b      	orrs	r3, r1
 8006782:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006786:	e003      	b.n	8006790 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006788:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800678c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8006790:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006798:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800679c:	663b      	str	r3, [r7, #96]	; 0x60
 800679e:	2300      	movs	r3, #0
 80067a0:	667b      	str	r3, [r7, #100]	; 0x64
 80067a2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80067a6:	460b      	mov	r3, r1
 80067a8:	4313      	orrs	r3, r2
 80067aa:	d03f      	beq.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80067ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b4:	2b04      	cmp	r3, #4
 80067b6:	d81e      	bhi.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x562>
 80067b8:	a201      	add	r2, pc, #4	; (adr r2, 80067c0 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 80067ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067be:	bf00      	nop
 80067c0:	080067ff 	.word	0x080067ff
 80067c4:	080067d5 	.word	0x080067d5
 80067c8:	080067e3 	.word	0x080067e3
 80067cc:	080067ff 	.word	0x080067ff
 80067d0:	080067ff 	.word	0x080067ff
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80067d4:	4b40      	ldr	r3, [pc, #256]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80067d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d8:	4a3f      	ldr	r2, [pc, #252]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80067da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067de:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80067e0:	e00e      	b.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80067e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067e6:	332c      	adds	r3, #44	; 0x2c
 80067e8:	4618      	mov	r0, r3
 80067ea:	f002 f905 	bl	80089f8 <RCCEx_PLL3_Config>
 80067ee:	4603      	mov	r3, r0
 80067f0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80067f4:	e004      	b.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80067fc:	e000      	b.n	8006800 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 80067fe:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006800:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006804:	2b00      	cmp	r3, #0
 8006806:	d10d      	bne.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8006808:	4b33      	ldr	r3, [pc, #204]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800680a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800680e:	f023 0107 	bic.w	r1, r3, #7
 8006812:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800681a:	4a2f      	ldr	r2, [pc, #188]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800681c:	430b      	orrs	r3, r1
 800681e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006822:	e003      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006824:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006828:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 800682c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006834:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8006838:	65bb      	str	r3, [r7, #88]	; 0x58
 800683a:	2300      	movs	r3, #0
 800683c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800683e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8006842:	460b      	mov	r3, r1
 8006844:	4313      	orrs	r3, r2
 8006846:	d04d      	beq.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8006848:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800684c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006850:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006854:	d028      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8006856:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800685a:	d821      	bhi.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 800685c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006860:	d024      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x618>
 8006862:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006866:	d81b      	bhi.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006868:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800686c:	d00e      	beq.n	800688c <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 800686e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006872:	d815      	bhi.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8006874:	2b00      	cmp	r3, #0
 8006876:	d01b      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8006878:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800687c:	d110      	bne.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800687e:	4b16      	ldr	r3, [pc, #88]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006882:	4a15      	ldr	r2, [pc, #84]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006888:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800688a:	e012      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800688c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006890:	332c      	adds	r3, #44	; 0x2c
 8006892:	4618      	mov	r0, r3
 8006894:	f002 f8b0 	bl	80089f8 <RCCEx_PLL3_Config>
 8006898:	4603      	mov	r3, r0
 800689a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800689e:	e008      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80068a6:	e004      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80068a8:	bf00      	nop
 80068aa:	e002      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80068ac:	bf00      	nop
 80068ae:	e000      	b.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80068b0:	bf00      	nop
    }
    if (ret == HAL_OK)
 80068b2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d110      	bne.n	80068dc <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 80068ba:	4b07      	ldr	r3, [pc, #28]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80068bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80068c0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80068c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068cc:	4a02      	ldr	r2, [pc, #8]	; (80068d8 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80068ce:	430b      	orrs	r3, r1
 80068d0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80068d4:	e006      	b.n	80068e4 <HAL_RCCEx_PeriphCLKConfig+0x650>
 80068d6:	bf00      	nop
 80068d8:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068dc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80068e0:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80068e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ec:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80068f0:	653b      	str	r3, [r7, #80]	; 0x50
 80068f2:	2300      	movs	r3, #0
 80068f4:	657b      	str	r3, [r7, #84]	; 0x54
 80068f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80068fa:	460b      	mov	r3, r1
 80068fc:	4313      	orrs	r3, r2
 80068fe:	f000 80b5 	beq.w	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006902:	2300      	movs	r3, #0
 8006904:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006908:	4b9d      	ldr	r3, [pc, #628]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800690a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800690e:	f003 0304 	and.w	r3, r3, #4
 8006912:	2b00      	cmp	r3, #0
 8006914:	d113      	bne.n	800693e <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006916:	4b9a      	ldr	r3, [pc, #616]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006918:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800691c:	4a98      	ldr	r2, [pc, #608]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800691e:	f043 0304 	orr.w	r3, r3, #4
 8006922:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006926:	4b96      	ldr	r3, [pc, #600]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006928:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800692c:	f003 0304 	and.w	r3, r3, #4
 8006930:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006934:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8006938:	2301      	movs	r3, #1
 800693a:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800693e:	4b91      	ldr	r3, [pc, #580]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006942:	4a90      	ldr	r2, [pc, #576]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8006944:	f043 0301 	orr.w	r3, r3, #1
 8006948:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800694a:	f7fc f9cb 	bl	8002ce4 <HAL_GetTick>
 800694e:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006952:	e00b      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006954:	f7fc f9c6 	bl	8002ce4 <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	2b02      	cmp	r3, #2
 8006962:	d903      	bls.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800696a:	e005      	b.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800696c:	4b85      	ldr	r3, [pc, #532]	; (8006b84 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800696e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006970:	f003 0301 	and.w	r3, r3, #1
 8006974:	2b00      	cmp	r3, #0
 8006976:	d0ed      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8006978:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800697c:	2b00      	cmp	r3, #0
 800697e:	d165      	bne.n	8006a4c <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006980:	4b7f      	ldr	r3, [pc, #508]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006982:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800698a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 800698e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006992:	2b00      	cmp	r3, #0
 8006994:	d023      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8006996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800699a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800699e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d01b      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80069a6:	4b76      	ldr	r3, [pc, #472]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80069a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069b0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80069b4:	4b72      	ldr	r3, [pc, #456]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80069b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069ba:	4a71      	ldr	r2, [pc, #452]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80069bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069c0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80069c4:	4b6e      	ldr	r3, [pc, #440]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80069c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069ca:	4a6d      	ldr	r2, [pc, #436]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80069cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069d0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80069d4:	4a6a      	ldr	r2, [pc, #424]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80069d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069da:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80069de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d019      	beq.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069ea:	f7fc f97b 	bl	8002ce4 <HAL_GetTick>
 80069ee:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80069f2:	e00d      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069f4:	f7fc f976 	bl	8002ce4 <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069fe:	1ad2      	subs	r2, r2, r3
 8006a00:	f241 3388 	movw	r3, #5000	; 0x1388
 8006a04:	429a      	cmp	r2, r3
 8006a06:	d903      	bls.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8006a0e:	e006      	b.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006a10:	4b5b      	ldr	r3, [pc, #364]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a12:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d0ea      	beq.n	80069f4 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8006a1e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d10d      	bne.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8006a26:	4b56      	ldr	r3, [pc, #344]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a2c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006a30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a34:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006a38:	4a51      	ldr	r2, [pc, #324]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a3a:	430b      	orrs	r3, r1
 8006a3c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006a40:	e008      	b.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006a42:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006a46:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8006a4a:	e003      	b.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a4c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006a50:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006a54:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d107      	bne.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a5c:	4b48      	ldr	r3, [pc, #288]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006a62:	4a47      	ldr	r2, [pc, #284]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006a64:	f023 0304 	bic.w	r3, r3, #4
 8006a68:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006a6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a74:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8006a78:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a7e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8006a82:	460b      	mov	r3, r1
 8006a84:	4313      	orrs	r3, r2
 8006a86:	d042      	beq.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8006a88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006a8c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006a90:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006a94:	d022      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0x848>
 8006a96:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006a9a:	d81b      	bhi.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8006a9c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006aa0:	d011      	beq.n	8006ac6 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8006aa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006aa6:	d815      	bhi.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d019      	beq.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8006aac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006ab0:	d110      	bne.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006ab2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ab6:	3308      	adds	r3, #8
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f001 ff05 	bl	80088c8 <RCCEx_PLL2_Config>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006ac4:	e00d      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ac6:	4b2e      	ldr	r3, [pc, #184]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aca:	4a2d      	ldr	r2, [pc, #180]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ad0:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8006ad2:	e006      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006ada:	e002      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006adc:	bf00      	nop
 8006ade:	e000      	b.n	8006ae2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8006ae0:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006ae2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d10d      	bne.n	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8006aea:	4b25      	ldr	r3, [pc, #148]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006af0:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8006af4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006af8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006afc:	4a20      	ldr	r2, [pc, #128]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006afe:	430b      	orrs	r3, r1
 8006b00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006b04:	e003      	b.n	8006b0e <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b06:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006b0a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006b0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b16:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8006b1a:	643b      	str	r3, [r7, #64]	; 0x40
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	647b      	str	r3, [r7, #68]	; 0x44
 8006b20:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8006b24:	460b      	mov	r3, r1
 8006b26:	4313      	orrs	r3, r2
 8006b28:	d032      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8006b2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b36:	d00b      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006b38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b3c:	d804      	bhi.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d008      	beq.n	8006b54 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8006b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b46:	d007      	beq.n	8006b58 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006b4e:	e004      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006b50:	bf00      	nop
 8006b52:	e002      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006b54:	bf00      	nop
 8006b56:	e000      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8006b58:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006b5a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d112      	bne.n	8006b88 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006b62:	4b07      	ldr	r3, [pc, #28]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006b68:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006b74:	4a02      	ldr	r2, [pc, #8]	; (8006b80 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006b76:	430b      	orrs	r3, r1
 8006b78:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006b7c:	e008      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8006b7e:	bf00      	nop
 8006b80:	46020c00 	.word	0x46020c00
 8006b84:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b88:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006b8c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8006b90:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b98:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8006b9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ba2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8006ba6:	460b      	mov	r3, r1
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	d00c      	beq.n	8006bc6 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8006bac:	4b98      	ldr	r3, [pc, #608]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006bae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006bb2:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8006bb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006bbe:	4a94      	ldr	r2, [pc, #592]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006bc0:	430b      	orrs	r3, r1
 8006bc2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006bc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006bce:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8006bd2:	633b      	str	r3, [r7, #48]	; 0x30
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	637b      	str	r3, [r7, #52]	; 0x34
 8006bd8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8006bdc:	460b      	mov	r3, r1
 8006bde:	4313      	orrs	r3, r2
 8006be0:	d019      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8006be2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006be6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006bea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bee:	d105      	bne.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006bf0:	4b87      	ldr	r3, [pc, #540]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bf4:	4a86      	ldr	r2, [pc, #536]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006bf6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bfa:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8006bfc:	4b84      	ldr	r3, [pc, #528]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006bfe:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006c02:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8006c06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006c0e:	4a80      	ldr	r2, [pc, #512]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c10:	430b      	orrs	r3, r1
 8006c12:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8006c16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8006c22:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c24:	2300      	movs	r3, #0
 8006c26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c28:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8006c2c:	460b      	mov	r3, r1
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	d00c      	beq.n	8006c4c <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006c32:	4b77      	ldr	r3, [pc, #476]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c40:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006c44:	4972      	ldr	r1, [pc, #456]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8006c4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c54:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8006c58:	623b      	str	r3, [r7, #32]
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8006c5e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006c62:	460b      	mov	r3, r1
 8006c64:	4313      	orrs	r3, r2
 8006c66:	d00c      	beq.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006c68:	4b69      	ldr	r3, [pc, #420]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c76:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006c7a:	4965      	ldr	r1, [pc, #404]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006c82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c8a:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006c8e:	61bb      	str	r3, [r7, #24]
 8006c90:	2300      	movs	r3, #0
 8006c92:	61fb      	str	r3, [r7, #28]
 8006c94:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006c98:	460b      	mov	r3, r1
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	d00c      	beq.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006c9e:	4b5c      	ldr	r3, [pc, #368]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006ca0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006ca4:	f023 0218 	bic.w	r2, r3, #24
 8006ca8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cac:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006cb0:	4957      	ldr	r1, [pc, #348]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006cb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc0:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8006cc4:	613b      	str	r3, [r7, #16]
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	617b      	str	r3, [r7, #20]
 8006cca:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006cce:	460b      	mov	r3, r1
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	d032      	beq.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006cd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cdc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ce0:	d105      	bne.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ce2:	4b4b      	ldr	r3, [pc, #300]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ce6:	4a4a      	ldr	r2, [pc, #296]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cec:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006cee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cf2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006cf6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006cfa:	d108      	bne.n	8006d0e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006cfc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d00:	3308      	adds	r3, #8
 8006d02:	4618      	mov	r0, r3
 8006d04:	f001 fde0 	bl	80088c8 <RCCEx_PLL2_Config>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8006d0e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d10d      	bne.n	8006d32 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8006d16:	4b3e      	ldr	r3, [pc, #248]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006d18:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006d1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006d20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d28:	4939      	ldr	r1, [pc, #228]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 8006d30:	e003      	b.n	8006d3a <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d32:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006d36:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006d3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d42:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8006d46:	60bb      	str	r3, [r7, #8]
 8006d48:	2300      	movs	r3, #0
 8006d4a:	60fb      	str	r3, [r7, #12]
 8006d4c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006d50:	460b      	mov	r3, r1
 8006d52:	4313      	orrs	r3, r2
 8006d54:	d03a      	beq.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8006d56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d62:	d00e      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8006d64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d68:	d815      	bhi.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d017      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006d6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d72:	d110      	bne.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d74:	4b26      	ldr	r3, [pc, #152]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d78:	4a25      	ldr	r2, [pc, #148]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006d7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d7e:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006d80:	e00e      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006d82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d86:	3308      	adds	r3, #8
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f001 fd9d 	bl	80088c8 <RCCEx_PLL2_Config>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006d94:	e004      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006d9c:	e000      	b.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8006d9e:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006da0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10d      	bne.n	8006dc4 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006da8:	4b19      	ldr	r3, [pc, #100]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006dae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006db2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006db6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dba:	4915      	ldr	r1, [pc, #84]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8006dc2:	e003      	b.n	8006dcc <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dc4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006dc8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006dcc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8006dd8:	603b      	str	r3, [r7, #0]
 8006dda:	2300      	movs	r3, #0
 8006ddc:	607b      	str	r3, [r7, #4]
 8006dde:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006de2:	460b      	mov	r3, r1
 8006de4:	4313      	orrs	r3, r2
 8006de6:	d00c      	beq.n	8006e02 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8006de8:	4b09      	ldr	r3, [pc, #36]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006dea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006dee:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006df2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006df6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006dfa:	4905      	ldr	r1, [pc, #20]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8006e02:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	37e8      	adds	r7, #232	; 0xe8
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e10:	46020c00 	.word	0x46020c00

08006e14 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b089      	sub	sp, #36	; 0x24
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8006e1c:	4bac      	ldr	r3, [pc, #688]	; (80070d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e24:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8006e26:	4baa      	ldr	r3, [pc, #680]	; (80070d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e2a:	f003 0303 	and.w	r3, r3, #3
 8006e2e:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006e30:	4ba7      	ldr	r3, [pc, #668]	; (80070d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e34:	0a1b      	lsrs	r3, r3, #8
 8006e36:	f003 030f 	and.w	r3, r3, #15
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 8006e3e:	4ba4      	ldr	r3, [pc, #656]	; (80070d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e42:	f003 0310 	and.w	r3, r3, #16
 8006e46:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006e48:	4ba1      	ldr	r3, [pc, #644]	; (80070d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e4c:	08db      	lsrs	r3, r3, #3
 8006e4e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	fb02 f303 	mul.w	r3, r2, r3
 8006e58:	ee07 3a90 	vmov	s15, r3
 8006e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e60:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f000 8123 	beq.w	80070b2 <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	2b03      	cmp	r3, #3
 8006e70:	d062      	beq.n	8006f38 <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	2b03      	cmp	r3, #3
 8006e76:	f200 8081 	bhi.w	8006f7c <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d024      	beq.n	8006eca <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	2b02      	cmp	r3, #2
 8006e84:	d17a      	bne.n	8006f7c <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	ee07 3a90 	vmov	s15, r3
 8006e8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e90:	eddf 6a90 	vldr	s13, [pc, #576]	; 80070d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8006e94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e98:	4b8d      	ldr	r3, [pc, #564]	; (80070d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ea0:	ee07 3a90 	vmov	s15, r3
 8006ea4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ea8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006eac:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80070d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006eb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006eb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006eb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006ebc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006ec0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ec4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ec8:	e08f      	b.n	8006fea <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006eca:	4b81      	ldr	r3, [pc, #516]	; (80070d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d005      	beq.n	8006ee2 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 8006ed6:	4b7e      	ldr	r3, [pc, #504]	; (80070d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	0f1b      	lsrs	r3, r3, #28
 8006edc:	f003 030f 	and.w	r3, r3, #15
 8006ee0:	e006      	b.n	8006ef0 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8006ee2:	4b7b      	ldr	r3, [pc, #492]	; (80070d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006ee4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006ee8:	041b      	lsls	r3, r3, #16
 8006eea:	0f1b      	lsrs	r3, r3, #28
 8006eec:	f003 030f 	and.w	r3, r3, #15
 8006ef0:	4a7a      	ldr	r2, [pc, #488]	; (80070dc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ef6:	ee07 3a90 	vmov	s15, r3
 8006efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	ee07 3a90 	vmov	s15, r3
 8006f04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	ee07 3a90 	vmov	s15, r3
 8006f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006f16:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f1a:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80070d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006f26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f36:	e058      	b.n	8006fea <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	ee07 3a90 	vmov	s15, r3
 8006f3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f42:	eddf 6a64 	vldr	s13, [pc, #400]	; 80070d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8006f46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006f4a:	4b61      	ldr	r3, [pc, #388]	; (80070d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f52:	ee07 3a90 	vmov	s15, r3
 8006f56:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f5a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006f5e:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80070d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006f62:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f66:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8006f6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006f76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006f7a:	e036      	b.n	8006fea <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006f7c:	4b54      	ldr	r3, [pc, #336]	; (80070d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006f7e:	689b      	ldr	r3, [r3, #8]
 8006f80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d005      	beq.n	8006f94 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 8006f88:	4b51      	ldr	r3, [pc, #324]	; (80070d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	0f1b      	lsrs	r3, r3, #28
 8006f8e:	f003 030f 	and.w	r3, r3, #15
 8006f92:	e006      	b.n	8006fa2 <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8006f94:	4b4e      	ldr	r3, [pc, #312]	; (80070d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006f96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006f9a:	041b      	lsls	r3, r3, #16
 8006f9c:	0f1b      	lsrs	r3, r3, #28
 8006f9e:	f003 030f 	and.w	r3, r3, #15
 8006fa2:	4a4e      	ldr	r2, [pc, #312]	; (80070dc <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fa8:	ee07 3a90 	vmov	s15, r3
 8006fac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	ee07 3a90 	vmov	s15, r3
 8006fb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006fbe:	69bb      	ldr	r3, [r7, #24]
 8006fc0:	ee07 3a90 	vmov	s15, r3
 8006fc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006fc8:	ed97 6a02 	vldr	s12, [r7, #8]
 8006fcc:	eddf 5a42 	vldr	s11, [pc, #264]	; 80070d8 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006fd0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006fd4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006fd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006fdc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006fe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fe4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006fe8:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8006fea:	4b39      	ldr	r3, [pc, #228]	; (80070d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d017      	beq.n	8007026 <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006ff6:	4b36      	ldr	r3, [pc, #216]	; (80070d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ffa:	0a5b      	lsrs	r3, r3, #9
 8006ffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007000:	ee07 3a90 	vmov	s15, r3
 8007004:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8007008:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800700c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007010:	edd7 6a07 	vldr	s13, [r7, #28]
 8007014:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007018:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800701c:	ee17 2a90 	vmov	r2, s15
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	601a      	str	r2, [r3, #0]
 8007024:	e002      	b.n	800702c <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800702c:	4b28      	ldr	r3, [pc, #160]	; (80070d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800702e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d017      	beq.n	8007068 <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007038:	4b25      	ldr	r3, [pc, #148]	; (80070d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800703a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800703c:	0c1b      	lsrs	r3, r3, #16
 800703e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007042:	ee07 3a90 	vmov	s15, r3
 8007046:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 800704a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800704e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007052:	edd7 6a07 	vldr	s13, [r7, #28]
 8007056:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800705a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800705e:	ee17 2a90 	vmov	r2, s15
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	605a      	str	r2, [r3, #4]
 8007066:	e002      	b.n	800706e <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 800706e:	4b18      	ldr	r3, [pc, #96]	; (80070d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8007070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007072:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007076:	2b00      	cmp	r3, #0
 8007078:	d017      	beq.n	80070aa <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800707a:	4b15      	ldr	r3, [pc, #84]	; (80070d0 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800707c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800707e:	0e1b      	lsrs	r3, r3, #24
 8007080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007084:	ee07 3a90 	vmov	s15, r3
 8007088:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 800708c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007090:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007094:	edd7 6a07 	vldr	s13, [r7, #28]
 8007098:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800709c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80070a0:	ee17 2a90 	vmov	r2, s15
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80070a8:	e00c      	b.n	80070c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	609a      	str	r2, [r3, #8]
}
 80070b0:	e008      	b.n	80070c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2200      	movs	r2, #0
 80070bc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	609a      	str	r2, [r3, #8]
}
 80070c4:	bf00      	nop
 80070c6:	3724      	adds	r7, #36	; 0x24
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr
 80070d0:	46020c00 	.word	0x46020c00
 80070d4:	4b742400 	.word	0x4b742400
 80070d8:	46000000 	.word	0x46000000
 80070dc:	0800cd8c 	.word	0x0800cd8c

080070e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b089      	sub	sp, #36	; 0x24
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 80070e8:	4bac      	ldr	r3, [pc, #688]	; (800739c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80070ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070f0:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 80070f2:	4baa      	ldr	r3, [pc, #680]	; (800739c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80070f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070f6:	f003 0303 	and.w	r3, r3, #3
 80070fa:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80070fc:	4ba7      	ldr	r3, [pc, #668]	; (800739c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80070fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007100:	0a1b      	lsrs	r3, r3, #8
 8007102:	f003 030f 	and.w	r3, r3, #15
 8007106:	3301      	adds	r3, #1
 8007108:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 800710a:	4ba4      	ldr	r3, [pc, #656]	; (800739c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800710c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800710e:	f003 0310 	and.w	r3, r3, #16
 8007112:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007114:	4ba1      	ldr	r3, [pc, #644]	; (800739c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007118:	08db      	lsrs	r3, r3, #3
 800711a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	fb02 f303 	mul.w	r3, r2, r3
 8007124:	ee07 3a90 	vmov	s15, r3
 8007128:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800712c:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	2b00      	cmp	r3, #0
 8007134:	f000 8123 	beq.w	800737e <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	2b03      	cmp	r3, #3
 800713c:	d062      	beq.n	8007204 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	2b03      	cmp	r3, #3
 8007142:	f200 8081 	bhi.w	8007248 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d024      	beq.n	8007196 <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	2b02      	cmp	r3, #2
 8007150:	d17a      	bne.n	8007248 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	ee07 3a90 	vmov	s15, r3
 8007158:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800715c:	eddf 6a90 	vldr	s13, [pc, #576]	; 80073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8007160:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007164:	4b8d      	ldr	r3, [pc, #564]	; (800739c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800716c:	ee07 3a90 	vmov	s15, r3
 8007170:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007174:	ed97 6a02 	vldr	s12, [r7, #8]
 8007178:	eddf 5a8a 	vldr	s11, [pc, #552]	; 80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800717c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007180:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007184:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007188:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800718c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007190:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007194:	e08f      	b.n	80072b6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8007196:	4b81      	ldr	r3, [pc, #516]	; (800739c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d005      	beq.n	80071ae <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 80071a2:	4b7e      	ldr	r3, [pc, #504]	; (800739c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80071a4:	689b      	ldr	r3, [r3, #8]
 80071a6:	0f1b      	lsrs	r3, r3, #28
 80071a8:	f003 030f 	and.w	r3, r3, #15
 80071ac:	e006      	b.n	80071bc <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 80071ae:	4b7b      	ldr	r3, [pc, #492]	; (800739c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80071b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071b4:	041b      	lsls	r3, r3, #16
 80071b6:	0f1b      	lsrs	r3, r3, #28
 80071b8:	f003 030f 	and.w	r3, r3, #15
 80071bc:	4a7a      	ldr	r2, [pc, #488]	; (80073a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 80071be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071c2:	ee07 3a90 	vmov	s15, r3
 80071c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	ee07 3a90 	vmov	s15, r3
 80071d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80071d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	ee07 3a90 	vmov	s15, r3
 80071de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80071e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80071e6:	eddf 5a6f 	vldr	s11, [pc, #444]	; 80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80071ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80071ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80071f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80071f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 80071fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80071fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007202:	e058      	b.n	80072b6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	ee07 3a90 	vmov	s15, r3
 800720a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800720e:	eddf 6a64 	vldr	s13, [pc, #400]	; 80073a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8007212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007216:	4b61      	ldr	r3, [pc, #388]	; (800739c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800721a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800721e:	ee07 3a90 	vmov	s15, r3
 8007222:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007226:	ed97 6a02 	vldr	s12, [r7, #8]
 800722a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800722e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007232:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007236:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800723a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 800723e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007242:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007246:	e036      	b.n	80072b6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8007248:	4b54      	ldr	r3, [pc, #336]	; (800739c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800724a:	689b      	ldr	r3, [r3, #8]
 800724c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007250:	2b00      	cmp	r3, #0
 8007252:	d005      	beq.n	8007260 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 8007254:	4b51      	ldr	r3, [pc, #324]	; (800739c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	0f1b      	lsrs	r3, r3, #28
 800725a:	f003 030f 	and.w	r3, r3, #15
 800725e:	e006      	b.n	800726e <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 8007260:	4b4e      	ldr	r3, [pc, #312]	; (800739c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007262:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007266:	041b      	lsls	r3, r3, #16
 8007268:	0f1b      	lsrs	r3, r3, #28
 800726a:	f003 030f 	and.w	r3, r3, #15
 800726e:	4a4e      	ldr	r2, [pc, #312]	; (80073a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8007270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007274:	ee07 3a90 	vmov	s15, r3
 8007278:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	ee07 3a90 	vmov	s15, r3
 8007282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	ee07 3a90 	vmov	s15, r3
 8007290:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007294:	ed97 6a02 	vldr	s12, [r7, #8]
 8007298:	eddf 5a42 	vldr	s11, [pc, #264]	; 80073a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800729c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80072a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80072a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80072a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80072ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80072b4:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 80072b6:	4b39      	ldr	r3, [pc, #228]	; (800739c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80072b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d017      	beq.n	80072f2 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80072c2:	4b36      	ldr	r3, [pc, #216]	; (800739c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80072c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072c6:	0a5b      	lsrs	r3, r3, #9
 80072c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072cc:	ee07 3a90 	vmov	s15, r3
 80072d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 80072d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80072d8:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80072dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80072e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80072e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80072e8:	ee17 2a90 	vmov	r2, s15
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	601a      	str	r2, [r3, #0]
 80072f0:	e002      	b.n	80072f8 <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 80072f8:	4b28      	ldr	r3, [pc, #160]	; (800739c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80072fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007300:	2b00      	cmp	r3, #0
 8007302:	d017      	beq.n	8007334 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007304:	4b25      	ldr	r3, [pc, #148]	; (800739c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007308:	0c1b      	lsrs	r3, r3, #16
 800730a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800730e:	ee07 3a90 	vmov	s15, r3
 8007312:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8007316:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800731a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 800731e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800732a:	ee17 2a90 	vmov	r2, s15
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	605a      	str	r2, [r3, #4]
 8007332:	e002      	b.n	800733a <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 800733a:	4b18      	ldr	r3, [pc, #96]	; (800739c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800733c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d017      	beq.n	8007376 <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007346:	4b15      	ldr	r3, [pc, #84]	; (800739c <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8007348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800734a:	0e1b      	lsrs	r3, r3, #24
 800734c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007350:	ee07 3a90 	vmov	s15, r3
 8007354:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8007358:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800735c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007360:	edd7 6a07 	vldr	s13, [r7, #28]
 8007364:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007368:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800736c:	ee17 2a90 	vmov	r2, s15
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007374:	e00c      	b.n	8007390 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2200      	movs	r2, #0
 800737a:	609a      	str	r2, [r3, #8]
}
 800737c:	e008      	b.n	8007390 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2200      	movs	r2, #0
 8007388:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2200      	movs	r2, #0
 800738e:	609a      	str	r2, [r3, #8]
}
 8007390:	bf00      	nop
 8007392:	3724      	adds	r7, #36	; 0x24
 8007394:	46bd      	mov	sp, r7
 8007396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739a:	4770      	bx	lr
 800739c:	46020c00 	.word	0x46020c00
 80073a0:	4b742400 	.word	0x4b742400
 80073a4:	46000000 	.word	0x46000000
 80073a8:	0800cd8c 	.word	0x0800cd8c

080073ac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b089      	sub	sp, #36	; 0x24
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 80073b4:	4bac      	ldr	r3, [pc, #688]	; (8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80073b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073bc:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 80073be:	4baa      	ldr	r3, [pc, #680]	; (8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80073c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c2:	f003 0303 	and.w	r3, r3, #3
 80073c6:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 80073c8:	4ba7      	ldr	r3, [pc, #668]	; (8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80073ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073cc:	0a1b      	lsrs	r3, r3, #8
 80073ce:	f003 030f 	and.w	r3, r3, #15
 80073d2:	3301      	adds	r3, #1
 80073d4:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 80073d6:	4ba4      	ldr	r3, [pc, #656]	; (8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80073d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073da:	f003 0310 	and.w	r3, r3, #16
 80073de:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 80073e0:	4ba1      	ldr	r3, [pc, #644]	; (8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80073e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073e4:	08db      	lsrs	r3, r3, #3
 80073e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	fb02 f303 	mul.w	r3, r2, r3
 80073f0:	ee07 3a90 	vmov	s15, r3
 80073f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073f8:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	f000 8123 	beq.w	800764a <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	2b03      	cmp	r3, #3
 8007408:	d062      	beq.n	80074d0 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	2b03      	cmp	r3, #3
 800740e:	f200 8081 	bhi.w	8007514 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d024      	beq.n	8007462 <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	2b02      	cmp	r3, #2
 800741c:	d17a      	bne.n	8007514 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	ee07 3a90 	vmov	s15, r3
 8007424:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007428:	eddf 6a90 	vldr	s13, [pc, #576]	; 800766c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 800742c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007430:	4b8d      	ldr	r3, [pc, #564]	; (8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007438:	ee07 3a90 	vmov	s15, r3
 800743c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007440:	ed97 6a02 	vldr	s12, [r7, #8]
 8007444:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8007670 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8007448:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800744c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007450:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007454:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800745c:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8007460:	e08f      	b.n	8007582 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007462:	4b81      	ldr	r3, [pc, #516]	; (8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800746a:	2b00      	cmp	r3, #0
 800746c:	d005      	beq.n	800747a <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 800746e:	4b7e      	ldr	r3, [pc, #504]	; (8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	0f1b      	lsrs	r3, r3, #28
 8007474:	f003 030f 	and.w	r3, r3, #15
 8007478:	e006      	b.n	8007488 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 800747a:	4b7b      	ldr	r3, [pc, #492]	; (8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800747c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007480:	041b      	lsls	r3, r3, #16
 8007482:	0f1b      	lsrs	r3, r3, #28
 8007484:	f003 030f 	and.w	r3, r3, #15
 8007488:	4a7a      	ldr	r2, [pc, #488]	; (8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800748a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800748e:	ee07 3a90 	vmov	s15, r3
 8007492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	ee07 3a90 	vmov	s15, r3
 800749c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80074a4:	69bb      	ldr	r3, [r7, #24]
 80074a6:	ee07 3a90 	vmov	s15, r3
 80074aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80074b2:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8007670 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80074b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80074c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074ce:	e058      	b.n	8007582 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	ee07 3a90 	vmov	s15, r3
 80074d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074da:	eddf 6a64 	vldr	s13, [pc, #400]	; 800766c <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 80074de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074e2:	4b61      	ldr	r3, [pc, #388]	; (8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80074e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074ea:	ee07 3a90 	vmov	s15, r3
 80074ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80074f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80074f6:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8007670 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80074fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80074fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007502:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007506:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 800750a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800750e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007512:	e036      	b.n	8007582 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007514:	4b54      	ldr	r3, [pc, #336]	; (8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800751c:	2b00      	cmp	r3, #0
 800751e:	d005      	beq.n	800752c <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 8007520:	4b51      	ldr	r3, [pc, #324]	; (8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007522:	689b      	ldr	r3, [r3, #8]
 8007524:	0f1b      	lsrs	r3, r3, #28
 8007526:	f003 030f 	and.w	r3, r3, #15
 800752a:	e006      	b.n	800753a <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 800752c:	4b4e      	ldr	r3, [pc, #312]	; (8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800752e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007532:	041b      	lsls	r3, r3, #16
 8007534:	0f1b      	lsrs	r3, r3, #28
 8007536:	f003 030f 	and.w	r3, r3, #15
 800753a:	4a4e      	ldr	r2, [pc, #312]	; (8007674 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800753c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007540:	ee07 3a90 	vmov	s15, r3
 8007544:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007548:	693b      	ldr	r3, [r7, #16]
 800754a:	ee07 3a90 	vmov	s15, r3
 800754e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007552:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007556:	69bb      	ldr	r3, [r7, #24]
 8007558:	ee07 3a90 	vmov	s15, r3
 800755c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007560:	ed97 6a02 	vldr	s12, [r7, #8]
 8007564:	eddf 5a42 	vldr	s11, [pc, #264]	; 8007670 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8007568:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800756c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007570:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007574:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007578:	ee67 7a27 	vmul.f32	s15, s14, s15
 800757c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007580:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007582:	4b39      	ldr	r3, [pc, #228]	; (8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007586:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800758a:	2b00      	cmp	r3, #0
 800758c:	d017      	beq.n	80075be <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800758e:	4b36      	ldr	r3, [pc, #216]	; (8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007592:	0a5b      	lsrs	r3, r3, #9
 8007594:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007598:	ee07 3a90 	vmov	s15, r3
 800759c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 80075a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075a4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80075a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80075ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075b4:	ee17 2a90 	vmov	r2, s15
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	601a      	str	r2, [r3, #0]
 80075bc:	e002      	b.n	80075c4 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 80075c4:	4b28      	ldr	r3, [pc, #160]	; (8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80075c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d017      	beq.n	8007600 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80075d0:	4b25      	ldr	r3, [pc, #148]	; (8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80075d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075d4:	0c1b      	lsrs	r3, r3, #16
 80075d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075da:	ee07 3a90 	vmov	s15, r3
 80075de:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 80075e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075e6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80075ea:	edd7 6a07 	vldr	s13, [r7, #28]
 80075ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075f6:	ee17 2a90 	vmov	r2, s15
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	605a      	str	r2, [r3, #4]
 80075fe:	e002      	b.n	8007606 <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2200      	movs	r2, #0
 8007604:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007606:	4b18      	ldr	r3, [pc, #96]	; (8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800760a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800760e:	2b00      	cmp	r3, #0
 8007610:	d017      	beq.n	8007642 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007612:	4b15      	ldr	r3, [pc, #84]	; (8007668 <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8007614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007616:	0e1b      	lsrs	r3, r3, #24
 8007618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800761c:	ee07 3a90 	vmov	s15, r3
 8007620:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8007624:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007628:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800762c:	edd7 6a07 	vldr	s13, [r7, #28]
 8007630:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007634:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007638:	ee17 2a90 	vmov	r2, s15
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8007640:	e00c      	b.n	800765c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	609a      	str	r2, [r3, #8]
}
 8007648:	e008      	b.n	800765c <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	2200      	movs	r2, #0
 800765a:	609a      	str	r2, [r3, #8]
}
 800765c:	bf00      	nop
 800765e:	3724      	adds	r7, #36	; 0x24
 8007660:	46bd      	mov	sp, r7
 8007662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007666:	4770      	bx	lr
 8007668:	46020c00 	.word	0x46020c00
 800766c:	4b742400 	.word	0x4b742400
 8007670:	46000000 	.word	0x46000000
 8007674:	0800cd8c 	.word	0x0800cd8c

08007678 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b08e      	sub	sp, #56	; 0x38
 800767c:	af00      	add	r7, sp, #0
 800767e:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8007682:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007686:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800768a:	430b      	orrs	r3, r1
 800768c:	d145      	bne.n	800771a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800768e:	4ba7      	ldr	r3, [pc, #668]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007690:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007694:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007698:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800769a:	4ba4      	ldr	r3, [pc, #656]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800769c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076a0:	f003 0302 	and.w	r3, r3, #2
 80076a4:	2b02      	cmp	r3, #2
 80076a6:	d108      	bne.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 80076a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076ae:	d104      	bne.n	80076ba <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 80076b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076b4:	637b      	str	r3, [r7, #52]	; 0x34
 80076b6:	f001 b8fc 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 80076ba:	4b9c      	ldr	r3, [pc, #624]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80076bc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076c8:	d114      	bne.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80076ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076d0:	d110      	bne.n	80076f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80076d2:	4b96      	ldr	r3, [pc, #600]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80076d4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076e0:	d103      	bne.n	80076ea <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 80076e2:	23fa      	movs	r3, #250	; 0xfa
 80076e4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80076e6:	f001 b8e4 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80076ea:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80076ee:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80076f0:	f001 b8df 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 80076f4:	4b8d      	ldr	r3, [pc, #564]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007700:	d107      	bne.n	8007712 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8007702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007704:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007708:	d103      	bne.n	8007712 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800770a:	4b89      	ldr	r3, [pc, #548]	; (8007930 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800770c:	637b      	str	r3, [r7, #52]	; 0x34
 800770e:	f001 b8d0 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8007712:	2300      	movs	r3, #0
 8007714:	637b      	str	r3, [r7, #52]	; 0x34
 8007716:	f001 b8cc 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800771a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800771e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8007722:	430b      	orrs	r3, r1
 8007724:	d151      	bne.n	80077ca <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8007726:	4b81      	ldr	r3, [pc, #516]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007728:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800772c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007730:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007734:	2b80      	cmp	r3, #128	; 0x80
 8007736:	d035      	beq.n	80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8007738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800773a:	2b80      	cmp	r3, #128	; 0x80
 800773c:	d841      	bhi.n	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800773e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007740:	2b60      	cmp	r3, #96	; 0x60
 8007742:	d02a      	beq.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8007744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007746:	2b60      	cmp	r3, #96	; 0x60
 8007748:	d83b      	bhi.n	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 800774a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800774c:	2b40      	cmp	r3, #64	; 0x40
 800774e:	d009      	beq.n	8007764 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8007750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007752:	2b40      	cmp	r3, #64	; 0x40
 8007754:	d835      	bhi.n	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8007756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007758:	2b00      	cmp	r3, #0
 800775a:	d00c      	beq.n	8007776 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 800775c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775e:	2b20      	cmp	r3, #32
 8007760:	d012      	beq.n	8007788 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8007762:	e02e      	b.n	80077c2 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007768:	4618      	mov	r0, r3
 800776a:	f7ff fb53 	bl	8006e14 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800776e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007770:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007772:	f001 b89e 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007776:	f107 0318 	add.w	r3, r7, #24
 800777a:	4618      	mov	r0, r3
 800777c:	f7ff fcb0 	bl	80070e0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007784:	f001 b895 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007788:	f107 030c 	add.w	r3, r7, #12
 800778c:	4618      	mov	r0, r3
 800778e:	f7ff fe0d 	bl	80073ac <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007796:	f001 b88c 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800779a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800779e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077a0:	f001 b887 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80077a4:	4b61      	ldr	r3, [pc, #388]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077b0:	d103      	bne.n	80077ba <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 80077b2:	4b60      	ldr	r3, [pc, #384]	; (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80077b4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80077b6:	f001 b87c 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80077ba:	2300      	movs	r3, #0
 80077bc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077be:	f001 b878 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 80077c2:	2300      	movs	r3, #0
 80077c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80077c6:	f001 b874 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 80077ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077ce:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 80077d2:	430b      	orrs	r3, r1
 80077d4:	d158      	bne.n	8007888 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80077d6:	4b55      	ldr	r3, [pc, #340]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80077d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80077dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80077e0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80077e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077e8:	d03b      	beq.n	8007862 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 80077ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077f0:	d846      	bhi.n	8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 80077f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80077f8:	d02e      	beq.n	8007858 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 80077fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007800:	d83e      	bhi.n	8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007804:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007808:	d00b      	beq.n	8007822 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800780a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007810:	d836      	bhi.n	8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8007812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007814:	2b00      	cmp	r3, #0
 8007816:	d00d      	beq.n	8007834 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8007818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800781e:	d012      	beq.n	8007846 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8007820:	e02e      	b.n	8007880 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007826:	4618      	mov	r0, r3
 8007828:	f7ff faf4 	bl	8006e14 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800782c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007830:	f001 b83f 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007834:	f107 0318 	add.w	r3, r7, #24
 8007838:	4618      	mov	r0, r3
 800783a:	f7ff fc51 	bl	80070e0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007842:	f001 b836 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007846:	f107 030c 	add.w	r3, r7, #12
 800784a:	4618      	mov	r0, r3
 800784c:	f7ff fdae 	bl	80073ac <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007854:	f001 b82d 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007858:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800785c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800785e:	f001 b828 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007862:	4b32      	ldr	r3, [pc, #200]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800786a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800786e:	d103      	bne.n	8007878 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8007870:	4b30      	ldr	r3, [pc, #192]	; (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8007872:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007874:	f001 b81d 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8007878:	2300      	movs	r3, #0
 800787a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800787c:	f001 b819 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8007880:	2300      	movs	r3, #0
 8007882:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007884:	f001 b815 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8007888:	e9d7 2300 	ldrd	r2, r3, [r7]
 800788c:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8007890:	430b      	orrs	r3, r1
 8007892:	d126      	bne.n	80078e2 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8007894:	4b25      	ldr	r3, [pc, #148]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007896:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800789a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800789e:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80078a0:	4b22      	ldr	r3, [pc, #136]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078ac:	d106      	bne.n	80078bc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80078ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d103      	bne.n	80078bc <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 80078b4:	4b1f      	ldr	r3, [pc, #124]	; (8007934 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80078b6:	637b      	str	r3, [r7, #52]	; 0x34
 80078b8:	f000 bffb 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 80078bc:	4b1b      	ldr	r3, [pc, #108]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80078c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078c8:	d107      	bne.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 80078ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078d0:	d103      	bne.n	80078da <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 80078d2:	4b19      	ldr	r3, [pc, #100]	; (8007938 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 80078d4:	637b      	str	r3, [r7, #52]	; 0x34
 80078d6:	f000 bfec 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 80078da:	2300      	movs	r3, #0
 80078dc:	637b      	str	r3, [r7, #52]	; 0x34
 80078de:	f000 bfe8 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 80078e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078e6:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 80078ea:	430b      	orrs	r3, r1
 80078ec:	d164      	bne.n	80079b8 <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80078ee:	4b0f      	ldr	r3, [pc, #60]	; (800792c <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80078f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80078f4:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80078f8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80078fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078fc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007900:	d03d      	beq.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8007902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007904:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8007908:	d852      	bhi.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800790a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007910:	d014      	beq.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8007912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007914:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007918:	d84a      	bhi.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800791a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791c:	2b00      	cmp	r3, #0
 800791e:	d01f      	beq.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8007920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007922:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007926:	d012      	beq.n	800794e <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8007928:	e042      	b.n	80079b0 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800792a:	bf00      	nop
 800792c:	46020c00 	.word	0x46020c00
 8007930:	0007a120 	.word	0x0007a120
 8007934:	00f42400 	.word	0x00f42400
 8007938:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800793c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007940:	4618      	mov	r0, r3
 8007942:	f7ff fa67 	bl	8006e14 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007948:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800794a:	f000 bfb2 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800794e:	f107 0318 	add.w	r3, r7, #24
 8007952:	4618      	mov	r0, r3
 8007954:	f7ff fbc4 	bl	80070e0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007958:	69fb      	ldr	r3, [r7, #28]
 800795a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800795c:	f000 bfa9 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007960:	4bab      	ldr	r3, [pc, #684]	; (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007968:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800796c:	d103      	bne.n	8007976 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 800796e:	4ba9      	ldr	r3, [pc, #676]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007970:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007972:	f000 bf9e 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8007976:	2300      	movs	r3, #0
 8007978:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800797a:	f000 bf9a 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800797e:	4ba4      	ldr	r3, [pc, #656]	; (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007986:	2b00      	cmp	r3, #0
 8007988:	d005      	beq.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 800798a:	4ba1      	ldr	r3, [pc, #644]	; (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	0e1b      	lsrs	r3, r3, #24
 8007990:	f003 030f 	and.w	r3, r3, #15
 8007994:	e006      	b.n	80079a4 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 8007996:	4b9e      	ldr	r3, [pc, #632]	; (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007998:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800799c:	041b      	lsls	r3, r3, #16
 800799e:	0e1b      	lsrs	r3, r3, #24
 80079a0:	f003 030f 	and.w	r3, r3, #15
 80079a4:	4a9c      	ldr	r2, [pc, #624]	; (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 80079a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079ac:	f000 bf81 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 80079b0:	2300      	movs	r3, #0
 80079b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80079b4:	f000 bf7d 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80079b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079bc:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 80079c0:	430b      	orrs	r3, r1
 80079c2:	d175      	bne.n	8007ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80079c4:	4b92      	ldr	r3, [pc, #584]	; (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80079c6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80079ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80079ce:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 80079d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d15b      	bne.n	8007a8e <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 80079d6:	4b8e      	ldr	r3, [pc, #568]	; (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 80079d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80079dc:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80079e0:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 80079e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079e4:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80079e8:	d034      	beq.n	8007a54 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 80079ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ec:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80079f0:	d849      	bhi.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 80079f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80079f8:	d00b      	beq.n	8007a12 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 80079fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007a00:	d841      	bhi.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8007a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d016      	beq.n	8007a36 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8007a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a0e:	d009      	beq.n	8007a24 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8007a10:	e039      	b.n	8007a86 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7ff f9fc 	bl	8006e14 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007a20:	f000 bf47 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007a24:	f107 0318 	add.w	r3, r7, #24
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7ff fb59 	bl	80070e0 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007a32:	f000 bf3e 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8007a36:	4b76      	ldr	r3, [pc, #472]	; (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a42:	d103      	bne.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 8007a44:	4b73      	ldr	r3, [pc, #460]	; (8007c14 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8007a46:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8007a48:	f000 bf33 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007a50:	f000 bf2f 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a54:	4b6e      	ldr	r3, [pc, #440]	; (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d005      	beq.n	8007a6c <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 8007a60:	4b6b      	ldr	r3, [pc, #428]	; (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	0e1b      	lsrs	r3, r3, #24
 8007a66:	f003 030f 	and.w	r3, r3, #15
 8007a6a:	e006      	b.n	8007a7a <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 8007a6c:	4b68      	ldr	r3, [pc, #416]	; (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007a6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007a72:	041b      	lsls	r3, r3, #16
 8007a74:	0e1b      	lsrs	r3, r3, #24
 8007a76:	f003 030f 	and.w	r3, r3, #15
 8007a7a:	4a67      	ldr	r2, [pc, #412]	; (8007c18 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8007a7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a80:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007a82:	f000 bf16 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 8007a86:	2300      	movs	r3, #0
 8007a88:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8007a8a:	f000 bf12 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8007a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007a94:	d108      	bne.n	8007aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007a96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f7ff f9ba 	bl	8006e14 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8007aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa2:	637b      	str	r3, [r7, #52]	; 0x34
 8007aa4:	f000 bf05 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	637b      	str	r3, [r7, #52]	; 0x34
 8007aac:	f000 bf01 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8007ab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ab4:	1e51      	subs	r1, r2, #1
 8007ab6:	430b      	orrs	r3, r1
 8007ab8:	d136      	bne.n	8007b28 <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8007aba:	4b55      	ldr	r3, [pc, #340]	; (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007ac0:	f003 0303 	and.w	r3, r3, #3
 8007ac4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8007ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d104      	bne.n	8007ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8007acc:	f7fe fb34 	bl	8006138 <HAL_RCC_GetPCLK2Freq>
 8007ad0:	6378      	str	r0, [r7, #52]	; 0x34
 8007ad2:	f000 beee 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8007ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d104      	bne.n	8007ae6 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007adc:	f7fe f9f6 	bl	8005ecc <HAL_RCC_GetSysClockFreq>
 8007ae0:	6378      	str	r0, [r7, #52]	; 0x34
 8007ae2:	f000 bee6 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8007ae6:	4b4a      	ldr	r3, [pc, #296]	; (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007aee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007af2:	d106      	bne.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8007af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007af6:	2b02      	cmp	r3, #2
 8007af8:	d103      	bne.n	8007b02 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 8007afa:	4b48      	ldr	r3, [pc, #288]	; (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007afc:	637b      	str	r3, [r7, #52]	; 0x34
 8007afe:	f000 bed8 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8007b02:	4b43      	ldr	r3, [pc, #268]	; (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007b04:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b08:	f003 0302 	and.w	r3, r3, #2
 8007b0c:	2b02      	cmp	r3, #2
 8007b0e:	d107      	bne.n	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8007b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b12:	2b03      	cmp	r3, #3
 8007b14:	d104      	bne.n	8007b20 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 8007b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b1c:	f000 bec9 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8007b20:	2300      	movs	r3, #0
 8007b22:	637b      	str	r3, [r7, #52]	; 0x34
 8007b24:	f000 bec5 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8007b28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b2c:	1e91      	subs	r1, r2, #2
 8007b2e:	430b      	orrs	r3, r1
 8007b30:	d136      	bne.n	8007ba0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8007b32:	4b37      	ldr	r3, [pc, #220]	; (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007b34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007b38:	f003 030c 	and.w	r3, r3, #12
 8007b3c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8007b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d104      	bne.n	8007b4e <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007b44:	f7fe fae4 	bl	8006110 <HAL_RCC_GetPCLK1Freq>
 8007b48:	6378      	str	r0, [r7, #52]	; 0x34
 8007b4a:	f000 beb2 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8007b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b50:	2b04      	cmp	r3, #4
 8007b52:	d104      	bne.n	8007b5e <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007b54:	f7fe f9ba 	bl	8005ecc <HAL_RCC_GetSysClockFreq>
 8007b58:	6378      	str	r0, [r7, #52]	; 0x34
 8007b5a:	f000 beaa 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8007b5e:	4b2c      	ldr	r3, [pc, #176]	; (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b6a:	d106      	bne.n	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6e:	2b08      	cmp	r3, #8
 8007b70:	d103      	bne.n	8007b7a <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 8007b72:	4b2a      	ldr	r3, [pc, #168]	; (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007b74:	637b      	str	r3, [r7, #52]	; 0x34
 8007b76:	f000 be9c 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8007b7a:	4b25      	ldr	r3, [pc, #148]	; (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007b7c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007b80:	f003 0302 	and.w	r3, r3, #2
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	d107      	bne.n	8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8007b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8a:	2b0c      	cmp	r3, #12
 8007b8c:	d104      	bne.n	8007b98 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 8007b8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b92:	637b      	str	r3, [r7, #52]	; 0x34
 8007b94:	f000 be8d 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8007b9c:	f000 be89 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8007ba0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ba4:	1f11      	subs	r1, r2, #4
 8007ba6:	430b      	orrs	r3, r1
 8007ba8:	d13e      	bne.n	8007c28 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8007baa:	4b19      	ldr	r3, [pc, #100]	; (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007bb0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007bb4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8007bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d104      	bne.n	8007bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007bbc:	f7fe faa8 	bl	8006110 <HAL_RCC_GetPCLK1Freq>
 8007bc0:	6378      	str	r0, [r7, #52]	; 0x34
 8007bc2:	f000 be76 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8007bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc8:	2b10      	cmp	r3, #16
 8007bca:	d104      	bne.n	8007bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007bcc:	f7fe f97e 	bl	8005ecc <HAL_RCC_GetSysClockFreq>
 8007bd0:	6378      	str	r0, [r7, #52]	; 0x34
 8007bd2:	f000 be6e 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8007bd6:	4b0e      	ldr	r3, [pc, #56]	; (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007be2:	d106      	bne.n	8007bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8007be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be6:	2b20      	cmp	r3, #32
 8007be8:	d103      	bne.n	8007bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8007bea:	4b0c      	ldr	r3, [pc, #48]	; (8007c1c <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8007bec:	637b      	str	r3, [r7, #52]	; 0x34
 8007bee:	f000 be60 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8007bf2:	4b07      	ldr	r3, [pc, #28]	; (8007c10 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8007bf4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007bf8:	f003 0302 	and.w	r3, r3, #2
 8007bfc:	2b02      	cmp	r3, #2
 8007bfe:	d10f      	bne.n	8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8007c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c02:	2b30      	cmp	r3, #48	; 0x30
 8007c04:	d10c      	bne.n	8007c20 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 8007c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c0a:	637b      	str	r3, [r7, #52]	; 0x34
 8007c0c:	f000 be51 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007c10:	46020c00 	.word	0x46020c00
 8007c14:	02dc6c00 	.word	0x02dc6c00
 8007c18:	0800cd8c 	.word	0x0800cd8c
 8007c1c:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8007c20:	2300      	movs	r3, #0
 8007c22:	637b      	str	r3, [r7, #52]	; 0x34
 8007c24:	f000 be45 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8007c28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c2c:	f1a2 0108 	sub.w	r1, r2, #8
 8007c30:	430b      	orrs	r3, r1
 8007c32:	d136      	bne.n	8007ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8007c34:	4b9f      	ldr	r3, [pc, #636]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c3a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007c3e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8007c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d104      	bne.n	8007c50 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007c46:	f7fe fa63 	bl	8006110 <HAL_RCC_GetPCLK1Freq>
 8007c4a:	6378      	str	r0, [r7, #52]	; 0x34
 8007c4c:	f000 be31 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8007c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c52:	2b40      	cmp	r3, #64	; 0x40
 8007c54:	d104      	bne.n	8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007c56:	f7fe f939 	bl	8005ecc <HAL_RCC_GetSysClockFreq>
 8007c5a:	6378      	str	r0, [r7, #52]	; 0x34
 8007c5c:	f000 be29 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007c60:	4b94      	ldr	r3, [pc, #592]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c6c:	d106      	bne.n	8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 8007c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c70:	2b80      	cmp	r3, #128	; 0x80
 8007c72:	d103      	bne.n	8007c7c <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 8007c74:	4b90      	ldr	r3, [pc, #576]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007c76:	637b      	str	r3, [r7, #52]	; 0x34
 8007c78:	f000 be1b 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007c7c:	4b8d      	ldr	r3, [pc, #564]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007c7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c82:	f003 0302 	and.w	r3, r3, #2
 8007c86:	2b02      	cmp	r3, #2
 8007c88:	d107      	bne.n	8007c9a <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 8007c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8c:	2bc0      	cmp	r3, #192	; 0xc0
 8007c8e:	d104      	bne.n	8007c9a <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 8007c90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c94:	637b      	str	r3, [r7, #52]	; 0x34
 8007c96:	f000 be0c 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	637b      	str	r3, [r7, #52]	; 0x34
 8007c9e:	f000 be08 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8007ca2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ca6:	f1a2 0110 	sub.w	r1, r2, #16
 8007caa:	430b      	orrs	r3, r1
 8007cac:	d139      	bne.n	8007d22 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007cae:	4b81      	ldr	r3, [pc, #516]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007cb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007cb8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8007cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d104      	bne.n	8007cca <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007cc0:	f7fe fa26 	bl	8006110 <HAL_RCC_GetPCLK1Freq>
 8007cc4:	6378      	str	r0, [r7, #52]	; 0x34
 8007cc6:	f000 bdf4 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8007cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cd0:	d104      	bne.n	8007cdc <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007cd2:	f7fe f8fb 	bl	8005ecc <HAL_RCC_GetSysClockFreq>
 8007cd6:	6378      	str	r0, [r7, #52]	; 0x34
 8007cd8:	f000 bdeb 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007cdc:	4b75      	ldr	r3, [pc, #468]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ce8:	d107      	bne.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8007cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007cf0:	d103      	bne.n	8007cfa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 8007cf2:	4b71      	ldr	r3, [pc, #452]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007cf4:	637b      	str	r3, [r7, #52]	; 0x34
 8007cf6:	f000 bddc 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 8007cfa:	4b6e      	ldr	r3, [pc, #440]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007cfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d00:	f003 0302 	and.w	r3, r3, #2
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d108      	bne.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 8007d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d0e:	d104      	bne.n	8007d1a <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 8007d10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d14:	637b      	str	r3, [r7, #52]	; 0x34
 8007d16:	f000 bdcc 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	637b      	str	r3, [r7, #52]	; 0x34
 8007d1e:	f000 bdc8 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 8007d22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d26:	f1a2 0120 	sub.w	r1, r2, #32
 8007d2a:	430b      	orrs	r3, r1
 8007d2c:	d158      	bne.n	8007de0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8007d2e:	4b61      	ldr	r3, [pc, #388]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007d30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007d34:	f003 0307 	and.w	r3, r3, #7
 8007d38:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 8007d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d104      	bne.n	8007d4a <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 8007d40:	f7fe fa0e 	bl	8006160 <HAL_RCC_GetPCLK3Freq>
 8007d44:	6378      	str	r0, [r7, #52]	; 0x34
 8007d46:	f000 bdb4 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 8007d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d4c:	2b01      	cmp	r3, #1
 8007d4e:	d104      	bne.n	8007d5a <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007d50:	f7fe f8bc 	bl	8005ecc <HAL_RCC_GetSysClockFreq>
 8007d54:	6378      	str	r0, [r7, #52]	; 0x34
 8007d56:	f000 bdac 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8007d5a:	4b56      	ldr	r3, [pc, #344]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d66:	d106      	bne.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 8007d68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d6a:	2b02      	cmp	r3, #2
 8007d6c:	d103      	bne.n	8007d76 <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 8007d6e:	4b52      	ldr	r3, [pc, #328]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007d70:	637b      	str	r3, [r7, #52]	; 0x34
 8007d72:	f000 bd9e 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8007d76:	4b4f      	ldr	r3, [pc, #316]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007d78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007d7c:	f003 0302 	and.w	r3, r3, #2
 8007d80:	2b02      	cmp	r3, #2
 8007d82:	d107      	bne.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8007d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d86:	2b03      	cmp	r3, #3
 8007d88:	d104      	bne.n	8007d94 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 8007d8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d8e:	637b      	str	r3, [r7, #52]	; 0x34
 8007d90:	f000 bd8f 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8007d94:	4b47      	ldr	r3, [pc, #284]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 0320 	and.w	r3, r3, #32
 8007d9c:	2b20      	cmp	r3, #32
 8007d9e:	d11b      	bne.n	8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8007da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007da2:	2b04      	cmp	r3, #4
 8007da4:	d118      	bne.n	8007dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007da6:	4b43      	ldr	r3, [pc, #268]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d005      	beq.n	8007dbe <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8007db2:	4b40      	ldr	r3, [pc, #256]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007db4:	689b      	ldr	r3, [r3, #8]
 8007db6:	0e1b      	lsrs	r3, r3, #24
 8007db8:	f003 030f 	and.w	r3, r3, #15
 8007dbc:	e006      	b.n	8007dcc <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8007dbe:	4b3d      	ldr	r3, [pc, #244]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007dc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007dc4:	041b      	lsls	r3, r3, #16
 8007dc6:	0e1b      	lsrs	r3, r3, #24
 8007dc8:	f003 030f 	and.w	r3, r3, #15
 8007dcc:	4a3b      	ldr	r2, [pc, #236]	; (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dd2:	637b      	str	r3, [r7, #52]	; 0x34
 8007dd4:	f000 bd6d 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	637b      	str	r3, [r7, #52]	; 0x34
 8007ddc:	f000 bd69 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007de0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007de4:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8007de8:	430b      	orrs	r3, r1
 8007dea:	d169      	bne.n	8007ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007dec:	4b31      	ldr	r3, [pc, #196]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007dee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007df2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8007df6:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 8007df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007dfe:	d104      	bne.n	8007e0a <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007e00:	f7fe f864 	bl	8005ecc <HAL_RCC_GetSysClockFreq>
 8007e04:	6378      	str	r0, [r7, #52]	; 0x34
 8007e06:	f000 bd54 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 8007e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e10:	d108      	bne.n	8007e24 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e12:	f107 0318 	add.w	r3, r7, #24
 8007e16:	4618      	mov	r0, r3
 8007e18:	f7ff f962 	bl	80070e0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 8007e1c:	6a3b      	ldr	r3, [r7, #32]
 8007e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e20:	f000 bd47 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 8007e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d104      	bne.n	8007e34 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 8007e2a:	f7fe f957 	bl	80060dc <HAL_RCC_GetHCLKFreq>
 8007e2e:	6378      	str	r0, [r7, #52]	; 0x34
 8007e30:	f000 bd3f 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 8007e34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e36:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007e3a:	d118      	bne.n	8007e6e <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8007e3c:	4b1d      	ldr	r3, [pc, #116]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007e3e:	689b      	ldr	r3, [r3, #8]
 8007e40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d005      	beq.n	8007e54 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8007e48:	4b1a      	ldr	r3, [pc, #104]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007e4a:	689b      	ldr	r3, [r3, #8]
 8007e4c:	0f1b      	lsrs	r3, r3, #28
 8007e4e:	f003 030f 	and.w	r3, r3, #15
 8007e52:	e006      	b.n	8007e62 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 8007e54:	4b17      	ldr	r3, [pc, #92]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007e56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e5a:	041b      	lsls	r3, r3, #16
 8007e5c:	0f1b      	lsrs	r3, r3, #28
 8007e5e:	f003 030f 	and.w	r3, r3, #15
 8007e62:	4a16      	ldr	r2, [pc, #88]	; (8007ebc <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007e64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e68:	637b      	str	r3, [r7, #52]	; 0x34
 8007e6a:	f000 bd22 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007e6e:	4b11      	ldr	r3, [pc, #68]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e76:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007e7a:	d107      	bne.n	8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8007e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007e82:	d103      	bne.n	8007e8c <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 8007e84:	4b0c      	ldr	r3, [pc, #48]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007e86:	637b      	str	r3, [r7, #52]	; 0x34
 8007e88:	f000 bd13 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007e8c:	4b09      	ldr	r3, [pc, #36]	; (8007eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e98:	d107      	bne.n	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 8007e9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007ea0:	d103      	bne.n	8007eaa <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 8007ea2:	4b05      	ldr	r3, [pc, #20]	; (8007eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007ea4:	637b      	str	r3, [r7, #52]	; 0x34
 8007ea6:	f000 bd04 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	637b      	str	r3, [r7, #52]	; 0x34
 8007eae:	f000 bd00 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007eb2:	bf00      	nop
 8007eb4:	46020c00 	.word	0x46020c00
 8007eb8:	00f42400 	.word	0x00f42400
 8007ebc:	0800cd8c 	.word	0x0800cd8c
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007ec0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ec4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8007ec8:	430b      	orrs	r3, r1
 8007eca:	d14e      	bne.n	8007f6a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007ecc:	4ba8      	ldr	r3, [pc, #672]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007ece:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007ed2:	f003 0307 	and.w	r3, r3, #7
 8007ed6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eda:	2b04      	cmp	r3, #4
 8007edc:	d841      	bhi.n	8007f62 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007ede:	a201      	add	r2, pc, #4	; (adr r2, 8007ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8007ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee4:	08007f1d 	.word	0x08007f1d
 8007ee8:	08007ef9 	.word	0x08007ef9
 8007eec:	08007f0b 	.word	0x08007f0b
 8007ef0:	08007f27 	.word	0x08007f27
 8007ef4:	08007f31 	.word	0x08007f31
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7fe ff89 	bl	8006e14 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f04:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f06:	f000 bcd4 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007f0a:	f107 030c 	add.w	r3, r7, #12
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7ff fa4c 	bl	80073ac <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f18:	f000 bccb 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007f1c:	f7fe f8de 	bl	80060dc <HAL_RCC_GetHCLKFreq>
 8007f20:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007f22:	f000 bcc6 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007f26:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007f2a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f2c:	f000 bcc1 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007f30:	4b8f      	ldr	r3, [pc, #572]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d005      	beq.n	8007f48 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 8007f3c:	4b8c      	ldr	r3, [pc, #560]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	0e1b      	lsrs	r3, r3, #24
 8007f42:	f003 030f 	and.w	r3, r3, #15
 8007f46:	e006      	b.n	8007f56 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 8007f48:	4b89      	ldr	r3, [pc, #548]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007f4a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007f4e:	041b      	lsls	r3, r3, #16
 8007f50:	0e1b      	lsrs	r3, r3, #24
 8007f52:	f003 030f 	and.w	r3, r3, #15
 8007f56:	4a87      	ldr	r2, [pc, #540]	; (8008174 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f5c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f5e:	f000 bca8 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007f62:	2300      	movs	r3, #0
 8007f64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007f66:	f000 bca4 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8007f6a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f6e:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8007f72:	430b      	orrs	r3, r1
 8007f74:	d15d      	bne.n	8008032 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8007f76:	4b7e      	ldr	r3, [pc, #504]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007f78:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007f7c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007f80:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f88:	d036      	beq.n	8007ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007f90:	d84b      	bhi.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f94:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007f98:	d029      	beq.n	8007fee <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 8007f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007fa0:	d843      	bhi.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fa8:	d013      	beq.n	8007fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 8007faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007fb0:	d83b      	bhi.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d015      	beq.n	8007fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 8007fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007fbe:	d134      	bne.n	800802a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f7fe ff25 	bl	8006e14 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8007fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fcc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007fce:	f000 bc70 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007fd2:	f107 030c 	add.w	r3, r7, #12
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7ff f9e8 	bl	80073ac <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007fdc:	693b      	ldr	r3, [r7, #16]
 8007fde:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007fe0:	f000 bc67 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007fe4:	f7fe f87a 	bl	80060dc <HAL_RCC_GetHCLKFreq>
 8007fe8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007fea:	f000 bc62 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007fee:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007ff2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ff4:	f000 bc5d 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007ff8:	4b5d      	ldr	r3, [pc, #372]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007ffa:	689b      	ldr	r3, [r3, #8]
 8007ffc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008000:	2b00      	cmp	r3, #0
 8008002:	d005      	beq.n	8008010 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 8008004:	4b5a      	ldr	r3, [pc, #360]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	0e1b      	lsrs	r3, r3, #24
 800800a:	f003 030f 	and.w	r3, r3, #15
 800800e:	e006      	b.n	800801e <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 8008010:	4b57      	ldr	r3, [pc, #348]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008012:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008016:	041b      	lsls	r3, r3, #16
 8008018:	0e1b      	lsrs	r3, r3, #24
 800801a:	f003 030f 	and.w	r3, r3, #15
 800801e:	4a55      	ldr	r2, [pc, #340]	; (8008174 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008024:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008026:	f000 bc44 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 800802a:	2300      	movs	r3, #0
 800802c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800802e:	f000 bc40 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8008032:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008036:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 800803a:	430b      	orrs	r3, r1
 800803c:	d14a      	bne.n	80080d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 800803e:	4b4c      	ldr	r3, [pc, #304]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008044:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008048:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 800804a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800804c:	2b00      	cmp	r3, #0
 800804e:	d104      	bne.n	800805a <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008050:	f7fe f85e 	bl	8006110 <HAL_RCC_GetPCLK1Freq>
 8008054:	6378      	str	r0, [r7, #52]	; 0x34
 8008056:	f000 bc2c 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 800805a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008060:	d104      	bne.n	800806c <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008062:	f7fd ff33 	bl	8005ecc <HAL_RCC_GetSysClockFreq>
 8008066:	6378      	str	r0, [r7, #52]	; 0x34
 8008068:	f000 bc23 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 800806c:	4b40      	ldr	r3, [pc, #256]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008078:	d107      	bne.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 800807a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800807c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008080:	d103      	bne.n	800808a <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 8008082:	4b3d      	ldr	r3, [pc, #244]	; (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008084:	637b      	str	r3, [r7, #52]	; 0x34
 8008086:	f000 bc14 	b.w	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800808a:	4b39      	ldr	r3, [pc, #228]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 0320 	and.w	r3, r3, #32
 8008092:	2b20      	cmp	r3, #32
 8008094:	d11b      	bne.n	80080ce <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 8008096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008098:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800809c:	d117      	bne.n	80080ce <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800809e:	4b34      	ldr	r3, [pc, #208]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d005      	beq.n	80080b6 <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 80080aa:	4b31      	ldr	r3, [pc, #196]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	0e1b      	lsrs	r3, r3, #24
 80080b0:	f003 030f 	and.w	r3, r3, #15
 80080b4:	e006      	b.n	80080c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80080b6:	4b2e      	ldr	r3, [pc, #184]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80080b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80080bc:	041b      	lsls	r3, r3, #16
 80080be:	0e1b      	lsrs	r3, r3, #24
 80080c0:	f003 030f 	and.w	r3, r3, #15
 80080c4:	4a2b      	ldr	r2, [pc, #172]	; (8008174 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80080c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080ca:	637b      	str	r3, [r7, #52]	; 0x34
 80080cc:	e3f1      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 80080ce:	2300      	movs	r3, #0
 80080d0:	637b      	str	r3, [r7, #52]	; 0x34
 80080d2:	e3ee      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 80080d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080d8:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 80080dc:	430b      	orrs	r3, r1
 80080de:	d14d      	bne.n	800817c <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80080e0:	4b23      	ldr	r3, [pc, #140]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80080e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80080e6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80080ea:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 80080ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d103      	bne.n	80080fa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80080f2:	f7fe f80d 	bl	8006110 <HAL_RCC_GetPCLK1Freq>
 80080f6:	6378      	str	r0, [r7, #52]	; 0x34
 80080f8:	e3db      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 80080fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008100:	d103      	bne.n	800810a <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008102:	f7fd fee3 	bl	8005ecc <HAL_RCC_GetSysClockFreq>
 8008106:	6378      	str	r0, [r7, #52]	; 0x34
 8008108:	e3d3      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 800810a:	4b19      	ldr	r3, [pc, #100]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008116:	d106      	bne.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 8008118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800811a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800811e:	d102      	bne.n	8008126 <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 8008120:	4b15      	ldr	r3, [pc, #84]	; (8008178 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008122:	637b      	str	r3, [r7, #52]	; 0x34
 8008124:	e3c5      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8008126:	4b12      	ldr	r3, [pc, #72]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 0320 	and.w	r3, r3, #32
 800812e:	2b20      	cmp	r3, #32
 8008130:	d11b      	bne.n	800816a <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 8008132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008134:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008138:	d117      	bne.n	800816a <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800813a:	4b0d      	ldr	r3, [pc, #52]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008142:	2b00      	cmp	r3, #0
 8008144:	d005      	beq.n	8008152 <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 8008146:	4b0a      	ldr	r3, [pc, #40]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	0e1b      	lsrs	r3, r3, #24
 800814c:	f003 030f 	and.w	r3, r3, #15
 8008150:	e006      	b.n	8008160 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 8008152:	4b07      	ldr	r3, [pc, #28]	; (8008170 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8008154:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008158:	041b      	lsls	r3, r3, #16
 800815a:	0e1b      	lsrs	r3, r3, #24
 800815c:	f003 030f 	and.w	r3, r3, #15
 8008160:	4a04      	ldr	r2, [pc, #16]	; (8008174 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8008162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008166:	637b      	str	r3, [r7, #52]	; 0x34
 8008168:	e3a3      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800816a:	2300      	movs	r3, #0
 800816c:	637b      	str	r3, [r7, #52]	; 0x34
 800816e:	e3a0      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8008170:	46020c00 	.word	0x46020c00
 8008174:	0800cd8c 	.word	0x0800cd8c
 8008178:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 800817c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008180:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008184:	430b      	orrs	r3, r1
 8008186:	d148      	bne.n	800821a <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008188:	4b9d      	ldr	r3, [pc, #628]	; (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800818a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800818e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008192:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008196:	2bc0      	cmp	r3, #192	; 0xc0
 8008198:	d024      	beq.n	80081e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800819a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800819c:	2bc0      	cmp	r3, #192	; 0xc0
 800819e:	d839      	bhi.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 80081a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a2:	2b80      	cmp	r3, #128	; 0x80
 80081a4:	d00d      	beq.n	80081c2 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 80081a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a8:	2b80      	cmp	r3, #128	; 0x80
 80081aa:	d833      	bhi.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 80081ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d003      	beq.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 80081b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b4:	2b40      	cmp	r3, #64	; 0x40
 80081b6:	d011      	beq.n	80081dc <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 80081b8:	e02c      	b.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 80081ba:	f7fd ffd1 	bl	8006160 <HAL_RCC_GetPCLK3Freq>
 80081be:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80081c0:	e377      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80081c2:	4b8f      	ldr	r3, [pc, #572]	; (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081ce:	d102      	bne.n	80081d6 <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 80081d0:	4b8c      	ldr	r3, [pc, #560]	; (8008404 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80081d2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80081d4:	e36d      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80081d6:	2300      	movs	r3, #0
 80081d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80081da:	e36a      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 80081dc:	f7fd fe76 	bl	8005ecc <HAL_RCC_GetSysClockFreq>
 80081e0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80081e2:	e366      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 80081e4:	4b86      	ldr	r3, [pc, #536]	; (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80081e6:	689b      	ldr	r3, [r3, #8]
 80081e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d005      	beq.n	80081fc <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 80081f0:	4b83      	ldr	r3, [pc, #524]	; (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	0f1b      	lsrs	r3, r3, #28
 80081f6:	f003 030f 	and.w	r3, r3, #15
 80081fa:	e006      	b.n	800820a <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 80081fc:	4b80      	ldr	r3, [pc, #512]	; (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80081fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008202:	041b      	lsls	r3, r3, #16
 8008204:	0f1b      	lsrs	r3, r3, #28
 8008206:	f003 030f 	and.w	r3, r3, #15
 800820a:	4a7f      	ldr	r2, [pc, #508]	; (8008408 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800820c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008210:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008212:	e34e      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 8008214:	2300      	movs	r3, #0
 8008216:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008218:	e34b      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 800821a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800821e:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8008222:	430b      	orrs	r3, r1
 8008224:	d147      	bne.n	80082b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008226:	4b76      	ldr	r3, [pc, #472]	; (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008228:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800822c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008230:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8008232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008234:	2b00      	cmp	r3, #0
 8008236:	d103      	bne.n	8008240 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008238:	f7fd ff6a 	bl	8006110 <HAL_RCC_GetPCLK1Freq>
 800823c:	6378      	str	r0, [r7, #52]	; 0x34
 800823e:	e338      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8008240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008242:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008246:	d103      	bne.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008248:	f7fd fe40 	bl	8005ecc <HAL_RCC_GetSysClockFreq>
 800824c:	6378      	str	r0, [r7, #52]	; 0x34
 800824e:	e330      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8008250:	4b6b      	ldr	r3, [pc, #428]	; (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800825c:	d106      	bne.n	800826c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 800825e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008260:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008264:	d102      	bne.n	800826c <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 8008266:	4b67      	ldr	r3, [pc, #412]	; (8008404 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8008268:	637b      	str	r3, [r7, #52]	; 0x34
 800826a:	e322      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 800826c:	4b64      	ldr	r3, [pc, #400]	; (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 0320 	and.w	r3, r3, #32
 8008274:	2b20      	cmp	r3, #32
 8008276:	d11b      	bne.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 8008278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800827e:	d117      	bne.n	80082b0 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008280:	4b5f      	ldr	r3, [pc, #380]	; (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008288:	2b00      	cmp	r3, #0
 800828a:	d005      	beq.n	8008298 <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 800828c:	4b5c      	ldr	r3, [pc, #368]	; (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800828e:	689b      	ldr	r3, [r3, #8]
 8008290:	0e1b      	lsrs	r3, r3, #24
 8008292:	f003 030f 	and.w	r3, r3, #15
 8008296:	e006      	b.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 8008298:	4b59      	ldr	r3, [pc, #356]	; (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800829a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800829e:	041b      	lsls	r3, r3, #16
 80082a0:	0e1b      	lsrs	r3, r3, #24
 80082a2:	f003 030f 	and.w	r3, r3, #15
 80082a6:	4a58      	ldr	r2, [pc, #352]	; (8008408 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 80082a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082ac:	637b      	str	r3, [r7, #52]	; 0x34
 80082ae:	e300      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 80082b0:	2300      	movs	r3, #0
 80082b2:	637b      	str	r3, [r7, #52]	; 0x34
 80082b4:	e2fd      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 80082b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082ba:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80082be:	430b      	orrs	r3, r1
 80082c0:	d15b      	bne.n	800837a <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 80082c2:	4b4f      	ldr	r3, [pc, #316]	; (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80082c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80082c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082cc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 80082ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d117      	bne.n	8008304 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80082d4:	4b4a      	ldr	r3, [pc, #296]	; (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d005      	beq.n	80082ec <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 80082e0:	4b47      	ldr	r3, [pc, #284]	; (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	0e1b      	lsrs	r3, r3, #24
 80082e6:	f003 030f 	and.w	r3, r3, #15
 80082ea:	e006      	b.n	80082fa <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 80082ec:	4b44      	ldr	r3, [pc, #272]	; (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80082ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80082f2:	041b      	lsls	r3, r3, #16
 80082f4:	0e1b      	lsrs	r3, r3, #24
 80082f6:	f003 030f 	and.w	r3, r3, #15
 80082fa:	4a43      	ldr	r2, [pc, #268]	; (8008408 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 80082fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008300:	637b      	str	r3, [r7, #52]	; 0x34
 8008302:	e2d6      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8008304:	4b3e      	ldr	r3, [pc, #248]	; (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008306:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800830a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800830e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008312:	d112      	bne.n	800833a <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8008314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800831a:	d10e      	bne.n	800833a <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800831c:	4b38      	ldr	r3, [pc, #224]	; (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800831e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008322:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008326:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800832a:	d102      	bne.n	8008332 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 800832c:	23fa      	movs	r3, #250	; 0xfa
 800832e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008330:	e2bf      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8008332:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008336:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008338:	e2bb      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 800833a:	4b31      	ldr	r3, [pc, #196]	; (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008346:	d106      	bne.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 8008348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800834a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800834e:	d102      	bne.n	8008356 <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 8008350:	4b2c      	ldr	r3, [pc, #176]	; (8008404 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8008352:	637b      	str	r3, [r7, #52]	; 0x34
 8008354:	e2ad      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8008356:	4b2a      	ldr	r3, [pc, #168]	; (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008358:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800835c:	f003 0302 	and.w	r3, r3, #2
 8008360:	2b02      	cmp	r3, #2
 8008362:	d107      	bne.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 8008364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008366:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800836a:	d103      	bne.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 800836c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008370:	637b      	str	r3, [r7, #52]	; 0x34
 8008372:	e29e      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8008374:	2300      	movs	r3, #0
 8008376:	637b      	str	r3, [r7, #52]	; 0x34
 8008378:	e29b      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800837a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800837e:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008382:	430b      	orrs	r3, r1
 8008384:	d162      	bne.n	800844c <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008386:	4b1e      	ldr	r3, [pc, #120]	; (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8008388:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800838c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008390:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8008392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008394:	2b00      	cmp	r3, #0
 8008396:	d117      	bne.n	80083c8 <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008398:	4b19      	ldr	r3, [pc, #100]	; (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d005      	beq.n	80083b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 80083a4:	4b16      	ldr	r3, [pc, #88]	; (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80083a6:	689b      	ldr	r3, [r3, #8]
 80083a8:	0e1b      	lsrs	r3, r3, #24
 80083aa:	f003 030f 	and.w	r3, r3, #15
 80083ae:	e006      	b.n	80083be <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 80083b0:	4b13      	ldr	r3, [pc, #76]	; (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80083b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80083b6:	041b      	lsls	r3, r3, #16
 80083b8:	0e1b      	lsrs	r3, r3, #24
 80083ba:	f003 030f 	and.w	r3, r3, #15
 80083be:	4a12      	ldr	r2, [pc, #72]	; (8008408 <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 80083c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083c4:	637b      	str	r3, [r7, #52]	; 0x34
 80083c6:	e274      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 80083c8:	4b0d      	ldr	r3, [pc, #52]	; (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80083ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80083ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80083d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083d6:	d119      	bne.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 80083d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083de:	d115      	bne.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80083e0:	4b07      	ldr	r3, [pc, #28]	; (8008400 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80083e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80083e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80083ee:	d102      	bne.n	80083f6 <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 80083f0:	23fa      	movs	r3, #250	; 0xfa
 80083f2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80083f4:	e25d      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80083f6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80083fa:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80083fc:	e259      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80083fe:	bf00      	nop
 8008400:	46020c00 	.word	0x46020c00
 8008404:	00f42400 	.word	0x00f42400
 8008408:	0800cd8c 	.word	0x0800cd8c
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 800840c:	4b9d      	ldr	r3, [pc, #628]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008418:	d106      	bne.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 800841a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008420:	d102      	bne.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 8008422:	4b99      	ldr	r3, [pc, #612]	; (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8008424:	637b      	str	r3, [r7, #52]	; 0x34
 8008426:	e244      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8008428:	4b96      	ldr	r3, [pc, #600]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800842a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800842e:	f003 0302 	and.w	r3, r3, #2
 8008432:	2b02      	cmp	r3, #2
 8008434:	d107      	bne.n	8008446 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 8008436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008438:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800843c:	d103      	bne.n	8008446 <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 800843e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008442:	637b      	str	r3, [r7, #52]	; 0x34
 8008444:	e235      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8008446:	2300      	movs	r3, #0
 8008448:	637b      	str	r3, [r7, #52]	; 0x34
 800844a:	e232      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 800844c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008450:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008454:	430b      	orrs	r3, r1
 8008456:	d147      	bne.n	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008458:	4b8a      	ldr	r3, [pc, #552]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800845a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800845e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008462:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8008464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008466:	2b00      	cmp	r3, #0
 8008468:	d103      	bne.n	8008472 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800846a:	f7fd fe51 	bl	8006110 <HAL_RCC_GetPCLK1Freq>
 800846e:	6378      	str	r0, [r7, #52]	; 0x34
 8008470:	e21f      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8008472:	4b84      	ldr	r3, [pc, #528]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008474:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008478:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800847c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008480:	d112      	bne.n	80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8008482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008484:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008488:	d10e      	bne.n	80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800848a:	4b7e      	ldr	r3, [pc, #504]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800848c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008494:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008498:	d102      	bne.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 800849a:	23fa      	movs	r3, #250	; 0xfa
 800849c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800849e:	e208      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80084a0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80084a4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80084a6:	e204      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 80084a8:	4b76      	ldr	r3, [pc, #472]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084b4:	d106      	bne.n	80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 80084b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80084bc:	d102      	bne.n	80084c4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 80084be:	4b72      	ldr	r3, [pc, #456]	; (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80084c0:	637b      	str	r3, [r7, #52]	; 0x34
 80084c2:	e1f6      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 80084c4:	4b6f      	ldr	r3, [pc, #444]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80084c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80084ca:	f003 0302 	and.w	r3, r3, #2
 80084ce:	2b02      	cmp	r3, #2
 80084d0:	d107      	bne.n	80084e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 80084d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80084d8:	d103      	bne.n	80084e2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 80084da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084de:	637b      	str	r3, [r7, #52]	; 0x34
 80084e0:	e1e7      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 80084e2:	2300      	movs	r3, #0
 80084e4:	637b      	str	r3, [r7, #52]	; 0x34
 80084e6:	e1e4      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 80084e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084ec:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 80084f0:	430b      	orrs	r3, r1
 80084f2:	d12d      	bne.n	8008550 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 80084f4:	4b63      	ldr	r3, [pc, #396]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80084f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084fa:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80084fe:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8008500:	4b60      	ldr	r3, [pc, #384]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008508:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800850c:	d105      	bne.n	800851a <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 800850e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008510:	2b00      	cmp	r3, #0
 8008512:	d102      	bne.n	800851a <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 8008514:	4b5c      	ldr	r3, [pc, #368]	; (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8008516:	637b      	str	r3, [r7, #52]	; 0x34
 8008518:	e1cb      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 800851a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008520:	d107      	bne.n	8008532 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008526:	4618      	mov	r0, r3
 8008528:	f7fe fc74 	bl	8006e14 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 800852c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800852e:	637b      	str	r3, [r7, #52]	; 0x34
 8008530:	e1bf      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8008532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008534:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008538:	d107      	bne.n	800854a <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800853a:	f107 0318 	add.w	r3, r7, #24
 800853e:	4618      	mov	r0, r3
 8008540:	f7fe fdce 	bl	80070e0 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8008544:	69bb      	ldr	r3, [r7, #24]
 8008546:	637b      	str	r3, [r7, #52]	; 0x34
 8008548:	e1b3      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 800854a:	2300      	movs	r3, #0
 800854c:	637b      	str	r3, [r7, #52]	; 0x34
 800854e:	e1b0      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8008550:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008554:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8008558:	430b      	orrs	r3, r1
 800855a:	d14d      	bne.n	80085f8 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 800855c:	4b49      	ldr	r3, [pc, #292]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800855e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008562:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008566:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8008568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800856a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800856e:	d028      	beq.n	80085c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8008570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008572:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008576:	d83c      	bhi.n	80085f2 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8008578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800857a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800857e:	d013      	beq.n	80085a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 8008580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008582:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008586:	d834      	bhi.n	80085f2 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 8008588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858a:	2b00      	cmp	r3, #0
 800858c:	d004      	beq.n	8008598 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 800858e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008590:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008594:	d004      	beq.n	80085a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8008596:	e02c      	b.n	80085f2 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8008598:	f7fd fdce 	bl	8006138 <HAL_RCC_GetPCLK2Freq>
 800859c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800859e:	e188      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80085a0:	f7fd fc94 	bl	8005ecc <HAL_RCC_GetSysClockFreq>
 80085a4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80085a6:	e184      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80085a8:	4b36      	ldr	r3, [pc, #216]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085b4:	d102      	bne.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 80085b6:	4b34      	ldr	r3, [pc, #208]	; (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80085b8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80085ba:	e17a      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 80085bc:	2300      	movs	r3, #0
 80085be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80085c0:	e177      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80085c2:	4b30      	ldr	r3, [pc, #192]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80085c4:	689b      	ldr	r3, [r3, #8]
 80085c6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d005      	beq.n	80085da <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 80085ce:	4b2d      	ldr	r3, [pc, #180]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	0e1b      	lsrs	r3, r3, #24
 80085d4:	f003 030f 	and.w	r3, r3, #15
 80085d8:	e006      	b.n	80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 80085da:	4b2a      	ldr	r3, [pc, #168]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80085dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80085e0:	041b      	lsls	r3, r3, #16
 80085e2:	0e1b      	lsrs	r3, r3, #24
 80085e4:	f003 030f 	and.w	r3, r3, #15
 80085e8:	4a28      	ldr	r2, [pc, #160]	; (800868c <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 80085ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085ee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80085f0:	e15f      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80085f2:	2300      	movs	r3, #0
 80085f4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80085f6:	e15c      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 80085f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085fc:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8008600:	430b      	orrs	r3, r1
 8008602:	d154      	bne.n	80086ae <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8008604:	4b1f      	ldr	r3, [pc, #124]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800860a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800860e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8008610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008612:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008616:	d028      	beq.n	800866a <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8008618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800861a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800861e:	d843      	bhi.n	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8008620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008622:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008626:	d013      	beq.n	8008650 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8008628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800862a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800862e:	d83b      	bhi.n	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 8008630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008632:	2b00      	cmp	r3, #0
 8008634:	d004      	beq.n	8008640 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8008636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800863c:	d004      	beq.n	8008648 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 800863e:	e033      	b.n	80086a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8008640:	f7fd fd66 	bl	8006110 <HAL_RCC_GetPCLK1Freq>
 8008644:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008646:	e134      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008648:	f7fd fc40 	bl	8005ecc <HAL_RCC_GetSysClockFreq>
 800864c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800864e:	e130      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008650:	4b0c      	ldr	r3, [pc, #48]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800865c:	d102      	bne.n	8008664 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 800865e:	4b0a      	ldr	r3, [pc, #40]	; (8008688 <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8008660:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008662:	e126      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8008664:	2300      	movs	r3, #0
 8008666:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008668:	e123      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800866a:	4b06      	ldr	r3, [pc, #24]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00c      	beq.n	8008690 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 8008676:	4b03      	ldr	r3, [pc, #12]	; (8008684 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	0e1b      	lsrs	r3, r3, #24
 800867c:	f003 030f 	and.w	r3, r3, #15
 8008680:	e00d      	b.n	800869e <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 8008682:	bf00      	nop
 8008684:	46020c00 	.word	0x46020c00
 8008688:	00f42400 	.word	0x00f42400
 800868c:	0800cd8c 	.word	0x0800cd8c
 8008690:	4b8a      	ldr	r3, [pc, #552]	; (80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008692:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008696:	041b      	lsls	r3, r3, #16
 8008698:	0e1b      	lsrs	r3, r3, #24
 800869a:	f003 030f 	and.w	r3, r3, #15
 800869e:	4a88      	ldr	r2, [pc, #544]	; (80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 80086a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80086a6:	e104      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80086a8:	2300      	movs	r3, #0
 80086aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80086ac:	e101      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80086ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086b2:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 80086b6:	430b      	orrs	r3, r1
 80086b8:	d16e      	bne.n	8008798 <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80086ba:	4b80      	ldr	r3, [pc, #512]	; (80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80086bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80086c0:	f003 0318 	and.w	r3, r3, #24
 80086c4:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80086c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c8:	2b18      	cmp	r3, #24
 80086ca:	d862      	bhi.n	8008792 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 80086cc:	a201      	add	r2, pc, #4	; (adr r2, 80086d4 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 80086ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086d2:	bf00      	nop
 80086d4:	08008739 	.word	0x08008739
 80086d8:	08008793 	.word	0x08008793
 80086dc:	08008793 	.word	0x08008793
 80086e0:	08008793 	.word	0x08008793
 80086e4:	08008793 	.word	0x08008793
 80086e8:	08008793 	.word	0x08008793
 80086ec:	08008793 	.word	0x08008793
 80086f0:	08008793 	.word	0x08008793
 80086f4:	08008741 	.word	0x08008741
 80086f8:	08008793 	.word	0x08008793
 80086fc:	08008793 	.word	0x08008793
 8008700:	08008793 	.word	0x08008793
 8008704:	08008793 	.word	0x08008793
 8008708:	08008793 	.word	0x08008793
 800870c:	08008793 	.word	0x08008793
 8008710:	08008793 	.word	0x08008793
 8008714:	08008749 	.word	0x08008749
 8008718:	08008793 	.word	0x08008793
 800871c:	08008793 	.word	0x08008793
 8008720:	08008793 	.word	0x08008793
 8008724:	08008793 	.word	0x08008793
 8008728:	08008793 	.word	0x08008793
 800872c:	08008793 	.word	0x08008793
 8008730:	08008793 	.word	0x08008793
 8008734:	08008763 	.word	0x08008763
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8008738:	f7fd fd12 	bl	8006160 <HAL_RCC_GetPCLK3Freq>
 800873c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800873e:	e0b8      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008740:	f7fd fbc4 	bl	8005ecc <HAL_RCC_GetSysClockFreq>
 8008744:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008746:	e0b4      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008748:	4b5c      	ldr	r3, [pc, #368]	; (80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008754:	d102      	bne.n	800875c <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 8008756:	4b5b      	ldr	r3, [pc, #364]	; (80088c4 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 8008758:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800875a:	e0aa      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800875c:	2300      	movs	r3, #0
 800875e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008760:	e0a7      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008762:	4b56      	ldr	r3, [pc, #344]	; (80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800876a:	2b00      	cmp	r3, #0
 800876c:	d005      	beq.n	800877a <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 800876e:	4b53      	ldr	r3, [pc, #332]	; (80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008770:	689b      	ldr	r3, [r3, #8]
 8008772:	0e1b      	lsrs	r3, r3, #24
 8008774:	f003 030f 	and.w	r3, r3, #15
 8008778:	e006      	b.n	8008788 <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 800877a:	4b50      	ldr	r3, [pc, #320]	; (80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800877c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008780:	041b      	lsls	r3, r3, #16
 8008782:	0e1b      	lsrs	r3, r3, #24
 8008784:	f003 030f 	and.w	r3, r3, #15
 8008788:	4a4d      	ldr	r2, [pc, #308]	; (80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 800878a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800878e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008790:	e08f      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8008792:	2300      	movs	r3, #0
 8008794:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008796:	e08c      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8008798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800879c:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 80087a0:	430b      	orrs	r3, r1
 80087a2:	d14c      	bne.n	800883e <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80087a4:	4b45      	ldr	r3, [pc, #276]	; (80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 80087a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80087aa:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80087ae:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80087b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80087b6:	d013      	beq.n	80087e0 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 80087b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80087be:	d83b      	bhi.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 80087c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087c6:	d013      	beq.n	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 80087c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80087ce:	d833      	bhi.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 80087d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d014      	beq.n	8008800 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 80087d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087dc:	d014      	beq.n	8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 80087de:	e02b      	b.n	8008838 <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80087e0:	f107 0318 	add.w	r3, r7, #24
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7fe fc7b 	bl	80070e0 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80087ee:	e060      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80087f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80087f4:	4618      	mov	r0, r3
 80087f6:	f7fe fb0d 	bl	8006e14 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80087fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80087fe:	e058      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008800:	f7fd fb64 	bl	8005ecc <HAL_RCC_GetSysClockFreq>
 8008804:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008806:	e054      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008808:	4b2c      	ldr	r3, [pc, #176]	; (80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008810:	2b00      	cmp	r3, #0
 8008812:	d005      	beq.n	8008820 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 8008814:	4b29      	ldr	r3, [pc, #164]	; (80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	0e1b      	lsrs	r3, r3, #24
 800881a:	f003 030f 	and.w	r3, r3, #15
 800881e:	e006      	b.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8008820:	4b26      	ldr	r3, [pc, #152]	; (80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008822:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008826:	041b      	lsls	r3, r3, #16
 8008828:	0e1b      	lsrs	r3, r3, #24
 800882a:	f003 030f 	and.w	r3, r3, #15
 800882e:	4a24      	ldr	r2, [pc, #144]	; (80088c0 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8008830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008834:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008836:	e03c      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8008838:	2300      	movs	r3, #0
 800883a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800883c:	e039      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800883e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008842:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8008846:	430b      	orrs	r3, r1
 8008848:	d131      	bne.n	80088ae <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800884a:	4b1c      	ldr	r3, [pc, #112]	; (80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800884c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008850:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008854:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8008856:	4b19      	ldr	r3, [pc, #100]	; (80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008858:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800885c:	f003 0302 	and.w	r3, r3, #2
 8008860:	2b02      	cmp	r3, #2
 8008862:	d106      	bne.n	8008872 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 8008864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008866:	2b00      	cmp	r3, #0
 8008868:	d103      	bne.n	8008872 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 800886a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800886e:	637b      	str	r3, [r7, #52]	; 0x34
 8008870:	e01f      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8008872:	4b12      	ldr	r3, [pc, #72]	; (80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8008874:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008878:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800887c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008880:	d112      	bne.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 8008882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008884:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008888:	d10e      	bne.n	80088a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800888a:	4b0c      	ldr	r3, [pc, #48]	; (80088bc <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 800888c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008894:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008898:	d102      	bne.n	80088a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 800889a:	23fa      	movs	r3, #250	; 0xfa
 800889c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800889e:	e008      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80088a0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80088a4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80088a6:	e004      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80088a8:	2300      	movs	r3, #0
 80088aa:	637b      	str	r3, [r7, #52]	; 0x34
 80088ac:	e001      	b.n	80088b2 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 80088ae:	2300      	movs	r3, #0
 80088b0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 80088b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80088b4:	4618      	mov	r0, r3
 80088b6:	3738      	adds	r7, #56	; 0x38
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	46020c00 	.word	0x46020c00
 80088c0:	0800cd8c 	.word	0x0800cd8c
 80088c4:	00f42400 	.word	0x00f42400

080088c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80088d0:	4b47      	ldr	r3, [pc, #284]	; (80089f0 <RCCEx_PLL2_Config+0x128>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	4a46      	ldr	r2, [pc, #280]	; (80089f0 <RCCEx_PLL2_Config+0x128>)
 80088d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80088da:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80088dc:	f7fa fa02 	bl	8002ce4 <HAL_GetTick>
 80088e0:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80088e2:	e008      	b.n	80088f6 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80088e4:	f7fa f9fe 	bl	8002ce4 <HAL_GetTick>
 80088e8:	4602      	mov	r2, r0
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	1ad3      	subs	r3, r2, r3
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	d901      	bls.n	80088f6 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80088f2:	2303      	movs	r3, #3
 80088f4:	e077      	b.n	80089e6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80088f6:	4b3e      	ldr	r3, [pc, #248]	; (80089f0 <RCCEx_PLL2_Config+0x128>)
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1f0      	bne.n	80088e4 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8008902:	4b3b      	ldr	r3, [pc, #236]	; (80089f0 <RCCEx_PLL2_Config+0x128>)
 8008904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008906:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800890a:	f023 0303 	bic.w	r3, r3, #3
 800890e:	687a      	ldr	r2, [r7, #4]
 8008910:	6811      	ldr	r1, [r2, #0]
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	6852      	ldr	r2, [r2, #4]
 8008916:	3a01      	subs	r2, #1
 8008918:	0212      	lsls	r2, r2, #8
 800891a:	430a      	orrs	r2, r1
 800891c:	4934      	ldr	r1, [pc, #208]	; (80089f0 <RCCEx_PLL2_Config+0x128>)
 800891e:	4313      	orrs	r3, r2
 8008920:	62cb      	str	r3, [r1, #44]	; 0x2c
 8008922:	4b33      	ldr	r3, [pc, #204]	; (80089f0 <RCCEx_PLL2_Config+0x128>)
 8008924:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008926:	4b33      	ldr	r3, [pc, #204]	; (80089f4 <RCCEx_PLL2_Config+0x12c>)
 8008928:	4013      	ands	r3, r2
 800892a:	687a      	ldr	r2, [r7, #4]
 800892c:	6892      	ldr	r2, [r2, #8]
 800892e:	3a01      	subs	r2, #1
 8008930:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008934:	687a      	ldr	r2, [r7, #4]
 8008936:	68d2      	ldr	r2, [r2, #12]
 8008938:	3a01      	subs	r2, #1
 800893a:	0252      	lsls	r2, r2, #9
 800893c:	b292      	uxth	r2, r2
 800893e:	4311      	orrs	r1, r2
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	6912      	ldr	r2, [r2, #16]
 8008944:	3a01      	subs	r2, #1
 8008946:	0412      	lsls	r2, r2, #16
 8008948:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800894c:	4311      	orrs	r1, r2
 800894e:	687a      	ldr	r2, [r7, #4]
 8008950:	6952      	ldr	r2, [r2, #20]
 8008952:	3a01      	subs	r2, #1
 8008954:	0612      	lsls	r2, r2, #24
 8008956:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800895a:	430a      	orrs	r2, r1
 800895c:	4924      	ldr	r1, [pc, #144]	; (80089f0 <RCCEx_PLL2_Config+0x128>)
 800895e:	4313      	orrs	r3, r2
 8008960:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8008962:	4b23      	ldr	r3, [pc, #140]	; (80089f0 <RCCEx_PLL2_Config+0x128>)
 8008964:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008966:	f023 020c 	bic.w	r2, r3, #12
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	699b      	ldr	r3, [r3, #24]
 800896e:	4920      	ldr	r1, [pc, #128]	; (80089f0 <RCCEx_PLL2_Config+0x128>)
 8008970:	4313      	orrs	r3, r2
 8008972:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8008974:	4b1e      	ldr	r3, [pc, #120]	; (80089f0 <RCCEx_PLL2_Config+0x128>)
 8008976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6a1b      	ldr	r3, [r3, #32]
 800897c:	491c      	ldr	r1, [pc, #112]	; (80089f0 <RCCEx_PLL2_Config+0x128>)
 800897e:	4313      	orrs	r3, r2
 8008980:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8008982:	4b1b      	ldr	r3, [pc, #108]	; (80089f0 <RCCEx_PLL2_Config+0x128>)
 8008984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008986:	4a1a      	ldr	r2, [pc, #104]	; (80089f0 <RCCEx_PLL2_Config+0x128>)
 8008988:	f023 0310 	bic.w	r3, r3, #16
 800898c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800898e:	4b18      	ldr	r3, [pc, #96]	; (80089f0 <RCCEx_PLL2_Config+0x128>)
 8008990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008992:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008996:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800899a:	687a      	ldr	r2, [r7, #4]
 800899c:	69d2      	ldr	r2, [r2, #28]
 800899e:	00d2      	lsls	r2, r2, #3
 80089a0:	4913      	ldr	r1, [pc, #76]	; (80089f0 <RCCEx_PLL2_Config+0x128>)
 80089a2:	4313      	orrs	r3, r2
 80089a4:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80089a6:	4b12      	ldr	r3, [pc, #72]	; (80089f0 <RCCEx_PLL2_Config+0x128>)
 80089a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089aa:	4a11      	ldr	r2, [pc, #68]	; (80089f0 <RCCEx_PLL2_Config+0x128>)
 80089ac:	f043 0310 	orr.w	r3, r3, #16
 80089b0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80089b2:	4b0f      	ldr	r3, [pc, #60]	; (80089f0 <RCCEx_PLL2_Config+0x128>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a0e      	ldr	r2, [pc, #56]	; (80089f0 <RCCEx_PLL2_Config+0x128>)
 80089b8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80089bc:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80089be:	f7fa f991 	bl	8002ce4 <HAL_GetTick>
 80089c2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80089c4:	e008      	b.n	80089d8 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80089c6:	f7fa f98d 	bl	8002ce4 <HAL_GetTick>
 80089ca:	4602      	mov	r2, r0
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	1ad3      	subs	r3, r2, r3
 80089d0:	2b02      	cmp	r3, #2
 80089d2:	d901      	bls.n	80089d8 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80089d4:	2303      	movs	r3, #3
 80089d6:	e006      	b.n	80089e6 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80089d8:	4b05      	ldr	r3, [pc, #20]	; (80089f0 <RCCEx_PLL2_Config+0x128>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d0f0      	beq.n	80089c6 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80089e4:	2300      	movs	r3, #0

}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	46020c00 	.word	0x46020c00
 80089f4:	80800000 	.word	0x80800000

080089f8 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8008a00:	4b47      	ldr	r3, [pc, #284]	; (8008b20 <RCCEx_PLL3_Config+0x128>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a46      	ldr	r2, [pc, #280]	; (8008b20 <RCCEx_PLL3_Config+0x128>)
 8008a06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a0a:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008a0c:	f7fa f96a 	bl	8002ce4 <HAL_GetTick>
 8008a10:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a12:	e008      	b.n	8008a26 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008a14:	f7fa f966 	bl	8002ce4 <HAL_GetTick>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	1ad3      	subs	r3, r2, r3
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	d901      	bls.n	8008a26 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8008a22:	2303      	movs	r3, #3
 8008a24:	e077      	b.n	8008b16 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008a26:	4b3e      	ldr	r3, [pc, #248]	; (8008b20 <RCCEx_PLL3_Config+0x128>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1f0      	bne.n	8008a14 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8008a32:	4b3b      	ldr	r3, [pc, #236]	; (8008b20 <RCCEx_PLL3_Config+0x128>)
 8008a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a36:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008a3a:	f023 0303 	bic.w	r3, r3, #3
 8008a3e:	687a      	ldr	r2, [r7, #4]
 8008a40:	6811      	ldr	r1, [r2, #0]
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	6852      	ldr	r2, [r2, #4]
 8008a46:	3a01      	subs	r2, #1
 8008a48:	0212      	lsls	r2, r2, #8
 8008a4a:	430a      	orrs	r2, r1
 8008a4c:	4934      	ldr	r1, [pc, #208]	; (8008b20 <RCCEx_PLL3_Config+0x128>)
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	630b      	str	r3, [r1, #48]	; 0x30
 8008a52:	4b33      	ldr	r3, [pc, #204]	; (8008b20 <RCCEx_PLL3_Config+0x128>)
 8008a54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a56:	4b33      	ldr	r3, [pc, #204]	; (8008b24 <RCCEx_PLL3_Config+0x12c>)
 8008a58:	4013      	ands	r3, r2
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	6892      	ldr	r2, [r2, #8]
 8008a5e:	3a01      	subs	r2, #1
 8008a60:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	68d2      	ldr	r2, [r2, #12]
 8008a68:	3a01      	subs	r2, #1
 8008a6a:	0252      	lsls	r2, r2, #9
 8008a6c:	b292      	uxth	r2, r2
 8008a6e:	4311      	orrs	r1, r2
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	6912      	ldr	r2, [r2, #16]
 8008a74:	3a01      	subs	r2, #1
 8008a76:	0412      	lsls	r2, r2, #16
 8008a78:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8008a7c:	4311      	orrs	r1, r2
 8008a7e:	687a      	ldr	r2, [r7, #4]
 8008a80:	6952      	ldr	r2, [r2, #20]
 8008a82:	3a01      	subs	r2, #1
 8008a84:	0612      	lsls	r2, r2, #24
 8008a86:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8008a8a:	430a      	orrs	r2, r1
 8008a8c:	4924      	ldr	r1, [pc, #144]	; (8008b20 <RCCEx_PLL3_Config+0x128>)
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8008a92:	4b23      	ldr	r3, [pc, #140]	; (8008b20 <RCCEx_PLL3_Config+0x128>)
 8008a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a96:	f023 020c 	bic.w	r2, r3, #12
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	699b      	ldr	r3, [r3, #24]
 8008a9e:	4920      	ldr	r1, [pc, #128]	; (8008b20 <RCCEx_PLL3_Config+0x128>)
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8008aa4:	4b1e      	ldr	r3, [pc, #120]	; (8008b20 <RCCEx_PLL3_Config+0x128>)
 8008aa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6a1b      	ldr	r3, [r3, #32]
 8008aac:	491c      	ldr	r1, [pc, #112]	; (8008b20 <RCCEx_PLL3_Config+0x128>)
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8008ab2:	4b1b      	ldr	r3, [pc, #108]	; (8008b20 <RCCEx_PLL3_Config+0x128>)
 8008ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab6:	4a1a      	ldr	r2, [pc, #104]	; (8008b20 <RCCEx_PLL3_Config+0x128>)
 8008ab8:	f023 0310 	bic.w	r3, r3, #16
 8008abc:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008abe:	4b18      	ldr	r3, [pc, #96]	; (8008b20 <RCCEx_PLL3_Config+0x128>)
 8008ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ac2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008ac6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008aca:	687a      	ldr	r2, [r7, #4]
 8008acc:	69d2      	ldr	r2, [r2, #28]
 8008ace:	00d2      	lsls	r2, r2, #3
 8008ad0:	4913      	ldr	r1, [pc, #76]	; (8008b20 <RCCEx_PLL3_Config+0x128>)
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8008ad6:	4b12      	ldr	r3, [pc, #72]	; (8008b20 <RCCEx_PLL3_Config+0x128>)
 8008ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ada:	4a11      	ldr	r2, [pc, #68]	; (8008b20 <RCCEx_PLL3_Config+0x128>)
 8008adc:	f043 0310 	orr.w	r3, r3, #16
 8008ae0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8008ae2:	4b0f      	ldr	r3, [pc, #60]	; (8008b20 <RCCEx_PLL3_Config+0x128>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a0e      	ldr	r2, [pc, #56]	; (8008b20 <RCCEx_PLL3_Config+0x128>)
 8008ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008aec:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8008aee:	f7fa f8f9 	bl	8002ce4 <HAL_GetTick>
 8008af2:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008af4:	e008      	b.n	8008b08 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008af6:	f7fa f8f5 	bl	8002ce4 <HAL_GetTick>
 8008afa:	4602      	mov	r2, r0
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	1ad3      	subs	r3, r2, r3
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d901      	bls.n	8008b08 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8008b04:	2303      	movs	r3, #3
 8008b06:	e006      	b.n	8008b16 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008b08:	4b05      	ldr	r3, [pc, #20]	; (8008b20 <RCCEx_PLL3_Config+0x128>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d0f0      	beq.n	8008af6 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8008b14:	2300      	movs	r3, #0
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop
 8008b20:	46020c00 	.word	0x46020c00
 8008b24:	80800000 	.word	0x80800000

08008b28 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b084      	sub	sp, #16
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d101      	bne.n	8008b3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	e0dd      	b.n	8008cf6 <HAL_SPI_Init+0x1ce>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	4a70      	ldr	r2, [pc, #448]	; (8008d00 <HAL_SPI_Init+0x1d8>)
 8008b40:	4293      	cmp	r3, r2
 8008b42:	d004      	beq.n	8008b4e <HAL_SPI_Init+0x26>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	4a6e      	ldr	r2, [pc, #440]	; (8008d04 <HAL_SPI_Init+0x1dc>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	e000      	b.n	8008b50 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8008b4e:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2200      	movs	r2, #0
 8008b54:	629a      	str	r2, [r3, #40]	; 0x28

  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a69      	ldr	r2, [pc, #420]	; (8008d00 <HAL_SPI_Init+0x1d8>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d004      	beq.n	8008b6a <HAL_SPI_Init+0x42>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a67      	ldr	r2, [pc, #412]	; (8008d04 <HAL_SPI_Init+0x1dc>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d105      	bne.n	8008b76 <HAL_SPI_Init+0x4e>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	68db      	ldr	r3, [r3, #12]
 8008b6e:	2b0f      	cmp	r3, #15
 8008b70:	d901      	bls.n	8008b76 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8008b72:	2301      	movs	r3, #1
 8008b74:	e0bf      	b.n	8008cf6 <HAL_SPI_Init+0x1ce>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 f8ce 	bl	8008d18 <SPI_GetPacketSize>
 8008b7c:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a5f      	ldr	r2, [pc, #380]	; (8008d00 <HAL_SPI_Init+0x1d8>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d004      	beq.n	8008b92 <HAL_SPI_Init+0x6a>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a5d      	ldr	r2, [pc, #372]	; (8008d04 <HAL_SPI_Init+0x1dc>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d102      	bne.n	8008b98 <HAL_SPI_Init+0x70>
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2b08      	cmp	r3, #8
 8008b96:	d816      	bhi.n	8008bc6 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008b9c:	4a5a      	ldr	r2, [pc, #360]	; (8008d08 <HAL_SPI_Init+0x1e0>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d00e      	beq.n	8008bc0 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a59      	ldr	r2, [pc, #356]	; (8008d0c <HAL_SPI_Init+0x1e4>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d009      	beq.n	8008bc0 <HAL_SPI_Init+0x98>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	4a57      	ldr	r2, [pc, #348]	; (8008d10 <HAL_SPI_Init+0x1e8>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d004      	beq.n	8008bc0 <HAL_SPI_Init+0x98>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	4a56      	ldr	r2, [pc, #344]	; (8008d14 <HAL_SPI_Init+0x1ec>)
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d104      	bne.n	8008bca <HAL_SPI_Init+0xa2>
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2b10      	cmp	r3, #16
 8008bc4:	d901      	bls.n	8008bca <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e095      	b.n	8008cf6 <HAL_SPI_Init+0x1ce>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d106      	bne.n	8008be4 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	2200      	movs	r2, #0
 8008bda:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f7f9 fd3c 	bl	800265c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2202      	movs	r2, #2
 8008be8:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f022 0201 	bic.w	r2, r2, #1
 8008bfa:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008c06:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	699b      	ldr	r3, [r3, #24]
 8008c0c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c10:	d119      	bne.n	8008c46 <HAL_SPI_Init+0x11e>
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c1a:	d103      	bne.n	8008c24 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d008      	beq.n	8008c36 <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d10c      	bne.n	8008c46 <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008c30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c34:	d107      	bne.n	8008c46 <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	681a      	ldr	r2, [r3, #0]
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008c44:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	69da      	ldr	r2, [r3, #28]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c4e:	431a      	orrs	r2, r3
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	431a      	orrs	r2, r3
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c58:	ea42 0103 	orr.w	r1, r2, r3
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	68da      	ldr	r2, [r3, #12]
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	430a      	orrs	r2, r1
 8008c66:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c70:	431a      	orrs	r2, r3
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c76:	431a      	orrs	r2, r3
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	699b      	ldr	r3, [r3, #24]
 8008c7c:	431a      	orrs	r2, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	431a      	orrs	r2, r3
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	695b      	ldr	r3, [r3, #20]
 8008c88:	431a      	orrs	r2, r3
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a1b      	ldr	r3, [r3, #32]
 8008c8e:	431a      	orrs	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	431a      	orrs	r2, r3
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c9a:	431a      	orrs	r2, r3
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	431a      	orrs	r2, r3
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ca6:	431a      	orrs	r2, r3
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cac:	431a      	orrs	r2, r3
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008cb2:	ea42 0103 	orr.w	r1, r2, r3
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	430a      	orrs	r2, r1
 8008cc0:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d00a      	beq.n	8008ce4 <HAL_SPI_Init+0x1bc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	430a      	orrs	r2, r1
 8008ce2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8008cf4:	2300      	movs	r3, #0
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3710      	adds	r7, #16
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	46002000 	.word	0x46002000
 8008d04:	56002000 	.word	0x56002000
 8008d08:	40013000 	.word	0x40013000
 8008d0c:	50013000 	.word	0x50013000
 8008d10:	40003800 	.word	0x40003800
 8008d14:	50003800 	.word	0x50003800

08008d18 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b085      	sub	sp, #20
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d24:	095b      	lsrs	r3, r3, #5
 8008d26:	3301      	adds	r3, #1
 8008d28:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	68db      	ldr	r3, [r3, #12]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	3307      	adds	r3, #7
 8008d36:	08db      	lsrs	r3, r3, #3
 8008d38:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	fb02 f303 	mul.w	r3, r2, r3
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	3714      	adds	r7, #20
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr

08008d4e <HAL_SPIEx_SetConfigAutonomousMode>:
  * @param  sConfig Pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi, SPI_AutonomousModeConfTypeDef *sConfig)
{
 8008d4e:	b480      	push	{r7}
 8008d50:	b083      	sub	sp, #12
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
 8008d56:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d12e      	bne.n	8008dc2 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d101      	bne.n	8008d72 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8008d6e:	2302      	movs	r3, #2
 8008d70:	e028      	b.n	8008dc4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2201      	movs	r2, #1
 8008d76:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2202      	movs	r2, #2
 8008d7e:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));

    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f022 0201 	bic.w	r2, r2, #1
 8008d90:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	681a      	ldr	r2, [r3, #0]
 8008d96:	683b      	ldr	r3, [r7, #0]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8008d9e:	ea42 0103 	orr.w	r1, r2, r3
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	689a      	ldr	r2, [r3, #8]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	430a      	orrs	r2, r1
 8008dac:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2201      	movs	r2, #1
 8008db2:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	e000      	b.n	8008dc4 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8008dc2:	2301      	movs	r3, #1
  }
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	370c      	adds	r7, #12
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dce:	4770      	bx	lr

08008dd0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008dd0:	b480      	push	{r7}
 8008dd2:	b085      	sub	sp, #20
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008dde:	b2db      	uxtb	r3, r3
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d001      	beq.n	8008de8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008de4:	2301      	movs	r3, #1
 8008de6:	e06a      	b.n	8008ebe <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2202      	movs	r2, #2
 8008dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a35      	ldr	r2, [pc, #212]	; (8008ecc <HAL_TIM_Base_Start+0xfc>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d040      	beq.n	8008e7c <HAL_TIM_Base_Start+0xac>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a34      	ldr	r2, [pc, #208]	; (8008ed0 <HAL_TIM_Base_Start+0x100>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d03b      	beq.n	8008e7c <HAL_TIM_Base_Start+0xac>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e0c:	d036      	beq.n	8008e7c <HAL_TIM_Base_Start+0xac>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008e16:	d031      	beq.n	8008e7c <HAL_TIM_Base_Start+0xac>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a2d      	ldr	r2, [pc, #180]	; (8008ed4 <HAL_TIM_Base_Start+0x104>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d02c      	beq.n	8008e7c <HAL_TIM_Base_Start+0xac>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a2c      	ldr	r2, [pc, #176]	; (8008ed8 <HAL_TIM_Base_Start+0x108>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d027      	beq.n	8008e7c <HAL_TIM_Base_Start+0xac>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a2a      	ldr	r2, [pc, #168]	; (8008edc <HAL_TIM_Base_Start+0x10c>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d022      	beq.n	8008e7c <HAL_TIM_Base_Start+0xac>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a29      	ldr	r2, [pc, #164]	; (8008ee0 <HAL_TIM_Base_Start+0x110>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d01d      	beq.n	8008e7c <HAL_TIM_Base_Start+0xac>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a27      	ldr	r2, [pc, #156]	; (8008ee4 <HAL_TIM_Base_Start+0x114>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d018      	beq.n	8008e7c <HAL_TIM_Base_Start+0xac>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a26      	ldr	r2, [pc, #152]	; (8008ee8 <HAL_TIM_Base_Start+0x118>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d013      	beq.n	8008e7c <HAL_TIM_Base_Start+0xac>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a24      	ldr	r2, [pc, #144]	; (8008eec <HAL_TIM_Base_Start+0x11c>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d00e      	beq.n	8008e7c <HAL_TIM_Base_Start+0xac>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a23      	ldr	r2, [pc, #140]	; (8008ef0 <HAL_TIM_Base_Start+0x120>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d009      	beq.n	8008e7c <HAL_TIM_Base_Start+0xac>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a21      	ldr	r2, [pc, #132]	; (8008ef4 <HAL_TIM_Base_Start+0x124>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d004      	beq.n	8008e7c <HAL_TIM_Base_Start+0xac>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a20      	ldr	r2, [pc, #128]	; (8008ef8 <HAL_TIM_Base_Start+0x128>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d115      	bne.n	8008ea8 <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	689a      	ldr	r2, [r3, #8]
 8008e82:	4b1e      	ldr	r3, [pc, #120]	; (8008efc <HAL_TIM_Base_Start+0x12c>)
 8008e84:	4013      	ands	r3, r2
 8008e86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	2b06      	cmp	r3, #6
 8008e8c:	d015      	beq.n	8008eba <HAL_TIM_Base_Start+0xea>
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e94:	d011      	beq.n	8008eba <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	681a      	ldr	r2, [r3, #0]
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f042 0201 	orr.w	r2, r2, #1
 8008ea4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ea6:	e008      	b.n	8008eba <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f042 0201 	orr.w	r2, r2, #1
 8008eb6:	601a      	str	r2, [r3, #0]
 8008eb8:	e000      	b.n	8008ebc <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008eba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ebc:	2300      	movs	r3, #0
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3714      	adds	r7, #20
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	40012c00 	.word	0x40012c00
 8008ed0:	50012c00 	.word	0x50012c00
 8008ed4:	40000400 	.word	0x40000400
 8008ed8:	50000400 	.word	0x50000400
 8008edc:	40000800 	.word	0x40000800
 8008ee0:	50000800 	.word	0x50000800
 8008ee4:	40000c00 	.word	0x40000c00
 8008ee8:	50000c00 	.word	0x50000c00
 8008eec:	40013400 	.word	0x40013400
 8008ef0:	50013400 	.word	0x50013400
 8008ef4:	40014000 	.word	0x40014000
 8008ef8:	50014000 	.word	0x50014000
 8008efc:	00010007 	.word	0x00010007

08008f00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b082      	sub	sp, #8
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d101      	bne.n	8008f12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e049      	b.n	8008fa6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d106      	bne.n	8008f2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2200      	movs	r2, #0
 8008f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f7f9 fc28 	bl	800277c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2202      	movs	r2, #2
 8008f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681a      	ldr	r2, [r3, #0]
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	3304      	adds	r3, #4
 8008f3c:	4619      	mov	r1, r3
 8008f3e:	4610      	mov	r0, r2
 8008f40:	f000 fc4e 	bl	80097e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2201      	movs	r2, #1
 8008f48:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2201      	movs	r2, #1
 8008f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2201      	movs	r2, #1
 8008f58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2201      	movs	r2, #1
 8008f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	2201      	movs	r2, #1
 8008f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2201      	movs	r2, #1
 8008f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	2201      	movs	r2, #1
 8008f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2201      	movs	r2, #1
 8008f90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2201      	movs	r2, #1
 8008fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008fa4:	2300      	movs	r3, #0
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3708      	adds	r7, #8
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}
	...

08008fb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b084      	sub	sp, #16
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
 8008fb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d109      	bne.n	8008fd4 <HAL_TIM_PWM_Start+0x24>
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	2b01      	cmp	r3, #1
 8008fca:	bf14      	ite	ne
 8008fcc:	2301      	movne	r3, #1
 8008fce:	2300      	moveq	r3, #0
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	e03c      	b.n	800904e <HAL_TIM_PWM_Start+0x9e>
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	2b04      	cmp	r3, #4
 8008fd8:	d109      	bne.n	8008fee <HAL_TIM_PWM_Start+0x3e>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	2b01      	cmp	r3, #1
 8008fe4:	bf14      	ite	ne
 8008fe6:	2301      	movne	r3, #1
 8008fe8:	2300      	moveq	r3, #0
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	e02f      	b.n	800904e <HAL_TIM_PWM_Start+0x9e>
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	2b08      	cmp	r3, #8
 8008ff2:	d109      	bne.n	8009008 <HAL_TIM_PWM_Start+0x58>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ffa:	b2db      	uxtb	r3, r3
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	bf14      	ite	ne
 8009000:	2301      	movne	r3, #1
 8009002:	2300      	moveq	r3, #0
 8009004:	b2db      	uxtb	r3, r3
 8009006:	e022      	b.n	800904e <HAL_TIM_PWM_Start+0x9e>
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	2b0c      	cmp	r3, #12
 800900c:	d109      	bne.n	8009022 <HAL_TIM_PWM_Start+0x72>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009014:	b2db      	uxtb	r3, r3
 8009016:	2b01      	cmp	r3, #1
 8009018:	bf14      	ite	ne
 800901a:	2301      	movne	r3, #1
 800901c:	2300      	moveq	r3, #0
 800901e:	b2db      	uxtb	r3, r3
 8009020:	e015      	b.n	800904e <HAL_TIM_PWM_Start+0x9e>
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	2b10      	cmp	r3, #16
 8009026:	d109      	bne.n	800903c <HAL_TIM_PWM_Start+0x8c>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800902e:	b2db      	uxtb	r3, r3
 8009030:	2b01      	cmp	r3, #1
 8009032:	bf14      	ite	ne
 8009034:	2301      	movne	r3, #1
 8009036:	2300      	moveq	r3, #0
 8009038:	b2db      	uxtb	r3, r3
 800903a:	e008      	b.n	800904e <HAL_TIM_PWM_Start+0x9e>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009042:	b2db      	uxtb	r3, r3
 8009044:	2b01      	cmp	r3, #1
 8009046:	bf14      	ite	ne
 8009048:	2301      	movne	r3, #1
 800904a:	2300      	moveq	r3, #0
 800904c:	b2db      	uxtb	r3, r3
 800904e:	2b00      	cmp	r3, #0
 8009050:	d001      	beq.n	8009056 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009052:	2301      	movs	r3, #1
 8009054:	e0d8      	b.n	8009208 <HAL_TIM_PWM_Start+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d104      	bne.n	8009066 <HAL_TIM_PWM_Start+0xb6>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2202      	movs	r2, #2
 8009060:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009064:	e023      	b.n	80090ae <HAL_TIM_PWM_Start+0xfe>
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	2b04      	cmp	r3, #4
 800906a:	d104      	bne.n	8009076 <HAL_TIM_PWM_Start+0xc6>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2202      	movs	r2, #2
 8009070:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009074:	e01b      	b.n	80090ae <HAL_TIM_PWM_Start+0xfe>
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	2b08      	cmp	r3, #8
 800907a:	d104      	bne.n	8009086 <HAL_TIM_PWM_Start+0xd6>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2202      	movs	r2, #2
 8009080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009084:	e013      	b.n	80090ae <HAL_TIM_PWM_Start+0xfe>
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	2b0c      	cmp	r3, #12
 800908a:	d104      	bne.n	8009096 <HAL_TIM_PWM_Start+0xe6>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2202      	movs	r2, #2
 8009090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009094:	e00b      	b.n	80090ae <HAL_TIM_PWM_Start+0xfe>
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	2b10      	cmp	r3, #16
 800909a:	d104      	bne.n	80090a6 <HAL_TIM_PWM_Start+0xf6>
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2202      	movs	r2, #2
 80090a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090a4:	e003      	b.n	80090ae <HAL_TIM_PWM_Start+0xfe>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	2202      	movs	r2, #2
 80090aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	2201      	movs	r2, #1
 80090b4:	6839      	ldr	r1, [r7, #0]
 80090b6:	4618      	mov	r0, r3
 80090b8:	f001 f862 	bl	800a180 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	4a53      	ldr	r2, [pc, #332]	; (8009210 <HAL_TIM_PWM_Start+0x260>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d02c      	beq.n	8009120 <HAL_TIM_PWM_Start+0x170>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4a52      	ldr	r2, [pc, #328]	; (8009214 <HAL_TIM_PWM_Start+0x264>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d027      	beq.n	8009120 <HAL_TIM_PWM_Start+0x170>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a50      	ldr	r2, [pc, #320]	; (8009218 <HAL_TIM_PWM_Start+0x268>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d022      	beq.n	8009120 <HAL_TIM_PWM_Start+0x170>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a4f      	ldr	r2, [pc, #316]	; (800921c <HAL_TIM_PWM_Start+0x26c>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d01d      	beq.n	8009120 <HAL_TIM_PWM_Start+0x170>
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	4a4d      	ldr	r2, [pc, #308]	; (8009220 <HAL_TIM_PWM_Start+0x270>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d018      	beq.n	8009120 <HAL_TIM_PWM_Start+0x170>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	4a4c      	ldr	r2, [pc, #304]	; (8009224 <HAL_TIM_PWM_Start+0x274>)
 80090f4:	4293      	cmp	r3, r2
 80090f6:	d013      	beq.n	8009120 <HAL_TIM_PWM_Start+0x170>
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a4a      	ldr	r2, [pc, #296]	; (8009228 <HAL_TIM_PWM_Start+0x278>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d00e      	beq.n	8009120 <HAL_TIM_PWM_Start+0x170>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	4a49      	ldr	r2, [pc, #292]	; (800922c <HAL_TIM_PWM_Start+0x27c>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d009      	beq.n	8009120 <HAL_TIM_PWM_Start+0x170>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4a47      	ldr	r2, [pc, #284]	; (8009230 <HAL_TIM_PWM_Start+0x280>)
 8009112:	4293      	cmp	r3, r2
 8009114:	d004      	beq.n	8009120 <HAL_TIM_PWM_Start+0x170>
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	4a46      	ldr	r2, [pc, #280]	; (8009234 <HAL_TIM_PWM_Start+0x284>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d101      	bne.n	8009124 <HAL_TIM_PWM_Start+0x174>
 8009120:	2301      	movs	r3, #1
 8009122:	e000      	b.n	8009126 <HAL_TIM_PWM_Start+0x176>
 8009124:	2300      	movs	r3, #0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d007      	beq.n	800913a <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009138:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a34      	ldr	r2, [pc, #208]	; (8009210 <HAL_TIM_PWM_Start+0x260>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d040      	beq.n	80091c6 <HAL_TIM_PWM_Start+0x216>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	4a32      	ldr	r2, [pc, #200]	; (8009214 <HAL_TIM_PWM_Start+0x264>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d03b      	beq.n	80091c6 <HAL_TIM_PWM_Start+0x216>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009156:	d036      	beq.n	80091c6 <HAL_TIM_PWM_Start+0x216>
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009160:	d031      	beq.n	80091c6 <HAL_TIM_PWM_Start+0x216>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4a34      	ldr	r2, [pc, #208]	; (8009238 <HAL_TIM_PWM_Start+0x288>)
 8009168:	4293      	cmp	r3, r2
 800916a:	d02c      	beq.n	80091c6 <HAL_TIM_PWM_Start+0x216>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a32      	ldr	r2, [pc, #200]	; (800923c <HAL_TIM_PWM_Start+0x28c>)
 8009172:	4293      	cmp	r3, r2
 8009174:	d027      	beq.n	80091c6 <HAL_TIM_PWM_Start+0x216>
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	4a31      	ldr	r2, [pc, #196]	; (8009240 <HAL_TIM_PWM_Start+0x290>)
 800917c:	4293      	cmp	r3, r2
 800917e:	d022      	beq.n	80091c6 <HAL_TIM_PWM_Start+0x216>
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	4a2f      	ldr	r2, [pc, #188]	; (8009244 <HAL_TIM_PWM_Start+0x294>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d01d      	beq.n	80091c6 <HAL_TIM_PWM_Start+0x216>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a2e      	ldr	r2, [pc, #184]	; (8009248 <HAL_TIM_PWM_Start+0x298>)
 8009190:	4293      	cmp	r3, r2
 8009192:	d018      	beq.n	80091c6 <HAL_TIM_PWM_Start+0x216>
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a2c      	ldr	r2, [pc, #176]	; (800924c <HAL_TIM_PWM_Start+0x29c>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d013      	beq.n	80091c6 <HAL_TIM_PWM_Start+0x216>
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	4a1d      	ldr	r2, [pc, #116]	; (8009218 <HAL_TIM_PWM_Start+0x268>)
 80091a4:	4293      	cmp	r3, r2
 80091a6:	d00e      	beq.n	80091c6 <HAL_TIM_PWM_Start+0x216>
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a1b      	ldr	r2, [pc, #108]	; (800921c <HAL_TIM_PWM_Start+0x26c>)
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d009      	beq.n	80091c6 <HAL_TIM_PWM_Start+0x216>
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	4a1a      	ldr	r2, [pc, #104]	; (8009220 <HAL_TIM_PWM_Start+0x270>)
 80091b8:	4293      	cmp	r3, r2
 80091ba:	d004      	beq.n	80091c6 <HAL_TIM_PWM_Start+0x216>
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4a18      	ldr	r2, [pc, #96]	; (8009224 <HAL_TIM_PWM_Start+0x274>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d115      	bne.n	80091f2 <HAL_TIM_PWM_Start+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	689a      	ldr	r2, [r3, #8]
 80091cc:	4b20      	ldr	r3, [pc, #128]	; (8009250 <HAL_TIM_PWM_Start+0x2a0>)
 80091ce:	4013      	ands	r3, r2
 80091d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2b06      	cmp	r3, #6
 80091d6:	d015      	beq.n	8009204 <HAL_TIM_PWM_Start+0x254>
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091de:	d011      	beq.n	8009204 <HAL_TIM_PWM_Start+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	681a      	ldr	r2, [r3, #0]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f042 0201 	orr.w	r2, r2, #1
 80091ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091f0:	e008      	b.n	8009204 <HAL_TIM_PWM_Start+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	681a      	ldr	r2, [r3, #0]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f042 0201 	orr.w	r2, r2, #1
 8009200:	601a      	str	r2, [r3, #0]
 8009202:	e000      	b.n	8009206 <HAL_TIM_PWM_Start+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009204:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009206:	2300      	movs	r3, #0
}
 8009208:	4618      	mov	r0, r3
 800920a:	3710      	adds	r7, #16
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}
 8009210:	40012c00 	.word	0x40012c00
 8009214:	50012c00 	.word	0x50012c00
 8009218:	40013400 	.word	0x40013400
 800921c:	50013400 	.word	0x50013400
 8009220:	40014000 	.word	0x40014000
 8009224:	50014000 	.word	0x50014000
 8009228:	40014400 	.word	0x40014400
 800922c:	50014400 	.word	0x50014400
 8009230:	40014800 	.word	0x40014800
 8009234:	50014800 	.word	0x50014800
 8009238:	40000400 	.word	0x40000400
 800923c:	50000400 	.word	0x50000400
 8009240:	40000800 	.word	0x40000800
 8009244:	50000800 	.word	0x50000800
 8009248:	40000c00 	.word	0x40000c00
 800924c:	50000c00 	.word	0x50000c00
 8009250:	00010007 	.word	0x00010007

08009254 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	691b      	ldr	r3, [r3, #16]
 8009262:	f003 0302 	and.w	r3, r3, #2
 8009266:	2b02      	cmp	r3, #2
 8009268:	d122      	bne.n	80092b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	f003 0302 	and.w	r3, r3, #2
 8009274:	2b02      	cmp	r3, #2
 8009276:	d11b      	bne.n	80092b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f06f 0202 	mvn.w	r2, #2
 8009280:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2201      	movs	r2, #1
 8009286:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	699b      	ldr	r3, [r3, #24]
 800928e:	f003 0303 	and.w	r3, r3, #3
 8009292:	2b00      	cmp	r3, #0
 8009294:	d003      	beq.n	800929e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f000 fa84 	bl	80097a4 <HAL_TIM_IC_CaptureCallback>
 800929c:	e005      	b.n	80092aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	f000 fa76 	bl	8009790 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 fa87 	bl	80097b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2200      	movs	r2, #0
 80092ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	691b      	ldr	r3, [r3, #16]
 80092b6:	f003 0304 	and.w	r3, r3, #4
 80092ba:	2b04      	cmp	r3, #4
 80092bc:	d122      	bne.n	8009304 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	f003 0304 	and.w	r3, r3, #4
 80092c8:	2b04      	cmp	r3, #4
 80092ca:	d11b      	bne.n	8009304 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f06f 0204 	mvn.w	r2, #4
 80092d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2202      	movs	r2, #2
 80092da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	699b      	ldr	r3, [r3, #24]
 80092e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d003      	beq.n	80092f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 fa5a 	bl	80097a4 <HAL_TIM_IC_CaptureCallback>
 80092f0:	e005      	b.n	80092fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f000 fa4c 	bl	8009790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 fa5d 	bl	80097b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2200      	movs	r2, #0
 8009302:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	691b      	ldr	r3, [r3, #16]
 800930a:	f003 0308 	and.w	r3, r3, #8
 800930e:	2b08      	cmp	r3, #8
 8009310:	d122      	bne.n	8009358 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	68db      	ldr	r3, [r3, #12]
 8009318:	f003 0308 	and.w	r3, r3, #8
 800931c:	2b08      	cmp	r3, #8
 800931e:	d11b      	bne.n	8009358 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f06f 0208 	mvn.w	r2, #8
 8009328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2204      	movs	r2, #4
 800932e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	69db      	ldr	r3, [r3, #28]
 8009336:	f003 0303 	and.w	r3, r3, #3
 800933a:	2b00      	cmp	r3, #0
 800933c:	d003      	beq.n	8009346 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 fa30 	bl	80097a4 <HAL_TIM_IC_CaptureCallback>
 8009344:	e005      	b.n	8009352 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f000 fa22 	bl	8009790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f000 fa33 	bl	80097b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	691b      	ldr	r3, [r3, #16]
 800935e:	f003 0310 	and.w	r3, r3, #16
 8009362:	2b10      	cmp	r3, #16
 8009364:	d122      	bne.n	80093ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68db      	ldr	r3, [r3, #12]
 800936c:	f003 0310 	and.w	r3, r3, #16
 8009370:	2b10      	cmp	r3, #16
 8009372:	d11b      	bne.n	80093ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	f06f 0210 	mvn.w	r2, #16
 800937c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2208      	movs	r2, #8
 8009382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	69db      	ldr	r3, [r3, #28]
 800938a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800938e:	2b00      	cmp	r3, #0
 8009390:	d003      	beq.n	800939a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009392:	6878      	ldr	r0, [r7, #4]
 8009394:	f000 fa06 	bl	80097a4 <HAL_TIM_IC_CaptureCallback>
 8009398:	e005      	b.n	80093a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f000 f9f8 	bl	8009790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f000 fa09 	bl	80097b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2200      	movs	r2, #0
 80093aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	691b      	ldr	r3, [r3, #16]
 80093b2:	f003 0301 	and.w	r3, r3, #1
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d10e      	bne.n	80093d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	68db      	ldr	r3, [r3, #12]
 80093c0:	f003 0301 	and.w	r3, r3, #1
 80093c4:	2b01      	cmp	r3, #1
 80093c6:	d107      	bne.n	80093d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f06f 0201 	mvn.w	r2, #1
 80093d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	f000 f9d2 	bl	800977c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	691b      	ldr	r3, [r3, #16]
 80093de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093e2:	2b80      	cmp	r3, #128	; 0x80
 80093e4:	d10e      	bne.n	8009404 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093f0:	2b80      	cmp	r3, #128	; 0x80
 80093f2:	d107      	bne.n	8009404 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80093fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 ffb0 	bl	800a364 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	691b      	ldr	r3, [r3, #16]
 800940a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800940e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009412:	d10e      	bne.n	8009432 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800941e:	2b80      	cmp	r3, #128	; 0x80
 8009420:	d107      	bne.n	8009432 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800942a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f000 ffa3 	bl	800a378 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800943c:	2b40      	cmp	r3, #64	; 0x40
 800943e:	d10e      	bne.n	800945e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800944a:	2b40      	cmp	r3, #64	; 0x40
 800944c:	d107      	bne.n	800945e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009456:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 f9b7 	bl	80097cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	691b      	ldr	r3, [r3, #16]
 8009464:	f003 0320 	and.w	r3, r3, #32
 8009468:	2b20      	cmp	r3, #32
 800946a:	d10e      	bne.n	800948a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	f003 0320 	and.w	r3, r3, #32
 8009476:	2b20      	cmp	r3, #32
 8009478:	d107      	bne.n	800948a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f06f 0220 	mvn.w	r2, #32
 8009482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 ff63 	bl	800a350 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	691b      	ldr	r3, [r3, #16]
 8009490:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009494:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009498:	d10f      	bne.n	80094ba <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	68db      	ldr	r3, [r3, #12]
 80094a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80094a4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094a8:	d107      	bne.n	80094ba <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80094b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	f000 ff69 	bl	800a38c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	691b      	ldr	r3, [r3, #16]
 80094c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094c8:	d10f      	bne.n	80094ea <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80094d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80094d8:	d107      	bne.n	80094ea <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80094e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80094e4:	6878      	ldr	r0, [r7, #4]
 80094e6:	f000 ff5b 	bl	800a3a0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	691b      	ldr	r3, [r3, #16]
 80094f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80094f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80094f8:	d10f      	bne.n	800951a <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	68db      	ldr	r3, [r3, #12]
 8009500:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009504:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009508:	d107      	bne.n	800951a <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8009512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 ff4d 	bl	800a3b4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	691b      	ldr	r3, [r3, #16]
 8009520:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009524:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009528:	d10f      	bne.n	800954a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009534:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009538:	d107      	bne.n	800954a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8009542:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009544:	6878      	ldr	r0, [r7, #4]
 8009546:	f000 ff3f 	bl	800a3c8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800954a:	bf00      	nop
 800954c:	3708      	adds	r7, #8
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
	...

08009554 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b086      	sub	sp, #24
 8009558:	af00      	add	r7, sp, #0
 800955a:	60f8      	str	r0, [r7, #12]
 800955c:	60b9      	str	r1, [r7, #8]
 800955e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009560:	2300      	movs	r3, #0
 8009562:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800956a:	2b01      	cmp	r3, #1
 800956c:	d101      	bne.n	8009572 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800956e:	2302      	movs	r3, #2
 8009570:	e0ff      	b.n	8009772 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2201      	movs	r2, #1
 8009576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2b14      	cmp	r3, #20
 800957e:	f200 80f0 	bhi.w	8009762 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8009582:	a201      	add	r2, pc, #4	; (adr r2, 8009588 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009588:	080095dd 	.word	0x080095dd
 800958c:	08009763 	.word	0x08009763
 8009590:	08009763 	.word	0x08009763
 8009594:	08009763 	.word	0x08009763
 8009598:	0800961d 	.word	0x0800961d
 800959c:	08009763 	.word	0x08009763
 80095a0:	08009763 	.word	0x08009763
 80095a4:	08009763 	.word	0x08009763
 80095a8:	0800965f 	.word	0x0800965f
 80095ac:	08009763 	.word	0x08009763
 80095b0:	08009763 	.word	0x08009763
 80095b4:	08009763 	.word	0x08009763
 80095b8:	0800969f 	.word	0x0800969f
 80095bc:	08009763 	.word	0x08009763
 80095c0:	08009763 	.word	0x08009763
 80095c4:	08009763 	.word	0x08009763
 80095c8:	080096e1 	.word	0x080096e1
 80095cc:	08009763 	.word	0x08009763
 80095d0:	08009763 	.word	0x08009763
 80095d4:	08009763 	.word	0x08009763
 80095d8:	08009721 	.word	0x08009721
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	68b9      	ldr	r1, [r7, #8]
 80095e2:	4618      	mov	r0, r3
 80095e4:	f000 f9f6 	bl	80099d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	699a      	ldr	r2, [r3, #24]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f042 0208 	orr.w	r2, r2, #8
 80095f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	699a      	ldr	r2, [r3, #24]
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	f022 0204 	bic.w	r2, r2, #4
 8009606:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	6999      	ldr	r1, [r3, #24]
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	691a      	ldr	r2, [r3, #16]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	430a      	orrs	r2, r1
 8009618:	619a      	str	r2, [r3, #24]
      break;
 800961a:	e0a5      	b.n	8009768 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	68b9      	ldr	r1, [r7, #8]
 8009622:	4618      	mov	r0, r3
 8009624:	f000 fa98 	bl	8009b58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	699a      	ldr	r2, [r3, #24]
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009636:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	699a      	ldr	r2, [r3, #24]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009646:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	6999      	ldr	r1, [r3, #24]
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	691b      	ldr	r3, [r3, #16]
 8009652:	021a      	lsls	r2, r3, #8
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	430a      	orrs	r2, r1
 800965a:	619a      	str	r2, [r3, #24]
      break;
 800965c:	e084      	b.n	8009768 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	68b9      	ldr	r1, [r7, #8]
 8009664:	4618      	mov	r0, r3
 8009666:	f000 fb27 	bl	8009cb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	69da      	ldr	r2, [r3, #28]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f042 0208 	orr.w	r2, r2, #8
 8009678:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	69da      	ldr	r2, [r3, #28]
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f022 0204 	bic.w	r2, r2, #4
 8009688:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	69d9      	ldr	r1, [r3, #28]
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	691a      	ldr	r2, [r3, #16]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	430a      	orrs	r2, r1
 800969a:	61da      	str	r2, [r3, #28]
      break;
 800969c:	e064      	b.n	8009768 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	68b9      	ldr	r1, [r7, #8]
 80096a4:	4618      	mov	r0, r3
 80096a6:	f000 fbb5 	bl	8009e14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	69da      	ldr	r2, [r3, #28]
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80096b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	69da      	ldr	r2, [r3, #28]
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	69d9      	ldr	r1, [r3, #28]
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	691b      	ldr	r3, [r3, #16]
 80096d4:	021a      	lsls	r2, r3, #8
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	430a      	orrs	r2, r1
 80096dc:	61da      	str	r2, [r3, #28]
      break;
 80096de:	e043      	b.n	8009768 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68b9      	ldr	r1, [r7, #8]
 80096e6:	4618      	mov	r0, r3
 80096e8:	f000 fc44 	bl	8009f74 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f042 0208 	orr.w	r2, r2, #8
 80096fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f022 0204 	bic.w	r2, r2, #4
 800970a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	691a      	ldr	r2, [r3, #16]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	430a      	orrs	r2, r1
 800971c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800971e:	e023      	b.n	8009768 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	68b9      	ldr	r1, [r7, #8]
 8009726:	4618      	mov	r0, r3
 8009728:	f000 fca6 	bl	800a078 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800973a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800974a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	691b      	ldr	r3, [r3, #16]
 8009756:	021a      	lsls	r2, r3, #8
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	430a      	orrs	r2, r1
 800975e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8009760:	e002      	b.n	8009768 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009762:	2301      	movs	r3, #1
 8009764:	75fb      	strb	r3, [r7, #23]
      break;
 8009766:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2200      	movs	r2, #0
 800976c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009770:	7dfb      	ldrb	r3, [r7, #23]
}
 8009772:	4618      	mov	r0, r3
 8009774:	3718      	adds	r7, #24
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop

0800977c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800977c:	b480      	push	{r7}
 800977e:	b083      	sub	sp, #12
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009784:	bf00      	nop
 8009786:	370c      	adds	r7, #12
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr

08009790 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009790:	b480      	push	{r7}
 8009792:	b083      	sub	sp, #12
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009798:	bf00      	nop
 800979a:	370c      	adds	r7, #12
 800979c:	46bd      	mov	sp, r7
 800979e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a2:	4770      	bx	lr

080097a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80097a4:	b480      	push	{r7}
 80097a6:	b083      	sub	sp, #12
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80097ac:	bf00      	nop
 80097ae:	370c      	adds	r7, #12
 80097b0:	46bd      	mov	sp, r7
 80097b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b6:	4770      	bx	lr

080097b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b083      	sub	sp, #12
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80097c0:	bf00      	nop
 80097c2:	370c      	adds	r7, #12
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80097d4:	bf00      	nop
 80097d6:	370c      	adds	r7, #12
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b085      	sub	sp, #20
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
 80097e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	4a68      	ldr	r2, [pc, #416]	; (8009994 <TIM_Base_SetConfig+0x1b4>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d02b      	beq.n	8009850 <TIM_Base_SetConfig+0x70>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4a67      	ldr	r2, [pc, #412]	; (8009998 <TIM_Base_SetConfig+0x1b8>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d027      	beq.n	8009850 <TIM_Base_SetConfig+0x70>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009806:	d023      	beq.n	8009850 <TIM_Base_SetConfig+0x70>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800980e:	d01f      	beq.n	8009850 <TIM_Base_SetConfig+0x70>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	4a62      	ldr	r2, [pc, #392]	; (800999c <TIM_Base_SetConfig+0x1bc>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d01b      	beq.n	8009850 <TIM_Base_SetConfig+0x70>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	4a61      	ldr	r2, [pc, #388]	; (80099a0 <TIM_Base_SetConfig+0x1c0>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d017      	beq.n	8009850 <TIM_Base_SetConfig+0x70>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	4a60      	ldr	r2, [pc, #384]	; (80099a4 <TIM_Base_SetConfig+0x1c4>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d013      	beq.n	8009850 <TIM_Base_SetConfig+0x70>
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	4a5f      	ldr	r2, [pc, #380]	; (80099a8 <TIM_Base_SetConfig+0x1c8>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d00f      	beq.n	8009850 <TIM_Base_SetConfig+0x70>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	4a5e      	ldr	r2, [pc, #376]	; (80099ac <TIM_Base_SetConfig+0x1cc>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d00b      	beq.n	8009850 <TIM_Base_SetConfig+0x70>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	4a5d      	ldr	r2, [pc, #372]	; (80099b0 <TIM_Base_SetConfig+0x1d0>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d007      	beq.n	8009850 <TIM_Base_SetConfig+0x70>
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	4a5c      	ldr	r2, [pc, #368]	; (80099b4 <TIM_Base_SetConfig+0x1d4>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d003      	beq.n	8009850 <TIM_Base_SetConfig+0x70>
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	4a5b      	ldr	r2, [pc, #364]	; (80099b8 <TIM_Base_SetConfig+0x1d8>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d108      	bne.n	8009862 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009856:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009858:	683b      	ldr	r3, [r7, #0]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	68fa      	ldr	r2, [r7, #12]
 800985e:	4313      	orrs	r3, r2
 8009860:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	4a4b      	ldr	r2, [pc, #300]	; (8009994 <TIM_Base_SetConfig+0x1b4>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d043      	beq.n	80098f2 <TIM_Base_SetConfig+0x112>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	4a4a      	ldr	r2, [pc, #296]	; (8009998 <TIM_Base_SetConfig+0x1b8>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d03f      	beq.n	80098f2 <TIM_Base_SetConfig+0x112>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009878:	d03b      	beq.n	80098f2 <TIM_Base_SetConfig+0x112>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009880:	d037      	beq.n	80098f2 <TIM_Base_SetConfig+0x112>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	4a45      	ldr	r2, [pc, #276]	; (800999c <TIM_Base_SetConfig+0x1bc>)
 8009886:	4293      	cmp	r3, r2
 8009888:	d033      	beq.n	80098f2 <TIM_Base_SetConfig+0x112>
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	4a44      	ldr	r2, [pc, #272]	; (80099a0 <TIM_Base_SetConfig+0x1c0>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d02f      	beq.n	80098f2 <TIM_Base_SetConfig+0x112>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	4a43      	ldr	r2, [pc, #268]	; (80099a4 <TIM_Base_SetConfig+0x1c4>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d02b      	beq.n	80098f2 <TIM_Base_SetConfig+0x112>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4a42      	ldr	r2, [pc, #264]	; (80099a8 <TIM_Base_SetConfig+0x1c8>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d027      	beq.n	80098f2 <TIM_Base_SetConfig+0x112>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	4a41      	ldr	r2, [pc, #260]	; (80099ac <TIM_Base_SetConfig+0x1cc>)
 80098a6:	4293      	cmp	r3, r2
 80098a8:	d023      	beq.n	80098f2 <TIM_Base_SetConfig+0x112>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4a40      	ldr	r2, [pc, #256]	; (80099b0 <TIM_Base_SetConfig+0x1d0>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d01f      	beq.n	80098f2 <TIM_Base_SetConfig+0x112>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	4a3f      	ldr	r2, [pc, #252]	; (80099b4 <TIM_Base_SetConfig+0x1d4>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d01b      	beq.n	80098f2 <TIM_Base_SetConfig+0x112>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4a3e      	ldr	r2, [pc, #248]	; (80099b8 <TIM_Base_SetConfig+0x1d8>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d017      	beq.n	80098f2 <TIM_Base_SetConfig+0x112>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4a3d      	ldr	r2, [pc, #244]	; (80099bc <TIM_Base_SetConfig+0x1dc>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d013      	beq.n	80098f2 <TIM_Base_SetConfig+0x112>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	4a3c      	ldr	r2, [pc, #240]	; (80099c0 <TIM_Base_SetConfig+0x1e0>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d00f      	beq.n	80098f2 <TIM_Base_SetConfig+0x112>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4a3b      	ldr	r2, [pc, #236]	; (80099c4 <TIM_Base_SetConfig+0x1e4>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d00b      	beq.n	80098f2 <TIM_Base_SetConfig+0x112>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4a3a      	ldr	r2, [pc, #232]	; (80099c8 <TIM_Base_SetConfig+0x1e8>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d007      	beq.n	80098f2 <TIM_Base_SetConfig+0x112>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4a39      	ldr	r2, [pc, #228]	; (80099cc <TIM_Base_SetConfig+0x1ec>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d003      	beq.n	80098f2 <TIM_Base_SetConfig+0x112>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	4a38      	ldr	r2, [pc, #224]	; (80099d0 <TIM_Base_SetConfig+0x1f0>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d108      	bne.n	8009904 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80098f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	68db      	ldr	r3, [r3, #12]
 80098fe:	68fa      	ldr	r2, [r7, #12]
 8009900:	4313      	orrs	r3, r2
 8009902:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	695b      	ldr	r3, [r3, #20]
 800990e:	4313      	orrs	r3, r2
 8009910:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	689a      	ldr	r2, [r3, #8]
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4a1a      	ldr	r2, [pc, #104]	; (8009994 <TIM_Base_SetConfig+0x1b4>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d023      	beq.n	8009978 <TIM_Base_SetConfig+0x198>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a19      	ldr	r2, [pc, #100]	; (8009998 <TIM_Base_SetConfig+0x1b8>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d01f      	beq.n	8009978 <TIM_Base_SetConfig+0x198>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	4a1e      	ldr	r2, [pc, #120]	; (80099b4 <TIM_Base_SetConfig+0x1d4>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d01b      	beq.n	8009978 <TIM_Base_SetConfig+0x198>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	4a1d      	ldr	r2, [pc, #116]	; (80099b8 <TIM_Base_SetConfig+0x1d8>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d017      	beq.n	8009978 <TIM_Base_SetConfig+0x198>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4a1c      	ldr	r2, [pc, #112]	; (80099bc <TIM_Base_SetConfig+0x1dc>)
 800994c:	4293      	cmp	r3, r2
 800994e:	d013      	beq.n	8009978 <TIM_Base_SetConfig+0x198>
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	4a1b      	ldr	r2, [pc, #108]	; (80099c0 <TIM_Base_SetConfig+0x1e0>)
 8009954:	4293      	cmp	r3, r2
 8009956:	d00f      	beq.n	8009978 <TIM_Base_SetConfig+0x198>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4a1a      	ldr	r2, [pc, #104]	; (80099c4 <TIM_Base_SetConfig+0x1e4>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d00b      	beq.n	8009978 <TIM_Base_SetConfig+0x198>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	4a19      	ldr	r2, [pc, #100]	; (80099c8 <TIM_Base_SetConfig+0x1e8>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d007      	beq.n	8009978 <TIM_Base_SetConfig+0x198>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	4a18      	ldr	r2, [pc, #96]	; (80099cc <TIM_Base_SetConfig+0x1ec>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d003      	beq.n	8009978 <TIM_Base_SetConfig+0x198>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	4a17      	ldr	r2, [pc, #92]	; (80099d0 <TIM_Base_SetConfig+0x1f0>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d103      	bne.n	8009980 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	691a      	ldr	r2, [r3, #16]
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2201      	movs	r2, #1
 8009984:	615a      	str	r2, [r3, #20]
}
 8009986:	bf00      	nop
 8009988:	3714      	adds	r7, #20
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop
 8009994:	40012c00 	.word	0x40012c00
 8009998:	50012c00 	.word	0x50012c00
 800999c:	40000400 	.word	0x40000400
 80099a0:	50000400 	.word	0x50000400
 80099a4:	40000800 	.word	0x40000800
 80099a8:	50000800 	.word	0x50000800
 80099ac:	40000c00 	.word	0x40000c00
 80099b0:	50000c00 	.word	0x50000c00
 80099b4:	40013400 	.word	0x40013400
 80099b8:	50013400 	.word	0x50013400
 80099bc:	40014000 	.word	0x40014000
 80099c0:	50014000 	.word	0x50014000
 80099c4:	40014400 	.word	0x40014400
 80099c8:	50014400 	.word	0x50014400
 80099cc:	40014800 	.word	0x40014800
 80099d0:	50014800 	.word	0x50014800

080099d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b087      	sub	sp, #28
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6a1b      	ldr	r3, [r3, #32]
 80099e2:	f023 0201 	bic.w	r2, r3, #1
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	6a1b      	ldr	r3, [r3, #32]
 80099ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	685b      	ldr	r3, [r3, #4]
 80099f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	699b      	ldr	r3, [r3, #24]
 80099fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f023 0303 	bic.w	r3, r3, #3
 8009a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	68fa      	ldr	r2, [r7, #12]
 8009a16:	4313      	orrs	r3, r2
 8009a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	f023 0302 	bic.w	r3, r3, #2
 8009a20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	697a      	ldr	r2, [r7, #20]
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	4a40      	ldr	r2, [pc, #256]	; (8009b30 <TIM_OC1_SetConfig+0x15c>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d023      	beq.n	8009a7c <TIM_OC1_SetConfig+0xa8>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	4a3f      	ldr	r2, [pc, #252]	; (8009b34 <TIM_OC1_SetConfig+0x160>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d01f      	beq.n	8009a7c <TIM_OC1_SetConfig+0xa8>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	4a3e      	ldr	r2, [pc, #248]	; (8009b38 <TIM_OC1_SetConfig+0x164>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d01b      	beq.n	8009a7c <TIM_OC1_SetConfig+0xa8>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	4a3d      	ldr	r2, [pc, #244]	; (8009b3c <TIM_OC1_SetConfig+0x168>)
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d017      	beq.n	8009a7c <TIM_OC1_SetConfig+0xa8>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	4a3c      	ldr	r2, [pc, #240]	; (8009b40 <TIM_OC1_SetConfig+0x16c>)
 8009a50:	4293      	cmp	r3, r2
 8009a52:	d013      	beq.n	8009a7c <TIM_OC1_SetConfig+0xa8>
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4a3b      	ldr	r2, [pc, #236]	; (8009b44 <TIM_OC1_SetConfig+0x170>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d00f      	beq.n	8009a7c <TIM_OC1_SetConfig+0xa8>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	4a3a      	ldr	r2, [pc, #232]	; (8009b48 <TIM_OC1_SetConfig+0x174>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d00b      	beq.n	8009a7c <TIM_OC1_SetConfig+0xa8>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	4a39      	ldr	r2, [pc, #228]	; (8009b4c <TIM_OC1_SetConfig+0x178>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d007      	beq.n	8009a7c <TIM_OC1_SetConfig+0xa8>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	4a38      	ldr	r2, [pc, #224]	; (8009b50 <TIM_OC1_SetConfig+0x17c>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d003      	beq.n	8009a7c <TIM_OC1_SetConfig+0xa8>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	4a37      	ldr	r2, [pc, #220]	; (8009b54 <TIM_OC1_SetConfig+0x180>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d10c      	bne.n	8009a96 <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	f023 0308 	bic.w	r3, r3, #8
 8009a82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	697a      	ldr	r2, [r7, #20]
 8009a8a:	4313      	orrs	r3, r2
 8009a8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	f023 0304 	bic.w	r3, r3, #4
 8009a94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	4a25      	ldr	r2, [pc, #148]	; (8009b30 <TIM_OC1_SetConfig+0x15c>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d023      	beq.n	8009ae6 <TIM_OC1_SetConfig+0x112>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	4a24      	ldr	r2, [pc, #144]	; (8009b34 <TIM_OC1_SetConfig+0x160>)
 8009aa2:	4293      	cmp	r3, r2
 8009aa4:	d01f      	beq.n	8009ae6 <TIM_OC1_SetConfig+0x112>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	4a23      	ldr	r2, [pc, #140]	; (8009b38 <TIM_OC1_SetConfig+0x164>)
 8009aaa:	4293      	cmp	r3, r2
 8009aac:	d01b      	beq.n	8009ae6 <TIM_OC1_SetConfig+0x112>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	4a22      	ldr	r2, [pc, #136]	; (8009b3c <TIM_OC1_SetConfig+0x168>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d017      	beq.n	8009ae6 <TIM_OC1_SetConfig+0x112>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	4a21      	ldr	r2, [pc, #132]	; (8009b40 <TIM_OC1_SetConfig+0x16c>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d013      	beq.n	8009ae6 <TIM_OC1_SetConfig+0x112>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	4a20      	ldr	r2, [pc, #128]	; (8009b44 <TIM_OC1_SetConfig+0x170>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d00f      	beq.n	8009ae6 <TIM_OC1_SetConfig+0x112>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	4a1f      	ldr	r2, [pc, #124]	; (8009b48 <TIM_OC1_SetConfig+0x174>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d00b      	beq.n	8009ae6 <TIM_OC1_SetConfig+0x112>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	4a1e      	ldr	r2, [pc, #120]	; (8009b4c <TIM_OC1_SetConfig+0x178>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d007      	beq.n	8009ae6 <TIM_OC1_SetConfig+0x112>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	4a1d      	ldr	r2, [pc, #116]	; (8009b50 <TIM_OC1_SetConfig+0x17c>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d003      	beq.n	8009ae6 <TIM_OC1_SetConfig+0x112>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4a1c      	ldr	r2, [pc, #112]	; (8009b54 <TIM_OC1_SetConfig+0x180>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d111      	bne.n	8009b0a <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009aec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009af4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009af6:	683b      	ldr	r3, [r7, #0]
 8009af8:	695b      	ldr	r3, [r3, #20]
 8009afa:	693a      	ldr	r2, [r7, #16]
 8009afc:	4313      	orrs	r3, r2
 8009afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	699b      	ldr	r3, [r3, #24]
 8009b04:	693a      	ldr	r2, [r7, #16]
 8009b06:	4313      	orrs	r3, r2
 8009b08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	693a      	ldr	r2, [r7, #16]
 8009b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	68fa      	ldr	r2, [r7, #12]
 8009b14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	685a      	ldr	r2, [r3, #4]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	697a      	ldr	r2, [r7, #20]
 8009b22:	621a      	str	r2, [r3, #32]
}
 8009b24:	bf00      	nop
 8009b26:	371c      	adds	r7, #28
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr
 8009b30:	40012c00 	.word	0x40012c00
 8009b34:	50012c00 	.word	0x50012c00
 8009b38:	40013400 	.word	0x40013400
 8009b3c:	50013400 	.word	0x50013400
 8009b40:	40014000 	.word	0x40014000
 8009b44:	50014000 	.word	0x50014000
 8009b48:	40014400 	.word	0x40014400
 8009b4c:	50014400 	.word	0x50014400
 8009b50:	40014800 	.word	0x40014800
 8009b54:	50014800 	.word	0x50014800

08009b58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b58:	b480      	push	{r7}
 8009b5a:	b087      	sub	sp, #28
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6a1b      	ldr	r3, [r3, #32]
 8009b66:	f023 0210 	bic.w	r2, r3, #16
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6a1b      	ldr	r3, [r3, #32]
 8009b72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	699b      	ldr	r3, [r3, #24]
 8009b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	021b      	lsls	r3, r3, #8
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	f023 0320 	bic.w	r3, r3, #32
 8009ba6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	689b      	ldr	r3, [r3, #8]
 8009bac:	011b      	lsls	r3, r3, #4
 8009bae:	697a      	ldr	r2, [r7, #20]
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	4a36      	ldr	r2, [pc, #216]	; (8009c90 <TIM_OC2_SetConfig+0x138>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d00b      	beq.n	8009bd4 <TIM_OC2_SetConfig+0x7c>
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	4a35      	ldr	r2, [pc, #212]	; (8009c94 <TIM_OC2_SetConfig+0x13c>)
 8009bc0:	4293      	cmp	r3, r2
 8009bc2:	d007      	beq.n	8009bd4 <TIM_OC2_SetConfig+0x7c>
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	4a34      	ldr	r2, [pc, #208]	; (8009c98 <TIM_OC2_SetConfig+0x140>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d003      	beq.n	8009bd4 <TIM_OC2_SetConfig+0x7c>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	4a33      	ldr	r2, [pc, #204]	; (8009c9c <TIM_OC2_SetConfig+0x144>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d10d      	bne.n	8009bf0 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	68db      	ldr	r3, [r3, #12]
 8009be0:	011b      	lsls	r3, r3, #4
 8009be2:	697a      	ldr	r2, [r7, #20]
 8009be4:	4313      	orrs	r3, r2
 8009be6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009bee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	4a27      	ldr	r2, [pc, #156]	; (8009c90 <TIM_OC2_SetConfig+0x138>)
 8009bf4:	4293      	cmp	r3, r2
 8009bf6:	d023      	beq.n	8009c40 <TIM_OC2_SetConfig+0xe8>
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	4a26      	ldr	r2, [pc, #152]	; (8009c94 <TIM_OC2_SetConfig+0x13c>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d01f      	beq.n	8009c40 <TIM_OC2_SetConfig+0xe8>
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	4a25      	ldr	r2, [pc, #148]	; (8009c98 <TIM_OC2_SetConfig+0x140>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d01b      	beq.n	8009c40 <TIM_OC2_SetConfig+0xe8>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	4a24      	ldr	r2, [pc, #144]	; (8009c9c <TIM_OC2_SetConfig+0x144>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d017      	beq.n	8009c40 <TIM_OC2_SetConfig+0xe8>
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	4a23      	ldr	r2, [pc, #140]	; (8009ca0 <TIM_OC2_SetConfig+0x148>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d013      	beq.n	8009c40 <TIM_OC2_SetConfig+0xe8>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	4a22      	ldr	r2, [pc, #136]	; (8009ca4 <TIM_OC2_SetConfig+0x14c>)
 8009c1c:	4293      	cmp	r3, r2
 8009c1e:	d00f      	beq.n	8009c40 <TIM_OC2_SetConfig+0xe8>
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	4a21      	ldr	r2, [pc, #132]	; (8009ca8 <TIM_OC2_SetConfig+0x150>)
 8009c24:	4293      	cmp	r3, r2
 8009c26:	d00b      	beq.n	8009c40 <TIM_OC2_SetConfig+0xe8>
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	4a20      	ldr	r2, [pc, #128]	; (8009cac <TIM_OC2_SetConfig+0x154>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d007      	beq.n	8009c40 <TIM_OC2_SetConfig+0xe8>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	4a1f      	ldr	r2, [pc, #124]	; (8009cb0 <TIM_OC2_SetConfig+0x158>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d003      	beq.n	8009c40 <TIM_OC2_SetConfig+0xe8>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	4a1e      	ldr	r2, [pc, #120]	; (8009cb4 <TIM_OC2_SetConfig+0x15c>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d113      	bne.n	8009c68 <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	695b      	ldr	r3, [r3, #20]
 8009c54:	009b      	lsls	r3, r3, #2
 8009c56:	693a      	ldr	r2, [r7, #16]
 8009c58:	4313      	orrs	r3, r2
 8009c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	699b      	ldr	r3, [r3, #24]
 8009c60:	009b      	lsls	r3, r3, #2
 8009c62:	693a      	ldr	r2, [r7, #16]
 8009c64:	4313      	orrs	r3, r2
 8009c66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	693a      	ldr	r2, [r7, #16]
 8009c6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	68fa      	ldr	r2, [r7, #12]
 8009c72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	685a      	ldr	r2, [r3, #4]
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	697a      	ldr	r2, [r7, #20]
 8009c80:	621a      	str	r2, [r3, #32]
}
 8009c82:	bf00      	nop
 8009c84:	371c      	adds	r7, #28
 8009c86:	46bd      	mov	sp, r7
 8009c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8c:	4770      	bx	lr
 8009c8e:	bf00      	nop
 8009c90:	40012c00 	.word	0x40012c00
 8009c94:	50012c00 	.word	0x50012c00
 8009c98:	40013400 	.word	0x40013400
 8009c9c:	50013400 	.word	0x50013400
 8009ca0:	40014000 	.word	0x40014000
 8009ca4:	50014000 	.word	0x50014000
 8009ca8:	40014400 	.word	0x40014400
 8009cac:	50014400 	.word	0x50014400
 8009cb0:	40014800 	.word	0x40014800
 8009cb4:	50014800 	.word	0x50014800

08009cb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009cb8:	b480      	push	{r7}
 8009cba:	b087      	sub	sp, #28
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6a1b      	ldr	r3, [r3, #32]
 8009cc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6a1b      	ldr	r3, [r3, #32]
 8009cd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	69db      	ldr	r3, [r3, #28]
 8009cde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f023 0303 	bic.w	r3, r3, #3
 8009cf2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	68fa      	ldr	r2, [r7, #12]
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009cfe:	697b      	ldr	r3, [r7, #20]
 8009d00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009d04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	021b      	lsls	r3, r3, #8
 8009d0c:	697a      	ldr	r2, [r7, #20]
 8009d0e:	4313      	orrs	r3, r2
 8009d10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	4a35      	ldr	r2, [pc, #212]	; (8009dec <TIM_OC3_SetConfig+0x134>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d00b      	beq.n	8009d32 <TIM_OC3_SetConfig+0x7a>
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	4a34      	ldr	r2, [pc, #208]	; (8009df0 <TIM_OC3_SetConfig+0x138>)
 8009d1e:	4293      	cmp	r3, r2
 8009d20:	d007      	beq.n	8009d32 <TIM_OC3_SetConfig+0x7a>
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	4a33      	ldr	r2, [pc, #204]	; (8009df4 <TIM_OC3_SetConfig+0x13c>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d003      	beq.n	8009d32 <TIM_OC3_SetConfig+0x7a>
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	4a32      	ldr	r2, [pc, #200]	; (8009df8 <TIM_OC3_SetConfig+0x140>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d10d      	bne.n	8009d4e <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009d32:	697b      	ldr	r3, [r7, #20]
 8009d34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009d38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	68db      	ldr	r3, [r3, #12]
 8009d3e:	021b      	lsls	r3, r3, #8
 8009d40:	697a      	ldr	r2, [r7, #20]
 8009d42:	4313      	orrs	r3, r2
 8009d44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009d46:	697b      	ldr	r3, [r7, #20]
 8009d48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009d4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	4a26      	ldr	r2, [pc, #152]	; (8009dec <TIM_OC3_SetConfig+0x134>)
 8009d52:	4293      	cmp	r3, r2
 8009d54:	d023      	beq.n	8009d9e <TIM_OC3_SetConfig+0xe6>
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	4a25      	ldr	r2, [pc, #148]	; (8009df0 <TIM_OC3_SetConfig+0x138>)
 8009d5a:	4293      	cmp	r3, r2
 8009d5c:	d01f      	beq.n	8009d9e <TIM_OC3_SetConfig+0xe6>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	4a24      	ldr	r2, [pc, #144]	; (8009df4 <TIM_OC3_SetConfig+0x13c>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	d01b      	beq.n	8009d9e <TIM_OC3_SetConfig+0xe6>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	4a23      	ldr	r2, [pc, #140]	; (8009df8 <TIM_OC3_SetConfig+0x140>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d017      	beq.n	8009d9e <TIM_OC3_SetConfig+0xe6>
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4a22      	ldr	r2, [pc, #136]	; (8009dfc <TIM_OC3_SetConfig+0x144>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d013      	beq.n	8009d9e <TIM_OC3_SetConfig+0xe6>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4a21      	ldr	r2, [pc, #132]	; (8009e00 <TIM_OC3_SetConfig+0x148>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d00f      	beq.n	8009d9e <TIM_OC3_SetConfig+0xe6>
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	4a20      	ldr	r2, [pc, #128]	; (8009e04 <TIM_OC3_SetConfig+0x14c>)
 8009d82:	4293      	cmp	r3, r2
 8009d84:	d00b      	beq.n	8009d9e <TIM_OC3_SetConfig+0xe6>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	4a1f      	ldr	r2, [pc, #124]	; (8009e08 <TIM_OC3_SetConfig+0x150>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d007      	beq.n	8009d9e <TIM_OC3_SetConfig+0xe6>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	4a1e      	ldr	r2, [pc, #120]	; (8009e0c <TIM_OC3_SetConfig+0x154>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d003      	beq.n	8009d9e <TIM_OC3_SetConfig+0xe6>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	4a1d      	ldr	r2, [pc, #116]	; (8009e10 <TIM_OC3_SetConfig+0x158>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d113      	bne.n	8009dc6 <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009d9e:	693b      	ldr	r3, [r7, #16]
 8009da0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009da4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009dac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	695b      	ldr	r3, [r3, #20]
 8009db2:	011b      	lsls	r3, r3, #4
 8009db4:	693a      	ldr	r2, [r7, #16]
 8009db6:	4313      	orrs	r3, r2
 8009db8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	699b      	ldr	r3, [r3, #24]
 8009dbe:	011b      	lsls	r3, r3, #4
 8009dc0:	693a      	ldr	r2, [r7, #16]
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	693a      	ldr	r2, [r7, #16]
 8009dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	68fa      	ldr	r2, [r7, #12]
 8009dd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	685a      	ldr	r2, [r3, #4]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	697a      	ldr	r2, [r7, #20]
 8009dde:	621a      	str	r2, [r3, #32]
}
 8009de0:	bf00      	nop
 8009de2:	371c      	adds	r7, #28
 8009de4:	46bd      	mov	sp, r7
 8009de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dea:	4770      	bx	lr
 8009dec:	40012c00 	.word	0x40012c00
 8009df0:	50012c00 	.word	0x50012c00
 8009df4:	40013400 	.word	0x40013400
 8009df8:	50013400 	.word	0x50013400
 8009dfc:	40014000 	.word	0x40014000
 8009e00:	50014000 	.word	0x50014000
 8009e04:	40014400 	.word	0x40014400
 8009e08:	50014400 	.word	0x50014400
 8009e0c:	40014800 	.word	0x40014800
 8009e10:	50014800 	.word	0x50014800

08009e14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b087      	sub	sp, #28
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6a1b      	ldr	r3, [r3, #32]
 8009e22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6a1b      	ldr	r3, [r3, #32]
 8009e2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	685b      	ldr	r3, [r3, #4]
 8009e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	69db      	ldr	r3, [r3, #28]
 8009e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	021b      	lsls	r3, r3, #8
 8009e56:	68fa      	ldr	r2, [r7, #12]
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009e62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	031b      	lsls	r3, r3, #12
 8009e6a:	697a      	ldr	r2, [r7, #20]
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	4a36      	ldr	r2, [pc, #216]	; (8009f4c <TIM_OC4_SetConfig+0x138>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d00b      	beq.n	8009e90 <TIM_OC4_SetConfig+0x7c>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	4a35      	ldr	r2, [pc, #212]	; (8009f50 <TIM_OC4_SetConfig+0x13c>)
 8009e7c:	4293      	cmp	r3, r2
 8009e7e:	d007      	beq.n	8009e90 <TIM_OC4_SetConfig+0x7c>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	4a34      	ldr	r2, [pc, #208]	; (8009f54 <TIM_OC4_SetConfig+0x140>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d003      	beq.n	8009e90 <TIM_OC4_SetConfig+0x7c>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	4a33      	ldr	r2, [pc, #204]	; (8009f58 <TIM_OC4_SetConfig+0x144>)
 8009e8c:	4293      	cmp	r3, r2
 8009e8e:	d10d      	bne.n	8009eac <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009e90:	697b      	ldr	r3, [r7, #20]
 8009e92:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009e96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	031b      	lsls	r3, r3, #12
 8009e9e:	697a      	ldr	r2, [r7, #20]
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009eaa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	4a27      	ldr	r2, [pc, #156]	; (8009f4c <TIM_OC4_SetConfig+0x138>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d023      	beq.n	8009efc <TIM_OC4_SetConfig+0xe8>
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	4a26      	ldr	r2, [pc, #152]	; (8009f50 <TIM_OC4_SetConfig+0x13c>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d01f      	beq.n	8009efc <TIM_OC4_SetConfig+0xe8>
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	4a25      	ldr	r2, [pc, #148]	; (8009f54 <TIM_OC4_SetConfig+0x140>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d01b      	beq.n	8009efc <TIM_OC4_SetConfig+0xe8>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	4a24      	ldr	r2, [pc, #144]	; (8009f58 <TIM_OC4_SetConfig+0x144>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d017      	beq.n	8009efc <TIM_OC4_SetConfig+0xe8>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	4a23      	ldr	r2, [pc, #140]	; (8009f5c <TIM_OC4_SetConfig+0x148>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d013      	beq.n	8009efc <TIM_OC4_SetConfig+0xe8>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	4a22      	ldr	r2, [pc, #136]	; (8009f60 <TIM_OC4_SetConfig+0x14c>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d00f      	beq.n	8009efc <TIM_OC4_SetConfig+0xe8>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a21      	ldr	r2, [pc, #132]	; (8009f64 <TIM_OC4_SetConfig+0x150>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d00b      	beq.n	8009efc <TIM_OC4_SetConfig+0xe8>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	4a20      	ldr	r2, [pc, #128]	; (8009f68 <TIM_OC4_SetConfig+0x154>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d007      	beq.n	8009efc <TIM_OC4_SetConfig+0xe8>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	4a1f      	ldr	r2, [pc, #124]	; (8009f6c <TIM_OC4_SetConfig+0x158>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d003      	beq.n	8009efc <TIM_OC4_SetConfig+0xe8>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	4a1e      	ldr	r2, [pc, #120]	; (8009f70 <TIM_OC4_SetConfig+0x15c>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d113      	bne.n	8009f24 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f02:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009f0a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	695b      	ldr	r3, [r3, #20]
 8009f10:	019b      	lsls	r3, r3, #6
 8009f12:	693a      	ldr	r2, [r7, #16]
 8009f14:	4313      	orrs	r3, r2
 8009f16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8009f18:	683b      	ldr	r3, [r7, #0]
 8009f1a:	699b      	ldr	r3, [r3, #24]
 8009f1c:	019b      	lsls	r3, r3, #6
 8009f1e:	693a      	ldr	r2, [r7, #16]
 8009f20:	4313      	orrs	r3, r2
 8009f22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	693a      	ldr	r2, [r7, #16]
 8009f28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	68fa      	ldr	r2, [r7, #12]
 8009f2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	685a      	ldr	r2, [r3, #4]
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	697a      	ldr	r2, [r7, #20]
 8009f3c:	621a      	str	r2, [r3, #32]
}
 8009f3e:	bf00      	nop
 8009f40:	371c      	adds	r7, #28
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr
 8009f4a:	bf00      	nop
 8009f4c:	40012c00 	.word	0x40012c00
 8009f50:	50012c00 	.word	0x50012c00
 8009f54:	40013400 	.word	0x40013400
 8009f58:	50013400 	.word	0x50013400
 8009f5c:	40014000 	.word	0x40014000
 8009f60:	50014000 	.word	0x50014000
 8009f64:	40014400 	.word	0x40014400
 8009f68:	50014400 	.word	0x50014400
 8009f6c:	40014800 	.word	0x40014800
 8009f70:	50014800 	.word	0x50014800

08009f74 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b087      	sub	sp, #28
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
 8009f7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	6a1b      	ldr	r3, [r3, #32]
 8009f82:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6a1b      	ldr	r3, [r3, #32]
 8009f8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009fa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	68fa      	ldr	r2, [r7, #12]
 8009fae:	4313      	orrs	r3, r2
 8009fb0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009fb8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	689b      	ldr	r3, [r3, #8]
 8009fbe:	041b      	lsls	r3, r3, #16
 8009fc0:	693a      	ldr	r2, [r7, #16]
 8009fc2:	4313      	orrs	r3, r2
 8009fc4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	4a21      	ldr	r2, [pc, #132]	; (800a050 <TIM_OC5_SetConfig+0xdc>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d023      	beq.n	800a016 <TIM_OC5_SetConfig+0xa2>
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	4a20      	ldr	r2, [pc, #128]	; (800a054 <TIM_OC5_SetConfig+0xe0>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d01f      	beq.n	800a016 <TIM_OC5_SetConfig+0xa2>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	4a1f      	ldr	r2, [pc, #124]	; (800a058 <TIM_OC5_SetConfig+0xe4>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d01b      	beq.n	800a016 <TIM_OC5_SetConfig+0xa2>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	4a1e      	ldr	r2, [pc, #120]	; (800a05c <TIM_OC5_SetConfig+0xe8>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d017      	beq.n	800a016 <TIM_OC5_SetConfig+0xa2>
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	4a1d      	ldr	r2, [pc, #116]	; (800a060 <TIM_OC5_SetConfig+0xec>)
 8009fea:	4293      	cmp	r3, r2
 8009fec:	d013      	beq.n	800a016 <TIM_OC5_SetConfig+0xa2>
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	4a1c      	ldr	r2, [pc, #112]	; (800a064 <TIM_OC5_SetConfig+0xf0>)
 8009ff2:	4293      	cmp	r3, r2
 8009ff4:	d00f      	beq.n	800a016 <TIM_OC5_SetConfig+0xa2>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	4a1b      	ldr	r2, [pc, #108]	; (800a068 <TIM_OC5_SetConfig+0xf4>)
 8009ffa:	4293      	cmp	r3, r2
 8009ffc:	d00b      	beq.n	800a016 <TIM_OC5_SetConfig+0xa2>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	4a1a      	ldr	r2, [pc, #104]	; (800a06c <TIM_OC5_SetConfig+0xf8>)
 800a002:	4293      	cmp	r3, r2
 800a004:	d007      	beq.n	800a016 <TIM_OC5_SetConfig+0xa2>
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	4a19      	ldr	r2, [pc, #100]	; (800a070 <TIM_OC5_SetConfig+0xfc>)
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d003      	beq.n	800a016 <TIM_OC5_SetConfig+0xa2>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	4a18      	ldr	r2, [pc, #96]	; (800a074 <TIM_OC5_SetConfig+0x100>)
 800a012:	4293      	cmp	r3, r2
 800a014:	d109      	bne.n	800a02a <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a01c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	695b      	ldr	r3, [r3, #20]
 800a022:	021b      	lsls	r3, r3, #8
 800a024:	697a      	ldr	r2, [r7, #20]
 800a026:	4313      	orrs	r3, r2
 800a028:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	697a      	ldr	r2, [r7, #20]
 800a02e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	68fa      	ldr	r2, [r7, #12]
 800a034:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	685a      	ldr	r2, [r3, #4]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	693a      	ldr	r2, [r7, #16]
 800a042:	621a      	str	r2, [r3, #32]
}
 800a044:	bf00      	nop
 800a046:	371c      	adds	r7, #28
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr
 800a050:	40012c00 	.word	0x40012c00
 800a054:	50012c00 	.word	0x50012c00
 800a058:	40013400 	.word	0x40013400
 800a05c:	50013400 	.word	0x50013400
 800a060:	40014000 	.word	0x40014000
 800a064:	50014000 	.word	0x50014000
 800a068:	40014400 	.word	0x40014400
 800a06c:	50014400 	.word	0x50014400
 800a070:	40014800 	.word	0x40014800
 800a074:	50014800 	.word	0x50014800

0800a078 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a078:	b480      	push	{r7}
 800a07a:	b087      	sub	sp, #28
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
 800a080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6a1b      	ldr	r3, [r3, #32]
 800a086:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6a1b      	ldr	r3, [r3, #32]
 800a092:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a09e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a0a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0ac:	683b      	ldr	r3, [r7, #0]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	021b      	lsls	r3, r3, #8
 800a0b2:	68fa      	ldr	r2, [r7, #12]
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a0be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	689b      	ldr	r3, [r3, #8]
 800a0c4:	051b      	lsls	r3, r3, #20
 800a0c6:	693a      	ldr	r2, [r7, #16]
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	4a22      	ldr	r2, [pc, #136]	; (800a158 <TIM_OC6_SetConfig+0xe0>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d023      	beq.n	800a11c <TIM_OC6_SetConfig+0xa4>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	4a21      	ldr	r2, [pc, #132]	; (800a15c <TIM_OC6_SetConfig+0xe4>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d01f      	beq.n	800a11c <TIM_OC6_SetConfig+0xa4>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	4a20      	ldr	r2, [pc, #128]	; (800a160 <TIM_OC6_SetConfig+0xe8>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d01b      	beq.n	800a11c <TIM_OC6_SetConfig+0xa4>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	4a1f      	ldr	r2, [pc, #124]	; (800a164 <TIM_OC6_SetConfig+0xec>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d017      	beq.n	800a11c <TIM_OC6_SetConfig+0xa4>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	4a1e      	ldr	r2, [pc, #120]	; (800a168 <TIM_OC6_SetConfig+0xf0>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d013      	beq.n	800a11c <TIM_OC6_SetConfig+0xa4>
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	4a1d      	ldr	r2, [pc, #116]	; (800a16c <TIM_OC6_SetConfig+0xf4>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d00f      	beq.n	800a11c <TIM_OC6_SetConfig+0xa4>
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	4a1c      	ldr	r2, [pc, #112]	; (800a170 <TIM_OC6_SetConfig+0xf8>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d00b      	beq.n	800a11c <TIM_OC6_SetConfig+0xa4>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	4a1b      	ldr	r2, [pc, #108]	; (800a174 <TIM_OC6_SetConfig+0xfc>)
 800a108:	4293      	cmp	r3, r2
 800a10a:	d007      	beq.n	800a11c <TIM_OC6_SetConfig+0xa4>
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	4a1a      	ldr	r2, [pc, #104]	; (800a178 <TIM_OC6_SetConfig+0x100>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d003      	beq.n	800a11c <TIM_OC6_SetConfig+0xa4>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	4a19      	ldr	r2, [pc, #100]	; (800a17c <TIM_OC6_SetConfig+0x104>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d109      	bne.n	800a130 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a11c:	697b      	ldr	r3, [r7, #20]
 800a11e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a122:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	695b      	ldr	r3, [r3, #20]
 800a128:	029b      	lsls	r3, r3, #10
 800a12a:	697a      	ldr	r2, [r7, #20]
 800a12c:	4313      	orrs	r3, r2
 800a12e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	697a      	ldr	r2, [r7, #20]
 800a134:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	68fa      	ldr	r2, [r7, #12]
 800a13a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	685a      	ldr	r2, [r3, #4]
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	693a      	ldr	r2, [r7, #16]
 800a148:	621a      	str	r2, [r3, #32]
}
 800a14a:	bf00      	nop
 800a14c:	371c      	adds	r7, #28
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr
 800a156:	bf00      	nop
 800a158:	40012c00 	.word	0x40012c00
 800a15c:	50012c00 	.word	0x50012c00
 800a160:	40013400 	.word	0x40013400
 800a164:	50013400 	.word	0x50013400
 800a168:	40014000 	.word	0x40014000
 800a16c:	50014000 	.word	0x50014000
 800a170:	40014400 	.word	0x40014400
 800a174:	50014400 	.word	0x50014400
 800a178:	40014800 	.word	0x40014800
 800a17c:	50014800 	.word	0x50014800

0800a180 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a180:	b480      	push	{r7}
 800a182:	b087      	sub	sp, #28
 800a184:	af00      	add	r7, sp, #0
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	60b9      	str	r1, [r7, #8]
 800a18a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a18c:	68bb      	ldr	r3, [r7, #8]
 800a18e:	f003 031f 	and.w	r3, r3, #31
 800a192:	2201      	movs	r2, #1
 800a194:	fa02 f303 	lsl.w	r3, r2, r3
 800a198:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	6a1a      	ldr	r2, [r3, #32]
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	43db      	mvns	r3, r3
 800a1a2:	401a      	ands	r2, r3
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	6a1a      	ldr	r2, [r3, #32]
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	f003 031f 	and.w	r3, r3, #31
 800a1b2:	6879      	ldr	r1, [r7, #4]
 800a1b4:	fa01 f303 	lsl.w	r3, r1, r3
 800a1b8:	431a      	orrs	r2, r3
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	621a      	str	r2, [r3, #32]
}
 800a1be:	bf00      	nop
 800a1c0:	371c      	adds	r7, #28
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c8:	4770      	bx	lr
	...

0800a1cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b085      	sub	sp, #20
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
 800a1d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1dc:	2b01      	cmp	r3, #1
 800a1de:	d101      	bne.n	800a1e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a1e0:	2302      	movs	r3, #2
 800a1e2:	e097      	b.n	800a314 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2202      	movs	r2, #2
 800a1f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	689b      	ldr	r3, [r3, #8]
 800a202:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4a45      	ldr	r2, [pc, #276]	; (800a320 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d00e      	beq.n	800a22c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4a44      	ldr	r2, [pc, #272]	; (800a324 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d009      	beq.n	800a22c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	4a42      	ldr	r2, [pc, #264]	; (800a328 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d004      	beq.n	800a22c <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4a41      	ldr	r2, [pc, #260]	; (800a32c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d108      	bne.n	800a23e <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a232:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a234:	683b      	ldr	r3, [r7, #0]
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	68fa      	ldr	r2, [r7, #12]
 800a23a:	4313      	orrs	r3, r2
 800a23c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a248:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a24a:	683b      	ldr	r3, [r7, #0]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	68fa      	ldr	r2, [r7, #12]
 800a250:	4313      	orrs	r3, r2
 800a252:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	68fa      	ldr	r2, [r7, #12]
 800a25a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	4a2f      	ldr	r2, [pc, #188]	; (800a320 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800a262:	4293      	cmp	r3, r2
 800a264:	d040      	beq.n	800a2e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4a2e      	ldr	r2, [pc, #184]	; (800a324 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800a26c:	4293      	cmp	r3, r2
 800a26e:	d03b      	beq.n	800a2e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a278:	d036      	beq.n	800a2e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a282:	d031      	beq.n	800a2e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a29      	ldr	r2, [pc, #164]	; (800a330 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800a28a:	4293      	cmp	r3, r2
 800a28c:	d02c      	beq.n	800a2e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4a28      	ldr	r2, [pc, #160]	; (800a334 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a294:	4293      	cmp	r3, r2
 800a296:	d027      	beq.n	800a2e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	4a26      	ldr	r2, [pc, #152]	; (800a338 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d022      	beq.n	800a2e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	4a25      	ldr	r2, [pc, #148]	; (800a33c <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a2a8:	4293      	cmp	r3, r2
 800a2aa:	d01d      	beq.n	800a2e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	4a23      	ldr	r2, [pc, #140]	; (800a340 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d018      	beq.n	800a2e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	4a22      	ldr	r2, [pc, #136]	; (800a344 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d013      	beq.n	800a2e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4a18      	ldr	r2, [pc, #96]	; (800a328 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d00e      	beq.n	800a2e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	4a17      	ldr	r2, [pc, #92]	; (800a32c <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d009      	beq.n	800a2e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4a1b      	ldr	r2, [pc, #108]	; (800a348 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d004      	beq.n	800a2e8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a1a      	ldr	r2, [pc, #104]	; (800a34c <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d10c      	bne.n	800a302 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a2ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	68ba      	ldr	r2, [r7, #8]
 800a2f6:	4313      	orrs	r3, r2
 800a2f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	68ba      	ldr	r2, [r7, #8]
 800a300:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2201      	movs	r2, #1
 800a306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2200      	movs	r2, #0
 800a30e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a312:	2300      	movs	r3, #0
}
 800a314:	4618      	mov	r0, r3
 800a316:	3714      	adds	r7, #20
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr
 800a320:	40012c00 	.word	0x40012c00
 800a324:	50012c00 	.word	0x50012c00
 800a328:	40013400 	.word	0x40013400
 800a32c:	50013400 	.word	0x50013400
 800a330:	40000400 	.word	0x40000400
 800a334:	50000400 	.word	0x50000400
 800a338:	40000800 	.word	0x40000800
 800a33c:	50000800 	.word	0x50000800
 800a340:	40000c00 	.word	0x40000c00
 800a344:	50000c00 	.word	0x50000c00
 800a348:	40014000 	.word	0x40014000
 800a34c:	50014000 	.word	0x50014000

0800a350 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a350:	b480      	push	{r7}
 800a352:	b083      	sub	sp, #12
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a358:	bf00      	nop
 800a35a:	370c      	adds	r7, #12
 800a35c:	46bd      	mov	sp, r7
 800a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a362:	4770      	bx	lr

0800a364 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a364:	b480      	push	{r7}
 800a366:	b083      	sub	sp, #12
 800a368:	af00      	add	r7, sp, #0
 800a36a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a36c:	bf00      	nop
 800a36e:	370c      	adds	r7, #12
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr

0800a378 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a378:	b480      	push	{r7}
 800a37a:	b083      	sub	sp, #12
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a380:	bf00      	nop
 800a382:	370c      	adds	r7, #12
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a394:	bf00      	nop
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a3a0:	b480      	push	{r7}
 800a3a2:	b083      	sub	sp, #12
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a3a8:	bf00      	nop
 800a3aa:	370c      	adds	r7, #12
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b2:	4770      	bx	lr

0800a3b4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	b083      	sub	sp, #12
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a3bc:	bf00      	nop
 800a3be:	370c      	adds	r7, #12
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b083      	sub	sp, #12
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a3d0:	bf00      	nop
 800a3d2:	370c      	adds	r7, #12
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr

0800a3dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d101      	bne.n	800a3ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	e042      	b.n	800a474 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d106      	bne.n	800a406 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f7f8 fa1d 	bl	8002840 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2224      	movs	r2, #36	; 0x24
 800a40a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f022 0201 	bic.w	r2, r2, #1
 800a41c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f000 f82c 	bl	800a47c <UART_SetConfig>
 800a424:	4603      	mov	r3, r0
 800a426:	2b01      	cmp	r3, #1
 800a428:	d101      	bne.n	800a42e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a42a:	2301      	movs	r3, #1
 800a42c:	e022      	b.n	800a474 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a432:	2b00      	cmp	r3, #0
 800a434:	d002      	beq.n	800a43c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a436:	6878      	ldr	r0, [r7, #4]
 800a438:	f000 f9c2 	bl	800a7c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	685a      	ldr	r2, [r3, #4]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a44a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	689a      	ldr	r2, [r3, #8]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a45a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	681a      	ldr	r2, [r3, #0]
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f042 0201 	orr.w	r2, r2, #1
 800a46a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 fa49 	bl	800a904 <UART_CheckIdleState>
 800a472:	4603      	mov	r3, r0
}
 800a474:	4618      	mov	r0, r3
 800a476:	3708      	adds	r7, #8
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a47c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a480:	b094      	sub	sp, #80	; 0x50
 800a482:	af00      	add	r7, sp, #0
 800a484:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a486:	2300      	movs	r3, #0
 800a488:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800a48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a48e:	681a      	ldr	r2, [r3, #0]
 800a490:	4b7e      	ldr	r3, [pc, #504]	; (800a68c <UART_SetConfig+0x210>)
 800a492:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a496:	689a      	ldr	r2, [r3, #8]
 800a498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a49a:	691b      	ldr	r3, [r3, #16]
 800a49c:	431a      	orrs	r2, r3
 800a49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a0:	695b      	ldr	r3, [r3, #20]
 800a4a2:	431a      	orrs	r2, r3
 800a4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a6:	69db      	ldr	r3, [r3, #28]
 800a4a8:	4313      	orrs	r3, r2
 800a4aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4977      	ldr	r1, [pc, #476]	; (800a690 <UART_SetConfig+0x214>)
 800a4b4:	4019      	ands	r1, r3
 800a4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4bc:	430b      	orrs	r3, r1
 800a4be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	685b      	ldr	r3, [r3, #4]
 800a4c6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a4ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4cc:	68d9      	ldr	r1, [r3, #12]
 800a4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	ea40 0301 	orr.w	r3, r0, r1
 800a4d6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4da:	699b      	ldr	r3, [r3, #24]
 800a4dc:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4e0:	681a      	ldr	r2, [r3, #0]
 800a4e2:	4b6a      	ldr	r3, [pc, #424]	; (800a68c <UART_SetConfig+0x210>)
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d009      	beq.n	800a4fc <UART_SetConfig+0x80>
 800a4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	4b69      	ldr	r3, [pc, #420]	; (800a694 <UART_SetConfig+0x218>)
 800a4ee:	429a      	cmp	r2, r3
 800a4f0:	d004      	beq.n	800a4fc <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4f4:	6a1a      	ldr	r2, [r3, #32]
 800a4f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4f8:	4313      	orrs	r3, r2
 800a4fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	689b      	ldr	r3, [r3, #8]
 800a502:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800a506:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800a50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a510:	430b      	orrs	r3, r1
 800a512:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a51a:	f023 000f 	bic.w	r0, r3, #15
 800a51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a520:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a524:	681a      	ldr	r2, [r3, #0]
 800a526:	ea40 0301 	orr.w	r3, r0, r1
 800a52a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a52c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a52e:	681a      	ldr	r2, [r3, #0]
 800a530:	4b59      	ldr	r3, [pc, #356]	; (800a698 <UART_SetConfig+0x21c>)
 800a532:	429a      	cmp	r2, r3
 800a534:	d102      	bne.n	800a53c <UART_SetConfig+0xc0>
 800a536:	2301      	movs	r3, #1
 800a538:	64bb      	str	r3, [r7, #72]	; 0x48
 800a53a:	e029      	b.n	800a590 <UART_SetConfig+0x114>
 800a53c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a53e:	681a      	ldr	r2, [r3, #0]
 800a540:	4b56      	ldr	r3, [pc, #344]	; (800a69c <UART_SetConfig+0x220>)
 800a542:	429a      	cmp	r2, r3
 800a544:	d102      	bne.n	800a54c <UART_SetConfig+0xd0>
 800a546:	2302      	movs	r3, #2
 800a548:	64bb      	str	r3, [r7, #72]	; 0x48
 800a54a:	e021      	b.n	800a590 <UART_SetConfig+0x114>
 800a54c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	4b53      	ldr	r3, [pc, #332]	; (800a6a0 <UART_SetConfig+0x224>)
 800a552:	429a      	cmp	r2, r3
 800a554:	d102      	bne.n	800a55c <UART_SetConfig+0xe0>
 800a556:	2304      	movs	r3, #4
 800a558:	64bb      	str	r3, [r7, #72]	; 0x48
 800a55a:	e019      	b.n	800a590 <UART_SetConfig+0x114>
 800a55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a55e:	681a      	ldr	r2, [r3, #0]
 800a560:	4b50      	ldr	r3, [pc, #320]	; (800a6a4 <UART_SetConfig+0x228>)
 800a562:	429a      	cmp	r2, r3
 800a564:	d102      	bne.n	800a56c <UART_SetConfig+0xf0>
 800a566:	2308      	movs	r3, #8
 800a568:	64bb      	str	r3, [r7, #72]	; 0x48
 800a56a:	e011      	b.n	800a590 <UART_SetConfig+0x114>
 800a56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a56e:	681a      	ldr	r2, [r3, #0]
 800a570:	4b4d      	ldr	r3, [pc, #308]	; (800a6a8 <UART_SetConfig+0x22c>)
 800a572:	429a      	cmp	r2, r3
 800a574:	d102      	bne.n	800a57c <UART_SetConfig+0x100>
 800a576:	2310      	movs	r3, #16
 800a578:	64bb      	str	r3, [r7, #72]	; 0x48
 800a57a:	e009      	b.n	800a590 <UART_SetConfig+0x114>
 800a57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	4b42      	ldr	r3, [pc, #264]	; (800a68c <UART_SetConfig+0x210>)
 800a582:	429a      	cmp	r2, r3
 800a584:	d102      	bne.n	800a58c <UART_SetConfig+0x110>
 800a586:	2320      	movs	r3, #32
 800a588:	64bb      	str	r3, [r7, #72]	; 0x48
 800a58a:	e001      	b.n	800a590 <UART_SetConfig+0x114>
 800a58c:	2300      	movs	r3, #0
 800a58e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	4b3d      	ldr	r3, [pc, #244]	; (800a68c <UART_SetConfig+0x210>)
 800a596:	429a      	cmp	r2, r3
 800a598:	d005      	beq.n	800a5a6 <UART_SetConfig+0x12a>
 800a59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a59c:	681a      	ldr	r2, [r3, #0]
 800a59e:	4b3d      	ldr	r3, [pc, #244]	; (800a694 <UART_SetConfig+0x218>)
 800a5a0:	429a      	cmp	r2, r3
 800a5a2:	f040 8085 	bne.w	800a6b0 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a5a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	623b      	str	r3, [r7, #32]
 800a5ac:	627a      	str	r2, [r7, #36]	; 0x24
 800a5ae:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800a5b2:	f7fd f861 	bl	8007678 <HAL_RCCEx_GetPeriphCLKFreq>
 800a5b6:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800a5b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	f000 80e8 	beq.w	800a790 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a5c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c4:	4a39      	ldr	r2, [pc, #228]	; (800a6ac <UART_SetConfig+0x230>)
 800a5c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5d2:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5d6:	685a      	ldr	r2, [r3, #4]
 800a5d8:	4613      	mov	r3, r2
 800a5da:	005b      	lsls	r3, r3, #1
 800a5dc:	4413      	add	r3, r2
 800a5de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a5e0:	429a      	cmp	r2, r3
 800a5e2:	d305      	bcc.n	800a5f0 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a5e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5e6:	685b      	ldr	r3, [r3, #4]
 800a5e8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a5ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d903      	bls.n	800a5f8 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800a5f0:	2301      	movs	r3, #1
 800a5f2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a5f6:	e048      	b.n	800a68a <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a5f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	61bb      	str	r3, [r7, #24]
 800a5fe:	61fa      	str	r2, [r7, #28]
 800a600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a604:	4a29      	ldr	r2, [pc, #164]	; (800a6ac <UART_SetConfig+0x230>)
 800a606:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	2200      	movs	r2, #0
 800a60e:	613b      	str	r3, [r7, #16]
 800a610:	617a      	str	r2, [r7, #20]
 800a612:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a616:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800a61a:	f7f6 fb19 	bl	8000c50 <__aeabi_uldivmod>
 800a61e:	4602      	mov	r2, r0
 800a620:	460b      	mov	r3, r1
 800a622:	4610      	mov	r0, r2
 800a624:	4619      	mov	r1, r3
 800a626:	f04f 0200 	mov.w	r2, #0
 800a62a:	f04f 0300 	mov.w	r3, #0
 800a62e:	020b      	lsls	r3, r1, #8
 800a630:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a634:	0202      	lsls	r2, r0, #8
 800a636:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a638:	6849      	ldr	r1, [r1, #4]
 800a63a:	0849      	lsrs	r1, r1, #1
 800a63c:	2000      	movs	r0, #0
 800a63e:	460c      	mov	r4, r1
 800a640:	4605      	mov	r5, r0
 800a642:	eb12 0804 	adds.w	r8, r2, r4
 800a646:	eb43 0905 	adc.w	r9, r3, r5
 800a64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a64c:	685b      	ldr	r3, [r3, #4]
 800a64e:	2200      	movs	r2, #0
 800a650:	60bb      	str	r3, [r7, #8]
 800a652:	60fa      	str	r2, [r7, #12]
 800a654:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a658:	4640      	mov	r0, r8
 800a65a:	4649      	mov	r1, r9
 800a65c:	f7f6 faf8 	bl	8000c50 <__aeabi_uldivmod>
 800a660:	4602      	mov	r2, r0
 800a662:	460b      	mov	r3, r1
 800a664:	4613      	mov	r3, r2
 800a666:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a66a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a66e:	d308      	bcc.n	800a682 <UART_SetConfig+0x206>
 800a670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a676:	d204      	bcs.n	800a682 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800a678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a67e:	60da      	str	r2, [r3, #12]
 800a680:	e003      	b.n	800a68a <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800a682:	2301      	movs	r3, #1
 800a684:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800a688:	e082      	b.n	800a790 <UART_SetConfig+0x314>
 800a68a:	e081      	b.n	800a790 <UART_SetConfig+0x314>
 800a68c:	46002400 	.word	0x46002400
 800a690:	cfff69f3 	.word	0xcfff69f3
 800a694:	56002400 	.word	0x56002400
 800a698:	40013800 	.word	0x40013800
 800a69c:	40004400 	.word	0x40004400
 800a6a0:	40004800 	.word	0x40004800
 800a6a4:	40004c00 	.word	0x40004c00
 800a6a8:	40005000 	.word	0x40005000
 800a6ac:	0800ce4c 	.word	0x0800ce4c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b2:	69db      	ldr	r3, [r3, #28]
 800a6b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6b8:	d13c      	bne.n	800a734 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a6ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6bc:	2200      	movs	r2, #0
 800a6be:	603b      	str	r3, [r7, #0]
 800a6c0:	607a      	str	r2, [r7, #4]
 800a6c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a6c6:	f7fc ffd7 	bl	8007678 <HAL_RCCEx_GetPeriphCLKFreq>
 800a6ca:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a6cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d05e      	beq.n	800a790 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a6d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d6:	4a39      	ldr	r2, [pc, #228]	; (800a7bc <UART_SetConfig+0x340>)
 800a6d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6dc:	461a      	mov	r2, r3
 800a6de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6e0:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6e4:	005a      	lsls	r2, r3, #1
 800a6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6e8:	685b      	ldr	r3, [r3, #4]
 800a6ea:	085b      	lsrs	r3, r3, #1
 800a6ec:	441a      	add	r2, r3
 800a6ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a6f6:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a6f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a6fa:	2b0f      	cmp	r3, #15
 800a6fc:	d916      	bls.n	800a72c <UART_SetConfig+0x2b0>
 800a6fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a704:	d212      	bcs.n	800a72c <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a708:	b29b      	uxth	r3, r3
 800a70a:	f023 030f 	bic.w	r3, r3, #15
 800a70e:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a712:	085b      	lsrs	r3, r3, #1
 800a714:	b29b      	uxth	r3, r3
 800a716:	f003 0307 	and.w	r3, r3, #7
 800a71a:	b29a      	uxth	r2, r3
 800a71c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800a71e:	4313      	orrs	r3, r2
 800a720:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800a722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800a728:	60da      	str	r2, [r3, #12]
 800a72a:	e031      	b.n	800a790 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800a72c:	2301      	movs	r3, #1
 800a72e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800a732:	e02d      	b.n	800a790 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800a734:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a736:	2200      	movs	r2, #0
 800a738:	469a      	mov	sl, r3
 800a73a:	4693      	mov	fp, r2
 800a73c:	4650      	mov	r0, sl
 800a73e:	4659      	mov	r1, fp
 800a740:	f7fc ff9a 	bl	8007678 <HAL_RCCEx_GetPeriphCLKFreq>
 800a744:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800a746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d021      	beq.n	800a790 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a750:	4a1a      	ldr	r2, [pc, #104]	; (800a7bc <UART_SetConfig+0x340>)
 800a752:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a756:	461a      	mov	r2, r3
 800a758:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a75a:	fbb3 f2f2 	udiv	r2, r3, r2
 800a75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	085b      	lsrs	r3, r3, #1
 800a764:	441a      	add	r2, r3
 800a766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a76e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a772:	2b0f      	cmp	r3, #15
 800a774:	d909      	bls.n	800a78a <UART_SetConfig+0x30e>
 800a776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a77c:	d205      	bcs.n	800a78a <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a77e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a780:	b29a      	uxth	r2, r3
 800a782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	60da      	str	r2, [r3, #12]
 800a788:	e002      	b.n	800a790 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800a78a:	2301      	movs	r3, #1
 800a78c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a792:	2201      	movs	r2, #1
 800a794:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a79a:	2201      	movs	r2, #1
 800a79c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a7ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	3750      	adds	r7, #80	; 0x50
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a7ba:	bf00      	nop
 800a7bc:	0800ce4c 	.word	0x0800ce4c

0800a7c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7cc:	f003 0301 	and.w	r3, r3, #1
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d00a      	beq.n	800a7ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	685b      	ldr	r3, [r3, #4]
 800a7da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	430a      	orrs	r2, r1
 800a7e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7ee:	f003 0302 	and.w	r3, r3, #2
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d00a      	beq.n	800a80c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	430a      	orrs	r2, r1
 800a80a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a810:	f003 0304 	and.w	r3, r3, #4
 800a814:	2b00      	cmp	r3, #0
 800a816:	d00a      	beq.n	800a82e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	685b      	ldr	r3, [r3, #4]
 800a81e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	430a      	orrs	r2, r1
 800a82c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a832:	f003 0308 	and.w	r3, r3, #8
 800a836:	2b00      	cmp	r3, #0
 800a838:	d00a      	beq.n	800a850 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	685b      	ldr	r3, [r3, #4]
 800a840:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	430a      	orrs	r2, r1
 800a84e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a854:	f003 0310 	and.w	r3, r3, #16
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d00a      	beq.n	800a872 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	689b      	ldr	r3, [r3, #8]
 800a862:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	430a      	orrs	r2, r1
 800a870:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a876:	f003 0320 	and.w	r3, r3, #32
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d00a      	beq.n	800a894 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	689b      	ldr	r3, [r3, #8]
 800a884:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	430a      	orrs	r2, r1
 800a892:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d01a      	beq.n	800a8d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	430a      	orrs	r2, r1
 800a8b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a8be:	d10a      	bne.n	800a8d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	430a      	orrs	r2, r1
 800a8d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8de:	2b00      	cmp	r3, #0
 800a8e0:	d00a      	beq.n	800a8f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	685b      	ldr	r3, [r3, #4]
 800a8e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	430a      	orrs	r2, r1
 800a8f6:	605a      	str	r2, [r3, #4]
  }
}
 800a8f8:	bf00      	nop
 800a8fa:	370c      	adds	r7, #12
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr

0800a904 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b086      	sub	sp, #24
 800a908:	af02      	add	r7, sp, #8
 800a90a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2200      	movs	r2, #0
 800a910:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a914:	f7f8 f9e6 	bl	8002ce4 <HAL_GetTick>
 800a918:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f003 0308 	and.w	r3, r3, #8
 800a924:	2b08      	cmp	r3, #8
 800a926:	d10e      	bne.n	800a946 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a928:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a92c:	9300      	str	r3, [sp, #0]
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2200      	movs	r2, #0
 800a932:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 f82f 	bl	800a99a <UART_WaitOnFlagUntilTimeout>
 800a93c:	4603      	mov	r3, r0
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d001      	beq.n	800a946 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a942:	2303      	movs	r3, #3
 800a944:	e025      	b.n	800a992 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f003 0304 	and.w	r3, r3, #4
 800a950:	2b04      	cmp	r3, #4
 800a952:	d10e      	bne.n	800a972 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a954:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a958:	9300      	str	r3, [sp, #0]
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	2200      	movs	r2, #0
 800a95e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 f819 	bl	800a99a <UART_WaitOnFlagUntilTimeout>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d001      	beq.n	800a972 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a96e:	2303      	movs	r3, #3
 800a970:	e00f      	b.n	800a992 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2220      	movs	r2, #32
 800a976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2220      	movs	r2, #32
 800a97e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2200      	movs	r2, #0
 800a986:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2200      	movs	r2, #0
 800a98c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a990:	2300      	movs	r3, #0
}
 800a992:	4618      	mov	r0, r3
 800a994:	3710      	adds	r7, #16
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}

0800a99a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a99a:	b580      	push	{r7, lr}
 800a99c:	b09c      	sub	sp, #112	; 0x70
 800a99e:	af00      	add	r7, sp, #0
 800a9a0:	60f8      	str	r0, [r7, #12]
 800a9a2:	60b9      	str	r1, [r7, #8]
 800a9a4:	603b      	str	r3, [r7, #0]
 800a9a6:	4613      	mov	r3, r2
 800a9a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a9aa:	e0a9      	b.n	800ab00 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a9ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9b2:	f000 80a5 	beq.w	800ab00 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a9b6:	f7f8 f995 	bl	8002ce4 <HAL_GetTick>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	683b      	ldr	r3, [r7, #0]
 800a9be:	1ad3      	subs	r3, r2, r3
 800a9c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d302      	bcc.n	800a9cc <UART_WaitOnFlagUntilTimeout+0x32>
 800a9c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d140      	bne.n	800aa4e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9d4:	e853 3f00 	ldrex	r3, [r3]
 800a9d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a9da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a9e0:	667b      	str	r3, [r7, #100]	; 0x64
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a9ec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a9f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a9f2:	e841 2300 	strex	r3, r2, [r1]
 800a9f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a9f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1e6      	bne.n	800a9cc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	3308      	adds	r3, #8
 800aa04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa08:	e853 3f00 	ldrex	r3, [r3]
 800aa0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800aa0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa10:	f023 0301 	bic.w	r3, r3, #1
 800aa14:	663b      	str	r3, [r7, #96]	; 0x60
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	3308      	adds	r3, #8
 800aa1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800aa1e:	64ba      	str	r2, [r7, #72]	; 0x48
 800aa20:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800aa24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aa26:	e841 2300 	strex	r3, r2, [r1]
 800aa2a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aa2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d1e5      	bne.n	800a9fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2220      	movs	r2, #32
 800aa36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2220      	movs	r2, #32
 800aa3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2200      	movs	r2, #0
 800aa46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800aa4a:	2303      	movs	r3, #3
 800aa4c:	e069      	b.n	800ab22 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f003 0304 	and.w	r3, r3, #4
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d051      	beq.n	800ab00 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	69db      	ldr	r3, [r3, #28]
 800aa62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa6a:	d149      	bne.n	800ab00 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa74:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7e:	e853 3f00 	ldrex	r3, [r3]
 800aa82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aa8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	461a      	mov	r2, r3
 800aa92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa94:	637b      	str	r3, [r7, #52]	; 0x34
 800aa96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa9c:	e841 2300 	strex	r3, r2, [r1]
 800aaa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aaa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d1e6      	bne.n	800aa76 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	3308      	adds	r3, #8
 800aaae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	e853 3f00 	ldrex	r3, [r3]
 800aab6:	613b      	str	r3, [r7, #16]
   return(result);
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	f023 0301 	bic.w	r3, r3, #1
 800aabe:	66bb      	str	r3, [r7, #104]	; 0x68
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	3308      	adds	r3, #8
 800aac6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aac8:	623a      	str	r2, [r7, #32]
 800aaca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aacc:	69f9      	ldr	r1, [r7, #28]
 800aace:	6a3a      	ldr	r2, [r7, #32]
 800aad0:	e841 2300 	strex	r3, r2, [r1]
 800aad4:	61bb      	str	r3, [r7, #24]
   return(result);
 800aad6:	69bb      	ldr	r3, [r7, #24]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d1e5      	bne.n	800aaa8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2220      	movs	r2, #32
 800aae0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	2220      	movs	r2, #32
 800aae8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	2220      	movs	r2, #32
 800aaf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800aafc:	2303      	movs	r3, #3
 800aafe:	e010      	b.n	800ab22 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	69da      	ldr	r2, [r3, #28]
 800ab06:	68bb      	ldr	r3, [r7, #8]
 800ab08:	4013      	ands	r3, r2
 800ab0a:	68ba      	ldr	r2, [r7, #8]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	bf0c      	ite	eq
 800ab10:	2301      	moveq	r3, #1
 800ab12:	2300      	movne	r3, #0
 800ab14:	b2db      	uxtb	r3, r3
 800ab16:	461a      	mov	r2, r3
 800ab18:	79fb      	ldrb	r3, [r7, #7]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	f43f af46 	beq.w	800a9ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ab20:	2300      	movs	r3, #0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3770      	adds	r7, #112	; 0x70
 800ab26:	46bd      	mov	sp, r7
 800ab28:	bd80      	pop	{r7, pc}

0800ab2a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ab2a:	b480      	push	{r7}
 800ab2c:	b085      	sub	sp, #20
 800ab2e:	af00      	add	r7, sp, #0
 800ab30:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ab38:	2b01      	cmp	r3, #1
 800ab3a:	d101      	bne.n	800ab40 <HAL_UARTEx_DisableFifoMode+0x16>
 800ab3c:	2302      	movs	r3, #2
 800ab3e:	e027      	b.n	800ab90 <HAL_UARTEx_DisableFifoMode+0x66>
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2201      	movs	r2, #1
 800ab44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	2224      	movs	r2, #36	; 0x24
 800ab4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	681a      	ldr	r2, [r3, #0]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f022 0201 	bic.w	r2, r2, #1
 800ab66:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800ab6e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2200      	movs	r2, #0
 800ab74:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	68fa      	ldr	r2, [r7, #12]
 800ab7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	2220      	movs	r2, #32
 800ab82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ab8e:	2300      	movs	r3, #0
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	3714      	adds	r7, #20
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr

0800ab9c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ab9c:	b580      	push	{r7, lr}
 800ab9e:	b084      	sub	sp, #16
 800aba0:	af00      	add	r7, sp, #0
 800aba2:	6078      	str	r0, [r7, #4]
 800aba4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800abac:	2b01      	cmp	r3, #1
 800abae:	d101      	bne.n	800abb4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800abb0:	2302      	movs	r3, #2
 800abb2:	e02d      	b.n	800ac10 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2201      	movs	r2, #1
 800abb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2224      	movs	r2, #36	; 0x24
 800abc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	681a      	ldr	r2, [r3, #0]
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	f022 0201 	bic.w	r2, r2, #1
 800abda:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	689b      	ldr	r3, [r3, #8]
 800abe2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	683a      	ldr	r2, [r7, #0]
 800abec:	430a      	orrs	r2, r1
 800abee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	f000 f84f 	bl	800ac94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	68fa      	ldr	r2, [r7, #12]
 800abfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2220      	movs	r2, #32
 800ac02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ac0e:	2300      	movs	r3, #0
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3710      	adds	r7, #16
 800ac14:	46bd      	mov	sp, r7
 800ac16:	bd80      	pop	{r7, pc}

0800ac18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b084      	sub	sp, #16
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d101      	bne.n	800ac30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ac2c:	2302      	movs	r3, #2
 800ac2e:	e02d      	b.n	800ac8c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	2201      	movs	r2, #1
 800ac34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2224      	movs	r2, #36	; 0x24
 800ac3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f022 0201 	bic.w	r2, r2, #1
 800ac56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	689b      	ldr	r3, [r3, #8]
 800ac5e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	683a      	ldr	r2, [r7, #0]
 800ac68:	430a      	orrs	r2, r1
 800ac6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f000 f811 	bl	800ac94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	68fa      	ldr	r2, [r7, #12]
 800ac78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	2220      	movs	r2, #32
 800ac7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2200      	movs	r2, #0
 800ac86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ac8a:	2300      	movs	r3, #0
}
 800ac8c:	4618      	mov	r0, r3
 800ac8e:	3710      	adds	r7, #16
 800ac90:	46bd      	mov	sp, r7
 800ac92:	bd80      	pop	{r7, pc}

0800ac94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b085      	sub	sp, #20
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d108      	bne.n	800acb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2201      	movs	r2, #1
 800aca8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2201      	movs	r2, #1
 800acb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800acb4:	e031      	b.n	800ad1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800acb6:	2308      	movs	r3, #8
 800acb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800acba:	2308      	movs	r3, #8
 800acbc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	689b      	ldr	r3, [r3, #8]
 800acc4:	0e5b      	lsrs	r3, r3, #25
 800acc6:	b2db      	uxtb	r3, r3
 800acc8:	f003 0307 	and.w	r3, r3, #7
 800accc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	689b      	ldr	r3, [r3, #8]
 800acd4:	0f5b      	lsrs	r3, r3, #29
 800acd6:	b2db      	uxtb	r3, r3
 800acd8:	f003 0307 	and.w	r3, r3, #7
 800acdc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800acde:	7bbb      	ldrb	r3, [r7, #14]
 800ace0:	7b3a      	ldrb	r2, [r7, #12]
 800ace2:	4911      	ldr	r1, [pc, #68]	; (800ad28 <UARTEx_SetNbDataToProcess+0x94>)
 800ace4:	5c8a      	ldrb	r2, [r1, r2]
 800ace6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800acea:	7b3a      	ldrb	r2, [r7, #12]
 800acec:	490f      	ldr	r1, [pc, #60]	; (800ad2c <UARTEx_SetNbDataToProcess+0x98>)
 800acee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800acf0:	fb93 f3f2 	sdiv	r3, r3, r2
 800acf4:	b29a      	uxth	r2, r3
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800acfc:	7bfb      	ldrb	r3, [r7, #15]
 800acfe:	7b7a      	ldrb	r2, [r7, #13]
 800ad00:	4909      	ldr	r1, [pc, #36]	; (800ad28 <UARTEx_SetNbDataToProcess+0x94>)
 800ad02:	5c8a      	ldrb	r2, [r1, r2]
 800ad04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ad08:	7b7a      	ldrb	r2, [r7, #13]
 800ad0a:	4908      	ldr	r1, [pc, #32]	; (800ad2c <UARTEx_SetNbDataToProcess+0x98>)
 800ad0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ad0e:	fb93 f3f2 	sdiv	r3, r3, r2
 800ad12:	b29a      	uxth	r2, r3
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ad1a:	bf00      	nop
 800ad1c:	3714      	adds	r7, #20
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr
 800ad26:	bf00      	nop
 800ad28:	0800ce64 	.word	0x0800ce64
 800ad2c:	0800ce6c 	.word	0x0800ce6c

0800ad30 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b083      	sub	sp, #12
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f043 0202 	orr.w	r2, r3, #2
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	685a      	ldr	r2, [r3, #4]
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	021b      	lsls	r3, r3, #8
 800ad50:	431a      	orrs	r2, r3
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f023 0202 	bic.w	r2, r3, #2
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	601a      	str	r2, [r3, #0]
}
 800ad62:	bf00      	nop
 800ad64:	370c      	adds	r7, #12
 800ad66:	46bd      	mov	sp, r7
 800ad68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6c:	4770      	bx	lr

0800ad6e <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800ad6e:	b480      	push	{r7}
 800ad70:	b08b      	sub	sp, #44	; 0x2c
 800ad72:	af00      	add	r7, sp, #0
 800ad74:	60f8      	str	r0, [r7, #12]
 800ad76:	60b9      	str	r1, [r7, #8]
 800ad78:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	681a      	ldr	r2, [r3, #0]
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad82:	697b      	ldr	r3, [r7, #20]
 800ad84:	fa93 f3a3 	rbit	r3, r3
 800ad88:	613b      	str	r3, [r7, #16]
  return result;
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ad8e:	69bb      	ldr	r3, [r7, #24]
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d101      	bne.n	800ad98 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800ad94:	2320      	movs	r3, #32
 800ad96:	e003      	b.n	800ada0 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800ad98:	69bb      	ldr	r3, [r7, #24]
 800ad9a:	fab3 f383 	clz	r3, r3
 800ad9e:	b2db      	uxtb	r3, r3
 800ada0:	005b      	lsls	r3, r3, #1
 800ada2:	2103      	movs	r1, #3
 800ada4:	fa01 f303 	lsl.w	r3, r1, r3
 800ada8:	43db      	mvns	r3, r3
 800adaa:	401a      	ands	r2, r3
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800adb0:	6a3b      	ldr	r3, [r7, #32]
 800adb2:	fa93 f3a3 	rbit	r3, r3
 800adb6:	61fb      	str	r3, [r7, #28]
  return result;
 800adb8:	69fb      	ldr	r3, [r7, #28]
 800adba:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800adbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d101      	bne.n	800adc6 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800adc2:	2320      	movs	r3, #32
 800adc4:	e003      	b.n	800adce <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800adc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc8:	fab3 f383 	clz	r3, r3
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	005b      	lsls	r3, r3, #1
 800add0:	6879      	ldr	r1, [r7, #4]
 800add2:	fa01 f303 	lsl.w	r3, r1, r3
 800add6:	431a      	orrs	r2, r3
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	601a      	str	r2, [r3, #0]
}
 800addc:	bf00      	nop
 800adde:	372c      	adds	r7, #44	; 0x2c
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr

0800ade8 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800ade8:	b480      	push	{r7}
 800adea:	b085      	sub	sp, #20
 800adec:	af00      	add	r7, sp, #0
 800adee:	60f8      	str	r0, [r7, #12]
 800adf0:	60b9      	str	r1, [r7, #8]
 800adf2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	685a      	ldr	r2, [r3, #4]
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	43db      	mvns	r3, r3
 800adfc:	401a      	ands	r2, r3
 800adfe:	68bb      	ldr	r3, [r7, #8]
 800ae00:	6879      	ldr	r1, [r7, #4]
 800ae02:	fb01 f303 	mul.w	r3, r1, r3
 800ae06:	431a      	orrs	r2, r3
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	605a      	str	r2, [r3, #4]
}
 800ae0c:	bf00      	nop
 800ae0e:	3714      	adds	r7, #20
 800ae10:	46bd      	mov	sp, r7
 800ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae16:	4770      	bx	lr

0800ae18 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800ae18:	b480      	push	{r7}
 800ae1a:	b08b      	sub	sp, #44	; 0x2c
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	60f8      	str	r0, [r7, #12]
 800ae20:	60b9      	str	r1, [r7, #8]
 800ae22:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	689a      	ldr	r2, [r3, #8]
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	fa93 f3a3 	rbit	r3, r3
 800ae32:	613b      	str	r3, [r7, #16]
  return result;
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ae38:	69bb      	ldr	r3, [r7, #24]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d101      	bne.n	800ae42 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800ae3e:	2320      	movs	r3, #32
 800ae40:	e003      	b.n	800ae4a <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800ae42:	69bb      	ldr	r3, [r7, #24]
 800ae44:	fab3 f383 	clz	r3, r3
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	005b      	lsls	r3, r3, #1
 800ae4c:	2103      	movs	r1, #3
 800ae4e:	fa01 f303 	lsl.w	r3, r1, r3
 800ae52:	43db      	mvns	r3, r3
 800ae54:	401a      	ands	r2, r3
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae5a:	6a3b      	ldr	r3, [r7, #32]
 800ae5c:	fa93 f3a3 	rbit	r3, r3
 800ae60:	61fb      	str	r3, [r7, #28]
  return result;
 800ae62:	69fb      	ldr	r3, [r7, #28]
 800ae64:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800ae66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d101      	bne.n	800ae70 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800ae6c:	2320      	movs	r3, #32
 800ae6e:	e003      	b.n	800ae78 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800ae70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae72:	fab3 f383 	clz	r3, r3
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	005b      	lsls	r3, r3, #1
 800ae7a:	6879      	ldr	r1, [r7, #4]
 800ae7c:	fa01 f303 	lsl.w	r3, r1, r3
 800ae80:	431a      	orrs	r2, r3
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800ae86:	bf00      	nop
 800ae88:	372c      	adds	r7, #44	; 0x2c
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr

0800ae92 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800ae92:	b480      	push	{r7}
 800ae94:	b08b      	sub	sp, #44	; 0x2c
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	60f8      	str	r0, [r7, #12]
 800ae9a:	60b9      	str	r1, [r7, #8]
 800ae9c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	68da      	ldr	r2, [r3, #12]
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	fa93 f3a3 	rbit	r3, r3
 800aeac:	613b      	str	r3, [r7, #16]
  return result;
 800aeae:	693b      	ldr	r3, [r7, #16]
 800aeb0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800aeb2:	69bb      	ldr	r3, [r7, #24]
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d101      	bne.n	800aebc <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800aeb8:	2320      	movs	r3, #32
 800aeba:	e003      	b.n	800aec4 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800aebc:	69bb      	ldr	r3, [r7, #24]
 800aebe:	fab3 f383 	clz	r3, r3
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	005b      	lsls	r3, r3, #1
 800aec6:	2103      	movs	r1, #3
 800aec8:	fa01 f303 	lsl.w	r3, r1, r3
 800aecc:	43db      	mvns	r3, r3
 800aece:	401a      	ands	r2, r3
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aed4:	6a3b      	ldr	r3, [r7, #32]
 800aed6:	fa93 f3a3 	rbit	r3, r3
 800aeda:	61fb      	str	r3, [r7, #28]
  return result;
 800aedc:	69fb      	ldr	r3, [r7, #28]
 800aede:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800aee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d101      	bne.n	800aeea <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800aee6:	2320      	movs	r3, #32
 800aee8:	e003      	b.n	800aef2 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800aeea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeec:	fab3 f383 	clz	r3, r3
 800aef0:	b2db      	uxtb	r3, r3
 800aef2:	005b      	lsls	r3, r3, #1
 800aef4:	6879      	ldr	r1, [r7, #4]
 800aef6:	fa01 f303 	lsl.w	r3, r1, r3
 800aefa:	431a      	orrs	r2, r3
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	60da      	str	r2, [r3, #12]
}
 800af00:	bf00      	nop
 800af02:	372c      	adds	r7, #44	; 0x2c
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr

0800af0c <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b08b      	sub	sp, #44	; 0x2c
 800af10:	af00      	add	r7, sp, #0
 800af12:	60f8      	str	r0, [r7, #12]
 800af14:	60b9      	str	r1, [r7, #8]
 800af16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	6a1a      	ldr	r2, [r3, #32]
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	fa93 f3a3 	rbit	r3, r3
 800af26:	613b      	str	r3, [r7, #16]
  return result;
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800af2c:	69bb      	ldr	r3, [r7, #24]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d101      	bne.n	800af36 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800af32:	2320      	movs	r3, #32
 800af34:	e003      	b.n	800af3e <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800af36:	69bb      	ldr	r3, [r7, #24]
 800af38:	fab3 f383 	clz	r3, r3
 800af3c:	b2db      	uxtb	r3, r3
 800af3e:	009b      	lsls	r3, r3, #2
 800af40:	210f      	movs	r1, #15
 800af42:	fa01 f303 	lsl.w	r3, r1, r3
 800af46:	43db      	mvns	r3, r3
 800af48:	401a      	ands	r2, r3
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af4e:	6a3b      	ldr	r3, [r7, #32]
 800af50:	fa93 f3a3 	rbit	r3, r3
 800af54:	61fb      	str	r3, [r7, #28]
  return result;
 800af56:	69fb      	ldr	r3, [r7, #28]
 800af58:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800af5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d101      	bne.n	800af64 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800af60:	2320      	movs	r3, #32
 800af62:	e003      	b.n	800af6c <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800af64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af66:	fab3 f383 	clz	r3, r3
 800af6a:	b2db      	uxtb	r3, r3
 800af6c:	009b      	lsls	r3, r3, #2
 800af6e:	6879      	ldr	r1, [r7, #4]
 800af70:	fa01 f303 	lsl.w	r3, r1, r3
 800af74:	431a      	orrs	r2, r3
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800af7a:	bf00      	nop
 800af7c:	372c      	adds	r7, #44	; 0x2c
 800af7e:	46bd      	mov	sp, r7
 800af80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af84:	4770      	bx	lr

0800af86 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800af86:	b480      	push	{r7}
 800af88:	b08b      	sub	sp, #44	; 0x2c
 800af8a:	af00      	add	r7, sp, #0
 800af8c:	60f8      	str	r0, [r7, #12]
 800af8e:	60b9      	str	r1, [r7, #8]
 800af90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	0a1b      	lsrs	r3, r3, #8
 800af9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	fa93 f3a3 	rbit	r3, r3
 800afa2:	613b      	str	r3, [r7, #16]
  return result;
 800afa4:	693b      	ldr	r3, [r7, #16]
 800afa6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800afa8:	69bb      	ldr	r3, [r7, #24]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d101      	bne.n	800afb2 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800afae:	2320      	movs	r3, #32
 800afb0:	e003      	b.n	800afba <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800afb2:	69bb      	ldr	r3, [r7, #24]
 800afb4:	fab3 f383 	clz	r3, r3
 800afb8:	b2db      	uxtb	r3, r3
 800afba:	009b      	lsls	r3, r3, #2
 800afbc:	210f      	movs	r1, #15
 800afbe:	fa01 f303 	lsl.w	r3, r1, r3
 800afc2:	43db      	mvns	r3, r3
 800afc4:	401a      	ands	r2, r3
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	0a1b      	lsrs	r3, r3, #8
 800afca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800afcc:	6a3b      	ldr	r3, [r7, #32]
 800afce:	fa93 f3a3 	rbit	r3, r3
 800afd2:	61fb      	str	r3, [r7, #28]
  return result;
 800afd4:	69fb      	ldr	r3, [r7, #28]
 800afd6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800afd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d101      	bne.n	800afe2 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800afde:	2320      	movs	r3, #32
 800afe0:	e003      	b.n	800afea <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800afe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe4:	fab3 f383 	clz	r3, r3
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	009b      	lsls	r3, r3, #2
 800afec:	6879      	ldr	r1, [r7, #4]
 800afee:	fa01 f303 	lsl.w	r3, r1, r3
 800aff2:	431a      	orrs	r2, r3
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800aff8:	bf00      	nop
 800affa:	372c      	adds	r7, #44	; 0x2c
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr

0800b004 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b08a      	sub	sp, #40	; 0x28
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b014:	69bb      	ldr	r3, [r7, #24]
 800b016:	fa93 f3a3 	rbit	r3, r3
 800b01a:	617b      	str	r3, [r7, #20]
  return result;
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800b020:	69fb      	ldr	r3, [r7, #28]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d101      	bne.n	800b02a <LL_GPIO_Init+0x26>
    return 32U;
 800b026:	2320      	movs	r3, #32
 800b028:	e003      	b.n	800b032 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800b02a:	69fb      	ldr	r3, [r7, #28]
 800b02c:	fab3 f383 	clz	r3, r3
 800b030:	b2db      	uxtb	r3, r3
 800b032:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800b034:	e050      	b.n	800b0d8 <LL_GPIO_Init+0xd4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	681a      	ldr	r2, [r3, #0]
 800b03a:	2101      	movs	r1, #1
 800b03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03e:	fa01 f303 	lsl.w	r3, r1, r3
 800b042:	4013      	ands	r3, r2
 800b044:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800b046:	6a3b      	ldr	r3, [r7, #32]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d042      	beq.n	800b0d2 <LL_GPIO_Init+0xce>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	461a      	mov	r2, r3
 800b052:	6a39      	ldr	r1, [r7, #32]
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f7ff fe8a 	bl	800ad6e <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800b05a:	683b      	ldr	r3, [r7, #0]
 800b05c:	685b      	ldr	r3, [r3, #4]
 800b05e:	2b01      	cmp	r3, #1
 800b060:	d003      	beq.n	800b06a <LL_GPIO_Init+0x66>
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	2b02      	cmp	r3, #2
 800b068:	d106      	bne.n	800b078 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	689b      	ldr	r3, [r3, #8]
 800b06e:	461a      	mov	r2, r3
 800b070:	6a39      	ldr	r1, [r7, #32]
 800b072:	6878      	ldr	r0, [r7, #4]
 800b074:	f7ff fed0 	bl	800ae18 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	691b      	ldr	r3, [r3, #16]
 800b07c:	461a      	mov	r2, r3
 800b07e:	6a39      	ldr	r1, [r7, #32]
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f7ff ff06 	bl	800ae92 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800b086:	683b      	ldr	r3, [r7, #0]
 800b088:	685b      	ldr	r3, [r3, #4]
 800b08a:	2b02      	cmp	r3, #2
 800b08c:	d121      	bne.n	800b0d2 <LL_GPIO_Init+0xce>
 800b08e:	6a3b      	ldr	r3, [r7, #32]
 800b090:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	fa93 f3a3 	rbit	r3, r3
 800b098:	60bb      	str	r3, [r7, #8]
  return result;
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800b09e:	693b      	ldr	r3, [r7, #16]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d101      	bne.n	800b0a8 <LL_GPIO_Init+0xa4>
    return 32U;
 800b0a4:	2320      	movs	r3, #32
 800b0a6:	e003      	b.n	800b0b0 <LL_GPIO_Init+0xac>
  return __builtin_clz(value);
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	fab3 f383 	clz	r3, r3
 800b0ae:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800b0b0:	2b07      	cmp	r3, #7
 800b0b2:	d807      	bhi.n	800b0c4 <LL_GPIO_Init+0xc0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	695b      	ldr	r3, [r3, #20]
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	6a39      	ldr	r1, [r7, #32]
 800b0bc:	6878      	ldr	r0, [r7, #4]
 800b0be:	f7ff ff25 	bl	800af0c <LL_GPIO_SetAFPin_0_7>
 800b0c2:	e006      	b.n	800b0d2 <LL_GPIO_Init+0xce>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	695b      	ldr	r3, [r3, #20]
 800b0c8:	461a      	mov	r2, r3
 800b0ca:	6a39      	ldr	r1, [r7, #32]
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f7ff ff5a 	bl	800af86 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800b0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	681a      	ldr	r2, [r3, #0]
 800b0dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0de:	fa22 f303 	lsr.w	r3, r2, r3
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d1a7      	bne.n	800b036 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	685b      	ldr	r3, [r3, #4]
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	d003      	beq.n	800b0f6 <LL_GPIO_Init+0xf2>
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	685b      	ldr	r3, [r3, #4]
 800b0f2:	2b02      	cmp	r3, #2
 800b0f4:	d107      	bne.n	800b106 <LL_GPIO_Init+0x102>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800b0f6:	683b      	ldr	r3, [r7, #0]
 800b0f8:	6819      	ldr	r1, [r3, #0]
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	68db      	ldr	r3, [r3, #12]
 800b0fe:	461a      	mov	r2, r3
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f7ff fe71 	bl	800ade8 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800b106:	2300      	movs	r3, #0
}
 800b108:	4618      	mov	r0, r3
 800b10a:	3728      	adds	r7, #40	; 0x28
 800b10c:	46bd      	mov	sp, r7
 800b10e:	bd80      	pop	{r7, pc}

0800b110 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b110:	b084      	sub	sp, #16
 800b112:	b580      	push	{r7, lr}
 800b114:	b084      	sub	sp, #16
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
 800b11a:	f107 001c 	add.w	r0, r7, #28
 800b11e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	68db      	ldr	r3, [r3, #12]
 800b126:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800b12e:	6878      	ldr	r0, [r7, #4]
 800b130:	f000 fa72 	bl	800b618 <USB_CoreReset>
 800b134:	4603      	mov	r3, r0
 800b136:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800b138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d106      	bne.n	800b14c <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b142:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	639a      	str	r2, [r3, #56]	; 0x38
 800b14a:	e005      	b.n	800b158 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b150:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

  return ret;
 800b158:	7bfb      	ldrb	r3, [r7, #15]
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b164:	b004      	add	sp, #16
 800b166:	4770      	bx	lr

0800b168 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b168:	b480      	push	{r7}
 800b16a:	b083      	sub	sp, #12
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	f023 0201 	bic.w	r2, r3, #1
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b17c:	2300      	movs	r3, #0
}
 800b17e:	4618      	mov	r0, r3
 800b180:	370c      	adds	r7, #12
 800b182:	46bd      	mov	sp, r7
 800b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b188:	4770      	bx	lr

0800b18a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b18a:	b580      	push	{r7, lr}
 800b18c:	b084      	sub	sp, #16
 800b18e:	af00      	add	r7, sp, #0
 800b190:	6078      	str	r0, [r7, #4]
 800b192:	460b      	mov	r3, r1
 800b194:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b196:	2300      	movs	r3, #0
 800b198:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	68db      	ldr	r3, [r3, #12]
 800b19e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b1a6:	78fb      	ldrb	r3, [r7, #3]
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	d115      	bne.n	800b1d8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	68db      	ldr	r3, [r3, #12]
 800b1b0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b1b8:	2001      	movs	r0, #1
 800b1ba:	f7f7 fd9f 	bl	8002cfc <HAL_Delay>
      ms++;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	3301      	adds	r3, #1
 800b1c2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	f000 fa19 	bl	800b5fc <USB_GetMode>
 800b1ca:	4603      	mov	r3, r0
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d01e      	beq.n	800b20e <USB_SetCurrentMode+0x84>
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2b31      	cmp	r3, #49	; 0x31
 800b1d4:	d9f0      	bls.n	800b1b8 <USB_SetCurrentMode+0x2e>
 800b1d6:	e01a      	b.n	800b20e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b1d8:	78fb      	ldrb	r3, [r7, #3]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d115      	bne.n	800b20a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	68db      	ldr	r3, [r3, #12]
 800b1e2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b1ea:	2001      	movs	r0, #1
 800b1ec:	f7f7 fd86 	bl	8002cfc <HAL_Delay>
      ms++;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b1f6:	6878      	ldr	r0, [r7, #4]
 800b1f8:	f000 fa00 	bl	800b5fc <USB_GetMode>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d005      	beq.n	800b20e <USB_SetCurrentMode+0x84>
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2b31      	cmp	r3, #49	; 0x31
 800b206:	d9f0      	bls.n	800b1ea <USB_SetCurrentMode+0x60>
 800b208:	e001      	b.n	800b20e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b20a:	2301      	movs	r3, #1
 800b20c:	e005      	b.n	800b21a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2b32      	cmp	r3, #50	; 0x32
 800b212:	d101      	bne.n	800b218 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b214:	2301      	movs	r3, #1
 800b216:	e000      	b.n	800b21a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b218:	2300      	movs	r3, #0
}
 800b21a:	4618      	mov	r0, r3
 800b21c:	3710      	adds	r7, #16
 800b21e:	46bd      	mov	sp, r7
 800b220:	bd80      	pop	{r7, pc}
	...

0800b224 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b224:	b084      	sub	sp, #16
 800b226:	b580      	push	{r7, lr}
 800b228:	b086      	sub	sp, #24
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	6078      	str	r0, [r7, #4]
 800b22e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b232:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b236:	2300      	movs	r3, #0
 800b238:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b23e:	2300      	movs	r3, #0
 800b240:	613b      	str	r3, [r7, #16]
 800b242:	e009      	b.n	800b258 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b244:	687a      	ldr	r2, [r7, #4]
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	3340      	adds	r3, #64	; 0x40
 800b24a:	009b      	lsls	r3, r3, #2
 800b24c:	4413      	add	r3, r2
 800b24e:	2200      	movs	r2, #0
 800b250:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	3301      	adds	r3, #1
 800b256:	613b      	str	r3, [r7, #16]
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	2b0e      	cmp	r3, #14
 800b25c:	d9f2      	bls.n	800b244 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b25e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b260:	2b00      	cmp	r3, #0
 800b262:	d11c      	bne.n	800b29e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b26a:	685b      	ldr	r3, [r3, #4]
 800b26c:	68fa      	ldr	r2, [r7, #12]
 800b26e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b272:	f043 0302 	orr.w	r3, r3, #2
 800b276:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b27c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	639a      	str	r2, [r3, #56]	; 0x38
    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	601a      	str	r2, [r3, #0]
 800b29c:	e005      	b.n	800b2aa <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b2b0:	461a      	mov	r2, r3
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2bc:	4619      	mov	r1, r3
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	680b      	ldr	r3, [r1, #0]
 800b2c8:	6013      	str	r3, [r2, #0]
  }
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b2ca:	2103      	movs	r1, #3
 800b2cc:	6878      	ldr	r0, [r7, #4]
 800b2ce:	f000 f95b 	bl	800b588 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b2d2:	2110      	movs	r1, #16
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f000 f8f3 	bl	800b4c0 <USB_FlushTxFifo>
 800b2da:	4603      	mov	r3, r0
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d001      	beq.n	800b2e4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b2e4:	6878      	ldr	r0, [r7, #4]
 800b2e6:	f000 f91f 	bl	800b528 <USB_FlushRxFifo>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d001      	beq.n	800b2f4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800b2f0:	2301      	movs	r3, #1
 800b2f2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b306:	461a      	mov	r2, r3
 800b308:	2300      	movs	r3, #0
 800b30a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b312:	461a      	mov	r2, r3
 800b314:	2300      	movs	r3, #0
 800b316:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b318:	2300      	movs	r3, #0
 800b31a:	613b      	str	r3, [r7, #16]
 800b31c:	e043      	b.n	800b3a6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b31e:	693b      	ldr	r3, [r7, #16]
 800b320:	015a      	lsls	r2, r3, #5
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	4413      	add	r3, r2
 800b326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b330:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b334:	d118      	bne.n	800b368 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d10a      	bne.n	800b352 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b33c:	693b      	ldr	r3, [r7, #16]
 800b33e:	015a      	lsls	r2, r3, #5
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	4413      	add	r3, r2
 800b344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b348:	461a      	mov	r2, r3
 800b34a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b34e:	6013      	str	r3, [r2, #0]
 800b350:	e013      	b.n	800b37a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	015a      	lsls	r2, r3, #5
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	4413      	add	r3, r2
 800b35a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b35e:	461a      	mov	r2, r3
 800b360:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b364:	6013      	str	r3, [r2, #0]
 800b366:	e008      	b.n	800b37a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	015a      	lsls	r2, r3, #5
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	4413      	add	r3, r2
 800b370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b374:	461a      	mov	r2, r3
 800b376:	2300      	movs	r3, #0
 800b378:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	015a      	lsls	r2, r3, #5
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	4413      	add	r3, r2
 800b382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b386:	461a      	mov	r2, r3
 800b388:	2300      	movs	r3, #0
 800b38a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	015a      	lsls	r2, r3, #5
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	4413      	add	r3, r2
 800b394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b398:	461a      	mov	r2, r3
 800b39a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b39e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	3301      	adds	r3, #1
 800b3a4:	613b      	str	r3, [r7, #16]
 800b3a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a8:	693a      	ldr	r2, [r7, #16]
 800b3aa:	429a      	cmp	r2, r3
 800b3ac:	d3b7      	bcc.n	800b31e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	613b      	str	r3, [r7, #16]
 800b3b2:	e043      	b.n	800b43c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	015a      	lsls	r2, r3, #5
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	4413      	add	r3, r2
 800b3bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b3c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b3ca:	d118      	bne.n	800b3fe <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d10a      	bne.n	800b3e8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	015a      	lsls	r2, r3, #5
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	4413      	add	r3, r2
 800b3da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3de:	461a      	mov	r2, r3
 800b3e0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b3e4:	6013      	str	r3, [r2, #0]
 800b3e6:	e013      	b.n	800b410 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	015a      	lsls	r2, r3, #5
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	4413      	add	r3, r2
 800b3f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b3fa:	6013      	str	r3, [r2, #0]
 800b3fc:	e008      	b.n	800b410 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	015a      	lsls	r2, r3, #5
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	4413      	add	r3, r2
 800b406:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b40a:	461a      	mov	r2, r3
 800b40c:	2300      	movs	r3, #0
 800b40e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b410:	693b      	ldr	r3, [r7, #16]
 800b412:	015a      	lsls	r2, r3, #5
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	4413      	add	r3, r2
 800b418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b41c:	461a      	mov	r2, r3
 800b41e:	2300      	movs	r3, #0
 800b420:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	015a      	lsls	r2, r3, #5
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	4413      	add	r3, r2
 800b42a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b42e:	461a      	mov	r2, r3
 800b430:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b434:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	3301      	adds	r3, #1
 800b43a:	613b      	str	r3, [r7, #16]
 800b43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43e:	693a      	ldr	r2, [r7, #16]
 800b440:	429a      	cmp	r2, r3
 800b442:	d3b7      	bcc.n	800b3b4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b44a:	691b      	ldr	r3, [r3, #16]
 800b44c:	68fa      	ldr	r2, [r7, #12]
 800b44e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b452:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b456:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2200      	movs	r2, #0
 800b45c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b464:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d105      	bne.n	800b478 <USB_DevInit+0x254>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	699b      	ldr	r3, [r3, #24]
 800b470:	f043 0210 	orr.w	r2, r3, #16
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	699a      	ldr	r2, [r3, #24]
 800b47c:	4b0f      	ldr	r3, [pc, #60]	; (800b4bc <USB_DevInit+0x298>)
 800b47e:	4313      	orrs	r3, r2
 800b480:	687a      	ldr	r2, [r7, #4]
 800b482:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b486:	2b00      	cmp	r3, #0
 800b488:	d005      	beq.n	800b496 <USB_DevInit+0x272>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	699b      	ldr	r3, [r3, #24]
 800b48e:	f043 0208 	orr.w	r2, r3, #8
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b498:	2b01      	cmp	r3, #1
 800b49a:	d107      	bne.n	800b4ac <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	699b      	ldr	r3, [r3, #24]
 800b4a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b4a4:	f043 0304 	orr.w	r3, r3, #4
 800b4a8:	687a      	ldr	r2, [r7, #4]
 800b4aa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b4ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	3718      	adds	r7, #24
 800b4b2:	46bd      	mov	sp, r7
 800b4b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b4b8:	b004      	add	sp, #16
 800b4ba:	4770      	bx	lr
 800b4bc:	803c3800 	.word	0x803c3800

0800b4c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b085      	sub	sp, #20
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	4a13      	ldr	r2, [pc, #76]	; (800b524 <USB_FlushTxFifo+0x64>)
 800b4d8:	4293      	cmp	r3, r2
 800b4da:	d901      	bls.n	800b4e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b4dc:	2303      	movs	r3, #3
 800b4de:	e01b      	b.n	800b518 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	691b      	ldr	r3, [r3, #16]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	daf2      	bge.n	800b4ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	019b      	lsls	r3, r3, #6
 800b4f0:	f043 0220 	orr.w	r2, r3, #32
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	4a08      	ldr	r2, [pc, #32]	; (800b524 <USB_FlushTxFifo+0x64>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d901      	bls.n	800b50a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b506:	2303      	movs	r3, #3
 800b508:	e006      	b.n	800b518 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	691b      	ldr	r3, [r3, #16]
 800b50e:	f003 0320 	and.w	r3, r3, #32
 800b512:	2b20      	cmp	r3, #32
 800b514:	d0f0      	beq.n	800b4f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b516:	2300      	movs	r3, #0
}
 800b518:	4618      	mov	r0, r3
 800b51a:	3714      	adds	r7, #20
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr
 800b524:	00030d40 	.word	0x00030d40

0800b528 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b528:	b480      	push	{r7}
 800b52a:	b085      	sub	sp, #20
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b530:	2300      	movs	r3, #0
 800b532:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	3301      	adds	r3, #1
 800b538:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	4a11      	ldr	r2, [pc, #68]	; (800b584 <USB_FlushRxFifo+0x5c>)
 800b53e:	4293      	cmp	r3, r2
 800b540:	d901      	bls.n	800b546 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b542:	2303      	movs	r3, #3
 800b544:	e018      	b.n	800b578 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	691b      	ldr	r3, [r3, #16]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	daf2      	bge.n	800b534 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b54e:	2300      	movs	r3, #0
 800b550:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	2210      	movs	r2, #16
 800b556:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	3301      	adds	r3, #1
 800b55c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	4a08      	ldr	r2, [pc, #32]	; (800b584 <USB_FlushRxFifo+0x5c>)
 800b562:	4293      	cmp	r3, r2
 800b564:	d901      	bls.n	800b56a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b566:	2303      	movs	r3, #3
 800b568:	e006      	b.n	800b578 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	691b      	ldr	r3, [r3, #16]
 800b56e:	f003 0310 	and.w	r3, r3, #16
 800b572:	2b10      	cmp	r3, #16
 800b574:	d0f0      	beq.n	800b558 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b576:	2300      	movs	r3, #0
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3714      	adds	r7, #20
 800b57c:	46bd      	mov	sp, r7
 800b57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b582:	4770      	bx	lr
 800b584:	00030d40 	.word	0x00030d40

0800b588 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b588:	b480      	push	{r7}
 800b58a:	b085      	sub	sp, #20
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
 800b590:	460b      	mov	r3, r1
 800b592:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b59e:	681a      	ldr	r2, [r3, #0]
 800b5a0:	78fb      	ldrb	r3, [r7, #3]
 800b5a2:	68f9      	ldr	r1, [r7, #12]
 800b5a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b5a8:	4313      	orrs	r3, r2
 800b5aa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b5ac:	2300      	movs	r3, #0
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	3714      	adds	r7, #20
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b8:	4770      	bx	lr

0800b5ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b5ba:	b480      	push	{r7}
 800b5bc:	b085      	sub	sp, #20
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	68fa      	ldr	r2, [r7, #12]
 800b5d0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b5d4:	f023 0303 	bic.w	r3, r3, #3
 800b5d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5e0:	685b      	ldr	r3, [r3, #4]
 800b5e2:	68fa      	ldr	r2, [r7, #12]
 800b5e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b5e8:	f043 0302 	orr.w	r3, r3, #2
 800b5ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b5ee:	2300      	movs	r3, #0
}
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	3714      	adds	r7, #20
 800b5f4:	46bd      	mov	sp, r7
 800b5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fa:	4770      	bx	lr

0800b5fc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b5fc:	b480      	push	{r7}
 800b5fe:	b083      	sub	sp, #12
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	695b      	ldr	r3, [r3, #20]
 800b608:	f003 0301 	and.w	r3, r3, #1
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	370c      	adds	r7, #12
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr

0800b618 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b618:	b480      	push	{r7}
 800b61a:	b085      	sub	sp, #20
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b620:	2300      	movs	r3, #0
 800b622:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	3301      	adds	r3, #1
 800b628:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	4a13      	ldr	r2, [pc, #76]	; (800b67c <USB_CoreReset+0x64>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d901      	bls.n	800b636 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b632:	2303      	movs	r3, #3
 800b634:	e01b      	b.n	800b66e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	691b      	ldr	r3, [r3, #16]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	daf2      	bge.n	800b624 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b63e:	2300      	movs	r3, #0
 800b640:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	691b      	ldr	r3, [r3, #16]
 800b646:	f043 0201 	orr.w	r2, r3, #1
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	3301      	adds	r3, #1
 800b652:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	4a09      	ldr	r2, [pc, #36]	; (800b67c <USB_CoreReset+0x64>)
 800b658:	4293      	cmp	r3, r2
 800b65a:	d901      	bls.n	800b660 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b65c:	2303      	movs	r3, #3
 800b65e:	e006      	b.n	800b66e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	691b      	ldr	r3, [r3, #16]
 800b664:	f003 0301 	and.w	r3, r3, #1
 800b668:	2b01      	cmp	r3, #1
 800b66a:	d0f0      	beq.n	800b64e <USB_CoreReset+0x36>

  return HAL_OK;
 800b66c:	2300      	movs	r3, #0
}
 800b66e:	4618      	mov	r0, r3
 800b670:	3714      	adds	r7, #20
 800b672:	46bd      	mov	sp, r7
 800b674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b678:	4770      	bx	lr
 800b67a:	bf00      	nop
 800b67c:	00030d40 	.word	0x00030d40

0800b680 <__errno>:
 800b680:	4b01      	ldr	r3, [pc, #4]	; (800b688 <__errno+0x8>)
 800b682:	6818      	ldr	r0, [r3, #0]
 800b684:	4770      	bx	lr
 800b686:	bf00      	nop
 800b688:	2000000c 	.word	0x2000000c

0800b68c <__libc_init_array>:
 800b68c:	b570      	push	{r4, r5, r6, lr}
 800b68e:	4d0d      	ldr	r5, [pc, #52]	; (800b6c4 <__libc_init_array+0x38>)
 800b690:	2600      	movs	r6, #0
 800b692:	4c0d      	ldr	r4, [pc, #52]	; (800b6c8 <__libc_init_array+0x3c>)
 800b694:	1b64      	subs	r4, r4, r5
 800b696:	10a4      	asrs	r4, r4, #2
 800b698:	42a6      	cmp	r6, r4
 800b69a:	d109      	bne.n	800b6b0 <__libc_init_array+0x24>
 800b69c:	4d0b      	ldr	r5, [pc, #44]	; (800b6cc <__libc_init_array+0x40>)
 800b69e:	2600      	movs	r6, #0
 800b6a0:	4c0b      	ldr	r4, [pc, #44]	; (800b6d0 <__libc_init_array+0x44>)
 800b6a2:	f000 ffe7 	bl	800c674 <_init>
 800b6a6:	1b64      	subs	r4, r4, r5
 800b6a8:	10a4      	asrs	r4, r4, #2
 800b6aa:	42a6      	cmp	r6, r4
 800b6ac:	d105      	bne.n	800b6ba <__libc_init_array+0x2e>
 800b6ae:	bd70      	pop	{r4, r5, r6, pc}
 800b6b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6b4:	3601      	adds	r6, #1
 800b6b6:	4798      	blx	r3
 800b6b8:	e7ee      	b.n	800b698 <__libc_init_array+0xc>
 800b6ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6be:	3601      	adds	r6, #1
 800b6c0:	4798      	blx	r3
 800b6c2:	e7f2      	b.n	800b6aa <__libc_init_array+0x1e>
 800b6c4:	0800ceb0 	.word	0x0800ceb0
 800b6c8:	0800ceb0 	.word	0x0800ceb0
 800b6cc:	0800ceb0 	.word	0x0800ceb0
 800b6d0:	0800ceb4 	.word	0x0800ceb4

0800b6d4 <memcpy>:
 800b6d4:	440a      	add	r2, r1
 800b6d6:	1e43      	subs	r3, r0, #1
 800b6d8:	4291      	cmp	r1, r2
 800b6da:	d100      	bne.n	800b6de <memcpy+0xa>
 800b6dc:	4770      	bx	lr
 800b6de:	b510      	push	{r4, lr}
 800b6e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6e4:	4291      	cmp	r1, r2
 800b6e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b6ea:	d1f9      	bne.n	800b6e0 <memcpy+0xc>
 800b6ec:	bd10      	pop	{r4, pc}

0800b6ee <memset>:
 800b6ee:	4402      	add	r2, r0
 800b6f0:	4603      	mov	r3, r0
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d100      	bne.n	800b6f8 <memset+0xa>
 800b6f6:	4770      	bx	lr
 800b6f8:	f803 1b01 	strb.w	r1, [r3], #1
 800b6fc:	e7f9      	b.n	800b6f2 <memset+0x4>

0800b6fe <strncmp>:
 800b6fe:	b510      	push	{r4, lr}
 800b700:	b17a      	cbz	r2, 800b722 <strncmp+0x24>
 800b702:	4603      	mov	r3, r0
 800b704:	3901      	subs	r1, #1
 800b706:	1884      	adds	r4, r0, r2
 800b708:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b70c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b710:	4290      	cmp	r0, r2
 800b712:	d101      	bne.n	800b718 <strncmp+0x1a>
 800b714:	42a3      	cmp	r3, r4
 800b716:	d101      	bne.n	800b71c <strncmp+0x1e>
 800b718:	1a80      	subs	r0, r0, r2
 800b71a:	bd10      	pop	{r4, pc}
 800b71c:	2800      	cmp	r0, #0
 800b71e:	d1f3      	bne.n	800b708 <strncmp+0xa>
 800b720:	e7fa      	b.n	800b718 <strncmp+0x1a>
 800b722:	4610      	mov	r0, r2
 800b724:	e7f9      	b.n	800b71a <strncmp+0x1c>

0800b726 <strncpy>:
 800b726:	3901      	subs	r1, #1
 800b728:	4603      	mov	r3, r0
 800b72a:	b510      	push	{r4, lr}
 800b72c:	b132      	cbz	r2, 800b73c <strncpy+0x16>
 800b72e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800b732:	3a01      	subs	r2, #1
 800b734:	f803 4b01 	strb.w	r4, [r3], #1
 800b738:	2c00      	cmp	r4, #0
 800b73a:	d1f7      	bne.n	800b72c <strncpy+0x6>
 800b73c:	441a      	add	r2, r3
 800b73e:	2100      	movs	r1, #0
 800b740:	4293      	cmp	r3, r2
 800b742:	d100      	bne.n	800b746 <strncpy+0x20>
 800b744:	bd10      	pop	{r4, pc}
 800b746:	f803 1b01 	strb.w	r1, [r3], #1
 800b74a:	e7f9      	b.n	800b740 <strncpy+0x1a>

0800b74c <__strtok_r>:
 800b74c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b74e:	b908      	cbnz	r0, 800b754 <__strtok_r+0x8>
 800b750:	6810      	ldr	r0, [r2, #0]
 800b752:	b188      	cbz	r0, 800b778 <__strtok_r+0x2c>
 800b754:	4604      	mov	r4, r0
 800b756:	4620      	mov	r0, r4
 800b758:	460f      	mov	r7, r1
 800b75a:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b75e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b762:	b91e      	cbnz	r6, 800b76c <__strtok_r+0x20>
 800b764:	b965      	cbnz	r5, 800b780 <__strtok_r+0x34>
 800b766:	4628      	mov	r0, r5
 800b768:	6015      	str	r5, [r2, #0]
 800b76a:	e005      	b.n	800b778 <__strtok_r+0x2c>
 800b76c:	42b5      	cmp	r5, r6
 800b76e:	d1f6      	bne.n	800b75e <__strtok_r+0x12>
 800b770:	2b00      	cmp	r3, #0
 800b772:	d1f0      	bne.n	800b756 <__strtok_r+0xa>
 800b774:	6014      	str	r4, [r2, #0]
 800b776:	7003      	strb	r3, [r0, #0]
 800b778:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b77a:	461c      	mov	r4, r3
 800b77c:	e00c      	b.n	800b798 <__strtok_r+0x4c>
 800b77e:	b915      	cbnz	r5, 800b786 <__strtok_r+0x3a>
 800b780:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b784:	460e      	mov	r6, r1
 800b786:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b78a:	42ab      	cmp	r3, r5
 800b78c:	d1f7      	bne.n	800b77e <__strtok_r+0x32>
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d0f3      	beq.n	800b77a <__strtok_r+0x2e>
 800b792:	2300      	movs	r3, #0
 800b794:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b798:	6014      	str	r4, [r2, #0]
 800b79a:	e7ed      	b.n	800b778 <__strtok_r+0x2c>

0800b79c <strtok_r>:
 800b79c:	2301      	movs	r3, #1
 800b79e:	f7ff bfd5 	b.w	800b74c <__strtok_r>
	...

0800b7a4 <round>:
 800b7a4:	ec51 0b10 	vmov	r0, r1, d0
 800b7a8:	b570      	push	{r4, r5, r6, lr}
 800b7aa:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800b7ae:	460b      	mov	r3, r1
 800b7b0:	ee10 2a10 	vmov	r2, s0
 800b7b4:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800b7b8:	2c13      	cmp	r4, #19
 800b7ba:	dc19      	bgt.n	800b7f0 <round+0x4c>
 800b7bc:	2c00      	cmp	r4, #0
 800b7be:	da09      	bge.n	800b7d4 <round+0x30>
 800b7c0:	3401      	adds	r4, #1
 800b7c2:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800b7c6:	d103      	bne.n	800b7d0 <round+0x2c>
 800b7c8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b7cc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	e028      	b.n	800b826 <round+0x82>
 800b7d4:	4d15      	ldr	r5, [pc, #84]	; (800b82c <round+0x88>)
 800b7d6:	4125      	asrs	r5, r4
 800b7d8:	ea01 0605 	and.w	r6, r1, r5
 800b7dc:	4332      	orrs	r2, r6
 800b7de:	d00e      	beq.n	800b7fe <round+0x5a>
 800b7e0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800b7e4:	fa42 f404 	asr.w	r4, r2, r4
 800b7e8:	4423      	add	r3, r4
 800b7ea:	ea23 0305 	bic.w	r3, r3, r5
 800b7ee:	e7ef      	b.n	800b7d0 <round+0x2c>
 800b7f0:	2c33      	cmp	r4, #51	; 0x33
 800b7f2:	dd07      	ble.n	800b804 <round+0x60>
 800b7f4:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800b7f8:	d101      	bne.n	800b7fe <round+0x5a>
 800b7fa:	f7f4 fd4b 	bl	8000294 <__adddf3>
 800b7fe:	ec41 0b10 	vmov	d0, r0, r1
 800b802:	bd70      	pop	{r4, r5, r6, pc}
 800b804:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800b808:	f04f 35ff 	mov.w	r5, #4294967295
 800b80c:	40f5      	lsrs	r5, r6
 800b80e:	4228      	tst	r0, r5
 800b810:	d0f5      	beq.n	800b7fe <round+0x5a>
 800b812:	2101      	movs	r1, #1
 800b814:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800b818:	fa01 f404 	lsl.w	r4, r1, r4
 800b81c:	1912      	adds	r2, r2, r4
 800b81e:	bf28      	it	cs
 800b820:	185b      	addcs	r3, r3, r1
 800b822:	ea22 0205 	bic.w	r2, r2, r5
 800b826:	4619      	mov	r1, r3
 800b828:	4610      	mov	r0, r2
 800b82a:	e7e8      	b.n	800b7fe <round+0x5a>
 800b82c:	000fffff 	.word	0x000fffff

0800b830 <pow>:
 800b830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b832:	ec55 4b11 	vmov	r4, r5, d1
 800b836:	ed2d 8b02 	vpush	{d8}
 800b83a:	eeb0 8a40 	vmov.f32	s16, s0
 800b83e:	eef0 8a60 	vmov.f32	s17, s1
 800b842:	f000 f865 	bl	800b910 <__ieee754_pow>
 800b846:	4622      	mov	r2, r4
 800b848:	462b      	mov	r3, r5
 800b84a:	4620      	mov	r0, r4
 800b84c:	4629      	mov	r1, r5
 800b84e:	ec57 6b10 	vmov	r6, r7, d0
 800b852:	f7f5 f96f 	bl	8000b34 <__aeabi_dcmpun>
 800b856:	2800      	cmp	r0, #0
 800b858:	d13b      	bne.n	800b8d2 <pow+0xa2>
 800b85a:	2200      	movs	r2, #0
 800b85c:	2300      	movs	r3, #0
 800b85e:	ec51 0b18 	vmov	r0, r1, d8
 800b862:	f7f5 f935 	bl	8000ad0 <__aeabi_dcmpeq>
 800b866:	b1b8      	cbz	r0, 800b898 <pow+0x68>
 800b868:	2200      	movs	r2, #0
 800b86a:	2300      	movs	r3, #0
 800b86c:	4620      	mov	r0, r4
 800b86e:	4629      	mov	r1, r5
 800b870:	f7f5 f92e 	bl	8000ad0 <__aeabi_dcmpeq>
 800b874:	2800      	cmp	r0, #0
 800b876:	d146      	bne.n	800b906 <pow+0xd6>
 800b878:	ec45 4b10 	vmov	d0, r4, r5
 800b87c:	f000 fe67 	bl	800c54e <finite>
 800b880:	b338      	cbz	r0, 800b8d2 <pow+0xa2>
 800b882:	2200      	movs	r2, #0
 800b884:	2300      	movs	r3, #0
 800b886:	4620      	mov	r0, r4
 800b888:	4629      	mov	r1, r5
 800b88a:	f7f5 f92b 	bl	8000ae4 <__aeabi_dcmplt>
 800b88e:	b300      	cbz	r0, 800b8d2 <pow+0xa2>
 800b890:	f7ff fef6 	bl	800b680 <__errno>
 800b894:	2322      	movs	r3, #34	; 0x22
 800b896:	e01b      	b.n	800b8d0 <pow+0xa0>
 800b898:	ec47 6b10 	vmov	d0, r6, r7
 800b89c:	f000 fe57 	bl	800c54e <finite>
 800b8a0:	b9e0      	cbnz	r0, 800b8dc <pow+0xac>
 800b8a2:	eeb0 0a48 	vmov.f32	s0, s16
 800b8a6:	eef0 0a68 	vmov.f32	s1, s17
 800b8aa:	f000 fe50 	bl	800c54e <finite>
 800b8ae:	b1a8      	cbz	r0, 800b8dc <pow+0xac>
 800b8b0:	ec45 4b10 	vmov	d0, r4, r5
 800b8b4:	f000 fe4b 	bl	800c54e <finite>
 800b8b8:	b180      	cbz	r0, 800b8dc <pow+0xac>
 800b8ba:	4632      	mov	r2, r6
 800b8bc:	463b      	mov	r3, r7
 800b8be:	4630      	mov	r0, r6
 800b8c0:	4639      	mov	r1, r7
 800b8c2:	f7f5 f937 	bl	8000b34 <__aeabi_dcmpun>
 800b8c6:	2800      	cmp	r0, #0
 800b8c8:	d0e2      	beq.n	800b890 <pow+0x60>
 800b8ca:	f7ff fed9 	bl	800b680 <__errno>
 800b8ce:	2321      	movs	r3, #33	; 0x21
 800b8d0:	6003      	str	r3, [r0, #0]
 800b8d2:	ecbd 8b02 	vpop	{d8}
 800b8d6:	ec47 6b10 	vmov	d0, r6, r7
 800b8da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8dc:	2200      	movs	r2, #0
 800b8de:	2300      	movs	r3, #0
 800b8e0:	4630      	mov	r0, r6
 800b8e2:	4639      	mov	r1, r7
 800b8e4:	f7f5 f8f4 	bl	8000ad0 <__aeabi_dcmpeq>
 800b8e8:	2800      	cmp	r0, #0
 800b8ea:	d0f2      	beq.n	800b8d2 <pow+0xa2>
 800b8ec:	eeb0 0a48 	vmov.f32	s0, s16
 800b8f0:	eef0 0a68 	vmov.f32	s1, s17
 800b8f4:	f000 fe2b 	bl	800c54e <finite>
 800b8f8:	2800      	cmp	r0, #0
 800b8fa:	d0ea      	beq.n	800b8d2 <pow+0xa2>
 800b8fc:	ec45 4b10 	vmov	d0, r4, r5
 800b900:	f000 fe25 	bl	800c54e <finite>
 800b904:	e7c3      	b.n	800b88e <pow+0x5e>
 800b906:	2600      	movs	r6, #0
 800b908:	4f00      	ldr	r7, [pc, #0]	; (800b90c <pow+0xdc>)
 800b90a:	e7e2      	b.n	800b8d2 <pow+0xa2>
 800b90c:	3ff00000 	.word	0x3ff00000

0800b910 <__ieee754_pow>:
 800b910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b914:	ed2d 8b06 	vpush	{d8-d10}
 800b918:	b089      	sub	sp, #36	; 0x24
 800b91a:	ed8d 1b00 	vstr	d1, [sp]
 800b91e:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b922:	ec57 6b10 	vmov	r6, r7, d0
 800b926:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b92a:	ea58 0102 	orrs.w	r1, r8, r2
 800b92e:	d115      	bne.n	800b95c <__ieee754_pow+0x4c>
 800b930:	19b3      	adds	r3, r6, r6
 800b932:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800b936:	4152      	adcs	r2, r2
 800b938:	4299      	cmp	r1, r3
 800b93a:	4b89      	ldr	r3, [pc, #548]	; (800bb60 <__ieee754_pow+0x250>)
 800b93c:	4193      	sbcs	r3, r2
 800b93e:	f080 84d3 	bcs.w	800c2e8 <__ieee754_pow+0x9d8>
 800b942:	4630      	mov	r0, r6
 800b944:	4639      	mov	r1, r7
 800b946:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b94a:	f7f4 fca3 	bl	8000294 <__adddf3>
 800b94e:	ec41 0b10 	vmov	d0, r0, r1
 800b952:	b009      	add	sp, #36	; 0x24
 800b954:	ecbd 8b06 	vpop	{d8-d10}
 800b958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b95c:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b960:	4b80      	ldr	r3, [pc, #512]	; (800bb64 <__ieee754_pow+0x254>)
 800b962:	463d      	mov	r5, r7
 800b964:	ee10 aa10 	vmov	sl, s0
 800b968:	429c      	cmp	r4, r3
 800b96a:	dc06      	bgt.n	800b97a <__ieee754_pow+0x6a>
 800b96c:	d101      	bne.n	800b972 <__ieee754_pow+0x62>
 800b96e:	2e00      	cmp	r6, #0
 800b970:	d1e7      	bne.n	800b942 <__ieee754_pow+0x32>
 800b972:	4598      	cmp	r8, r3
 800b974:	dc01      	bgt.n	800b97a <__ieee754_pow+0x6a>
 800b976:	d10f      	bne.n	800b998 <__ieee754_pow+0x88>
 800b978:	b172      	cbz	r2, 800b998 <__ieee754_pow+0x88>
 800b97a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800b97e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800b982:	ea55 050a 	orrs.w	r5, r5, sl
 800b986:	d1dc      	bne.n	800b942 <__ieee754_pow+0x32>
 800b988:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b98c:	18db      	adds	r3, r3, r3
 800b98e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800b992:	4152      	adcs	r2, r2
 800b994:	429d      	cmp	r5, r3
 800b996:	e7d0      	b.n	800b93a <__ieee754_pow+0x2a>
 800b998:	2d00      	cmp	r5, #0
 800b99a:	da3b      	bge.n	800ba14 <__ieee754_pow+0x104>
 800b99c:	4b72      	ldr	r3, [pc, #456]	; (800bb68 <__ieee754_pow+0x258>)
 800b99e:	4598      	cmp	r8, r3
 800b9a0:	dc51      	bgt.n	800ba46 <__ieee754_pow+0x136>
 800b9a2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b9a6:	4598      	cmp	r8, r3
 800b9a8:	f340 84ad 	ble.w	800c306 <__ieee754_pow+0x9f6>
 800b9ac:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b9b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b9b4:	2b14      	cmp	r3, #20
 800b9b6:	dd0f      	ble.n	800b9d8 <__ieee754_pow+0xc8>
 800b9b8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b9bc:	fa22 f103 	lsr.w	r1, r2, r3
 800b9c0:	fa01 f303 	lsl.w	r3, r1, r3
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	f040 849e 	bne.w	800c306 <__ieee754_pow+0x9f6>
 800b9ca:	f001 0101 	and.w	r1, r1, #1
 800b9ce:	f1c1 0302 	rsb	r3, r1, #2
 800b9d2:	9304      	str	r3, [sp, #16]
 800b9d4:	b182      	cbz	r2, 800b9f8 <__ieee754_pow+0xe8>
 800b9d6:	e05f      	b.n	800ba98 <__ieee754_pow+0x188>
 800b9d8:	2a00      	cmp	r2, #0
 800b9da:	d15b      	bne.n	800ba94 <__ieee754_pow+0x184>
 800b9dc:	f1c3 0314 	rsb	r3, r3, #20
 800b9e0:	fa48 f103 	asr.w	r1, r8, r3
 800b9e4:	fa01 f303 	lsl.w	r3, r1, r3
 800b9e8:	4543      	cmp	r3, r8
 800b9ea:	f040 8489 	bne.w	800c300 <__ieee754_pow+0x9f0>
 800b9ee:	f001 0101 	and.w	r1, r1, #1
 800b9f2:	f1c1 0302 	rsb	r3, r1, #2
 800b9f6:	9304      	str	r3, [sp, #16]
 800b9f8:	4b5c      	ldr	r3, [pc, #368]	; (800bb6c <__ieee754_pow+0x25c>)
 800b9fa:	4598      	cmp	r8, r3
 800b9fc:	d132      	bne.n	800ba64 <__ieee754_pow+0x154>
 800b9fe:	f1b9 0f00 	cmp.w	r9, #0
 800ba02:	f280 8479 	bge.w	800c2f8 <__ieee754_pow+0x9e8>
 800ba06:	4632      	mov	r2, r6
 800ba08:	463b      	mov	r3, r7
 800ba0a:	2000      	movs	r0, #0
 800ba0c:	4957      	ldr	r1, [pc, #348]	; (800bb6c <__ieee754_pow+0x25c>)
 800ba0e:	f7f4 ff21 	bl	8000854 <__aeabi_ddiv>
 800ba12:	e79c      	b.n	800b94e <__ieee754_pow+0x3e>
 800ba14:	2300      	movs	r3, #0
 800ba16:	9304      	str	r3, [sp, #16]
 800ba18:	2a00      	cmp	r2, #0
 800ba1a:	d13d      	bne.n	800ba98 <__ieee754_pow+0x188>
 800ba1c:	4b51      	ldr	r3, [pc, #324]	; (800bb64 <__ieee754_pow+0x254>)
 800ba1e:	4598      	cmp	r8, r3
 800ba20:	d1ea      	bne.n	800b9f8 <__ieee754_pow+0xe8>
 800ba22:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800ba26:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800ba2a:	ea53 030a 	orrs.w	r3, r3, sl
 800ba2e:	f000 845b 	beq.w	800c2e8 <__ieee754_pow+0x9d8>
 800ba32:	4b4f      	ldr	r3, [pc, #316]	; (800bb70 <__ieee754_pow+0x260>)
 800ba34:	429c      	cmp	r4, r3
 800ba36:	dd08      	ble.n	800ba4a <__ieee754_pow+0x13a>
 800ba38:	f1b9 0f00 	cmp.w	r9, #0
 800ba3c:	f2c0 8458 	blt.w	800c2f0 <__ieee754_pow+0x9e0>
 800ba40:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ba44:	e783      	b.n	800b94e <__ieee754_pow+0x3e>
 800ba46:	2302      	movs	r3, #2
 800ba48:	e7e5      	b.n	800ba16 <__ieee754_pow+0x106>
 800ba4a:	f1b9 0f00 	cmp.w	r9, #0
 800ba4e:	f04f 0000 	mov.w	r0, #0
 800ba52:	f04f 0100 	mov.w	r1, #0
 800ba56:	f6bf af7a 	bge.w	800b94e <__ieee754_pow+0x3e>
 800ba5a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800ba5e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ba62:	e774      	b.n	800b94e <__ieee754_pow+0x3e>
 800ba64:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800ba68:	d106      	bne.n	800ba78 <__ieee754_pow+0x168>
 800ba6a:	4632      	mov	r2, r6
 800ba6c:	463b      	mov	r3, r7
 800ba6e:	4630      	mov	r0, r6
 800ba70:	4639      	mov	r1, r7
 800ba72:	f7f4 fdc5 	bl	8000600 <__aeabi_dmul>
 800ba76:	e76a      	b.n	800b94e <__ieee754_pow+0x3e>
 800ba78:	4b3e      	ldr	r3, [pc, #248]	; (800bb74 <__ieee754_pow+0x264>)
 800ba7a:	4599      	cmp	r9, r3
 800ba7c:	d10c      	bne.n	800ba98 <__ieee754_pow+0x188>
 800ba7e:	2d00      	cmp	r5, #0
 800ba80:	db0a      	blt.n	800ba98 <__ieee754_pow+0x188>
 800ba82:	ec47 6b10 	vmov	d0, r6, r7
 800ba86:	b009      	add	sp, #36	; 0x24
 800ba88:	ecbd 8b06 	vpop	{d8-d10}
 800ba8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba90:	f000 bc6c 	b.w	800c36c <__ieee754_sqrt>
 800ba94:	2300      	movs	r3, #0
 800ba96:	9304      	str	r3, [sp, #16]
 800ba98:	ec47 6b10 	vmov	d0, r6, r7
 800ba9c:	f000 fd4e 	bl	800c53c <fabs>
 800baa0:	ec51 0b10 	vmov	r0, r1, d0
 800baa4:	f1ba 0f00 	cmp.w	sl, #0
 800baa8:	d129      	bne.n	800bafe <__ieee754_pow+0x1ee>
 800baaa:	b124      	cbz	r4, 800bab6 <__ieee754_pow+0x1a6>
 800baac:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800bab0:	4b2e      	ldr	r3, [pc, #184]	; (800bb6c <__ieee754_pow+0x25c>)
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d123      	bne.n	800bafe <__ieee754_pow+0x1ee>
 800bab6:	f1b9 0f00 	cmp.w	r9, #0
 800baba:	da05      	bge.n	800bac8 <__ieee754_pow+0x1b8>
 800babc:	4602      	mov	r2, r0
 800babe:	460b      	mov	r3, r1
 800bac0:	2000      	movs	r0, #0
 800bac2:	492a      	ldr	r1, [pc, #168]	; (800bb6c <__ieee754_pow+0x25c>)
 800bac4:	f7f4 fec6 	bl	8000854 <__aeabi_ddiv>
 800bac8:	2d00      	cmp	r5, #0
 800baca:	f6bf af40 	bge.w	800b94e <__ieee754_pow+0x3e>
 800bace:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800bad2:	9b04      	ldr	r3, [sp, #16]
 800bad4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bad8:	4323      	orrs	r3, r4
 800bada:	d108      	bne.n	800baee <__ieee754_pow+0x1de>
 800badc:	4602      	mov	r2, r0
 800bade:	460b      	mov	r3, r1
 800bae0:	4610      	mov	r0, r2
 800bae2:	4619      	mov	r1, r3
 800bae4:	f7f4 fbd4 	bl	8000290 <__aeabi_dsub>
 800bae8:	4602      	mov	r2, r0
 800baea:	460b      	mov	r3, r1
 800baec:	e78f      	b.n	800ba0e <__ieee754_pow+0xfe>
 800baee:	9b04      	ldr	r3, [sp, #16]
 800baf0:	2b01      	cmp	r3, #1
 800baf2:	f47f af2c 	bne.w	800b94e <__ieee754_pow+0x3e>
 800baf6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bafa:	4619      	mov	r1, r3
 800bafc:	e727      	b.n	800b94e <__ieee754_pow+0x3e>
 800bafe:	0feb      	lsrs	r3, r5, #31
 800bb00:	3b01      	subs	r3, #1
 800bb02:	9306      	str	r3, [sp, #24]
 800bb04:	9a06      	ldr	r2, [sp, #24]
 800bb06:	9b04      	ldr	r3, [sp, #16]
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	d102      	bne.n	800bb12 <__ieee754_pow+0x202>
 800bb0c:	4632      	mov	r2, r6
 800bb0e:	463b      	mov	r3, r7
 800bb10:	e7e6      	b.n	800bae0 <__ieee754_pow+0x1d0>
 800bb12:	4b19      	ldr	r3, [pc, #100]	; (800bb78 <__ieee754_pow+0x268>)
 800bb14:	4598      	cmp	r8, r3
 800bb16:	f340 80fb 	ble.w	800bd10 <__ieee754_pow+0x400>
 800bb1a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800bb1e:	4598      	cmp	r8, r3
 800bb20:	4b13      	ldr	r3, [pc, #76]	; (800bb70 <__ieee754_pow+0x260>)
 800bb22:	dd0c      	ble.n	800bb3e <__ieee754_pow+0x22e>
 800bb24:	429c      	cmp	r4, r3
 800bb26:	dc0f      	bgt.n	800bb48 <__ieee754_pow+0x238>
 800bb28:	f1b9 0f00 	cmp.w	r9, #0
 800bb2c:	da0f      	bge.n	800bb4e <__ieee754_pow+0x23e>
 800bb2e:	2000      	movs	r0, #0
 800bb30:	b009      	add	sp, #36	; 0x24
 800bb32:	ecbd 8b06 	vpop	{d8-d10}
 800bb36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb3a:	f000 bcf6 	b.w	800c52a <__math_oflow>
 800bb3e:	429c      	cmp	r4, r3
 800bb40:	dbf2      	blt.n	800bb28 <__ieee754_pow+0x218>
 800bb42:	4b0a      	ldr	r3, [pc, #40]	; (800bb6c <__ieee754_pow+0x25c>)
 800bb44:	429c      	cmp	r4, r3
 800bb46:	dd19      	ble.n	800bb7c <__ieee754_pow+0x26c>
 800bb48:	f1b9 0f00 	cmp.w	r9, #0
 800bb4c:	dcef      	bgt.n	800bb2e <__ieee754_pow+0x21e>
 800bb4e:	2000      	movs	r0, #0
 800bb50:	b009      	add	sp, #36	; 0x24
 800bb52:	ecbd 8b06 	vpop	{d8-d10}
 800bb56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb5a:	f000 bcdd 	b.w	800c518 <__math_uflow>
 800bb5e:	bf00      	nop
 800bb60:	fff00000 	.word	0xfff00000
 800bb64:	7ff00000 	.word	0x7ff00000
 800bb68:	433fffff 	.word	0x433fffff
 800bb6c:	3ff00000 	.word	0x3ff00000
 800bb70:	3fefffff 	.word	0x3fefffff
 800bb74:	3fe00000 	.word	0x3fe00000
 800bb78:	41e00000 	.word	0x41e00000
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	4b60      	ldr	r3, [pc, #384]	; (800bd00 <__ieee754_pow+0x3f0>)
 800bb80:	f7f4 fb86 	bl	8000290 <__aeabi_dsub>
 800bb84:	4604      	mov	r4, r0
 800bb86:	460d      	mov	r5, r1
 800bb88:	a353      	add	r3, pc, #332	; (adr r3, 800bcd8 <__ieee754_pow+0x3c8>)
 800bb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb8e:	f7f4 fd37 	bl	8000600 <__aeabi_dmul>
 800bb92:	4606      	mov	r6, r0
 800bb94:	460f      	mov	r7, r1
 800bb96:	4620      	mov	r0, r4
 800bb98:	4629      	mov	r1, r5
 800bb9a:	a351      	add	r3, pc, #324	; (adr r3, 800bce0 <__ieee754_pow+0x3d0>)
 800bb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba0:	f7f4 fd2e 	bl	8000600 <__aeabi_dmul>
 800bba4:	2200      	movs	r2, #0
 800bba6:	4682      	mov	sl, r0
 800bba8:	468b      	mov	fp, r1
 800bbaa:	4b56      	ldr	r3, [pc, #344]	; (800bd04 <__ieee754_pow+0x3f4>)
 800bbac:	4620      	mov	r0, r4
 800bbae:	4629      	mov	r1, r5
 800bbb0:	f7f4 fd26 	bl	8000600 <__aeabi_dmul>
 800bbb4:	4602      	mov	r2, r0
 800bbb6:	460b      	mov	r3, r1
 800bbb8:	a14b      	add	r1, pc, #300	; (adr r1, 800bce8 <__ieee754_pow+0x3d8>)
 800bbba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbbe:	f7f4 fb67 	bl	8000290 <__aeabi_dsub>
 800bbc2:	4622      	mov	r2, r4
 800bbc4:	462b      	mov	r3, r5
 800bbc6:	f7f4 fd1b 	bl	8000600 <__aeabi_dmul>
 800bbca:	4602      	mov	r2, r0
 800bbcc:	460b      	mov	r3, r1
 800bbce:	2000      	movs	r0, #0
 800bbd0:	494d      	ldr	r1, [pc, #308]	; (800bd08 <__ieee754_pow+0x3f8>)
 800bbd2:	f7f4 fb5d 	bl	8000290 <__aeabi_dsub>
 800bbd6:	4680      	mov	r8, r0
 800bbd8:	4689      	mov	r9, r1
 800bbda:	4622      	mov	r2, r4
 800bbdc:	462b      	mov	r3, r5
 800bbde:	4620      	mov	r0, r4
 800bbe0:	4629      	mov	r1, r5
 800bbe2:	f7f4 fd0d 	bl	8000600 <__aeabi_dmul>
 800bbe6:	4602      	mov	r2, r0
 800bbe8:	460b      	mov	r3, r1
 800bbea:	4640      	mov	r0, r8
 800bbec:	4649      	mov	r1, r9
 800bbee:	f7f4 fd07 	bl	8000600 <__aeabi_dmul>
 800bbf2:	a33f      	add	r3, pc, #252	; (adr r3, 800bcf0 <__ieee754_pow+0x3e0>)
 800bbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf8:	f7f4 fd02 	bl	8000600 <__aeabi_dmul>
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	460b      	mov	r3, r1
 800bc00:	4650      	mov	r0, sl
 800bc02:	4659      	mov	r1, fp
 800bc04:	f7f4 fb44 	bl	8000290 <__aeabi_dsub>
 800bc08:	4602      	mov	r2, r0
 800bc0a:	460b      	mov	r3, r1
 800bc0c:	4680      	mov	r8, r0
 800bc0e:	4689      	mov	r9, r1
 800bc10:	4630      	mov	r0, r6
 800bc12:	4639      	mov	r1, r7
 800bc14:	f7f4 fb3e 	bl	8000294 <__adddf3>
 800bc18:	2000      	movs	r0, #0
 800bc1a:	4632      	mov	r2, r6
 800bc1c:	463b      	mov	r3, r7
 800bc1e:	4604      	mov	r4, r0
 800bc20:	460d      	mov	r5, r1
 800bc22:	f7f4 fb35 	bl	8000290 <__aeabi_dsub>
 800bc26:	4602      	mov	r2, r0
 800bc28:	460b      	mov	r3, r1
 800bc2a:	4640      	mov	r0, r8
 800bc2c:	4649      	mov	r1, r9
 800bc2e:	f7f4 fb2f 	bl	8000290 <__aeabi_dsub>
 800bc32:	9b04      	ldr	r3, [sp, #16]
 800bc34:	9a06      	ldr	r2, [sp, #24]
 800bc36:	4682      	mov	sl, r0
 800bc38:	3b01      	subs	r3, #1
 800bc3a:	468b      	mov	fp, r1
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	f040 81e7 	bne.w	800c010 <__ieee754_pow+0x700>
 800bc42:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800bcf8 <__ieee754_pow+0x3e8>
 800bc46:	e9dd 6700 	ldrd	r6, r7, [sp]
 800bc4a:	2600      	movs	r6, #0
 800bc4c:	eeb0 8a47 	vmov.f32	s16, s14
 800bc50:	eef0 8a67 	vmov.f32	s17, s15
 800bc54:	463b      	mov	r3, r7
 800bc56:	4632      	mov	r2, r6
 800bc58:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc5c:	f7f4 fb18 	bl	8000290 <__aeabi_dsub>
 800bc60:	4622      	mov	r2, r4
 800bc62:	462b      	mov	r3, r5
 800bc64:	f7f4 fccc 	bl	8000600 <__aeabi_dmul>
 800bc68:	4680      	mov	r8, r0
 800bc6a:	4689      	mov	r9, r1
 800bc6c:	4650      	mov	r0, sl
 800bc6e:	4659      	mov	r1, fp
 800bc70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bc74:	f7f4 fcc4 	bl	8000600 <__aeabi_dmul>
 800bc78:	4602      	mov	r2, r0
 800bc7a:	460b      	mov	r3, r1
 800bc7c:	4640      	mov	r0, r8
 800bc7e:	4649      	mov	r1, r9
 800bc80:	f7f4 fb08 	bl	8000294 <__adddf3>
 800bc84:	4680      	mov	r8, r0
 800bc86:	4689      	mov	r9, r1
 800bc88:	4632      	mov	r2, r6
 800bc8a:	463b      	mov	r3, r7
 800bc8c:	4620      	mov	r0, r4
 800bc8e:	4629      	mov	r1, r5
 800bc90:	f7f4 fcb6 	bl	8000600 <__aeabi_dmul>
 800bc94:	460b      	mov	r3, r1
 800bc96:	4604      	mov	r4, r0
 800bc98:	460d      	mov	r5, r1
 800bc9a:	4602      	mov	r2, r0
 800bc9c:	4649      	mov	r1, r9
 800bc9e:	4640      	mov	r0, r8
 800bca0:	f7f4 faf8 	bl	8000294 <__adddf3>
 800bca4:	4b19      	ldr	r3, [pc, #100]	; (800bd0c <__ieee754_pow+0x3fc>)
 800bca6:	4606      	mov	r6, r0
 800bca8:	460f      	mov	r7, r1
 800bcaa:	4299      	cmp	r1, r3
 800bcac:	468b      	mov	fp, r1
 800bcae:	ec45 4b19 	vmov	d9, r4, r5
 800bcb2:	f340 82f2 	ble.w	800c29a <__ieee754_pow+0x98a>
 800bcb6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800bcba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bcbe:	4303      	orrs	r3, r0
 800bcc0:	f000 81e4 	beq.w	800c08c <__ieee754_pow+0x77c>
 800bcc4:	2200      	movs	r2, #0
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	ec51 0b18 	vmov	r0, r1, d8
 800bccc:	f7f4 ff0a 	bl	8000ae4 <__aeabi_dcmplt>
 800bcd0:	3800      	subs	r0, #0
 800bcd2:	bf18      	it	ne
 800bcd4:	2001      	movne	r0, #1
 800bcd6:	e72b      	b.n	800bb30 <__ieee754_pow+0x220>
 800bcd8:	60000000 	.word	0x60000000
 800bcdc:	3ff71547 	.word	0x3ff71547
 800bce0:	f85ddf44 	.word	0xf85ddf44
 800bce4:	3e54ae0b 	.word	0x3e54ae0b
 800bce8:	55555555 	.word	0x55555555
 800bcec:	3fd55555 	.word	0x3fd55555
 800bcf0:	652b82fe 	.word	0x652b82fe
 800bcf4:	3ff71547 	.word	0x3ff71547
 800bcf8:	00000000 	.word	0x00000000
 800bcfc:	bff00000 	.word	0xbff00000
 800bd00:	3ff00000 	.word	0x3ff00000
 800bd04:	3fd00000 	.word	0x3fd00000
 800bd08:	3fe00000 	.word	0x3fe00000
 800bd0c:	408fffff 	.word	0x408fffff
 800bd10:	4bd5      	ldr	r3, [pc, #852]	; (800c068 <__ieee754_pow+0x758>)
 800bd12:	2200      	movs	r2, #0
 800bd14:	402b      	ands	r3, r5
 800bd16:	b92b      	cbnz	r3, 800bd24 <__ieee754_pow+0x414>
 800bd18:	4bd4      	ldr	r3, [pc, #848]	; (800c06c <__ieee754_pow+0x75c>)
 800bd1a:	f7f4 fc71 	bl	8000600 <__aeabi_dmul>
 800bd1e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bd22:	460c      	mov	r4, r1
 800bd24:	1523      	asrs	r3, r4, #20
 800bd26:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bd2a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bd2e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bd32:	4413      	add	r3, r2
 800bd34:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bd38:	9305      	str	r3, [sp, #20]
 800bd3a:	4bcd      	ldr	r3, [pc, #820]	; (800c070 <__ieee754_pow+0x760>)
 800bd3c:	429c      	cmp	r4, r3
 800bd3e:	dd08      	ble.n	800bd52 <__ieee754_pow+0x442>
 800bd40:	4bcc      	ldr	r3, [pc, #816]	; (800c074 <__ieee754_pow+0x764>)
 800bd42:	429c      	cmp	r4, r3
 800bd44:	f340 8162 	ble.w	800c00c <__ieee754_pow+0x6fc>
 800bd48:	9b05      	ldr	r3, [sp, #20]
 800bd4a:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bd4e:	3301      	adds	r3, #1
 800bd50:	9305      	str	r3, [sp, #20]
 800bd52:	2400      	movs	r4, #0
 800bd54:	00e3      	lsls	r3, r4, #3
 800bd56:	4682      	mov	sl, r0
 800bd58:	4629      	mov	r1, r5
 800bd5a:	46ab      	mov	fp, r5
 800bd5c:	9307      	str	r3, [sp, #28]
 800bd5e:	4bc6      	ldr	r3, [pc, #792]	; (800c078 <__ieee754_pow+0x768>)
 800bd60:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bd64:	ed93 7b00 	vldr	d7, [r3]
 800bd68:	eeb0 9a47 	vmov.f32	s18, s14
 800bd6c:	eef0 9a67 	vmov.f32	s19, s15
 800bd70:	ec53 2b17 	vmov	r2, r3, d7
 800bd74:	f7f4 fa8c 	bl	8000290 <__aeabi_dsub>
 800bd78:	4652      	mov	r2, sl
 800bd7a:	4606      	mov	r6, r0
 800bd7c:	460f      	mov	r7, r1
 800bd7e:	462b      	mov	r3, r5
 800bd80:	106d      	asrs	r5, r5, #1
 800bd82:	ec51 0b19 	vmov	r0, r1, d9
 800bd86:	f7f4 fa85 	bl	8000294 <__adddf3>
 800bd8a:	4602      	mov	r2, r0
 800bd8c:	460b      	mov	r3, r1
 800bd8e:	2000      	movs	r0, #0
 800bd90:	49ba      	ldr	r1, [pc, #744]	; (800c07c <__ieee754_pow+0x76c>)
 800bd92:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800bd96:	f7f4 fd5d 	bl	8000854 <__aeabi_ddiv>
 800bd9a:	4602      	mov	r2, r0
 800bd9c:	460b      	mov	r3, r1
 800bd9e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bda2:	ec41 0b1a 	vmov	d10, r0, r1
 800bda6:	4630      	mov	r0, r6
 800bda8:	4639      	mov	r1, r7
 800bdaa:	f7f4 fc29 	bl	8000600 <__aeabi_dmul>
 800bdae:	2300      	movs	r3, #0
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdb6:	9302      	str	r3, [sp, #8]
 800bdb8:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800bdbc:	4614      	mov	r4, r2
 800bdbe:	461d      	mov	r5, r3
 800bdc0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bdc4:	ec41 0b18 	vmov	d8, r0, r1
 800bdc8:	4640      	mov	r0, r8
 800bdca:	4649      	mov	r1, r9
 800bdcc:	f7f4 fc18 	bl	8000600 <__aeabi_dmul>
 800bdd0:	4602      	mov	r2, r0
 800bdd2:	460b      	mov	r3, r1
 800bdd4:	4630      	mov	r0, r6
 800bdd6:	4639      	mov	r1, r7
 800bdd8:	f7f4 fa5a 	bl	8000290 <__aeabi_dsub>
 800bddc:	4606      	mov	r6, r0
 800bdde:	460f      	mov	r7, r1
 800bde0:	4620      	mov	r0, r4
 800bde2:	4629      	mov	r1, r5
 800bde4:	ec53 2b19 	vmov	r2, r3, d9
 800bde8:	f7f4 fa52 	bl	8000290 <__aeabi_dsub>
 800bdec:	4602      	mov	r2, r0
 800bdee:	460b      	mov	r3, r1
 800bdf0:	4650      	mov	r0, sl
 800bdf2:	4659      	mov	r1, fp
 800bdf4:	f7f4 fa4c 	bl	8000290 <__aeabi_dsub>
 800bdf8:	4642      	mov	r2, r8
 800bdfa:	464b      	mov	r3, r9
 800bdfc:	f7f4 fc00 	bl	8000600 <__aeabi_dmul>
 800be00:	4602      	mov	r2, r0
 800be02:	460b      	mov	r3, r1
 800be04:	4630      	mov	r0, r6
 800be06:	4639      	mov	r1, r7
 800be08:	f7f4 fa42 	bl	8000290 <__aeabi_dsub>
 800be0c:	ec53 2b1a 	vmov	r2, r3, d10
 800be10:	f7f4 fbf6 	bl	8000600 <__aeabi_dmul>
 800be14:	ec53 2b18 	vmov	r2, r3, d8
 800be18:	ec41 0b19 	vmov	d9, r0, r1
 800be1c:	ec51 0b18 	vmov	r0, r1, d8
 800be20:	f7f4 fbee 	bl	8000600 <__aeabi_dmul>
 800be24:	4604      	mov	r4, r0
 800be26:	460d      	mov	r5, r1
 800be28:	a37b      	add	r3, pc, #492	; (adr r3, 800c018 <__ieee754_pow+0x708>)
 800be2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be2e:	f7f4 fbe7 	bl	8000600 <__aeabi_dmul>
 800be32:	a37b      	add	r3, pc, #492	; (adr r3, 800c020 <__ieee754_pow+0x710>)
 800be34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be38:	f7f4 fa2c 	bl	8000294 <__adddf3>
 800be3c:	4622      	mov	r2, r4
 800be3e:	462b      	mov	r3, r5
 800be40:	f7f4 fbde 	bl	8000600 <__aeabi_dmul>
 800be44:	a378      	add	r3, pc, #480	; (adr r3, 800c028 <__ieee754_pow+0x718>)
 800be46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be4a:	f7f4 fa23 	bl	8000294 <__adddf3>
 800be4e:	4622      	mov	r2, r4
 800be50:	462b      	mov	r3, r5
 800be52:	f7f4 fbd5 	bl	8000600 <__aeabi_dmul>
 800be56:	a376      	add	r3, pc, #472	; (adr r3, 800c030 <__ieee754_pow+0x720>)
 800be58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be5c:	f7f4 fa1a 	bl	8000294 <__adddf3>
 800be60:	4622      	mov	r2, r4
 800be62:	462b      	mov	r3, r5
 800be64:	f7f4 fbcc 	bl	8000600 <__aeabi_dmul>
 800be68:	a373      	add	r3, pc, #460	; (adr r3, 800c038 <__ieee754_pow+0x728>)
 800be6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6e:	f7f4 fa11 	bl	8000294 <__adddf3>
 800be72:	4622      	mov	r2, r4
 800be74:	462b      	mov	r3, r5
 800be76:	f7f4 fbc3 	bl	8000600 <__aeabi_dmul>
 800be7a:	a371      	add	r3, pc, #452	; (adr r3, 800c040 <__ieee754_pow+0x730>)
 800be7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be80:	f7f4 fa08 	bl	8000294 <__adddf3>
 800be84:	4606      	mov	r6, r0
 800be86:	460f      	mov	r7, r1
 800be88:	4622      	mov	r2, r4
 800be8a:	462b      	mov	r3, r5
 800be8c:	4620      	mov	r0, r4
 800be8e:	4629      	mov	r1, r5
 800be90:	f7f4 fbb6 	bl	8000600 <__aeabi_dmul>
 800be94:	4602      	mov	r2, r0
 800be96:	460b      	mov	r3, r1
 800be98:	4630      	mov	r0, r6
 800be9a:	4639      	mov	r1, r7
 800be9c:	f7f4 fbb0 	bl	8000600 <__aeabi_dmul>
 800bea0:	4642      	mov	r2, r8
 800bea2:	4604      	mov	r4, r0
 800bea4:	460d      	mov	r5, r1
 800bea6:	464b      	mov	r3, r9
 800bea8:	ec51 0b18 	vmov	r0, r1, d8
 800beac:	f7f4 f9f2 	bl	8000294 <__adddf3>
 800beb0:	ec53 2b19 	vmov	r2, r3, d9
 800beb4:	f7f4 fba4 	bl	8000600 <__aeabi_dmul>
 800beb8:	4622      	mov	r2, r4
 800beba:	462b      	mov	r3, r5
 800bebc:	f7f4 f9ea 	bl	8000294 <__adddf3>
 800bec0:	4642      	mov	r2, r8
 800bec2:	4682      	mov	sl, r0
 800bec4:	468b      	mov	fp, r1
 800bec6:	464b      	mov	r3, r9
 800bec8:	4640      	mov	r0, r8
 800beca:	4649      	mov	r1, r9
 800becc:	f7f4 fb98 	bl	8000600 <__aeabi_dmul>
 800bed0:	2200      	movs	r2, #0
 800bed2:	4b6b      	ldr	r3, [pc, #428]	; (800c080 <__ieee754_pow+0x770>)
 800bed4:	4606      	mov	r6, r0
 800bed6:	460f      	mov	r7, r1
 800bed8:	f7f4 f9dc 	bl	8000294 <__adddf3>
 800bedc:	4652      	mov	r2, sl
 800bede:	465b      	mov	r3, fp
 800bee0:	f7f4 f9d8 	bl	8000294 <__adddf3>
 800bee4:	2000      	movs	r0, #0
 800bee6:	460d      	mov	r5, r1
 800bee8:	460b      	mov	r3, r1
 800beea:	4604      	mov	r4, r0
 800beec:	4602      	mov	r2, r0
 800beee:	4649      	mov	r1, r9
 800bef0:	4640      	mov	r0, r8
 800bef2:	f7f4 fb85 	bl	8000600 <__aeabi_dmul>
 800bef6:	2200      	movs	r2, #0
 800bef8:	4680      	mov	r8, r0
 800befa:	4689      	mov	r9, r1
 800befc:	4b60      	ldr	r3, [pc, #384]	; (800c080 <__ieee754_pow+0x770>)
 800befe:	4620      	mov	r0, r4
 800bf00:	4629      	mov	r1, r5
 800bf02:	f7f4 f9c5 	bl	8000290 <__aeabi_dsub>
 800bf06:	4632      	mov	r2, r6
 800bf08:	463b      	mov	r3, r7
 800bf0a:	f7f4 f9c1 	bl	8000290 <__aeabi_dsub>
 800bf0e:	4602      	mov	r2, r0
 800bf10:	460b      	mov	r3, r1
 800bf12:	4650      	mov	r0, sl
 800bf14:	4659      	mov	r1, fp
 800bf16:	f7f4 f9bb 	bl	8000290 <__aeabi_dsub>
 800bf1a:	ec53 2b18 	vmov	r2, r3, d8
 800bf1e:	f7f4 fb6f 	bl	8000600 <__aeabi_dmul>
 800bf22:	4606      	mov	r6, r0
 800bf24:	460f      	mov	r7, r1
 800bf26:	4622      	mov	r2, r4
 800bf28:	462b      	mov	r3, r5
 800bf2a:	ec51 0b19 	vmov	r0, r1, d9
 800bf2e:	f7f4 fb67 	bl	8000600 <__aeabi_dmul>
 800bf32:	4602      	mov	r2, r0
 800bf34:	460b      	mov	r3, r1
 800bf36:	4630      	mov	r0, r6
 800bf38:	4639      	mov	r1, r7
 800bf3a:	f7f4 f9ab 	bl	8000294 <__adddf3>
 800bf3e:	4606      	mov	r6, r0
 800bf40:	460f      	mov	r7, r1
 800bf42:	4602      	mov	r2, r0
 800bf44:	460b      	mov	r3, r1
 800bf46:	4640      	mov	r0, r8
 800bf48:	4649      	mov	r1, r9
 800bf4a:	f7f4 f9a3 	bl	8000294 <__adddf3>
 800bf4e:	2000      	movs	r0, #0
 800bf50:	460d      	mov	r5, r1
 800bf52:	4604      	mov	r4, r0
 800bf54:	a33c      	add	r3, pc, #240	; (adr r3, 800c048 <__ieee754_pow+0x738>)
 800bf56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf5a:	f7f4 fb51 	bl	8000600 <__aeabi_dmul>
 800bf5e:	4642      	mov	r2, r8
 800bf60:	464b      	mov	r3, r9
 800bf62:	ec41 0b18 	vmov	d8, r0, r1
 800bf66:	4620      	mov	r0, r4
 800bf68:	4629      	mov	r1, r5
 800bf6a:	f7f4 f991 	bl	8000290 <__aeabi_dsub>
 800bf6e:	4602      	mov	r2, r0
 800bf70:	460b      	mov	r3, r1
 800bf72:	4630      	mov	r0, r6
 800bf74:	4639      	mov	r1, r7
 800bf76:	f7f4 f98b 	bl	8000290 <__aeabi_dsub>
 800bf7a:	a335      	add	r3, pc, #212	; (adr r3, 800c050 <__ieee754_pow+0x740>)
 800bf7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf80:	f7f4 fb3e 	bl	8000600 <__aeabi_dmul>
 800bf84:	4606      	mov	r6, r0
 800bf86:	460f      	mov	r7, r1
 800bf88:	4620      	mov	r0, r4
 800bf8a:	4629      	mov	r1, r5
 800bf8c:	a332      	add	r3, pc, #200	; (adr r3, 800c058 <__ieee754_pow+0x748>)
 800bf8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf92:	f7f4 fb35 	bl	8000600 <__aeabi_dmul>
 800bf96:	4602      	mov	r2, r0
 800bf98:	460b      	mov	r3, r1
 800bf9a:	4630      	mov	r0, r6
 800bf9c:	4639      	mov	r1, r7
 800bf9e:	f7f4 f979 	bl	8000294 <__adddf3>
 800bfa2:	9a07      	ldr	r2, [sp, #28]
 800bfa4:	4b37      	ldr	r3, [pc, #220]	; (800c084 <__ieee754_pow+0x774>)
 800bfa6:	4413      	add	r3, r2
 800bfa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfac:	f7f4 f972 	bl	8000294 <__adddf3>
 800bfb0:	4682      	mov	sl, r0
 800bfb2:	9805      	ldr	r0, [sp, #20]
 800bfb4:	468b      	mov	fp, r1
 800bfb6:	f7f4 fab9 	bl	800052c <__aeabi_i2d>
 800bfba:	9a07      	ldr	r2, [sp, #28]
 800bfbc:	4b32      	ldr	r3, [pc, #200]	; (800c088 <__ieee754_pow+0x778>)
 800bfbe:	4606      	mov	r6, r0
 800bfc0:	460f      	mov	r7, r1
 800bfc2:	4413      	add	r3, r2
 800bfc4:	4652      	mov	r2, sl
 800bfc6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bfca:	ec51 0b18 	vmov	r0, r1, d8
 800bfce:	465b      	mov	r3, fp
 800bfd0:	f7f4 f960 	bl	8000294 <__adddf3>
 800bfd4:	4642      	mov	r2, r8
 800bfd6:	464b      	mov	r3, r9
 800bfd8:	f7f4 f95c 	bl	8000294 <__adddf3>
 800bfdc:	4632      	mov	r2, r6
 800bfde:	463b      	mov	r3, r7
 800bfe0:	f7f4 f958 	bl	8000294 <__adddf3>
 800bfe4:	2000      	movs	r0, #0
 800bfe6:	4632      	mov	r2, r6
 800bfe8:	463b      	mov	r3, r7
 800bfea:	4604      	mov	r4, r0
 800bfec:	460d      	mov	r5, r1
 800bfee:	f7f4 f94f 	bl	8000290 <__aeabi_dsub>
 800bff2:	4642      	mov	r2, r8
 800bff4:	464b      	mov	r3, r9
 800bff6:	f7f4 f94b 	bl	8000290 <__aeabi_dsub>
 800bffa:	ec53 2b18 	vmov	r2, r3, d8
 800bffe:	f7f4 f947 	bl	8000290 <__aeabi_dsub>
 800c002:	4602      	mov	r2, r0
 800c004:	460b      	mov	r3, r1
 800c006:	4650      	mov	r0, sl
 800c008:	4659      	mov	r1, fp
 800c00a:	e610      	b.n	800bc2e <__ieee754_pow+0x31e>
 800c00c:	2401      	movs	r4, #1
 800c00e:	e6a1      	b.n	800bd54 <__ieee754_pow+0x444>
 800c010:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800c060 <__ieee754_pow+0x750>
 800c014:	e617      	b.n	800bc46 <__ieee754_pow+0x336>
 800c016:	bf00      	nop
 800c018:	4a454eef 	.word	0x4a454eef
 800c01c:	3fca7e28 	.word	0x3fca7e28
 800c020:	93c9db65 	.word	0x93c9db65
 800c024:	3fcd864a 	.word	0x3fcd864a
 800c028:	a91d4101 	.word	0xa91d4101
 800c02c:	3fd17460 	.word	0x3fd17460
 800c030:	518f264d 	.word	0x518f264d
 800c034:	3fd55555 	.word	0x3fd55555
 800c038:	db6fabff 	.word	0xdb6fabff
 800c03c:	3fdb6db6 	.word	0x3fdb6db6
 800c040:	33333303 	.word	0x33333303
 800c044:	3fe33333 	.word	0x3fe33333
 800c048:	e0000000 	.word	0xe0000000
 800c04c:	3feec709 	.word	0x3feec709
 800c050:	dc3a03fd 	.word	0xdc3a03fd
 800c054:	3feec709 	.word	0x3feec709
 800c058:	145b01f5 	.word	0x145b01f5
 800c05c:	be3e2fe0 	.word	0xbe3e2fe0
 800c060:	00000000 	.word	0x00000000
 800c064:	3ff00000 	.word	0x3ff00000
 800c068:	7ff00000 	.word	0x7ff00000
 800c06c:	43400000 	.word	0x43400000
 800c070:	0003988e 	.word	0x0003988e
 800c074:	000bb679 	.word	0x000bb679
 800c078:	0800ce78 	.word	0x0800ce78
 800c07c:	3ff00000 	.word	0x3ff00000
 800c080:	40080000 	.word	0x40080000
 800c084:	0800ce98 	.word	0x0800ce98
 800c088:	0800ce88 	.word	0x0800ce88
 800c08c:	a3b5      	add	r3, pc, #724	; (adr r3, 800c364 <__ieee754_pow+0xa54>)
 800c08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c092:	4640      	mov	r0, r8
 800c094:	4649      	mov	r1, r9
 800c096:	f7f4 f8fd 	bl	8000294 <__adddf3>
 800c09a:	4622      	mov	r2, r4
 800c09c:	462b      	mov	r3, r5
 800c09e:	ec41 0b1a 	vmov	d10, r0, r1
 800c0a2:	4630      	mov	r0, r6
 800c0a4:	4639      	mov	r1, r7
 800c0a6:	f7f4 f8f3 	bl	8000290 <__aeabi_dsub>
 800c0aa:	4602      	mov	r2, r0
 800c0ac:	460b      	mov	r3, r1
 800c0ae:	ec51 0b1a 	vmov	r0, r1, d10
 800c0b2:	f7f4 fd35 	bl	8000b20 <__aeabi_dcmpgt>
 800c0b6:	2800      	cmp	r0, #0
 800c0b8:	f47f ae04 	bne.w	800bcc4 <__ieee754_pow+0x3b4>
 800c0bc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c0c0:	4aa3      	ldr	r2, [pc, #652]	; (800c350 <__ieee754_pow+0xa40>)
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	f340 8109 	ble.w	800c2da <__ieee754_pow+0x9ca>
 800c0c8:	151b      	asrs	r3, r3, #20
 800c0ca:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800c0ce:	4ea1      	ldr	r6, [pc, #644]	; (800c354 <__ieee754_pow+0xa44>)
 800c0d0:	2000      	movs	r0, #0
 800c0d2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c0d6:	f1bb 0f00 	cmp.w	fp, #0
 800c0da:	fa4a f303 	asr.w	r3, sl, r3
 800c0de:	445b      	add	r3, fp
 800c0e0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800c0e4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800c0e8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800c0ec:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800c0f0:	fa46 f602 	asr.w	r6, r6, r2
 800c0f4:	f1c2 0214 	rsb	r2, r2, #20
 800c0f8:	ea23 0106 	bic.w	r1, r3, r6
 800c0fc:	fa4a fa02 	asr.w	sl, sl, r2
 800c100:	4602      	mov	r2, r0
 800c102:	4620      	mov	r0, r4
 800c104:	460b      	mov	r3, r1
 800c106:	4629      	mov	r1, r5
 800c108:	bfb8      	it	lt
 800c10a:	f1ca 0a00 	rsblt	sl, sl, #0
 800c10e:	f7f4 f8bf 	bl	8000290 <__aeabi_dsub>
 800c112:	ec41 0b19 	vmov	d9, r0, r1
 800c116:	4642      	mov	r2, r8
 800c118:	464b      	mov	r3, r9
 800c11a:	ec51 0b19 	vmov	r0, r1, d9
 800c11e:	f7f4 f8b9 	bl	8000294 <__adddf3>
 800c122:	2000      	movs	r0, #0
 800c124:	460d      	mov	r5, r1
 800c126:	4604      	mov	r4, r0
 800c128:	a379      	add	r3, pc, #484	; (adr r3, 800c310 <__ieee754_pow+0xa00>)
 800c12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c12e:	f7f4 fa67 	bl	8000600 <__aeabi_dmul>
 800c132:	4606      	mov	r6, r0
 800c134:	460f      	mov	r7, r1
 800c136:	4620      	mov	r0, r4
 800c138:	4629      	mov	r1, r5
 800c13a:	ec53 2b19 	vmov	r2, r3, d9
 800c13e:	f7f4 f8a7 	bl	8000290 <__aeabi_dsub>
 800c142:	4602      	mov	r2, r0
 800c144:	460b      	mov	r3, r1
 800c146:	4640      	mov	r0, r8
 800c148:	4649      	mov	r1, r9
 800c14a:	f7f4 f8a1 	bl	8000290 <__aeabi_dsub>
 800c14e:	a372      	add	r3, pc, #456	; (adr r3, 800c318 <__ieee754_pow+0xa08>)
 800c150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c154:	f7f4 fa54 	bl	8000600 <__aeabi_dmul>
 800c158:	4680      	mov	r8, r0
 800c15a:	4689      	mov	r9, r1
 800c15c:	4620      	mov	r0, r4
 800c15e:	4629      	mov	r1, r5
 800c160:	a36f      	add	r3, pc, #444	; (adr r3, 800c320 <__ieee754_pow+0xa10>)
 800c162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c166:	f7f4 fa4b 	bl	8000600 <__aeabi_dmul>
 800c16a:	4602      	mov	r2, r0
 800c16c:	460b      	mov	r3, r1
 800c16e:	4640      	mov	r0, r8
 800c170:	4649      	mov	r1, r9
 800c172:	f7f4 f88f 	bl	8000294 <__adddf3>
 800c176:	4604      	mov	r4, r0
 800c178:	460d      	mov	r5, r1
 800c17a:	4602      	mov	r2, r0
 800c17c:	460b      	mov	r3, r1
 800c17e:	4630      	mov	r0, r6
 800c180:	4639      	mov	r1, r7
 800c182:	f7f4 f887 	bl	8000294 <__adddf3>
 800c186:	4632      	mov	r2, r6
 800c188:	4680      	mov	r8, r0
 800c18a:	4689      	mov	r9, r1
 800c18c:	463b      	mov	r3, r7
 800c18e:	f7f4 f87f 	bl	8000290 <__aeabi_dsub>
 800c192:	4602      	mov	r2, r0
 800c194:	460b      	mov	r3, r1
 800c196:	4620      	mov	r0, r4
 800c198:	4629      	mov	r1, r5
 800c19a:	f7f4 f879 	bl	8000290 <__aeabi_dsub>
 800c19e:	4642      	mov	r2, r8
 800c1a0:	4606      	mov	r6, r0
 800c1a2:	460f      	mov	r7, r1
 800c1a4:	464b      	mov	r3, r9
 800c1a6:	4640      	mov	r0, r8
 800c1a8:	4649      	mov	r1, r9
 800c1aa:	f7f4 fa29 	bl	8000600 <__aeabi_dmul>
 800c1ae:	4604      	mov	r4, r0
 800c1b0:	460d      	mov	r5, r1
 800c1b2:	a35d      	add	r3, pc, #372	; (adr r3, 800c328 <__ieee754_pow+0xa18>)
 800c1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b8:	f7f4 fa22 	bl	8000600 <__aeabi_dmul>
 800c1bc:	a35c      	add	r3, pc, #368	; (adr r3, 800c330 <__ieee754_pow+0xa20>)
 800c1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c2:	f7f4 f865 	bl	8000290 <__aeabi_dsub>
 800c1c6:	4622      	mov	r2, r4
 800c1c8:	462b      	mov	r3, r5
 800c1ca:	f7f4 fa19 	bl	8000600 <__aeabi_dmul>
 800c1ce:	a35a      	add	r3, pc, #360	; (adr r3, 800c338 <__ieee754_pow+0xa28>)
 800c1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1d4:	f7f4 f85e 	bl	8000294 <__adddf3>
 800c1d8:	4622      	mov	r2, r4
 800c1da:	462b      	mov	r3, r5
 800c1dc:	f7f4 fa10 	bl	8000600 <__aeabi_dmul>
 800c1e0:	a357      	add	r3, pc, #348	; (adr r3, 800c340 <__ieee754_pow+0xa30>)
 800c1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e6:	f7f4 f853 	bl	8000290 <__aeabi_dsub>
 800c1ea:	4622      	mov	r2, r4
 800c1ec:	462b      	mov	r3, r5
 800c1ee:	f7f4 fa07 	bl	8000600 <__aeabi_dmul>
 800c1f2:	a355      	add	r3, pc, #340	; (adr r3, 800c348 <__ieee754_pow+0xa38>)
 800c1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1f8:	f7f4 f84c 	bl	8000294 <__adddf3>
 800c1fc:	4622      	mov	r2, r4
 800c1fe:	462b      	mov	r3, r5
 800c200:	f7f4 f9fe 	bl	8000600 <__aeabi_dmul>
 800c204:	4602      	mov	r2, r0
 800c206:	460b      	mov	r3, r1
 800c208:	4640      	mov	r0, r8
 800c20a:	4649      	mov	r1, r9
 800c20c:	f7f4 f840 	bl	8000290 <__aeabi_dsub>
 800c210:	4604      	mov	r4, r0
 800c212:	460d      	mov	r5, r1
 800c214:	4602      	mov	r2, r0
 800c216:	460b      	mov	r3, r1
 800c218:	4640      	mov	r0, r8
 800c21a:	4649      	mov	r1, r9
 800c21c:	f7f4 f9f0 	bl	8000600 <__aeabi_dmul>
 800c220:	2200      	movs	r2, #0
 800c222:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c226:	ec41 0b19 	vmov	d9, r0, r1
 800c22a:	4620      	mov	r0, r4
 800c22c:	4629      	mov	r1, r5
 800c22e:	f7f4 f82f 	bl	8000290 <__aeabi_dsub>
 800c232:	4602      	mov	r2, r0
 800c234:	460b      	mov	r3, r1
 800c236:	ec51 0b19 	vmov	r0, r1, d9
 800c23a:	f7f4 fb0b 	bl	8000854 <__aeabi_ddiv>
 800c23e:	4632      	mov	r2, r6
 800c240:	4604      	mov	r4, r0
 800c242:	460d      	mov	r5, r1
 800c244:	463b      	mov	r3, r7
 800c246:	4640      	mov	r0, r8
 800c248:	4649      	mov	r1, r9
 800c24a:	f7f4 f9d9 	bl	8000600 <__aeabi_dmul>
 800c24e:	4632      	mov	r2, r6
 800c250:	463b      	mov	r3, r7
 800c252:	f7f4 f81f 	bl	8000294 <__adddf3>
 800c256:	4602      	mov	r2, r0
 800c258:	460b      	mov	r3, r1
 800c25a:	4620      	mov	r0, r4
 800c25c:	4629      	mov	r1, r5
 800c25e:	f7f4 f817 	bl	8000290 <__aeabi_dsub>
 800c262:	4642      	mov	r2, r8
 800c264:	464b      	mov	r3, r9
 800c266:	f7f4 f813 	bl	8000290 <__aeabi_dsub>
 800c26a:	460b      	mov	r3, r1
 800c26c:	4602      	mov	r2, r0
 800c26e:	493a      	ldr	r1, [pc, #232]	; (800c358 <__ieee754_pow+0xa48>)
 800c270:	2000      	movs	r0, #0
 800c272:	f7f4 f80d 	bl	8000290 <__aeabi_dsub>
 800c276:	ec41 0b10 	vmov	d0, r0, r1
 800c27a:	ee10 3a90 	vmov	r3, s1
 800c27e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c282:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c286:	da2b      	bge.n	800c2e0 <__ieee754_pow+0x9d0>
 800c288:	4650      	mov	r0, sl
 800c28a:	f000 f96d 	bl	800c568 <scalbn>
 800c28e:	ec51 0b10 	vmov	r0, r1, d0
 800c292:	ec53 2b18 	vmov	r2, r3, d8
 800c296:	f7ff bbec 	b.w	800ba72 <__ieee754_pow+0x162>
 800c29a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c29e:	4b2f      	ldr	r3, [pc, #188]	; (800c35c <__ieee754_pow+0xa4c>)
 800c2a0:	429e      	cmp	r6, r3
 800c2a2:	f77f af0b 	ble.w	800c0bc <__ieee754_pow+0x7ac>
 800c2a6:	4b2e      	ldr	r3, [pc, #184]	; (800c360 <__ieee754_pow+0xa50>)
 800c2a8:	440b      	add	r3, r1
 800c2aa:	4303      	orrs	r3, r0
 800c2ac:	d009      	beq.n	800c2c2 <__ieee754_pow+0x9b2>
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	ec51 0b18 	vmov	r0, r1, d8
 800c2b6:	f7f4 fc15 	bl	8000ae4 <__aeabi_dcmplt>
 800c2ba:	3800      	subs	r0, #0
 800c2bc:	bf18      	it	ne
 800c2be:	2001      	movne	r0, #1
 800c2c0:	e446      	b.n	800bb50 <__ieee754_pow+0x240>
 800c2c2:	4622      	mov	r2, r4
 800c2c4:	462b      	mov	r3, r5
 800c2c6:	f7f3 ffe3 	bl	8000290 <__aeabi_dsub>
 800c2ca:	4642      	mov	r2, r8
 800c2cc:	464b      	mov	r3, r9
 800c2ce:	f7f4 fc1d 	bl	8000b0c <__aeabi_dcmpge>
 800c2d2:	2800      	cmp	r0, #0
 800c2d4:	f43f aef2 	beq.w	800c0bc <__ieee754_pow+0x7ac>
 800c2d8:	e7e9      	b.n	800c2ae <__ieee754_pow+0x99e>
 800c2da:	f04f 0a00 	mov.w	sl, #0
 800c2de:	e71a      	b.n	800c116 <__ieee754_pow+0x806>
 800c2e0:	ec51 0b10 	vmov	r0, r1, d0
 800c2e4:	4619      	mov	r1, r3
 800c2e6:	e7d4      	b.n	800c292 <__ieee754_pow+0x982>
 800c2e8:	2000      	movs	r0, #0
 800c2ea:	491b      	ldr	r1, [pc, #108]	; (800c358 <__ieee754_pow+0xa48>)
 800c2ec:	f7ff bb2f 	b.w	800b94e <__ieee754_pow+0x3e>
 800c2f0:	2000      	movs	r0, #0
 800c2f2:	2100      	movs	r1, #0
 800c2f4:	f7ff bb2b 	b.w	800b94e <__ieee754_pow+0x3e>
 800c2f8:	4630      	mov	r0, r6
 800c2fa:	4639      	mov	r1, r7
 800c2fc:	f7ff bb27 	b.w	800b94e <__ieee754_pow+0x3e>
 800c300:	9204      	str	r2, [sp, #16]
 800c302:	f7ff bb79 	b.w	800b9f8 <__ieee754_pow+0xe8>
 800c306:	2300      	movs	r3, #0
 800c308:	f7ff bb63 	b.w	800b9d2 <__ieee754_pow+0xc2>
 800c30c:	f3af 8000 	nop.w
 800c310:	00000000 	.word	0x00000000
 800c314:	3fe62e43 	.word	0x3fe62e43
 800c318:	fefa39ef 	.word	0xfefa39ef
 800c31c:	3fe62e42 	.word	0x3fe62e42
 800c320:	0ca86c39 	.word	0x0ca86c39
 800c324:	be205c61 	.word	0xbe205c61
 800c328:	72bea4d0 	.word	0x72bea4d0
 800c32c:	3e663769 	.word	0x3e663769
 800c330:	c5d26bf1 	.word	0xc5d26bf1
 800c334:	3ebbbd41 	.word	0x3ebbbd41
 800c338:	af25de2c 	.word	0xaf25de2c
 800c33c:	3f11566a 	.word	0x3f11566a
 800c340:	16bebd93 	.word	0x16bebd93
 800c344:	3f66c16c 	.word	0x3f66c16c
 800c348:	5555553e 	.word	0x5555553e
 800c34c:	3fc55555 	.word	0x3fc55555
 800c350:	3fe00000 	.word	0x3fe00000
 800c354:	000fffff 	.word	0x000fffff
 800c358:	3ff00000 	.word	0x3ff00000
 800c35c:	4090cbff 	.word	0x4090cbff
 800c360:	3f6f3400 	.word	0x3f6f3400
 800c364:	652b82fe 	.word	0x652b82fe
 800c368:	3c971547 	.word	0x3c971547

0800c36c <__ieee754_sqrt>:
 800c36c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c370:	4e59      	ldr	r6, [pc, #356]	; (800c4d8 <__ieee754_sqrt+0x16c>)
 800c372:	ee10 0a10 	vmov	r0, s0
 800c376:	ee10 3a10 	vmov	r3, s0
 800c37a:	ec55 4b10 	vmov	r4, r5, d0
 800c37e:	43ae      	bics	r6, r5
 800c380:	462a      	mov	r2, r5
 800c382:	4629      	mov	r1, r5
 800c384:	d110      	bne.n	800c3a8 <__ieee754_sqrt+0x3c>
 800c386:	ee10 2a10 	vmov	r2, s0
 800c38a:	462b      	mov	r3, r5
 800c38c:	f7f4 f938 	bl	8000600 <__aeabi_dmul>
 800c390:	4602      	mov	r2, r0
 800c392:	460b      	mov	r3, r1
 800c394:	4620      	mov	r0, r4
 800c396:	4629      	mov	r1, r5
 800c398:	f7f3 ff7c 	bl	8000294 <__adddf3>
 800c39c:	4604      	mov	r4, r0
 800c39e:	460d      	mov	r5, r1
 800c3a0:	ec45 4b10 	vmov	d0, r4, r5
 800c3a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3a8:	2d00      	cmp	r5, #0
 800c3aa:	dc10      	bgt.n	800c3ce <__ieee754_sqrt+0x62>
 800c3ac:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c3b0:	4330      	orrs	r0, r6
 800c3b2:	d0f5      	beq.n	800c3a0 <__ieee754_sqrt+0x34>
 800c3b4:	b15d      	cbz	r5, 800c3ce <__ieee754_sqrt+0x62>
 800c3b6:	ee10 2a10 	vmov	r2, s0
 800c3ba:	462b      	mov	r3, r5
 800c3bc:	ee10 0a10 	vmov	r0, s0
 800c3c0:	f7f3 ff66 	bl	8000290 <__aeabi_dsub>
 800c3c4:	4602      	mov	r2, r0
 800c3c6:	460b      	mov	r3, r1
 800c3c8:	f7f4 fa44 	bl	8000854 <__aeabi_ddiv>
 800c3cc:	e7e6      	b.n	800c39c <__ieee754_sqrt+0x30>
 800c3ce:	1512      	asrs	r2, r2, #20
 800c3d0:	d07a      	beq.n	800c4c8 <__ieee754_sqrt+0x15c>
 800c3d2:	07d4      	lsls	r4, r2, #31
 800c3d4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c3d8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c3dc:	f04f 0400 	mov.w	r4, #0
 800c3e0:	bf58      	it	pl
 800c3e2:	0fda      	lsrpl	r2, r3, #31
 800c3e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c3e8:	bf58      	it	pl
 800c3ea:	005b      	lslpl	r3, r3, #1
 800c3ec:	f04f 0516 	mov.w	r5, #22
 800c3f0:	bf58      	it	pl
 800c3f2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c3f6:	4620      	mov	r0, r4
 800c3f8:	0fda      	lsrs	r2, r3, #31
 800c3fa:	107f      	asrs	r7, r7, #1
 800c3fc:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c400:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c404:	005b      	lsls	r3, r3, #1
 800c406:	1886      	adds	r6, r0, r2
 800c408:	428e      	cmp	r6, r1
 800c40a:	bfde      	ittt	le
 800c40c:	1b89      	suble	r1, r1, r6
 800c40e:	18b0      	addle	r0, r6, r2
 800c410:	18a4      	addle	r4, r4, r2
 800c412:	3d01      	subs	r5, #1
 800c414:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c418:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c41c:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c420:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c424:	d1ef      	bne.n	800c406 <__ieee754_sqrt+0x9a>
 800c426:	462a      	mov	r2, r5
 800c428:	f04f 0e20 	mov.w	lr, #32
 800c42c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c430:	4281      	cmp	r1, r0
 800c432:	eb06 0c05 	add.w	ip, r6, r5
 800c436:	dc02      	bgt.n	800c43e <__ieee754_sqrt+0xd2>
 800c438:	d113      	bne.n	800c462 <__ieee754_sqrt+0xf6>
 800c43a:	459c      	cmp	ip, r3
 800c43c:	d811      	bhi.n	800c462 <__ieee754_sqrt+0xf6>
 800c43e:	f1bc 0f00 	cmp.w	ip, #0
 800c442:	eb0c 0506 	add.w	r5, ip, r6
 800c446:	da44      	bge.n	800c4d2 <__ieee754_sqrt+0x166>
 800c448:	2d00      	cmp	r5, #0
 800c44a:	db42      	blt.n	800c4d2 <__ieee754_sqrt+0x166>
 800c44c:	f100 0801 	add.w	r8, r0, #1
 800c450:	1a09      	subs	r1, r1, r0
 800c452:	459c      	cmp	ip, r3
 800c454:	4432      	add	r2, r6
 800c456:	eba3 030c 	sub.w	r3, r3, ip
 800c45a:	bf88      	it	hi
 800c45c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800c460:	4640      	mov	r0, r8
 800c462:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c466:	f1be 0e01 	subs.w	lr, lr, #1
 800c46a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c46e:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c472:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c476:	d1db      	bne.n	800c430 <__ieee754_sqrt+0xc4>
 800c478:	430b      	orrs	r3, r1
 800c47a:	d006      	beq.n	800c48a <__ieee754_sqrt+0x11e>
 800c47c:	1c50      	adds	r0, r2, #1
 800c47e:	bf13      	iteet	ne
 800c480:	3201      	addne	r2, #1
 800c482:	3401      	addeq	r4, #1
 800c484:	4672      	moveq	r2, lr
 800c486:	f022 0201 	bicne.w	r2, r2, #1
 800c48a:	1063      	asrs	r3, r4, #1
 800c48c:	07e1      	lsls	r1, r4, #31
 800c48e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c492:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c496:	bf48      	it	mi
 800c498:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c49c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c4a0:	4614      	mov	r4, r2
 800c4a2:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c4a6:	e77b      	b.n	800c3a0 <__ieee754_sqrt+0x34>
 800c4a8:	0ad9      	lsrs	r1, r3, #11
 800c4aa:	3815      	subs	r0, #21
 800c4ac:	055b      	lsls	r3, r3, #21
 800c4ae:	2900      	cmp	r1, #0
 800c4b0:	d0fa      	beq.n	800c4a8 <__ieee754_sqrt+0x13c>
 800c4b2:	02cd      	lsls	r5, r1, #11
 800c4b4:	d50a      	bpl.n	800c4cc <__ieee754_sqrt+0x160>
 800c4b6:	f1c2 0420 	rsb	r4, r2, #32
 800c4ba:	1e55      	subs	r5, r2, #1
 800c4bc:	fa23 f404 	lsr.w	r4, r3, r4
 800c4c0:	4093      	lsls	r3, r2
 800c4c2:	1b42      	subs	r2, r0, r5
 800c4c4:	4321      	orrs	r1, r4
 800c4c6:	e784      	b.n	800c3d2 <__ieee754_sqrt+0x66>
 800c4c8:	4610      	mov	r0, r2
 800c4ca:	e7f0      	b.n	800c4ae <__ieee754_sqrt+0x142>
 800c4cc:	0049      	lsls	r1, r1, #1
 800c4ce:	3201      	adds	r2, #1
 800c4d0:	e7ef      	b.n	800c4b2 <__ieee754_sqrt+0x146>
 800c4d2:	4680      	mov	r8, r0
 800c4d4:	e7bc      	b.n	800c450 <__ieee754_sqrt+0xe4>
 800c4d6:	bf00      	nop
 800c4d8:	7ff00000 	.word	0x7ff00000

0800c4dc <with_errno>:
 800c4dc:	b570      	push	{r4, r5, r6, lr}
 800c4de:	4604      	mov	r4, r0
 800c4e0:	460d      	mov	r5, r1
 800c4e2:	4616      	mov	r6, r2
 800c4e4:	f7ff f8cc 	bl	800b680 <__errno>
 800c4e8:	4629      	mov	r1, r5
 800c4ea:	6006      	str	r6, [r0, #0]
 800c4ec:	4620      	mov	r0, r4
 800c4ee:	bd70      	pop	{r4, r5, r6, pc}

0800c4f0 <xflow>:
 800c4f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c4f2:	4614      	mov	r4, r2
 800c4f4:	461d      	mov	r5, r3
 800c4f6:	b108      	cbz	r0, 800c4fc <xflow+0xc>
 800c4f8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c4fc:	4620      	mov	r0, r4
 800c4fe:	4629      	mov	r1, r5
 800c500:	e9cd 2300 	strd	r2, r3, [sp]
 800c504:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c508:	f7f4 f87a 	bl	8000600 <__aeabi_dmul>
 800c50c:	2222      	movs	r2, #34	; 0x22
 800c50e:	b003      	add	sp, #12
 800c510:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c514:	f7ff bfe2 	b.w	800c4dc <with_errno>

0800c518 <__math_uflow>:
 800c518:	b508      	push	{r3, lr}
 800c51a:	2200      	movs	r2, #0
 800c51c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c520:	f7ff ffe6 	bl	800c4f0 <xflow>
 800c524:	ec41 0b10 	vmov	d0, r0, r1
 800c528:	bd08      	pop	{r3, pc}

0800c52a <__math_oflow>:
 800c52a:	b508      	push	{r3, lr}
 800c52c:	2200      	movs	r2, #0
 800c52e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c532:	f7ff ffdd 	bl	800c4f0 <xflow>
 800c536:	ec41 0b10 	vmov	d0, r0, r1
 800c53a:	bd08      	pop	{r3, pc}

0800c53c <fabs>:
 800c53c:	ec51 0b10 	vmov	r0, r1, d0
 800c540:	ee10 2a10 	vmov	r2, s0
 800c544:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c548:	ec43 2b10 	vmov	d0, r2, r3
 800c54c:	4770      	bx	lr

0800c54e <finite>:
 800c54e:	b082      	sub	sp, #8
 800c550:	ed8d 0b00 	vstr	d0, [sp]
 800c554:	9801      	ldr	r0, [sp, #4]
 800c556:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c55a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c55e:	0fc0      	lsrs	r0, r0, #31
 800c560:	b002      	add	sp, #8
 800c562:	4770      	bx	lr
 800c564:	0000      	movs	r0, r0
	...

0800c568 <scalbn>:
 800c568:	b570      	push	{r4, r5, r6, lr}
 800c56a:	ec55 4b10 	vmov	r4, r5, d0
 800c56e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c572:	4606      	mov	r6, r0
 800c574:	462b      	mov	r3, r5
 800c576:	b99a      	cbnz	r2, 800c5a0 <scalbn+0x38>
 800c578:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c57c:	4323      	orrs	r3, r4
 800c57e:	d036      	beq.n	800c5ee <scalbn+0x86>
 800c580:	4b39      	ldr	r3, [pc, #228]	; (800c668 <scalbn+0x100>)
 800c582:	4629      	mov	r1, r5
 800c584:	2200      	movs	r2, #0
 800c586:	ee10 0a10 	vmov	r0, s0
 800c58a:	f7f4 f839 	bl	8000600 <__aeabi_dmul>
 800c58e:	4b37      	ldr	r3, [pc, #220]	; (800c66c <scalbn+0x104>)
 800c590:	4604      	mov	r4, r0
 800c592:	460d      	mov	r5, r1
 800c594:	429e      	cmp	r6, r3
 800c596:	da10      	bge.n	800c5ba <scalbn+0x52>
 800c598:	a32b      	add	r3, pc, #172	; (adr r3, 800c648 <scalbn+0xe0>)
 800c59a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c59e:	e03a      	b.n	800c616 <scalbn+0xae>
 800c5a0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c5a4:	428a      	cmp	r2, r1
 800c5a6:	d10c      	bne.n	800c5c2 <scalbn+0x5a>
 800c5a8:	ee10 2a10 	vmov	r2, s0
 800c5ac:	4620      	mov	r0, r4
 800c5ae:	4629      	mov	r1, r5
 800c5b0:	f7f3 fe70 	bl	8000294 <__adddf3>
 800c5b4:	4604      	mov	r4, r0
 800c5b6:	460d      	mov	r5, r1
 800c5b8:	e019      	b.n	800c5ee <scalbn+0x86>
 800c5ba:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c5be:	460b      	mov	r3, r1
 800c5c0:	3a36      	subs	r2, #54	; 0x36
 800c5c2:	4432      	add	r2, r6
 800c5c4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c5c8:	428a      	cmp	r2, r1
 800c5ca:	dd08      	ble.n	800c5de <scalbn+0x76>
 800c5cc:	2d00      	cmp	r5, #0
 800c5ce:	a120      	add	r1, pc, #128	; (adr r1, 800c650 <scalbn+0xe8>)
 800c5d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5d4:	da1c      	bge.n	800c610 <scalbn+0xa8>
 800c5d6:	a120      	add	r1, pc, #128	; (adr r1, 800c658 <scalbn+0xf0>)
 800c5d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5dc:	e018      	b.n	800c610 <scalbn+0xa8>
 800c5de:	2a00      	cmp	r2, #0
 800c5e0:	dd08      	ble.n	800c5f4 <scalbn+0x8c>
 800c5e2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c5e6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c5ea:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c5ee:	ec45 4b10 	vmov	d0, r4, r5
 800c5f2:	bd70      	pop	{r4, r5, r6, pc}
 800c5f4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c5f8:	da19      	bge.n	800c62e <scalbn+0xc6>
 800c5fa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c5fe:	429e      	cmp	r6, r3
 800c600:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c604:	dd0a      	ble.n	800c61c <scalbn+0xb4>
 800c606:	a112      	add	r1, pc, #72	; (adr r1, 800c650 <scalbn+0xe8>)
 800c608:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d1e2      	bne.n	800c5d6 <scalbn+0x6e>
 800c610:	a30f      	add	r3, pc, #60	; (adr r3, 800c650 <scalbn+0xe8>)
 800c612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c616:	f7f3 fff3 	bl	8000600 <__aeabi_dmul>
 800c61a:	e7cb      	b.n	800c5b4 <scalbn+0x4c>
 800c61c:	a10a      	add	r1, pc, #40	; (adr r1, 800c648 <scalbn+0xe0>)
 800c61e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d0b8      	beq.n	800c598 <scalbn+0x30>
 800c626:	a10e      	add	r1, pc, #56	; (adr r1, 800c660 <scalbn+0xf8>)
 800c628:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c62c:	e7b4      	b.n	800c598 <scalbn+0x30>
 800c62e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c632:	3236      	adds	r2, #54	; 0x36
 800c634:	4620      	mov	r0, r4
 800c636:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c63a:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c63e:	2200      	movs	r2, #0
 800c640:	4b0b      	ldr	r3, [pc, #44]	; (800c670 <scalbn+0x108>)
 800c642:	e7e8      	b.n	800c616 <scalbn+0xae>
 800c644:	f3af 8000 	nop.w
 800c648:	c2f8f359 	.word	0xc2f8f359
 800c64c:	01a56e1f 	.word	0x01a56e1f
 800c650:	8800759c 	.word	0x8800759c
 800c654:	7e37e43c 	.word	0x7e37e43c
 800c658:	8800759c 	.word	0x8800759c
 800c65c:	fe37e43c 	.word	0xfe37e43c
 800c660:	c2f8f359 	.word	0xc2f8f359
 800c664:	81a56e1f 	.word	0x81a56e1f
 800c668:	43500000 	.word	0x43500000
 800c66c:	ffff3cb0 	.word	0xffff3cb0
 800c670:	3c900000 	.word	0x3c900000

0800c674 <_init>:
 800c674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c676:	bf00      	nop
 800c678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c67a:	bc08      	pop	{r3}
 800c67c:	469e      	mov	lr, r3
 800c67e:	4770      	bx	lr

0800c680 <_fini>:
 800c680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c682:	bf00      	nop
 800c684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c686:	bc08      	pop	{r3}
 800c688:	469e      	mov	lr, r3
 800c68a:	4770      	bx	lr
