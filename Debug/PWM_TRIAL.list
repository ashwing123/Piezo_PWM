
PWM_TRIAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000234  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a860  08000234  08000234  00010234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  0800aa94  0800aa94  0001aa94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800ac08  0800ac08  0001ac08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800ac10  0800ac10  0001ac10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800ac14  0800ac14  0001ac14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000009  20000000  0800ac18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000095c  2000000c  0800ac21  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000968  0800ac21  00020968  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020009  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002757a  00000000  00000000  0002003f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000040d2  00000000  00000000  000475b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001eb0  00000000  00000000  0004b690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001d28  00000000  00000000  0004d540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a02c  00000000  00000000  0004f268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000280fc  00000000  00000000  00089294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016c65c  00000000  00000000  000b1390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0021d9ec  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008664  00000000  00000000  0021da3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000234 <__do_global_dtors_aux>:
 8000234:	b510      	push	{r4, lr}
 8000236:	4c05      	ldr	r4, [pc, #20]	; (800024c <__do_global_dtors_aux+0x18>)
 8000238:	7823      	ldrb	r3, [r4, #0]
 800023a:	b933      	cbnz	r3, 800024a <__do_global_dtors_aux+0x16>
 800023c:	4b04      	ldr	r3, [pc, #16]	; (8000250 <__do_global_dtors_aux+0x1c>)
 800023e:	b113      	cbz	r3, 8000246 <__do_global_dtors_aux+0x12>
 8000240:	4804      	ldr	r0, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x20>)
 8000242:	e000      	b.n	8000246 <__do_global_dtors_aux+0x12>
 8000244:	bf00      	nop
 8000246:	2301      	movs	r3, #1
 8000248:	7023      	strb	r3, [r4, #0]
 800024a:	bd10      	pop	{r4, pc}
 800024c:	2000000c 	.word	0x2000000c
 8000250:	00000000 	.word	0x00000000
 8000254:	0800aa7c 	.word	0x0800aa7c

08000258 <frame_dummy>:
 8000258:	b508      	push	{r3, lr}
 800025a:	4b03      	ldr	r3, [pc, #12]	; (8000268 <frame_dummy+0x10>)
 800025c:	b11b      	cbz	r3, 8000266 <frame_dummy+0xe>
 800025e:	4903      	ldr	r1, [pc, #12]	; (800026c <frame_dummy+0x14>)
 8000260:	4803      	ldr	r0, [pc, #12]	; (8000270 <frame_dummy+0x18>)
 8000262:	e000      	b.n	8000266 <frame_dummy+0xe>
 8000264:	bf00      	nop
 8000266:	bd08      	pop	{r3, pc}
 8000268:	00000000 	.word	0x00000000
 800026c:	20000010 	.word	0x20000010
 8000270:	0800aa7c 	.word	0x0800aa7c

08000274 <__aeabi_uldivmod>:
 8000274:	b953      	cbnz	r3, 800028c <__aeabi_uldivmod+0x18>
 8000276:	b94a      	cbnz	r2, 800028c <__aeabi_uldivmod+0x18>
 8000278:	2900      	cmp	r1, #0
 800027a:	bf08      	it	eq
 800027c:	2800      	cmpeq	r0, #0
 800027e:	bf1c      	itt	ne
 8000280:	f04f 31ff 	movne.w	r1, #4294967295
 8000284:	f04f 30ff 	movne.w	r0, #4294967295
 8000288:	f000 b982 	b.w	8000590 <__aeabi_idiv0>
 800028c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000290:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000294:	f000 f806 	bl	80002a4 <__udivmoddi4>
 8000298:	f8dd e004 	ldr.w	lr, [sp, #4]
 800029c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a0:	b004      	add	sp, #16
 80002a2:	4770      	bx	lr

080002a4 <__udivmoddi4>:
 80002a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002a8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80002aa:	4604      	mov	r4, r0
 80002ac:	460f      	mov	r7, r1
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d148      	bne.n	8000344 <__udivmoddi4+0xa0>
 80002b2:	428a      	cmp	r2, r1
 80002b4:	4694      	mov	ip, r2
 80002b6:	d961      	bls.n	800037c <__udivmoddi4+0xd8>
 80002b8:	fab2 f382 	clz	r3, r2
 80002bc:	b143      	cbz	r3, 80002d0 <__udivmoddi4+0x2c>
 80002be:	f1c3 0120 	rsb	r1, r3, #32
 80002c2:	409f      	lsls	r7, r3
 80002c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c8:	409c      	lsls	r4, r3
 80002ca:	fa20 f101 	lsr.w	r1, r0, r1
 80002ce:	430f      	orrs	r7, r1
 80002d0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002d4:	fa1f fe8c 	uxth.w	lr, ip
 80002d8:	0c22      	lsrs	r2, r4, #16
 80002da:	fbb7 f6f1 	udiv	r6, r7, r1
 80002de:	fb01 7716 	mls	r7, r1, r6, r7
 80002e2:	fb06 f00e 	mul.w	r0, r6, lr
 80002e6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ea:	4290      	cmp	r0, r2
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0x5c>
 80002ee:	eb1c 0202 	adds.w	r2, ip, r2
 80002f2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0x5a>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f200 8137 	bhi.w	800056c <__udivmoddi4+0x2c8>
 80002fe:	463e      	mov	r6, r7
 8000300:	1a12      	subs	r2, r2, r0
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb2 f0f1 	udiv	r0, r2, r1
 8000308:	fb01 2210 	mls	r2, r1, r0, r2
 800030c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000310:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000314:	45a6      	cmp	lr, r4
 8000316:	d908      	bls.n	800032a <__udivmoddi4+0x86>
 8000318:	eb1c 0404 	adds.w	r4, ip, r4
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	d202      	bcs.n	8000328 <__udivmoddi4+0x84>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f200 811c 	bhi.w	8000560 <__udivmoddi4+0x2bc>
 8000328:	4610      	mov	r0, r2
 800032a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800032e:	eba4 040e 	sub.w	r4, r4, lr
 8000332:	2600      	movs	r6, #0
 8000334:	b11d      	cbz	r5, 800033e <__udivmoddi4+0x9a>
 8000336:	40dc      	lsrs	r4, r3
 8000338:	2300      	movs	r3, #0
 800033a:	e9c5 4300 	strd	r4, r3, [r5]
 800033e:	4631      	mov	r1, r6
 8000340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000344:	428b      	cmp	r3, r1
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0xb8>
 8000348:	2d00      	cmp	r5, #0
 800034a:	f000 80fd 	beq.w	8000548 <__udivmoddi4+0x2a4>
 800034e:	2600      	movs	r6, #0
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	4630      	mov	r0, r6
 8000356:	4631      	mov	r1, r6
 8000358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800035c:	fab3 f683 	clz	r6, r3
 8000360:	2e00      	cmp	r6, #0
 8000362:	d14b      	bne.n	80003fc <__udivmoddi4+0x158>
 8000364:	428b      	cmp	r3, r1
 8000366:	f0c0 80f2 	bcc.w	800054e <__udivmoddi4+0x2aa>
 800036a:	4282      	cmp	r2, r0
 800036c:	f240 80ef 	bls.w	800054e <__udivmoddi4+0x2aa>
 8000370:	4630      	mov	r0, r6
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e3      	beq.n	800033e <__udivmoddi4+0x9a>
 8000376:	e9c5 4700 	strd	r4, r7, [r5]
 800037a:	e7e0      	b.n	800033e <__udivmoddi4+0x9a>
 800037c:	b902      	cbnz	r2, 8000380 <__udivmoddi4+0xdc>
 800037e:	deff      	udf	#255	; 0xff
 8000380:	fab2 f382 	clz	r3, r2
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 809d 	bne.w	80004c4 <__udivmoddi4+0x220>
 800038a:	1a89      	subs	r1, r1, r2
 800038c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000390:	b297      	uxth	r7, r2
 8000392:	2601      	movs	r6, #1
 8000394:	0c20      	lsrs	r0, r4, #16
 8000396:	fbb1 f2fe 	udiv	r2, r1, lr
 800039a:	fb0e 1112 	mls	r1, lr, r2, r1
 800039e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a2:	fb07 f002 	mul.w	r0, r7, r2
 80003a6:	4288      	cmp	r0, r1
 80003a8:	d90f      	bls.n	80003ca <__udivmoddi4+0x126>
 80003aa:	eb1c 0101 	adds.w	r1, ip, r1
 80003ae:	f102 38ff 	add.w	r8, r2, #4294967295
 80003b2:	bf2c      	ite	cs
 80003b4:	f04f 0901 	movcs.w	r9, #1
 80003b8:	f04f 0900 	movcc.w	r9, #0
 80003bc:	4288      	cmp	r0, r1
 80003be:	d903      	bls.n	80003c8 <__udivmoddi4+0x124>
 80003c0:	f1b9 0f00 	cmp.w	r9, #0
 80003c4:	f000 80cf 	beq.w	8000566 <__udivmoddi4+0x2c2>
 80003c8:	4642      	mov	r2, r8
 80003ca:	1a09      	subs	r1, r1, r0
 80003cc:	b2a4      	uxth	r4, r4
 80003ce:	fbb1 f0fe 	udiv	r0, r1, lr
 80003d2:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d6:	fb00 f707 	mul.w	r7, r0, r7
 80003da:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003de:	42a7      	cmp	r7, r4
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x150>
 80003e2:	eb1c 0404 	adds.w	r4, ip, r4
 80003e6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x14e>
 80003ec:	42a7      	cmp	r7, r4
 80003ee:	f200 80b4 	bhi.w	800055a <__udivmoddi4+0x2b6>
 80003f2:	4608      	mov	r0, r1
 80003f4:	1be4      	subs	r4, r4, r7
 80003f6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003fa:	e79b      	b.n	8000334 <__udivmoddi4+0x90>
 80003fc:	f1c6 0720 	rsb	r7, r6, #32
 8000400:	40b3      	lsls	r3, r6
 8000402:	fa01 f406 	lsl.w	r4, r1, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	40f9      	lsrs	r1, r7
 800040c:	40b2      	lsls	r2, r6
 800040e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000412:	fa20 f307 	lsr.w	r3, r0, r7
 8000416:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041a:	431c      	orrs	r4, r3
 800041c:	fa1f fe8c 	uxth.w	lr, ip
 8000420:	fa00 f306 	lsl.w	r3, r0, r6
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f8f9 	udiv	r8, r1, r9
 800042a:	fb09 1118 	mls	r1, r9, r8, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb08 f00e 	mul.w	r0, r8, lr
 8000436:	4288      	cmp	r0, r1
 8000438:	d90f      	bls.n	800045a <__udivmoddi4+0x1b6>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000442:	bf2c      	ite	cs
 8000444:	f04f 0b01 	movcs.w	fp, #1
 8000448:	f04f 0b00 	movcc.w	fp, #0
 800044c:	4288      	cmp	r0, r1
 800044e:	d903      	bls.n	8000458 <__udivmoddi4+0x1b4>
 8000450:	f1bb 0f00 	cmp.w	fp, #0
 8000454:	f000 808d 	beq.w	8000572 <__udivmoddi4+0x2ce>
 8000458:	46d0      	mov	r8, sl
 800045a:	1a09      	subs	r1, r1, r0
 800045c:	b2a4      	uxth	r4, r4
 800045e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000462:	fb09 1110 	mls	r1, r9, r0, r1
 8000466:	fb00 fe0e 	mul.w	lr, r0, lr
 800046a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800046e:	458e      	cmp	lr, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1de>
 8000472:	eb1c 0101 	adds.w	r1, ip, r1
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d201      	bcs.n	8000480 <__udivmoddi4+0x1dc>
 800047c:	458e      	cmp	lr, r1
 800047e:	d87f      	bhi.n	8000580 <__udivmoddi4+0x2dc>
 8000480:	4620      	mov	r0, r4
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	eba1 010e 	sub.w	r1, r1, lr
 800048a:	fba0 9802 	umull	r9, r8, r0, r2
 800048e:	4541      	cmp	r1, r8
 8000490:	464c      	mov	r4, r9
 8000492:	46c6      	mov	lr, r8
 8000494:	d302      	bcc.n	800049c <__udivmoddi4+0x1f8>
 8000496:	d106      	bne.n	80004a6 <__udivmoddi4+0x202>
 8000498:	454b      	cmp	r3, r9
 800049a:	d204      	bcs.n	80004a6 <__udivmoddi4+0x202>
 800049c:	3801      	subs	r0, #1
 800049e:	ebb9 0402 	subs.w	r4, r9, r2
 80004a2:	eb68 0e0c 	sbc.w	lr, r8, ip
 80004a6:	2d00      	cmp	r5, #0
 80004a8:	d070      	beq.n	800058c <__udivmoddi4+0x2e8>
 80004aa:	1b1a      	subs	r2, r3, r4
 80004ac:	eb61 010e 	sbc.w	r1, r1, lr
 80004b0:	fa22 f306 	lsr.w	r3, r2, r6
 80004b4:	fa01 f707 	lsl.w	r7, r1, r7
 80004b8:	40f1      	lsrs	r1, r6
 80004ba:	2600      	movs	r6, #0
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	e73c      	b.n	800033e <__udivmoddi4+0x9a>
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	f1c3 0020 	rsb	r0, r3, #32
 80004cc:	fa01 f203 	lsl.w	r2, r1, r3
 80004d0:	fa21 f600 	lsr.w	r6, r1, r0
 80004d4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004d8:	fa24 f100 	lsr.w	r1, r4, r0
 80004dc:	fa1f f78c 	uxth.w	r7, ip
 80004e0:	409c      	lsls	r4, r3
 80004e2:	4311      	orrs	r1, r2
 80004e4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004e8:	0c0a      	lsrs	r2, r1, #16
 80004ea:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ee:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004f2:	fb00 f607 	mul.w	r6, r0, r7
 80004f6:	4296      	cmp	r6, r2
 80004f8:	d90e      	bls.n	8000518 <__udivmoddi4+0x274>
 80004fa:	eb1c 0202 	adds.w	r2, ip, r2
 80004fe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000502:	bf2c      	ite	cs
 8000504:	f04f 0901 	movcs.w	r9, #1
 8000508:	f04f 0900 	movcc.w	r9, #0
 800050c:	4296      	cmp	r6, r2
 800050e:	d902      	bls.n	8000516 <__udivmoddi4+0x272>
 8000510:	f1b9 0f00 	cmp.w	r9, #0
 8000514:	d031      	beq.n	800057a <__udivmoddi4+0x2d6>
 8000516:	4640      	mov	r0, r8
 8000518:	1b92      	subs	r2, r2, r6
 800051a:	b289      	uxth	r1, r1
 800051c:	fbb2 f6fe 	udiv	r6, r2, lr
 8000520:	fb0e 2216 	mls	r2, lr, r6, r2
 8000524:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000528:	fb06 f207 	mul.w	r2, r6, r7
 800052c:	428a      	cmp	r2, r1
 800052e:	d907      	bls.n	8000540 <__udivmoddi4+0x29c>
 8000530:	eb1c 0101 	adds.w	r1, ip, r1
 8000534:	f106 38ff 	add.w	r8, r6, #4294967295
 8000538:	d201      	bcs.n	800053e <__udivmoddi4+0x29a>
 800053a:	428a      	cmp	r2, r1
 800053c:	d823      	bhi.n	8000586 <__udivmoddi4+0x2e2>
 800053e:	4646      	mov	r6, r8
 8000540:	1a89      	subs	r1, r1, r2
 8000542:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000546:	e725      	b.n	8000394 <__udivmoddi4+0xf0>
 8000548:	462e      	mov	r6, r5
 800054a:	4628      	mov	r0, r5
 800054c:	e6f7      	b.n	800033e <__udivmoddi4+0x9a>
 800054e:	1a84      	subs	r4, r0, r2
 8000550:	eb61 0303 	sbc.w	r3, r1, r3
 8000554:	2001      	movs	r0, #1
 8000556:	461f      	mov	r7, r3
 8000558:	e70b      	b.n	8000372 <__udivmoddi4+0xce>
 800055a:	4464      	add	r4, ip
 800055c:	3802      	subs	r0, #2
 800055e:	e749      	b.n	80003f4 <__udivmoddi4+0x150>
 8000560:	4464      	add	r4, ip
 8000562:	3802      	subs	r0, #2
 8000564:	e6e1      	b.n	800032a <__udivmoddi4+0x86>
 8000566:	3a02      	subs	r2, #2
 8000568:	4461      	add	r1, ip
 800056a:	e72e      	b.n	80003ca <__udivmoddi4+0x126>
 800056c:	3e02      	subs	r6, #2
 800056e:	4462      	add	r2, ip
 8000570:	e6c6      	b.n	8000300 <__udivmoddi4+0x5c>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	e76f      	b.n	800045a <__udivmoddi4+0x1b6>
 800057a:	3802      	subs	r0, #2
 800057c:	4462      	add	r2, ip
 800057e:	e7cb      	b.n	8000518 <__udivmoddi4+0x274>
 8000580:	3802      	subs	r0, #2
 8000582:	4461      	add	r1, ip
 8000584:	e77d      	b.n	8000482 <__udivmoddi4+0x1de>
 8000586:	3e02      	subs	r6, #2
 8000588:	4461      	add	r1, ip
 800058a:	e7d9      	b.n	8000540 <__udivmoddi4+0x29c>
 800058c:	462e      	mov	r6, r5
 800058e:	e6d6      	b.n	800033e <__udivmoddi4+0x9a>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <MX_TIM3_Init>:


TIM_HandleTypeDef htim3;
//TIM3 initialization function
void MX_TIM3_Init(void)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b08a      	sub	sp, #40	; 0x28
 8000598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800059a:	f107 031c 	add.w	r3, r7, #28
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	605a      	str	r2, [r3, #4]
 80005a4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005a6:	463b      	mov	r3, r7
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]
 80005b4:	615a      	str	r2, [r3, #20]
 80005b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005b8:	4b21      	ldr	r3, [pc, #132]	; (8000640 <MX_TIM3_Init+0xac>)
 80005ba:	4a22      	ldr	r2, [pc, #136]	; (8000644 <MX_TIM3_Init+0xb0>)
 80005bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64;
 80005be:	4b20      	ldr	r3, [pc, #128]	; (8000640 <MX_TIM3_Init+0xac>)
 80005c0:	2240      	movs	r2, #64	; 0x40
 80005c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005c4:	4b1e      	ldr	r3, [pc, #120]	; (8000640 <MX_TIM3_Init+0xac>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000;
 80005ca:	4b1d      	ldr	r3, [pc, #116]	; (8000640 <MX_TIM3_Init+0xac>)
 80005cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80005d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005d2:	4b1b      	ldr	r3, [pc, #108]	; (8000640 <MX_TIM3_Init+0xac>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005d8:	4b19      	ldr	r3, [pc, #100]	; (8000640 <MX_TIM3_Init+0xac>)
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80005de:	4818      	ldr	r0, [pc, #96]	; (8000640 <MX_TIM3_Init+0xac>)
 80005e0:	f007 fe60 	bl	80082a4 <HAL_TIM_PWM_Init>
 80005e4:	4603      	mov	r3, r0
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d001      	beq.n	80005ee <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 80005ea:	f000 fe9f 	bl	800132c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f2:	2300      	movs	r3, #0
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005f6:	f107 031c 	add.w	r3, r7, #28
 80005fa:	4619      	mov	r1, r3
 80005fc:	4810      	ldr	r0, [pc, #64]	; (8000640 <MX_TIM3_Init+0xac>)
 80005fe:	f008 ffb7 	bl	8009570 <HAL_TIMEx_MasterConfigSynchronization>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000608:	f000 fe90 	bl	800132c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800060c:	2360      	movs	r3, #96	; 0x60
 800060e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000614:	2300      	movs	r3, #0
 8000616:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000618:	2300      	movs	r3, #0
 800061a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800061c:	463b      	mov	r3, r7
 800061e:	2208      	movs	r2, #8
 8000620:	4619      	mov	r1, r3
 8000622:	4807      	ldr	r0, [pc, #28]	; (8000640 <MX_TIM3_Init+0xac>)
 8000624:	f008 f968 	bl	80088f8 <HAL_TIM_PWM_ConfigChannel>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800062e:	f000 fe7d 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000632:	4803      	ldr	r0, [pc, #12]	; (8000640 <MX_TIM3_Init+0xac>)
 8000634:	f001 fa9c 	bl	8001b70 <HAL_TIM_MspPostInit>

}
 8000638:	bf00      	nop
 800063a:	3728      	adds	r7, #40	; 0x28
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000028 	.word	0x20000028
 8000644:	40000400 	.word	0x40000400

08000648 <piezo_init>:

void piezo_init(void) {
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
	MX_TIM3_Init();
 800064c:	f7ff ffa2 	bl	8000594 <MX_TIM3_Init>
	HAL_TIM_Base_Start(&htim3);
 8000650:	4805      	ldr	r0, [pc, #20]	; (8000668 <piezo_init+0x20>)
 8000652:	f007 fd8f 	bl	8008174 <HAL_TIM_Base_Start>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_13, GPIO_PIN_SET);
 8000656:	2201      	movs	r2, #1
 8000658:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065c:	4803      	ldr	r0, [pc, #12]	; (800066c <piezo_init+0x24>)
 800065e:	f002 f8a7 	bl	80027b0 <HAL_GPIO_WritePin>
}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000028 	.word	0x20000028
 800066c:	42020000 	.word	0x42020000

08000670 <pause_pwm>:
/*
 * function name: pause_pwm
 * purpose: make the duty cycle 0 so no output is provided for the specified duration
 * input: duration of pause in ms
 */
void pause_pwm(int duration_in_ms) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8000678:	4b05      	ldr	r3, [pc, #20]	; (8000690 <pause_pwm+0x20>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_Delay(duration_in_ms);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	4618      	mov	r0, r3
 8000684:	f001 fd0c 	bl	80020a0 <HAL_Delay>
}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000028 	.word	0x20000028

08000694 <play_frequency>:
/*
 * function name: play_frequency
 * purpose: plays a frequency, for a duration that corresponds to the beat and the tempo
 * input: the beat length, the frequency, the beats per second (tempo)
 */
void play_frequency(float note_beat_length, float frequency, float beats_per_sec) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b086      	sub	sp, #24
 8000698:	af00      	add	r7, sp, #0
 800069a:	ed87 0a03 	vstr	s0, [r7, #12]
 800069e:	edc7 0a02 	vstr	s1, [r7, #8]
 80006a2:	ed87 1a01 	vstr	s2, [r7, #4]
	int note_duration_ms = (note_beat_length/beats_per_sec)*1000;
 80006a6:	edd7 6a03 	vldr	s13, [r7, #12]
 80006aa:	ed97 7a01 	vldr	s14, [r7, #4]
 80006ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006b2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000720 <play_frequency+0x8c>
 80006b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006be:	ee17 3a90 	vmov	r3, s15
 80006c2:	617b      	str	r3, [r7, #20]
	if (frequency == 0) {
 80006c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80006c8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80006cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006d0:	d103      	bne.n	80006da <play_frequency+0x46>
		pause_pwm(note_duration_ms);
 80006d2:	6978      	ldr	r0, [r7, #20]
 80006d4:	f7ff ffcc 	bl	8000670 <pause_pwm>
		__HAL_TIM_SET_AUTORELOAD(&htim3, arr_val);
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, arr_val / 2);
		//delaying so the note holds
		HAL_Delay(note_duration_ms);
	}
}
 80006d8:	e01d      	b.n	8000716 <play_frequency+0x82>
		int arr_val = (int) (CLOCKFREQ/frequency);
 80006da:	eddf 6a12 	vldr	s13, [pc, #72]	; 8000724 <play_frequency+0x90>
 80006de:	ed97 7a02 	vldr	s14, [r7, #8]
 80006e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80006ea:	ee17 3a90 	vmov	r3, s15
 80006ee:	613b      	str	r3, [r7, #16]
		__HAL_TIM_SET_AUTORELOAD(&htim3, arr_val);
 80006f0:	4b0d      	ldr	r3, [pc, #52]	; (8000728 <play_frequency+0x94>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	693a      	ldr	r2, [r7, #16]
 80006f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80006f8:	693b      	ldr	r3, [r7, #16]
 80006fa:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <play_frequency+0x94>)
 80006fc:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, arr_val / 2);
 80006fe:	693b      	ldr	r3, [r7, #16]
 8000700:	0fda      	lsrs	r2, r3, #31
 8000702:	4413      	add	r3, r2
 8000704:	105b      	asrs	r3, r3, #1
 8000706:	461a      	mov	r2, r3
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <play_frequency+0x94>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	63da      	str	r2, [r3, #60]	; 0x3c
		HAL_Delay(note_duration_ms);
 800070e:	697b      	ldr	r3, [r7, #20]
 8000710:	4618      	mov	r0, r3
 8000712:	f001 fcc5 	bl	80020a0 <HAL_Delay>
}
 8000716:	bf00      	nop
 8000718:	3718      	adds	r7, #24
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	447a0000 	.word	0x447a0000
 8000724:	49742400 	.word	0x49742400
 8000728:	20000028 	.word	0x20000028

0800072c <stop_pwm>:
	piezo_init();
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
	play_frequency_array(beats, freq_arr, tempo, note_num);
}

void stop_pwm(void) {
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 0);
 8000730:	4b04      	ldr	r3, [pc, #16]	; (8000744 <stop_pwm+0x18>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	2200      	movs	r2, #0
 8000736:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000738:	bf00      	nop
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	20000028 	.word	0x20000028

08000748 <play_freqs_no_pause>:
void play_freqs_no_pause(float beats[], float frequencies[], int tempo, int song_len) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af00      	add	r7, sp, #0
 800074e:	60f8      	str	r0, [r7, #12]
 8000750:	60b9      	str	r1, [r7, #8]
 8000752:	607a      	str	r2, [r7, #4]
 8000754:	603b      	str	r3, [r7, #0]
	piezo_init();
 8000756:	f7ff ff77 	bl	8000648 <piezo_init>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800075a:	2108      	movs	r1, #8
 800075c:	481a      	ldr	r0, [pc, #104]	; (80007c8 <play_freqs_no_pause+0x80>)
 800075e:	f007 fdf9 	bl	8008354 <HAL_TIM_PWM_Start>
	float beats_per_sec = tempo/60;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	4a19      	ldr	r2, [pc, #100]	; (80007cc <play_freqs_no_pause+0x84>)
 8000766:	fb82 1203 	smull	r1, r2, r2, r3
 800076a:	441a      	add	r2, r3
 800076c:	1152      	asrs	r2, r2, #5
 800076e:	17db      	asrs	r3, r3, #31
 8000770:	1ad3      	subs	r3, r2, r3
 8000772:	ee07 3a90 	vmov	s15, r3
 8000776:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800077a:	edc7 7a04 	vstr	s15, [r7, #16]
	for (int i = 0; i < song_len; i++) {
 800077e:	2300      	movs	r3, #0
 8000780:	617b      	str	r3, [r7, #20]
 8000782:	e016      	b.n	80007b2 <play_freqs_no_pause+0x6a>
		play_frequency(beats[i], frequencies[i], beats_per_sec);
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	68fa      	ldr	r2, [r7, #12]
 800078a:	4413      	add	r3, r2
 800078c:	edd3 7a00 	vldr	s15, [r3]
 8000790:	697b      	ldr	r3, [r7, #20]
 8000792:	009b      	lsls	r3, r3, #2
 8000794:	68ba      	ldr	r2, [r7, #8]
 8000796:	4413      	add	r3, r2
 8000798:	ed93 7a00 	vldr	s14, [r3]
 800079c:	ed97 1a04 	vldr	s2, [r7, #16]
 80007a0:	eef0 0a47 	vmov.f32	s1, s14
 80007a4:	eeb0 0a67 	vmov.f32	s0, s15
 80007a8:	f7ff ff74 	bl	8000694 <play_frequency>
	for (int i = 0; i < song_len; i++) {
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	3301      	adds	r3, #1
 80007b0:	617b      	str	r3, [r7, #20]
 80007b2:	697a      	ldr	r2, [r7, #20]
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	dbe4      	blt.n	8000784 <play_freqs_no_pause+0x3c>
	}
	stop_pwm();
 80007ba:	f7ff ffb7 	bl	800072c <stop_pwm>

}
 80007be:	bf00      	nop
 80007c0:	3718      	adds	r7, #24
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000028 	.word	0x20000028
 80007cc:	88888889 	.word	0x88888889

080007d0 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <LL_AHB2_GRP1_EnableClock+0x34>)
 80007da:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80007de:	4909      	ldr	r1, [pc, #36]	; (8000804 <LL_AHB2_GRP1_EnableClock+0x34>)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4313      	orrs	r3, r2
 80007e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <LL_AHB2_GRP1_EnableClock+0x34>)
 80007ea:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4013      	ands	r3, r2
 80007f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007f4:	68fb      	ldr	r3, [r7, #12]
}
 80007f6:	bf00      	nop
 80007f8:	3714      	adds	r7, #20
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	46020c00 	.word	0x46020c00

08000808 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_FDCAN1
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000810:	4b0a      	ldr	r3, [pc, #40]	; (800083c <LL_APB1_GRP2_EnableClock+0x34>)
 8000812:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8000816:	4909      	ldr	r1, [pc, #36]	; (800083c <LL_APB1_GRP2_EnableClock+0x34>)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4313      	orrs	r3, r2
 800081c:	f8c1 30a0 	str.w	r3, [r1, #160]	; 0xa0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <LL_APB1_GRP2_EnableClock+0x34>)
 8000822:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4013      	ands	r3, r2
 800082a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800082c:	68fb      	ldr	r3, [r7, #12]
}
 800082e:	bf00      	nop
 8000830:	3714      	adds	r7, #20
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	46020c00 	.word	0x46020c00

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b5b0      	push	{r4, r5, r7, lr}
 8000842:	b09e      	sub	sp, #120	; 0x78
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000846:	f001 fba7 	bl	8001f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084a:	f000 f855 	bl	80008f8 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 800084e:	f000 f8b2 	bl	80009b6 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000852:	f000 fbe9 	bl	8001028 <MX_GPIO_Init>
  MX_ADF1_Init();
 8000856:	f000 f8bd 	bl	80009d4 <MX_ADF1_Init>
  MX_I2C1_Init();
 800085a:	f000 f907 	bl	8000a6c <MX_I2C1_Init>
  MX_I2C2_Init();
 800085e:	f000 f945 	bl	8000aec <MX_I2C2_Init>
  MX_OCTOSPI1_Init();
 8000862:	f000 f983 	bl	8000b6c <MX_OCTOSPI1_Init>
  MX_OCTOSPI2_Init();
 8000866:	f000 f9fb 	bl	8000c60 <MX_OCTOSPI2_Init>
  MX_SPI2_Init();
 800086a:	f000 fa75 	bl	8000d58 <MX_SPI2_Init>
  MX_UART4_Init();
 800086e:	f000 fae1 	bl	8000e34 <MX_UART4_Init>
  MX_USART1_UART_Init();
 8000872:	f000 fb2b 	bl	8000ecc <MX_USART1_UART_Init>
  MX_UCPD1_Init();
 8000876:	f000 fb75 	bl	8000f64 <MX_UCPD1_Init>
  MX_USB_OTG_FS_PCD_Init();
 800087a:	f000 fba9 	bl	8000fd0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  piezo_init();
 800087e:	f7ff fee3 	bl	8000648 <piezo_init>

  //int beat_dur[] = {1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 2};
  //char twinkle_twinkle_notes[] = "C4 C4 G4 G4 A4 A4 G4 F4 F4 E4 E4 D4 D4 C4 G4 G4 F4 F4 E4 E4 D4 G4 G4 F4 F4 E4 E4 D4 C4 C4 G4 G4 A4 A4 G4 F4 F4 E4 E4 D4 D4 C4 ";
  char xfiles_notes[] = "A3 C4 E4 F4 0 A4 E4 D4 E4 G4 E4";
 8000882:	4b19      	ldr	r3, [pc, #100]	; (80008e8 <main+0xa8>)
 8000884:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000888:	461d      	mov	r5, r3
 800088a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800088c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800088e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000892:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  float xfiles_beats[] = {0.5, 0.5, 0.5, 1, 1, 1, 1, 1, 1, 1, 2};
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <main+0xac>)
 8000898:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800089c:	461d      	mov	r5, r3
 800089e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80008aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  float ascending_frqs[] = {350, 375, 400, 425, 450};
 80008ae:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <main+0xb0>)
 80008b0:	f107 0418 	add.w	r4, r7, #24
 80008b4:	461d      	mov	r5, r3
 80008b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008ba:	682b      	ldr	r3, [r5, #0]
 80008bc:	6023      	str	r3, [r4, #0]
  float beat_duration[] = {1, 1, 1, 1, 1};
 80008be:	4b0d      	ldr	r3, [pc, #52]	; (80008f4 <main+0xb4>)
 80008c0:	1d3c      	adds	r4, r7, #4
 80008c2:	461d      	mov	r5, r3
 80008c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80008c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80008c8:	682b      	ldr	r3, [r5, #0]
 80008ca:	6023      	str	r3, [r4, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//play_tune(xfiles_beats, xfiles_notes, 120);
	play_freqs_no_pause(beat_duration, ascending_frqs, 120, 5);
 80008cc:	f107 0118 	add.w	r1, r7, #24
 80008d0:	1d38      	adds	r0, r7, #4
 80008d2:	2305      	movs	r3, #5
 80008d4:	2278      	movs	r2, #120	; 0x78
 80008d6:	f7ff ff37 	bl	8000748 <play_freqs_no_pause>
	break;
 80008da:	bf00      	nop
 80008dc:	2300      	movs	r3, #0
    /* USER CODE END WHILE */
  }
    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3778      	adds	r7, #120	; 0x78
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bdb0      	pop	{r4, r5, r7, pc}
 80008e6:	bf00      	nop
 80008e8:	0800aa94 	.word	0x0800aa94
 80008ec:	0800aab4 	.word	0x0800aab4
 80008f0:	0800aae0 	.word	0x0800aae0
 80008f4:	0800aaf4 	.word	0x0800aaf4

080008f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b09e      	sub	sp, #120	; 0x78
 80008fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008fe:	f107 0318 	add.w	r3, r7, #24
 8000902:	2260      	movs	r2, #96	; 0x60
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f00a f8b0 	bl	800aa6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800090c:	463b      	mov	r3, r7
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]
 800091a:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 800091c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000920:	f003 faec 	bl	8003efc <HAL_PWREx_ControlVoltageScaling>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0x36>
  {
    Error_Handler();
 800092a:	f000 fcff 	bl	800132c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_MSI;
 800092e:	2330      	movs	r3, #48	; 0x30
 8000930:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000932:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000936:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000938:	2301      	movs	r3, #1
 800093a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800093c:	2310      	movs	r3, #16
 800093e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8000940:	2300      	movs	r3, #0
 8000942:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000944:	2302      	movs	r3, #2
 8000946:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000948:	2301      	movs	r3, #1
 800094a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 800094c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000950:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000952:	2303      	movs	r3, #3
 8000954:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000956:	2308      	movs	r3, #8
 8000958:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800095a:	2302      	movs	r3, #2
 800095c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800095e:	2302      	movs	r3, #2
 8000960:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000962:	2302      	movs	r3, #2
 8000964:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8000966:	230c      	movs	r3, #12
 8000968:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800096a:	2300      	movs	r3, #0
 800096c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096e:	f107 0318 	add.w	r3, r7, #24
 8000972:	4618      	mov	r0, r3
 8000974:	f003 fbb4 	bl	80040e0 <HAL_RCC_OscConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800097e:	f000 fcd5 	bl	800132c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000982:	231f      	movs	r3, #31
 8000984:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000986:	2303      	movs	r3, #3
 8000988:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800099a:	463b      	mov	r3, r7
 800099c:	2102      	movs	r1, #2
 800099e:	4618      	mov	r0, r3
 80009a0:	f004 fa74 	bl	8004e8c <HAL_RCC_ClockConfig>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80009aa:	f000 fcbf 	bl	800132c <Error_Handler>
  }
}
 80009ae:	bf00      	nop
 80009b0:	3778      	adds	r7, #120	; 0x78
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	af00      	add	r7, sp, #0
  HAL_PWREx_EnableVddIO2();
 80009ba:	f003 fb81 	bl	80040c0 <HAL_PWREx_EnableVddIO2>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80009be:	2002      	movs	r0, #2
 80009c0:	f003 fb1e 	bl	8004000 <HAL_PWREx_ConfigSupply>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <SystemPower_Config+0x18>
  {
    Error_Handler();
 80009ca:	f000 fcaf 	bl	800132c <Error_Handler>
  }
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <MX_ADF1_Init>:
  * @brief ADF1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADF1_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE END ADF1_Init 1 */

  /**
    AdfHandle0 structure initialization and HAL_MDF_Init function call
  */
  AdfHandle0.Instance = ADF1_Filter0;
 80009d8:	4b21      	ldr	r3, [pc, #132]	; (8000a60 <MX_ADF1_Init+0x8c>)
 80009da:	4a22      	ldr	r2, [pc, #136]	; (8000a64 <MX_ADF1_Init+0x90>)
 80009dc:	601a      	str	r2, [r3, #0]
  AdfHandle0.Init.CommonParam.ProcClockDivider = 1;
 80009de:	4b20      	ldr	r3, [pc, #128]	; (8000a60 <MX_ADF1_Init+0x8c>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	609a      	str	r2, [r3, #8]
  AdfHandle0.Init.CommonParam.OutputClock.Activation = DISABLE;
 80009e4:	4b1e      	ldr	r3, [pc, #120]	; (8000a60 <MX_ADF1_Init+0x8c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	731a      	strb	r2, [r3, #12]
  AdfHandle0.Init.SerialInterface.Activation = ENABLE;
 80009ea:	4b1d      	ldr	r3, [pc, #116]	; (8000a60 <MX_ADF1_Init+0x8c>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  AdfHandle0.Init.SerialInterface.ClockSource = MDF_SITF_CCK0_SOURCE;
 80009f2:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <MX_ADF1_Init+0x8c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	62da      	str	r2, [r3, #44]	; 0x2c
  AdfHandle0.Init.SerialInterface.Threshold = 4;
 80009f8:	4b19      	ldr	r3, [pc, #100]	; (8000a60 <MX_ADF1_Init+0x8c>)
 80009fa:	2204      	movs	r2, #4
 80009fc:	631a      	str	r2, [r3, #48]	; 0x30
  AdfHandle0.Init.FilterBistream = MDF_BITSTREAM0_FALLING;
 80009fe:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <MX_ADF1_Init+0x8c>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_MDF_Init(&AdfHandle0) != HAL_OK)
 8000a04:	4816      	ldr	r0, [pc, #88]	; (8000a60 <MX_ADF1_Init+0x8c>)
 8000a06:	f002 f811 	bl	8002a2c <HAL_MDF_Init>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_ADF1_Init+0x40>
  {
    Error_Handler();
 8000a10:	f000 fc8c 	bl	800132c <Error_Handler>
  /**
    AdfFilterConfig0 structure initialization

    WARNING : only structure is filled, no specific init function call for filter
  */
  AdfFilterConfig0.DataSource = MDF_DATA_SOURCE_BSMX;
 8000a14:	4b14      	ldr	r3, [pc, #80]	; (8000a68 <MX_ADF1_Init+0x94>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
  AdfFilterConfig0.Delay = 0;
 8000a1a:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <MX_ADF1_Init+0x94>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	605a      	str	r2, [r3, #4]
  AdfFilterConfig0.CicMode = MDF_ONE_FILTER_SINC4;
 8000a20:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <MX_ADF1_Init+0x94>)
 8000a22:	2240      	movs	r2, #64	; 0x40
 8000a24:	609a      	str	r2, [r3, #8]
  AdfFilterConfig0.DecimationRatio = 2;
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <MX_ADF1_Init+0x94>)
 8000a28:	2202      	movs	r2, #2
 8000a2a:	60da      	str	r2, [r3, #12]
  AdfFilterConfig0.Gain = 0;
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <MX_ADF1_Init+0x94>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	615a      	str	r2, [r3, #20]
  AdfFilterConfig0.ReshapeFilter.Activation = DISABLE;
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <MX_ADF1_Init+0x94>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	761a      	strb	r2, [r3, #24]
  AdfFilterConfig0.HighPassFilter.Activation = DISABLE;
 8000a38:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <MX_ADF1_Init+0x94>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f883 2020 	strb.w	r2, [r3, #32]
  AdfFilterConfig0.SoundActivity.Activation = DISABLE;
 8000a40:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_ADF1_Init+0x94>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  AdfFilterConfig0.AcquisitionMode = MDF_MODE_ASYNC_CONT;
 8000a48:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <MX_ADF1_Init+0x94>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	665a      	str	r2, [r3, #100]	; 0x64
  AdfFilterConfig0.FifoThreshold = MDF_FIFO_THRESHOLD_NOT_EMPTY;
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_ADF1_Init+0x94>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	669a      	str	r2, [r3, #104]	; 0x68
  AdfFilterConfig0.DiscardSamples = 0;
 8000a54:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <MX_ADF1_Init+0x94>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	66da      	str	r2, [r3, #108]	; 0x6c
  /* USER CODE BEGIN ADF1_Init 2 */

  /* USER CODE END ADF1_Init 2 */

}
 8000a5a:	bf00      	nop
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000074 	.word	0x20000074
 8000a64:	46024080 	.word	0x46024080
 8000a68:	200000b8 	.word	0x200000b8

08000a6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a70:	4b1b      	ldr	r3, [pc, #108]	; (8000ae0 <MX_I2C1_Init+0x74>)
 8000a72:	4a1c      	ldr	r2, [pc, #112]	; (8000ae4 <MX_I2C1_Init+0x78>)
 8000a74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 8000a76:	4b1a      	ldr	r3, [pc, #104]	; (8000ae0 <MX_I2C1_Init+0x74>)
 8000a78:	4a1b      	ldr	r2, [pc, #108]	; (8000ae8 <MX_I2C1_Init+0x7c>)
 8000a7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a7c:	4b18      	ldr	r3, [pc, #96]	; (8000ae0 <MX_I2C1_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a82:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <MX_I2C1_Init+0x74>)
 8000a84:	2201      	movs	r2, #1
 8000a86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a88:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <MX_I2C1_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a8e:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <MX_I2C1_Init+0x74>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <MX_I2C1_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a9a:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <MX_I2C1_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <MX_I2C1_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000aa6:	480e      	ldr	r0, [pc, #56]	; (8000ae0 <MX_I2C1_Init+0x74>)
 8000aa8:	f001 fe9a 	bl	80027e0 <HAL_I2C_Init>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000ab2:	f000 fc3b 	bl	800132c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4809      	ldr	r0, [pc, #36]	; (8000ae0 <MX_I2C1_Init+0x74>)
 8000aba:	f001 ff20 	bl	80028fe <HAL_I2CEx_ConfigAnalogFilter>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ac4:	f000 fc32 	bl	800132c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4805      	ldr	r0, [pc, #20]	; (8000ae0 <MX_I2C1_Init+0x74>)
 8000acc:	f001 ff62 	bl	8002994 <HAL_I2CEx_ConfigDigitalFilter>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ad6:	f000 fc29 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20000134 	.word	0x20000134
 8000ae4:	40005400 	.word	0x40005400
 8000ae8:	10707dbc 	.word	0x10707dbc

08000aec <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	; (8000b60 <MX_I2C2_Init+0x74>)
 8000af2:	4a1c      	ldr	r2, [pc, #112]	; (8000b64 <MX_I2C2_Init+0x78>)
 8000af4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10707DBC;
 8000af6:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <MX_I2C2_Init+0x74>)
 8000af8:	4a1b      	ldr	r2, [pc, #108]	; (8000b68 <MX_I2C2_Init+0x7c>)
 8000afa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000afc:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <MX_I2C2_Init+0x74>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b02:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <MX_I2C2_Init+0x74>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b08:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <MX_I2C2_Init+0x74>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b0e:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <MX_I2C2_Init+0x74>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b14:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <MX_I2C2_Init+0x74>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b1a:	4b11      	ldr	r3, [pc, #68]	; (8000b60 <MX_I2C2_Init+0x74>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b20:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <MX_I2C2_Init+0x74>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b26:	480e      	ldr	r0, [pc, #56]	; (8000b60 <MX_I2C2_Init+0x74>)
 8000b28:	f001 fe5a 	bl	80027e0 <HAL_I2C_Init>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000b32:	f000 fbfb 	bl	800132c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b36:	2100      	movs	r1, #0
 8000b38:	4809      	ldr	r0, [pc, #36]	; (8000b60 <MX_I2C2_Init+0x74>)
 8000b3a:	f001 fee0 	bl	80028fe <HAL_I2CEx_ConfigAnalogFilter>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000b44:	f000 fbf2 	bl	800132c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4805      	ldr	r0, [pc, #20]	; (8000b60 <MX_I2C2_Init+0x74>)
 8000b4c:	f001 ff22 	bl	8002994 <HAL_I2CEx_ConfigDigitalFilter>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000b56:	f000 fbe9 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000180 	.word	0x20000180
 8000b64:	40005800 	.word	0x40005800
 8000b68:	10707dbc 	.word	0x10707dbc

08000b6c <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b088      	sub	sp, #32
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000b72:	f107 0308 	add.w	r3, r7, #8
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
 8000b80:	611a      	str	r2, [r3, #16]
 8000b82:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8000b84:	463b      	mov	r3, r7
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000b8c:	4b31      	ldr	r3, [pc, #196]	; (8000c54 <MX_OCTOSPI1_Init+0xe8>)
 8000b8e:	4a32      	ldr	r2, [pc, #200]	; (8000c58 <MX_OCTOSPI1_Init+0xec>)
 8000b90:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000b92:	4b30      	ldr	r3, [pc, #192]	; (8000c54 <MX_OCTOSPI1_Init+0xe8>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000b98:	4b2e      	ldr	r3, [pc, #184]	; (8000c54 <MX_OCTOSPI1_Init+0xe8>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_APMEMORY;
 8000b9e:	4b2d      	ldr	r3, [pc, #180]	; (8000c54 <MX_OCTOSPI1_Init+0xe8>)
 8000ba0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000ba4:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 24;
 8000ba6:	4b2b      	ldr	r3, [pc, #172]	; (8000c54 <MX_OCTOSPI1_Init+0xe8>)
 8000ba8:	2218      	movs	r2, #24
 8000baa:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000bac:	4b29      	ldr	r3, [pc, #164]	; (8000c54 <MX_OCTOSPI1_Init+0xe8>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000bb2:	4b28      	ldr	r3, [pc, #160]	; (8000c54 <MX_OCTOSPI1_Init+0xe8>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000bb8:	4b26      	ldr	r3, [pc, #152]	; (8000c54 <MX_OCTOSPI1_Init+0xe8>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000bbe:	4b25      	ldr	r3, [pc, #148]	; (8000c54 <MX_OCTOSPI1_Init+0xe8>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 2;
 8000bc4:	4b23      	ldr	r3, [pc, #140]	; (8000c54 <MX_OCTOSPI1_Init+0xe8>)
 8000bc6:	2202      	movs	r2, #2
 8000bc8:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000bca:	4b22      	ldr	r3, [pc, #136]	; (8000c54 <MX_OCTOSPI1_Init+0xe8>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8000bd0:	4b20      	ldr	r3, [pc, #128]	; (8000c54 <MX_OCTOSPI1_Init+0xe8>)
 8000bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000bd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 10;
 8000bd8:	4b1e      	ldr	r3, [pc, #120]	; (8000c54 <MX_OCTOSPI1_Init+0xe8>)
 8000bda:	220a      	movs	r2, #10
 8000bdc:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 8000bde:	4b1d      	ldr	r3, [pc, #116]	; (8000c54 <MX_OCTOSPI1_Init+0xe8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.MaxTran = 0;
 8000be4:	4b1b      	ldr	r3, [pc, #108]	; (8000c54 <MX_OCTOSPI1_Init+0xe8>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	639a      	str	r2, [r3, #56]	; 0x38
  hospi1.Init.Refresh = 100;
 8000bea:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <MX_OCTOSPI1_Init+0xe8>)
 8000bec:	2264      	movs	r2, #100	; 0x64
 8000bee:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000bf0:	4818      	ldr	r0, [pc, #96]	; (8000c54 <MX_OCTOSPI1_Init+0xe8>)
 8000bf2:	f002 f8c7 	bl	8002d84 <HAL_OSPI_Init>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_OCTOSPI1_Init+0x94>
  {
    Error_Handler();
 8000bfc:	f000 fb96 	bl	800132c <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 1;
 8000c00:	2301      	movs	r3, #1
 8000c02:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.DQSPort = 1;
 8000c04:	2301      	movs	r3, #1
 8000c06:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.NCSPort = 1;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8000c0c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8000c10:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_1_HIGH;
 8000c12:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <MX_OCTOSPI1_Init+0xf0>)
 8000c14:	61bb      	str	r3, [r7, #24]
  if (HAL_OSPIM_Config(&hospi1, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c1e:	4619      	mov	r1, r3
 8000c20:	480c      	ldr	r0, [pc, #48]	; (8000c54 <MX_OCTOSPI1_Init+0xe8>)
 8000c22:	f002 f9ef 	bl	8003004 <HAL_OSPIM_Config>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_OCTOSPI1_Init+0xc4>
  {
    Error_Handler();
 8000c2c:	f000 fb7e 	bl	800132c <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi1, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8000c38:	463b      	mov	r3, r7
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4805      	ldr	r0, [pc, #20]	; (8000c54 <MX_OCTOSPI1_Init+0xe8>)
 8000c3e:	f002 ffcd 	bl	8003bdc <HAL_OSPI_DLYB_SetConfig>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_OCTOSPI1_Init+0xe0>
  {
    Error_Handler();
 8000c48:	f000 fb70 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000c4c:	bf00      	nop
 8000c4e:	3720      	adds	r7, #32
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	200001cc 	.word	0x200001cc
 8000c58:	420d1400 	.word	0x420d1400
 8000c5c:	01000001 	.word	0x01000001

08000c60 <MX_OCTOSPI2_Init>:
  * @brief OCTOSPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI2_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b088      	sub	sp, #32
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI2_Init 0 */

  /* USER CODE END OCTOSPI2_Init 0 */

  OSPIM_CfgTypeDef sOspiManagerCfg = {0};
 8000c66:	f107 0308 	add.w	r3, r7, #8
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
 8000c6e:	605a      	str	r2, [r3, #4]
 8000c70:	609a      	str	r2, [r3, #8]
 8000c72:	60da      	str	r2, [r3, #12]
 8000c74:	611a      	str	r2, [r3, #16]
 8000c76:	615a      	str	r2, [r3, #20]
  HAL_OSPI_DLYB_CfgTypeDef HAL_OSPI_DLYB_Cfg_Struct = {0};
 8000c78:	463b      	mov	r3, r7
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN OCTOSPI2_Init 1 */

  /* USER CODE END OCTOSPI2_Init 1 */
  /* OCTOSPI2 parameter configuration*/
  hospi2.Instance = OCTOSPI2;
 8000c80:	4b31      	ldr	r3, [pc, #196]	; (8000d48 <MX_OCTOSPI2_Init+0xe8>)
 8000c82:	4a32      	ldr	r2, [pc, #200]	; (8000d4c <MX_OCTOSPI2_Init+0xec>)
 8000c84:	601a      	str	r2, [r3, #0]
  hospi2.Init.FifoThreshold = 4;
 8000c86:	4b30      	ldr	r3, [pc, #192]	; (8000d48 <MX_OCTOSPI2_Init+0xe8>)
 8000c88:	2204      	movs	r2, #4
 8000c8a:	605a      	str	r2, [r3, #4]
  hospi2.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000c8c:	4b2e      	ldr	r3, [pc, #184]	; (8000d48 <MX_OCTOSPI2_Init+0xe8>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  hospi2.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8000c92:	4b2d      	ldr	r3, [pc, #180]	; (8000d48 <MX_OCTOSPI2_Init+0xe8>)
 8000c94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000c98:	60da      	str	r2, [r3, #12]
  hospi2.Init.DeviceSize = 26;
 8000c9a:	4b2b      	ldr	r3, [pc, #172]	; (8000d48 <MX_OCTOSPI2_Init+0xe8>)
 8000c9c:	221a      	movs	r2, #26
 8000c9e:	611a      	str	r2, [r3, #16]
  hospi2.Init.ChipSelectHighTime = 2;
 8000ca0:	4b29      	ldr	r3, [pc, #164]	; (8000d48 <MX_OCTOSPI2_Init+0xe8>)
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	615a      	str	r2, [r3, #20]
  hospi2.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000ca6:	4b28      	ldr	r3, [pc, #160]	; (8000d48 <MX_OCTOSPI2_Init+0xe8>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
  hospi2.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000cac:	4b26      	ldr	r3, [pc, #152]	; (8000d48 <MX_OCTOSPI2_Init+0xe8>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]
  hospi2.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000cb2:	4b25      	ldr	r3, [pc, #148]	; (8000d48 <MX_OCTOSPI2_Init+0xe8>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	621a      	str	r2, [r3, #32]
  hospi2.Init.ClockPrescaler = 4;
 8000cb8:	4b23      	ldr	r3, [pc, #140]	; (8000d48 <MX_OCTOSPI2_Init+0xe8>)
 8000cba:	2204      	movs	r2, #4
 8000cbc:	625a      	str	r2, [r3, #36]	; 0x24
  hospi2.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000cbe:	4b22      	ldr	r3, [pc, #136]	; (8000d48 <MX_OCTOSPI2_Init+0xe8>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	629a      	str	r2, [r3, #40]	; 0x28
  hospi2.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8000cc4:	4b20      	ldr	r3, [pc, #128]	; (8000d48 <MX_OCTOSPI2_Init+0xe8>)
 8000cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cca:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi2.Init.ChipSelectBoundary = 0;
 8000ccc:	4b1e      	ldr	r3, [pc, #120]	; (8000d48 <MX_OCTOSPI2_Init+0xe8>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	631a      	str	r2, [r3, #48]	; 0x30
  hospi2.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 8000cd2:	4b1d      	ldr	r3, [pc, #116]	; (8000d48 <MX_OCTOSPI2_Init+0xe8>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	635a      	str	r2, [r3, #52]	; 0x34
  hospi2.Init.MaxTran = 0;
 8000cd8:	4b1b      	ldr	r3, [pc, #108]	; (8000d48 <MX_OCTOSPI2_Init+0xe8>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	639a      	str	r2, [r3, #56]	; 0x38
  hospi2.Init.Refresh = 0;
 8000cde:	4b1a      	ldr	r3, [pc, #104]	; (8000d48 <MX_OCTOSPI2_Init+0xe8>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_OSPI_Init(&hospi2) != HAL_OK)
 8000ce4:	4818      	ldr	r0, [pc, #96]	; (8000d48 <MX_OCTOSPI2_Init+0xe8>)
 8000ce6:	f002 f84d 	bl	8002d84 <HAL_OSPI_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_OCTOSPI2_Init+0x94>
  {
    Error_Handler();
 8000cf0:	f000 fb1c 	bl	800132c <Error_Handler>
  }
  sOspiManagerCfg.ClkPort = 2;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	60bb      	str	r3, [r7, #8]
  sOspiManagerCfg.DQSPort = 2;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	60fb      	str	r3, [r7, #12]
  sOspiManagerCfg.NCSPort = 2;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	613b      	str	r3, [r7, #16]
  sOspiManagerCfg.IOLowPort = HAL_OSPIM_IOPORT_2_LOW;
 8000d00:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <MX_OCTOSPI2_Init+0xf0>)
 8000d02:	617b      	str	r3, [r7, #20]
  sOspiManagerCfg.IOHighPort = HAL_OSPIM_IOPORT_2_HIGH;
 8000d04:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <MX_OCTOSPI2_Init+0xf4>)
 8000d06:	61bb      	str	r3, [r7, #24]
  if (HAL_OSPIM_Config(&hospi2, &sOspiManagerCfg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d08:	f107 0308 	add.w	r3, r7, #8
 8000d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000d10:	4619      	mov	r1, r3
 8000d12:	480d      	ldr	r0, [pc, #52]	; (8000d48 <MX_OCTOSPI2_Init+0xe8>)
 8000d14:	f002 f976 	bl	8003004 <HAL_OSPIM_Config>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <MX_OCTOSPI2_Init+0xc2>
  {
    Error_Handler();
 8000d1e:	f000 fb05 	bl	800132c <Error_Handler>
  }
  HAL_OSPI_DLYB_Cfg_Struct.Units = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	603b      	str	r3, [r7, #0]
  HAL_OSPI_DLYB_Cfg_Struct.PhaseSel = 0;
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
  if (HAL_OSPI_DLYB_SetConfig(&hospi2, &HAL_OSPI_DLYB_Cfg_Struct) != HAL_OK)
 8000d2a:	463b      	mov	r3, r7
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	4806      	ldr	r0, [pc, #24]	; (8000d48 <MX_OCTOSPI2_Init+0xe8>)
 8000d30:	f002 ff54 	bl	8003bdc <HAL_OSPI_DLYB_SetConfig>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <MX_OCTOSPI2_Init+0xde>
  {
    Error_Handler();
 8000d3a:	f000 faf7 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI2_Init 2 */

  /* USER CODE END OCTOSPI2_Init 2 */

}
 8000d3e:	bf00      	nop
 8000d40:	3720      	adds	r7, #32
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000228 	.word	0x20000228
 8000d4c:	420d2400 	.word	0x420d2400
 8000d50:	00010002 	.word	0x00010002
 8000d54:	01000002 	.word	0x01000002

08000d58 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d68:	4b30      	ldr	r3, [pc, #192]	; (8000e2c <MX_SPI2_Init+0xd4>)
 8000d6a:	4a31      	ldr	r2, [pc, #196]	; (8000e30 <MX_SPI2_Init+0xd8>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d6e:	4b2f      	ldr	r3, [pc, #188]	; (8000e2c <MX_SPI2_Init+0xd4>)
 8000d70:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000d74:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d76:	4b2d      	ldr	r3, [pc, #180]	; (8000e2c <MX_SPI2_Init+0xd4>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d7c:	4b2b      	ldr	r3, [pc, #172]	; (8000e2c <MX_SPI2_Init+0xd4>)
 8000d7e:	2203      	movs	r2, #3
 8000d80:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d82:	4b2a      	ldr	r3, [pc, #168]	; (8000e2c <MX_SPI2_Init+0xd4>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d88:	4b28      	ldr	r3, [pc, #160]	; (8000e2c <MX_SPI2_Init+0xd4>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d8e:	4b27      	ldr	r3, [pc, #156]	; (8000e2c <MX_SPI2_Init+0xd4>)
 8000d90:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000d94:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d96:	4b25      	ldr	r3, [pc, #148]	; (8000e2c <MX_SPI2_Init+0xd4>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d9c:	4b23      	ldr	r3, [pc, #140]	; (8000e2c <MX_SPI2_Init+0xd4>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000da2:	4b22      	ldr	r3, [pc, #136]	; (8000e2c <MX_SPI2_Init+0xd4>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000da8:	4b20      	ldr	r3, [pc, #128]	; (8000e2c <MX_SPI2_Init+0xd4>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8000dae:	4b1f      	ldr	r3, [pc, #124]	; (8000e2c <MX_SPI2_Init+0xd4>)
 8000db0:	2207      	movs	r2, #7
 8000db2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000db4:	4b1d      	ldr	r3, [pc, #116]	; (8000e2c <MX_SPI2_Init+0xd4>)
 8000db6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dba:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <MX_SPI2_Init+0xd4>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <MX_SPI2_Init+0xd4>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000dc8:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <MX_SPI2_Init+0xd4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000dce:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <MX_SPI2_Init+0xd4>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000dd4:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <MX_SPI2_Init+0xd4>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000dda:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <MX_SPI2_Init+0xd4>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <MX_SPI2_Init+0xd4>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	659a      	str	r2, [r3, #88]	; 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <MX_SPI2_Init+0xd4>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <MX_SPI2_Init+0xd4>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000df2:	480e      	ldr	r0, [pc, #56]	; (8000e2c <MX_SPI2_Init+0xd4>)
 8000df4:	f007 f86a 	bl	8007ecc <HAL_SPI_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_SPI2_Init+0xaa>
  {
    Error_Handler();
 8000dfe:	f000 fa95 	bl	800132c <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8000e06:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e0a:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	4619      	mov	r1, r3
 8000e14:	4805      	ldr	r0, [pc, #20]	; (8000e2c <MX_SPI2_Init+0xd4>)
 8000e16:	f007 f96c 	bl	80080f2 <HAL_SPIEx_SetConfigAutonomousMode>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <MX_SPI2_Init+0xcc>
  {
    Error_Handler();
 8000e20:	f000 fa84 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000e24:	bf00      	nop
 8000e26:	3710      	adds	r7, #16
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000284 	.word	0x20000284
 8000e30:	40003800 	.word	0x40003800

08000e34 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000e38:	4b22      	ldr	r3, [pc, #136]	; (8000ec4 <MX_UART4_Init+0x90>)
 8000e3a:	4a23      	ldr	r2, [pc, #140]	; (8000ec8 <MX_UART4_Init+0x94>)
 8000e3c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000e3e:	4b21      	ldr	r3, [pc, #132]	; (8000ec4 <MX_UART4_Init+0x90>)
 8000e40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e44:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000e46:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <MX_UART4_Init+0x90>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000e4c:	4b1d      	ldr	r3, [pc, #116]	; (8000ec4 <MX_UART4_Init+0x90>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000e52:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <MX_UART4_Init+0x90>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000e58:	4b1a      	ldr	r3, [pc, #104]	; (8000ec4 <MX_UART4_Init+0x90>)
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5e:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <MX_UART4_Init+0x90>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e64:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <MX_UART4_Init+0x90>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e6a:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <MX_UART4_Init+0x90>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e70:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <MX_UART4_Init+0x90>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e76:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <MX_UART4_Init+0x90>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000e7c:	4811      	ldr	r0, [pc, #68]	; (8000ec4 <MX_UART4_Init+0x90>)
 8000e7e:	f008 fc7f 	bl	8009780 <HAL_UART_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000e88:	f000 fa50 	bl	800132c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e8c:	2100      	movs	r1, #0
 8000e8e:	480d      	ldr	r0, [pc, #52]	; (8000ec4 <MX_UART4_Init+0x90>)
 8000e90:	f009 f856 	bl	8009f40 <HAL_UARTEx_SetTxFifoThreshold>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000e9a:	f000 fa47 	bl	800132c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	4808      	ldr	r0, [pc, #32]	; (8000ec4 <MX_UART4_Init+0x90>)
 8000ea2:	f009 f88b 	bl	8009fbc <HAL_UARTEx_SetRxFifoThreshold>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000eac:	f000 fa3e 	bl	800132c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000eb0:	4804      	ldr	r0, [pc, #16]	; (8000ec4 <MX_UART4_Init+0x90>)
 8000eb2:	f009 f80c 	bl	8009ece <HAL_UARTEx_DisableFifoMode>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000ebc:	f000 fa36 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ec0:	bf00      	nop
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	20000314 	.word	0x20000314
 8000ec8:	40004c00 	.word	0x40004c00

08000ecc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ed0:	4b22      	ldr	r3, [pc, #136]	; (8000f5c <MX_USART1_UART_Init+0x90>)
 8000ed2:	4a23      	ldr	r2, [pc, #140]	; (8000f60 <MX_USART1_UART_Init+0x94>)
 8000ed4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ed6:	4b21      	ldr	r3, [pc, #132]	; (8000f5c <MX_USART1_UART_Init+0x90>)
 8000ed8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000edc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ede:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <MX_USART1_UART_Init+0x90>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ee4:	4b1d      	ldr	r3, [pc, #116]	; (8000f5c <MX_USART1_UART_Init+0x90>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000eea:	4b1c      	ldr	r3, [pc, #112]	; (8000f5c <MX_USART1_UART_Init+0x90>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ef0:	4b1a      	ldr	r3, [pc, #104]	; (8000f5c <MX_USART1_UART_Init+0x90>)
 8000ef2:	220c      	movs	r2, #12
 8000ef4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ef6:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <MX_USART1_UART_Init+0x90>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000efc:	4b17      	ldr	r3, [pc, #92]	; (8000f5c <MX_USART1_UART_Init+0x90>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f02:	4b16      	ldr	r3, [pc, #88]	; (8000f5c <MX_USART1_UART_Init+0x90>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f08:	4b14      	ldr	r3, [pc, #80]	; (8000f5c <MX_USART1_UART_Init+0x90>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f0e:	4b13      	ldr	r3, [pc, #76]	; (8000f5c <MX_USART1_UART_Init+0x90>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f14:	4811      	ldr	r0, [pc, #68]	; (8000f5c <MX_USART1_UART_Init+0x90>)
 8000f16:	f008 fc33 	bl	8009780 <HAL_UART_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f20:	f000 fa04 	bl	800132c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f24:	2100      	movs	r1, #0
 8000f26:	480d      	ldr	r0, [pc, #52]	; (8000f5c <MX_USART1_UART_Init+0x90>)
 8000f28:	f009 f80a 	bl	8009f40 <HAL_UARTEx_SetTxFifoThreshold>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f32:	f000 f9fb 	bl	800132c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f36:	2100      	movs	r1, #0
 8000f38:	4808      	ldr	r0, [pc, #32]	; (8000f5c <MX_USART1_UART_Init+0x90>)
 8000f3a:	f009 f83f 	bl	8009fbc <HAL_UARTEx_SetRxFifoThreshold>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f44:	f000 f9f2 	bl	800132c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f48:	4804      	ldr	r0, [pc, #16]	; (8000f5c <MX_USART1_UART_Init+0x90>)
 8000f4a:	f008 ffc0 	bl	8009ece <HAL_UARTEx_DisableFifoMode>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f54:	f000 f9ea 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	200003a4 	.word	0x200003a4
 8000f60:	40013800 	.word	0x40013800

08000f64 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6a:	463b      	mov	r3, r7
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
 8000f78:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000f7a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000f7e:	f7ff fc43 	bl	8000808 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000f82:	2001      	movs	r0, #1
 8000f84:	f7ff fc24 	bl	80007d0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000f88:	2002      	movs	r0, #2
 8000f8a:	f7ff fc21 	bl	80007d0 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PA15 (JTDI)   ------> UCPD1_CC1
  PB15   ------> UCPD1_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f92:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000f94:	2303      	movs	r3, #3
 8000f96:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4809      	ldr	r0, [pc, #36]	; (8000fc8 <MX_UCPD1_Init+0x64>)
 8000fa2:	f009 fa01 	bl	800a3a8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000fa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000faa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000fac:	2303      	movs	r3, #3
 8000fae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4804      	ldr	r0, [pc, #16]	; (8000fcc <MX_UCPD1_Init+0x68>)
 8000fba:	f009 f9f5 	bl	800a3a8 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000fbe:	bf00      	nop
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	42020000 	.word	0x42020000
 8000fcc:	42020400 	.word	0x42020400

08000fd0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000fd6:	4a13      	ldr	r2, [pc, #76]	; (8001024 <MX_USB_OTG_FS_PCD_Init+0x54>)
 8000fd8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000fdc:	2206      	movs	r2, #6
 8000fde:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000fe2:	2202      	movs	r2, #2
 8000fe4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000ffe:	4b08      	ldr	r3, [pc, #32]	; (8001020 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001000:	2200      	movs	r2, #0
 8001002:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8001006:	2200      	movs	r2, #0
 8001008:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800100c:	f002 fe2e 	bl	8003c6c <HAL_PCD_Init>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_USB_OTG_FS_PCD_Init+0x4a>
  {
    Error_Handler();
 8001016:	f000 f989 	bl	800132c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000434 	.word	0x20000434
 8001024:	42040000 	.word	0x42040000

08001028 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b08e      	sub	sp, #56	; 0x38
 800102c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001032:	2200      	movs	r2, #0
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	605a      	str	r2, [r3, #4]
 8001038:	609a      	str	r2, [r3, #8]
 800103a:	60da      	str	r2, [r3, #12]
 800103c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800103e:	4bb2      	ldr	r3, [pc, #712]	; (8001308 <MX_GPIO_Init+0x2e0>)
 8001040:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001044:	4ab0      	ldr	r2, [pc, #704]	; (8001308 <MX_GPIO_Init+0x2e0>)
 8001046:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800104a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800104e:	4bae      	ldr	r3, [pc, #696]	; (8001308 <MX_GPIO_Init+0x2e0>)
 8001050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001058:	623b      	str	r3, [r7, #32]
 800105a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105c:	4baa      	ldr	r3, [pc, #680]	; (8001308 <MX_GPIO_Init+0x2e0>)
 800105e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001062:	4aa9      	ldr	r2, [pc, #676]	; (8001308 <MX_GPIO_Init+0x2e0>)
 8001064:	f043 0304 	orr.w	r3, r3, #4
 8001068:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800106c:	4ba6      	ldr	r3, [pc, #664]	; (8001308 <MX_GPIO_Init+0x2e0>)
 800106e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	61fb      	str	r3, [r7, #28]
 8001078:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	4ba3      	ldr	r3, [pc, #652]	; (8001308 <MX_GPIO_Init+0x2e0>)
 800107c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001080:	4aa1      	ldr	r2, [pc, #644]	; (8001308 <MX_GPIO_Init+0x2e0>)
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800108a:	4b9f      	ldr	r3, [pc, #636]	; (8001308 <MX_GPIO_Init+0x2e0>)
 800108c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	61bb      	str	r3, [r7, #24]
 8001096:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001098:	4b9b      	ldr	r3, [pc, #620]	; (8001308 <MX_GPIO_Init+0x2e0>)
 800109a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800109e:	4a9a      	ldr	r2, [pc, #616]	; (8001308 <MX_GPIO_Init+0x2e0>)
 80010a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80010a8:	4b97      	ldr	r3, [pc, #604]	; (8001308 <MX_GPIO_Init+0x2e0>)
 80010aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b2:	617b      	str	r3, [r7, #20]
 80010b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010b6:	4b94      	ldr	r3, [pc, #592]	; (8001308 <MX_GPIO_Init+0x2e0>)
 80010b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010bc:	4a92      	ldr	r2, [pc, #584]	; (8001308 <MX_GPIO_Init+0x2e0>)
 80010be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80010c6:	4b90      	ldr	r3, [pc, #576]	; (8001308 <MX_GPIO_Init+0x2e0>)
 80010c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d0:	613b      	str	r3, [r7, #16]
 80010d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d4:	4b8c      	ldr	r3, [pc, #560]	; (8001308 <MX_GPIO_Init+0x2e0>)
 80010d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010da:	4a8b      	ldr	r2, [pc, #556]	; (8001308 <MX_GPIO_Init+0x2e0>)
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80010e4:	4b88      	ldr	r3, [pc, #544]	; (8001308 <MX_GPIO_Init+0x2e0>)
 80010e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010ea:	f003 0302 	and.w	r3, r3, #2
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f2:	4b85      	ldr	r3, [pc, #532]	; (8001308 <MX_GPIO_Init+0x2e0>)
 80010f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010f8:	4a83      	ldr	r2, [pc, #524]	; (8001308 <MX_GPIO_Init+0x2e0>)
 80010fa:	f043 0308 	orr.w	r3, r3, #8
 80010fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001102:	4b81      	ldr	r3, [pc, #516]	; (8001308 <MX_GPIO_Init+0x2e0>)
 8001104:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001108:	f003 0308 	and.w	r3, r3, #8
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001110:	4b7d      	ldr	r3, [pc, #500]	; (8001308 <MX_GPIO_Init+0x2e0>)
 8001112:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001116:	4a7c      	ldr	r2, [pc, #496]	; (8001308 <MX_GPIO_Init+0x2e0>)
 8001118:	f043 0310 	orr.w	r3, r3, #16
 800111c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001120:	4b79      	ldr	r3, [pc, #484]	; (8001308 <MX_GPIO_Init+0x2e0>)
 8001122:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001126:	f003 0310 	and.w	r3, r3, #16
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800112e:	4b76      	ldr	r3, [pc, #472]	; (8001308 <MX_GPIO_Init+0x2e0>)
 8001130:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001134:	4a74      	ldr	r2, [pc, #464]	; (8001308 <MX_GPIO_Init+0x2e0>)
 8001136:	f043 0320 	orr.w	r3, r3, #32
 800113a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800113e:	4b72      	ldr	r3, [pc, #456]	; (8001308 <MX_GPIO_Init+0x2e0>)
 8001140:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001144:	f003 0320 	and.w	r3, r3, #32
 8001148:	603b      	str	r3, [r7, #0]
 800114a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_PWR_GPIO_Port, UCPD_PWR_Pin, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	2120      	movs	r1, #32
 8001150:	486e      	ldr	r0, [pc, #440]	; (800130c <MX_GPIO_Init+0x2e4>)
 8001152:	f001 fb2d 	bl	80027b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin, GPIO_PIN_RESET);
 8001156:	2200      	movs	r2, #0
 8001158:	21c2      	movs	r1, #194	; 0xc2
 800115a:	486d      	ldr	r0, [pc, #436]	; (8001310 <MX_GPIO_Init+0x2e8>)
 800115c:	f001 fb28 	bl	80027b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WRLS_WKUP_B_GPIO_Port, WRLS_WKUP_B_Pin, GPIO_PIN_RESET);
 8001160:	2200      	movs	r2, #0
 8001162:	2140      	movs	r1, #64	; 0x40
 8001164:	486b      	ldr	r0, [pc, #428]	; (8001314 <MX_GPIO_Init+0x2ec>)
 8001166:	f001 fb23 	bl	80027b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin, GPIO_PIN_RESET);
 800116a:	2200      	movs	r2, #0
 800116c:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8001170:	4869      	ldr	r0, [pc, #420]	; (8001318 <MX_GPIO_Init+0x2f0>)
 8001172:	f001 fb1d 	bl	80027b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : WRLS_FLOW_Pin Mems_VLX_GPIO_Pin Mems_INT_LPS22HH_Pin */
  GPIO_InitStruct.Pin = WRLS_FLOW_Pin|Mems_VLX_GPIO_Pin|Mems_INT_LPS22HH_Pin;
 8001176:	f248 0324 	movw	r3, #32804	; 0x8024
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800117c:	2300      	movs	r3, #0
 800117e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001188:	4619      	mov	r1, r3
 800118a:	4862      	ldr	r0, [pc, #392]	; (8001314 <MX_GPIO_Init+0x2ec>)
 800118c:	f001 f938 	bl	8002400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH3_BOOT0_Pin */
  GPIO_InitStruct.Pin = PH3_BOOT0_Pin;
 8001190:	2308      	movs	r3, #8
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001194:	2300      	movs	r3, #0
 8001196:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	2300      	movs	r3, #0
 800119a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PH3_BOOT0_GPIO_Port, &GPIO_InitStruct);
 800119c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011a0:	4619      	mov	r1, r3
 80011a2:	485b      	ldr	r0, [pc, #364]	; (8001310 <MX_GPIO_Init+0x2e8>)
 80011a4:	f001 f92c 	bl	8002400 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_PWR_Pin */
  GPIO_InitStruct.Pin = UCPD_PWR_Pin;
 80011a8:	2320      	movs	r3, #32
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ac:	2301      	movs	r3, #1
 80011ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(UCPD_PWR_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011bc:	4619      	mov	r1, r3
 80011be:	4853      	ldr	r0, [pc, #332]	; (800130c <MX_GPIO_Init+0x2e4>)
 80011c0:	f001 f91e 	bl	8002400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH13_Pin */
  GPIO_InitStruct.Pin = PH13_Pin;
 80011c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011ca:	2303      	movs	r3, #3
 80011cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PH13_GPIO_Port, &GPIO_InitStruct);
 80011d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d6:	4619      	mov	r1, r3
 80011d8:	484d      	ldr	r0, [pc, #308]	; (8001310 <MX_GPIO_Init+0x2e8>)
 80011da:	f001 f911 	bl	8002400 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_Button_Pin */
  GPIO_InitStruct.Pin = USER_Button_Pin;
 80011de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Button_GPIO_Port, &GPIO_InitStruct);
 80011ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f0:	4619      	mov	r1, r3
 80011f2:	484a      	ldr	r0, [pc, #296]	; (800131c <MX_GPIO_Init+0x2f4>)
 80011f4:	f001 f904 	bl	8002400 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED_Pin LED_GREEN_Pin Mems_VL53_xshut_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_GREEN_Pin|Mems_VL53_xshut_Pin;
 80011f8:	23c2      	movs	r3, #194	; 0xc2
 80011fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fc:	2301      	movs	r3, #1
 80011fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	2300      	movs	r3, #0
 8001206:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120c:	4619      	mov	r1, r3
 800120e:	4840      	ldr	r0, [pc, #256]	; (8001310 <MX_GPIO_Init+0x2e8>)
 8001210:	f001 f8f6 	bl	8002400 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_CCK1_Pin */
  GPIO_InitStruct.Pin = MIC_CCK1_Pin;
 8001214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121a:	2302      	movs	r3, #2
 800121c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 8001226:	2306      	movs	r3, #6
 8001228:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_CCK1_GPIO_Port, &GPIO_InitStruct);
 800122a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800122e:	4619      	mov	r1, r3
 8001230:	4839      	ldr	r0, [pc, #228]	; (8001318 <MX_GPIO_Init+0x2f0>)
 8001232:	f001 f8e5 	bl	8002400 <HAL_GPIO_Init>

  /*Configure GPIO pin : WRLS_WKUP_B_Pin */
  GPIO_InitStruct.Pin = WRLS_WKUP_B_Pin;
 8001236:	2340      	movs	r3, #64	; 0x40
 8001238:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123a:	2301      	movs	r3, #1
 800123c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001242:	2300      	movs	r3, #0
 8001244:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WRLS_WKUP_B_GPIO_Port, &GPIO_InitStruct);
 8001246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124a:	4619      	mov	r1, r3
 800124c:	4831      	ldr	r0, [pc, #196]	; (8001314 <MX_GPIO_Init+0x2ec>)
 800124e:	f001 f8d7 	bl	8002400 <HAL_GPIO_Init>

  /*Configure GPIO pins : WRLS_NOTIFY_Pin Mems_INT_IIS2MDC_Pin USB_IANA_Pin Mems_INT_IIS2MDCD9_Pin */
  GPIO_InitStruct.Pin = WRLS_NOTIFY_Pin|Mems_INT_IIS2MDC_Pin|USB_IANA_Pin|Mems_INT_IIS2MDCD9_Pin;
 8001252:	f44f 43cc 	mov.w	r3, #26112	; 0x6600
 8001256:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001258:	2300      	movs	r3, #0
 800125a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125c:	2300      	movs	r3, #0
 800125e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001260:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001264:	4619      	mov	r1, r3
 8001266:	482e      	ldr	r0, [pc, #184]	; (8001320 <MX_GPIO_Init+0x2f8>)
 8001268:	f001 f8ca 	bl	8002400 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_UCPD_FLT_Pin Mems_ISM330DLC_INT1_Pin */
  GPIO_InitStruct.Pin = USB_UCPD_FLT_Pin|Mems_ISM330DLC_INT1_Pin;
 800126c:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001272:	2300      	movs	r3, #0
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800127a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800127e:	4619      	mov	r1, r3
 8001280:	4828      	ldr	r0, [pc, #160]	; (8001324 <MX_GPIO_Init+0x2fc>)
 8001282:	f001 f8bd 	bl	8002400 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_SENSE_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_SENSE_Pin;
 8001286:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800128c:	2300      	movs	r3, #0
 800128e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001290:	2300      	movs	r3, #0
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8001294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001298:	4619      	mov	r1, r3
 800129a:	481f      	ldr	r0, [pc, #124]	; (8001318 <MX_GPIO_Init+0x2f0>)
 800129c:	f001 f8b0 	bl	8002400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012a0:	2304      	movs	r3, #4
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2300      	movs	r3, #0
 80012ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012b0:	2301      	movs	r3, #1
 80012b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012b8:	4619      	mov	r1, r3
 80012ba:	481b      	ldr	r0, [pc, #108]	; (8001328 <MX_GPIO_Init+0x300>)
 80012bc:	f001 f8a0 	bl	8002400 <HAL_GPIO_Init>

  /*Configure GPIO pins : Mems_STSAFE_RESET_Pin WRLS_WKUP_W_Pin */
  GPIO_InitStruct.Pin = Mems_STSAFE_RESET_Pin|WRLS_WKUP_W_Pin;
 80012c0:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 80012c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c6:	2301      	movs	r3, #1
 80012c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	2300      	movs	r3, #0
 80012d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d6:	4619      	mov	r1, r3
 80012d8:	480f      	ldr	r0, [pc, #60]	; (8001318 <MX_GPIO_Init+0x2f0>)
 80012da:	f001 f891 	bl	8002400 <HAL_GPIO_Init>

  /*Configure GPIO pin : MIC_SDIN0_Pin */
  GPIO_InitStruct.Pin = MIC_SDIN0_Pin;
 80012de:	2302      	movs	r3, #2
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e2:	2302      	movs	r3, #2
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_MDF1;
 80012ee:	2306      	movs	r3, #6
 80012f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(MIC_SDIN0_GPIO_Port, &GPIO_InitStruct);
 80012f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f6:	4619      	mov	r1, r3
 80012f8:	4804      	ldr	r0, [pc, #16]	; (800130c <MX_GPIO_Init+0x2e4>)
 80012fa:	f001 f881 	bl	8002400 <HAL_GPIO_Init>

}
 80012fe:	bf00      	nop
 8001300:	3738      	adds	r7, #56	; 0x38
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	46020c00 	.word	0x46020c00
 800130c:	42020400 	.word	0x42020400
 8001310:	42021c00 	.word	0x42021c00
 8001314:	42021800 	.word	0x42021800
 8001318:	42021400 	.word	0x42021400
 800131c:	42020800 	.word	0x42020800
 8001320:	42020c00 	.word	0x42020c00
 8001324:	42021000 	.word	0x42021000
 8001328:	42020000 	.word	0x42020000

0800132c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001330:	b672      	cpsid	i
}
 8001332:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001334:	e7fe      	b.n	8001334 <Error_Handler+0x8>
	...

08001338 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800133e:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <HAL_MspInit+0x30>)
 8001340:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001344:	4a08      	ldr	r2, [pc, #32]	; (8001368 <HAL_MspInit+0x30>)
 8001346:	f043 0304 	orr.w	r3, r3, #4
 800134a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_MspInit+0x30>)
 8001350:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001354:	f003 0304 	and.w	r3, r3, #4
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	46020c00 	.word	0x46020c00

0800136c <HAL_MDF_MspInit>:
* This function configures the hardware resources used in this example
* @param hmdf: MDF handle pointer
* @retval None
*/
void HAL_MDF_MspInit(MDF_HandleTypeDef* hmdf)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b0bc      	sub	sp, #240	; 0xf0
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001384:	f107 0310 	add.w	r3, r7, #16
 8001388:	22c8      	movs	r2, #200	; 0xc8
 800138a:	2100      	movs	r1, #0
 800138c:	4618      	mov	r0, r3
 800138e:	f009 fb6d 	bl	800aa6c <memset>
  if(IS_ADF_INSTANCE(hmdf->Instance))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a27      	ldr	r2, [pc, #156]	; (8001434 <HAL_MDF_MspInit+0xc8>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d146      	bne.n	800142a <HAL_MDF_MspInit+0xbe>

  /* USER CODE END ADF1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADF1;
 800139c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013a0:	f04f 0300 	mov.w	r3, #0
 80013a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.Adf1ClockSelection = RCC_ADF1CLKSOURCE_HCLK;
 80013a8:	2300      	movs	r3, #0
 80013aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013ae:	f107 0310 	add.w	r3, r7, #16
 80013b2:	4618      	mov	r0, r3
 80013b4:	f004 f940 	bl	8005638 <HAL_RCCEx_PeriphCLKConfig>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <HAL_MDF_MspInit+0x56>
    {
      Error_Handler();
 80013be:	f7ff ffb5 	bl	800132c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADF1_CLK_ENABLE();
 80013c2:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <HAL_MDF_MspInit+0xcc>)
 80013c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013c8:	4a1b      	ldr	r2, [pc, #108]	; (8001438 <HAL_MDF_MspInit+0xcc>)
 80013ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80013d2:	4b19      	ldr	r3, [pc, #100]	; (8001438 <HAL_MDF_MspInit+0xcc>)
 80013d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013e0:	4b15      	ldr	r3, [pc, #84]	; (8001438 <HAL_MDF_MspInit+0xcc>)
 80013e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013e6:	4a14      	ldr	r2, [pc, #80]	; (8001438 <HAL_MDF_MspInit+0xcc>)
 80013e8:	f043 0310 	orr.w	r3, r3, #16
 80013ec:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <HAL_MDF_MspInit+0xcc>)
 80013f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013f6:	f003 0310 	and.w	r3, r3, #16
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
    /**ADF1 GPIO Configuration
    PE10     ------> ADF1_SDI0
    PE9     ------> ADF1_CCK0
    */
    GPIO_InitStruct.Pin = MIC_SDINx_Pin|MIC_CCK0_Pin;
 80013fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001402:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001412:	2300      	movs	r3, #0
 8001414:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF3_ADF1;
 8001418:	2303      	movs	r3, #3
 800141a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800141e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001422:	4619      	mov	r1, r3
 8001424:	4805      	ldr	r0, [pc, #20]	; (800143c <HAL_MDF_MspInit+0xd0>)
 8001426:	f000 ffeb 	bl	8002400 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADF1_MspInit 1 */

  /* USER CODE END ADF1_MspInit 1 */
  }

}
 800142a:	bf00      	nop
 800142c:	37f0      	adds	r7, #240	; 0xf0
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	46024080 	.word	0x46024080
 8001438:	46020c00 	.word	0x46020c00
 800143c:	42021000 	.word	0x42021000

08001440 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b0be      	sub	sp, #248	; 0xf8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001448:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
 8001450:	605a      	str	r2, [r3, #4]
 8001452:	609a      	str	r2, [r3, #8]
 8001454:	60da      	str	r2, [r3, #12]
 8001456:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001458:	f107 0318 	add.w	r3, r7, #24
 800145c:	22c8      	movs	r2, #200	; 0xc8
 800145e:	2100      	movs	r1, #0
 8001460:	4618      	mov	r0, r3
 8001462:	f009 fb03 	bl	800aa6c <memset>
  if(hi2c->Instance==I2C1)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a4d      	ldr	r2, [pc, #308]	; (80015a0 <HAL_I2C_MspInit+0x160>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d147      	bne.n	8001500 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001470:	f04f 0240 	mov.w	r2, #64	; 0x40
 8001474:	f04f 0300 	mov.w	r3, #0
 8001478:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800147c:	2300      	movs	r3, #0
 800147e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001482:	f107 0318 	add.w	r3, r7, #24
 8001486:	4618      	mov	r0, r3
 8001488:	f004 f8d6 	bl	8005638 <HAL_RCCEx_PeriphCLKConfig>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001492:	f7ff ff4b 	bl	800132c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001496:	4b43      	ldr	r3, [pc, #268]	; (80015a4 <HAL_I2C_MspInit+0x164>)
 8001498:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800149c:	4a41      	ldr	r2, [pc, #260]	; (80015a4 <HAL_I2C_MspInit+0x164>)
 800149e:	f043 0302 	orr.w	r3, r3, #2
 80014a2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80014a6:	4b3f      	ldr	r3, [pc, #252]	; (80015a4 <HAL_I2C_MspInit+0x164>)
 80014a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB9     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_8;
 80014b4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014bc:	2312      	movs	r3, #18
 80014be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014ce:	2304      	movs	r3, #4
 80014d0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80014d8:	4619      	mov	r1, r3
 80014da:	4833      	ldr	r0, [pc, #204]	; (80015a8 <HAL_I2C_MspInit+0x168>)
 80014dc:	f000 ff90 	bl	8002400 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014e0:	4b30      	ldr	r3, [pc, #192]	; (80015a4 <HAL_I2C_MspInit+0x164>)
 80014e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80014e6:	4a2f      	ldr	r2, [pc, #188]	; (80015a4 <HAL_I2C_MspInit+0x164>)
 80014e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014ec:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80014f0:	4b2c      	ldr	r3, [pc, #176]	; (80015a4 <HAL_I2C_MspInit+0x164>)
 80014f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80014f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80014fe:	e04a      	b.n	8001596 <HAL_I2C_MspInit+0x156>
  else if(hi2c->Instance==I2C2)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a29      	ldr	r2, [pc, #164]	; (80015ac <HAL_I2C_MspInit+0x16c>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d145      	bne.n	8001596 <HAL_I2C_MspInit+0x156>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800150a:	f04f 0280 	mov.w	r2, #128	; 0x80
 800150e:	f04f 0300 	mov.w	r3, #0
 8001512:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001516:	2300      	movs	r3, #0
 8001518:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800151c:	f107 0318 	add.w	r3, r7, #24
 8001520:	4618      	mov	r0, r3
 8001522:	f004 f889 	bl	8005638 <HAL_RCCEx_PeriphCLKConfig>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 800152c:	f7ff fefe 	bl	800132c <Error_Handler>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001530:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <HAL_I2C_MspInit+0x164>)
 8001532:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001536:	4a1b      	ldr	r2, [pc, #108]	; (80015a4 <HAL_I2C_MspInit+0x164>)
 8001538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800153c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001540:	4b18      	ldr	r3, [pc, #96]	; (80015a4 <HAL_I2C_MspInit+0x164>)
 8001542:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800154e:	2330      	movs	r3, #48	; 0x30
 8001550:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001554:	2312      	movs	r3, #18
 8001556:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001560:	2300      	movs	r3, #0
 8001562:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001566:	2304      	movs	r3, #4
 8001568:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800156c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001570:	4619      	mov	r1, r3
 8001572:	480f      	ldr	r0, [pc, #60]	; (80015b0 <HAL_I2C_MspInit+0x170>)
 8001574:	f000 ff44 	bl	8002400 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001578:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <HAL_I2C_MspInit+0x164>)
 800157a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800157e:	4a09      	ldr	r2, [pc, #36]	; (80015a4 <HAL_I2C_MspInit+0x164>)
 8001580:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001584:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001588:	4b06      	ldr	r3, [pc, #24]	; (80015a4 <HAL_I2C_MspInit+0x164>)
 800158a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800158e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001592:	60bb      	str	r3, [r7, #8]
 8001594:	68bb      	ldr	r3, [r7, #8]
}
 8001596:	bf00      	nop
 8001598:	37f8      	adds	r7, #248	; 0xf8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40005400 	.word	0x40005400
 80015a4:	46020c00 	.word	0x46020c00
 80015a8:	42020400 	.word	0x42020400
 80015ac:	40005800 	.word	0x40005800
 80015b0:	42021c00 	.word	0x42021c00

080015b4 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b0c6      	sub	sp, #280	; 0x118
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80015be:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015c2:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015d4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80015d8:	22c8      	movs	r2, #200	; 0xc8
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f009 fa45 	bl	800aa6c <memset>
  if(hospi->Instance==OCTOSPI1)
 80015e2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80015e6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a96      	ldr	r2, [pc, #600]	; (8001848 <HAL_OSPI_MspInit+0x294>)
 80015f0:	4293      	cmp	r3, r2
 80015f2:	f040 813b 	bne.w	800186c <HAL_OSPI_MspInit+0x2b8>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 80015f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80015fa:	f04f 0300 	mov.w	r3, #0
 80015fe:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001602:	2300      	movs	r3, #0
 8001604:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001608:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800160c:	4618      	mov	r0, r3
 800160e:	f004 f813 	bl	8005638 <HAL_RCCEx_PeriphCLKConfig>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <HAL_OSPI_MspInit+0x68>
    {
      Error_Handler();
 8001618:	f7ff fe88 	bl	800132c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800161c:	4b8b      	ldr	r3, [pc, #556]	; (800184c <HAL_OSPI_MspInit+0x298>)
 800161e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001622:	4a8a      	ldr	r2, [pc, #552]	; (800184c <HAL_OSPI_MspInit+0x298>)
 8001624:	f043 0310 	orr.w	r3, r3, #16
 8001628:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800162c:	4b87      	ldr	r3, [pc, #540]	; (800184c <HAL_OSPI_MspInit+0x298>)
 800162e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001632:	f003 0310 	and.w	r3, r3, #16
 8001636:	637b      	str	r3, [r7, #52]	; 0x34
 8001638:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800163a:	4b84      	ldr	r3, [pc, #528]	; (800184c <HAL_OSPI_MspInit+0x298>)
 800163c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001640:	4a82      	ldr	r2, [pc, #520]	; (800184c <HAL_OSPI_MspInit+0x298>)
 8001642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001646:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800164a:	4b80      	ldr	r3, [pc, #512]	; (800184c <HAL_OSPI_MspInit+0x298>)
 800164c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001654:	633b      	str	r3, [r7, #48]	; 0x30
 8001656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001658:	4b7c      	ldr	r3, [pc, #496]	; (800184c <HAL_OSPI_MspInit+0x298>)
 800165a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800165e:	4a7b      	ldr	r2, [pc, #492]	; (800184c <HAL_OSPI_MspInit+0x298>)
 8001660:	f043 0310 	orr.w	r3, r3, #16
 8001664:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001668:	4b78      	ldr	r3, [pc, #480]	; (800184c <HAL_OSPI_MspInit+0x298>)
 800166a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800166e:	f003 0310 	and.w	r3, r3, #16
 8001672:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001676:	4b75      	ldr	r3, [pc, #468]	; (800184c <HAL_OSPI_MspInit+0x298>)
 8001678:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800167c:	4a73      	ldr	r2, [pc, #460]	; (800184c <HAL_OSPI_MspInit+0x298>)
 800167e:	f043 0308 	orr.w	r3, r3, #8
 8001682:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001686:	4b71      	ldr	r3, [pc, #452]	; (800184c <HAL_OSPI_MspInit+0x298>)
 8001688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800168c:	f003 0308 	and.w	r3, r3, #8
 8001690:	62bb      	str	r3, [r7, #40]	; 0x28
 8001692:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001694:	4b6d      	ldr	r3, [pc, #436]	; (800184c <HAL_OSPI_MspInit+0x298>)
 8001696:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800169a:	4a6c      	ldr	r2, [pc, #432]	; (800184c <HAL_OSPI_MspInit+0x298>)
 800169c:	f043 0320 	orr.w	r3, r3, #32
 80016a0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016a4:	4b69      	ldr	r3, [pc, #420]	; (800184c <HAL_OSPI_MspInit+0x298>)
 80016a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016aa:	f003 0320 	and.w	r3, r3, #32
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80016b2:	4b66      	ldr	r3, [pc, #408]	; (800184c <HAL_OSPI_MspInit+0x298>)
 80016b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016b8:	4a64      	ldr	r2, [pc, #400]	; (800184c <HAL_OSPI_MspInit+0x298>)
 80016ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016c2:	4b62      	ldr	r3, [pc, #392]	; (800184c <HAL_OSPI_MspInit+0x298>)
 80016c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016cc:	623b      	str	r3, [r7, #32]
 80016ce:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d0:	4b5e      	ldr	r3, [pc, #376]	; (800184c <HAL_OSPI_MspInit+0x298>)
 80016d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016d6:	4a5d      	ldr	r2, [pc, #372]	; (800184c <HAL_OSPI_MspInit+0x298>)
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016e0:	4b5a      	ldr	r3, [pc, #360]	; (800184c <HAL_OSPI_MspInit+0x298>)
 80016e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	61fb      	str	r3, [r7, #28]
 80016ec:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ee:	4b57      	ldr	r3, [pc, #348]	; (800184c <HAL_OSPI_MspInit+0x298>)
 80016f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80016f4:	4a55      	ldr	r2, [pc, #340]	; (800184c <HAL_OSPI_MspInit+0x298>)
 80016f6:	f043 0302 	orr.w	r3, r3, #2
 80016fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80016fe:	4b53      	ldr	r3, [pc, #332]	; (800184c <HAL_OSPI_MspInit+0x298>)
 8001700:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001704:	f003 0202 	and.w	r2, r3, #2
 8001708:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800170c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001716:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800171a:	681b      	ldr	r3, [r3, #0]
    PF6     ------> OCTOSPIM_P1_IO3
    PC3     ------> OCTOSPIM_P1_IO6
    PB10     ------> OCTOSPIM_P1_CLK
    PB11     ------> OCTOSPIM_P1_NCS
    */
    GPIO_InitStruct.Pin = OCTOSPI_R_IO5_Pin;
 800171c:	2301      	movs	r3, #1
 800171e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	2302      	movs	r3, #2
 8001724:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001728:	2300      	movs	r3, #0
 800172a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800172e:	2303      	movs	r3, #3
 8001730:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 8001734:	2303      	movs	r3, #3
 8001736:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_R_IO5_GPIO_Port, &GPIO_InitStruct);
 800173a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800173e:	4619      	mov	r1, r3
 8001740:	4843      	ldr	r0, [pc, #268]	; (8001850 <HAL_OSPI_MspInit+0x29c>)
 8001742:	f000 fe5d 	bl	8002400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_DQS_Pin;
 8001746:	2308      	movs	r3, #8
 8001748:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	2302      	movs	r3, #2
 800174e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001758:	2303      	movs	r3, #3
 800175a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 800175e:	2303      	movs	r3, #3
 8001760:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_R_DQS_GPIO_Port, &GPIO_InitStruct);
 8001764:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001768:	4619      	mov	r1, r3
 800176a:	483a      	ldr	r0, [pc, #232]	; (8001854 <HAL_OSPI_MspInit+0x2a0>)
 800176c:	f000 fe48 	bl	8002400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO7_Pin;
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001776:	2302      	movs	r3, #2
 8001778:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001782:	2303      	movs	r3, #3
 8001784:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001788:	230a      	movs	r3, #10
 800178a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_R_IO7_GPIO_Port, &GPIO_InitStruct);
 800178e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001792:	4619      	mov	r1, r3
 8001794:	4830      	ldr	r0, [pc, #192]	; (8001858 <HAL_OSPI_MspInit+0x2a4>)
 8001796:	f000 fe33 	bl	8002400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO0_Pin|OCTOSPI_R_IO2_Pin|OCTOSPI_R_IO1_Pin|OCTOSPI_R_IO3_Pin;
 800179a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800179e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a2:	2302      	movs	r3, #2
 80017a4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a8:	2300      	movs	r3, #0
 80017aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ae:	2303      	movs	r3, #3
 80017b0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80017b4:	230a      	movs	r3, #10
 80017b6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017ba:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80017be:	4619      	mov	r1, r3
 80017c0:	4826      	ldr	r0, [pc, #152]	; (800185c <HAL_OSPI_MspInit+0x2a8>)
 80017c2:	f000 fe1d 	bl	8002400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO4_Pin;
 80017c6:	2304      	movs	r3, #4
 80017c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017cc:	2302      	movs	r3, #2
 80017ce:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d8:	2303      	movs	r3, #3
 80017da:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80017de:	2303      	movs	r3, #3
 80017e0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_R_IO4_GPIO_Port, &GPIO_InitStruct);
 80017e4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80017e8:	4619      	mov	r1, r3
 80017ea:	481d      	ldr	r0, [pc, #116]	; (8001860 <HAL_OSPI_MspInit+0x2ac>)
 80017ec:	f000 fe08 	bl	8002400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_IO6_Pin;
 80017f0:	2308      	movs	r3, #8
 80017f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f6:	2302      	movs	r3, #2
 80017f8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001802:	2303      	movs	r3, #3
 8001804:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001808:	230a      	movs	r3, #10
 800180a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_R_IO6_GPIO_Port, &GPIO_InitStruct);
 800180e:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001812:	4619      	mov	r1, r3
 8001814:	4813      	ldr	r0, [pc, #76]	; (8001864 <HAL_OSPI_MspInit+0x2b0>)
 8001816:	f000 fdf3 	bl	8002400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OCTOSPI_R_CLK_P_Pin|OCTOSPI_R_NCS_Pin;
 800181a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800181e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182e:	2303      	movs	r3, #3
 8001830:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001834:	230a      	movs	r3, #10
 8001836:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183a:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800183e:	4619      	mov	r1, r3
 8001840:	4809      	ldr	r0, [pc, #36]	; (8001868 <HAL_OSPI_MspInit+0x2b4>)
 8001842:	f000 fddd 	bl	8002400 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI2_MspInit 1 */

  /* USER CODE END OCTOSPI2_MspInit 1 */
  }

}
 8001846:	e0cb      	b.n	80019e0 <HAL_OSPI_MspInit+0x42c>
 8001848:	420d1400 	.word	0x420d1400
 800184c:	46020c00 	.word	0x46020c00
 8001850:	42022000 	.word	0x42022000
 8001854:	42021000 	.word	0x42021000
 8001858:	42020c00 	.word	0x42020c00
 800185c:	42021400 	.word	0x42021400
 8001860:	42021c00 	.word	0x42021c00
 8001864:	42020800 	.word	0x42020800
 8001868:	42020400 	.word	0x42020400
  else if(hospi->Instance==OCTOSPI2)
 800186c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001870:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a5c      	ldr	r2, [pc, #368]	; (80019ec <HAL_OSPI_MspInit+0x438>)
 800187a:	4293      	cmp	r3, r2
 800187c:	f040 80b0 	bne.w	80019e0 <HAL_OSPI_MspInit+0x42c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001880:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001884:	f04f 0300 	mov.w	r3, #0
 8001888:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800188c:	2300      	movs	r3, #0
 800188e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001892:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001896:	4618      	mov	r0, r3
 8001898:	f003 fece 	bl	8005638 <HAL_RCCEx_PeriphCLKConfig>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_OSPI_MspInit+0x2f2>
      Error_Handler();
 80018a2:	f7ff fd43 	bl	800132c <Error_Handler>
    __HAL_RCC_OSPI2_CLK_ENABLE();
 80018a6:	4b52      	ldr	r3, [pc, #328]	; (80019f0 <HAL_OSPI_MspInit+0x43c>)
 80018a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ac:	4a50      	ldr	r2, [pc, #320]	; (80019f0 <HAL_OSPI_MspInit+0x43c>)
 80018ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018b6:	4b4e      	ldr	r3, [pc, #312]	; (80019f0 <HAL_OSPI_MspInit+0x43c>)
 80018b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018bc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80018c0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80018c4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80018ce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80018d2:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80018d4:	4b46      	ldr	r3, [pc, #280]	; (80019f0 <HAL_OSPI_MspInit+0x43c>)
 80018d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018da:	4a45      	ldr	r2, [pc, #276]	; (80019f0 <HAL_OSPI_MspInit+0x43c>)
 80018dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80018e4:	4b42      	ldr	r3, [pc, #264]	; (80019f0 <HAL_OSPI_MspInit+0x43c>)
 80018e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018ea:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80018ee:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80018f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80018fc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001900:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001902:	4b3b      	ldr	r3, [pc, #236]	; (80019f0 <HAL_OSPI_MspInit+0x43c>)
 8001904:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001908:	4a39      	ldr	r2, [pc, #228]	; (80019f0 <HAL_OSPI_MspInit+0x43c>)
 800190a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800190e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001912:	4b37      	ldr	r3, [pc, #220]	; (80019f0 <HAL_OSPI_MspInit+0x43c>)
 8001914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001918:	f003 0280 	and.w	r2, r3, #128	; 0x80
 800191c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001920:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001924:	601a      	str	r2, [r3, #0]
 8001926:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800192a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800192e:	681b      	ldr	r3, [r3, #0]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001930:	4b2f      	ldr	r3, [pc, #188]	; (80019f0 <HAL_OSPI_MspInit+0x43c>)
 8001932:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001936:	4a2e      	ldr	r2, [pc, #184]	; (80019f0 <HAL_OSPI_MspInit+0x43c>)
 8001938:	f043 0320 	orr.w	r3, r3, #32
 800193c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001940:	4b2b      	ldr	r3, [pc, #172]	; (80019f0 <HAL_OSPI_MspInit+0x43c>)
 8001942:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001946:	f003 0220 	and.w	r2, r3, #32
 800194a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800194e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001958:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800195c:	681b      	ldr	r3, [r3, #0]
    GPIO_InitStruct.Pin = OCTOSPI_F_NCS_Pin;
 800195e:	2320      	movs	r3, #32
 8001960:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001964:	2302      	movs	r3, #2
 8001966:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196a:	2300      	movs	r3, #0
 800196c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001970:	2303      	movs	r3, #3
 8001972:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 8001976:	2305      	movs	r3, #5
 8001978:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(OCTOSPI_F_NCS_GPIO_Port, &GPIO_InitStruct);
 800197c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8001980:	4619      	mov	r1, r3
 8001982:	481c      	ldr	r0, [pc, #112]	; (80019f4 <HAL_OSPI_MspInit+0x440>)
 8001984:	f000 fd3c 	bl	8002400 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCTOSPI_F_IO7_Pin|OCTOSPI_F_IO5_Pin|OCTOSPI_F_IO6_Pin|OCTOSPI_F_IO4_Pin;
 8001988:	f44f 53f0 	mov.w	r3, #7680	; 0x1e00
 800198c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001990:	2302      	movs	r3, #2
 8001992:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001996:	2300      	movs	r3, #0
 8001998:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199c:	2303      	movs	r3, #3
 800199e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 80019a2:	2305      	movs	r3, #5
 80019a4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80019a8:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80019ac:	4619      	mov	r1, r3
 80019ae:	4812      	ldr	r0, [pc, #72]	; (80019f8 <HAL_OSPI_MspInit+0x444>)
 80019b0:	f000 fd26 	bl	8002400 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = OCTOSPI_F_IO0_Pin|OCTOSPI_F_IO1_Pin|OCTOSPI_F_IO2_Pin|OCTOSPI_F_IO3_Pin
 80019b4:	f241 031f 	movw	r3, #4127	; 0x101f
 80019b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019bc:	2302      	movs	r3, #2
 80019be:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c8:	2303      	movs	r3, #3
 80019ca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    GPIO_InitStruct.Alternate = GPIO_AF5_OCTOSPI2;
 80019ce:	2305      	movs	r3, #5
 80019d0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019d4:	f507 7382 	add.w	r3, r7, #260	; 0x104
 80019d8:	4619      	mov	r1, r3
 80019da:	4808      	ldr	r0, [pc, #32]	; (80019fc <HAL_OSPI_MspInit+0x448>)
 80019dc:	f000 fd10 	bl	8002400 <HAL_GPIO_Init>
}
 80019e0:	bf00      	nop
 80019e2:	f507 778c 	add.w	r7, r7, #280	; 0x118
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	420d2400 	.word	0x420d2400
 80019f0:	46020c00 	.word	0x46020c00
 80019f4:	42022000 	.word	0x42022000
 80019f8:	42021c00 	.word	0x42021c00
 80019fc:	42021400 	.word	0x42021400

08001a00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b0be      	sub	sp, #248	; 0xf8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a18:	f107 0318 	add.w	r3, r7, #24
 8001a1c:	22c8      	movs	r2, #200	; 0xc8
 8001a1e:	2100      	movs	r1, #0
 8001a20:	4618      	mov	r0, r3
 8001a22:	f009 f823 	bl	800aa6c <memset>
  if(hspi->Instance==SPI2)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a39      	ldr	r2, [pc, #228]	; (8001b10 <HAL_SPI_MspInit+0x110>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d16b      	bne.n	8001b08 <HAL_SPI_MspInit+0x108>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8001a30:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a34:	f04f 0300 	mov.w	r3, #0
 8001a38:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 8001a3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a44:	f107 0318 	add.w	r3, r7, #24
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f003 fdf5 	bl	8005638 <HAL_RCCEx_PeriphCLKConfig>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <HAL_SPI_MspInit+0x58>
    {
      Error_Handler();
 8001a54:	f7ff fc6a 	bl	800132c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a58:	4b2e      	ldr	r3, [pc, #184]	; (8001b14 <HAL_SPI_MspInit+0x114>)
 8001a5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a5e:	4a2d      	ldr	r2, [pc, #180]	; (8001b14 <HAL_SPI_MspInit+0x114>)
 8001a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a64:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001a68:	4b2a      	ldr	r3, [pc, #168]	; (8001b14 <HAL_SPI_MspInit+0x114>)
 8001a6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001a6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a76:	4b27      	ldr	r3, [pc, #156]	; (8001b14 <HAL_SPI_MspInit+0x114>)
 8001a78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a7c:	4a25      	ldr	r2, [pc, #148]	; (8001b14 <HAL_SPI_MspInit+0x114>)
 8001a7e:	f043 0308 	orr.w	r3, r3, #8
 8001a82:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001a86:	4b23      	ldr	r3, [pc, #140]	; (8001b14 <HAL_SPI_MspInit+0x114>)
 8001a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a8c:	f003 0308 	and.w	r3, r3, #8
 8001a90:	613b      	str	r3, [r7, #16]
 8001a92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a94:	4b1f      	ldr	r3, [pc, #124]	; (8001b14 <HAL_SPI_MspInit+0x114>)
 8001a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001a9a:	4a1e      	ldr	r2, [pc, #120]	; (8001b14 <HAL_SPI_MspInit+0x114>)
 8001a9c:	f043 0302 	orr.w	r3, r3, #2
 8001aa0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <HAL_SPI_MspInit+0x114>)
 8001aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
    PD4     ------> SPI2_MOSI
    PD3     ------> SPI2_MISO
    PD1     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = WRLS_SPI2_MOSI_Pin|WRLS_SPI2_MISO_Pin|WRLS_SPI2_SCK_Pin;
 8001ab2:	231a      	movs	r3, #26
 8001ab4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001aca:	2305      	movs	r3, #5
 8001acc:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ad0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4810      	ldr	r0, [pc, #64]	; (8001b18 <HAL_SPI_MspInit+0x118>)
 8001ad8:	f000 fc92 	bl	8002400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = WRLS_SPI2_NSS_Pin;
 8001adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ae0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aea:	2300      	movs	r3, #0
 8001aec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af0:	2300      	movs	r3, #0
 8001af2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001af6:	2305      	movs	r3, #5
 8001af8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(WRLS_SPI2_NSS_GPIO_Port, &GPIO_InitStruct);
 8001afc:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001b00:	4619      	mov	r1, r3
 8001b02:	4806      	ldr	r0, [pc, #24]	; (8001b1c <HAL_SPI_MspInit+0x11c>)
 8001b04:	f000 fc7c 	bl	8002400 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001b08:	bf00      	nop
 8001b0a:	37f8      	adds	r7, #248	; 0xf8
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40003800 	.word	0x40003800
 8001b14:	46020c00 	.word	0x46020c00
 8001b18:	42020c00 	.word	0x42020c00
 8001b1c:	42020400 	.word	0x42020400

08001b20 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0e      	ldr	r2, [pc, #56]	; (8001b68 <HAL_TIM_PWM_MspInit+0x48>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d116      	bne.n	8001b60 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b32:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <HAL_TIM_PWM_MspInit+0x4c>)
 8001b34:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b38:	4a0c      	ldr	r2, [pc, #48]	; (8001b6c <HAL_TIM_PWM_MspInit+0x4c>)
 8001b3a:	f043 0302 	orr.w	r3, r3, #2
 8001b3e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001b42:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <HAL_TIM_PWM_MspInit+0x4c>)
 8001b44:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	60fb      	str	r3, [r7, #12]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b50:	2200      	movs	r2, #0
 8001b52:	2100      	movs	r1, #0
 8001b54:	202e      	movs	r0, #46	; 0x2e
 8001b56:	f000 fba2 	bl	800229e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b5a:	202e      	movs	r0, #46	; 0x2e
 8001b5c:	f000 fbb9 	bl	80022d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b60:	bf00      	nop
 8001b62:	3710      	adds	r7, #16
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40000400 	.word	0x40000400
 8001b6c:	46020c00 	.word	0x46020c00

08001b70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b78:	f107 030c 	add.w	r3, r7, #12
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
 8001b80:	605a      	str	r2, [r3, #4]
 8001b82:	609a      	str	r2, [r3, #8]
 8001b84:	60da      	str	r2, [r3, #12]
 8001b86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a12      	ldr	r2, [pc, #72]	; (8001bd8 <HAL_TIM_MspPostInit+0x68>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d11e      	bne.n	8001bd0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b92:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_TIM_MspPostInit+0x6c>)
 8001b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b98:	4a10      	ldr	r2, [pc, #64]	; (8001bdc <HAL_TIM_MspPostInit+0x6c>)
 8001b9a:	f043 0310 	orr.w	r3, r3, #16
 8001b9e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <HAL_TIM_MspPostInit+0x6c>)
 8001ba4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ba8:	f003 0310 	and.w	r3, r3, #16
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PE5     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001bb0:	2320      	movs	r3, #32
 8001bb2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001bc4:	f107 030c 	add.w	r3, r7, #12
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4805      	ldr	r0, [pc, #20]	; (8001be0 <HAL_TIM_MspPostInit+0x70>)
 8001bcc:	f000 fc18 	bl	8002400 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001bd0:	bf00      	nop
 8001bd2:	3720      	adds	r7, #32
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40000400 	.word	0x40000400
 8001bdc:	46020c00 	.word	0x46020c00
 8001be0:	42021000 	.word	0x42021000

08001be4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b0be      	sub	sp, #248	; 0xf8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bfc:	f107 0318 	add.w	r3, r7, #24
 8001c00:	22c8      	movs	r2, #200	; 0xc8
 8001c02:	2100      	movs	r1, #0
 8001c04:	4618      	mov	r0, r3
 8001c06:	f008 ff31 	bl	800aa6c <memset>
  if(huart->Instance==UART4)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a4c      	ldr	r2, [pc, #304]	; (8001d40 <HAL_UART_MspInit+0x15c>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d146      	bne.n	8001ca2 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001c14:	f04f 0208 	mov.w	r2, #8
 8001c18:	f04f 0300 	mov.w	r3, #0
 8001c1c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001c20:	2300      	movs	r3, #0
 8001c22:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c24:	f107 0318 	add.w	r3, r7, #24
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f003 fd05 	bl	8005638 <HAL_RCCEx_PeriphCLKConfig>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8001c34:	f7ff fb7a 	bl	800132c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c38:	4b42      	ldr	r3, [pc, #264]	; (8001d44 <HAL_UART_MspInit+0x160>)
 8001c3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c3e:	4a41      	ldr	r2, [pc, #260]	; (8001d44 <HAL_UART_MspInit+0x160>)
 8001c40:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c44:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8001c48:	4b3e      	ldr	r3, [pc, #248]	; (8001d44 <HAL_UART_MspInit+0x160>)
 8001c4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001c4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c52:	617b      	str	r3, [r7, #20]
 8001c54:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c56:	4b3b      	ldr	r3, [pc, #236]	; (8001d44 <HAL_UART_MspInit+0x160>)
 8001c58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c5c:	4a39      	ldr	r2, [pc, #228]	; (8001d44 <HAL_UART_MspInit+0x160>)
 8001c5e:	f043 0304 	orr.w	r3, r3, #4
 8001c62:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c66:	4b37      	ldr	r3, [pc, #220]	; (8001d44 <HAL_UART_MspInit+0x160>)
 8001c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c6c:	f003 0304 	and.w	r3, r3, #4
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PC11     ------> UART4_RX
    PC10     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = WRLS_UART4_RX_Pin|WRLS_UART4_TX_Pin;
 8001c74:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c78:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001c8e:	2308      	movs	r3, #8
 8001c90:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c94:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001c98:	4619      	mov	r1, r3
 8001c9a:	482b      	ldr	r0, [pc, #172]	; (8001d48 <HAL_UART_MspInit+0x164>)
 8001c9c:	f000 fbb0 	bl	8002400 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ca0:	e04a      	b.n	8001d38 <HAL_UART_MspInit+0x154>
  else if(huart->Instance==USART1)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a29      	ldr	r2, [pc, #164]	; (8001d4c <HAL_UART_MspInit+0x168>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d145      	bne.n	8001d38 <HAL_UART_MspInit+0x154>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001cac:	f04f 0201 	mov.w	r2, #1
 8001cb0:	f04f 0300 	mov.w	r3, #0
 8001cb4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cbc:	f107 0318 	add.w	r3, r7, #24
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f003 fcb9 	bl	8005638 <HAL_RCCEx_PeriphCLKConfig>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <HAL_UART_MspInit+0xec>
      Error_Handler();
 8001ccc:	f7ff fb2e 	bl	800132c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001cd0:	4b1c      	ldr	r3, [pc, #112]	; (8001d44 <HAL_UART_MspInit+0x160>)
 8001cd2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001cd6:	4a1b      	ldr	r2, [pc, #108]	; (8001d44 <HAL_UART_MspInit+0x160>)
 8001cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cdc:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 8001ce0:	4b18      	ldr	r3, [pc, #96]	; (8001d44 <HAL_UART_MspInit+0x160>)
 8001ce2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cea:	60fb      	str	r3, [r7, #12]
 8001cec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cee:	4b15      	ldr	r3, [pc, #84]	; (8001d44 <HAL_UART_MspInit+0x160>)
 8001cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001cf4:	4a13      	ldr	r2, [pc, #76]	; (8001d44 <HAL_UART_MspInit+0x160>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001cfe:	4b11      	ldr	r3, [pc, #68]	; (8001d44 <HAL_UART_MspInit+0x160>)
 8001d00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	60bb      	str	r3, [r7, #8]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_TX_Pin;
 8001d0c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d10:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d14:	2302      	movs	r3, #2
 8001d16:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d26:	2307      	movs	r3, #7
 8001d28:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d2c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001d30:	4619      	mov	r1, r3
 8001d32:	4807      	ldr	r0, [pc, #28]	; (8001d50 <HAL_UART_MspInit+0x16c>)
 8001d34:	f000 fb64 	bl	8002400 <HAL_GPIO_Init>
}
 8001d38:	bf00      	nop
 8001d3a:	37f8      	adds	r7, #248	; 0xf8
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	40004c00 	.word	0x40004c00
 8001d44:	46020c00 	.word	0x46020c00
 8001d48:	42020800 	.word	0x42020800
 8001d4c:	40013800 	.word	0x40013800
 8001d50:	42020000 	.word	0x42020000

08001d54 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b0be      	sub	sp, #248	; 0xf8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001d60:	2200      	movs	r2, #0
 8001d62:	601a      	str	r2, [r3, #0]
 8001d64:	605a      	str	r2, [r3, #4]
 8001d66:	609a      	str	r2, [r3, #8]
 8001d68:	60da      	str	r2, [r3, #12]
 8001d6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d6c:	f107 0318 	add.w	r3, r7, #24
 8001d70:	22c8      	movs	r2, #200	; 0xc8
 8001d72:	2100      	movs	r1, #0
 8001d74:	4618      	mov	r0, r3
 8001d76:	f008 fe79 	bl	800aa6c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a38      	ldr	r2, [pc, #224]	; (8001e60 <HAL_PCD_MspInit+0x10c>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d169      	bne.n	8001e58 <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001d84:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d88:	f04f 0300 	mov.w	r3, #0
 8001d8c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8001d90:	2300      	movs	r3, #0
 8001d92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d96:	f107 0318 	add.w	r3, r7, #24
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	f003 fc4c 	bl	8005638 <HAL_RCCEx_PeriphCLKConfig>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 8001da6:	f7ff fac1 	bl	800132c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001daa:	4b2e      	ldr	r3, [pc, #184]	; (8001e64 <HAL_PCD_MspInit+0x110>)
 8001dac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001db0:	4a2c      	ldr	r2, [pc, #176]	; (8001e64 <HAL_PCD_MspInit+0x110>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001dba:	4b2a      	ldr	r3, [pc, #168]	; (8001e64 <HAL_PCD_MspInit+0x110>)
 8001dbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = USB_C_P_Pin|USB_C_PA11_Pin;
 8001dc8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001dcc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8001de2:	230a      	movs	r3, #10
 8001de4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de8:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001dec:	4619      	mov	r1, r3
 8001dee:	481e      	ldr	r0, [pc, #120]	; (8001e68 <HAL_PCD_MspInit+0x114>)
 8001df0:	f000 fb06 	bl	8002400 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8001df4:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <HAL_PCD_MspInit+0x110>)
 8001df6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001dfa:	4a1a      	ldr	r2, [pc, #104]	; (8001e64 <HAL_PCD_MspInit+0x110>)
 8001dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e00:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001e04:	4b17      	ldr	r3, [pc, #92]	; (8001e64 <HAL_PCD_MspInit+0x110>)
 8001e06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001e0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e12:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <HAL_PCD_MspInit+0x110>)
 8001e14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e18:	f003 0304 	and.w	r3, r3, #4
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d119      	bne.n	8001e54 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e20:	4b10      	ldr	r3, [pc, #64]	; (8001e64 <HAL_PCD_MspInit+0x110>)
 8001e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e26:	4a0f      	ldr	r2, [pc, #60]	; (8001e64 <HAL_PCD_MspInit+0x110>)
 8001e28:	f043 0304 	orr.w	r3, r3, #4
 8001e2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <HAL_PCD_MspInit+0x110>)
 8001e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e36:	f003 0304 	and.w	r3, r3, #4
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8001e3e:	f002 f92f 	bl	80040a0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e42:	4b08      	ldr	r3, [pc, #32]	; (8001e64 <HAL_PCD_MspInit+0x110>)
 8001e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e48:	4a06      	ldr	r2, [pc, #24]	; (8001e64 <HAL_PCD_MspInit+0x110>)
 8001e4a:	f023 0304 	bic.w	r3, r3, #4
 8001e4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001e52:	e001      	b.n	8001e58 <HAL_PCD_MspInit+0x104>
      HAL_PWREx_EnableVddUSB();
 8001e54:	f002 f924 	bl	80040a0 <HAL_PWREx_EnableVddUSB>
}
 8001e58:	bf00      	nop
 8001e5a:	37f8      	adds	r7, #248	; 0xf8
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}
 8001e60:	42040000 	.word	0x42040000
 8001e64:	46020c00 	.word	0x46020c00
 8001e68:	42020000 	.word	0x42020000

08001e6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e70:	e7fe      	b.n	8001e70 <NMI_Handler+0x4>

08001e72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e76:	e7fe      	b.n	8001e76 <HardFault_Handler+0x4>

08001e78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <MemManage_Handler+0x4>

08001e7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e82:	e7fe      	b.n	8001e82 <BusFault_Handler+0x4>

08001e84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e88:	e7fe      	b.n	8001e88 <UsageFault_Handler+0x4>

08001e8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e9c:	bf00      	nop
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001eb8:	f000 f8d2 	bl	8002060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ebc:	bf00      	nop
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ec4:	4802      	ldr	r0, [pc, #8]	; (8001ed0 <TIM3_IRQHandler+0x10>)
 8001ec6:	f006 fb97 	bl	80085f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000028 	.word	0x20000028

08001ed4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ed8:	4b18      	ldr	r3, [pc, #96]	; (8001f3c <SystemInit+0x68>)
 8001eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ede:	4a17      	ldr	r2, [pc, #92]	; (8001f3c <SystemInit+0x68>)
 8001ee0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ee4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001ee8:	4b15      	ldr	r3, [pc, #84]	; (8001f40 <SystemInit+0x6c>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001eee:	4b14      	ldr	r3, [pc, #80]	; (8001f40 <SystemInit+0x6c>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001ef4:	4b12      	ldr	r3, [pc, #72]	; (8001f40 <SystemInit+0x6c>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001efa:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <SystemInit+0x6c>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001f00:	4b0f      	ldr	r3, [pc, #60]	; (8001f40 <SystemInit+0x6c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a0e      	ldr	r2, [pc, #56]	; (8001f40 <SystemInit+0x6c>)
 8001f06:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001f0a:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001f0e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <SystemInit+0x6c>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001f16:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <SystemInit+0x6c>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a09      	ldr	r2, [pc, #36]	; (8001f40 <SystemInit+0x6c>)
 8001f1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f20:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001f22:	4b07      	ldr	r3, [pc, #28]	; (8001f40 <SystemInit+0x6c>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f28:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <SystemInit+0x68>)
 8001f2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f2e:	609a      	str	r2, [r3, #8]
  #endif
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000ed00 	.word	0xe000ed00
 8001f40:	46020c00 	.word	0x46020c00

08001f44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001f44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f7c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001f48:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001f4a:	e003      	b.n	8001f54 <LoopCopyDataInit>

08001f4c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001f4e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001f50:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001f52:	3104      	adds	r1, #4

08001f54 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001f54:	480b      	ldr	r0, [pc, #44]	; (8001f84 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001f56:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001f58:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001f5a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001f5c:	d3f6      	bcc.n	8001f4c <CopyDataInit>
	ldr	r2, =_sbss
 8001f5e:	4a0b      	ldr	r2, [pc, #44]	; (8001f8c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001f60:	e002      	b.n	8001f68 <LoopFillZerobss>

08001f62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001f62:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001f64:	f842 3b04 	str.w	r3, [r2], #4

08001f68 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001f68:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <LoopForever+0x16>)
	cmp	r2, r3
 8001f6a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001f6c:	d3f9      	bcc.n	8001f62 <FillZerobss>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f6e:	f7ff ffb1 	bl	8001ed4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f72:	f008 fd57 	bl	800aa24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f76:	f7fe fc63 	bl	8000840 <main>

08001f7a <LoopForever>:

LoopForever:
    b LoopForever
 8001f7a:	e7fe      	b.n	8001f7a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001f7c:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8001f80:	0800ac18 	.word	0x0800ac18
	ldr	r0, =_sdata
 8001f84:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001f88:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8001f8c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001f90:	20000968 	.word	0x20000968

08001f94 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f94:	e7fe      	b.n	8001f94 <ADC1_IRQHandler>
	...

08001f98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f9c:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <HAL_Init+0x4c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a10      	ldr	r2, [pc, #64]	; (8001fe4 <HAL_Init+0x4c>)
 8001fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fa8:	2003      	movs	r0, #3
 8001faa:	f000 f96d 	bl	8002288 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8001fae:	f003 f95f 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <HAL_Init+0x50>)
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	f003 030f 	and.w	r3, r3, #15
 8001fbc:	490b      	ldr	r1, [pc, #44]	; (8001fec <HAL_Init+0x54>)
 8001fbe:	5ccb      	ldrb	r3, [r1, r3]
 8001fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc4:	4a0a      	ldr	r2, [pc, #40]	; (8001ff0 <HAL_Init+0x58>)
 8001fc6:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001fc8:	200f      	movs	r0, #15
 8001fca:	f000 f813 	bl	8001ff4 <HAL_InitTick>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e002      	b.n	8001fde <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001fd8:	f7ff f9ae 	bl	8001338 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40022000 	.word	0x40022000
 8001fe8:	46020c00 	.word	0x46020c00
 8001fec:	0800ab08 	.word	0x0800ab08
 8001ff0:	20000000 	.word	0x20000000

08001ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
 8001ffc:	4b15      	ldr	r3, [pc, #84]	; (8002054 <HAL_InitTick+0x60>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d101      	bne.n	8002008 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e021      	b.n	800204c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002008:	4b13      	ldr	r3, [pc, #76]	; (8002058 <HAL_InitTick+0x64>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4b11      	ldr	r3, [pc, #68]	; (8002054 <HAL_InitTick+0x60>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	4619      	mov	r1, r3
 8002012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002016:	fbb3 f3f1 	udiv	r3, r3, r1
 800201a:	fbb2 f3f3 	udiv	r3, r2, r3
 800201e:	4618      	mov	r0, r3
 8002020:	f000 f965 	bl	80022ee <HAL_SYSTICK_Config>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e00e      	b.n	800204c <HAL_InitTick+0x58>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b0f      	cmp	r3, #15
 8002032:	d80a      	bhi.n	800204a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002034:	2200      	movs	r2, #0
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	f04f 30ff 	mov.w	r0, #4294967295
 800203c:	f000 f92f 	bl	800229e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002040:	4a06      	ldr	r2, [pc, #24]	; (800205c <HAL_InitTick+0x68>)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002046:	2300      	movs	r3, #0
 8002048:	e000      	b.n	800204c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
}
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000008 	.word	0x20000008
 8002058:	20000000 	.word	0x20000000
 800205c:	20000004 	.word	0x20000004

08002060 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002064:	4b06      	ldr	r3, [pc, #24]	; (8002080 <HAL_IncTick+0x20>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	461a      	mov	r2, r3
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_IncTick+0x24>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4413      	add	r3, r2
 8002070:	4a04      	ldr	r2, [pc, #16]	; (8002084 <HAL_IncTick+0x24>)
 8002072:	6013      	str	r3, [r2, #0]
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	20000008 	.word	0x20000008
 8002084:	20000940 	.word	0x20000940

08002088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return uwTick;
 800208c:	4b03      	ldr	r3, [pc, #12]	; (800209c <HAL_GetTick+0x14>)
 800208e:	681b      	ldr	r3, [r3, #0]
}
 8002090:	4618      	mov	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	20000940 	.word	0x20000940

080020a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020a8:	f7ff ffee 	bl	8002088 <HAL_GetTick>
 80020ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b8:	d005      	beq.n	80020c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ba:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <HAL_Delay+0x44>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	461a      	mov	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4413      	add	r3, r2
 80020c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020c6:	bf00      	nop
 80020c8:	f7ff ffde 	bl	8002088 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	68fa      	ldr	r2, [r7, #12]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d8f7      	bhi.n	80020c8 <HAL_Delay+0x28>
  {
  }
}
 80020d8:	bf00      	nop
 80020da:	bf00      	nop
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000008 	.word	0x20000008

080020e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020f8:	4b0c      	ldr	r3, [pc, #48]	; (800212c <__NVIC_SetPriorityGrouping+0x44>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002104:	4013      	ands	r3, r2
 8002106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002110:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800211a:	4a04      	ldr	r2, [pc, #16]	; (800212c <__NVIC_SetPriorityGrouping+0x44>)
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	60d3      	str	r3, [r2, #12]
}
 8002120:	bf00      	nop
 8002122:	3714      	adds	r7, #20
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002134:	4b04      	ldr	r3, [pc, #16]	; (8002148 <__NVIC_GetPriorityGrouping+0x18>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	0a1b      	lsrs	r3, r3, #8
 800213a:	f003 0307 	and.w	r3, r3, #7
}
 800213e:	4618      	mov	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215a:	2b00      	cmp	r3, #0
 800215c:	db0b      	blt.n	8002176 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800215e:	79fb      	ldrb	r3, [r7, #7]
 8002160:	f003 021f 	and.w	r2, r3, #31
 8002164:	4907      	ldr	r1, [pc, #28]	; (8002184 <__NVIC_EnableIRQ+0x38>)
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	095b      	lsrs	r3, r3, #5
 800216c:	2001      	movs	r0, #1
 800216e:	fa00 f202 	lsl.w	r2, r0, r2
 8002172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	e000e100 	.word	0xe000e100

08002188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	4603      	mov	r3, r0
 8002190:	6039      	str	r1, [r7, #0]
 8002192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002198:	2b00      	cmp	r3, #0
 800219a:	db0a      	blt.n	80021b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	490c      	ldr	r1, [pc, #48]	; (80021d4 <__NVIC_SetPriority+0x4c>)
 80021a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a6:	0112      	lsls	r2, r2, #4
 80021a8:	b2d2      	uxtb	r2, r2
 80021aa:	440b      	add	r3, r1
 80021ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021b0:	e00a      	b.n	80021c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	b2da      	uxtb	r2, r3
 80021b6:	4908      	ldr	r1, [pc, #32]	; (80021d8 <__NVIC_SetPriority+0x50>)
 80021b8:	79fb      	ldrb	r3, [r7, #7]
 80021ba:	f003 030f 	and.w	r3, r3, #15
 80021be:	3b04      	subs	r3, #4
 80021c0:	0112      	lsls	r2, r2, #4
 80021c2:	b2d2      	uxtb	r2, r2
 80021c4:	440b      	add	r3, r1
 80021c6:	761a      	strb	r2, [r3, #24]
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	e000e100 	.word	0xe000e100
 80021d8:	e000ed00 	.word	0xe000ed00

080021dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021dc:	b480      	push	{r7}
 80021de:	b089      	sub	sp, #36	; 0x24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	60f8      	str	r0, [r7, #12]
 80021e4:	60b9      	str	r1, [r7, #8]
 80021e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	f003 0307 	and.w	r3, r3, #7
 80021ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	f1c3 0307 	rsb	r3, r3, #7
 80021f6:	2b04      	cmp	r3, #4
 80021f8:	bf28      	it	cs
 80021fa:	2304      	movcs	r3, #4
 80021fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	3304      	adds	r3, #4
 8002202:	2b06      	cmp	r3, #6
 8002204:	d902      	bls.n	800220c <NVIC_EncodePriority+0x30>
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3b03      	subs	r3, #3
 800220a:	e000      	b.n	800220e <NVIC_EncodePriority+0x32>
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002210:	f04f 32ff 	mov.w	r2, #4294967295
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	fa02 f303 	lsl.w	r3, r2, r3
 800221a:	43da      	mvns	r2, r3
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	401a      	ands	r2, r3
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002224:	f04f 31ff 	mov.w	r1, #4294967295
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	fa01 f303 	lsl.w	r3, r1, r3
 800222e:	43d9      	mvns	r1, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002234:	4313      	orrs	r3, r2
         );
}
 8002236:	4618      	mov	r0, r3
 8002238:	3724      	adds	r7, #36	; 0x24
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
	...

08002244 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3b01      	subs	r3, #1
 8002250:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002254:	d301      	bcc.n	800225a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002256:	2301      	movs	r3, #1
 8002258:	e00f      	b.n	800227a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800225a:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <SysTick_Config+0x40>)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3b01      	subs	r3, #1
 8002260:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002262:	210f      	movs	r1, #15
 8002264:	f04f 30ff 	mov.w	r0, #4294967295
 8002268:	f7ff ff8e 	bl	8002188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800226c:	4b05      	ldr	r3, [pc, #20]	; (8002284 <SysTick_Config+0x40>)
 800226e:	2200      	movs	r2, #0
 8002270:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002272:	4b04      	ldr	r3, [pc, #16]	; (8002284 <SysTick_Config+0x40>)
 8002274:	2207      	movs	r2, #7
 8002276:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	e000e010 	.word	0xe000e010

08002288 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002290:	6878      	ldr	r0, [r7, #4]
 8002292:	f7ff ff29 	bl	80020e8 <__NVIC_SetPriorityGrouping>
}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}

0800229e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800229e:	b580      	push	{r7, lr}
 80022a0:	b086      	sub	sp, #24
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	4603      	mov	r3, r0
 80022a6:	60b9      	str	r1, [r7, #8]
 80022a8:	607a      	str	r2, [r7, #4]
 80022aa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022ac:	f7ff ff40 	bl	8002130 <__NVIC_GetPriorityGrouping>
 80022b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	68b9      	ldr	r1, [r7, #8]
 80022b6:	6978      	ldr	r0, [r7, #20]
 80022b8:	f7ff ff90 	bl	80021dc <NVIC_EncodePriority>
 80022bc:	4602      	mov	r2, r0
 80022be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022c2:	4611      	mov	r1, r2
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff ff5f 	bl	8002188 <__NVIC_SetPriority>
}
 80022ca:	bf00      	nop
 80022cc:	3718      	adds	r7, #24
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b082      	sub	sp, #8
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	4603      	mov	r3, r0
 80022da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7ff ff33 	bl	800214c <__NVIC_EnableIRQ>
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b082      	sub	sp, #8
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f7ff ffa4 	bl	8002244 <SysTick_Config>
 80022fc:	4603      	mov	r3, r0
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b084      	sub	sp, #16
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 800230e:	f7ff febb 	bl	8002088 <HAL_GetTick>
 8002312:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d101      	bne.n	800231e <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e06b      	b.n	80023f6 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002324:	b2db      	uxtb	r3, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d008      	beq.n	800233c <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2220      	movs	r2, #32
 800232e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e05c      	b.n	80023f6 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	695a      	ldr	r2, [r3, #20]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0204 	orr.w	r2, r2, #4
 800234a:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2205      	movs	r2, #5
 8002350:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002354:	e020      	b.n	8002398 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002356:	f7ff fe97 	bl	8002088 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b05      	cmp	r3, #5
 8002362:	d919      	bls.n	8002398 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002368:	f043 0210 	orr.w	r2, r3, #16
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2203      	movs	r2, #3
 8002374:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800237c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002388:	2201      	movs	r2, #1
 800238a:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e02e      	b.n	80023f6 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0d7      	beq.n	8002356 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	695a      	ldr	r2, [r3, #20]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f042 0202 	orr.w	r2, r2, #2
 80023b4:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2204      	movs	r2, #4
 80023ba:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 80023c6:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d007      	beq.n	80023ec <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023e0:	2201      	movs	r2, #1
 80023e2:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2200      	movs	r2, #0
 80023ea:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3710      	adds	r7, #16
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
	...

08002400 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002400:	b480      	push	{r7}
 8002402:	b089      	sub	sp, #36	; 0x24
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
 8002408:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800240a:	2300      	movs	r3, #0
 800240c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002412:	e1ba      	b.n	800278a <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	2101      	movs	r1, #1
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	fa01 f303 	lsl.w	r3, r1, r3
 8002420:	4013      	ands	r3, r2
 8002422:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 81aa 	beq.w	8002784 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	4a55      	ldr	r2, [pc, #340]	; (8002588 <HAL_GPIO_Init+0x188>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d15d      	bne.n	80024f4 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800243e:	2201      	movs	r2, #1
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43db      	mvns	r3, r3
 8002448:	69fa      	ldr	r2, [r7, #28]
 800244a:	4013      	ands	r3, r2
 800244c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f003 0201 	and.w	r2, r3, #1
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	69fa      	ldr	r2, [r7, #28]
 800245e:	4313      	orrs	r3, r2
 8002460:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69fa      	ldr	r2, [r7, #28]
 8002466:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8002468:	4a48      	ldr	r2, [pc, #288]	; (800258c <HAL_GPIO_Init+0x18c>)
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002470:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8002472:	4a46      	ldr	r2, [pc, #280]	; (800258c <HAL_GPIO_Init+0x18c>)
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	4413      	add	r3, r2
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	08da      	lsrs	r2, r3, #3
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	3208      	adds	r2, #8
 8002486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800248a:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	220f      	movs	r2, #15
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	69fa      	ldr	r2, [r7, #28]
 800249e:	4013      	ands	r3, r2
 80024a0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	f003 0307 	and.w	r3, r3, #7
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	220b      	movs	r2, #11
 80024ac:	fa02 f303 	lsl.w	r3, r2, r3
 80024b0:	69fa      	ldr	r2, [r7, #28]
 80024b2:	4313      	orrs	r3, r2
 80024b4:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	08da      	lsrs	r2, r3, #3
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	3208      	adds	r2, #8
 80024be:	69f9      	ldr	r1, [r7, #28]
 80024c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	2203      	movs	r2, #3
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69fa      	ldr	r2, [r7, #28]
 80024d8:	4013      	ands	r3, r2
 80024da:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80024dc:	69bb      	ldr	r3, [r7, #24]
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	2202      	movs	r2, #2
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	69fa      	ldr	r2, [r7, #28]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	69fa      	ldr	r2, [r7, #28]
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	e067      	b.n	80025c4 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d003      	beq.n	8002504 <HAL_GPIO_Init+0x104>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b12      	cmp	r3, #18
 8002502:	d145      	bne.n	8002590 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	08da      	lsrs	r2, r3, #3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	3208      	adds	r2, #8
 800250c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002510:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	220f      	movs	r2, #15
 800251c:	fa02 f303 	lsl.w	r3, r2, r3
 8002520:	43db      	mvns	r3, r3
 8002522:	69fa      	ldr	r2, [r7, #28]
 8002524:	4013      	ands	r3, r2
 8002526:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	691b      	ldr	r3, [r3, #16]
 800252c:	f003 020f 	and.w	r2, r3, #15
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	009b      	lsls	r3, r3, #2
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	69fa      	ldr	r2, [r7, #28]
 800253e:	4313      	orrs	r3, r2
 8002540:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	08da      	lsrs	r2, r3, #3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	3208      	adds	r2, #8
 800254a:	69f9      	ldr	r1, [r7, #28]
 800254c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002556:	69bb      	ldr	r3, [r7, #24]
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	2203      	movs	r2, #3
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	69fa      	ldr	r2, [r7, #28]
 8002564:	4013      	ands	r3, r2
 8002566:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f003 0203 	and.w	r2, r3, #3
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	69fa      	ldr	r2, [r7, #28]
 800257a:	4313      	orrs	r3, r2
 800257c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	69fa      	ldr	r2, [r7, #28]
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	e01e      	b.n	80025c4 <HAL_GPIO_Init+0x1c4>
 8002586:	bf00      	nop
 8002588:	46020000 	.word	0x46020000
 800258c:	0800ab60 	.word	0x0800ab60
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	2203      	movs	r2, #3
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	43db      	mvns	r3, r3
 80025a2:	69fa      	ldr	r2, [r7, #28]
 80025a4:	4013      	ands	r3, r2
 80025a6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 0203 	and.w	r2, r3, #3
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	69fa      	ldr	r2, [r7, #28]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	69fa      	ldr	r2, [r7, #28]
 80025c2:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d00b      	beq.n	80025e4 <HAL_GPIO_Init+0x1e4>
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d007      	beq.n	80025e4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80025d8:	2b11      	cmp	r3, #17
 80025da:	d003      	beq.n	80025e4 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	2b12      	cmp	r3, #18
 80025e2:	d130      	bne.n	8002646 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	2203      	movs	r2, #3
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	43db      	mvns	r3, r3
 80025f6:	69fa      	ldr	r2, [r7, #28]
 80025f8:	4013      	ands	r3, r2
 80025fa:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	68da      	ldr	r2, [r3, #12]
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	69fa      	ldr	r2, [r7, #28]
 800260a:	4313      	orrs	r3, r2
 800260c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	69fa      	ldr	r2, [r7, #28]
 8002612:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800261a:	2201      	movs	r2, #1
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	69fa      	ldr	r2, [r7, #28]
 8002626:	4013      	ands	r3, r2
 8002628:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	091b      	lsrs	r3, r3, #4
 8002630:	f003 0201 	and.w	r2, r3, #1
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	69fa      	ldr	r2, [r7, #28]
 800263c:	4313      	orrs	r3, r2
 800263e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	69fa      	ldr	r2, [r7, #28]
 8002644:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b03      	cmp	r3, #3
 800264c:	d017      	beq.n	800267e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	2203      	movs	r2, #3
 800265a:	fa02 f303 	lsl.w	r3, r2, r3
 800265e:	43db      	mvns	r3, r3
 8002660:	69fa      	ldr	r2, [r7, #28]
 8002662:	4013      	ands	r3, r2
 8002664:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	69fa      	ldr	r2, [r7, #28]
 8002674:	4313      	orrs	r3, r2
 8002676:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	69fa      	ldr	r2, [r7, #28]
 800267c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002686:	2b00      	cmp	r3, #0
 8002688:	d07c      	beq.n	8002784 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800268a:	4a47      	ldr	r2, [pc, #284]	; (80027a8 <HAL_GPIO_Init+0x3a8>)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	089b      	lsrs	r3, r3, #2
 8002690:	3318      	adds	r3, #24
 8002692:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002696:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	00db      	lsls	r3, r3, #3
 80026a0:	220f      	movs	r2, #15
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69fa      	ldr	r2, [r7, #28]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	0a9a      	lsrs	r2, r3, #10
 80026b2:	4b3e      	ldr	r3, [pc, #248]	; (80027ac <HAL_GPIO_Init+0x3ac>)
 80026b4:	4013      	ands	r3, r2
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	f002 0203 	and.w	r2, r2, #3
 80026bc:	00d2      	lsls	r2, r2, #3
 80026be:	4093      	lsls	r3, r2
 80026c0:	69fa      	ldr	r2, [r7, #28]
 80026c2:	4313      	orrs	r3, r2
 80026c4:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80026c6:	4938      	ldr	r1, [pc, #224]	; (80027a8 <HAL_GPIO_Init+0x3a8>)
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	089b      	lsrs	r3, r3, #2
 80026cc:	3318      	adds	r3, #24
 80026ce:	69fa      	ldr	r2, [r7, #28]
 80026d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80026d4:	4b34      	ldr	r3, [pc, #208]	; (80027a8 <HAL_GPIO_Init+0x3a8>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	43db      	mvns	r3, r3
 80026de:	69fa      	ldr	r2, [r7, #28]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 80026f0:	69fa      	ldr	r2, [r7, #28]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 80026f8:	4a2b      	ldr	r2, [pc, #172]	; (80027a8 <HAL_GPIO_Init+0x3a8>)
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 80026fe:	4b2a      	ldr	r3, [pc, #168]	; (80027a8 <HAL_GPIO_Init+0x3a8>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	43db      	mvns	r3, r3
 8002708:	69fa      	ldr	r2, [r7, #28]
 800270a:	4013      	ands	r3, r2
 800270c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800271a:	69fa      	ldr	r2, [r7, #28]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4313      	orrs	r3, r2
 8002720:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8002722:	4a21      	ldr	r2, [pc, #132]	; (80027a8 <HAL_GPIO_Init+0x3a8>)
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8002728:	4b1f      	ldr	r3, [pc, #124]	; (80027a8 <HAL_GPIO_Init+0x3a8>)
 800272a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800272e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	43db      	mvns	r3, r3
 8002734:	69fa      	ldr	r2, [r7, #28]
 8002736:	4013      	ands	r3, r2
 8002738:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8002746:	69fa      	ldr	r2, [r7, #28]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4313      	orrs	r3, r2
 800274c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800274e:	4a16      	ldr	r2, [pc, #88]	; (80027a8 <HAL_GPIO_Init+0x3a8>)
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8002756:	4b14      	ldr	r3, [pc, #80]	; (80027a8 <HAL_GPIO_Init+0x3a8>)
 8002758:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800275c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	43db      	mvns	r3, r3
 8002762:	69fa      	ldr	r2, [r7, #28]
 8002764:	4013      	ands	r3, r2
 8002766:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8002774:	69fa      	ldr	r2, [r7, #28]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4313      	orrs	r3, r2
 800277a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 800277c:	4a0a      	ldr	r2, [pc, #40]	; (80027a8 <HAL_GPIO_Init+0x3a8>)
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	3301      	adds	r3, #1
 8002788:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	fa22 f303 	lsr.w	r3, r2, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	f47f ae3d 	bne.w	8002414 <HAL_GPIO_Init+0x14>
  }
}
 800279a:	bf00      	nop
 800279c:	bf00      	nop
 800279e:	3724      	adds	r7, #36	; 0x24
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	46022000 	.word	0x46022000
 80027ac:	002f7f7f 	.word	0x002f7f7f

080027b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	807b      	strh	r3, [r7, #2]
 80027bc:	4613      	mov	r3, r2
 80027be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80027c0:	787b      	ldrb	r3, [r7, #1]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027c6:	887a      	ldrh	r2, [r7, #2]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80027cc:	e002      	b.n	80027d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80027ce:	887a      	ldrh	r2, [r7, #2]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b082      	sub	sp, #8
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d101      	bne.n	80027f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e081      	b.n	80028f6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d106      	bne.n	800280c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7fe fe1a 	bl	8001440 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2224      	movs	r2, #36	; 0x24
 8002810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0201 	bic.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002830:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002840:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d107      	bne.n	800285a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002856:	609a      	str	r2, [r3, #8]
 8002858:	e006      	b.n	8002868 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689a      	ldr	r2, [r3, #8]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002866:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	2b02      	cmp	r3, #2
 800286e:	d104      	bne.n	800287a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002878:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	687a      	ldr	r2, [r7, #4]
 8002882:	6812      	ldr	r2, [r2, #0]
 8002884:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002888:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800288c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68da      	ldr	r2, [r3, #12]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800289c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	691a      	ldr	r2, [r3, #16]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69d9      	ldr	r1, [r3, #28]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6a1a      	ldr	r2, [r3, #32]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	430a      	orrs	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f042 0201 	orr.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2220      	movs	r2, #32
 80028e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800290e:	b2db      	uxtb	r3, r3
 8002910:	2b20      	cmp	r3, #32
 8002912:	d138      	bne.n	8002986 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800291a:	2b01      	cmp	r3, #1
 800291c:	d101      	bne.n	8002922 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800291e:	2302      	movs	r3, #2
 8002920:	e032      	b.n	8002988 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2224      	movs	r2, #36	; 0x24
 800292e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0201 	bic.w	r2, r2, #1
 8002940:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002950:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6819      	ldr	r1, [r3, #0]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	430a      	orrs	r2, r1
 8002960:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f042 0201 	orr.w	r2, r2, #1
 8002970:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2220      	movs	r2, #32
 8002976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002982:	2300      	movs	r3, #0
 8002984:	e000      	b.n	8002988 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002986:	2302      	movs	r3, #2
  }
}
 8002988:	4618      	mov	r0, r3
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	2b20      	cmp	r3, #32
 80029a8:	d139      	bne.n	8002a1e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d101      	bne.n	80029b8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80029b4:	2302      	movs	r3, #2
 80029b6:	e033      	b.n	8002a20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2224      	movs	r2, #36	; 0x24
 80029c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0201 	bic.w	r2, r2, #1
 80029d6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029e6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	021b      	lsls	r3, r3, #8
 80029ec:	68fa      	ldr	r2, [r7, #12]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f042 0201 	orr.w	r2, r2, #1
 8002a08:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	e000      	b.n	8002a20 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a1e:	2302      	movs	r3, #2
  }
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <HAL_MDF_Init>:
  *         in the MDF_InitTypeDef structure and initialize the associated handle.
  * @param  hmdf MDF handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_MDF_Init(MDF_HandleTypeDef *hmdf)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a34:	2300      	movs	r3, #0
 8002a36:	73fb      	strb	r3, [r7, #15]

  /* Check MDF handle */
  if (hmdf == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d102      	bne.n	8002a44 <HAL_MDF_Init+0x18>
  {
    status = HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	73fb      	strb	r3, [r7, #15]
 8002a42:	e141      	b.n	8002cc8 <HAL_MDF_Init+0x29c>
    assert_param(IS_MDF_ALL_INSTANCE(hmdf->Instance));
    assert_param(IS_MDF_FILTER_BITSTREAM(hmdf->Init.FilterBistream));
    assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.SerialInterface.Activation));

    /* Check that instance has not been already initialized */
    if (a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] != NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f000 f947 	bl	8002cdc <MDF_GetHandleNumberFromInstance>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	4a86      	ldr	r2, [pc, #536]	; (8002c6c <HAL_MDF_Init+0x240>)
 8002a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d002      	beq.n	8002a60 <HAL_MDF_Init+0x34>
    {
      status = HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	73fb      	strb	r3, [r7, #15]
 8002a5e:	e133      	b.n	8002cc8 <HAL_MDF_Init+0x29c>
        hmdf->MspInitCallback = HAL_MDF_MspInit;
      }
      hmdf->MspInitCallback(hmdf);
#else /* USE_HAL_MDF_REGISTER_CALLBACKS */
      /* Call MDF MSP init function */
      HAL_MDF_MspInit(hmdf);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f7fe fc83 	bl	800136c <HAL_MDF_MspInit>
#endif /* USE_HAL_MDF_REGISTER_CALLBACKS */

      /* Configure common parameters only for first MDF or ADF instance */
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8002a66:	4b82      	ldr	r3, [pc, #520]	; (8002c70 <HAL_MDF_Init+0x244>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d11d      	bne.n	8002aaa <HAL_MDF_Init+0x7e>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a80      	ldr	r2, [pc, #512]	; (8002c74 <HAL_MDF_Init+0x248>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d023      	beq.n	8002ac0 <HAL_MDF_Init+0x94>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a7e      	ldr	r2, [pc, #504]	; (8002c78 <HAL_MDF_Init+0x24c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d01e      	beq.n	8002ac0 <HAL_MDF_Init+0x94>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a7d      	ldr	r2, [pc, #500]	; (8002c7c <HAL_MDF_Init+0x250>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d019      	beq.n	8002ac0 <HAL_MDF_Init+0x94>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a7b      	ldr	r2, [pc, #492]	; (8002c80 <HAL_MDF_Init+0x254>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d014      	beq.n	8002ac0 <HAL_MDF_Init+0x94>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a7a      	ldr	r2, [pc, #488]	; (8002c84 <HAL_MDF_Init+0x258>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d00f      	beq.n	8002ac0 <HAL_MDF_Init+0x94>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a78      	ldr	r2, [pc, #480]	; (8002c88 <HAL_MDF_Init+0x25c>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d00a      	beq.n	8002ac0 <HAL_MDF_Init+0x94>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8002aaa:	4b78      	ldr	r3, [pc, #480]	; (8002c8c <HAL_MDF_Init+0x260>)
 8002aac:	681b      	ldr	r3, [r3, #0]
      if (((v_mdf1InstanceCounter == 0U) && IS_MDF_INSTANCE(hmdf->Instance)) ||
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	f040 8090 	bne.w	8002bd4 <HAL_MDF_Init+0x1a8>
          ((v_adf1InstanceCounter == 0U) && IS_ADF_INSTANCE(hmdf->Instance)))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a75      	ldr	r2, [pc, #468]	; (8002c90 <HAL_MDF_Init+0x264>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	f040 808a 	bne.w	8002bd4 <HAL_MDF_Init+0x1a8>
      {
        MDF_TypeDef *mdfBase;
        /* Get MDF base according instance */
        mdfBase = (IS_ADF_INSTANCE(hmdf->Instance)) ? ADF1 : MDF1;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a72      	ldr	r2, [pc, #456]	; (8002c90 <HAL_MDF_Init+0x264>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d101      	bne.n	8002ace <HAL_MDF_Init+0xa2>
 8002aca:	4b72      	ldr	r3, [pc, #456]	; (8002c94 <HAL_MDF_Init+0x268>)
 8002acc:	e000      	b.n	8002ad0 <HAL_MDF_Init+0xa4>
 8002ace:	4b72      	ldr	r3, [pc, #456]	; (8002c98 <HAL_MDF_Init+0x26c>)
 8002ad0:	60bb      	str	r3, [r7, #8]

        /* Check clock generator status */
        if ((mdfBase->CKGCR & MDF_CKGCR_CCKACTIVE) != 0U)
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	da02      	bge.n	8002ae0 <HAL_MDF_Init+0xb4>
        {
          status = HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	73fb      	strb	r3, [r7, #15]
 8002ade:	e079      	b.n	8002bd4 <HAL_MDF_Init+0x1a8>
        }
        else
        {
          /* Configure number of interleaved filters for MDF instance */
          if (IS_MDF_INSTANCE(hmdf->Instance))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a63      	ldr	r2, [pc, #396]	; (8002c74 <HAL_MDF_Init+0x248>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d018      	beq.n	8002b1c <HAL_MDF_Init+0xf0>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a62      	ldr	r2, [pc, #392]	; (8002c78 <HAL_MDF_Init+0x24c>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d013      	beq.n	8002b1c <HAL_MDF_Init+0xf0>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a60      	ldr	r2, [pc, #384]	; (8002c7c <HAL_MDF_Init+0x250>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d00e      	beq.n	8002b1c <HAL_MDF_Init+0xf0>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a5f      	ldr	r2, [pc, #380]	; (8002c80 <HAL_MDF_Init+0x254>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d009      	beq.n	8002b1c <HAL_MDF_Init+0xf0>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a5d      	ldr	r2, [pc, #372]	; (8002c84 <HAL_MDF_Init+0x258>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d004      	beq.n	8002b1c <HAL_MDF_Init+0xf0>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a5c      	ldr	r2, [pc, #368]	; (8002c88 <HAL_MDF_Init+0x25c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d10d      	bne.n	8002b38 <HAL_MDF_Init+0x10c>
          {
            assert_param(IS_MDF_INTERLEAVED_FILTERS(hmdf->Init.CommonParam.InterleavedFilters));
            mdfBase->GCR &= ~(MDF_GCR_ILVNB);
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	601a      	str	r2, [r3, #0]
            mdfBase->GCR |= (hmdf->Init.CommonParam.InterleavedFilters << MDF_GCR_ILVNB_Pos);
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	431a      	orrs	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	601a      	str	r2, [r3, #0]

          /* Configure processing clock divider, output clock divider,
             output clock pins and output clock generation trigger */
          assert_param(IS_MDF_PROC_CLOCK_DIVIDER(hmdf->Init.CommonParam.ProcClockDivider));
          assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Activation));
          mdfBase->CKGCR = 0U;
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	605a      	str	r2, [r3, #4]
          mdfBase->CKGCR |= ((hmdf->Init.CommonParam.ProcClockDivider - 1U) << MDF_CKGCR_PROCDIV_Pos);
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	3b01      	subs	r3, #1
 8002b48:	061b      	lsls	r3, r3, #24
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	605a      	str	r2, [r3, #4]
          if (hmdf->Init.CommonParam.OutputClock.Activation == ENABLE)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	7b1b      	ldrb	r3, [r3, #12]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d137      	bne.n	8002bc8 <HAL_MDF_Init+0x19c>
          {
            assert_param(IS_MDF_OUTPUT_CLOCK_PINS(hmdf->Init.CommonParam.OutputClock.Pins));
            assert_param(IS_MDF_OUTPUT_CLOCK_DIVIDER(hmdf->Init.CommonParam.OutputClock.Divider));
            assert_param(IS_FUNCTIONAL_STATE(hmdf->Init.CommonParam.OutputClock.Trigger.Activation));
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	695b      	ldr	r3, [r3, #20]
 8002b60:	3b01      	subs	r3, #1
 8002b62:	0419      	lsls	r1, r3, #16
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691b      	ldr	r3, [r3, #16]
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8002b68:	4319      	orrs	r1, r3
                               (hmdf->Init.CommonParam.OutputClock.Pins >> 4U));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	091b      	lsrs	r3, r3, #4
                               hmdf->Init.CommonParam.OutputClock.Pins |
 8002b70:	430b      	orrs	r3, r1
            mdfBase->CKGCR |= (((hmdf->Init.CommonParam.OutputClock.Divider - 1U) << MDF_CKGCR_CCKDIV_Pos) |
 8002b72:	431a      	orrs	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	605a      	str	r2, [r3, #4]
            if (hmdf->Init.CommonParam.OutputClock.Trigger.Activation == ENABLE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	7e1b      	ldrb	r3, [r3, #24]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d123      	bne.n	8002bc8 <HAL_MDF_Init+0x19c>
            {
              if (IS_MDF_INSTANCE(hmdf->Instance))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a3b      	ldr	r2, [pc, #236]	; (8002c74 <HAL_MDF_Init+0x248>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d012      	beq.n	8002bb0 <HAL_MDF_Init+0x184>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a3a      	ldr	r2, [pc, #232]	; (8002c78 <HAL_MDF_Init+0x24c>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d00d      	beq.n	8002bb0 <HAL_MDF_Init+0x184>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a38      	ldr	r2, [pc, #224]	; (8002c7c <HAL_MDF_Init+0x250>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d008      	beq.n	8002bb0 <HAL_MDF_Init+0x184>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a37      	ldr	r2, [pc, #220]	; (8002c80 <HAL_MDF_Init+0x254>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d003      	beq.n	8002bb0 <HAL_MDF_Init+0x184>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a35      	ldr	r2, [pc, #212]	; (8002c84 <HAL_MDF_Init+0x258>)
 8002bae:	4293      	cmp	r3, r2
              else /* ADF instance */
              {
                assert_param(IS_ADF_OUTPUT_CLOCK_TRIGGER_SOURCE(hmdf->Init.CommonParam.OutputClock.Trigger.Source));
              }
              assert_param(IS_MDF_OUTPUT_CLOCK_TRIGGER_EDGE(hmdf->Init.CommonParam.OutputClock.Trigger.Edge));
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	69d9      	ldr	r1, [r3, #28]
                                 hmdf->Init.CommonParam.OutputClock.Trigger.Edge |
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a1b      	ldr	r3, [r3, #32]
              mdfBase->CKGCR |= (hmdf->Init.CommonParam.OutputClock.Trigger.Source |
 8002bbc:	430b      	orrs	r3, r1
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	f043 0210 	orr.w	r2, r3, #16
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	605a      	str	r2, [r3, #4]
                                 MDF_CKGCR_CKGMOD);
            }
          }

          /* Activate clock generator */
          mdfBase->CKGCR |= MDF_CKGCR_CKDEN;
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f043 0201 	orr.w	r2, r3, #1
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Configure serial interface */
      if ((status == HAL_OK) && (hmdf->Init.SerialInterface.Activation == ENABLE))
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d128      	bne.n	8002c2c <HAL_MDF_Init+0x200>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d123      	bne.n	8002c2c <HAL_MDF_Init+0x200>
      {
        /* Check serial interface status */
        if ((hmdf->Instance->SITFCR & MDF_SITFCR_SITFACTIVE) != 0U)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	da02      	bge.n	8002bf4 <HAL_MDF_Init+0x1c8>
        {
          status = HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	73fb      	strb	r3, [r7, #15]
 8002bf2:	e01b      	b.n	8002c2c <HAL_MDF_Init+0x200>
        {
          /* Configure mode, clock source and threshold */
          assert_param(IS_MDF_SITF_MODE(hmdf->Init.SerialInterface.Mode));
          assert_param(IS_MDF_SITF_CLOCK_SOURCE(hmdf->Init.SerialInterface.ClockSource));
          assert_param(IS_MDF_SITF_THRESHOLD(hmdf->Init.SerialInterface.Threshold));
          hmdf->Instance->SITFCR = 0U;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	601a      	str	r2, [r3, #0]
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6819      	ldr	r1, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c06:	021a      	lsls	r2, r3, #8
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8002c0c:	431a      	orrs	r2, r3
                                     hmdf->Init.SerialInterface.Mode | hmdf->Init.SerialInterface.ClockSource);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c12:	431a      	orrs	r2, r3
          hmdf->Instance->SITFCR |= ((hmdf->Init.SerialInterface.Threshold << MDF_SITFCR_STH_Pos) |
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	430a      	orrs	r2, r1
 8002c1a:	601a      	str	r2, [r3, #0]

          /* Activate serial interface */
          hmdf->Instance->SITFCR |= MDF_SITFCR_SITFEN;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0201 	orr.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]
        }
      }

      if (status == HAL_OK)
 8002c2c:	7bfb      	ldrb	r3, [r7, #15]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d14a      	bne.n	8002cc8 <HAL_MDF_Init+0x29c>
      {
        /* Configure filter bitstream */
        hmdf->Instance->BSMXCR &= ~(MDF_BSMXCR_BSSEL);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 021f 	bic.w	r2, r2, #31
 8002c40:	605a      	str	r2, [r3, #4]
        hmdf->Instance->BSMXCR |= hmdf->Init.FilterBistream;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	6859      	ldr	r1, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	430a      	orrs	r2, r1
 8002c52:	605a      	str	r2, [r3, #4]

        /* Update instance counter and table */
        if (IS_ADF_INSTANCE(hmdf->Instance))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a0d      	ldr	r2, [pc, #52]	; (8002c90 <HAL_MDF_Init+0x264>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d11e      	bne.n	8002c9c <HAL_MDF_Init+0x270>
        {
          v_adf1InstanceCounter++;
 8002c5e:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <HAL_MDF_Init+0x260>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	3301      	adds	r3, #1
 8002c64:	4a09      	ldr	r2, [pc, #36]	; (8002c8c <HAL_MDF_Init+0x260>)
 8002c66:	6013      	str	r3, [r2, #0]
 8002c68:	e01d      	b.n	8002ca6 <HAL_MDF_Init+0x27a>
 8002c6a:	bf00      	nop
 8002c6c:	2000094c 	.word	0x2000094c
 8002c70:	20000944 	.word	0x20000944
 8002c74:	40025080 	.word	0x40025080
 8002c78:	40025100 	.word	0x40025100
 8002c7c:	40025180 	.word	0x40025180
 8002c80:	40025200 	.word	0x40025200
 8002c84:	40025280 	.word	0x40025280
 8002c88:	40025300 	.word	0x40025300
 8002c8c:	20000948 	.word	0x20000948
 8002c90:	46024080 	.word	0x46024080
 8002c94:	46024000 	.word	0x46024000
 8002c98:	40025000 	.word	0x40025000
        }
        else /* MDF instance */
        {
          v_mdf1InstanceCounter++;
 8002c9c:	4b0d      	ldr	r3, [pc, #52]	; (8002cd4 <HAL_MDF_Init+0x2a8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	4a0c      	ldr	r2, [pc, #48]	; (8002cd4 <HAL_MDF_Init+0x2a8>)
 8002ca4:	6013      	str	r3, [r2, #0]
        }
        a_mdfHandle[MDF_GetHandleNumberFromInstance(hmdf->Instance)] = hmdf;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 f816 	bl	8002cdc <MDF_GetHandleNumberFromInstance>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	4909      	ldr	r1, [pc, #36]	; (8002cd8 <HAL_MDF_Init+0x2ac>)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

        /* Update error code and state */
        hmdf->ErrorCode = MDF_ERROR_NONE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	641a      	str	r2, [r3, #64]	; 0x40
        hmdf->State     = HAL_MDF_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      }
    }
  }

  /* Return function status */
  return status;
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20000944 	.word	0x20000944
 8002cd8:	2000094c 	.word	0x2000094c

08002cdc <MDF_GetHandleNumberFromInstance>:
  * @brief  This function allows to get the handle number from instance.
  * @param  pInstance MDF instance.
  * @retval Instance number.
  */
static uint32_t MDF_GetHandleNumberFromInstance(const MDF_Filter_TypeDef *const pInstance)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t handle_number;

  /* Get handle number from instance */
  if (pInstance == MDF1_Filter0)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	4a19      	ldr	r2, [pc, #100]	; (8002d4c <MDF_GetHandleNumberFromInstance+0x70>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d102      	bne.n	8002cf2 <MDF_GetHandleNumberFromInstance+0x16>
  {
    handle_number = 0U;
 8002cec:	2300      	movs	r3, #0
 8002cee:	60fb      	str	r3, [r7, #12]
 8002cf0:	e024      	b.n	8002d3c <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter1)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a16      	ldr	r2, [pc, #88]	; (8002d50 <MDF_GetHandleNumberFromInstance+0x74>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d102      	bne.n	8002d00 <MDF_GetHandleNumberFromInstance+0x24>
  {
    handle_number = 1U;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	e01d      	b.n	8002d3c <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter2)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a14      	ldr	r2, [pc, #80]	; (8002d54 <MDF_GetHandleNumberFromInstance+0x78>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d102      	bne.n	8002d0e <MDF_GetHandleNumberFromInstance+0x32>
  {
    handle_number = 2U;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	e016      	b.n	8002d3c <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter3)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a11      	ldr	r2, [pc, #68]	; (8002d58 <MDF_GetHandleNumberFromInstance+0x7c>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d102      	bne.n	8002d1c <MDF_GetHandleNumberFromInstance+0x40>
  {
    handle_number = 3U;
 8002d16:	2303      	movs	r3, #3
 8002d18:	60fb      	str	r3, [r7, #12]
 8002d1a:	e00f      	b.n	8002d3c <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter4)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4a0f      	ldr	r2, [pc, #60]	; (8002d5c <MDF_GetHandleNumberFromInstance+0x80>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d102      	bne.n	8002d2a <MDF_GetHandleNumberFromInstance+0x4e>
  {
    handle_number = 4U;
 8002d24:	2304      	movs	r3, #4
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	e008      	b.n	8002d3c <MDF_GetHandleNumberFromInstance+0x60>
  }
  else if (pInstance == MDF1_Filter5)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a0c      	ldr	r2, [pc, #48]	; (8002d60 <MDF_GetHandleNumberFromInstance+0x84>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d102      	bne.n	8002d38 <MDF_GetHandleNumberFromInstance+0x5c>
  {
    handle_number = 5U;
 8002d32:	2305      	movs	r3, #5
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	e001      	b.n	8002d3c <MDF_GetHandleNumberFromInstance+0x60>
  }
  else /* ADF1_Filter0 */
  {
    handle_number = 6U;
 8002d38:	2306      	movs	r3, #6
 8002d3a:	60fb      	str	r3, [r7, #12]
  }

  return handle_number;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3714      	adds	r7, #20
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	40025080 	.word	0x40025080
 8002d50:	40025100 	.word	0x40025100
 8002d54:	40025180 	.word	0x40025180
 8002d58:	40025200 	.word	0x40025200
 8002d5c:	40025280 	.word	0x40025280
 8002d60:	40025300 	.word	0x40025300

08002d64 <LL_DLYB_Enable>:
  * @param  DLYBx DLYB Instance
  * @retval None
  */

__STATIC_INLINE void LL_DLYB_Enable(DLYB_TypeDef *DLYBx)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  SET_BIT(DLYBx->CR, DLYB_CR_DEN);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f043 0201 	orr.w	r2, r3, #1
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	601a      	str	r2, [r3, #0]
}
 8002d78:	bf00      	nop
 8002d7a:	370c      	adds	r7, #12
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init(OSPI_HandleTypeDef *hospi)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af02      	add	r7, sp, #8
 8002d8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8002d90:	f7ff f97a 	bl	8002088 <HAL_GetTick>
 8002d94:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d102      	bne.n	8002da2 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	73fb      	strb	r3, [r7, #15]
 8002da0:	e0a5      	b.n	8002eee <HAL_OSPI_Init+0x16a>
    assert_param(IS_OSPI_CS_BOUNDARY(hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP(hospi->Init.DelayBlockBypass));
    assert_param(IS_OSPI_MAXTRAN(hospi->Init.MaxTran));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f040 809e 	bne.w	8002eee <HAL_OSPI_Init+0x16a>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f7fe fbfe 	bl	80015b4 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8002db8:	f241 3188 	movw	r1, #5000	; 0x1388
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f912 	bl	8002fe6 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	4b4b      	ldr	r3, [pc, #300]	; (8002ef8 <HAL_OSPI_Init+0x174>)
 8002dca:	4013      	ands	r3, r2
 8002dcc:	687a      	ldr	r2, [r7, #4]
 8002dce:	68d1      	ldr	r1, [r2, #12]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6912      	ldr	r2, [r2, #16]
 8002dd4:	3a01      	subs	r2, #1
 8002dd6:	0412      	lsls	r2, r2, #16
 8002dd8:	4311      	orrs	r1, r2
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6952      	ldr	r2, [r2, #20]
 8002dde:	3a01      	subs	r2, #1
 8002de0:	0212      	lsls	r2, r2, #8
 8002de2:	4311      	orrs	r1, r2
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002de8:	4311      	orrs	r1, r2
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	69d2      	ldr	r2, [r2, #28]
 8002dee:	4311      	orrs	r1, r2
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6812      	ldr	r2, [r2, #0]
 8002df4:	430b      	orrs	r3, r1
 8002df6:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a1a      	ldr	r2, [r3, #32]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	0419      	lsls	r1, r3, #16
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e28:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	021a      	lsls	r2, r3, #8
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	2120      	movs	r1, #32
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 fdc9 	bl	80039e8 <OSPI_WaitFlagStateUntilTimeout>
 8002e56:	4603      	mov	r3, r0
 8002e58:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002e5a:	7bfb      	ldrb	r3, [r7, #15]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d146      	bne.n	8002eee <HAL_OSPI_Init+0x16a>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	1e5a      	subs	r2, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	430a      	orrs	r2, r1
 8002e76:	60da      	str	r2, [r3, #12]
                   ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DMM, hospi->Init.DualQuad);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002e96:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                   (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f042 0201 	orr.w	r2, r2, #1
 8002ebc:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d107      	bne.n	8002ed6 <HAL_OSPI_Init+0x152>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	689a      	ldr	r2, [r3, #8]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f042 0202 	orr.w	r2, r2, #2
 8002ed4:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ede:	d103      	bne.n	8002ee8 <HAL_OSPI_Init+0x164>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	651a      	str	r2, [r3, #80]	; 0x50
 8002ee6:	e002      	b.n	8002eee <HAL_OSPI_Init+0x16a>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	651a      	str	r2, [r3, #80]	; 0x50
      }
    }
  }

  /* Return function status */
  return status;
 8002eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3710      	adds	r7, #16
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	f8e0c0f4 	.word	0xf8e0c0f4

08002efc <HAL_OSPI_Abort>:
  * @brief  Abort the current transmission.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Abort(OSPI_HandleTypeDef *hospi)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b088      	sub	sp, #32
 8002f00:	af02      	add	r7, sp, #8
 8002f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f04:	2300      	movs	r3, #0
 8002f06:	75fb      	strb	r3, [r7, #23]
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8002f08:	f7ff f8be 	bl	8002088 <HAL_GetTick>
 8002f0c:	6138      	str	r0, [r7, #16]

  /* Check if the state is in one of the busy or configured states */
  state = hospi->State;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f12:	60fb      	str	r3, [r7, #12]
  if (((state & OSPI_BUSY_STATE_MASK) != 0U) || ((state & OSPI_CFG_STATE_MASK) != 0U))
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d104      	bne.n	8002f28 <HAL_OSPI_Abort+0x2c>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f003 0304 	and.w	r3, r3, #4
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d052      	beq.n	8002fce <HAL_OSPI_Abort+0xd2>
  {
    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d014      	beq.n	8002f60 <HAL_OSPI_Abort+0x64>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0204 	bic.w	r2, r2, #4
 8002f44:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      status = HAL_DMA_Abort(hospi->hdma);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff f9db 	bl	8002306 <HAL_DMA_Abort>
 8002f50:	4603      	mov	r3, r0
 8002f52:	75fb      	strb	r3, [r7, #23]
      if (status != HAL_OK)
 8002f54:	7dfb      	ldrb	r3, [r7, #23]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <HAL_OSPI_Abort+0x64>
      {
        hospi->ErrorCode = HAL_OSPI_ERROR_DMA;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2204      	movs	r2, #4
 8002f5e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }

    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
 8002f66:	f003 0320 	and.w	r3, r3, #32
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d02b      	beq.n	8002fc6 <HAL_OSPI_Abort+0xca>
    {
      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f042 0202 	orr.w	r2, r2, #2
 8002f7c:	601a      	str	r2, [r3, #0]

      /* Wait until the transfer complete flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, hospi->Timeout);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f82:	9300      	str	r3, [sp, #0]
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	2201      	movs	r2, #1
 8002f88:	2102      	movs	r1, #2
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fd2c 	bl	80039e8 <OSPI_WaitFlagStateUntilTimeout>
 8002f90:	4603      	mov	r3, r0
 8002f92:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8002f94:	7dfb      	ldrb	r3, [r7, #23]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d11f      	bne.n	8002fda <HAL_OSPI_Abort+0xde>
      {
        /* Clear transfer complete flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Wait until the busy flag is reset to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	2200      	movs	r2, #0
 8002fac:	2120      	movs	r1, #32
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 fd1a 	bl	80039e8 <OSPI_WaitFlagStateUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8002fb8:	7dfb      	ldrb	r3, [r7, #23]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10d      	bne.n	8002fda <HAL_OSPI_Abort+0xde>
        {
          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2202      	movs	r2, #2
 8002fc2:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8002fc4:	e009      	b.n	8002fda <HAL_OSPI_Abort+0xde>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	651a      	str	r2, [r3, #80]	; 0x50
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8002fcc:	e005      	b.n	8002fda <HAL_OSPI_Abort+0xde>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	75fb      	strb	r3, [r7, #23]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2210      	movs	r2, #16
 8002fd6:	655a      	str	r2, [r3, #84]	; 0x54
 8002fd8:	e000      	b.n	8002fdc <HAL_OSPI_Abort+0xe0>
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 8002fda:	bf00      	nop
  }

  /* Return function status */
  return status;
 8002fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
 8002fee:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	659a      	str	r2, [r3, #88]	; 0x58
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b094      	sub	sp, #80	; 0x50
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003010:	2300      	movs	r3, #0
 8003012:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8003016:	2300      	movs	r3, #0
 8003018:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  assert_param(IS_OSPIM_DQS_PORT(cfg->DQSPort));
  assert_param(IS_OSPIM_PORT(cfg->NCSPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOLowPort));
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));

  if (hospi->Instance == (OCTOSPI_TypeDef *)OCTOSPI1)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a9d      	ldr	r2, [pc, #628]	; (8003298 <HAL_OSPIM_Config+0x294>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d105      	bne.n	8003032 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8003026:	2300      	movs	r3, #0
 8003028:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 1U;
 800302a:	2301      	movs	r3, #1
 800302c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8003030:	e004      	b.n	800303c <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8003032:	2301      	movs	r3, #1
 8003034:	64bb      	str	r3, [r7, #72]	; 0x48
    other_instance = 0U;
 8003036:	2300      	movs	r3, #0
 8003038:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800303c:	2300      	movs	r3, #0
 800303e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003042:	e01d      	b.n	8003080 <HAL_OSPIM_Config+0x7c>
  {
    if (OSPIM_GetConfig(index + 1U, &(IOM_cfg[index])) != HAL_OK)
 8003044:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003048:	3301      	adds	r3, #1
 800304a:	b2d8      	uxtb	r0, r3
 800304c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8003050:	f107 0114 	add.w	r1, r7, #20
 8003054:	4613      	mov	r3, r2
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	4413      	add	r3, r2
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	440b      	add	r3, r1
 800305e:	4619      	mov	r1, r3
 8003060:	f000 fd02 	bl	8003a68 <OSPIM_GetConfig>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d005      	beq.n	8003076 <HAL_OSPIM_Config+0x72>
    {
      status = HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2208      	movs	r2, #8
 8003074:	655a      	str	r2, [r3, #84]	; 0x54
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003076:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800307a:	3301      	adds	r3, #1
 800307c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8003080:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003084:	2b01      	cmp	r3, #1
 8003086:	d9dd      	bls.n	8003044 <HAL_OSPIM_Config+0x40>
    }
  }

  if (status == HAL_OK)
 8003088:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800308c:	2b00      	cmp	r3, #0
 800308e:	f040 849e 	bne.w	80039ce <HAL_OSPIM_Config+0x9ca>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8003092:	4b81      	ldr	r3, [pc, #516]	; (8003298 <HAL_OSPIM_Config+0x294>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00b      	beq.n	80030b6 <HAL_OSPIM_Config+0xb2>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800309e:	4b7e      	ldr	r3, [pc, #504]	; (8003298 <HAL_OSPIM_Config+0x294>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a7d      	ldr	r2, [pc, #500]	; (8003298 <HAL_OSPIM_Config+0x294>)
 80030a4:	f023 0301 	bic.w	r3, r3, #1
 80030a8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80030aa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80030ae:	f043 0301 	orr.w	r3, r3, #1
 80030b2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80030b6:	4b79      	ldr	r3, [pc, #484]	; (800329c <HAL_OSPIM_Config+0x298>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00b      	beq.n	80030da <HAL_OSPIM_Config+0xd6>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80030c2:	4b76      	ldr	r3, [pc, #472]	; (800329c <HAL_OSPIM_Config+0x298>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a75      	ldr	r2, [pc, #468]	; (800329c <HAL_OSPIM_Config+0x298>)
 80030c8:	f023 0301 	bic.w	r3, r3, #1
 80030cc:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80030ce:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80030d2:	f043 0302 	orr.w	r3, r3, #2
 80030d6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80030da:	4971      	ldr	r1, [pc, #452]	; (80032a0 <HAL_OSPIM_Config+0x29c>)
 80030dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030de:	4613      	mov	r3, r2
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	4413      	add	r3, r2
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	3350      	adds	r3, #80	; 0x50
 80030e8:	443b      	add	r3, r7
 80030ea:	3b34      	subs	r3, #52	; 0x34
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	3b01      	subs	r3, #1
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	6859      	ldr	r1, [r3, #4]
 80030f6:	486a      	ldr	r0, [pc, #424]	; (80032a0 <HAL_OSPIM_Config+0x29c>)
 80030f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030fa:	4613      	mov	r3, r2
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	4413      	add	r3, r2
 8003100:	00db      	lsls	r3, r3, #3
 8003102:	3350      	adds	r3, #80	; 0x50
 8003104:	443b      	add	r3, r7
 8003106:	3b34      	subs	r3, #52	; 0x34
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	3b01      	subs	r3, #1
 800310c:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4403      	add	r3, r0
 8003114:	605a      	str	r2, [r3, #4]
    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 8003116:	4b62      	ldr	r3, [pc, #392]	; (80032a0 <HAL_OSPIM_Config+0x29c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 80c0 	beq.w	80032a4 <HAL_OSPIM_Config+0x2a0>
    {
      /* De-multiplexing should be performed */
      CLEAR_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 8003124:	4b5e      	ldr	r3, [pc, #376]	; (80032a0 <HAL_OSPIM_Config+0x29c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a5d      	ldr	r2, [pc, #372]	; (80032a0 <HAL_OSPIM_Config+0x29c>)
 800312a:	f023 0301 	bic.w	r3, r3, #1
 800312e:	6013      	str	r3, [r2, #0]

      if (other_instance == 1U)
 8003130:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8003134:	2b01      	cmp	r3, #1
 8003136:	f040 8162 	bne.w	80033fe <HAL_OSPIM_Config+0x3fa>
      {
        SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKSRC);
 800313a:	4959      	ldr	r1, [pc, #356]	; (80032a0 <HAL_OSPIM_Config+0x29c>)
 800313c:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003140:	4613      	mov	r3, r2
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	4413      	add	r3, r2
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	3350      	adds	r3, #80	; 0x50
 800314a:	443b      	add	r3, r7
 800314c:	3b3c      	subs	r3, #60	; 0x3c
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	3b01      	subs	r3, #1
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	440b      	add	r3, r1
 8003156:	6859      	ldr	r1, [r3, #4]
 8003158:	4851      	ldr	r0, [pc, #324]	; (80032a0 <HAL_OSPIM_Config+0x29c>)
 800315a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800315e:	4613      	mov	r3, r2
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	4413      	add	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	3350      	adds	r3, #80	; 0x50
 8003168:	443b      	add	r3, r7
 800316a:	3b3c      	subs	r3, #60	; 0x3c
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	3b01      	subs	r3, #1
 8003170:	f041 0202 	orr.w	r2, r1, #2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4403      	add	r3, r0
 8003178:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800317a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800317e:	4613      	mov	r3, r2
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	4413      	add	r3, r2
 8003184:	00db      	lsls	r3, r3, #3
 8003186:	3350      	adds	r3, #80	; 0x50
 8003188:	443b      	add	r3, r7
 800318a:	3b38      	subs	r3, #56	; 0x38
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d01f      	beq.n	80031d2 <HAL_OSPIM_Config+0x1ce>
        {
          SET_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSSRC);
 8003192:	4943      	ldr	r1, [pc, #268]	; (80032a0 <HAL_OSPIM_Config+0x29c>)
 8003194:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003198:	4613      	mov	r3, r2
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	4413      	add	r3, r2
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	3350      	adds	r3, #80	; 0x50
 80031a2:	443b      	add	r3, r7
 80031a4:	3b38      	subs	r3, #56	; 0x38
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	3b01      	subs	r3, #1
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	440b      	add	r3, r1
 80031ae:	6859      	ldr	r1, [r3, #4]
 80031b0:	483b      	ldr	r0, [pc, #236]	; (80032a0 <HAL_OSPIM_Config+0x29c>)
 80031b2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80031b6:	4613      	mov	r3, r2
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	4413      	add	r3, r2
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	3350      	adds	r3, #80	; 0x50
 80031c0:	443b      	add	r3, r7
 80031c2:	3b38      	subs	r3, #56	; 0x38
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	f041 0220 	orr.w	r2, r1, #32
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4403      	add	r3, r0
 80031d0:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80031d2:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80031d6:	4613      	mov	r3, r2
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	4413      	add	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	3350      	adds	r3, #80	; 0x50
 80031e0:	443b      	add	r3, r7
 80031e2:	3b30      	subs	r3, #48	; 0x30
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d023      	beq.n	8003232 <HAL_OSPIM_Config+0x22e>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80031ea:	492d      	ldr	r1, [pc, #180]	; (80032a0 <HAL_OSPIM_Config+0x29c>)
 80031ec:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80031f0:	4613      	mov	r3, r2
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	4413      	add	r3, r2
 80031f6:	00db      	lsls	r3, r3, #3
 80031f8:	3350      	adds	r3, #80	; 0x50
 80031fa:	443b      	add	r3, r7
 80031fc:	3b30      	subs	r3, #48	; 0x30
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	3b01      	subs	r3, #1
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	6859      	ldr	r1, [r3, #4]
 800320c:	4824      	ldr	r0, [pc, #144]	; (80032a0 <HAL_OSPIM_Config+0x29c>)
 800320e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003212:	4613      	mov	r3, r2
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	4413      	add	r3, r2
 8003218:	00db      	lsls	r3, r3, #3
 800321a:	3350      	adds	r3, #80	; 0x50
 800321c:	443b      	add	r3, r7
 800321e:	3b30      	subs	r3, #48	; 0x30
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	3b01      	subs	r3, #1
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4403      	add	r3, r0
 8003230:	605a      	str	r2, [r3, #4]
                  OCTOSPIM_PCR_IOLSRC_1);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003232:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003236:	4613      	mov	r3, r2
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	4413      	add	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	3350      	adds	r3, #80	; 0x50
 8003240:	443b      	add	r3, r7
 8003242:	3b2c      	subs	r3, #44	; 0x2c
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	f000 80d9 	beq.w	80033fe <HAL_OSPIM_Config+0x3fa>
        {
          SET_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800324c:	4914      	ldr	r1, [pc, #80]	; (80032a0 <HAL_OSPIM_Config+0x29c>)
 800324e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003252:	4613      	mov	r3, r2
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	4413      	add	r3, r2
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	3350      	adds	r3, #80	; 0x50
 800325c:	443b      	add	r3, r7
 800325e:	3b2c      	subs	r3, #44	; 0x2c
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	3b01      	subs	r3, #1
 8003264:	f003 0301 	and.w	r3, r3, #1
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	440b      	add	r3, r1
 800326c:	6859      	ldr	r1, [r3, #4]
 800326e:	480c      	ldr	r0, [pc, #48]	; (80032a0 <HAL_OSPIM_Config+0x29c>)
 8003270:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003274:	4613      	mov	r3, r2
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	4413      	add	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	3350      	adds	r3, #80	; 0x50
 800327e:	443b      	add	r3, r7
 8003280:	3b2c      	subs	r3, #44	; 0x2c
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	3b01      	subs	r3, #1
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	f041 6280 	orr.w	r2, r1, #67108864	; 0x4000000
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4403      	add	r3, r0
 8003292:	605a      	str	r2, [r3, #4]
 8003294:	e0b3      	b.n	80033fe <HAL_OSPIM_Config+0x3fa>
 8003296:	bf00      	nop
 8003298:	420d1400 	.word	0x420d1400
 800329c:	420d2400 	.word	0x420d2400
 80032a0:	420c4000 	.word	0x420c4000
        }
      }
    }
    else
    {
      if (IOM_cfg[instance].ClkPort != 0U)
 80032a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032a6:	4613      	mov	r3, r2
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	4413      	add	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	3350      	adds	r3, #80	; 0x50
 80032b0:	443b      	add	r3, r7
 80032b2:	3b3c      	subs	r3, #60	; 0x3c
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f000 80a1 	beq.w	80033fe <HAL_OSPIM_Config+0x3fa>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 80032bc:	4993      	ldr	r1, [pc, #588]	; (800350c <HAL_OSPIM_Config+0x508>)
 80032be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032c0:	4613      	mov	r3, r2
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	4413      	add	r3, r2
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	3350      	adds	r3, #80	; 0x50
 80032ca:	443b      	add	r3, r7
 80032cc:	3b3c      	subs	r3, #60	; 0x3c
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	3b01      	subs	r3, #1
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	440b      	add	r3, r1
 80032d6:	6859      	ldr	r1, [r3, #4]
 80032d8:	488c      	ldr	r0, [pc, #560]	; (800350c <HAL_OSPIM_Config+0x508>)
 80032da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032dc:	4613      	mov	r3, r2
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	4413      	add	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	3350      	adds	r3, #80	; 0x50
 80032e6:	443b      	add	r3, r7
 80032e8:	3b3c      	subs	r3, #60	; 0x3c
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	3b01      	subs	r3, #1
 80032ee:	f021 0201 	bic.w	r2, r1, #1
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4403      	add	r3, r0
 80032f6:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80032f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032fa:	4613      	mov	r3, r2
 80032fc:	005b      	lsls	r3, r3, #1
 80032fe:	4413      	add	r3, r2
 8003300:	00db      	lsls	r3, r3, #3
 8003302:	3350      	adds	r3, #80	; 0x50
 8003304:	443b      	add	r3, r7
 8003306:	3b38      	subs	r3, #56	; 0x38
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d01d      	beq.n	800334a <HAL_OSPIM_Config+0x346>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 800330e:	497f      	ldr	r1, [pc, #508]	; (800350c <HAL_OSPIM_Config+0x508>)
 8003310:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003312:	4613      	mov	r3, r2
 8003314:	005b      	lsls	r3, r3, #1
 8003316:	4413      	add	r3, r2
 8003318:	00db      	lsls	r3, r3, #3
 800331a:	3350      	adds	r3, #80	; 0x50
 800331c:	443b      	add	r3, r7
 800331e:	3b38      	subs	r3, #56	; 0x38
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	3b01      	subs	r3, #1
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	440b      	add	r3, r1
 8003328:	6859      	ldr	r1, [r3, #4]
 800332a:	4878      	ldr	r0, [pc, #480]	; (800350c <HAL_OSPIM_Config+0x508>)
 800332c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800332e:	4613      	mov	r3, r2
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	4413      	add	r3, r2
 8003334:	00db      	lsls	r3, r3, #3
 8003336:	3350      	adds	r3, #80	; 0x50
 8003338:	443b      	add	r3, r7
 800333a:	3b38      	subs	r3, #56	; 0x38
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	3b01      	subs	r3, #1
 8003340:	f021 0210 	bic.w	r2, r1, #16
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4403      	add	r3, r0
 8003348:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800334a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800334c:	4613      	mov	r3, r2
 800334e:	005b      	lsls	r3, r3, #1
 8003350:	4413      	add	r3, r2
 8003352:	00db      	lsls	r3, r3, #3
 8003354:	3350      	adds	r3, #80	; 0x50
 8003356:	443b      	add	r3, r7
 8003358:	3b30      	subs	r3, #48	; 0x30
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d021      	beq.n	80033a4 <HAL_OSPIM_Config+0x3a0>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8003360:	496a      	ldr	r1, [pc, #424]	; (800350c <HAL_OSPIM_Config+0x508>)
 8003362:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003364:	4613      	mov	r3, r2
 8003366:	005b      	lsls	r3, r3, #1
 8003368:	4413      	add	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	3350      	adds	r3, #80	; 0x50
 800336e:	443b      	add	r3, r7
 8003370:	3b30      	subs	r3, #48	; 0x30
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	3b01      	subs	r3, #1
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	6859      	ldr	r1, [r3, #4]
 8003380:	4862      	ldr	r0, [pc, #392]	; (800350c <HAL_OSPIM_Config+0x508>)
 8003382:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003384:	4613      	mov	r3, r2
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	4413      	add	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	3350      	adds	r3, #80	; 0x50
 800338e:	443b      	add	r3, r7
 8003390:	3b30      	subs	r3, #48	; 0x30
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	3b01      	subs	r3, #1
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4403      	add	r3, r0
 80033a2:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80033a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033a6:	4613      	mov	r3, r2
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	4413      	add	r3, r2
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	3350      	adds	r3, #80	; 0x50
 80033b0:	443b      	add	r3, r7
 80033b2:	3b2c      	subs	r3, #44	; 0x2c
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d021      	beq.n	80033fe <HAL_OSPIM_Config+0x3fa>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80033ba:	4954      	ldr	r1, [pc, #336]	; (800350c <HAL_OSPIM_Config+0x508>)
 80033bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033be:	4613      	mov	r3, r2
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	4413      	add	r3, r2
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	3350      	adds	r3, #80	; 0x50
 80033c8:	443b      	add	r3, r7
 80033ca:	3b2c      	subs	r3, #44	; 0x2c
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	440b      	add	r3, r1
 80033d8:	6859      	ldr	r1, [r3, #4]
 80033da:	484c      	ldr	r0, [pc, #304]	; (800350c <HAL_OSPIM_Config+0x508>)
 80033dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033de:	4613      	mov	r3, r2
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	4413      	add	r3, r2
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	3350      	adds	r3, #80	; 0x50
 80033e8:	443b      	add	r3, r7
 80033ea:	3b2c      	subs	r3, #44	; 0x2c
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	3b01      	subs	r3, #1
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4403      	add	r3, r0
 80033fc:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	6819      	ldr	r1, [r3, #0]
 8003402:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003406:	4613      	mov	r3, r2
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	4413      	add	r3, r2
 800340c:	00db      	lsls	r3, r3, #3
 800340e:	3350      	adds	r3, #80	; 0x50
 8003410:	443b      	add	r3, r7
 8003412:	3b3c      	subs	r3, #60	; 0x3c
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4299      	cmp	r1, r3
 8003418:	d038      	beq.n	800348c <HAL_OSPIM_Config+0x488>
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	6859      	ldr	r1, [r3, #4]
 800341e:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003422:	4613      	mov	r3, r2
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	4413      	add	r3, r2
 8003428:	00db      	lsls	r3, r3, #3
 800342a:	3350      	adds	r3, #80	; 0x50
 800342c:	443b      	add	r3, r7
 800342e:	3b38      	subs	r3, #56	; 0x38
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4299      	cmp	r1, r3
 8003434:	d02a      	beq.n	800348c <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	6899      	ldr	r1, [r3, #8]
 800343a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800343e:	4613      	mov	r3, r2
 8003440:	005b      	lsls	r3, r3, #1
 8003442:	4413      	add	r3, r2
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	3350      	adds	r3, #80	; 0x50
 8003448:	443b      	add	r3, r7
 800344a:	3b34      	subs	r3, #52	; 0x34
 800344c:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800344e:	4299      	cmp	r1, r3
 8003450:	d01c      	beq.n	800348c <HAL_OSPIM_Config+0x488>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	68d9      	ldr	r1, [r3, #12]
 8003456:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800345a:	4613      	mov	r3, r2
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	4413      	add	r3, r2
 8003460:	00db      	lsls	r3, r3, #3
 8003462:	3350      	adds	r3, #80	; 0x50
 8003464:	443b      	add	r3, r7
 8003466:	3b30      	subs	r3, #48	; 0x30
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4299      	cmp	r1, r3
 800346c:	d00e      	beq.n	800348c <HAL_OSPIM_Config+0x488>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	6919      	ldr	r1, [r3, #16]
 8003472:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003476:	4613      	mov	r3, r2
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	4413      	add	r3, r2
 800347c:	00db      	lsls	r3, r3, #3
 800347e:	3350      	adds	r3, #80	; 0x50
 8003480:	443b      	add	r3, r7
 8003482:	3b2c      	subs	r3, #44	; 0x2c
 8003484:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003486:	4299      	cmp	r1, r3
 8003488:	f040 810e 	bne.w	80036a8 <HAL_OSPIM_Config+0x6a4>
    {
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	6819      	ldr	r1, [r3, #0]
 8003490:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003494:	4613      	mov	r3, r2
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	4413      	add	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	3350      	adds	r3, #80	; 0x50
 800349e:	443b      	add	r3, r7
 80034a0:	3b3c      	subs	r3, #60	; 0x3c
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4299      	cmp	r1, r3
 80034a6:	d133      	bne.n	8003510 <HAL_OSPIM_Config+0x50c>
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	6859      	ldr	r1, [r3, #4]
 80034ac:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80034b0:	4613      	mov	r3, r2
 80034b2:	005b      	lsls	r3, r3, #1
 80034b4:	4413      	add	r3, r2
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	3350      	adds	r3, #80	; 0x50
 80034ba:	443b      	add	r3, r7
 80034bc:	3b38      	subs	r3, #56	; 0x38
 80034be:	681b      	ldr	r3, [r3, #0]
      if ((cfg->ClkPort   == IOM_cfg[other_instance].ClkPort)   &&
 80034c0:	4299      	cmp	r1, r3
 80034c2:	d125      	bne.n	8003510 <HAL_OSPIM_Config+0x50c>
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	68d9      	ldr	r1, [r3, #12]
 80034c8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80034cc:	4613      	mov	r3, r2
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	4413      	add	r3, r2
 80034d2:	00db      	lsls	r3, r3, #3
 80034d4:	3350      	adds	r3, #80	; 0x50
 80034d6:	443b      	add	r3, r7
 80034d8:	3b30      	subs	r3, #48	; 0x30
 80034da:	681b      	ldr	r3, [r3, #0]
          (cfg->DQSPort    == IOM_cfg[other_instance].DQSPort)  &&
 80034dc:	4299      	cmp	r1, r3
 80034de:	d117      	bne.n	8003510 <HAL_OSPIM_Config+0x50c>
          (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	6919      	ldr	r1, [r3, #16]
 80034e4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80034e8:	4613      	mov	r3, r2
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	4413      	add	r3, r2
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	3350      	adds	r3, #80	; 0x50
 80034f2:	443b      	add	r3, r7
 80034f4:	3b2c      	subs	r3, #44	; 0x2c
 80034f6:	681b      	ldr	r3, [r3, #0]
          (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) &&
 80034f8:	4299      	cmp	r1, r3
 80034fa:	d109      	bne.n	8003510 <HAL_OSPIM_Config+0x50c>
      {
        /* Multiplexing should be performed */
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
 80034fc:	4b03      	ldr	r3, [pc, #12]	; (800350c <HAL_OSPIM_Config+0x508>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a02      	ldr	r2, [pc, #8]	; (800350c <HAL_OSPIM_Config+0x508>)
 8003502:	f043 0301 	orr.w	r3, r3, #1
 8003506:	6013      	str	r3, [r2, #0]
 8003508:	e0ce      	b.n	80036a8 <HAL_OSPIM_Config+0x6a4>
 800350a:	bf00      	nop
 800350c:	420c4000 	.word	0x420c4000
      }
      else
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort - 1U)], OCTOSPIM_PCR_CLKEN);
 8003510:	49a4      	ldr	r1, [pc, #656]	; (80037a4 <HAL_OSPIM_Config+0x7a0>)
 8003512:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003516:	4613      	mov	r3, r2
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	4413      	add	r3, r2
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	3350      	adds	r3, #80	; 0x50
 8003520:	443b      	add	r3, r7
 8003522:	3b3c      	subs	r3, #60	; 0x3c
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	3b01      	subs	r3, #1
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	440b      	add	r3, r1
 800352c:	6859      	ldr	r1, [r3, #4]
 800352e:	489d      	ldr	r0, [pc, #628]	; (80037a4 <HAL_OSPIM_Config+0x7a0>)
 8003530:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003534:	4613      	mov	r3, r2
 8003536:	005b      	lsls	r3, r3, #1
 8003538:	4413      	add	r3, r2
 800353a:	00db      	lsls	r3, r3, #3
 800353c:	3350      	adds	r3, #80	; 0x50
 800353e:	443b      	add	r3, r7
 8003540:	3b3c      	subs	r3, #60	; 0x3c
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	3b01      	subs	r3, #1
 8003546:	f021 0201 	bic.w	r2, r1, #1
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	4403      	add	r3, r0
 800354e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8003550:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003554:	4613      	mov	r3, r2
 8003556:	005b      	lsls	r3, r3, #1
 8003558:	4413      	add	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	3350      	adds	r3, #80	; 0x50
 800355e:	443b      	add	r3, r7
 8003560:	3b38      	subs	r3, #56	; 0x38
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d01f      	beq.n	80035a8 <HAL_OSPIM_Config+0x5a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort - 1U)], OCTOSPIM_PCR_DQSEN);
 8003568:	498e      	ldr	r1, [pc, #568]	; (80037a4 <HAL_OSPIM_Config+0x7a0>)
 800356a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800356e:	4613      	mov	r3, r2
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	4413      	add	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	3350      	adds	r3, #80	; 0x50
 8003578:	443b      	add	r3, r7
 800357a:	3b38      	subs	r3, #56	; 0x38
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	3b01      	subs	r3, #1
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	440b      	add	r3, r1
 8003584:	6859      	ldr	r1, [r3, #4]
 8003586:	4887      	ldr	r0, [pc, #540]	; (80037a4 <HAL_OSPIM_Config+0x7a0>)
 8003588:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800358c:	4613      	mov	r3, r2
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	4413      	add	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	3350      	adds	r3, #80	; 0x50
 8003596:	443b      	add	r3, r7
 8003598:	3b38      	subs	r3, #56	; 0x38
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	3b01      	subs	r3, #1
 800359e:	f021 0210 	bic.w	r2, r1, #16
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4403      	add	r3, r0
 80035a6:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort - 1U)], OCTOSPIM_PCR_NCSEN);
 80035a8:	497e      	ldr	r1, [pc, #504]	; (80037a4 <HAL_OSPIM_Config+0x7a0>)
 80035aa:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80035ae:	4613      	mov	r3, r2
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	4413      	add	r3, r2
 80035b4:	00db      	lsls	r3, r3, #3
 80035b6:	3350      	adds	r3, #80	; 0x50
 80035b8:	443b      	add	r3, r7
 80035ba:	3b34      	subs	r3, #52	; 0x34
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	3b01      	subs	r3, #1
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	440b      	add	r3, r1
 80035c4:	6859      	ldr	r1, [r3, #4]
 80035c6:	4877      	ldr	r0, [pc, #476]	; (80037a4 <HAL_OSPIM_Config+0x7a0>)
 80035c8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80035cc:	4613      	mov	r3, r2
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	4413      	add	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	3350      	adds	r3, #80	; 0x50
 80035d6:	443b      	add	r3, r7
 80035d8:	3b34      	subs	r3, #52	; 0x34
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	3b01      	subs	r3, #1
 80035de:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4403      	add	r3, r0
 80035e6:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80035e8:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 80035ec:	4613      	mov	r3, r2
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	4413      	add	r3, r2
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	3350      	adds	r3, #80	; 0x50
 80035f6:	443b      	add	r3, r7
 80035f8:	3b30      	subs	r3, #48	; 0x30
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d023      	beq.n	8003648 <HAL_OSPIM_Config+0x644>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003600:	4968      	ldr	r1, [pc, #416]	; (80037a4 <HAL_OSPIM_Config+0x7a0>)
 8003602:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003606:	4613      	mov	r3, r2
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	4413      	add	r3, r2
 800360c:	00db      	lsls	r3, r3, #3
 800360e:	3350      	adds	r3, #80	; 0x50
 8003610:	443b      	add	r3, r7
 8003612:	3b30      	subs	r3, #48	; 0x30
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	3b01      	subs	r3, #1
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	440b      	add	r3, r1
 8003620:	6859      	ldr	r1, [r3, #4]
 8003622:	4860      	ldr	r0, [pc, #384]	; (80037a4 <HAL_OSPIM_Config+0x7a0>)
 8003624:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003628:	4613      	mov	r3, r2
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	4413      	add	r3, r2
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	3350      	adds	r3, #80	; 0x50
 8003632:	443b      	add	r3, r7
 8003634:	3b30      	subs	r3, #48	; 0x30
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	3b01      	subs	r3, #1
 800363a:	f003 0301 	and.w	r3, r3, #1
 800363e:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4403      	add	r3, r0
 8003646:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003648:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 800364c:	4613      	mov	r3, r2
 800364e:	005b      	lsls	r3, r3, #1
 8003650:	4413      	add	r3, r2
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	3350      	adds	r3, #80	; 0x50
 8003656:	443b      	add	r3, r7
 8003658:	3b2c      	subs	r3, #44	; 0x2c
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d023      	beq.n	80036a8 <HAL_OSPIM_Config+0x6a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003660:	4950      	ldr	r1, [pc, #320]	; (80037a4 <HAL_OSPIM_Config+0x7a0>)
 8003662:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003666:	4613      	mov	r3, r2
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	4413      	add	r3, r2
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	3350      	adds	r3, #80	; 0x50
 8003670:	443b      	add	r3, r7
 8003672:	3b2c      	subs	r3, #44	; 0x2c
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	3b01      	subs	r3, #1
 8003678:	f003 0301 	and.w	r3, r3, #1
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	440b      	add	r3, r1
 8003680:	6859      	ldr	r1, [r3, #4]
 8003682:	4848      	ldr	r0, [pc, #288]	; (80037a4 <HAL_OSPIM_Config+0x7a0>)
 8003684:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8003688:	4613      	mov	r3, r2
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	4413      	add	r3, r2
 800368e:	00db      	lsls	r3, r3, #3
 8003690:	3350      	adds	r3, #80	; 0x50
 8003692:	443b      	add	r3, r7
 8003694:	3b2c      	subs	r3, #44	; 0x2c
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	3b01      	subs	r3, #1
 800369a:	f003 0301 	and.w	r3, r3, #1
 800369e:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4403      	add	r3, r0
 80036a6:	605a      	str	r2, [r3, #4]
        }
      }
    }

    /******************** Activation of new configuration *********************/
    MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80036a8:	4a3e      	ldr	r2, [pc, #248]	; (80037a4 <HAL_OSPIM_Config+0x7a0>)
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	4413      	add	r3, r2
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036bc:	025b      	lsls	r3, r3, #9
 80036be:	431a      	orrs	r2, r3
 80036c0:	4938      	ldr	r1, [pc, #224]	; (80037a4 <HAL_OSPIM_Config+0x7a0>)
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	3b01      	subs	r3, #1
 80036c8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	440b      	add	r3, r1
 80036d0:	605a      	str	r2, [r3, #4]
               (OCTOSPIM_PCR_NCSEN | (instance << OCTOSPIM_PCR_NCSSRC_Pos)));

    if (((cfg->Req2AckTime) >= 1U) && ((cfg->Req2AckTime) <= 256U))
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d018      	beq.n	800370c <HAL_OSPIM_Config+0x708>
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036e2:	d813      	bhi.n	800370c <HAL_OSPIM_Config+0x708>
    {
      if ((cfg->Req2AckTime - 1U) > ((OCTOSPIM->CR & OCTOSPIM_CR_REQ2ACK_TIME) >> OCTOSPIM_CR_REQ2ACK_TIME_Pos))
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	1e5a      	subs	r2, r3, #1
 80036ea:	4b2e      	ldr	r3, [pc, #184]	; (80037a4 <HAL_OSPIM_Config+0x7a0>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	0c1b      	lsrs	r3, r3, #16
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d90a      	bls.n	800370c <HAL_OSPIM_Config+0x708>
      {
        MODIFY_REG(OCTOSPIM->CR, OCTOSPIM_CR_REQ2ACK_TIME, ((cfg->Req2AckTime - 1U) << OCTOSPIM_CR_REQ2ACK_TIME_Pos));
 80036f6:	4b2b      	ldr	r3, [pc, #172]	; (80037a4 <HAL_OSPIM_Config+0x7a0>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	3b01      	subs	r3, #1
 8003704:	041b      	lsls	r3, r3, #16
 8003706:	4927      	ldr	r1, [pc, #156]	; (80037a4 <HAL_OSPIM_Config+0x7a0>)
 8003708:	4313      	orrs	r3, r2
 800370a:	600b      	str	r3, [r1, #0]
      {
        /* Nothing to do */
      }
    }

    if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) != 0U)
 800370c:	4b25      	ldr	r3, [pc, #148]	; (80037a4 <HAL_OSPIM_Config+0x7a0>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 809a 	beq.w	800384e <HAL_OSPIM_Config+0x84a>
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC), OCTOSPIM_PCR_CLKEN);
 800371a:	4a22      	ldr	r2, [pc, #136]	; (80037a4 <HAL_OSPIM_Config+0x7a0>)
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3b01      	subs	r3, #1
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f023 0203 	bic.w	r2, r3, #3
 800372c:	491d      	ldr	r1, [pc, #116]	; (80037a4 <HAL_OSPIM_Config+0x7a0>)
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	3b01      	subs	r3, #1
 8003734:	f042 0201 	orr.w	r2, r2, #1
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	440b      	add	r3, r1
 800373c:	605a      	str	r2, [r3, #4]
      if (cfg->DQSPort != 0U)
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d011      	beq.n	800376a <HAL_OSPIM_Config+0x766>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC), OCTOSPIM_PCR_DQSEN);
 8003746:	4a17      	ldr	r2, [pc, #92]	; (80037a4 <HAL_OSPIM_Config+0x7a0>)
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	3b01      	subs	r3, #1
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003758:	4912      	ldr	r1, [pc, #72]	; (80037a4 <HAL_OSPIM_Config+0x7a0>)
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	3b01      	subs	r3, #1
 8003760:	f042 0210 	orr.w	r2, r2, #16
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	440b      	add	r3, r1
 8003768:	605a      	str	r2, [r3, #4]
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d018      	beq.n	80037a8 <HAL_OSPIM_Config+0x7a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003776:	4a0b      	ldr	r2, [pc, #44]	; (80037a4 <HAL_OSPIM_Config+0x7a0>)
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	3b01      	subs	r3, #1
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	4413      	add	r3, r2
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800378c:	4905      	ldr	r1, [pc, #20]	; (80037a4 <HAL_OSPIM_Config+0x7a0>)
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	3b01      	subs	r3, #1
 8003794:	f003 0301 	and.w	r3, r3, #1
 8003798:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	440b      	add	r3, r1
 80037a0:	605a      	str	r2, [r3, #4]
 80037a2:	e01b      	b.n	80037dc <HAL_OSPIM_Config+0x7d8>
 80037a4:	420c4000 	.word	0x420c4000
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), OCTOSPIM_PCR_IOLEN);
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d015      	beq.n	80037dc <HAL_OSPIM_Config+0x7d8>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80037b0:	4a8a      	ldr	r2, [pc, #552]	; (80039dc <HAL_OSPIM_Config+0x9d8>)
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	f003 0301 	and.w	r3, r3, #1
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80037c6:	4985      	ldr	r1, [pc, #532]	; (80039dc <HAL_OSPIM_Config+0x9d8>)
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	3b01      	subs	r3, #1
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d016      	beq.n	8003816 <HAL_OSPIM_Config+0x812>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 80037e8:	4a7c      	ldr	r2, [pc, #496]	; (80039dc <HAL_OSPIM_Config+0x9d8>)
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	3b01      	subs	r3, #1
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4413      	add	r3, r2
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80037fe:	4977      	ldr	r1, [pc, #476]	; (80039dc <HAL_OSPIM_Config+0x9d8>)
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	3b01      	subs	r3, #1
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	440b      	add	r3, r1
 8003812:	605a      	str	r2, [r3, #4]
 8003814:	e0c3      	b.n	800399e <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC), (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 80bf 	beq.w	800399e <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003820:	4a6e      	ldr	r2, [pc, #440]	; (80039dc <HAL_OSPIM_Config+0x9d8>)
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	3b01      	subs	r3, #1
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003836:	4969      	ldr	r1, [pc, #420]	; (80039dc <HAL_OSPIM_Config+0x9d8>)
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	3b01      	subs	r3, #1
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	440b      	add	r3, r1
 800384a:	605a      	str	r2, [r3, #4]
 800384c:	e0a7      	b.n	800399e <HAL_OSPIM_Config+0x99a>
        /* Nothing to do */
      }
    }
    else
    {
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort - 1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800384e:	4a63      	ldr	r2, [pc, #396]	; (80039dc <HAL_OSPIM_Config+0x9d8>)
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	3b01      	subs	r3, #1
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f023 0203 	bic.w	r2, r3, #3
 8003860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	431a      	orrs	r2, r3
 8003866:	495d      	ldr	r1, [pc, #372]	; (80039dc <HAL_OSPIM_Config+0x9d8>)
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	3b01      	subs	r3, #1
 800386e:	f042 0201 	orr.w	r2, r2, #1
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	440b      	add	r3, r1
 8003876:	605a      	str	r2, [r3, #4]
                 (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d014      	beq.n	80038aa <HAL_OSPIM_Config+0x8a6>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort - 1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8003880:	4a56      	ldr	r2, [pc, #344]	; (80039dc <HAL_OSPIM_Config+0x9d8>)
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	3b01      	subs	r3, #1
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4413      	add	r3, r2
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003892:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003894:	015b      	lsls	r3, r3, #5
 8003896:	431a      	orrs	r2, r3
 8003898:	4950      	ldr	r1, [pc, #320]	; (80039dc <HAL_OSPIM_Config+0x9d8>)
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	3b01      	subs	r3, #1
 80038a0:	f042 0210 	orr.w	r2, r2, #16
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	605a      	str	r2, [r3, #4]
                   (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d019      	beq.n	80038ea <HAL_OSPIM_Config+0x8e6>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80038b6:	4a49      	ldr	r2, [pc, #292]	; (80039dc <HAL_OSPIM_Config+0x9d8>)
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	3b01      	subs	r3, #1
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	4413      	add	r3, r2
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80038cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ce:	049b      	lsls	r3, r3, #18
 80038d0:	431a      	orrs	r2, r3
 80038d2:	4942      	ldr	r1, [pc, #264]	; (80039dc <HAL_OSPIM_Config+0x9d8>)
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	3b01      	subs	r3, #1
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	605a      	str	r2, [r3, #4]
 80038e8:	e01c      	b.n	8003924 <HAL_OSPIM_Config+0x920>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d018      	beq.n	8003924 <HAL_OSPIM_Config+0x920>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort - 1U)& OSPI_IOM_PORT_MASK)],
 80038f2:	4a3a      	ldr	r2, [pc, #232]	; (80039dc <HAL_OSPIM_Config+0x9d8>)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	68db      	ldr	r3, [r3, #12]
 80038f8:	3b01      	subs	r3, #1
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003908:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800390a:	069b      	lsls	r3, r3, #26
 800390c:	431a      	orrs	r2, r3
 800390e:	4933      	ldr	r1, [pc, #204]	; (80039dc <HAL_OSPIM_Config+0x9d8>)
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	3b01      	subs	r3, #1
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	605a      	str	r2, [r3, #4]
      else
      {
        /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d019      	beq.n	8003964 <HAL_OSPIM_Config+0x960>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 8003930:	4a2a      	ldr	r2, [pc, #168]	; (80039dc <HAL_OSPIM_Config+0x9d8>)
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	3b01      	subs	r3, #1
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	4413      	add	r3, r2
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003946:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003948:	049b      	lsls	r3, r3, #18
 800394a:	431a      	orrs	r2, r3
 800394c:	4923      	ldr	r1, [pc, #140]	; (80039dc <HAL_OSPIM_Config+0x9d8>)
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	691b      	ldr	r3, [r3, #16]
 8003952:	3b01      	subs	r3, #1
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	440b      	add	r3, r1
 8003960:	605a      	str	r2, [r3, #4]
 8003962:	e01c      	b.n	800399e <HAL_OSPIM_Config+0x99a>
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                   (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos + 1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d018      	beq.n	800399e <HAL_OSPIM_Config+0x99a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort - 1U)& OSPI_IOM_PORT_MASK)],
 800396c:	4a1b      	ldr	r2, [pc, #108]	; (80039dc <HAL_OSPIM_Config+0x9d8>)
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	3b01      	subs	r3, #1
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003982:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003984:	069b      	lsls	r3, r3, #26
 8003986:	431a      	orrs	r2, r3
 8003988:	4914      	ldr	r1, [pc, #80]	; (80039dc <HAL_OSPIM_Config+0x9d8>)
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	3b01      	subs	r3, #1
 8003990:	f003 0301 	and.w	r3, r3, #1
 8003994:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	440b      	add	r3, r1
 800399c:	605a      	str	r2, [r3, #4]
        /* Nothing to do */
      }
    }

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800399e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d005      	beq.n	80039b6 <HAL_OSPIM_Config+0x9b2>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80039aa:	4b0d      	ldr	r3, [pc, #52]	; (80039e0 <HAL_OSPIM_Config+0x9dc>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a0c      	ldr	r2, [pc, #48]	; (80039e0 <HAL_OSPIM_Config+0x9dc>)
 80039b0:	f043 0301 	orr.w	r3, r3, #1
 80039b4:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80039b6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d005      	beq.n	80039ce <HAL_OSPIM_Config+0x9ca>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80039c2:	4b08      	ldr	r3, [pc, #32]	; (80039e4 <HAL_OSPIM_Config+0x9e0>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a07      	ldr	r2, [pc, #28]	; (80039e4 <HAL_OSPIM_Config+0x9e0>)
 80039c8:	f043 0301 	orr.w	r3, r3, #1
 80039cc:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80039ce:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3750      	adds	r7, #80	; 0x50
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	420c4000 	.word	0x420c4000
 80039e0:	420d1400 	.word	0x420d1400
 80039e4:	420d2400 	.word	0x420d2400

080039e8 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	603b      	str	r3, [r7, #0]
 80039f4:	4613      	mov	r3, r2
 80039f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80039f8:	e022      	b.n	8003a40 <OSPI_WaitFlagStateUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a00:	d01e      	beq.n	8003a40 <OSPI_WaitFlagStateUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a02:	f7fe fb41 	bl	8002088 <HAL_GetTick>
 8003a06:	4602      	mov	r2, r0
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	1ad3      	subs	r3, r2, r3
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d302      	bcc.n	8003a18 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d113      	bne.n	8003a40 <OSPI_WaitFlagStateUntilTimeout+0x58>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hospi->Instance->SR & Flag) != (uint32_t)State)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	6a1a      	ldr	r2, [r3, #32]
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	401a      	ands	r2, r3
 8003a22:	79fb      	ldrb	r3, [r7, #7]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d00b      	beq.n	8003a40 <OSPI_WaitFlagStateUntilTimeout+0x58>
        {
          hospi->State     = HAL_OSPI_STATE_ERROR;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a2e:	651a      	str	r2, [r3, #80]	; 0x50
          hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a34:	f043 0201 	orr.w	r2, r3, #1
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	655a      	str	r2, [r3, #84]	; 0x54

          return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e00e      	b.n	8003a5e <OSPI_WaitFlagStateUntilTimeout+0x76>
  while ((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6a1a      	ldr	r2, [r3, #32]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	bf14      	ite	ne
 8003a4e:	2301      	movne	r3, #1
 8003a50:	2300      	moveq	r3, #0
 8003a52:	b2db      	uxtb	r3, r3
 8003a54:	461a      	mov	r2, r3
 8003a56:	79fb      	ldrb	r3, [r7, #7]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d1ce      	bne.n	80039fa <OSPI_WaitFlagStateUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	6039      	str	r1, [r7, #0]
 8003a72:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003a74:	2300      	movs	r3, #0
 8003a76:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003a7c:	79fb      	ldrb	r3, [r7, #7]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d005      	beq.n	8003a8e <OSPIM_GetConfig+0x26>
 8003a82:	79fb      	ldrb	r3, [r7, #7]
 8003a84:	2b02      	cmp	r3, #2
 8003a86:	d802      	bhi.n	8003a8e <OSPIM_GetConfig+0x26>
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d102      	bne.n	8003a94 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	75fb      	strb	r3, [r7, #23]
 8003a92:	e098      	b.n	8003bc6 <OSPIM_GetConfig+0x15e>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	2200      	movs	r2, #0
 8003a98:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8003ab2:	79fb      	ldrb	r3, [r7, #7]
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d10b      	bne.n	8003ad0 <OSPIM_GetConfig+0x68>
    {
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
 8003ab8:	4b46      	ldr	r3, [pc, #280]	; (8003bd4 <OSPIM_GetConfig+0x16c>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d102      	bne.n	8003aca <OSPIM_GetConfig+0x62>
      {
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8003ac4:	4b44      	ldr	r3, [pc, #272]	; (8003bd8 <OSPIM_GetConfig+0x170>)
 8003ac6:	613b      	str	r3, [r7, #16]
 8003ac8:	e002      	b.n	8003ad0 <OSPIM_GetConfig+0x68>
                 | OCTOSPIM_PCR_IOLSRC_1 | OCTOSPIM_PCR_IOHSRC_1);
      }
      else
      {
        value = OCTOSPIM_PCR_NCSSRC;
 8003aca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ace:	613b      	str	r3, [r7, #16]
      }
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	60fb      	str	r3, [r7, #12]
 8003ad4:	e074      	b.n	8003bc0 <OSPIM_GetConfig+0x158>
    {
      reg = OCTOSPIM->PCR[index];
 8003ad6:	4a3f      	ldr	r2, [pc, #252]	; (8003bd4 <OSPIM_GetConfig+0x16c>)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	4413      	add	r3, r2
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d00a      	beq.n	8003b02 <OSPIM_GetConfig+0x9a>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003aec:	68ba      	ldr	r2, [r7, #8]
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	4053      	eors	r3, r2
 8003af2:	f003 0302 	and.w	r3, r3, #2
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d103      	bne.n	8003b02 <OSPIM_GetConfig+0x9a>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index + 1U;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	f003 0310 	and.w	r3, r3, #16
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d00a      	beq.n	8003b22 <OSPIM_GetConfig+0xba>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	4053      	eors	r3, r2
 8003b12:	f003 0320 	and.w	r3, r3, #32
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d103      	bne.n	8003b22 <OSPIM_GetConfig+0xba>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index + 1U;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	1c5a      	adds	r2, r3, #1
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00a      	beq.n	8003b42 <OSPIM_GetConfig+0xda>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	4053      	eors	r3, r2
 8003b32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d103      	bne.n	8003b42 <OSPIM_GetConfig+0xda>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index + 1U;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8003b42:	68bb      	ldr	r3, [r7, #8]
 8003b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d018      	beq.n	8003b7e <OSPIM_GetConfig+0x116>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	4053      	eors	r3, r2
 8003b52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d111      	bne.n	8003b7e <OSPIM_GetConfig+0x116>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d106      	bne.n	8003b72 <OSPIM_GetConfig+0x10a>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	3301      	adds	r3, #1
 8003b68:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	60da      	str	r2, [r3, #12]
 8003b70:	e005      	b.n	8003b7e <OSPIM_GetConfig+0x116>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	3301      	adds	r3, #1
 8003b76:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d018      	beq.n	8003bba <OSPIM_GetConfig+0x152>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8003b88:	68ba      	ldr	r2, [r7, #8]
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	4053      	eors	r3, r2
 8003b8e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d111      	bne.n	8003bba <OSPIM_GetConfig+0x152>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d106      	bne.n	8003bae <OSPIM_GetConfig+0x146>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index + 1U));
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	611a      	str	r2, [r3, #16]
 8003bac:	e005      	b.n	8003bba <OSPIM_GetConfig+0x152>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index + 1U));
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	3301      	adds	r3, #1
 8003bb2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d987      	bls.n	8003ad6 <OSPIM_GetConfig+0x6e>
      }
    }
  }

  /* Return function status */
  return status;
 8003bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	371c      	adds	r7, #28
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	420c4000 	.word	0x420c4000
 8003bd8:	04040222 	.word	0x04040222

08003bdc <HAL_OSPI_DLYB_SetConfig>:
  * @param  hospi   : OSPI handle.
  * @param  pdlyb_cfg: Pointer to DLYB configuration structure.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_OSPI_DLYB_SetConfig(OSPI_HandleTypeDef *hospi, HAL_OSPI_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	73fb      	strb	r3, [r7, #15]

  /* Enable OCTOSPI Free Running Clock (mandatory) */
  SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f042 0202 	orr.w	r2, r2, #2
 8003bf8:	609a      	str	r2, [r3, #8]

  /* Update OCTOSPI state */
  hospi->State = HAL_OSPI_STATE_BUSY_CMD;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2208      	movs	r2, #8
 8003bfe:	651a      	str	r2, [r3, #80]	; 0x50

  if (hospi->Instance == OCTOSPI1)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a15      	ldr	r2, [pc, #84]	; (8003c5c <HAL_OSPI_DLYB_SetConfig+0x80>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d109      	bne.n	8003c1e <HAL_OSPI_DLYB_SetConfig+0x42>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI1);
 8003c0a:	4815      	ldr	r0, [pc, #84]	; (8003c60 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8003c0c:	f7ff f8aa 	bl	8002d64 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI1, pdlyb_cfg);
 8003c10:	6839      	ldr	r1, [r7, #0]
 8003c12:	4813      	ldr	r0, [pc, #76]	; (8003c60 <HAL_OSPI_DLYB_SetConfig+0x84>)
 8003c14:	f006 fa5e 	bl	800a0d4 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	73fb      	strb	r3, [r7, #15]
 8003c1c:	e00d      	b.n	8003c3a <HAL_OSPI_DLYB_SetConfig+0x5e>
  }

  else if (hospi->Instance == OCTOSPI2)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a10      	ldr	r2, [pc, #64]	; (8003c64 <HAL_OSPI_DLYB_SetConfig+0x88>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d108      	bne.n	8003c3a <HAL_OSPI_DLYB_SetConfig+0x5e>
  {
    /* Enable the DelayBlock */
    LL_DLYB_Enable(DLYB_OCTOSPI2);
 8003c28:	480f      	ldr	r0, [pc, #60]	; (8003c68 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8003c2a:	f7ff f89b 	bl	8002d64 <LL_DLYB_Enable>

    /* Set the Delay Block configuration */
    LL_DLYB_SetDelay(DLYB_OCTOSPI2, pdlyb_cfg);
 8003c2e:	6839      	ldr	r1, [r7, #0]
 8003c30:	480d      	ldr	r0, [pc, #52]	; (8003c68 <HAL_OSPI_DLYB_SetConfig+0x8c>)
 8003c32:	f006 fa4f 	bl	800a0d4 <LL_DLYB_SetDelay>
    status = HAL_OK;
 8003c36:	2300      	movs	r3, #0
 8003c38:	73fb      	strb	r3, [r7, #15]
  {
    /* Nothing to do */
  }

  /* Abort the current OCTOSPI operation if exist */
  (void)HAL_OSPI_Abort(hospi);
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f7ff f95e 	bl	8002efc <HAL_OSPI_Abort>

  /* Disable Free Running Clock */
  CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 0202 	bic.w	r2, r2, #2
 8003c4e:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return status;
 8003c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3710      	adds	r7, #16
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	420d1400 	.word	0x420d1400
 8003c60:	420cf000 	.word	0x420cf000
 8003c64:	420d2400 	.word	0x420d2400
 8003c68:	420cf400 	.word	0x420cf400

08003c6c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c6e:	b08f      	sub	sp, #60	; 0x3c
 8003c70:	af0a      	add	r7, sp, #40	; 0x28
 8003c72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e116      	b.n	8003eac <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (STM32U575xx) || defined (STM32U585xx)
  USBx = hpcd->Instance;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	60bb      	str	r3, [r7, #8]
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d106      	bne.n	8003c9e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f7fe f85b 	bl	8001d54 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2203      	movs	r2, #3
 8003ca2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined (STM32U575xx) || defined (STM32U585xx)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003caa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d102      	bne.n	8003cb8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (STM32U575xx) || defined (STM32U585xx) */
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f006 fc25 	bl	800a50c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	603b      	str	r3, [r7, #0]
 8003cc8:	687e      	ldr	r6, [r7, #4]
 8003cca:	466d      	mov	r5, sp
 8003ccc:	f106 0410 	add.w	r4, r6, #16
 8003cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003cdc:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ce0:	1d33      	adds	r3, r6, #4
 8003ce2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ce4:	6838      	ldr	r0, [r7, #0]
 8003ce6:	f006 fbe5 	bl	800a4b4 <USB_CoreInit>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d005      	beq.n	8003cfc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2202      	movs	r2, #2
 8003cf4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e0d7      	b.n	8003eac <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	2100      	movs	r1, #0
 8003d02:	4618      	mov	r0, r3
 8003d04:	f006 fc13 	bl	800a52e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d08:	2300      	movs	r3, #0
 8003d0a:	73fb      	strb	r3, [r7, #15]
 8003d0c:	e04a      	b.n	8003da4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003d0e:	7bfa      	ldrb	r2, [r7, #15]
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	4613      	mov	r3, r2
 8003d14:	00db      	lsls	r3, r3, #3
 8003d16:	4413      	add	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	440b      	add	r3, r1
 8003d1c:	333d      	adds	r3, #61	; 0x3d
 8003d1e:	2201      	movs	r2, #1
 8003d20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003d22:	7bfa      	ldrb	r2, [r7, #15]
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	4613      	mov	r3, r2
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	4413      	add	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	440b      	add	r3, r1
 8003d30:	333c      	adds	r3, #60	; 0x3c
 8003d32:	7bfa      	ldrb	r2, [r7, #15]
 8003d34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003d36:	7bfa      	ldrb	r2, [r7, #15]
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
 8003d3a:	b298      	uxth	r0, r3
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	00db      	lsls	r3, r3, #3
 8003d42:	4413      	add	r3, r2
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	440b      	add	r3, r1
 8003d48:	3344      	adds	r3, #68	; 0x44
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003d4e:	7bfa      	ldrb	r2, [r7, #15]
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	4613      	mov	r3, r2
 8003d54:	00db      	lsls	r3, r3, #3
 8003d56:	4413      	add	r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	440b      	add	r3, r1
 8003d5c:	3340      	adds	r3, #64	; 0x40
 8003d5e:	2200      	movs	r2, #0
 8003d60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003d62:	7bfa      	ldrb	r2, [r7, #15]
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	4613      	mov	r3, r2
 8003d68:	00db      	lsls	r3, r3, #3
 8003d6a:	4413      	add	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	440b      	add	r3, r1
 8003d70:	3348      	adds	r3, #72	; 0x48
 8003d72:	2200      	movs	r2, #0
 8003d74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d76:	7bfa      	ldrb	r2, [r7, #15]
 8003d78:	6879      	ldr	r1, [r7, #4]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	4413      	add	r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	440b      	add	r3, r1
 8003d84:	334c      	adds	r3, #76	; 0x4c
 8003d86:	2200      	movs	r2, #0
 8003d88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d8a:	7bfa      	ldrb	r2, [r7, #15]
 8003d8c:	6879      	ldr	r1, [r7, #4]
 8003d8e:	4613      	mov	r3, r2
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	4413      	add	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	440b      	add	r3, r1
 8003d98:	3354      	adds	r3, #84	; 0x54
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d9e:	7bfb      	ldrb	r3, [r7, #15]
 8003da0:	3301      	adds	r3, #1
 8003da2:	73fb      	strb	r3, [r7, #15]
 8003da4:	7bfa      	ldrb	r2, [r7, #15]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d3af      	bcc.n	8003d0e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dae:	2300      	movs	r3, #0
 8003db0:	73fb      	strb	r3, [r7, #15]
 8003db2:	e044      	b.n	8003e3e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003db4:	7bfa      	ldrb	r2, [r7, #15]
 8003db6:	6879      	ldr	r1, [r7, #4]
 8003db8:	4613      	mov	r3, r2
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	4413      	add	r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	440b      	add	r3, r1
 8003dc2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003dca:	7bfa      	ldrb	r2, [r7, #15]
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	00db      	lsls	r3, r3, #3
 8003dd2:	4413      	add	r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	440b      	add	r3, r1
 8003dd8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003ddc:	7bfa      	ldrb	r2, [r7, #15]
 8003dde:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003de0:	7bfa      	ldrb	r2, [r7, #15]
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	4613      	mov	r3, r2
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	4413      	add	r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003df2:	2200      	movs	r2, #0
 8003df4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003df6:	7bfa      	ldrb	r2, [r7, #15]
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	00db      	lsls	r3, r3, #3
 8003dfe:	4413      	add	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	440b      	add	r3, r1
 8003e04:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003e0c:	7bfa      	ldrb	r2, [r7, #15]
 8003e0e:	6879      	ldr	r1, [r7, #4]
 8003e10:	4613      	mov	r3, r2
 8003e12:	00db      	lsls	r3, r3, #3
 8003e14:	4413      	add	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	440b      	add	r3, r1
 8003e1a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003e1e:	2200      	movs	r2, #0
 8003e20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003e22:	7bfa      	ldrb	r2, [r7, #15]
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	00db      	lsls	r3, r3, #3
 8003e2a:	4413      	add	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	440b      	add	r3, r1
 8003e30:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e38:	7bfb      	ldrb	r3, [r7, #15]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	73fb      	strb	r3, [r7, #15]
 8003e3e:	7bfa      	ldrb	r2, [r7, #15]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d3b5      	bcc.n	8003db4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	603b      	str	r3, [r7, #0]
 8003e4e:	687e      	ldr	r6, [r7, #4]
 8003e50:	466d      	mov	r5, sp
 8003e52:	f106 0410 	add.w	r4, r6, #16
 8003e56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003e5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003e62:	e885 0003 	stmia.w	r5, {r0, r1}
 8003e66:	1d33      	adds	r3, r6, #4
 8003e68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e6a:	6838      	ldr	r0, [r7, #0]
 8003e6c:	f006 fbac 	bl	800a5c8 <USB_DevInit>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d005      	beq.n	8003e82 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2202      	movs	r2, #2
 8003e7a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e014      	b.n	8003eac <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d102      	bne.n	8003ea0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 f80a 	bl	8003eb4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f006 fd5a 	bl	800a95e <USB_DevDisconnect>

  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003eb4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2201      	movs	r2, #1
 8003ec6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee6:	f043 0303 	orr.w	r3, r3, #3
 8003eea:	68fa      	ldr	r2, [r7, #12]
 8003eec:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3714      	adds	r7, #20
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8003f04:	4b34      	ldr	r3, [pc, #208]	; (8003fd8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f0c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d101      	bne.n	8003f1a <HAL_PWREx_ControlVoltageScaling+0x1e>
  {
    return HAL_OK;
 8003f16:	2300      	movs	r3, #0
 8003f18:	e057      	b.n	8003fca <HAL_PWREx_ControlVoltageScaling+0xce>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f20:	d90a      	bls.n	8003f38 <HAL_PWREx_ControlVoltageScaling+0x3c>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8003f22:	4b2d      	ldr	r3, [pc, #180]	; (8003fd8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	4a2a      	ldr	r2, [pc, #168]	; (8003fd8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003f30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f34:	60d3      	str	r3, [r2, #12]
 8003f36:	e007      	b.n	8003f48 <HAL_PWREx_ControlVoltageScaling+0x4c>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8003f38:	4b27      	ldr	r3, [pc, #156]	; (8003fd8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003f40:	4925      	ldr	r1, [pc, #148]	; (8003fd8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003f48:	4b24      	ldr	r3, [pc, #144]	; (8003fdc <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a24      	ldr	r2, [pc, #144]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8003f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f52:	099b      	lsrs	r3, r3, #6
 8003f54:	2232      	movs	r2, #50	; 0x32
 8003f56:	fb02 f303 	mul.w	r3, r2, r3
 8003f5a:	4a21      	ldr	r2, [pc, #132]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8003f5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f60:	099b      	lsrs	r3, r3, #6
 8003f62:	3301      	adds	r3, #1
 8003f64:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003f66:	e002      	b.n	8003f6e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    timeout--;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8003f6e:	4b1a      	ldr	r3, [pc, #104]	; (8003fd8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d102      	bne.n	8003f80 <HAL_PWREx_ControlVoltageScaling+0x84>
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1f3      	bne.n	8003f68 <HAL_PWREx_ControlVoltageScaling+0x6c>
  }

  /* Check time out */
  if (timeout != 0U)
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d01b      	beq.n	8003fbe <HAL_PWREx_ControlVoltageScaling+0xc2>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8003f86:	4b15      	ldr	r3, [pc, #84]	; (8003fdc <HAL_PWREx_ControlVoltageScaling+0xe0>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a15      	ldr	r2, [pc, #84]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8003f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f90:	099b      	lsrs	r3, r3, #6
 8003f92:	2232      	movs	r2, #50	; 0x32
 8003f94:	fb02 f303 	mul.w	r3, r2, r3
 8003f98:	4a11      	ldr	r2, [pc, #68]	; (8003fe0 <HAL_PWREx_ControlVoltageScaling+0xe4>)
 8003f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9e:	099b      	lsrs	r3, r3, #6
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003fa4:	e002      	b.n	8003fac <HAL_PWREx_ControlVoltageScaling+0xb0>
    {
      timeout--;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 8003fac:	4b0a      	ldr	r3, [pc, #40]	; (8003fd8 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8003fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d102      	bne.n	8003fbe <HAL_PWREx_ControlVoltageScaling+0xc2>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1f3      	bne.n	8003fa6 <HAL_PWREx_ControlVoltageScaling+0xaa>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d101      	bne.n	8003fc8 <HAL_PWREx_ControlVoltageScaling+0xcc>
  {
    return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e000      	b.n	8003fca <HAL_PWREx_ControlVoltageScaling+0xce>
  }

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	46020800 	.word	0x46020800
 8003fdc:	20000000 	.word	0x20000000
 8003fe0:	10624dd3 	.word	0x10624dd3

08003fe4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 8003fe8:	4b04      	ldr	r3, [pc, #16]	; (8003ffc <HAL_PWREx_GetVoltageRange+0x18>)
 8003fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	46020800 	.word	0x46020800

08004000 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8004008:	4b22      	ldr	r3, [pc, #136]	; (8004094 <HAL_PWREx_ConfigSupply+0x94>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a22      	ldr	r2, [pc, #136]	; (8004098 <HAL_PWREx_ConfigSupply+0x98>)
 800400e:	fba2 2303 	umull	r2, r3, r2, r3
 8004012:	099b      	lsrs	r3, r3, #6
 8004014:	2232      	movs	r2, #50	; 0x32
 8004016:	fb02 f303 	mul.w	r3, r2, r3
 800401a:	4a1f      	ldr	r2, [pc, #124]	; (8004098 <HAL_PWREx_ConfigSupply+0x98>)
 800401c:	fba2 2303 	umull	r2, r3, r2, r3
 8004020:	099b      	lsrs	r3, r3, #6
 8004022:	3301      	adds	r3, #1
 8004024:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d113      	bne.n	8004054 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 800402c:	4b1b      	ldr	r3, [pc, #108]	; (800409c <HAL_PWREx_ConfigSupply+0x9c>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	4a1a      	ldr	r2, [pc, #104]	; (800409c <HAL_PWREx_ConfigSupply+0x9c>)
 8004032:	f023 0302 	bic.w	r3, r3, #2
 8004036:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004038:	e002      	b.n	8004040 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	3b01      	subs	r3, #1
 800403e:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004040:	4b16      	ldr	r3, [pc, #88]	; (800409c <HAL_PWREx_ConfigSupply+0x9c>)
 8004042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b02      	cmp	r3, #2
 800404a:	d116      	bne.n	800407a <HAL_PWREx_ConfigSupply+0x7a>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1f3      	bne.n	800403a <HAL_PWREx_ConfigSupply+0x3a>
 8004052:	e012      	b.n	800407a <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004054:	4b11      	ldr	r3, [pc, #68]	; (800409c <HAL_PWREx_ConfigSupply+0x9c>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	4a10      	ldr	r2, [pc, #64]	; (800409c <HAL_PWREx_ConfigSupply+0x9c>)
 800405a:	f043 0302 	orr.w	r3, r3, #2
 800405e:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004060:	e002      	b.n	8004068 <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	3b01      	subs	r3, #1
 8004066:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004068:	4b0c      	ldr	r3, [pc, #48]	; (800409c <HAL_PWREx_ConfigSupply+0x9c>)
 800406a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d102      	bne.n	800407a <HAL_PWREx_ConfigSupply+0x7a>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1f3      	bne.n	8004062 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e000      	b.n	8004086 <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	20000000 	.word	0x20000000
 8004098:	10624dd3 	.word	0x10624dd3
 800409c:	46020800 	.word	0x46020800

080040a0 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80040a0:	b480      	push	{r7}
 80040a2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80040a4:	4b05      	ldr	r3, [pc, #20]	; (80040bc <HAL_PWREx_EnableVddUSB+0x1c>)
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	4a04      	ldr	r2, [pc, #16]	; (80040bc <HAL_PWREx_EnableVddUSB+0x1c>)
 80040aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ae:	6113      	str	r3, [r2, #16]
}
 80040b0:	bf00      	nop
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	46020800 	.word	0x46020800

080040c0 <HAL_PWREx_EnableVddIO2>:
  * @note   Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80040c0:	b480      	push	{r7}
 80040c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_IO2SV);
 80040c4:	4b05      	ldr	r3, [pc, #20]	; (80040dc <HAL_PWREx_EnableVddIO2+0x1c>)
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	4a04      	ldr	r2, [pc, #16]	; (80040dc <HAL_PWREx_EnableVddIO2+0x1c>)
 80040ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040ce:	6113      	str	r3, [r2, #16]
}
 80040d0:	bf00      	nop
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	46020800 	.word	0x46020800

080040e0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b08e      	sub	sp, #56	; 0x38
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 80040e8:	2300      	movs	r3, #0
 80040ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d102      	bne.n	80040fa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	f000 bec3 	b.w	8004e80 <HAL_RCC_OscConfig+0xda0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040fa:	4b9c      	ldr	r3, [pc, #624]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 80040fc:	69db      	ldr	r3, [r3, #28]
 80040fe:	f003 030c 	and.w	r3, r3, #12
 8004102:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004104:	4b99      	ldr	r3, [pc, #612]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 8004106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004108:	f003 0303 	and.w	r3, r3, #3
 800410c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0310 	and.w	r3, r3, #16
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 8172 	beq.w	8004400 <HAL_RCC_OscConfig+0x320>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800411c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800411e:	2b00      	cmp	r3, #0
 8004120:	d007      	beq.n	8004132 <HAL_RCC_OscConfig+0x52>
 8004122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004124:	2b0c      	cmp	r3, #12
 8004126:	f040 80e4 	bne.w	80042f2 <HAL_RCC_OscConfig+0x212>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800412a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800412c:	2b01      	cmp	r3, #1
 800412e:	f040 80e0 	bne.w	80042f2 <HAL_RCC_OscConfig+0x212>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004132:	4b8e      	ldr	r3, [pc, #568]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0304 	and.w	r3, r3, #4
 800413a:	2b00      	cmp	r3, #0
 800413c:	d006      	beq.n	800414c <HAL_RCC_OscConfig+0x6c>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d102      	bne.n	800414c <HAL_RCC_OscConfig+0x6c>
      {
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	f000 be9a 	b.w	8004e80 <HAL_RCC_OscConfig+0xda0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004150:	4b86      	ldr	r3, [pc, #536]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d004      	beq.n	8004166 <HAL_RCC_OscConfig+0x86>
 800415c:	4b83      	ldr	r3, [pc, #524]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004164:	e005      	b.n	8004172 <HAL_RCC_OscConfig+0x92>
 8004166:	4b81      	ldr	r3, [pc, #516]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 8004168:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800416c:	041b      	lsls	r3, r3, #16
 800416e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004172:	4293      	cmp	r3, r2
 8004174:	d255      	bcs.n	8004222 <HAL_RCC_OscConfig+0x142>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004178:	2b00      	cmp	r3, #0
 800417a:	d10a      	bne.n	8004192 <HAL_RCC_OscConfig+0xb2>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	4618      	mov	r0, r3
 8004182:	f001 f9d3 	bl	800552c <RCC_SetFlashLatencyFromMSIRange>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d002      	beq.n	8004192 <HAL_RCC_OscConfig+0xb2>
            {
              return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	f000 be77 	b.w	8004e80 <HAL_RCC_OscConfig+0xda0>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004192:	4b76      	ldr	r3, [pc, #472]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	4a75      	ldr	r2, [pc, #468]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 8004198:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800419c:	6093      	str	r3, [r2, #8]
 800419e:	4b73      	ldr	r3, [pc, #460]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	4970      	ldr	r1, [pc, #448]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80041b8:	d309      	bcc.n	80041ce <HAL_RCC_OscConfig+0xee>
 80041ba:	4b6c      	ldr	r3, [pc, #432]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 80041bc:	68db      	ldr	r3, [r3, #12]
 80041be:	f023 021f 	bic.w	r2, r3, #31
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	4969      	ldr	r1, [pc, #420]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	60cb      	str	r3, [r1, #12]
 80041cc:	e07e      	b.n	80042cc <HAL_RCC_OscConfig+0x1ec>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	da0a      	bge.n	80041ec <HAL_RCC_OscConfig+0x10c>
 80041d6:	4b65      	ldr	r3, [pc, #404]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 80041d8:	68db      	ldr	r3, [r3, #12]
 80041da:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a1b      	ldr	r3, [r3, #32]
 80041e2:	015b      	lsls	r3, r3, #5
 80041e4:	4961      	ldr	r1, [pc, #388]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60cb      	str	r3, [r1, #12]
 80041ea:	e06f      	b.n	80042cc <HAL_RCC_OscConfig+0x1ec>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041f4:	d30a      	bcc.n	800420c <HAL_RCC_OscConfig+0x12c>
 80041f6:	4b5d      	ldr	r3, [pc, #372]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	029b      	lsls	r3, r3, #10
 8004204:	4959      	ldr	r1, [pc, #356]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 8004206:	4313      	orrs	r3, r2
 8004208:	60cb      	str	r3, [r1, #12]
 800420a:	e05f      	b.n	80042cc <HAL_RCC_OscConfig+0x1ec>
 800420c:	4b57      	ldr	r3, [pc, #348]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	03db      	lsls	r3, r3, #15
 800421a:	4954      	ldr	r1, [pc, #336]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 800421c:	4313      	orrs	r3, r2
 800421e:	60cb      	str	r3, [r1, #12]
 8004220:	e054      	b.n	80042cc <HAL_RCC_OscConfig+0x1ec>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004222:	4b52      	ldr	r3, [pc, #328]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	4a51      	ldr	r2, [pc, #324]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 8004228:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800422c:	6093      	str	r3, [r2, #8]
 800422e:	4b4f      	ldr	r3, [pc, #316]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423a:	494c      	ldr	r1, [pc, #304]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 800423c:	4313      	orrs	r3, r2
 800423e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004248:	d309      	bcc.n	800425e <HAL_RCC_OscConfig+0x17e>
 800424a:	4b48      	ldr	r3, [pc, #288]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	f023 021f 	bic.w	r2, r3, #31
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	4945      	ldr	r1, [pc, #276]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 8004258:	4313      	orrs	r3, r2
 800425a:	60cb      	str	r3, [r1, #12]
 800425c:	e028      	b.n	80042b0 <HAL_RCC_OscConfig+0x1d0>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	2b00      	cmp	r3, #0
 8004264:	da0a      	bge.n	800427c <HAL_RCC_OscConfig+0x19c>
 8004266:	4b41      	ldr	r3, [pc, #260]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	015b      	lsls	r3, r3, #5
 8004274:	493d      	ldr	r1, [pc, #244]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 8004276:	4313      	orrs	r3, r2
 8004278:	60cb      	str	r3, [r1, #12]
 800427a:	e019      	b.n	80042b0 <HAL_RCC_OscConfig+0x1d0>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004284:	d30a      	bcc.n	800429c <HAL_RCC_OscConfig+0x1bc>
 8004286:	4b39      	ldr	r3, [pc, #228]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	029b      	lsls	r3, r3, #10
 8004294:	4935      	ldr	r1, [pc, #212]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 8004296:	4313      	orrs	r3, r2
 8004298:	60cb      	str	r3, [r1, #12]
 800429a:	e009      	b.n	80042b0 <HAL_RCC_OscConfig+0x1d0>
 800429c:	4b33      	ldr	r3, [pc, #204]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a1b      	ldr	r3, [r3, #32]
 80042a8:	03db      	lsls	r3, r3, #15
 80042aa:	4930      	ldr	r1, [pc, #192]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80042b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10a      	bne.n	80042cc <HAL_RCC_OscConfig+0x1ec>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ba:	4618      	mov	r0, r3
 80042bc:	f001 f936 	bl	800552c <RCC_SetFlashLatencyFromMSIRange>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <HAL_RCC_OscConfig+0x1ec>
            {
              return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	f000 bdda 	b.w	8004e80 <HAL_RCC_OscConfig+0xda0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80042cc:	f001 f8d8 	bl	8005480 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80042d0:	4b27      	ldr	r3, [pc, #156]	; (8004370 <HAL_RCC_OscConfig+0x290>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f7fd fe8d 	bl	8001ff4 <HAL_InitTick>
 80042da:	4603      	mov	r3, r0
 80042dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 80042e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 808a 	beq.w	80043fe <HAL_RCC_OscConfig+0x31e>
        {
          return status;
 80042ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042ee:	f000 bdc7 	b.w	8004e80 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d066      	beq.n	80043c8 <HAL_RCC_OscConfig+0x2e8>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 80042fa:	4b1c      	ldr	r3, [pc, #112]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a1b      	ldr	r2, [pc, #108]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 8004300:	f043 0301 	orr.w	r3, r3, #1
 8004304:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004306:	f7fd febf 	bl	8002088 <HAL_GetTick>
 800430a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800430c:	e009      	b.n	8004322 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800430e:	f7fd febb 	bl	8002088 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d902      	bls.n	8004322 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	f000 bdaf 	b.w	8004e80 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004322:	4b12      	ldr	r3, [pc, #72]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0304 	and.w	r3, r3, #4
 800432a:	2b00      	cmp	r3, #0
 800432c:	d0ef      	beq.n	800430e <HAL_RCC_OscConfig+0x22e>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800432e:	4b0f      	ldr	r3, [pc, #60]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	4a0e      	ldr	r2, [pc, #56]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 8004334:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004338:	6093      	str	r3, [r2, #8]
 800433a:	4b0c      	ldr	r3, [pc, #48]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	4909      	ldr	r1, [pc, #36]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 8004348:	4313      	orrs	r3, r2
 800434a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004350:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004354:	d30e      	bcc.n	8004374 <HAL_RCC_OscConfig+0x294>
 8004356:	4b05      	ldr	r3, [pc, #20]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	f023 021f 	bic.w	r2, r3, #31
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	4902      	ldr	r1, [pc, #8]	; (800436c <HAL_RCC_OscConfig+0x28c>)
 8004364:	4313      	orrs	r3, r2
 8004366:	60cb      	str	r3, [r1, #12]
 8004368:	e04a      	b.n	8004400 <HAL_RCC_OscConfig+0x320>
 800436a:	bf00      	nop
 800436c:	46020c00 	.word	0x46020c00
 8004370:	20000004 	.word	0x20000004
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004378:	2b00      	cmp	r3, #0
 800437a:	da0a      	bge.n	8004392 <HAL_RCC_OscConfig+0x2b2>
 800437c:	4b9b      	ldr	r3, [pc, #620]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	015b      	lsls	r3, r3, #5
 800438a:	4998      	ldr	r1, [pc, #608]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 800438c:	4313      	orrs	r3, r2
 800438e:	60cb      	str	r3, [r1, #12]
 8004390:	e036      	b.n	8004400 <HAL_RCC_OscConfig+0x320>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800439a:	d30a      	bcc.n	80043b2 <HAL_RCC_OscConfig+0x2d2>
 800439c:	4b93      	ldr	r3, [pc, #588]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a1b      	ldr	r3, [r3, #32]
 80043a8:	029b      	lsls	r3, r3, #10
 80043aa:	4990      	ldr	r1, [pc, #576]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	60cb      	str	r3, [r1, #12]
 80043b0:	e026      	b.n	8004400 <HAL_RCC_OscConfig+0x320>
 80043b2:	4b8e      	ldr	r3, [pc, #568]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a1b      	ldr	r3, [r3, #32]
 80043be:	03db      	lsls	r3, r3, #15
 80043c0:	498a      	ldr	r1, [pc, #552]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	60cb      	str	r3, [r1, #12]
 80043c6:	e01b      	b.n	8004400 <HAL_RCC_OscConfig+0x320>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80043c8:	4b88      	ldr	r3, [pc, #544]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a87      	ldr	r2, [pc, #540]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 80043ce:	f023 0301 	bic.w	r3, r3, #1
 80043d2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80043d4:	f7fd fe58 	bl	8002088 <HAL_GetTick>
 80043d8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80043da:	e009      	b.n	80043f0 <HAL_RCC_OscConfig+0x310>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043dc:	f7fd fe54 	bl	8002088 <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d902      	bls.n	80043f0 <HAL_RCC_OscConfig+0x310>
          {
            return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	f000 bd48 	b.w	8004e80 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80043f0:	4b7e      	ldr	r3, [pc, #504]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0304 	and.w	r3, r3, #4
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1ef      	bne.n	80043dc <HAL_RCC_OscConfig+0x2fc>
 80043fc:	e000      	b.n	8004400 <HAL_RCC_OscConfig+0x320>
      if ((READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U) && (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 8094 	beq.w	8004536 <HAL_RCC_OscConfig+0x456>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800440e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004410:	2b08      	cmp	r3, #8
 8004412:	d005      	beq.n	8004420 <HAL_RCC_OscConfig+0x340>
 8004414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004416:	2b0c      	cmp	r3, #12
 8004418:	d110      	bne.n	800443c <HAL_RCC_OscConfig+0x35c>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800441a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441c:	2b03      	cmp	r3, #3
 800441e:	d10d      	bne.n	800443c <HAL_RCC_OscConfig+0x35c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004420:	4b72      	ldr	r3, [pc, #456]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004428:	2b00      	cmp	r3, #0
 800442a:	f000 8083 	beq.w	8004534 <HAL_RCC_OscConfig+0x454>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d17e      	bne.n	8004534 <HAL_RCC_OscConfig+0x454>
      {
        return HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	f000 bd22 	b.w	8004e80 <HAL_RCC_OscConfig+0xda0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004444:	d106      	bne.n	8004454 <HAL_RCC_OscConfig+0x374>
 8004446:	4b69      	ldr	r3, [pc, #420]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a68      	ldr	r2, [pc, #416]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 800444c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004450:	6013      	str	r3, [r2, #0]
 8004452:	e041      	b.n	80044d8 <HAL_RCC_OscConfig+0x3f8>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800445c:	d112      	bne.n	8004484 <HAL_RCC_OscConfig+0x3a4>
 800445e:	4b63      	ldr	r3, [pc, #396]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a62      	ldr	r2, [pc, #392]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 8004464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004468:	6013      	str	r3, [r2, #0]
 800446a:	4b60      	ldr	r3, [pc, #384]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a5f      	ldr	r2, [pc, #380]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 8004470:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	4b5d      	ldr	r3, [pc, #372]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a5c      	ldr	r2, [pc, #368]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 800447c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004480:	6013      	str	r3, [r2, #0]
 8004482:	e029      	b.n	80044d8 <HAL_RCC_OscConfig+0x3f8>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800448c:	d112      	bne.n	80044b4 <HAL_RCC_OscConfig+0x3d4>
 800448e:	4b57      	ldr	r3, [pc, #348]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a56      	ldr	r2, [pc, #344]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 8004494:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	4b54      	ldr	r3, [pc, #336]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a53      	ldr	r2, [pc, #332]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 80044a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80044a4:	6013      	str	r3, [r2, #0]
 80044a6:	4b51      	ldr	r3, [pc, #324]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a50      	ldr	r2, [pc, #320]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 80044ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044b0:	6013      	str	r3, [r2, #0]
 80044b2:	e011      	b.n	80044d8 <HAL_RCC_OscConfig+0x3f8>
 80044b4:	4b4d      	ldr	r3, [pc, #308]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a4c      	ldr	r2, [pc, #304]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 80044ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044be:	6013      	str	r3, [r2, #0]
 80044c0:	4b4a      	ldr	r3, [pc, #296]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a49      	ldr	r2, [pc, #292]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 80044c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044ca:	6013      	str	r3, [r2, #0]
 80044cc:	4b47      	ldr	r3, [pc, #284]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a46      	ldr	r2, [pc, #280]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 80044d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80044d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d014      	beq.n	800450a <HAL_RCC_OscConfig+0x42a>
      {
        tickstart = HAL_GetTick();
 80044e0:	f7fd fdd2 	bl	8002088 <HAL_GetTick>
 80044e4:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044e6:	e009      	b.n	80044fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044e8:	f7fd fdce 	bl	8002088 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b64      	cmp	r3, #100	; 0x64
 80044f4:	d902      	bls.n	80044fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	f000 bcc2 	b.w	8004e80 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044fc:	4b3b      	ldr	r3, [pc, #236]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d0ef      	beq.n	80044e8 <HAL_RCC_OscConfig+0x408>
 8004508:	e015      	b.n	8004536 <HAL_RCC_OscConfig+0x456>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 800450a:	f7fd fdbd 	bl	8002088 <HAL_GetTick>
 800450e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004510:	e009      	b.n	8004526 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004512:	f7fd fdb9 	bl	8002088 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	2b64      	cmp	r3, #100	; 0x64
 800451e:	d902      	bls.n	8004526 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8004520:	2303      	movs	r3, #3
 8004522:	f000 bcad 	b.w	8004e80 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004526:	4b31      	ldr	r3, [pc, #196]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1ef      	bne.n	8004512 <HAL_RCC_OscConfig+0x432>
 8004532:	e000      	b.n	8004536 <HAL_RCC_OscConfig+0x456>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004534:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d066      	beq.n	8004610 <HAL_RCC_OscConfig+0x530>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004544:	2b04      	cmp	r3, #4
 8004546:	d005      	beq.n	8004554 <HAL_RCC_OscConfig+0x474>
 8004548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454a:	2b0c      	cmp	r3, #12
 800454c:	d11a      	bne.n	8004584 <HAL_RCC_OscConfig+0x4a4>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800454e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004550:	2b02      	cmp	r3, #2
 8004552:	d117      	bne.n	8004584 <HAL_RCC_OscConfig+0x4a4>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004554:	4b25      	ldr	r3, [pc, #148]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800455c:	2b00      	cmp	r3, #0
 800455e:	d006      	beq.n	800456e <HAL_RCC_OscConfig+0x48e>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d102      	bne.n	800456e <HAL_RCC_OscConfig+0x48e>
      {
        return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	f000 bc89 	b.w	8004e80 <HAL_RCC_OscConfig+0xda0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 800456e:	4b1f      	ldr	r3, [pc, #124]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	041b      	lsls	r3, r3, #16
 800457c:	491b      	ldr	r1, [pc, #108]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 800457e:	4313      	orrs	r3, r2
 8004580:	610b      	str	r3, [r1, #16]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004582:	e045      	b.n	8004610 <HAL_RCC_OscConfig+0x530>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d024      	beq.n	80045d6 <HAL_RCC_OscConfig+0x4f6>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 800458c:	4b17      	ldr	r3, [pc, #92]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a16      	ldr	r2, [pc, #88]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 8004592:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004596:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004598:	f7fd fd76 	bl	8002088 <HAL_GetTick>
 800459c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800459e:	e009      	b.n	80045b4 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045a0:	f7fd fd72 	bl	8002088 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d902      	bls.n	80045b4 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	f000 bc66 	b.w	8004e80 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045b4:	4b0d      	ldr	r3, [pc, #52]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0ef      	beq.n	80045a0 <HAL_RCC_OscConfig+0x4c0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80045c0:	4b0a      	ldr	r3, [pc, #40]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	041b      	lsls	r3, r3, #16
 80045ce:	4907      	ldr	r1, [pc, #28]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	610b      	str	r3, [r1, #16]
 80045d4:	e01c      	b.n	8004610 <HAL_RCC_OscConfig+0x530>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80045d6:	4b05      	ldr	r3, [pc, #20]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a04      	ldr	r2, [pc, #16]	; (80045ec <HAL_RCC_OscConfig+0x50c>)
 80045dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045e0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80045e2:	f7fd fd51 	bl	8002088 <HAL_GetTick>
 80045e6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045e8:	e00c      	b.n	8004604 <HAL_RCC_OscConfig+0x524>
 80045ea:	bf00      	nop
 80045ec:	46020c00 	.word	0x46020c00
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045f0:	f7fd fd4a 	bl	8002088 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d902      	bls.n	8004604 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	f000 bc3e 	b.w	8004e80 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004604:	4baf      	ldr	r3, [pc, #700]	; (80048c4 <HAL_RCC_OscConfig+0x7e4>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800460c:	2b00      	cmp	r3, #0
 800460e:	d1ef      	bne.n	80045f0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0308 	and.w	r3, r3, #8
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 80c7 	beq.w	80047ac <HAL_RCC_OscConfig+0x6cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 800461e:	2300      	movs	r3, #0
 8004620:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004624:	4ba7      	ldr	r3, [pc, #668]	; (80048c4 <HAL_RCC_OscConfig+0x7e4>)
 8004626:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800462a:	f003 0304 	and.w	r3, r3, #4
 800462e:	2b00      	cmp	r3, #0
 8004630:	d111      	bne.n	8004656 <HAL_RCC_OscConfig+0x576>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004632:	4ba4      	ldr	r3, [pc, #656]	; (80048c4 <HAL_RCC_OscConfig+0x7e4>)
 8004634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004638:	4aa2      	ldr	r2, [pc, #648]	; (80048c4 <HAL_RCC_OscConfig+0x7e4>)
 800463a:	f043 0304 	orr.w	r3, r3, #4
 800463e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004642:	4ba0      	ldr	r3, [pc, #640]	; (80048c4 <HAL_RCC_OscConfig+0x7e4>)
 8004644:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004650:	2301      	movs	r3, #1
 8004652:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004656:	4b9c      	ldr	r3, [pc, #624]	; (80048c8 <HAL_RCC_OscConfig+0x7e8>)
 8004658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d118      	bne.n	8004694 <HAL_RCC_OscConfig+0x5b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004662:	4b99      	ldr	r3, [pc, #612]	; (80048c8 <HAL_RCC_OscConfig+0x7e8>)
 8004664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004666:	4a98      	ldr	r2, [pc, #608]	; (80048c8 <HAL_RCC_OscConfig+0x7e8>)
 8004668:	f043 0301 	orr.w	r3, r3, #1
 800466c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800466e:	f7fd fd0b 	bl	8002088 <HAL_GetTick>
 8004672:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004674:	e008      	b.n	8004688 <HAL_RCC_OscConfig+0x5a8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004676:	f7fd fd07 	bl	8002088 <HAL_GetTick>
 800467a:	4602      	mov	r2, r0
 800467c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467e:	1ad3      	subs	r3, r2, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d901      	bls.n	8004688 <HAL_RCC_OscConfig+0x5a8>
        {
          return HAL_TIMEOUT;
 8004684:	2303      	movs	r3, #3
 8004686:	e3fb      	b.n	8004e80 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004688:	4b8f      	ldr	r3, [pc, #572]	; (80048c8 <HAL_RCC_OscConfig+0x7e8>)
 800468a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b00      	cmp	r3, #0
 8004692:	d0f0      	beq.n	8004676 <HAL_RCC_OscConfig+0x596>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d05f      	beq.n	800475c <HAL_RCC_OscConfig+0x67c>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 800469c:	4b89      	ldr	r3, [pc, #548]	; (80048c4 <HAL_RCC_OscConfig+0x7e4>)
 800469e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046a2:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	699a      	ldr	r2, [r3, #24]
 80046a8:	6a3b      	ldr	r3, [r7, #32]
 80046aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d037      	beq.n	8004722 <HAL_RCC_OscConfig+0x642>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d006      	beq.n	80046ca <HAL_RCC_OscConfig+0x5ea>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_RCC_OscConfig+0x5ea>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e3da      	b.n	8004e80 <HAL_RCC_OscConfig+0xda0>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80046ca:	6a3b      	ldr	r3, [r7, #32]
 80046cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d01b      	beq.n	800470c <HAL_RCC_OscConfig+0x62c>
        {
          __HAL_RCC_LSI_DISABLE();
 80046d4:	4b7b      	ldr	r3, [pc, #492]	; (80048c4 <HAL_RCC_OscConfig+0x7e4>)
 80046d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80046da:	4a7a      	ldr	r2, [pc, #488]	; (80048c4 <HAL_RCC_OscConfig+0x7e4>)
 80046dc:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80046e0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 80046e4:	f7fd fcd0 	bl	8002088 <HAL_GetTick>
 80046e8:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0x61e>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046ec:	f7fd fccc 	bl	8002088 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x61e>
            {
              return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e3c0      	b.n	8004e80 <HAL_RCC_OscConfig+0xda0>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 80046fe:	4b71      	ldr	r3, [pc, #452]	; (80048c4 <HAL_RCC_OscConfig+0x7e4>)
 8004700:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004704:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1ef      	bne.n	80046ec <HAL_RCC_OscConfig+0x60c>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 800470c:	4b6d      	ldr	r3, [pc, #436]	; (80048c4 <HAL_RCC_OscConfig+0x7e4>)
 800470e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004712:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	496a      	ldr	r1, [pc, #424]	; (80048c4 <HAL_RCC_OscConfig+0x7e4>)
 800471c:	4313      	orrs	r3, r2
 800471e:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004722:	4b68      	ldr	r3, [pc, #416]	; (80048c4 <HAL_RCC_OscConfig+0x7e4>)
 8004724:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004728:	4a66      	ldr	r2, [pc, #408]	; (80048c4 <HAL_RCC_OscConfig+0x7e4>)
 800472a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800472e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8004732:	f7fd fca9 	bl	8002088 <HAL_GetTick>
 8004736:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004738:	e008      	b.n	800474c <HAL_RCC_OscConfig+0x66c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800473a:	f7fd fca5 	bl	8002088 <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d901      	bls.n	800474c <HAL_RCC_OscConfig+0x66c>
        {
          return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e399      	b.n	8004e80 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 800474c:	4b5d      	ldr	r3, [pc, #372]	; (80048c4 <HAL_RCC_OscConfig+0x7e4>)
 800474e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004752:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004756:	2b00      	cmp	r3, #0
 8004758:	d0ef      	beq.n	800473a <HAL_RCC_OscConfig+0x65a>
 800475a:	e01b      	b.n	8004794 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 800475c:	4b59      	ldr	r3, [pc, #356]	; (80048c4 <HAL_RCC_OscConfig+0x7e4>)
 800475e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004762:	4a58      	ldr	r2, [pc, #352]	; (80048c4 <HAL_RCC_OscConfig+0x7e4>)
 8004764:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8004768:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 800476c:	f7fd fc8c 	bl	8002088 <HAL_GetTick>
 8004770:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0x6a6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004774:	f7fd fc88 	bl	8002088 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x6a6>
        {
          return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e37c      	b.n	8004e80 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004786:	4b4f      	ldr	r3, [pc, #316]	; (80048c4 <HAL_RCC_OscConfig+0x7e4>)
 8004788:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800478c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004790:	2b00      	cmp	r3, #0
 8004792:	d1ef      	bne.n	8004774 <HAL_RCC_OscConfig+0x694>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004794:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004798:	2b01      	cmp	r3, #1
 800479a:	d107      	bne.n	80047ac <HAL_RCC_OscConfig+0x6cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800479c:	4b49      	ldr	r3, [pc, #292]	; (80048c4 <HAL_RCC_OscConfig+0x7e4>)
 800479e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047a2:	4a48      	ldr	r2, [pc, #288]	; (80048c4 <HAL_RCC_OscConfig+0x7e4>)
 80047a4:	f023 0304 	bic.w	r3, r3, #4
 80047a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	f000 8112 	beq.w	80049de <HAL_RCC_OscConfig+0x8fe>
  {
    FlagStatus pwrclkchanged = RESET;
 80047ba:	2300      	movs	r3, #0
 80047bc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047c0:	4b40      	ldr	r3, [pc, #256]	; (80048c4 <HAL_RCC_OscConfig+0x7e4>)
 80047c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047c6:	f003 0304 	and.w	r3, r3, #4
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d111      	bne.n	80047f2 <HAL_RCC_OscConfig+0x712>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047ce:	4b3d      	ldr	r3, [pc, #244]	; (80048c4 <HAL_RCC_OscConfig+0x7e4>)
 80047d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047d4:	4a3b      	ldr	r2, [pc, #236]	; (80048c4 <HAL_RCC_OscConfig+0x7e4>)
 80047d6:	f043 0304 	orr.w	r3, r3, #4
 80047da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80047de:	4b39      	ldr	r3, [pc, #228]	; (80048c4 <HAL_RCC_OscConfig+0x7e4>)
 80047e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047e4:	f003 0304 	and.w	r3, r3, #4
 80047e8:	613b      	str	r3, [r7, #16]
 80047ea:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 80047ec:	2301      	movs	r3, #1
 80047ee:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80047f2:	4b35      	ldr	r3, [pc, #212]	; (80048c8 <HAL_RCC_OscConfig+0x7e8>)
 80047f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d118      	bne.n	8004830 <HAL_RCC_OscConfig+0x750>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80047fe:	4b32      	ldr	r3, [pc, #200]	; (80048c8 <HAL_RCC_OscConfig+0x7e8>)
 8004800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004802:	4a31      	ldr	r2, [pc, #196]	; (80048c8 <HAL_RCC_OscConfig+0x7e8>)
 8004804:	f043 0301 	orr.w	r3, r3, #1
 8004808:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800480a:	f7fd fc3d 	bl	8002088 <HAL_GetTick>
 800480e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004810:	e008      	b.n	8004824 <HAL_RCC_OscConfig+0x744>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004812:	f7fd fc39 	bl	8002088 <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d901      	bls.n	8004824 <HAL_RCC_OscConfig+0x744>
        {
          return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e32d      	b.n	8004e80 <HAL_RCC_OscConfig+0xda0>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004824:	4b28      	ldr	r3, [pc, #160]	; (80048c8 <HAL_RCC_OscConfig+0x7e8>)
 8004826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b00      	cmp	r3, #0
 800482e:	d0f0      	beq.n	8004812 <HAL_RCC_OscConfig+0x732>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	d01f      	beq.n	800487c <HAL_RCC_OscConfig+0x79c>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	689b      	ldr	r3, [r3, #8]
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b00      	cmp	r3, #0
 8004846:	d010      	beq.n	800486a <HAL_RCC_OscConfig+0x78a>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004848:	4b1e      	ldr	r3, [pc, #120]	; (80048c4 <HAL_RCC_OscConfig+0x7e4>)
 800484a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800484e:	4a1d      	ldr	r2, [pc, #116]	; (80048c4 <HAL_RCC_OscConfig+0x7e4>)
 8004850:	f043 0304 	orr.w	r3, r3, #4
 8004854:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004858:	4b1a      	ldr	r3, [pc, #104]	; (80048c4 <HAL_RCC_OscConfig+0x7e4>)
 800485a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800485e:	4a19      	ldr	r2, [pc, #100]	; (80048c4 <HAL_RCC_OscConfig+0x7e4>)
 8004860:	f043 0301 	orr.w	r3, r3, #1
 8004864:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004868:	e018      	b.n	800489c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800486a:	4b16      	ldr	r3, [pc, #88]	; (80048c4 <HAL_RCC_OscConfig+0x7e4>)
 800486c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004870:	4a14      	ldr	r2, [pc, #80]	; (80048c4 <HAL_RCC_OscConfig+0x7e4>)
 8004872:	f043 0301 	orr.w	r3, r3, #1
 8004876:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800487a:	e00f      	b.n	800489c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800487c:	4b11      	ldr	r3, [pc, #68]	; (80048c4 <HAL_RCC_OscConfig+0x7e4>)
 800487e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004882:	4a10      	ldr	r2, [pc, #64]	; (80048c4 <HAL_RCC_OscConfig+0x7e4>)
 8004884:	f023 0301 	bic.w	r3, r3, #1
 8004888:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800488c:	4b0d      	ldr	r3, [pc, #52]	; (80048c4 <HAL_RCC_OscConfig+0x7e4>)
 800488e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004892:	4a0c      	ldr	r2, [pc, #48]	; (80048c4 <HAL_RCC_OscConfig+0x7e4>)
 8004894:	f023 0304 	bic.w	r3, r3, #4
 8004898:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d058      	beq.n	8004956 <HAL_RCC_OscConfig+0x876>
    {
      tickstart = HAL_GetTick();
 80048a4:	f7fd fbf0 	bl	8002088 <HAL_GetTick>
 80048a8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048aa:	e00f      	b.n	80048cc <HAL_RCC_OscConfig+0x7ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ac:	f7fd fbec 	bl	8002088 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d906      	bls.n	80048cc <HAL_RCC_OscConfig+0x7ec>
        {
          return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e2de      	b.n	8004e80 <HAL_RCC_OscConfig+0xda0>
 80048c2:	bf00      	nop
 80048c4:	46020c00 	.word	0x46020c00
 80048c8:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048cc:	4b9c      	ldr	r3, [pc, #624]	; (8004b40 <HAL_RCC_OscConfig+0xa60>)
 80048ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0e8      	beq.n	80048ac <HAL_RCC_OscConfig+0x7cc>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d01b      	beq.n	800491e <HAL_RCC_OscConfig+0x83e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80048e6:	4b96      	ldr	r3, [pc, #600]	; (8004b40 <HAL_RCC_OscConfig+0xa60>)
 80048e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80048ec:	4a94      	ldr	r2, [pc, #592]	; (8004b40 <HAL_RCC_OscConfig+0xa60>)
 80048ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048f2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80048f6:	e00a      	b.n	800490e <HAL_RCC_OscConfig+0x82e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048f8:	f7fd fbc6 	bl	8002088 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	f241 3288 	movw	r2, #5000	; 0x1388
 8004906:	4293      	cmp	r3, r2
 8004908:	d901      	bls.n	800490e <HAL_RCC_OscConfig+0x82e>
          {
            return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e2b8      	b.n	8004e80 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800490e:	4b8c      	ldr	r3, [pc, #560]	; (8004b40 <HAL_RCC_OscConfig+0xa60>)
 8004910:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004914:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0ed      	beq.n	80048f8 <HAL_RCC_OscConfig+0x818>
 800491c:	e053      	b.n	80049c6 <HAL_RCC_OscConfig+0x8e6>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800491e:	4b88      	ldr	r3, [pc, #544]	; (8004b40 <HAL_RCC_OscConfig+0xa60>)
 8004920:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004924:	4a86      	ldr	r2, [pc, #536]	; (8004b40 <HAL_RCC_OscConfig+0xa60>)
 8004926:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800492a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800492e:	e00a      	b.n	8004946 <HAL_RCC_OscConfig+0x866>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004930:	f7fd fbaa 	bl	8002088 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	f241 3288 	movw	r2, #5000	; 0x1388
 800493e:	4293      	cmp	r3, r2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x866>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e29c      	b.n	8004e80 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004946:	4b7e      	ldr	r3, [pc, #504]	; (8004b40 <HAL_RCC_OscConfig+0xa60>)
 8004948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800494c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1ed      	bne.n	8004930 <HAL_RCC_OscConfig+0x850>
 8004954:	e037      	b.n	80049c6 <HAL_RCC_OscConfig+0x8e6>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8004956:	f7fd fb97 	bl	8002088 <HAL_GetTick>
 800495a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800495c:	e00a      	b.n	8004974 <HAL_RCC_OscConfig+0x894>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800495e:	f7fd fb93 	bl	8002088 <HAL_GetTick>
 8004962:	4602      	mov	r2, r0
 8004964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	f241 3288 	movw	r2, #5000	; 0x1388
 800496c:	4293      	cmp	r3, r2
 800496e:	d901      	bls.n	8004974 <HAL_RCC_OscConfig+0x894>
        {
          return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e285      	b.n	8004e80 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004974:	4b72      	ldr	r3, [pc, #456]	; (8004b40 <HAL_RCC_OscConfig+0xa60>)
 8004976:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b00      	cmp	r3, #0
 8004980:	d1ed      	bne.n	800495e <HAL_RCC_OscConfig+0x87e>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004982:	4b6f      	ldr	r3, [pc, #444]	; (8004b40 <HAL_RCC_OscConfig+0xa60>)
 8004984:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800498c:	2b00      	cmp	r3, #0
 800498e:	d01a      	beq.n	80049c6 <HAL_RCC_OscConfig+0x8e6>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004990:	4b6b      	ldr	r3, [pc, #428]	; (8004b40 <HAL_RCC_OscConfig+0xa60>)
 8004992:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004996:	4a6a      	ldr	r2, [pc, #424]	; (8004b40 <HAL_RCC_OscConfig+0xa60>)
 8004998:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800499c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80049a0:	e00a      	b.n	80049b8 <HAL_RCC_OscConfig+0x8d8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049a2:	f7fd fb71 	bl	8002088 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d901      	bls.n	80049b8 <HAL_RCC_OscConfig+0x8d8>
          {
            return HAL_TIMEOUT;
 80049b4:	2303      	movs	r3, #3
 80049b6:	e263      	b.n	8004e80 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80049b8:	4b61      	ldr	r3, [pc, #388]	; (8004b40 <HAL_RCC_OscConfig+0xa60>)
 80049ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80049be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1ed      	bne.n	80049a2 <HAL_RCC_OscConfig+0x8c2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80049c6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d107      	bne.n	80049de <HAL_RCC_OscConfig+0x8fe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049ce:	4b5c      	ldr	r3, [pc, #368]	; (8004b40 <HAL_RCC_OscConfig+0xa60>)
 80049d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049d4:	4a5a      	ldr	r2, [pc, #360]	; (8004b40 <HAL_RCC_OscConfig+0xa60>)
 80049d6:	f023 0304 	bic.w	r3, r3, #4
 80049da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0320 	and.w	r3, r3, #32
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d036      	beq.n	8004a58 <HAL_RCC_OscConfig+0x978>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d019      	beq.n	8004a26 <HAL_RCC_OscConfig+0x946>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 80049f2:	4b53      	ldr	r3, [pc, #332]	; (8004b40 <HAL_RCC_OscConfig+0xa60>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a52      	ldr	r2, [pc, #328]	; (8004b40 <HAL_RCC_OscConfig+0xa60>)
 80049f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049fc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80049fe:	f7fd fb43 	bl	8002088 <HAL_GetTick>
 8004a02:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004a04:	e008      	b.n	8004a18 <HAL_RCC_OscConfig+0x938>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a06:	f7fd fb3f 	bl	8002088 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d901      	bls.n	8004a18 <HAL_RCC_OscConfig+0x938>
        {
          return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e233      	b.n	8004e80 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004a18:	4b49      	ldr	r3, [pc, #292]	; (8004b40 <HAL_RCC_OscConfig+0xa60>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d0f0      	beq.n	8004a06 <HAL_RCC_OscConfig+0x926>
 8004a24:	e018      	b.n	8004a58 <HAL_RCC_OscConfig+0x978>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8004a26:	4b46      	ldr	r3, [pc, #280]	; (8004b40 <HAL_RCC_OscConfig+0xa60>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a45      	ldr	r2, [pc, #276]	; (8004b40 <HAL_RCC_OscConfig+0xa60>)
 8004a2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004a30:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004a32:	f7fd fb29 	bl	8002088 <HAL_GetTick>
 8004a36:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004a38:	e008      	b.n	8004a4c <HAL_RCC_OscConfig+0x96c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004a3a:	f7fd fb25 	bl	8002088 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x96c>
        {
          return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e219      	b.n	8004e80 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004a4c:	4b3c      	ldr	r3, [pc, #240]	; (8004b40 <HAL_RCC_OscConfig+0xa60>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1f0      	bne.n	8004a3a <HAL_RCC_OscConfig+0x95a>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d036      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x9f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d019      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x9c0>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004a6c:	4b34      	ldr	r3, [pc, #208]	; (8004b40 <HAL_RCC_OscConfig+0xa60>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a33      	ldr	r2, [pc, #204]	; (8004b40 <HAL_RCC_OscConfig+0xa60>)
 8004a72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a76:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004a78:	f7fd fb06 	bl	8002088 <HAL_GetTick>
 8004a7c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x9b2>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004a80:	f7fd fb02 	bl	8002088 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x9b2>
        {
          return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e1f6      	b.n	8004e80 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004a92:	4b2b      	ldr	r3, [pc, #172]	; (8004b40 <HAL_RCC_OscConfig+0xa60>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d0f0      	beq.n	8004a80 <HAL_RCC_OscConfig+0x9a0>
 8004a9e:	e018      	b.n	8004ad2 <HAL_RCC_OscConfig+0x9f2>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004aa0:	4b27      	ldr	r3, [pc, #156]	; (8004b40 <HAL_RCC_OscConfig+0xa60>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a26      	ldr	r2, [pc, #152]	; (8004b40 <HAL_RCC_OscConfig+0xa60>)
 8004aa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004aaa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004aac:	f7fd faec 	bl	8002088 <HAL_GetTick>
 8004ab0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004ab2:	e008      	b.n	8004ac6 <HAL_RCC_OscConfig+0x9e6>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004ab4:	f7fd fae8 	bl	8002088 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x9e6>
        {
          return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e1dc      	b.n	8004e80 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004ac6:	4b1e      	ldr	r3, [pc, #120]	; (8004b40 <HAL_RCC_OscConfig+0xa60>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1f0      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x9d4>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d07f      	beq.n	8004bde <HAL_RCC_OscConfig+0xafe>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d062      	beq.n	8004bac <HAL_RCC_OscConfig+0xacc>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8004ae6:	4b16      	ldr	r3, [pc, #88]	; (8004b40 <HAL_RCC_OscConfig+0xa60>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	4a15      	ldr	r2, [pc, #84]	; (8004b40 <HAL_RCC_OscConfig+0xa60>)
 8004aec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004af0:	6093      	str	r3, [r2, #8]
 8004af2:	4b13      	ldr	r3, [pc, #76]	; (8004b40 <HAL_RCC_OscConfig+0xa60>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004afe:	4910      	ldr	r1, [pc, #64]	; (8004b40 <HAL_RCC_OscConfig+0xa60>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b08:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8004b0c:	d309      	bcc.n	8004b22 <HAL_RCC_OscConfig+0xa42>
 8004b0e:	4b0c      	ldr	r3, [pc, #48]	; (8004b40 <HAL_RCC_OscConfig+0xa60>)
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	f023 021f 	bic.w	r2, r3, #31
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6a1b      	ldr	r3, [r3, #32]
 8004b1a:	4909      	ldr	r1, [pc, #36]	; (8004b40 <HAL_RCC_OscConfig+0xa60>)
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	60cb      	str	r3, [r1, #12]
 8004b20:	e02a      	b.n	8004b78 <HAL_RCC_OscConfig+0xa98>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	da0c      	bge.n	8004b44 <HAL_RCC_OscConfig+0xa64>
 8004b2a:	4b05      	ldr	r3, [pc, #20]	; (8004b40 <HAL_RCC_OscConfig+0xa60>)
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	015b      	lsls	r3, r3, #5
 8004b38:	4901      	ldr	r1, [pc, #4]	; (8004b40 <HAL_RCC_OscConfig+0xa60>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	60cb      	str	r3, [r1, #12]
 8004b3e:	e01b      	b.n	8004b78 <HAL_RCC_OscConfig+0xa98>
 8004b40:	46020c00 	.word	0x46020c00
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b4c:	d30a      	bcc.n	8004b64 <HAL_RCC_OscConfig+0xa84>
 8004b4e:	4ba5      	ldr	r3, [pc, #660]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	029b      	lsls	r3, r3, #10
 8004b5c:	49a1      	ldr	r1, [pc, #644]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	60cb      	str	r3, [r1, #12]
 8004b62:	e009      	b.n	8004b78 <HAL_RCC_OscConfig+0xa98>
 8004b64:	4b9f      	ldr	r3, [pc, #636]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a1b      	ldr	r3, [r3, #32]
 8004b70:	03db      	lsls	r3, r3, #15
 8004b72:	499c      	ldr	r1, [pc, #624]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004b78:	4b9a      	ldr	r3, [pc, #616]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a99      	ldr	r2, [pc, #612]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004b7e:	f043 0310 	orr.w	r3, r3, #16
 8004b82:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004b84:	f7fd fa80 	bl	8002088 <HAL_GetTick>
 8004b88:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0xabe>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004b8c:	f7fd fa7c 	bl	8002088 <HAL_GetTick>
 8004b90:	4602      	mov	r2, r0
 8004b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0xabe>
        {
          return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e170      	b.n	8004e80 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004b9e:	4b91      	ldr	r3, [pc, #580]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0320 	and.w	r3, r3, #32
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d0f0      	beq.n	8004b8c <HAL_RCC_OscConfig+0xaac>
 8004baa:	e018      	b.n	8004bde <HAL_RCC_OscConfig+0xafe>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8004bac:	4b8d      	ldr	r3, [pc, #564]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a8c      	ldr	r2, [pc, #560]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004bb2:	f023 0310 	bic.w	r3, r3, #16
 8004bb6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004bb8:	f7fd fa66 	bl	8002088 <HAL_GetTick>
 8004bbc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_OscConfig+0xaf2>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004bc0:	f7fd fa62 	bl	8002088 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d901      	bls.n	8004bd2 <HAL_RCC_OscConfig+0xaf2>
        {
          return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e156      	b.n	8004e80 <HAL_RCC_OscConfig+0xda0>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004bd2:	4b84      	ldr	r3, [pc, #528]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0320 	and.w	r3, r3, #32
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1f0      	bne.n	8004bc0 <HAL_RCC_OscConfig+0xae0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 814b 	beq.w	8004e7e <HAL_RCC_OscConfig+0xd9e>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004be8:	2300      	movs	r3, #0
 8004bea:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bee:	4b7d      	ldr	r3, [pc, #500]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	f003 030c 	and.w	r3, r3, #12
 8004bf6:	2b0c      	cmp	r3, #12
 8004bf8:	f000 80fa 	beq.w	8004df0 <HAL_RCC_OscConfig+0xd10>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	f040 80cc 	bne.w	8004d9e <HAL_RCC_OscConfig+0xcbe>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004c06:	4b77      	ldr	r3, [pc, #476]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a76      	ldr	r2, [pc, #472]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004c0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c10:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004c12:	f7fd fa39 	bl	8002088 <HAL_GetTick>
 8004c16:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004c18:	e008      	b.n	8004c2c <HAL_RCC_OscConfig+0xb4c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c1a:	f7fd fa35 	bl	8002088 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d901      	bls.n	8004c2c <HAL_RCC_OscConfig+0xb4c>
          {
            return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e129      	b.n	8004e80 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004c2c:	4b6d      	ldr	r3, [pc, #436]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1f0      	bne.n	8004c1a <HAL_RCC_OscConfig+0xb3a>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c38:	4b6a      	ldr	r3, [pc, #424]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004c3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c3e:	f003 0304 	and.w	r3, r3, #4
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d111      	bne.n	8004c6a <HAL_RCC_OscConfig+0xb8a>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004c46:	4b67      	ldr	r3, [pc, #412]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c4c:	4a65      	ldr	r2, [pc, #404]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004c4e:	f043 0304 	orr.w	r3, r3, #4
 8004c52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004c56:	4b63      	ldr	r3, [pc, #396]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004c58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c5c:	f003 0304 	and.w	r3, r3, #4
 8004c60:	60fb      	str	r3, [r7, #12]
 8004c62:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004c64:	2301      	movs	r3, #1
 8004c66:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004c6a:	4b5f      	ldr	r3, [pc, #380]	; (8004de8 <HAL_RCC_OscConfig+0xd08>)
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c72:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c76:	d102      	bne.n	8004c7e <HAL_RCC_OscConfig+0xb9e>
        {
          pwrboosten = SET;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004c7e:	4b5a      	ldr	r3, [pc, #360]	; (8004de8 <HAL_RCC_OscConfig+0xd08>)
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	4a59      	ldr	r2, [pc, #356]	; (8004de8 <HAL_RCC_OscConfig+0xd08>)
 8004c84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c88:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004c8a:	4b56      	ldr	r3, [pc, #344]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c92:	f023 0303 	bic.w	r3, r3, #3
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c9e:	3a01      	subs	r2, #1
 8004ca0:	0212      	lsls	r2, r2, #8
 8004ca2:	4311      	orrs	r1, r2
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	494e      	ldr	r1, [pc, #312]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	628b      	str	r3, [r1, #40]	; 0x28
 8004cb0:	4b4c      	ldr	r3, [pc, #304]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004cb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cb4:	4b4d      	ldr	r3, [pc, #308]	; (8004dec <HAL_RCC_OscConfig+0xd0c>)
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	687a      	ldr	r2, [r7, #4]
 8004cba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004cbc:	3a01      	subs	r2, #1
 8004cbe:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004cc2:	687a      	ldr	r2, [r7, #4]
 8004cc4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004cc6:	3a01      	subs	r2, #1
 8004cc8:	0252      	lsls	r2, r2, #9
 8004cca:	b292      	uxth	r2, r2
 8004ccc:	4311      	orrs	r1, r2
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004cd2:	3a01      	subs	r2, #1
 8004cd4:	0412      	lsls	r2, r2, #16
 8004cd6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8004cda:	4311      	orrs	r1, r2
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004ce0:	3a01      	subs	r2, #1
 8004ce2:	0612      	lsls	r2, r2, #24
 8004ce4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8004ce8:	430a      	orrs	r2, r1
 8004cea:	493e      	ldr	r1, [pc, #248]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLLFRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004cf0:	4b3c      	ldr	r3, [pc, #240]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf4:	4a3b      	ldr	r2, [pc, #236]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004cf6:	f023 0310 	bic.w	r3, r3, #16
 8004cfa:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8004cfc:	4b39      	ldr	r3, [pc, #228]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d00:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d04:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004d0c:	00d2      	lsls	r2, r2, #3
 8004d0e:	4935      	ldr	r1, [pc, #212]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	638b      	str	r3, [r1, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004d14:	4b33      	ldr	r3, [pc, #204]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d18:	4a32      	ldr	r2, [pc, #200]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004d1a:	f043 0310 	orr.w	r3, r3, #16
 8004d1e:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8004d20:	4b30      	ldr	r3, [pc, #192]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d24:	f023 020c 	bic.w	r2, r3, #12
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d2c:	492d      	ldr	r1, [pc, #180]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8004d32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d105      	bne.n	8004d46 <HAL_RCC_OscConfig+0xc66>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004d3a:	4b2b      	ldr	r3, [pc, #172]	; (8004de8 <HAL_RCC_OscConfig+0xd08>)
 8004d3c:	68db      	ldr	r3, [r3, #12]
 8004d3e:	4a2a      	ldr	r2, [pc, #168]	; (8004de8 <HAL_RCC_OscConfig+0xd08>)
 8004d40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d44:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8004d46:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d107      	bne.n	8004d5e <HAL_RCC_OscConfig+0xc7e>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8004d4e:	4b25      	ldr	r3, [pc, #148]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d54:	4a23      	ldr	r2, [pc, #140]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004d56:	f023 0304 	bic.w	r3, r3, #4
 8004d5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004d5e:	4b21      	ldr	r3, [pc, #132]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d62:	4a20      	ldr	r2, [pc, #128]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d68:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8004d6a:	4b1e      	ldr	r3, [pc, #120]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a1d      	ldr	r2, [pc, #116]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004d70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d74:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004d76:	f7fd f987 	bl	8002088 <HAL_GetTick>
 8004d7a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004d7c:	e008      	b.n	8004d90 <HAL_RCC_OscConfig+0xcb0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d7e:	f7fd f983 	bl	8002088 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d901      	bls.n	8004d90 <HAL_RCC_OscConfig+0xcb0>
          {
            return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e077      	b.n	8004e80 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8004d90:	4b14      	ldr	r3, [pc, #80]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d0f0      	beq.n	8004d7e <HAL_RCC_OscConfig+0xc9e>
 8004d9c:	e06f      	b.n	8004e7e <HAL_RCC_OscConfig+0xd9e>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004d9e:	4b11      	ldr	r3, [pc, #68]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a10      	ldr	r2, [pc, #64]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004da4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004da8:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004daa:	f7fd f96d 	bl	8002088 <HAL_GetTick>
 8004dae:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004db0:	e008      	b.n	8004dc4 <HAL_RCC_OscConfig+0xce4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004db2:	f7fd f969 	bl	8002088 <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_OscConfig+0xce4>
          {
            return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e05d      	b.n	8004e80 <HAL_RCC_OscConfig+0xda0>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004dc4:	4b07      	ldr	r3, [pc, #28]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1f0      	bne.n	8004db2 <HAL_RCC_OscConfig+0xcd2>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 8004dd0:	4b04      	ldr	r3, [pc, #16]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd4:	4a03      	ldr	r2, [pc, #12]	; (8004de4 <HAL_RCC_OscConfig+0xd04>)
 8004dd6:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8004dda:	f023 0303 	bic.w	r3, r3, #3
 8004dde:	6293      	str	r3, [r2, #40]	; 0x28
 8004de0:	e04d      	b.n	8004e7e <HAL_RCC_OscConfig+0xd9e>
 8004de2:	bf00      	nop
 8004de4:	46020c00 	.word	0x46020c00
 8004de8:	46020800 	.word	0x46020800
 8004dec:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8004df0:	4b25      	ldr	r3, [pc, #148]	; (8004e88 <HAL_RCC_OscConfig+0xda8>)
 8004df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004df6:	4b24      	ldr	r3, [pc, #144]	; (8004e88 <HAL_RCC_OscConfig+0xda8>)
 8004df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfa:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e00:	2b01      	cmp	r3, #1
 8004e02:	d03a      	beq.n	8004e7a <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	f003 0203 	and.w	r2, r3, #3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d133      	bne.n	8004e7a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	0a1b      	lsrs	r3, r3, #8
 8004e16:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d12a      	bne.n	8004e7a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) >> \
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	0b1b      	lsrs	r3, r3, #12
 8004e28:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d122      	bne.n	8004e7a <HAL_RCC_OscConfig+0xd9a>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e3e:	3b01      	subs	r3, #1
            RCC_PLL1CFGR_PLL1MBOOST_Pos) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d11a      	bne.n	8004e7a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	0a5b      	lsrs	r3, r3, #9
 8004e48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e50:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e52:	429a      	cmp	r2, r3
 8004e54:	d111      	bne.n	8004e7a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	0c1b      	lsrs	r3, r3, #16
 8004e5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e62:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d108      	bne.n	8004e7a <HAL_RCC_OscConfig+0xd9a>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	0e1b      	lsrs	r3, r3, #24
 8004e6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e74:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d001      	beq.n	8004e7e <HAL_RCC_OscConfig+0xd9e>
      {
        return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <HAL_RCC_OscConfig+0xda0>
      }
    }
  }
  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3738      	adds	r7, #56	; 0x38
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	46020c00 	.word	0x46020c00

08004e8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d101      	bne.n	8004ea0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e1d9      	b.n	8005254 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ea0:	4b9b      	ldr	r3, [pc, #620]	; (8005110 <HAL_RCC_ClockConfig+0x284>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 030f 	and.w	r3, r3, #15
 8004ea8:	683a      	ldr	r2, [r7, #0]
 8004eaa:	429a      	cmp	r2, r3
 8004eac:	d910      	bls.n	8004ed0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eae:	4b98      	ldr	r3, [pc, #608]	; (8005110 <HAL_RCC_ClockConfig+0x284>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f023 020f 	bic.w	r2, r3, #15
 8004eb6:	4996      	ldr	r1, [pc, #600]	; (8005110 <HAL_RCC_ClockConfig+0x284>)
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ebe:	4b94      	ldr	r3, [pc, #592]	; (8005110 <HAL_RCC_ClockConfig+0x284>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 030f 	and.w	r3, r3, #15
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d001      	beq.n	8004ed0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e1c1      	b.n	8005254 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0310 	and.w	r3, r3, #16
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d010      	beq.n	8004efe <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	695a      	ldr	r2, [r3, #20]
 8004ee0:	4b8c      	ldr	r3, [pc, #560]	; (8005114 <HAL_RCC_ClockConfig+0x288>)
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d908      	bls.n	8004efe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8004eec:	4b89      	ldr	r3, [pc, #548]	; (8005114 <HAL_RCC_ClockConfig+0x288>)
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	4986      	ldr	r1, [pc, #536]	; (8005114 <HAL_RCC_ClockConfig+0x288>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0308 	and.w	r3, r3, #8
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d012      	beq.n	8004f30 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	691a      	ldr	r2, [r3, #16]
 8004f0e:	4b81      	ldr	r3, [pc, #516]	; (8005114 <HAL_RCC_ClockConfig+0x288>)
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	091b      	lsrs	r3, r3, #4
 8004f14:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f18:	429a      	cmp	r2, r3
 8004f1a:	d909      	bls.n	8004f30 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8004f1c:	4b7d      	ldr	r3, [pc, #500]	; (8005114 <HAL_RCC_ClockConfig+0x288>)
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	011b      	lsls	r3, r3, #4
 8004f2a:	497a      	ldr	r1, [pc, #488]	; (8005114 <HAL_RCC_ClockConfig+0x288>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 0304 	and.w	r3, r3, #4
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d010      	beq.n	8004f5e <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	68da      	ldr	r2, [r3, #12]
 8004f40:	4b74      	ldr	r3, [pc, #464]	; (8005114 <HAL_RCC_ClockConfig+0x288>)
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d908      	bls.n	8004f5e <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8004f4c:	4b71      	ldr	r3, [pc, #452]	; (8005114 <HAL_RCC_ClockConfig+0x288>)
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68db      	ldr	r3, [r3, #12]
 8004f58:	496e      	ldr	r1, [pc, #440]	; (8005114 <HAL_RCC_ClockConfig+0x288>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0302 	and.w	r3, r3, #2
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d010      	beq.n	8004f8c <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	689a      	ldr	r2, [r3, #8]
 8004f6e:	4b69      	ldr	r3, [pc, #420]	; (8005114 <HAL_RCC_ClockConfig+0x288>)
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	f003 030f 	and.w	r3, r3, #15
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d908      	bls.n	8004f8c <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8004f7a:	4b66      	ldr	r3, [pc, #408]	; (8005114 <HAL_RCC_ClockConfig+0x288>)
 8004f7c:	6a1b      	ldr	r3, [r3, #32]
 8004f7e:	f023 020f 	bic.w	r2, r3, #15
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	689b      	ldr	r3, [r3, #8]
 8004f86:	4963      	ldr	r1, [pc, #396]	; (8005114 <HAL_RCC_ClockConfig+0x288>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 80d2 	beq.w	800513e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2b03      	cmp	r3, #3
 8004fa4:	d143      	bne.n	800502e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004fa6:	4b5b      	ldr	r3, [pc, #364]	; (8005114 <HAL_RCC_ClockConfig+0x288>)
 8004fa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fac:	f003 0304 	and.w	r3, r3, #4
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d110      	bne.n	8004fd6 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004fb4:	4b57      	ldr	r3, [pc, #348]	; (8005114 <HAL_RCC_ClockConfig+0x288>)
 8004fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fba:	4a56      	ldr	r2, [pc, #344]	; (8005114 <HAL_RCC_ClockConfig+0x288>)
 8004fbc:	f043 0304 	orr.w	r3, r3, #4
 8004fc0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8004fc4:	4b53      	ldr	r3, [pc, #332]	; (8005114 <HAL_RCC_ClockConfig+0x288>)
 8004fc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004fca:	f003 0304 	and.w	r3, r3, #4
 8004fce:	60bb      	str	r3, [r7, #8]
 8004fd0:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8004fd6:	f7fd f857 	bl	8002088 <HAL_GetTick>
 8004fda:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8004fdc:	4b4e      	ldr	r3, [pc, #312]	; (8005118 <HAL_RCC_ClockConfig+0x28c>)
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d00f      	beq.n	8005008 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004fe8:	e008      	b.n	8004ffc <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8004fea:	f7fd f84d 	bl	8002088 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e12b      	b.n	8005254 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8004ffc:	4b46      	ldr	r3, [pc, #280]	; (8005118 <HAL_RCC_ClockConfig+0x28c>)
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d0f0      	beq.n	8004fea <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005008:	7dfb      	ldrb	r3, [r7, #23]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d107      	bne.n	800501e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800500e:	4b41      	ldr	r3, [pc, #260]	; (8005114 <HAL_RCC_ClockConfig+0x288>)
 8005010:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005014:	4a3f      	ldr	r2, [pc, #252]	; (8005114 <HAL_RCC_ClockConfig+0x288>)
 8005016:	f023 0304 	bic.w	r3, r3, #4
 800501a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800501e:	4b3d      	ldr	r3, [pc, #244]	; (8005114 <HAL_RCC_ClockConfig+0x288>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d121      	bne.n	800506e <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e112      	b.n	8005254 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	2b02      	cmp	r3, #2
 8005034:	d107      	bne.n	8005046 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005036:	4b37      	ldr	r3, [pc, #220]	; (8005114 <HAL_RCC_ClockConfig+0x288>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800503e:	2b00      	cmp	r3, #0
 8005040:	d115      	bne.n	800506e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e106      	b.n	8005254 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d107      	bne.n	800505e <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800504e:	4b31      	ldr	r3, [pc, #196]	; (8005114 <HAL_RCC_ClockConfig+0x288>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 0304 	and.w	r3, r3, #4
 8005056:	2b00      	cmp	r3, #0
 8005058:	d109      	bne.n	800506e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e0fa      	b.n	8005254 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800505e:	4b2d      	ldr	r3, [pc, #180]	; (8005114 <HAL_RCC_ClockConfig+0x288>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005066:	2b00      	cmp	r3, #0
 8005068:	d101      	bne.n	800506e <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	e0f2      	b.n	8005254 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 800506e:	4b29      	ldr	r3, [pc, #164]	; (8005114 <HAL_RCC_ClockConfig+0x288>)
 8005070:	69db      	ldr	r3, [r3, #28]
 8005072:	f023 0203 	bic.w	r2, r3, #3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	4926      	ldr	r1, [pc, #152]	; (8005114 <HAL_RCC_ClockConfig+0x288>)
 800507c:	4313      	orrs	r3, r2
 800507e:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 8005080:	f7fd f802 	bl	8002088 <HAL_GetTick>
 8005084:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	2b03      	cmp	r3, #3
 800508c:	d112      	bne.n	80050b4 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800508e:	e00a      	b.n	80050a6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005090:	f7fc fffa 	bl	8002088 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	f241 3288 	movw	r2, #5000	; 0x1388
 800509e:	4293      	cmp	r3, r2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e0d6      	b.n	8005254 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80050a6:	4b1b      	ldr	r3, [pc, #108]	; (8005114 <HAL_RCC_ClockConfig+0x288>)
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	f003 030c 	and.w	r3, r3, #12
 80050ae:	2b0c      	cmp	r3, #12
 80050b0:	d1ee      	bne.n	8005090 <HAL_RCC_ClockConfig+0x204>
 80050b2:	e044      	b.n	800513e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d112      	bne.n	80050e2 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80050bc:	e00a      	b.n	80050d4 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050be:	f7fc ffe3 	bl	8002088 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e0bf      	b.n	8005254 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80050d4:	4b0f      	ldr	r3, [pc, #60]	; (8005114 <HAL_RCC_ClockConfig+0x288>)
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	f003 030c 	and.w	r3, r3, #12
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d1ee      	bne.n	80050be <HAL_RCC_ClockConfig+0x232>
 80050e0:	e02d      	b.n	800513e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d123      	bne.n	8005132 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80050ea:	e00a      	b.n	8005102 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050ec:	f7fc ffcc 	bl	8002088 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e0a8      	b.n	8005254 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005102:	4b04      	ldr	r3, [pc, #16]	; (8005114 <HAL_RCC_ClockConfig+0x288>)
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	f003 030c 	and.w	r3, r3, #12
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1ee      	bne.n	80050ec <HAL_RCC_ClockConfig+0x260>
 800510e:	e016      	b.n	800513e <HAL_RCC_ClockConfig+0x2b2>
 8005110:	40022000 	.word	0x40022000
 8005114:	46020c00 	.word	0x46020c00
 8005118:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800511c:	f7fc ffb4 	bl	8002088 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	f241 3288 	movw	r2, #5000	; 0x1388
 800512a:	4293      	cmp	r3, r2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e090      	b.n	8005254 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005132:	4b4a      	ldr	r3, [pc, #296]	; (800525c <HAL_RCC_ClockConfig+0x3d0>)
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	f003 030c 	and.w	r3, r3, #12
 800513a:	2b04      	cmp	r3, #4
 800513c:	d1ee      	bne.n	800511c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d010      	beq.n	800516c <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689a      	ldr	r2, [r3, #8]
 800514e:	4b43      	ldr	r3, [pc, #268]	; (800525c <HAL_RCC_ClockConfig+0x3d0>)
 8005150:	6a1b      	ldr	r3, [r3, #32]
 8005152:	f003 030f 	and.w	r3, r3, #15
 8005156:	429a      	cmp	r2, r3
 8005158:	d208      	bcs.n	800516c <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 800515a:	4b40      	ldr	r3, [pc, #256]	; (800525c <HAL_RCC_ClockConfig+0x3d0>)
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	f023 020f 	bic.w	r2, r3, #15
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	493d      	ldr	r1, [pc, #244]	; (800525c <HAL_RCC_ClockConfig+0x3d0>)
 8005168:	4313      	orrs	r3, r2
 800516a:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800516c:	4b3c      	ldr	r3, [pc, #240]	; (8005260 <HAL_RCC_ClockConfig+0x3d4>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 030f 	and.w	r3, r3, #15
 8005174:	683a      	ldr	r2, [r7, #0]
 8005176:	429a      	cmp	r2, r3
 8005178:	d210      	bcs.n	800519c <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800517a:	4b39      	ldr	r3, [pc, #228]	; (8005260 <HAL_RCC_ClockConfig+0x3d4>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f023 020f 	bic.w	r2, r3, #15
 8005182:	4937      	ldr	r1, [pc, #220]	; (8005260 <HAL_RCC_ClockConfig+0x3d4>)
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	4313      	orrs	r3, r2
 8005188:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800518a:	4b35      	ldr	r3, [pc, #212]	; (8005260 <HAL_RCC_ClockConfig+0x3d4>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 030f 	and.w	r3, r3, #15
 8005192:	683a      	ldr	r2, [r7, #0]
 8005194:	429a      	cmp	r2, r3
 8005196:	d001      	beq.n	800519c <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e05b      	b.n	8005254 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d010      	beq.n	80051ca <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68da      	ldr	r2, [r3, #12]
 80051ac:	4b2b      	ldr	r3, [pc, #172]	; (800525c <HAL_RCC_ClockConfig+0x3d0>)
 80051ae:	6a1b      	ldr	r3, [r3, #32]
 80051b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d208      	bcs.n	80051ca <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80051b8:	4b28      	ldr	r3, [pc, #160]	; (800525c <HAL_RCC_ClockConfig+0x3d0>)
 80051ba:	6a1b      	ldr	r3, [r3, #32]
 80051bc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	4925      	ldr	r1, [pc, #148]	; (800525c <HAL_RCC_ClockConfig+0x3d0>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0308 	and.w	r3, r3, #8
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d012      	beq.n	80051fc <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691a      	ldr	r2, [r3, #16]
 80051da:	4b20      	ldr	r3, [pc, #128]	; (800525c <HAL_RCC_ClockConfig+0x3d0>)
 80051dc:	6a1b      	ldr	r3, [r3, #32]
 80051de:	091b      	lsrs	r3, r3, #4
 80051e0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d209      	bcs.n	80051fc <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 80051e8:	4b1c      	ldr	r3, [pc, #112]	; (800525c <HAL_RCC_ClockConfig+0x3d0>)
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	011b      	lsls	r3, r3, #4
 80051f6:	4919      	ldr	r1, [pc, #100]	; (800525c <HAL_RCC_ClockConfig+0x3d0>)
 80051f8:	4313      	orrs	r3, r2
 80051fa:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0310 	and.w	r3, r3, #16
 8005204:	2b00      	cmp	r3, #0
 8005206:	d010      	beq.n	800522a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	695a      	ldr	r2, [r3, #20]
 800520c:	4b13      	ldr	r3, [pc, #76]	; (800525c <HAL_RCC_ClockConfig+0x3d0>)
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005214:	429a      	cmp	r2, r3
 8005216:	d208      	bcs.n	800522a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005218:	4b10      	ldr	r3, [pc, #64]	; (800525c <HAL_RCC_ClockConfig+0x3d0>)
 800521a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	695b      	ldr	r3, [r3, #20]
 8005224:	490d      	ldr	r1, [pc, #52]	; (800525c <HAL_RCC_ClockConfig+0x3d0>)
 8005226:	4313      	orrs	r3, r2
 8005228:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800522a:	f000 f821 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 800522e:	4602      	mov	r2, r0
 8005230:	4b0a      	ldr	r3, [pc, #40]	; (800525c <HAL_RCC_ClockConfig+0x3d0>)
 8005232:	6a1b      	ldr	r3, [r3, #32]
 8005234:	f003 030f 	and.w	r3, r3, #15
 8005238:	490a      	ldr	r1, [pc, #40]	; (8005264 <HAL_RCC_ClockConfig+0x3d8>)
 800523a:	5ccb      	ldrb	r3, [r1, r3]
 800523c:	fa22 f303 	lsr.w	r3, r2, r3
 8005240:	4a09      	ldr	r2, [pc, #36]	; (8005268 <HAL_RCC_ClockConfig+0x3dc>)
 8005242:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005244:	4b09      	ldr	r3, [pc, #36]	; (800526c <HAL_RCC_ClockConfig+0x3e0>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4618      	mov	r0, r3
 800524a:	f7fc fed3 	bl	8001ff4 <HAL_InitTick>
 800524e:	4603      	mov	r3, r0
 8005250:	73fb      	strb	r3, [r7, #15]

  return status;
 8005252:	7bfb      	ldrb	r3, [r7, #15]
}
 8005254:	4618      	mov	r0, r3
 8005256:	3718      	adds	r7, #24
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	46020c00 	.word	0x46020c00
 8005260:	40022000 	.word	0x40022000
 8005264:	0800ab08 	.word	0x0800ab08
 8005268:	20000000 	.word	0x20000000
 800526c:	20000004 	.word	0x20000004

08005270 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005270:	b480      	push	{r7}
 8005272:	b08b      	sub	sp, #44	; 0x2c
 8005274:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8005276:	2300      	movs	r3, #0
 8005278:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 800527a:	2300      	movs	r3, #0
 800527c:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800527e:	4b7b      	ldr	r3, [pc, #492]	; (800546c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005280:	69db      	ldr	r3, [r3, #28]
 8005282:	f003 030c 	and.w	r3, r3, #12
 8005286:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005288:	4b78      	ldr	r3, [pc, #480]	; (800546c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800528a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528c:	f003 0303 	and.w	r3, r3, #3
 8005290:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d005      	beq.n	80052a4 <HAL_RCC_GetSysClockFreq+0x34>
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	2b0c      	cmp	r3, #12
 800529c:	d121      	bne.n	80052e2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d11e      	bne.n	80052e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80052a4:	4b71      	ldr	r3, [pc, #452]	; (800546c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80052a6:	689b      	ldr	r3, [r3, #8]
 80052a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d107      	bne.n	80052c0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80052b0:	4b6e      	ldr	r3, [pc, #440]	; (800546c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80052b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80052b6:	0b1b      	lsrs	r3, r3, #12
 80052b8:	f003 030f 	and.w	r3, r3, #15
 80052bc:	627b      	str	r3, [r7, #36]	; 0x24
 80052be:	e005      	b.n	80052cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80052c0:	4b6a      	ldr	r3, [pc, #424]	; (800546c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	0f1b      	lsrs	r3, r3, #28
 80052c6:	f003 030f 	and.w	r3, r3, #15
 80052ca:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80052cc:	4a68      	ldr	r2, [pc, #416]	; (8005470 <HAL_RCC_GetSysClockFreq+0x200>)
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052d4:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80052d6:	69bb      	ldr	r3, [r7, #24]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d110      	bne.n	80052fe <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80052dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052de:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80052e0:	e00d      	b.n	80052fe <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80052e2:	4b62      	ldr	r3, [pc, #392]	; (800546c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80052e4:	69db      	ldr	r3, [r3, #28]
 80052e6:	f003 030c 	and.w	r3, r3, #12
 80052ea:	2b04      	cmp	r3, #4
 80052ec:	d102      	bne.n	80052f4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052ee:	4b61      	ldr	r3, [pc, #388]	; (8005474 <HAL_RCC_GetSysClockFreq+0x204>)
 80052f0:	623b      	str	r3, [r7, #32]
 80052f2:	e004      	b.n	80052fe <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	2b08      	cmp	r3, #8
 80052f8:	d101      	bne.n	80052fe <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052fa:	4b5e      	ldr	r3, [pc, #376]	; (8005474 <HAL_RCC_GetSysClockFreq+0x204>)
 80052fc:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	2b0c      	cmp	r3, #12
 8005302:	f040 80ac 	bne.w	800545e <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005306:	4b59      	ldr	r3, [pc, #356]	; (800546c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530a:	f003 0303 	and.w	r3, r3, #3
 800530e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005310:	4b56      	ldr	r3, [pc, #344]	; (800546c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005314:	0a1b      	lsrs	r3, r3, #8
 8005316:	f003 030f 	and.w	r3, r3, #15
 800531a:	3301      	adds	r3, #1
 800531c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800531e:	4b53      	ldr	r3, [pc, #332]	; (800546c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005322:	091b      	lsrs	r3, r3, #4
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800532a:	4b50      	ldr	r3, [pc, #320]	; (800546c <HAL_RCC_GetSysClockFreq+0x1fc>)
 800532c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532e:	08db      	lsrs	r3, r3, #3
 8005330:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005334:	68ba      	ldr	r2, [r7, #8]
 8005336:	fb02 f303 	mul.w	r3, r2, r3
 800533a:	ee07 3a90 	vmov	s15, r3
 800533e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005342:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2b00      	cmp	r3, #0
 800534a:	f000 8086 	beq.w	800545a <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	2b02      	cmp	r3, #2
 8005352:	d003      	beq.n	800535c <HAL_RCC_GetSysClockFreq+0xec>
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	2b03      	cmp	r3, #3
 8005358:	d022      	beq.n	80053a0 <HAL_RCC_GetSysClockFreq+0x130>
 800535a:	e043      	b.n	80053e4 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	ee07 3a90 	vmov	s15, r3
 8005362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005366:	eddf 6a44 	vldr	s13, [pc, #272]	; 8005478 <HAL_RCC_GetSysClockFreq+0x208>
 800536a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800536e:	4b3f      	ldr	r3, [pc, #252]	; (800546c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005376:	ee07 3a90 	vmov	s15, r3
 800537a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800537e:	ed97 6a01 	vldr	s12, [r7, #4]
 8005382:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800547c <HAL_RCC_GetSysClockFreq+0x20c>
 8005386:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800538a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800538e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005392:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800539a:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800539e:	e046      	b.n	800542e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	ee07 3a90 	vmov	s15, r3
 80053a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053aa:	eddf 6a33 	vldr	s13, [pc, #204]	; 8005478 <HAL_RCC_GetSysClockFreq+0x208>
 80053ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053b2:	4b2e      	ldr	r3, [pc, #184]	; (800546c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80053b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ba:	ee07 3a90 	vmov	s15, r3
 80053be:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80053c2:	ed97 6a01 	vldr	s12, [r7, #4]
 80053c6:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800547c <HAL_RCC_GetSysClockFreq+0x20c>
 80053ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80053d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80053d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053de:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80053e2:	e024      	b.n	800542e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	ee07 3a90 	vmov	s15, r3
 80053ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	ee07 3a90 	vmov	s15, r3
 80053f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053fc:	4b1b      	ldr	r3, [pc, #108]	; (800546c <HAL_RCC_GetSysClockFreq+0x1fc>)
 80053fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005400:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005404:	ee07 3a90 	vmov	s15, r3
 8005408:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800540c:	ed97 6a01 	vldr	s12, [r7, #4]
 8005410:	eddf 5a1a 	vldr	s11, [pc, #104]	; 800547c <HAL_RCC_GetSysClockFreq+0x20c>
 8005414:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005418:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800541c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005420:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005424:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005428:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800542c:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800542e:	4b0f      	ldr	r3, [pc, #60]	; (800546c <HAL_RCC_GetSysClockFreq+0x1fc>)
 8005430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005432:	0e1b      	lsrs	r3, r3, #24
 8005434:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005438:	3301      	adds	r3, #1
 800543a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	ee07 3a90 	vmov	s15, r3
 8005442:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005446:	edd7 6a07 	vldr	s13, [r7, #28]
 800544a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800544e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005452:	ee17 3a90 	vmov	r3, s15
 8005456:	623b      	str	r3, [r7, #32]
 8005458:	e001      	b.n	800545e <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 800545a:	2300      	movs	r3, #0
 800545c:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 800545e:	6a3b      	ldr	r3, [r7, #32]
}
 8005460:	4618      	mov	r0, r3
 8005462:	372c      	adds	r7, #44	; 0x2c
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr
 800546c:	46020c00 	.word	0x46020c00
 8005470:	0800ab20 	.word	0x0800ab20
 8005474:	00f42400 	.word	0x00f42400
 8005478:	4b742400 	.word	0x4b742400
 800547c:	46000000 	.word	0x46000000

08005480 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8005484:	f7ff fef4 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 8005488:	4602      	mov	r2, r0
 800548a:	4b07      	ldr	r3, [pc, #28]	; (80054a8 <HAL_RCC_GetHCLKFreq+0x28>)
 800548c:	6a1b      	ldr	r3, [r3, #32]
 800548e:	f003 030f 	and.w	r3, r3, #15
 8005492:	4906      	ldr	r1, [pc, #24]	; (80054ac <HAL_RCC_GetHCLKFreq+0x2c>)
 8005494:	5ccb      	ldrb	r3, [r1, r3]
 8005496:	fa22 f303 	lsr.w	r3, r2, r3
 800549a:	4a05      	ldr	r2, [pc, #20]	; (80054b0 <HAL_RCC_GetHCLKFreq+0x30>)
 800549c:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 800549e:	4b04      	ldr	r3, [pc, #16]	; (80054b0 <HAL_RCC_GetHCLKFreq+0x30>)
 80054a0:	681b      	ldr	r3, [r3, #0]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	46020c00 	.word	0x46020c00
 80054ac:	0800ab08 	.word	0x0800ab08
 80054b0:	20000000 	.word	0x20000000

080054b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80054b8:	f7ff ffe2 	bl	8005480 <HAL_RCC_GetHCLKFreq>
 80054bc:	4602      	mov	r2, r0
 80054be:	4b05      	ldr	r3, [pc, #20]	; (80054d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	091b      	lsrs	r3, r3, #4
 80054c4:	f003 0307 	and.w	r3, r3, #7
 80054c8:	4903      	ldr	r1, [pc, #12]	; (80054d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054ca:	5ccb      	ldrb	r3, [r1, r3]
 80054cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	bd80      	pop	{r7, pc}
 80054d4:	46020c00 	.word	0x46020c00
 80054d8:	0800ab18 	.word	0x0800ab18

080054dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80054e0:	f7ff ffce 	bl	8005480 <HAL_RCC_GetHCLKFreq>
 80054e4:	4602      	mov	r2, r0
 80054e6:	4b05      	ldr	r3, [pc, #20]	; (80054fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	0a1b      	lsrs	r3, r3, #8
 80054ec:	f003 0307 	and.w	r3, r3, #7
 80054f0:	4903      	ldr	r1, [pc, #12]	; (8005500 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054f2:	5ccb      	ldrb	r3, [r1, r3]
 80054f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054f8:	4618      	mov	r0, r3
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	46020c00 	.word	0x46020c00
 8005500:	0800ab18 	.word	0x0800ab18

08005504 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8005508:	f7ff ffba 	bl	8005480 <HAL_RCC_GetHCLKFreq>
 800550c:	4602      	mov	r2, r0
 800550e:	4b05      	ldr	r3, [pc, #20]	; (8005524 <HAL_RCC_GetPCLK3Freq+0x20>)
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	091b      	lsrs	r3, r3, #4
 8005514:	f003 0307 	and.w	r3, r3, #7
 8005518:	4903      	ldr	r1, [pc, #12]	; (8005528 <HAL_RCC_GetPCLK3Freq+0x24>)
 800551a:	5ccb      	ldrb	r3, [r1, r3]
 800551c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005520:	4618      	mov	r0, r3
 8005522:	bd80      	pop	{r7, pc}
 8005524:	46020c00 	.word	0x46020c00
 8005528:	0800ab18 	.word	0x0800ab18

0800552c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b086      	sub	sp, #24
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005534:	4b3e      	ldr	r3, [pc, #248]	; (8005630 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005536:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800553a:	f003 0304 	and.w	r3, r3, #4
 800553e:	2b00      	cmp	r3, #0
 8005540:	d003      	beq.n	800554a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005542:	f7fe fd4f 	bl	8003fe4 <HAL_PWREx_GetVoltageRange>
 8005546:	6178      	str	r0, [r7, #20]
 8005548:	e019      	b.n	800557e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800554a:	4b39      	ldr	r3, [pc, #228]	; (8005630 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800554c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005550:	4a37      	ldr	r2, [pc, #220]	; (8005630 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005552:	f043 0304 	orr.w	r3, r3, #4
 8005556:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800555a:	4b35      	ldr	r3, [pc, #212]	; (8005630 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800555c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005560:	f003 0304 	and.w	r3, r3, #4
 8005564:	60fb      	str	r3, [r7, #12]
 8005566:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005568:	f7fe fd3c 	bl	8003fe4 <HAL_PWREx_GetVoltageRange>
 800556c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800556e:	4b30      	ldr	r3, [pc, #192]	; (8005630 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005570:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005574:	4a2e      	ldr	r2, [pc, #184]	; (8005630 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8005576:	f023 0304 	bic.w	r3, r3, #4
 800557a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005584:	d003      	beq.n	800558e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800558c:	d109      	bne.n	80055a2 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005594:	d202      	bcs.n	800559c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8005596:	2301      	movs	r3, #1
 8005598:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 800559a:	e033      	b.n	8005604 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 800559c:	2300      	movs	r3, #0
 800559e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80055a0:	e030      	b.n	8005604 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055a8:	d208      	bcs.n	80055bc <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055b0:	d102      	bne.n	80055b8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 80055b2:	2303      	movs	r3, #3
 80055b4:	613b      	str	r3, [r7, #16]
 80055b6:	e025      	b.n	8005604 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e035      	b.n	8005628 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055c2:	d90f      	bls.n	80055e4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d109      	bne.n	80055de <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80055d0:	d902      	bls.n	80055d8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 80055d2:	2300      	movs	r3, #0
 80055d4:	613b      	str	r3, [r7, #16]
 80055d6:	e015      	b.n	8005604 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 80055d8:	2301      	movs	r3, #1
 80055da:	613b      	str	r3, [r7, #16]
 80055dc:	e012      	b.n	8005604 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 80055de:	2300      	movs	r3, #0
 80055e0:	613b      	str	r3, [r7, #16]
 80055e2:	e00f      	b.n	8005604 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055ea:	d109      	bne.n	8005600 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 80055ec:	697b      	ldr	r3, [r7, #20]
 80055ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055f2:	d102      	bne.n	80055fa <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 80055f4:	2301      	movs	r3, #1
 80055f6:	613b      	str	r3, [r7, #16]
 80055f8:	e004      	b.n	8005604 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 80055fa:	2302      	movs	r3, #2
 80055fc:	613b      	str	r3, [r7, #16]
 80055fe:	e001      	b.n	8005604 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005600:	2301      	movs	r3, #1
 8005602:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005604:	4b0b      	ldr	r3, [pc, #44]	; (8005634 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f023 020f 	bic.w	r2, r3, #15
 800560c:	4909      	ldr	r1, [pc, #36]	; (8005634 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	4313      	orrs	r3, r2
 8005612:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005614:	4b07      	ldr	r3, [pc, #28]	; (8005634 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 030f 	and.w	r3, r3, #15
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	429a      	cmp	r2, r3
 8005620:	d001      	beq.n	8005626 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e000      	b.n	8005628 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3718      	adds	r7, #24
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	46020c00 	.word	0x46020c00
 8005634:	40022000 	.word	0x40022000

08005638 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8005638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800563c:	b0ba      	sub	sp, #232	; 0xe8
 800563e:	af00      	add	r7, sp, #0
 8005640:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005644:	2300      	movs	r3, #0
 8005646:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800564a:	2300      	movs	r3, #0
 800564c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005650:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005658:	f002 0401 	and.w	r4, r2, #1
 800565c:	2500      	movs	r5, #0
 800565e:	ea54 0305 	orrs.w	r3, r4, r5
 8005662:	d00b      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8005664:	4bcb      	ldr	r3, [pc, #812]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005666:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800566a:	f023 0103 	bic.w	r1, r3, #3
 800566e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005674:	4ac7      	ldr	r2, [pc, #796]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005676:	430b      	orrs	r3, r1
 8005678:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800567c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005684:	f002 0802 	and.w	r8, r2, #2
 8005688:	f04f 0900 	mov.w	r9, #0
 800568c:	ea58 0309 	orrs.w	r3, r8, r9
 8005690:	d00b      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8005692:	4bc0      	ldr	r3, [pc, #768]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005698:	f023 010c 	bic.w	r1, r3, #12
 800569c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a2:	4abc      	ldr	r2, [pc, #752]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056a4:	430b      	orrs	r3, r1
 80056a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80056aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b2:	f002 0a04 	and.w	sl, r2, #4
 80056b6:	f04f 0b00 	mov.w	fp, #0
 80056ba:	ea5a 030b 	orrs.w	r3, sl, fp
 80056be:	d00b      	beq.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 80056c0:	4bb4      	ldr	r3, [pc, #720]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056c6:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80056ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056d0:	4ab0      	ldr	r2, [pc, #704]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056d2:	430b      	orrs	r3, r1
 80056d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80056d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e0:	f002 0308 	and.w	r3, r2, #8
 80056e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80056e8:	2300      	movs	r3, #0
 80056ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80056ee:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80056f2:	460b      	mov	r3, r1
 80056f4:	4313      	orrs	r3, r2
 80056f6:	d00b      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 80056f8:	4ba6      	ldr	r3, [pc, #664]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80056fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056fe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005702:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005708:	4aa2      	ldr	r2, [pc, #648]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800570a:	430b      	orrs	r3, r1
 800570c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005710:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005718:	f002 0310 	and.w	r3, r2, #16
 800571c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005720:	2300      	movs	r3, #0
 8005722:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005726:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800572a:	460b      	mov	r3, r1
 800572c:	4313      	orrs	r3, r2
 800572e:	d00b      	beq.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005730:	4b98      	ldr	r3, [pc, #608]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005736:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800573a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800573e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005740:	4a94      	ldr	r2, [pc, #592]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005742:	430b      	orrs	r3, r1
 8005744:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005748:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800574c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005750:	f002 0320 	and.w	r3, r2, #32
 8005754:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005758:	2300      	movs	r3, #0
 800575a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800575e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8005762:	460b      	mov	r3, r1
 8005764:	4313      	orrs	r3, r2
 8005766:	d00b      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005768:	4b8a      	ldr	r3, [pc, #552]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800576a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800576e:	f023 0107 	bic.w	r1, r3, #7
 8005772:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005776:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005778:	4a86      	ldr	r2, [pc, #536]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800577a:	430b      	orrs	r3, r1
 800577c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005780:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005788:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800578c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005790:	2300      	movs	r3, #0
 8005792:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005796:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800579a:	460b      	mov	r3, r1
 800579c:	4313      	orrs	r3, r2
 800579e:	d00b      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 80057a0:	4b7c      	ldr	r3, [pc, #496]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057a6:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 80057aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057b0:	4a78      	ldr	r2, [pc, #480]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057b2:	430b      	orrs	r3, r1
 80057b4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80057b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80057c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80057c8:	2300      	movs	r3, #0
 80057ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057ce:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80057d2:	460b      	mov	r3, r1
 80057d4:	4313      	orrs	r3, r2
 80057d6:	d00b      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 80057d8:	4b6e      	ldr	r3, [pc, #440]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80057de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80057e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057e8:	4a6a      	ldr	r2, [pc, #424]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80057ea:	430b      	orrs	r3, r1
 80057ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80057f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80057f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f8:	f402 7380 	and.w	r3, r2, #256	; 0x100
 80057fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005800:	2300      	movs	r3, #0
 8005802:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005806:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800580a:	460b      	mov	r3, r1
 800580c:	4313      	orrs	r3, r2
 800580e:	d00b      	beq.n	8005828 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005810:	4b60      	ldr	r3, [pc, #384]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005812:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005816:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800581a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800581e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005820:	4a5c      	ldr	r2, [pc, #368]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005822:	430b      	orrs	r3, r1
 8005824:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005828:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005830:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8005834:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005838:	2300      	movs	r3, #0
 800583a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800583e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8005842:	460b      	mov	r3, r1
 8005844:	4313      	orrs	r3, r2
 8005846:	d00b      	beq.n	8005860 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005848:	4b52      	ldr	r3, [pc, #328]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800584a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800584e:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8005852:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005858:	4a4e      	ldr	r2, [pc, #312]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800585a:	430b      	orrs	r3, r1
 800585c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005860:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005868:	f402 7300 	and.w	r3, r2, #512	; 0x200
 800586c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005870:	2300      	movs	r3, #0
 8005872:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005876:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800587a:	460b      	mov	r3, r1
 800587c:	4313      	orrs	r3, r2
 800587e:	d00b      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005880:	4b44      	ldr	r3, [pc, #272]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005882:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005886:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 800588a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800588e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005890:	4a40      	ldr	r2, [pc, #256]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005892:	430b      	orrs	r3, r1
 8005894:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005898:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800589c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a0:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80058a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80058a8:	2300      	movs	r3, #0
 80058aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80058ae:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80058b2:	460b      	mov	r3, r1
 80058b4:	4313      	orrs	r3, r2
 80058b6:	d00b      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 80058b8:	4b36      	ldr	r3, [pc, #216]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80058be:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 80058c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058c8:	4a32      	ldr	r2, [pc, #200]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058ca:	430b      	orrs	r3, r1
 80058cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 80058d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80058dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80058e0:	2300      	movs	r3, #0
 80058e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80058e6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80058ea:	460b      	mov	r3, r1
 80058ec:	4313      	orrs	r3, r2
 80058ee:	d00c      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 80058f0:	4b28      	ldr	r3, [pc, #160]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80058f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80058f6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80058fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005902:	4a24      	ldr	r2, [pc, #144]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005904:	430b      	orrs	r3, r1
 8005906:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800590a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800590e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005912:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8005916:	67bb      	str	r3, [r7, #120]	; 0x78
 8005918:	2300      	movs	r3, #0
 800591a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800591c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005920:	460b      	mov	r3, r1
 8005922:	4313      	orrs	r3, r2
 8005924:	d04f      	beq.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005926:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800592a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800592e:	2b80      	cmp	r3, #128	; 0x80
 8005930:	d02d      	beq.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x356>
 8005932:	2b80      	cmp	r3, #128	; 0x80
 8005934:	d827      	bhi.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005936:	2b60      	cmp	r3, #96	; 0x60
 8005938:	d02e      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800593a:	2b60      	cmp	r3, #96	; 0x60
 800593c:	d823      	bhi.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 800593e:	2b40      	cmp	r3, #64	; 0x40
 8005940:	d006      	beq.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8005942:	2b40      	cmp	r3, #64	; 0x40
 8005944:	d81f      	bhi.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8005946:	2b00      	cmp	r3, #0
 8005948:	d009      	beq.n	800595e <HAL_RCCEx_PeriphCLKConfig+0x326>
 800594a:	2b20      	cmp	r3, #32
 800594c:	d011      	beq.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 800594e:	e01a      	b.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005950:	4b10      	ldr	r3, [pc, #64]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005954:	4a0f      	ldr	r2, [pc, #60]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8005956:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800595a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 800595c:	e01d      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 800595e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005962:	3308      	adds	r3, #8
 8005964:	4618      	mov	r0, r3
 8005966:	f002 f981 	bl	8007c6c <RCCEx_PLL2_Config>
 800596a:	4603      	mov	r3, r0
 800596c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005970:	e013      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005972:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005976:	332c      	adds	r3, #44	; 0x2c
 8005978:	4618      	mov	r0, r3
 800597a:	f002 fa0f 	bl	8007d9c <RCCEx_PLL3_Config>
 800597e:	4603      	mov	r3, r0
 8005980:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005984:	e009      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800598c:	e005      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 800598e:	bf00      	nop
 8005990:	e003      	b.n	800599a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8005992:	bf00      	nop
 8005994:	46020c00 	.word	0x46020c00
        break;
 8005998:	bf00      	nop
    }

    if (ret == HAL_OK)
 800599a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d10d      	bne.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 80059a2:	4bb6      	ldr	r3, [pc, #728]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80059a4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80059a8:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 80059ac:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059b4:	4ab1      	ldr	r2, [pc, #708]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80059b6:	430b      	orrs	r3, r1
 80059b8:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80059bc:	e003      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059be:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80059c2:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80059c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ce:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80059d2:	673b      	str	r3, [r7, #112]	; 0x70
 80059d4:	2300      	movs	r3, #0
 80059d6:	677b      	str	r3, [r7, #116]	; 0x74
 80059d8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80059dc:	460b      	mov	r3, r1
 80059de:	4313      	orrs	r3, r2
 80059e0:	d053      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 80059e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ee:	d033      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80059f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059f4:	d82c      	bhi.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x418>
 80059f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80059fa:	d02f      	beq.n	8005a5c <HAL_RCCEx_PeriphCLKConfig+0x424>
 80059fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a00:	d826      	bhi.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005a02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a06:	d008      	beq.n	8005a1a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8005a08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a0c:	d820      	bhi.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00a      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8005a12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a16:	d011      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8005a18:	e01a      	b.n	8005a50 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a1a:	4b98      	ldr	r3, [pc, #608]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a1e:	4a97      	ldr	r2, [pc, #604]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a24:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005a26:	e01a      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005a28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a2c:	3308      	adds	r3, #8
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f002 f91c 	bl	8007c6c <RCCEx_PLL2_Config>
 8005a34:	4603      	mov	r3, r0
 8005a36:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005a3a:	e010      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005a3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a40:	332c      	adds	r3, #44	; 0x2c
 8005a42:	4618      	mov	r0, r3
 8005a44:	f002 f9aa 	bl	8007d9c <RCCEx_PLL3_Config>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005a4e:	e006      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005a56:	e002      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8005a58:	bf00      	nop
 8005a5a:	e000      	b.n	8005a5e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8005a5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a5e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10d      	bne.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005a66:	4b85      	ldr	r3, [pc, #532]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005a68:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005a6c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005a70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a78:	4a80      	ldr	r2, [pc, #512]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005a7a:	430b      	orrs	r3, r1
 8005a7c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005a80:	e003      	b.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a82:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005a86:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005a8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a92:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8005a96:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a98:	2300      	movs	r3, #0
 8005a9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a9c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	d046      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005aa6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005aaa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005aae:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005ab2:	d028      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005ab4:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8005ab8:	d821      	bhi.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005aba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005abe:	d022      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005ac0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ac4:	d81b      	bhi.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005ac6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005aca:	d01c      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005acc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005ad0:	d815      	bhi.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005ad2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ad6:	d008      	beq.n	8005aea <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8005ad8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005adc:	d80f      	bhi.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d011      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ae6:	d00e      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8005ae8:	e009      	b.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005aea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005aee:	3308      	adds	r3, #8
 8005af0:	4618      	mov	r0, r3
 8005af2:	f002 f8bb 	bl	8007c6c <RCCEx_PLL2_Config>
 8005af6:	4603      	mov	r3, r0
 8005af8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005afc:	e004      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005b04:	e000      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 8005b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b08:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10d      	bne.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005b10:	4b5a      	ldr	r3, [pc, #360]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005b12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005b16:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8005b1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005b22:	4a56      	ldr	r2, [pc, #344]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005b24:	430b      	orrs	r3, r1
 8005b26:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005b2a:	e003      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b2c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005b30:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005b34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b3c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8005b40:	663b      	str	r3, [r7, #96]	; 0x60
 8005b42:	2300      	movs	r3, #0
 8005b44:	667b      	str	r3, [r7, #100]	; 0x64
 8005b46:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	d03f      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005b50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b58:	2b04      	cmp	r3, #4
 8005b5a:	d81e      	bhi.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x562>
 8005b5c:	a201      	add	r2, pc, #4	; (adr r2, 8005b64 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8005b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b62:	bf00      	nop
 8005b64:	08005ba3 	.word	0x08005ba3
 8005b68:	08005b79 	.word	0x08005b79
 8005b6c:	08005b87 	.word	0x08005b87
 8005b70:	08005ba3 	.word	0x08005ba3
 8005b74:	08005ba3 	.word	0x08005ba3
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005b78:	4b40      	ldr	r3, [pc, #256]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b7c:	4a3f      	ldr	r2, [pc, #252]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005b7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b82:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005b84:	e00e      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005b86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005b8a:	332c      	adds	r3, #44	; 0x2c
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f002 f905 	bl	8007d9c <RCCEx_PLL3_Config>
 8005b92:	4603      	mov	r3, r0
 8005b94:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005b98:	e004      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005ba0:	e000      	b.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8005ba2:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005ba4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10d      	bne.n	8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005bac:	4b33      	ldr	r3, [pc, #204]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005bae:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005bb2:	f023 0107 	bic.w	r1, r3, #7
 8005bb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bbe:	4a2f      	ldr	r2, [pc, #188]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005bc0:	430b      	orrs	r3, r1
 8005bc2:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005bc6:	e003      	b.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bc8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005bcc:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005bd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd8:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8005bdc:	65bb      	str	r3, [r7, #88]	; 0x58
 8005bde:	2300      	movs	r3, #0
 8005be0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005be2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8005be6:	460b      	mov	r3, r1
 8005be8:	4313      	orrs	r3, r2
 8005bea:	d04d      	beq.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005bec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bf4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bf8:	d028      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0x614>
 8005bfa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bfe:	d821      	bhi.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005c00:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c04:	d024      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8005c06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c0a:	d81b      	bhi.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005c0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c10:	d00e      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 8005c12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c16:	d815      	bhi.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d01b      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 8005c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c20:	d110      	bne.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005c22:	4b16      	ldr	r3, [pc, #88]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c26:	4a15      	ldr	r2, [pc, #84]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c2c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005c2e:	e012      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005c30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c34:	332c      	adds	r3, #44	; 0x2c
 8005c36:	4618      	mov	r0, r3
 8005c38:	f002 f8b0 	bl	8007d9c <RCCEx_PLL3_Config>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005c42:	e008      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005c4a:	e004      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005c4c:	bf00      	nop
 8005c4e:	e002      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005c50:	bf00      	nop
 8005c52:	e000      	b.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8005c54:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005c56:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d110      	bne.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8005c5e:	4b07      	ldr	r3, [pc, #28]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005c60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c64:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8005c68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c70:	4a02      	ldr	r2, [pc, #8]	; (8005c7c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8005c72:	430b      	orrs	r3, r1
 8005c74:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005c78:	e006      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8005c7a:	bf00      	nop
 8005c7c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c80:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005c84:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005c88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c90:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005c94:	653b      	str	r3, [r7, #80]	; 0x50
 8005c96:	2300      	movs	r3, #0
 8005c98:	657b      	str	r3, [r7, #84]	; 0x54
 8005c9a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	f000 80b5 	beq.w	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cac:	4b9d      	ldr	r3, [pc, #628]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cb2:	f003 0304 	and.w	r3, r3, #4
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d113      	bne.n	8005ce2 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cba:	4b9a      	ldr	r3, [pc, #616]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cc0:	4a98      	ldr	r2, [pc, #608]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005cc2:	f043 0304 	orr.w	r3, r3, #4
 8005cc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005cca:	4b96      	ldr	r3, [pc, #600]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cd0:	f003 0304 	and.w	r3, r3, #4
 8005cd4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005cd8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8005cdc:	2301      	movs	r3, #1
 8005cde:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005ce2:	4b91      	ldr	r3, [pc, #580]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005ce4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce6:	4a90      	ldr	r2, [pc, #576]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005ce8:	f043 0301 	orr.w	r3, r3, #1
 8005cec:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005cee:	f7fc f9cb 	bl	8002088 <HAL_GetTick>
 8005cf2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005cf6:	e00b      	b.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cf8:	f7fc f9c6 	bl	8002088 <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d02:	1ad3      	subs	r3, r2, r3
 8005d04:	2b02      	cmp	r3, #2
 8005d06:	d903      	bls.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005d0e:	e005      	b.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005d10:	4b85      	ldr	r3, [pc, #532]	; (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8005d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d0ed      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 8005d1c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d165      	bne.n	8005df0 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d24:	4b7f      	ldr	r3, [pc, #508]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8005d32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d023      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 8005d3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d3e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8005d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d01b      	beq.n	8005d82 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d4a:	4b76      	ldr	r3, [pc, #472]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d54:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d58:	4b72      	ldr	r3, [pc, #456]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d5a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d5e:	4a71      	ldr	r2, [pc, #452]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d64:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d68:	4b6e      	ldr	r3, [pc, #440]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d6a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d6e:	4a6d      	ldr	r2, [pc, #436]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d74:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d78:	4a6a      	ldr	r2, [pc, #424]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d7e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d86:	f003 0301 	and.w	r3, r3, #1
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d019      	beq.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d8e:	f7fc f97b 	bl	8002088 <HAL_GetTick>
 8005d92:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d96:	e00d      	b.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d98:	f7fc f976 	bl	8002088 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005da2:	1ad2      	subs	r2, r2, r3
 8005da4:	f241 3388 	movw	r3, #5000	; 0x1388
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d903      	bls.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8005db2:	e006      	b.n	8005dc2 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005db4:	4b5b      	ldr	r3, [pc, #364]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005db6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005dba:	f003 0302 	and.w	r3, r3, #2
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d0ea      	beq.n	8005d98 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8005dc2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10d      	bne.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8005dca:	4b56      	ldr	r3, [pc, #344]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005dcc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005dd0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005dd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005dd8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005ddc:	4a51      	ldr	r2, [pc, #324]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005dde:	430b      	orrs	r3, r1
 8005de0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005de4:	e008      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005de6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005dea:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8005dee:	e003      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005df4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005df8:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d107      	bne.n	8005e10 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e00:	4b48      	ldr	r3, [pc, #288]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e06:	4a47      	ldr	r2, [pc, #284]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005e08:	f023 0304 	bic.w	r3, r3, #4
 8005e0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8005e10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e18:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005e1c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e1e:	2300      	movs	r3, #0
 8005e20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e22:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8005e26:	460b      	mov	r3, r1
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	d042      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 8005e2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005e34:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005e38:	d022      	beq.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x848>
 8005e3a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8005e3e:	d81b      	bhi.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005e40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e44:	d011      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x832>
 8005e46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e4a:	d815      	bhi.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d019      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8005e50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e54:	d110      	bne.n	8005e78 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e5a:	3308      	adds	r3, #8
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f001 ff05 	bl	8007c6c <RCCEx_PLL2_Config>
 8005e62:	4603      	mov	r3, r0
 8005e64:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005e68:	e00d      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e6a:	4b2e      	ldr	r3, [pc, #184]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e6e:	4a2d      	ldr	r2, [pc, #180]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e74:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8005e76:	e006      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005e7e:	e002      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005e80:	bf00      	nop
 8005e82:	e000      	b.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8005e84:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005e86:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10d      	bne.n	8005eaa <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8005e8e:	4b25      	ldr	r3, [pc, #148]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e94:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005e98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8005ea0:	4a20      	ldr	r2, [pc, #128]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005ea2:	430b      	orrs	r3, r1
 8005ea4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005ea8:	e003      	b.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005eaa:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005eae:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005eb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eba:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8005ebe:	643b      	str	r3, [r7, #64]	; 0x40
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ec4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8005ec8:	460b      	mov	r3, r1
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	d032      	beq.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8005ece:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ed2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eda:	d00b      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8005edc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ee0:	d804      	bhi.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d008      	beq.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 8005ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005eea:	d007      	beq.n	8005efc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8005ef2:	e004      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005ef4:	bf00      	nop
 8005ef6:	e002      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005ef8:	bf00      	nop
 8005efa:	e000      	b.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 8005efc:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005efe:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d112      	bne.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8005f06:	4b07      	ldr	r3, [pc, #28]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005f08:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005f0c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f10:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005f18:	4a02      	ldr	r2, [pc, #8]	; (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8005f1a:	430b      	orrs	r3, r1
 8005f1c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8005f20:	e008      	b.n	8005f34 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 8005f22:	bf00      	nop
 8005f24:	46020c00 	.word	0x46020c00
 8005f28:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f2c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8005f30:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8005f34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3c:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8005f40:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f42:	2300      	movs	r3, #0
 8005f44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f46:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8005f4a:	460b      	mov	r3, r1
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	d00c      	beq.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8005f50:	4b98      	ldr	r3, [pc, #608]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f52:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005f56:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8005f5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f62:	4a94      	ldr	r2, [pc, #592]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f64:	430b      	orrs	r3, r1
 8005f66:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8005f6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f72:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005f76:	633b      	str	r3, [r7, #48]	; 0x30
 8005f78:	2300      	movs	r3, #0
 8005f7a:	637b      	str	r3, [r7, #52]	; 0x34
 8005f7c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005f80:	460b      	mov	r3, r1
 8005f82:	4313      	orrs	r3, r2
 8005f84:	d019      	beq.n	8005fba <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8005f86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005f8a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005f8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f92:	d105      	bne.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005f94:	4b87      	ldr	r3, [pc, #540]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f98:	4a86      	ldr	r2, [pc, #536]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f9e:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8005fa0:	4b84      	ldr	r3, [pc, #528]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005fa2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8005fa6:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8005faa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005fb2:	4a80      	ldr	r2, [pc, #512]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005fb4:	430b      	orrs	r3, r1
 8005fb6:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8005fba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005fc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005fc8:	2300      	movs	r3, #0
 8005fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fcc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	d00c      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8005fd6:	4b77      	ldr	r3, [pc, #476]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005fd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005fe0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005fe4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005fe8:	4972      	ldr	r1, [pc, #456]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8005ff0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8005ffc:	623b      	str	r3, [r7, #32]
 8005ffe:	2300      	movs	r3, #0
 8006000:	627b      	str	r3, [r7, #36]	; 0x24
 8006002:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006006:	460b      	mov	r3, r1
 8006008:	4313      	orrs	r3, r2
 800600a:	d00c      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 800600c:	4b69      	ldr	r3, [pc, #420]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800600e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006012:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006016:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800601a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800601e:	4965      	ldr	r1, [pc, #404]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006020:	4313      	orrs	r3, r2
 8006022:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006026:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800602a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800602e:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8006032:	61bb      	str	r3, [r7, #24]
 8006034:	2300      	movs	r3, #0
 8006036:	61fb      	str	r3, [r7, #28]
 8006038:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800603c:	460b      	mov	r3, r1
 800603e:	4313      	orrs	r3, r2
 8006040:	d00c      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8006042:	4b5c      	ldr	r3, [pc, #368]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006044:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006048:	f023 0218 	bic.w	r2, r3, #24
 800604c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006050:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006054:	4957      	ldr	r1, [pc, #348]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006056:	4313      	orrs	r3, r2
 8006058:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800605c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006064:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8006068:	613b      	str	r3, [r7, #16]
 800606a:	2300      	movs	r3, #0
 800606c:	617b      	str	r3, [r7, #20]
 800606e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006072:	460b      	mov	r3, r1
 8006074:	4313      	orrs	r3, r2
 8006076:	d032      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8006078:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800607c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006080:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006084:	d105      	bne.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006086:	4b4b      	ldr	r3, [pc, #300]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608a:	4a4a      	ldr	r2, [pc, #296]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800608c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006090:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8006092:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006096:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800609a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800609e:	d108      	bne.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80060a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060a4:	3308      	adds	r3, #8
 80060a6:	4618      	mov	r0, r3
 80060a8:	f001 fde0 	bl	8007c6c <RCCEx_PLL2_Config>
 80060ac:	4603      	mov	r3, r0
 80060ae:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 80060b2:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10d      	bne.n	80060d6 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80060ba:	4b3e      	ldr	r3, [pc, #248]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80060bc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80060c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80060cc:	4939      	ldr	r1, [pc, #228]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80060d4:	e003      	b.n	80060de <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80060da:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80060de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e6:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80060ea:	60bb      	str	r3, [r7, #8]
 80060ec:	2300      	movs	r3, #0
 80060ee:	60fb      	str	r3, [r7, #12]
 80060f0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80060f4:	460b      	mov	r3, r1
 80060f6:	4313      	orrs	r3, r2
 80060f8:	d03a      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80060fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006102:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006106:	d00e      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 8006108:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800610c:	d815      	bhi.n	800613a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 800610e:	2b00      	cmp	r3, #0
 8006110:	d017      	beq.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8006112:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006116:	d110      	bne.n	800613a <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006118:	4b26      	ldr	r3, [pc, #152]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800611a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611c:	4a25      	ldr	r2, [pc, #148]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800611e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006122:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006124:	e00e      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006126:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800612a:	3308      	adds	r3, #8
 800612c:	4618      	mov	r0, r3
 800612e:	f001 fd9d 	bl	8007c6c <RCCEx_PLL2_Config>
 8006132:	4603      	mov	r3, r0
 8006134:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006138:	e004      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800613a:	2301      	movs	r3, #1
 800613c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006140:	e000      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8006142:	bf00      	nop
    }
    if (ret == HAL_OK)
 8006144:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10d      	bne.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800614c:	4b19      	ldr	r3, [pc, #100]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800614e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006152:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006156:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800615a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800615e:	4915      	ldr	r1, [pc, #84]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8006160:	4313      	orrs	r3, r2
 8006162:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8006166:	e003      	b.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006168:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800616c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8006170:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006178:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800617c:	603b      	str	r3, [r7, #0]
 800617e:	2300      	movs	r3, #0
 8006180:	607b      	str	r3, [r7, #4]
 8006182:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006186:	460b      	mov	r3, r1
 8006188:	4313      	orrs	r3, r2
 800618a:	d00c      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800618c:	4b09      	ldr	r3, [pc, #36]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800618e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006192:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006196:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800619a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800619e:	4905      	ldr	r1, [pc, #20]	; (80061b4 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80061a6:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	37e8      	adds	r7, #232	; 0xe8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061b4:	46020c00 	.word	0x46020c00

080061b8 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80061b8:	b480      	push	{r7}
 80061ba:	b089      	sub	sp, #36	; 0x24
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 80061c0:	4bac      	ldr	r3, [pc, #688]	; (8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80061c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061c8:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 80061ca:	4baa      	ldr	r3, [pc, #680]	; (8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80061cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ce:	f003 0303 	and.w	r3, r3, #3
 80061d2:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80061d4:	4ba7      	ldr	r3, [pc, #668]	; (8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80061d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061d8:	0a1b      	lsrs	r3, r3, #8
 80061da:	f003 030f 	and.w	r3, r3, #15
 80061de:	3301      	adds	r3, #1
 80061e0:	613b      	str	r3, [r7, #16]
  pll1fracen = RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN;
 80061e2:	4ba4      	ldr	r3, [pc, #656]	; (8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80061e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e6:	f003 0310 	and.w	r3, r3, #16
 80061ea:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80061ec:	4ba1      	ldr	r3, [pc, #644]	; (8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80061ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f0:	08db      	lsrs	r3, r3, #3
 80061f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	fb02 f303 	mul.w	r3, r2, r3
 80061fc:	ee07 3a90 	vmov	s15, r3
 8006200:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006204:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	2b00      	cmp	r3, #0
 800620c:	f000 8123 	beq.w	8006456 <HAL_RCCEx_GetPLL1ClockFreq+0x29e>
  {
    switch (pll1source)
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	2b03      	cmp	r3, #3
 8006214:	d062      	beq.n	80062dc <HAL_RCCEx_GetPLL1ClockFreq+0x124>
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	2b03      	cmp	r3, #3
 800621a:	f200 8081 	bhi.w	8006320 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	2b01      	cmp	r3, #1
 8006222:	d024      	beq.n	800626e <HAL_RCCEx_GetPLL1ClockFreq+0xb6>
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	2b02      	cmp	r3, #2
 8006228:	d17a      	bne.n	8006320 <HAL_RCCEx_GetPLL1ClockFreq+0x168>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	ee07 3a90 	vmov	s15, r3
 8006230:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006234:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006478 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 8006238:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800623c:	4b8d      	ldr	r3, [pc, #564]	; (8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800623e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006244:	ee07 3a90 	vmov	s15, r3
 8006248:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800624c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006250:	eddf 5a8a 	vldr	s11, [pc, #552]	; 800647c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006254:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006258:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800625c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006260:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006264:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006268:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800626c:	e08f      	b.n	800638e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800626e:	4b81      	ldr	r3, [pc, #516]	; (8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d005      	beq.n	8006286 <HAL_RCCEx_GetPLL1ClockFreq+0xce>
 800627a:	4b7e      	ldr	r3, [pc, #504]	; (8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	0f1b      	lsrs	r3, r3, #28
 8006280:	f003 030f 	and.w	r3, r3, #15
 8006284:	e006      	b.n	8006294 <HAL_RCCEx_GetPLL1ClockFreq+0xdc>
 8006286:	4b7b      	ldr	r3, [pc, #492]	; (8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006288:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800628c:	041b      	lsls	r3, r3, #16
 800628e:	0f1b      	lsrs	r3, r3, #28
 8006290:	f003 030f 	and.w	r3, r3, #15
 8006294:	4a7a      	ldr	r2, [pc, #488]	; (8006480 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800629a:	ee07 3a90 	vmov	s15, r3
 800629e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	ee07 3a90 	vmov	s15, r3
 80062a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ac:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	ee07 3a90 	vmov	s15, r3
 80062b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80062be:	eddf 5a6f 	vldr	s11, [pc, #444]	; 800647c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80062c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80062d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062da:	e058      	b.n	800638e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	ee07 3a90 	vmov	s15, r3
 80062e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062e6:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006478 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>
 80062ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ee:	4b61      	ldr	r3, [pc, #388]	; (8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80062f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062f6:	ee07 3a90 	vmov	s15, r3
 80062fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80062fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8006302:	eddf 5a5e 	vldr	s11, [pc, #376]	; 800647c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006306:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800630a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800630e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006312:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006316:	ee67 7a27 	vmul.f32	s15, s14, s15
 800631a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800631e:	e036      	b.n	800638e <HAL_RCCEx_GetPLL1ClockFreq+0x1d6>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006320:	4b54      	ldr	r3, [pc, #336]	; (8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006328:	2b00      	cmp	r3, #0
 800632a:	d005      	beq.n	8006338 <HAL_RCCEx_GetPLL1ClockFreq+0x180>
 800632c:	4b51      	ldr	r3, [pc, #324]	; (8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	0f1b      	lsrs	r3, r3, #28
 8006332:	f003 030f 	and.w	r3, r3, #15
 8006336:	e006      	b.n	8006346 <HAL_RCCEx_GetPLL1ClockFreq+0x18e>
 8006338:	4b4e      	ldr	r3, [pc, #312]	; (8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800633a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800633e:	041b      	lsls	r3, r3, #16
 8006340:	0f1b      	lsrs	r3, r3, #28
 8006342:	f003 030f 	and.w	r3, r3, #15
 8006346:	4a4e      	ldr	r2, [pc, #312]	; (8006480 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>)
 8006348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800634c:	ee07 3a90 	vmov	s15, r3
 8006350:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	ee07 3a90 	vmov	s15, r3
 800635a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800635e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	ee07 3a90 	vmov	s15, r3
 8006368:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800636c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006370:	eddf 5a42 	vldr	s11, [pc, #264]	; 800647c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8006374:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006378:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800637c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006380:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8006384:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006388:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800638c:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 800638e:	4b39      	ldr	r3, [pc, #228]	; (8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006392:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006396:	2b00      	cmp	r3, #0
 8006398:	d017      	beq.n	80063ca <HAL_RCCEx_GetPLL1ClockFreq+0x212>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800639a:	4b36      	ldr	r3, [pc, #216]	; (8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 800639c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800639e:	0a5b      	lsrs	r3, r3, #9
 80063a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063a4:	ee07 3a90 	vmov	s15, r3
 80063a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 80063ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063b0:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80063b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80063b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80063c0:	ee17 2a90 	vmov	r2, s15
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	601a      	str	r2, [r3, #0]
 80063c8:	e002      	b.n	80063d0 <HAL_RCCEx_GetPLL1ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2200      	movs	r2, #0
 80063ce:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80063d0:	4b28      	ldr	r3, [pc, #160]	; (8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80063d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d017      	beq.n	800640c <HAL_RCCEx_GetPLL1ClockFreq+0x254>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80063dc:	4b25      	ldr	r3, [pc, #148]	; (8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 80063de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e0:	0c1b      	lsrs	r3, r3, #16
 80063e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063e6:	ee07 3a90 	vmov	s15, r3
 80063ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80063ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80063f2:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80063f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80063fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80063fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006402:	ee17 2a90 	vmov	r2, s15
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	605a      	str	r2, [r3, #4]
 800640a:	e002      	b.n	8006412 <HAL_RCCEx_GetPLL1ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 8006412:	4b18      	ldr	r3, [pc, #96]	; (8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006416:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800641a:	2b00      	cmp	r3, #0
 800641c:	d017      	beq.n	800644e <HAL_RCCEx_GetPLL1ClockFreq+0x296>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800641e:	4b15      	ldr	r3, [pc, #84]	; (8006474 <HAL_RCCEx_GetPLL1ClockFreq+0x2bc>)
 8006420:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006422:	0e1b      	lsrs	r3, r3, #24
 8006424:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006428:	ee07 3a90 	vmov	s15, r3
 800642c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8006430:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006434:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8006438:	edd7 6a07 	vldr	s13, [r7, #28]
 800643c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006440:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006444:	ee17 2a90 	vmov	r2, s15
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800644c:	e00c      	b.n	8006468 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	609a      	str	r2, [r3, #8]
}
 8006454:	e008      	b.n	8006468 <HAL_RCCEx_GetPLL1ClockFreq+0x2b0>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	609a      	str	r2, [r3, #8]
}
 8006468:	bf00      	nop
 800646a:	3724      	adds	r7, #36	; 0x24
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr
 8006474:	46020c00 	.word	0x46020c00
 8006478:	4b742400 	.word	0x4b742400
 800647c:	46000000 	.word	0x46000000
 8006480:	0800ab20 	.word	0x0800ab20

08006484 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006484:	b480      	push	{r7}
 8006486:	b089      	sub	sp, #36	; 0x24
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 800648c:	4bac      	ldr	r3, [pc, #688]	; (8006740 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800648e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006494:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8006496:	4baa      	ldr	r3, [pc, #680]	; (8006740 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800649a:	f003 0303 	and.w	r3, r3, #3
 800649e:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 80064a0:	4ba7      	ldr	r3, [pc, #668]	; (8006740 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80064a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a4:	0a1b      	lsrs	r3, r3, #8
 80064a6:	f003 030f 	and.w	r3, r3, #15
 80064aa:	3301      	adds	r3, #1
 80064ac:	613b      	str	r3, [r7, #16]
  pll2fracen = RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN;
 80064ae:	4ba4      	ldr	r3, [pc, #656]	; (8006740 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80064b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b2:	f003 0310 	and.w	r3, r3, #16
 80064b6:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 80064b8:	4ba1      	ldr	r3, [pc, #644]	; (8006740 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80064ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064bc:	08db      	lsrs	r3, r3, #3
 80064be:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	fb02 f303 	mul.w	r3, r2, r3
 80064c8:	ee07 3a90 	vmov	s15, r3
 80064cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064d0:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f000 8123 	beq.w	8006722 <HAL_RCCEx_GetPLL2ClockFreq+0x29e>
  {
    switch (pll2source)
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	2b03      	cmp	r3, #3
 80064e0:	d062      	beq.n	80065a8 <HAL_RCCEx_GetPLL2ClockFreq+0x124>
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	2b03      	cmp	r3, #3
 80064e6:	f200 8081 	bhi.w	80065ec <HAL_RCCEx_GetPLL2ClockFreq+0x168>
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d024      	beq.n	800653a <HAL_RCCEx_GetPLL2ClockFreq+0xb6>
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d17a      	bne.n	80065ec <HAL_RCCEx_GetPLL2ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	ee07 3a90 	vmov	s15, r3
 80064fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006500:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006744 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 8006504:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006508:	4b8d      	ldr	r3, [pc, #564]	; (8006740 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800650a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800650c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006510:	ee07 3a90 	vmov	s15, r3
 8006514:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006518:	ed97 6a02 	vldr	s12, [r7, #8]
 800651c:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8006748 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006520:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006524:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8006528:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800652c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8006530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006534:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006538:	e08f      	b.n	800665a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800653a:	4b81      	ldr	r3, [pc, #516]	; (8006740 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800653c:	689b      	ldr	r3, [r3, #8]
 800653e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d005      	beq.n	8006552 <HAL_RCCEx_GetPLL2ClockFreq+0xce>
 8006546:	4b7e      	ldr	r3, [pc, #504]	; (8006740 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006548:	689b      	ldr	r3, [r3, #8]
 800654a:	0f1b      	lsrs	r3, r3, #28
 800654c:	f003 030f 	and.w	r3, r3, #15
 8006550:	e006      	b.n	8006560 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
 8006552:	4b7b      	ldr	r3, [pc, #492]	; (8006740 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006554:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006558:	041b      	lsls	r3, r3, #16
 800655a:	0f1b      	lsrs	r3, r3, #28
 800655c:	f003 030f 	and.w	r3, r3, #15
 8006560:	4a7a      	ldr	r2, [pc, #488]	; (800674c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006562:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006566:	ee07 3a90 	vmov	s15, r3
 800656a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	ee07 3a90 	vmov	s15, r3
 8006574:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006578:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	ee07 3a90 	vmov	s15, r3
 8006582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006586:	ed97 6a02 	vldr	s12, [r7, #8]
 800658a:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006748 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 800658e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800659a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 800659e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065a6:	e058      	b.n	800665a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	ee07 3a90 	vmov	s15, r3
 80065ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065b2:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006744 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>
 80065b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065ba:	4b61      	ldr	r3, [pc, #388]	; (8006740 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80065bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065c2:	ee07 3a90 	vmov	s15, r3
 80065c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80065ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80065ce:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006748 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 80065d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80065d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 80065da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065de:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 80065e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065ea:	e036      	b.n	800665a <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 80065ec:	4b54      	ldr	r3, [pc, #336]	; (8006740 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d005      	beq.n	8006604 <HAL_RCCEx_GetPLL2ClockFreq+0x180>
 80065f8:	4b51      	ldr	r3, [pc, #324]	; (8006740 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	0f1b      	lsrs	r3, r3, #28
 80065fe:	f003 030f 	and.w	r3, r3, #15
 8006602:	e006      	b.n	8006612 <HAL_RCCEx_GetPLL2ClockFreq+0x18e>
 8006604:	4b4e      	ldr	r3, [pc, #312]	; (8006740 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006606:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800660a:	041b      	lsls	r3, r3, #16
 800660c:	0f1b      	lsrs	r3, r3, #28
 800660e:	f003 030f 	and.w	r3, r3, #15
 8006612:	4a4e      	ldr	r2, [pc, #312]	; (800674c <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>)
 8006614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006618:	ee07 3a90 	vmov	s15, r3
 800661c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006620:	693b      	ldr	r3, [r7, #16]
 8006622:	ee07 3a90 	vmov	s15, r3
 8006626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800662a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	ee07 3a90 	vmov	s15, r3
 8006634:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006638:	ed97 6a02 	vldr	s12, [r7, #8]
 800663c:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006748 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8006640:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006644:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006648:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800664c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8006650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006654:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006658:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 800665a:	4b39      	ldr	r3, [pc, #228]	; (8006740 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800665c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d017      	beq.n	8006696 <HAL_RCCEx_GetPLL2ClockFreq+0x212>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006666:	4b36      	ldr	r3, [pc, #216]	; (8006740 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 8006668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800666a:	0a5b      	lsrs	r3, r3, #9
 800666c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006670:	ee07 3a90 	vmov	s15, r3
 8006674:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8006678:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800667c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006680:	edd7 6a07 	vldr	s13, [r7, #28]
 8006684:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800668c:	ee17 2a90 	vmov	r2, s15
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	601a      	str	r2, [r3, #0]
 8006694:	e002      	b.n	800669c <HAL_RCCEx_GetPLL2ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2200      	movs	r2, #0
 800669a:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 800669c:	4b28      	ldr	r3, [pc, #160]	; (8006740 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 800669e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d017      	beq.n	80066d8 <HAL_RCCEx_GetPLL2ClockFreq+0x254>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80066a8:	4b25      	ldr	r3, [pc, #148]	; (8006740 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80066aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ac:	0c1b      	lsrs	r3, r3, #16
 80066ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066b2:	ee07 3a90 	vmov	s15, r3
 80066b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 80066ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80066be:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80066c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80066c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066ce:	ee17 2a90 	vmov	r2, s15
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	605a      	str	r2, [r3, #4]
 80066d6:	e002      	b.n	80066de <HAL_RCCEx_GetPLL2ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2200      	movs	r2, #0
 80066dc:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 80066de:	4b18      	ldr	r3, [pc, #96]	; (8006740 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80066e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d017      	beq.n	800671a <HAL_RCCEx_GetPLL2ClockFreq+0x296>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 80066ea:	4b15      	ldr	r3, [pc, #84]	; (8006740 <HAL_RCCEx_GetPLL2ClockFreq+0x2bc>)
 80066ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066ee:	0e1b      	lsrs	r3, r3, #24
 80066f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066f4:	ee07 3a90 	vmov	s15, r3
 80066f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 80066fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006700:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8006704:	edd7 6a07 	vldr	s13, [r7, #28]
 8006708:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800670c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006710:	ee17 2a90 	vmov	r2, s15
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006718:	e00c      	b.n	8006734 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	609a      	str	r2, [r3, #8]
}
 8006720:	e008      	b.n	8006734 <HAL_RCCEx_GetPLL2ClockFreq+0x2b0>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	609a      	str	r2, [r3, #8]
}
 8006734:	bf00      	nop
 8006736:	3724      	adds	r7, #36	; 0x24
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr
 8006740:	46020c00 	.word	0x46020c00
 8006744:	4b742400 	.word	0x4b742400
 8006748:	46000000 	.word	0x46000000
 800674c:	0800ab20 	.word	0x0800ab20

08006750 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006750:	b480      	push	{r7}
 8006752:	b089      	sub	sp, #36	; 0x24
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8006758:	4bac      	ldr	r3, [pc, #688]	; (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800675a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800675c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006760:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8006762:	4baa      	ldr	r3, [pc, #680]	; (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006766:	f003 0303 	and.w	r3, r3, #3
 800676a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 800676c:	4ba7      	ldr	r3, [pc, #668]	; (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800676e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006770:	0a1b      	lsrs	r3, r3, #8
 8006772:	f003 030f 	and.w	r3, r3, #15
 8006776:	3301      	adds	r3, #1
 8006778:	613b      	str	r3, [r7, #16]
  pll3fracen = RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN;
 800677a:	4ba4      	ldr	r3, [pc, #656]	; (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800677c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800677e:	f003 0310 	and.w	r3, r3, #16
 8006782:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8006784:	4ba1      	ldr	r3, [pc, #644]	; (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006788:	08db      	lsrs	r3, r3, #3
 800678a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	fb02 f303 	mul.w	r3, r2, r3
 8006794:	ee07 3a90 	vmov	s15, r3
 8006798:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800679c:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f000 8123 	beq.w	80069ee <HAL_RCCEx_GetPLL3ClockFreq+0x29e>
  {
    switch (pll3source)
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	2b03      	cmp	r3, #3
 80067ac:	d062      	beq.n	8006874 <HAL_RCCEx_GetPLL3ClockFreq+0x124>
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	2b03      	cmp	r3, #3
 80067b2:	f200 8081 	bhi.w	80068b8 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	2b01      	cmp	r3, #1
 80067ba:	d024      	beq.n	8006806 <HAL_RCCEx_GetPLL3ClockFreq+0xb6>
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d17a      	bne.n	80068b8 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	ee07 3a90 	vmov	s15, r3
 80067c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067cc:	eddf 6a90 	vldr	s13, [pc, #576]	; 8006a10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 80067d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067d4:	4b8d      	ldr	r3, [pc, #564]	; (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80067d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067dc:	ee07 3a90 	vmov	s15, r3
 80067e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80067e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80067e8:	eddf 5a8a 	vldr	s11, [pc, #552]	; 8006a14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 80067ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80067f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80067f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80067fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006800:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8006804:	e08f      	b.n	8006926 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8006806:	4b81      	ldr	r3, [pc, #516]	; (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800680e:	2b00      	cmp	r3, #0
 8006810:	d005      	beq.n	800681e <HAL_RCCEx_GetPLL3ClockFreq+0xce>
 8006812:	4b7e      	ldr	r3, [pc, #504]	; (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	0f1b      	lsrs	r3, r3, #28
 8006818:	f003 030f 	and.w	r3, r3, #15
 800681c:	e006      	b.n	800682c <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
 800681e:	4b7b      	ldr	r3, [pc, #492]	; (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006820:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006824:	041b      	lsls	r3, r3, #16
 8006826:	0f1b      	lsrs	r3, r3, #28
 8006828:	f003 030f 	and.w	r3, r3, #15
 800682c:	4a7a      	ldr	r2, [pc, #488]	; (8006a18 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 800682e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006832:	ee07 3a90 	vmov	s15, r3
 8006836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	ee07 3a90 	vmov	s15, r3
 8006840:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006844:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006848:	69bb      	ldr	r3, [r7, #24]
 800684a:	ee07 3a90 	vmov	s15, r3
 800684e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006852:	ed97 6a02 	vldr	s12, [r7, #8]
 8006856:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8006a14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800685a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800685e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006866:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800686a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800686e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006872:	e058      	b.n	8006926 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	ee07 3a90 	vmov	s15, r3
 800687a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800687e:	eddf 6a64 	vldr	s13, [pc, #400]	; 8006a10 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>
 8006882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006886:	4b61      	ldr	r3, [pc, #388]	; (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800688a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800688e:	ee07 3a90 	vmov	s15, r3
 8006892:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8006896:	ed97 6a02 	vldr	s12, [r7, #8]
 800689a:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8006a14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800689e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80068a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 80068a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 80068ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068b6:	e036      	b.n	8006926 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 80068b8:	4b54      	ldr	r3, [pc, #336]	; (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d005      	beq.n	80068d0 <HAL_RCCEx_GetPLL3ClockFreq+0x180>
 80068c4:	4b51      	ldr	r3, [pc, #324]	; (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80068c6:	689b      	ldr	r3, [r3, #8]
 80068c8:	0f1b      	lsrs	r3, r3, #28
 80068ca:	f003 030f 	and.w	r3, r3, #15
 80068ce:	e006      	b.n	80068de <HAL_RCCEx_GetPLL3ClockFreq+0x18e>
 80068d0:	4b4e      	ldr	r3, [pc, #312]	; (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80068d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80068d6:	041b      	lsls	r3, r3, #16
 80068d8:	0f1b      	lsrs	r3, r3, #28
 80068da:	f003 030f 	and.w	r3, r3, #15
 80068de:	4a4e      	ldr	r2, [pc, #312]	; (8006a18 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>)
 80068e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068e4:	ee07 3a90 	vmov	s15, r3
 80068e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	ee07 3a90 	vmov	s15, r3
 80068f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 80068fa:	69bb      	ldr	r3, [r7, #24]
 80068fc:	ee07 3a90 	vmov	s15, r3
 8006900:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006904:	ed97 6a02 	vldr	s12, [r7, #8]
 8006908:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006a14 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 800690c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006910:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006914:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006918:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 800691c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006920:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006924:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8006926:	4b39      	ldr	r3, [pc, #228]	; (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800692a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800692e:	2b00      	cmp	r3, #0
 8006930:	d017      	beq.n	8006962 <HAL_RCCEx_GetPLL3ClockFreq+0x212>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006932:	4b36      	ldr	r3, [pc, #216]	; (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006936:	0a5b      	lsrs	r3, r3, #9
 8006938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800693c:	ee07 3a90 	vmov	s15, r3
 8006940:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8006944:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006948:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800694c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006950:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006958:	ee17 2a90 	vmov	r2, s15
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	601a      	str	r2, [r3, #0]
 8006960:	e002      	b.n	8006968 <HAL_RCCEx_GetPLL3ClockFreq+0x218>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8006968:	4b28      	ldr	r3, [pc, #160]	; (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 800696a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800696c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006970:	2b00      	cmp	r3, #0
 8006972:	d017      	beq.n	80069a4 <HAL_RCCEx_GetPLL3ClockFreq+0x254>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8006974:	4b25      	ldr	r3, [pc, #148]	; (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 8006976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006978:	0c1b      	lsrs	r3, r3, #16
 800697a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800697e:	ee07 3a90 	vmov	s15, r3
 8006982:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8006986:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800698a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 800698e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800699a:	ee17 2a90 	vmov	r2, s15
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	605a      	str	r2, [r3, #4]
 80069a2:	e002      	b.n	80069aa <HAL_RCCEx_GetPLL3ClockFreq+0x25a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 80069aa:	4b18      	ldr	r3, [pc, #96]	; (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80069ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d017      	beq.n	80069e6 <HAL_RCCEx_GetPLL3ClockFreq+0x296>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80069b6:	4b15      	ldr	r3, [pc, #84]	; (8006a0c <HAL_RCCEx_GetPLL3ClockFreq+0x2bc>)
 80069b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ba:	0e1b      	lsrs	r3, r3, #24
 80069bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069c0:	ee07 3a90 	vmov	s15, r3
 80069c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 80069c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80069cc:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 80069d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80069d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80069d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80069dc:	ee17 2a90 	vmov	r2, s15
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 80069e4:	e00c      	b.n	8006a00 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	609a      	str	r2, [r3, #8]
}
 80069ec:	e008      	b.n	8006a00 <HAL_RCCEx_GetPLL3ClockFreq+0x2b0>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	609a      	str	r2, [r3, #8]
}
 8006a00:	bf00      	nop
 8006a02:	3724      	adds	r7, #36	; 0x24
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr
 8006a0c:	46020c00 	.word	0x46020c00
 8006a10:	4b742400 	.word	0x4b742400
 8006a14:	46000000 	.word	0x46000000
 8006a18:	0800ab20 	.word	0x0800ab20

08006a1c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_FDCAN1 FDCAN1 peripheral clock
  *            @arg @ref RCC_PERIPHCLK_DAC1 DAC1 peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b08e      	sub	sp, #56	; 0x38
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006a26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a2a:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8006a2e:	430b      	orrs	r3, r1
 8006a30:	d145      	bne.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8006a32:	4ba7      	ldr	r3, [pc, #668]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a34:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a3c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8006a3e:	4ba4      	ldr	r3, [pc, #656]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a44:	f003 0302 	and.w	r3, r3, #2
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d108      	bne.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8006a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a52:	d104      	bne.n	8006a5e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8006a54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a58:	637b      	str	r3, [r7, #52]	; 0x34
 8006a5a:	f001 b8fc 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8006a5e:	4b9c      	ldr	r3, [pc, #624]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a6c:	d114      	bne.n	8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a74:	d110      	bne.n	8006a98 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a76:	4b96      	ldr	r3, [pc, #600]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a84:	d103      	bne.n	8006a8e <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8006a86:	23fa      	movs	r3, #250	; 0xfa
 8006a88:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a8a:	f001 b8e4 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8006a8e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006a92:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8006a94:	f001 b8df 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8006a98:	4b8d      	ldr	r3, [pc, #564]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006aa4:	d107      	bne.n	8006ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8006aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006aac:	d103      	bne.n	8006ab6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8006aae:	4b89      	ldr	r3, [pc, #548]	; (8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8006ab0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ab2:	f001 b8d0 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8006aba:	f001 b8cc 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006abe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ac2:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8006ac6:	430b      	orrs	r3, r1
 8006ac8:	d151      	bne.n	8006b6e <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8006aca:	4b81      	ldr	r3, [pc, #516]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006acc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006ad0:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006ad4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ad8:	2b80      	cmp	r3, #128	; 0x80
 8006ada:	d035      	beq.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8006adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ade:	2b80      	cmp	r3, #128	; 0x80
 8006ae0:	d841      	bhi.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae4:	2b60      	cmp	r3, #96	; 0x60
 8006ae6:	d02a      	beq.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 8006ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aea:	2b60      	cmp	r3, #96	; 0x60
 8006aec:	d83b      	bhi.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af0:	2b40      	cmp	r3, #64	; 0x40
 8006af2:	d009      	beq.n	8006b08 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8006af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af6:	2b40      	cmp	r3, #64	; 0x40
 8006af8:	d835      	bhi.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8006afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00c      	beq.n	8006b1a <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 8006b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b02:	2b20      	cmp	r3, #32
 8006b04:	d012      	beq.n	8006b2c <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006b06:	e02e      	b.n	8006b66 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006b08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7ff fb53 	bl	80061b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b16:	f001 b89e 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006b1a:	f107 0318 	add.w	r3, r7, #24
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f7ff fcb0 	bl	8006484 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b28:	f001 b895 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006b2c:	f107 030c 	add.w	r3, r7, #12
 8006b30:	4618      	mov	r0, r3
 8006b32:	f7ff fe0d 	bl	8006750 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b3a:	f001 b88c 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006b3e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006b42:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b44:	f001 b887 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b48:	4b61      	ldr	r3, [pc, #388]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b54:	d103      	bne.n	8006b5e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8006b56:	4b60      	ldr	r3, [pc, #384]	; (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006b58:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006b5a:	f001 b87c 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b62:	f001 b878 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :
      {
        frequency = 0U;
 8006b66:	2300      	movs	r3, #0
 8006b68:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006b6a:	f001 b874 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006b6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006b72:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8006b76:	430b      	orrs	r3, r1
 8006b78:	d158      	bne.n	8006c2c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006b7a:	4b55      	ldr	r3, [pc, #340]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006b7c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006b80:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006b84:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b8c:	d03b      	beq.n	8006c06 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8006b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b94:	d846      	bhi.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b9c:	d02e      	beq.n	8006bfc <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006ba4:	d83e      	bhi.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bac:	d00b      	beq.n	8006bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8006bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bb4:	d836      	bhi.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8006bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d00d      	beq.n	8006bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8006bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bc2:	d012      	beq.n	8006bea <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8006bc4:	e02e      	b.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006bc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7ff faf4 	bl	80061b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006bd4:	f001 b83f 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006bd8:	f107 0318 	add.w	r3, r7, #24
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f7ff fc51 	bl	8006484 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006be6:	f001 b836 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006bea:	f107 030c 	add.w	r3, r7, #12
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7ff fdae 	bl	8006750 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006bf8:	f001 b82d 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8006bfc:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006c00:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c02:	f001 b828 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c06:	4b32      	ldr	r3, [pc, #200]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c12:	d103      	bne.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 8006c14:	4b30      	ldr	r3, [pc, #192]	; (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006c16:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006c18:	f001 b81d 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c20:	f001 b819 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006c28:	f001 b815 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8006c2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c30:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8006c34:	430b      	orrs	r3, r1
 8006c36:	d126      	bne.n	8006c86 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8006c38:	4b25      	ldr	r3, [pc, #148]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006c3a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c42:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8006c44:	4b22      	ldr	r3, [pc, #136]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c50:	d106      	bne.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d103      	bne.n	8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8006c58:	4b1f      	ldr	r3, [pc, #124]	; (8006cd8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8006c5a:	637b      	str	r3, [r7, #52]	; 0x34
 8006c5c:	f000 bffb 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8006c60:	4b1b      	ldr	r3, [pc, #108]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c6c:	d107      	bne.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8006c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c74:	d103      	bne.n	8006c7e <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8006c76:	4b19      	ldr	r3, [pc, #100]	; (8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8006c78:	637b      	str	r3, [r7, #52]	; 0x34
 8006c7a:	f000 bfec 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	637b      	str	r3, [r7, #52]	; 0x34
 8006c82:	f000 bfe8 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8006c86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c8a:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8006c8e:	430b      	orrs	r3, r1
 8006c90:	d164      	bne.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x340>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006c92:	4b0f      	ldr	r3, [pc, #60]	; (8006cd0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8006c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c98:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006c9c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8006c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca0:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006ca4:	d03d      	beq.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8006ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca8:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006cac:	d852      	bhi.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cb4:	d014      	beq.n	8006ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8006cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006cbc:	d84a      	bhi.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d01f      	beq.n	8006d04 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8006cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006cca:	d012      	beq.n	8006cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8006ccc:	e042      	b.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006cce:	bf00      	nop
 8006cd0:	46020c00 	.word	0x46020c00
 8006cd4:	0007a120 	.word	0x0007a120
 8006cd8:	00f42400 	.word	0x00f42400
 8006cdc:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ce0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7ff fa67 	bl	80061b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8006cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006cee:	f000 bfb2 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006cf2:	f107 0318 	add.w	r3, r7, #24
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7ff fbc4 	bl	8006484 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d00:	f000 bfa9 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006d04:	4bab      	ldr	r3, [pc, #684]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d10:	d103      	bne.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 8006d12:	4ba9      	ldr	r3, [pc, #676]	; (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006d14:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8006d16:	f000 bf9e 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d1e:	f000 bf9a 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006d22:	4ba4      	ldr	r3, [pc, #656]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d005      	beq.n	8006d3a <HAL_RCCEx_GetPeriphCLKFreq+0x31e>
 8006d2e:	4ba1      	ldr	r3, [pc, #644]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	0e1b      	lsrs	r3, r3, #24
 8006d34:	f003 030f 	and.w	r3, r3, #15
 8006d38:	e006      	b.n	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>
 8006d3a:	4b9e      	ldr	r3, [pc, #632]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006d3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006d40:	041b      	lsls	r3, r3, #16
 8006d42:	0e1b      	lsrs	r3, r3, #24
 8006d44:	f003 030f 	and.w	r3, r3, #15
 8006d48:	4a9c      	ldr	r2, [pc, #624]	; (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8006d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d50:	f000 bf81 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default :

        frequency = 0U;
 8006d54:	2300      	movs	r3, #0
 8006d56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006d58:	f000 bf7d 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8006d5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d60:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8006d64:	430b      	orrs	r3, r1
 8006d66:	d175      	bne.n	8006e54 <HAL_RCCEx_GetPeriphCLKFreq+0x438>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8006d68:	4b92      	ldr	r3, [pc, #584]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006d6a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d72:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8006d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d15b      	bne.n	8006e32 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8006d7a:	4b8e      	ldr	r3, [pc, #568]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d80:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006d84:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8006d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d88:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006d8c:	d034      	beq.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x3dc>
 8006d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d90:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006d94:	d849      	bhi.n	8006e2a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8006d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006d9c:	d00b      	beq.n	8006db6 <HAL_RCCEx_GetPeriphCLKFreq+0x39a>
 8006d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006da4:	d841      	bhi.n	8006e2a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
 8006da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d016      	beq.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8006dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006db2:	d009      	beq.n	8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x3ac>
 8006db4:	e039      	b.n	8006e2a <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7ff f9fc 	bl	80061b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006dc4:	f000 bf47 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dc8:	f107 0318 	add.w	r3, r7, #24
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7ff fb59 	bl	8006484 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006dd6:	f000 bf3e 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 8006dda:	4b76      	ldr	r3, [pc, #472]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006de2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006de6:	d103      	bne.n	8006df0 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
          {
            frequency = HSI48_VALUE;
 8006de8:	4b73      	ldr	r3, [pc, #460]	; (8006fb8 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8006dea:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8006dec:	f000 bf33 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
            frequency = 0U;
 8006df0:	2300      	movs	r3, #0
 8006df2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006df4:	f000 bf2f 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8006df8:	4b6e      	ldr	r3, [pc, #440]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d005      	beq.n	8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
 8006e04:	4b6b      	ldr	r3, [pc, #428]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	0e1b      	lsrs	r3, r3, #24
 8006e0a:	f003 030f 	and.w	r3, r3, #15
 8006e0e:	e006      	b.n	8006e1e <HAL_RCCEx_GetPeriphCLKFreq+0x402>
 8006e10:	4b68      	ldr	r3, [pc, #416]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006e12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006e16:	041b      	lsls	r3, r3, #16
 8006e18:	0e1b      	lsrs	r3, r3, #24
 8006e1a:	f003 030f 	and.w	r3, r3, #15
 8006e1e:	4a67      	ldr	r2, [pc, #412]	; (8006fbc <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8006e20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e24:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006e26:	f000 bf16 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
        default :
        {
          frequency = 0U;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8006e2e:	f000 bf12 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8006e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e34:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e38:	d108      	bne.n	8006e4c <HAL_RCCEx_GetPeriphCLKFreq+0x430>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f7ff f9ba 	bl	80061b8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8006e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e46:	637b      	str	r3, [r7, #52]	; 0x34
 8006e48:	f000 bf05 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else
    {
      frequency = 0U;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	637b      	str	r3, [r7, #52]	; 0x34
 8006e50:	f000 bf01 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8006e54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e58:	1e51      	subs	r1, r2, #1
 8006e5a:	430b      	orrs	r3, r1
 8006e5c:	d136      	bne.n	8006ecc <HAL_RCCEx_GetPeriphCLKFreq+0x4b0>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006e5e:	4b55      	ldr	r3, [pc, #340]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006e60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e64:	f003 0303 	and.w	r3, r3, #3
 8006e68:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8006e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d104      	bne.n	8006e7a <HAL_RCCEx_GetPeriphCLKFreq+0x45e>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8006e70:	f7fe fb34 	bl	80054dc <HAL_RCC_GetPCLK2Freq>
 8006e74:	6378      	str	r0, [r7, #52]	; 0x34
 8006e76:	f000 beee 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8006e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d104      	bne.n	8006e8a <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006e80:	f7fe f9f6 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 8006e84:	6378      	str	r0, [r7, #52]	; 0x34
 8006e86:	f000 bee6 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8006e8a:	4b4a      	ldr	r3, [pc, #296]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e96:	d106      	bne.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 8006e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9a:	2b02      	cmp	r3, #2
 8006e9c:	d103      	bne.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
    {
      frequency = HSI_VALUE;
 8006e9e:	4b48      	ldr	r3, [pc, #288]	; (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006ea0:	637b      	str	r3, [r7, #52]	; 0x34
 8006ea2:	f000 bed8 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8006ea6:	4b43      	ldr	r3, [pc, #268]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006ea8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006eac:	f003 0302 	and.w	r3, r3, #2
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d107      	bne.n	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
 8006eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb6:	2b03      	cmp	r3, #3
 8006eb8:	d104      	bne.n	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>
    {
      frequency = LSE_VALUE;
 8006eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ebe:	637b      	str	r3, [r7, #52]	; 0x34
 8006ec0:	f000 bec9 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	637b      	str	r3, [r7, #52]	; 0x34
 8006ec8:	f000 bec5 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 8006ecc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ed0:	1e91      	subs	r1, r2, #2
 8006ed2:	430b      	orrs	r3, r1
 8006ed4:	d136      	bne.n	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006ed6:	4b37      	ldr	r3, [pc, #220]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006edc:	f003 030c 	and.w	r3, r3, #12
 8006ee0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 8006ee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d104      	bne.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x4d6>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006ee8:	f7fe fae4 	bl	80054b4 <HAL_RCC_GetPCLK1Freq>
 8006eec:	6378      	str	r0, [r7, #52]	; 0x34
 8006eee:	f000 beb2 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8006ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ef4:	2b04      	cmp	r3, #4
 8006ef6:	d104      	bne.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0x4e6>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006ef8:	f7fe f9ba 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 8006efc:	6378      	str	r0, [r7, #52]	; 0x34
 8006efe:	f000 beaa 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8006f02:	4b2c      	ldr	r3, [pc, #176]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f0e:	d106      	bne.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
 8006f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f12:	2b08      	cmp	r3, #8
 8006f14:	d103      	bne.n	8006f1e <HAL_RCCEx_GetPeriphCLKFreq+0x502>
    {
      frequency = HSI_VALUE;
 8006f16:	4b2a      	ldr	r3, [pc, #168]	; (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006f18:	637b      	str	r3, [r7, #52]	; 0x34
 8006f1a:	f000 be9c 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8006f1e:	4b25      	ldr	r3, [pc, #148]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006f20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f24:	f003 0302 	and.w	r3, r3, #2
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d107      	bne.n	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
 8006f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f2e:	2b0c      	cmp	r3, #12
 8006f30:	d104      	bne.n	8006f3c <HAL_RCCEx_GetPeriphCLKFreq+0x520>
    {
      frequency = LSE_VALUE;
 8006f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f36:	637b      	str	r3, [r7, #52]	; 0x34
 8006f38:	f000 be8d 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	637b      	str	r3, [r7, #52]	; 0x34
 8006f40:	f000 be89 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8006f44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f48:	1f11      	subs	r1, r2, #4
 8006f4a:	430b      	orrs	r3, r1
 8006f4c:	d13e      	bne.n	8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006f4e:	4b19      	ldr	r3, [pc, #100]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006f54:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006f58:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8006f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d104      	bne.n	8006f6a <HAL_RCCEx_GetPeriphCLKFreq+0x54e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006f60:	f7fe faa8 	bl	80054b4 <HAL_RCC_GetPCLK1Freq>
 8006f64:	6378      	str	r0, [r7, #52]	; 0x34
 8006f66:	f000 be76 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8006f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6c:	2b10      	cmp	r3, #16
 8006f6e:	d104      	bne.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0x55e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006f70:	f7fe f97e 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 8006f74:	6378      	str	r0, [r7, #52]	; 0x34
 8006f76:	f000 be6e 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8006f7a:	4b0e      	ldr	r3, [pc, #56]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f86:	d106      	bne.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
 8006f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8a:	2b20      	cmp	r3, #32
 8006f8c:	d103      	bne.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0x57a>
    {
      frequency = HSI_VALUE;
 8006f8e:	4b0c      	ldr	r3, [pc, #48]	; (8006fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8006f90:	637b      	str	r3, [r7, #52]	; 0x34
 8006f92:	f000 be60 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8006f96:	4b07      	ldr	r3, [pc, #28]	; (8006fb4 <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8006f98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006f9c:	f003 0302 	and.w	r3, r3, #2
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	d10f      	bne.n	8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8006fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fa6:	2b30      	cmp	r3, #48	; 0x30
 8006fa8:	d10c      	bne.n	8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
    {
      frequency = LSE_VALUE;
 8006faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fae:	637b      	str	r3, [r7, #52]	; 0x34
 8006fb0:	f000 be51 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8006fb4:	46020c00 	.word	0x46020c00
 8006fb8:	02dc6c00 	.word	0x02dc6c00
 8006fbc:	0800ab20 	.word	0x0800ab20
 8006fc0:	00f42400 	.word	0x00f42400
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	637b      	str	r3, [r7, #52]	; 0x34
 8006fc8:	f000 be45 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 8006fcc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fd0:	f1a2 0108 	sub.w	r1, r2, #8
 8006fd4:	430b      	orrs	r3, r1
 8006fd6:	d136      	bne.n	8007046 <HAL_RCCEx_GetPeriphCLKFreq+0x62a>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006fd8:	4b9f      	ldr	r3, [pc, #636]	; (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8006fda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006fde:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006fe2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 8006fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d104      	bne.n	8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8006fea:	f7fe fa63 	bl	80054b4 <HAL_RCC_GetPCLK1Freq>
 8006fee:	6378      	str	r0, [r7, #52]	; 0x34
 8006ff0:	f000 be31 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 8006ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff6:	2b40      	cmp	r3, #64	; 0x40
 8006ff8:	d104      	bne.n	8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8006ffa:	f7fe f939 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 8006ffe:	6378      	str	r0, [r7, #52]	; 0x34
 8007000:	f000 be29 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 8007004:	4b94      	ldr	r3, [pc, #592]	; (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800700c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007010:	d106      	bne.n	8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
 8007012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007014:	2b80      	cmp	r3, #128	; 0x80
 8007016:	d103      	bne.n	8007020 <HAL_RCCEx_GetPeriphCLKFreq+0x604>
    {
      frequency = HSI_VALUE;
 8007018:	4b90      	ldr	r3, [pc, #576]	; (800725c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800701a:	637b      	str	r3, [r7, #52]	; 0x34
 800701c:	f000 be1b 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8007020:	4b8d      	ldr	r3, [pc, #564]	; (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007022:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007026:	f003 0302 	and.w	r3, r3, #2
 800702a:	2b02      	cmp	r3, #2
 800702c:	d107      	bne.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0x622>
 800702e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007030:	2bc0      	cmp	r3, #192	; 0xc0
 8007032:	d104      	bne.n	800703e <HAL_RCCEx_GetPeriphCLKFreq+0x622>
    {
      frequency = LSE_VALUE;
 8007034:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007038:	637b      	str	r3, [r7, #52]	; 0x34
 800703a:	f000 be0c 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800703e:	2300      	movs	r3, #0
 8007040:	637b      	str	r3, [r7, #52]	; 0x34
 8007042:	f000 be08 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8007046:	e9d7 2300 	ldrd	r2, r3, [r7]
 800704a:	f1a2 0110 	sub.w	r1, r2, #16
 800704e:	430b      	orrs	r3, r1
 8007050:	d139      	bne.n	80070c6 <HAL_RCCEx_GetPeriphCLKFreq+0x6aa>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8007052:	4b81      	ldr	r3, [pc, #516]	; (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007054:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007058:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800705c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800705e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007060:	2b00      	cmp	r3, #0
 8007062:	d104      	bne.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x652>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007064:	f7fe fa26 	bl	80054b4 <HAL_RCC_GetPCLK1Freq>
 8007068:	6378      	str	r0, [r7, #52]	; 0x34
 800706a:	f000 bdf4 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800706e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007070:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007074:	d104      	bne.n	8007080 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007076:	f7fe f8fb 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 800707a:	6378      	str	r0, [r7, #52]	; 0x34
 800707c:	f000 bdeb 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8007080:	4b75      	ldr	r3, [pc, #468]	; (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800708c:	d107      	bne.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 800708e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007090:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007094:	d103      	bne.n	800709e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
    {
      frequency = HSI_VALUE;
 8007096:	4b71      	ldr	r3, [pc, #452]	; (800725c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007098:	637b      	str	r3, [r7, #52]	; 0x34
 800709a:	f000 bddc 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800709e:	4b6e      	ldr	r3, [pc, #440]	; (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80070a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80070a4:	f003 0302 	and.w	r3, r3, #2
 80070a8:	2b02      	cmp	r3, #2
 80070aa:	d108      	bne.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
 80070ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070b2:	d104      	bne.n	80070be <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
    {
      frequency = LSE_VALUE;
 80070b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070b8:	637b      	str	r3, [r7, #52]	; 0x34
 80070ba:	f000 bdcc 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80070be:	2300      	movs	r3, #0
 80070c0:	637b      	str	r3, [r7, #52]	; 0x34
 80070c2:	f000 bdc8 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80070c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070ca:	f1a2 0120 	sub.w	r1, r2, #32
 80070ce:	430b      	orrs	r3, r1
 80070d0:	d158      	bne.n	8007184 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80070d2:	4b61      	ldr	r3, [pc, #388]	; (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80070d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80070d8:	f003 0307 	and.w	r3, r3, #7
 80070dc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80070de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d104      	bne.n	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0x6d2>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80070e4:	f7fe fa0e 	bl	8005504 <HAL_RCC_GetPCLK3Freq>
 80070e8:	6378      	str	r0, [r7, #52]	; 0x34
 80070ea:	f000 bdb4 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80070ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d104      	bne.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80070f4:	f7fe f8bc 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 80070f8:	6378      	str	r0, [r7, #52]	; 0x34
 80070fa:	f000 bdac 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80070fe:	4b56      	ldr	r3, [pc, #344]	; (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800710a:	d106      	bne.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
 800710c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710e:	2b02      	cmp	r3, #2
 8007110:	d103      	bne.n	800711a <HAL_RCCEx_GetPeriphCLKFreq+0x6fe>
    {
      frequency = HSI_VALUE;
 8007112:	4b52      	ldr	r3, [pc, #328]	; (800725c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007114:	637b      	str	r3, [r7, #52]	; 0x34
 8007116:	f000 bd9e 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 800711a:	4b4f      	ldr	r3, [pc, #316]	; (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800711c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007120:	f003 0302 	and.w	r3, r3, #2
 8007124:	2b02      	cmp	r3, #2
 8007126:	d107      	bne.n	8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
 8007128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800712a:	2b03      	cmp	r3, #3
 800712c:	d104      	bne.n	8007138 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
    {
      frequency = LSE_VALUE;
 800712e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007132:	637b      	str	r3, [r7, #52]	; 0x34
 8007134:	f000 bd8f 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8007138:	4b47      	ldr	r3, [pc, #284]	; (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 0320 	and.w	r3, r3, #32
 8007140:	2b20      	cmp	r3, #32
 8007142:	d11b      	bne.n	800717c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
 8007144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007146:	2b04      	cmp	r3, #4
 8007148:	d118      	bne.n	800717c <HAL_RCCEx_GetPeriphCLKFreq+0x760>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800714a:	4b43      	ldr	r3, [pc, #268]	; (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800714c:	689b      	ldr	r3, [r3, #8]
 800714e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007152:	2b00      	cmp	r3, #0
 8007154:	d005      	beq.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8007156:	4b40      	ldr	r3, [pc, #256]	; (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007158:	689b      	ldr	r3, [r3, #8]
 800715a:	0e1b      	lsrs	r3, r3, #24
 800715c:	f003 030f 	and.w	r3, r3, #15
 8007160:	e006      	b.n	8007170 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 8007162:	4b3d      	ldr	r3, [pc, #244]	; (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007164:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007168:	041b      	lsls	r3, r3, #16
 800716a:	0e1b      	lsrs	r3, r3, #24
 800716c:	f003 030f 	and.w	r3, r3, #15
 8007170:	4a3b      	ldr	r2, [pc, #236]	; (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007176:	637b      	str	r3, [r7, #52]	; 0x34
 8007178:	f000 bd6d 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800717c:	2300      	movs	r3, #0
 800717e:	637b      	str	r3, [r7, #52]	; 0x34
 8007180:	f000 bd69 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8007184:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007188:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800718c:	430b      	orrs	r3, r1
 800718e:	d169      	bne.n	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x848>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8007190:	4b31      	ldr	r3, [pc, #196]	; (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007192:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007196:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800719a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800719c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071a2:	d104      	bne.n	80071ae <HAL_RCCEx_GetPeriphCLKFreq+0x792>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80071a4:	f7fe f864 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 80071a8:	6378      	str	r0, [r7, #52]	; 0x34
 80071aa:	f000 bd54 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80071ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071b4:	d108      	bne.n	80071c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071b6:	f107 0318 	add.w	r3, r7, #24
 80071ba:	4618      	mov	r0, r3
 80071bc:	f7ff f962 	bl	8006484 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80071c0:	6a3b      	ldr	r3, [r7, #32]
 80071c2:	637b      	str	r3, [r7, #52]	; 0x34
 80071c4:	f000 bd47 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80071c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d104      	bne.n	80071d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80071ce:	f7fe f957 	bl	8005480 <HAL_RCC_GetHCLKFreq>
 80071d2:	6378      	str	r0, [r7, #52]	; 0x34
 80071d4:	f000 bd3f 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80071d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071da:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80071de:	d118      	bne.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x7f6>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 80071e0:	4b1d      	ldr	r3, [pc, #116]	; (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d005      	beq.n	80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 80071ec:	4b1a      	ldr	r3, [pc, #104]	; (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	0f1b      	lsrs	r3, r3, #28
 80071f2:	f003 030f 	and.w	r3, r3, #15
 80071f6:	e006      	b.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0x7ea>
 80071f8:	4b17      	ldr	r3, [pc, #92]	; (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80071fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80071fe:	041b      	lsls	r3, r3, #16
 8007200:	0f1b      	lsrs	r3, r3, #28
 8007202:	f003 030f 	and.w	r3, r3, #15
 8007206:	4a16      	ldr	r2, [pc, #88]	; (8007260 <HAL_RCCEx_GetPeriphCLKFreq+0x844>)
 8007208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800720c:	637b      	str	r3, [r7, #52]	; 0x34
 800720e:	f000 bd22 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8007212:	4b11      	ldr	r3, [pc, #68]	; (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800721a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800721e:	d107      	bne.n	8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8007220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007222:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007226:	d103      	bne.n	8007230 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
    {
      frequency = HSE_VALUE;
 8007228:	4b0c      	ldr	r3, [pc, #48]	; (800725c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 800722a:	637b      	str	r3, [r7, #52]	; 0x34
 800722c:	f000 bd13 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8007230:	4b09      	ldr	r3, [pc, #36]	; (8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007238:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800723c:	d107      	bne.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
 800723e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007240:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007244:	d103      	bne.n	800724e <HAL_RCCEx_GetPeriphCLKFreq+0x832>
    {
      frequency = HSI_VALUE;
 8007246:	4b05      	ldr	r3, [pc, #20]	; (800725c <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 8007248:	637b      	str	r3, [r7, #52]	; 0x34
 800724a:	f000 bd04 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800724e:	2300      	movs	r3, #0
 8007250:	637b      	str	r3, [r7, #52]	; 0x34
 8007252:	f000 bd00 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007256:	bf00      	nop
 8007258:	46020c00 	.word	0x46020c00
 800725c:	00f42400 	.word	0x00f42400
 8007260:	0800ab20 	.word	0x0800ab20
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8007264:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007268:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800726c:	430b      	orrs	r3, r1
 800726e:	d14e      	bne.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8007270:	4ba8      	ldr	r3, [pc, #672]	; (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007272:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007276:	f003 0307 	and.w	r3, r3, #7
 800727a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800727c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800727e:	2b04      	cmp	r3, #4
 8007280:	d841      	bhi.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8007282:	a201      	add	r2, pc, #4	; (adr r2, 8007288 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8007284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007288:	080072c1 	.word	0x080072c1
 800728c:	0800729d 	.word	0x0800729d
 8007290:	080072af 	.word	0x080072af
 8007294:	080072cb 	.word	0x080072cb
 8007298:	080072d5 	.word	0x080072d5
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800729c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7fe ff89 	bl	80061b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80072a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072a8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072aa:	f000 bcd4 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80072ae:	f107 030c 	add.w	r3, r7, #12
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7ff fa4c 	bl	8006750 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072bc:	f000 bccb 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80072c0:	f7fe f8de 	bl	8005480 <HAL_RCC_GetHCLKFreq>
 80072c4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80072c6:	f000 bcc6 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80072ca:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80072ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80072d0:	f000 bcc1 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_MDF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80072d4:	4b8f      	ldr	r3, [pc, #572]	; (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d005      	beq.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
 80072e0:	4b8c      	ldr	r3, [pc, #560]	; (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	0e1b      	lsrs	r3, r3, #24
 80072e6:	f003 030f 	and.w	r3, r3, #15
 80072ea:	e006      	b.n	80072fa <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
 80072ec:	4b89      	ldr	r3, [pc, #548]	; (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80072ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80072f2:	041b      	lsls	r3, r3, #16
 80072f4:	0e1b      	lsrs	r3, r3, #24
 80072f6:	f003 030f 	and.w	r3, r3, #15
 80072fa:	4a87      	ldr	r2, [pc, #540]	; (8007518 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80072fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007300:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007302:	f000 bca8 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007306:	2300      	movs	r3, #0
 8007308:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800730a:	f000 bca4 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800730e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007312:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8007316:	430b      	orrs	r3, r1
 8007318:	d15d      	bne.n	80073d6 <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800731a:	4b7e      	ldr	r3, [pc, #504]	; (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800731c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007320:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8007324:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007328:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800732c:	d036      	beq.n	800739c <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 800732e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007330:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007334:	d84b      	bhi.n	80073ce <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007338:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800733c:	d029      	beq.n	8007392 <HAL_RCCEx_GetPeriphCLKFreq+0x976>
 800733e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007340:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007344:	d843      	bhi.n	80073ce <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007348:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800734c:	d013      	beq.n	8007376 <HAL_RCCEx_GetPeriphCLKFreq+0x95a>
 800734e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007350:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007354:	d83b      	bhi.n	80073ce <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
 8007356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007358:	2b00      	cmp	r3, #0
 800735a:	d015      	beq.n	8007388 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
 800735c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800735e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007362:	d134      	bne.n	80073ce <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007368:	4618      	mov	r0, r3
 800736a:	f7fe ff25 	bl	80061b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800736e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007370:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007372:	f000 bc70 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007376:	f107 030c 	add.w	r3, r7, #12
 800737a:	4618      	mov	r0, r3
 800737c:	f7ff f9e8 	bl	8006750 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007384:	f000 bc67 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 8007388:	f7fe f87a 	bl	8005480 <HAL_RCC_GetHCLKFreq>
 800738c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800738e:	f000 bc62 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007392:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007396:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007398:	f000 bc5d 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_ADF1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800739c:	4b5d      	ldr	r3, [pc, #372]	; (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d005      	beq.n	80073b4 <HAL_RCCEx_GetPeriphCLKFreq+0x998>
 80073a8:	4b5a      	ldr	r3, [pc, #360]	; (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	0e1b      	lsrs	r3, r3, #24
 80073ae:	f003 030f 	and.w	r3, r3, #15
 80073b2:	e006      	b.n	80073c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 80073b4:	4b57      	ldr	r3, [pc, #348]	; (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80073b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80073ba:	041b      	lsls	r3, r3, #16
 80073bc:	0e1b      	lsrs	r3, r3, #24
 80073be:	f003 030f 	and.w	r3, r3, #15
 80073c2:	4a55      	ldr	r2, [pc, #340]	; (8007518 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80073c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073ca:	f000 bc44 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 80073ce:	2300      	movs	r3, #0
 80073d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80073d2:	f000 bc40 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80073d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073da:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 80073de:	430b      	orrs	r3, r1
 80073e0:	d14a      	bne.n	8007478 <HAL_RCCEx_GetPeriphCLKFreq+0xa5c>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80073e2:	4b4c      	ldr	r3, [pc, #304]	; (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80073e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80073e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80073ec:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 80073ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d104      	bne.n	80073fe <HAL_RCCEx_GetPeriphCLKFreq+0x9e2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80073f4:	f7fe f85e 	bl	80054b4 <HAL_RCC_GetPCLK1Freq>
 80073f8:	6378      	str	r0, [r7, #52]	; 0x34
 80073fa:	f000 bc2c 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80073fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007404:	d104      	bne.n	8007410 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8007406:	f7fd ff33 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 800740a:	6378      	str	r0, [r7, #52]	; 0x34
 800740c:	f000 bc23 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8007410:	4b40      	ldr	r3, [pc, #256]	; (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800741c:	d107      	bne.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
 800741e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007420:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007424:	d103      	bne.n	800742e <HAL_RCCEx_GetPeriphCLKFreq+0xa12>
    {
      frequency = HSI_VALUE;
 8007426:	4b3d      	ldr	r3, [pc, #244]	; (800751c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8007428:	637b      	str	r3, [r7, #52]	; 0x34
 800742a:	f000 bc14 	b.w	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 800742e:	4b39      	ldr	r3, [pc, #228]	; (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 0320 	and.w	r3, r3, #32
 8007436:	2b20      	cmp	r3, #32
 8007438:	d11b      	bne.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
 800743a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007440:	d117      	bne.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0xa56>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007442:	4b34      	ldr	r3, [pc, #208]	; (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007444:	689b      	ldr	r3, [r3, #8]
 8007446:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d005      	beq.n	800745a <HAL_RCCEx_GetPeriphCLKFreq+0xa3e>
 800744e:	4b31      	ldr	r3, [pc, #196]	; (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	0e1b      	lsrs	r3, r3, #24
 8007454:	f003 030f 	and.w	r3, r3, #15
 8007458:	e006      	b.n	8007468 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 800745a:	4b2e      	ldr	r3, [pc, #184]	; (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800745c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007460:	041b      	lsls	r3, r3, #16
 8007462:	0e1b      	lsrs	r3, r3, #24
 8007464:	f003 030f 	and.w	r3, r3, #15
 8007468:	4a2b      	ldr	r2, [pc, #172]	; (8007518 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800746a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800746e:	637b      	str	r3, [r7, #52]	; 0x34
 8007470:	e3f1      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8007472:	2300      	movs	r3, #0
 8007474:	637b      	str	r3, [r7, #52]	; 0x34
 8007476:	e3ee      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8007478:	e9d7 2300 	ldrd	r2, r3, [r7]
 800747c:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8007480:	430b      	orrs	r3, r1
 8007482:	d14d      	bne.n	8007520 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8007484:	4b23      	ldr	r3, [pc, #140]	; (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8007486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800748a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800748e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8007490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007492:	2b00      	cmp	r3, #0
 8007494:	d103      	bne.n	800749e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8007496:	f7fe f80d 	bl	80054b4 <HAL_RCC_GetPCLK1Freq>
 800749a:	6378      	str	r0, [r7, #52]	; 0x34
 800749c:	e3db      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 800749e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074a4:	d103      	bne.n	80074ae <HAL_RCCEx_GetPeriphCLKFreq+0xa92>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80074a6:	f7fd fee3 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 80074aa:	6378      	str	r0, [r7, #52]	; 0x34
 80074ac:	e3d3      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 80074ae:	4b19      	ldr	r3, [pc, #100]	; (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074ba:	d106      	bne.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 80074bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074c2:	d102      	bne.n	80074ca <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
    {
      frequency = HSI_VALUE;
 80074c4:	4b15      	ldr	r3, [pc, #84]	; (800751c <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80074c6:	637b      	str	r3, [r7, #52]	; 0x34
 80074c8:	e3c5      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 80074ca:	4b12      	ldr	r3, [pc, #72]	; (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 0320 	and.w	r3, r3, #32
 80074d2:	2b20      	cmp	r3, #32
 80074d4:	d11b      	bne.n	800750e <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
 80074d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074d8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80074dc:	d117      	bne.n	800750e <HAL_RCCEx_GetPeriphCLKFreq+0xaf2>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80074de:	4b0d      	ldr	r3, [pc, #52]	; (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d005      	beq.n	80074f6 <HAL_RCCEx_GetPeriphCLKFreq+0xada>
 80074ea:	4b0a      	ldr	r3, [pc, #40]	; (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80074ec:	689b      	ldr	r3, [r3, #8]
 80074ee:	0e1b      	lsrs	r3, r3, #24
 80074f0:	f003 030f 	and.w	r3, r3, #15
 80074f4:	e006      	b.n	8007504 <HAL_RCCEx_GetPeriphCLKFreq+0xae8>
 80074f6:	4b07      	ldr	r3, [pc, #28]	; (8007514 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80074f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80074fc:	041b      	lsls	r3, r3, #16
 80074fe:	0e1b      	lsrs	r3, r3, #24
 8007500:	f003 030f 	and.w	r3, r3, #15
 8007504:	4a04      	ldr	r2, [pc, #16]	; (8007518 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8007506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800750a:	637b      	str	r3, [r7, #52]	; 0x34
 800750c:	e3a3      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 800750e:	2300      	movs	r3, #0
 8007510:	637b      	str	r3, [r7, #52]	; 0x34
 8007512:	e3a0      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 8007514:	46020c00 	.word	0x46020c00
 8007518:	0800ab20 	.word	0x0800ab20
 800751c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8007520:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007524:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8007528:	430b      	orrs	r3, r1
 800752a:	d148      	bne.n	80075be <HAL_RCCEx_GetPeriphCLKFreq+0xba2>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 800752c:	4b9d      	ldr	r3, [pc, #628]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800752e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007532:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007536:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800753a:	2bc0      	cmp	r3, #192	; 0xc0
 800753c:	d024      	beq.n	8007588 <HAL_RCCEx_GetPeriphCLKFreq+0xb6c>
 800753e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007540:	2bc0      	cmp	r3, #192	; 0xc0
 8007542:	d839      	bhi.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8007544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007546:	2b80      	cmp	r3, #128	; 0x80
 8007548:	d00d      	beq.n	8007566 <HAL_RCCEx_GetPeriphCLKFreq+0xb4a>
 800754a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800754c:	2b80      	cmp	r3, #128	; 0x80
 800754e:	d833      	bhi.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
 8007550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007552:	2b00      	cmp	r3, #0
 8007554:	d003      	beq.n	800755e <HAL_RCCEx_GetPeriphCLKFreq+0xb42>
 8007556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007558:	2b40      	cmp	r3, #64	; 0x40
 800755a:	d011      	beq.n	8007580 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 800755c:	e02c      	b.n	80075b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb9c>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 800755e:	f7fd ffd1 	bl	8005504 <HAL_RCC_GetPCLK3Freq>
 8007562:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007564:	e377      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007566:	4b8f      	ldr	r3, [pc, #572]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800756e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007572:	d102      	bne.n	800757a <HAL_RCCEx_GetPeriphCLKFreq+0xb5e>
        {
          frequency = HSI_VALUE;
 8007574:	4b8c      	ldr	r3, [pc, #560]	; (80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 8007576:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007578:	e36d      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 800757a:	2300      	movs	r3, #0
 800757c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800757e:	e36a      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8007580:	f7fd fe76 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 8007584:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007586:	e366      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)];
 8007588:	4b86      	ldr	r3, [pc, #536]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800758a:	689b      	ldr	r3, [r3, #8]
 800758c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d005      	beq.n	80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb84>
 8007594:	4b83      	ldr	r3, [pc, #524]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	0f1b      	lsrs	r3, r3, #28
 800759a:	f003 030f 	and.w	r3, r3, #15
 800759e:	e006      	b.n	80075ae <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
 80075a0:	4b80      	ldr	r3, [pc, #512]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80075a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80075a6:	041b      	lsls	r3, r3, #16
 80075a8:	0f1b      	lsrs	r3, r3, #28
 80075aa:	f003 030f 	and.w	r3, r3, #15
 80075ae:	4a7f      	ldr	r2, [pc, #508]	; (80077ac <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 80075b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075b6:	e34e      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      default:
      {
        frequency = 0U;
 80075b8:	2300      	movs	r3, #0
 80075ba:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80075bc:	e34b      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 80075be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075c2:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 80075c6:	430b      	orrs	r3, r1
 80075c8:	d147      	bne.n	800765a <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 80075ca:	4b76      	ldr	r3, [pc, #472]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80075cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80075d4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 80075d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d103      	bne.n	80075e4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80075dc:	f7fd ff6a 	bl	80054b4 <HAL_RCC_GetPCLK1Freq>
 80075e0:	6378      	str	r0, [r7, #52]	; 0x34
 80075e2:	e338      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 80075e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80075ea:	d103      	bne.n	80075f4 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80075ec:	f7fd fe40 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 80075f0:	6378      	str	r0, [r7, #52]	; 0x34
 80075f2:	e330      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 80075f4:	4b6b      	ldr	r3, [pc, #428]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007600:	d106      	bne.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
 8007602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007604:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007608:	d102      	bne.n	8007610 <HAL_RCCEx_GetPeriphCLKFreq+0xbf4>
    {
      frequency = HSI_VALUE;
 800760a:	4b67      	ldr	r3, [pc, #412]	; (80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 800760c:	637b      	str	r3, [r7, #52]	; 0x34
 800760e:	e322      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8007610:	4b64      	ldr	r3, [pc, #400]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f003 0320 	and.w	r3, r3, #32
 8007618:	2b20      	cmp	r3, #32
 800761a:	d11b      	bne.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
 800761c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800761e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007622:	d117      	bne.n	8007654 <HAL_RCCEx_GetPeriphCLKFreq+0xc38>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007624:	4b5f      	ldr	r3, [pc, #380]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007626:	689b      	ldr	r3, [r3, #8]
 8007628:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d005      	beq.n	800763c <HAL_RCCEx_GetPeriphCLKFreq+0xc20>
 8007630:	4b5c      	ldr	r3, [pc, #368]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	0e1b      	lsrs	r3, r3, #24
 8007636:	f003 030f 	and.w	r3, r3, #15
 800763a:	e006      	b.n	800764a <HAL_RCCEx_GetPeriphCLKFreq+0xc2e>
 800763c:	4b59      	ldr	r3, [pc, #356]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800763e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007642:	041b      	lsls	r3, r3, #16
 8007644:	0e1b      	lsrs	r3, r3, #24
 8007646:	f003 030f 	and.w	r3, r3, #15
 800764a:	4a58      	ldr	r2, [pc, #352]	; (80077ac <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 800764c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007650:	637b      	str	r3, [r7, #52]	; 0x34
 8007652:	e300      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8007654:	2300      	movs	r3, #0
 8007656:	637b      	str	r3, [r7, #52]	; 0x34
 8007658:	e2fd      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 800765a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800765e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8007662:	430b      	orrs	r3, r1
 8007664:	d15b      	bne.n	800771e <HAL_RCCEx_GetPeriphCLKFreq+0xd02>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8007666:	4b4f      	ldr	r3, [pc, #316]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007668:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800766c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007670:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8007672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007674:	2b00      	cmp	r3, #0
 8007676:	d117      	bne.n	80076a8 <HAL_RCCEx_GetPeriphCLKFreq+0xc8c>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007678:	4b4a      	ldr	r3, [pc, #296]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007680:	2b00      	cmp	r3, #0
 8007682:	d005      	beq.n	8007690 <HAL_RCCEx_GetPeriphCLKFreq+0xc74>
 8007684:	4b47      	ldr	r3, [pc, #284]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	0e1b      	lsrs	r3, r3, #24
 800768a:	f003 030f 	and.w	r3, r3, #15
 800768e:	e006      	b.n	800769e <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
 8007690:	4b44      	ldr	r3, [pc, #272]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007692:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007696:	041b      	lsls	r3, r3, #16
 8007698:	0e1b      	lsrs	r3, r3, #24
 800769a:	f003 030f 	and.w	r3, r3, #15
 800769e:	4a43      	ldr	r2, [pc, #268]	; (80077ac <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 80076a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80076a4:	637b      	str	r3, [r7, #52]	; 0x34
 80076a6:	e2d6      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 80076a8:	4b3e      	ldr	r3, [pc, #248]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80076aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076b6:	d112      	bne.n	80076de <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 80076b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076be:	d10e      	bne.n	80076de <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80076c0:	4b38      	ldr	r3, [pc, #224]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80076c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80076c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076ce:	d102      	bne.n	80076d6 <HAL_RCCEx_GetPeriphCLKFreq+0xcba>
      {
        frequency = LSI_VALUE / 128U;
 80076d0:	23fa      	movs	r3, #250	; 0xfa
 80076d2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80076d4:	e2bf      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 80076d6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80076da:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80076dc:	e2bb      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 80076de:	4b31      	ldr	r3, [pc, #196]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076ea:	d106      	bne.n	80076fa <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
 80076ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80076f2:	d102      	bne.n	80076fa <HAL_RCCEx_GetPeriphCLKFreq+0xcde>
    {
      frequency = HSI_VALUE;
 80076f4:	4b2c      	ldr	r3, [pc, #176]	; (80077a8 <HAL_RCCEx_GetPeriphCLKFreq+0xd8c>)
 80076f6:	637b      	str	r3, [r7, #52]	; 0x34
 80076f8:	e2ad      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 80076fa:	4b2a      	ldr	r3, [pc, #168]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 80076fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007700:	f003 0302 	and.w	r3, r3, #2
 8007704:	2b02      	cmp	r3, #2
 8007706:	d107      	bne.n	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
 8007708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800770a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800770e:	d103      	bne.n	8007718 <HAL_RCCEx_GetPeriphCLKFreq+0xcfc>
    {
      frequency = LSE_VALUE;
 8007710:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007714:	637b      	str	r3, [r7, #52]	; 0x34
 8007716:	e29e      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8007718:	2300      	movs	r3, #0
 800771a:	637b      	str	r3, [r7, #52]	; 0x34
 800771c:	e29b      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 800771e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007722:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8007726:	430b      	orrs	r3, r1
 8007728:	d162      	bne.n	80077f0 <HAL_RCCEx_GetPeriphCLKFreq+0xdd4>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800772a:	4b1e      	ldr	r3, [pc, #120]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800772c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007730:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007734:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8007736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007738:	2b00      	cmp	r3, #0
 800773a:	d117      	bne.n	800776c <HAL_RCCEx_GetPeriphCLKFreq+0xd50>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800773c:	4b19      	ldr	r3, [pc, #100]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007744:	2b00      	cmp	r3, #0
 8007746:	d005      	beq.n	8007754 <HAL_RCCEx_GetPeriphCLKFreq+0xd38>
 8007748:	4b16      	ldr	r3, [pc, #88]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	0e1b      	lsrs	r3, r3, #24
 800774e:	f003 030f 	and.w	r3, r3, #15
 8007752:	e006      	b.n	8007762 <HAL_RCCEx_GetPeriphCLKFreq+0xd46>
 8007754:	4b13      	ldr	r3, [pc, #76]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007756:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800775a:	041b      	lsls	r3, r3, #16
 800775c:	0e1b      	lsrs	r3, r3, #24
 800775e:	f003 030f 	and.w	r3, r3, #15
 8007762:	4a12      	ldr	r2, [pc, #72]	; (80077ac <HAL_RCCEx_GetPeriphCLKFreq+0xd90>)
 8007764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007768:	637b      	str	r3, [r7, #52]	; 0x34
 800776a:	e274      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 800776c:	4b0d      	ldr	r3, [pc, #52]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 800776e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007772:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007776:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800777a:	d119      	bne.n	80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
 800777c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007782:	d115      	bne.n	80077b0 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007784:	4b07      	ldr	r3, [pc, #28]	; (80077a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd88>)
 8007786:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800778a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800778e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007792:	d102      	bne.n	800779a <HAL_RCCEx_GetPeriphCLKFreq+0xd7e>
      {
        frequency = LSI_VALUE / 128U;
 8007794:	23fa      	movs	r3, #250	; 0xfa
 8007796:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007798:	e25d      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 800779a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800779e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80077a0:	e259      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
 80077a2:	bf00      	nop
 80077a4:	46020c00 	.word	0x46020c00
 80077a8:	00f42400 	.word	0x00f42400
 80077ac:	0800ab20 	.word	0x0800ab20
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 80077b0:	4b9d      	ldr	r3, [pc, #628]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077bc:	d106      	bne.n	80077cc <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
 80077be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80077c4:	d102      	bne.n	80077cc <HAL_RCCEx_GetPeriphCLKFreq+0xdb0>
    {
      frequency = HSI_VALUE;
 80077c6:	4b99      	ldr	r3, [pc, #612]	; (8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80077c8:	637b      	str	r3, [r7, #52]	; 0x34
 80077ca:	e244      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 80077cc:	4b96      	ldr	r3, [pc, #600]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80077ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80077d2:	f003 0302 	and.w	r3, r3, #2
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d107      	bne.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
 80077da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80077e0:	d103      	bne.n	80077ea <HAL_RCCEx_GetPeriphCLKFreq+0xdce>
    {
      frequency = LSE_VALUE;
 80077e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077e6:	637b      	str	r3, [r7, #52]	; 0x34
 80077e8:	e235      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 80077ea:	2300      	movs	r3, #0
 80077ec:	637b      	str	r3, [r7, #52]	; 0x34
 80077ee:	e232      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 80077f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80077f4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80077f8:	430b      	orrs	r3, r1
 80077fa:	d147      	bne.n	800788c <HAL_RCCEx_GetPeriphCLKFreq+0xe70>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 80077fc:	4b8a      	ldr	r3, [pc, #552]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80077fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007802:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007806:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8007808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780a:	2b00      	cmp	r3, #0
 800780c:	d103      	bne.n	8007816 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800780e:	f7fd fe51 	bl	80054b4 <HAL_RCC_GetPCLK1Freq>
 8007812:	6378      	str	r0, [r7, #52]	; 0x34
 8007814:	e21f      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8007816:	4b84      	ldr	r3, [pc, #528]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007818:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800781c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007820:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007824:	d112      	bne.n	800784c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
 8007826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007828:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800782c:	d10e      	bne.n	800784c <HAL_RCCEx_GetPeriphCLKFreq+0xe30>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800782e:	4b7e      	ldr	r3, [pc, #504]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007830:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007834:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007838:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800783c:	d102      	bne.n	8007844 <HAL_RCCEx_GetPeriphCLKFreq+0xe28>
      {
        frequency = LSI_VALUE / 128U;
 800783e:	23fa      	movs	r3, #250	; 0xfa
 8007840:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007842:	e208      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8007844:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007848:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800784a:	e204      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 800784c:	4b76      	ldr	r3, [pc, #472]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007858:	d106      	bne.n	8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
 800785a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007860:	d102      	bne.n	8007868 <HAL_RCCEx_GetPeriphCLKFreq+0xe4c>
    {
      frequency = HSI_VALUE;
 8007862:	4b72      	ldr	r3, [pc, #456]	; (8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8007864:	637b      	str	r3, [r7, #52]	; 0x34
 8007866:	e1f6      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8007868:	4b6f      	ldr	r3, [pc, #444]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800786a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800786e:	f003 0302 	and.w	r3, r3, #2
 8007872:	2b02      	cmp	r3, #2
 8007874:	d107      	bne.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
 8007876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007878:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800787c:	d103      	bne.n	8007886 <HAL_RCCEx_GetPeriphCLKFreq+0xe6a>
    {
      frequency = LSE_VALUE;
 800787e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007882:	637b      	str	r3, [r7, #52]	; 0x34
 8007884:	e1e7      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8007886:	2300      	movs	r3, #0
 8007888:	637b      	str	r3, [r7, #52]	; 0x34
 800788a:	e1e4      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 800788c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007890:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8007894:	430b      	orrs	r3, r1
 8007896:	d12d      	bne.n	80078f4 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8007898:	4b63      	ldr	r3, [pc, #396]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800789a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800789e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80078a2:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 80078a4:	4b60      	ldr	r3, [pc, #384]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80078b0:	d105      	bne.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
 80078b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d102      	bne.n	80078be <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HSE_VALUE;
 80078b8:	4b5c      	ldr	r3, [pc, #368]	; (8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 80078ba:	637b      	str	r3, [r7, #52]	; 0x34
 80078bc:	e1cb      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 80078be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80078c4:	d107      	bne.n	80078d6 <HAL_RCCEx_GetPeriphCLKFreq+0xeba>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80078c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80078ca:	4618      	mov	r0, r3
 80078cc:	f7fe fc74 	bl	80061b8 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 80078d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d2:	637b      	str	r3, [r7, #52]	; 0x34
 80078d4:	e1bf      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 80078d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078dc:	d107      	bne.n	80078ee <HAL_RCCEx_GetPeriphCLKFreq+0xed2>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80078de:	f107 0318 	add.w	r3, r7, #24
 80078e2:	4618      	mov	r0, r3
 80078e4:	f7fe fdce 	bl	8006484 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	637b      	str	r3, [r7, #52]	; 0x34
 80078ec:	e1b3      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 80078ee:	2300      	movs	r3, #0
 80078f0:	637b      	str	r3, [r7, #52]	; 0x34
 80078f2:	e1b0      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 80078f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078f8:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 80078fc:	430b      	orrs	r3, r1
 80078fe:	d14d      	bne.n	800799c <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8007900:	4b49      	ldr	r3, [pc, #292]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007902:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007906:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800790a:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800790c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007912:	d028      	beq.n	8007966 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8007914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007916:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800791a:	d83c      	bhi.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 800791c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007922:	d013      	beq.n	800794c <HAL_RCCEx_GetPeriphCLKFreq+0xf30>
 8007924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007926:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800792a:	d834      	bhi.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
 800792c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792e:	2b00      	cmp	r3, #0
 8007930:	d004      	beq.n	800793c <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
 8007932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007934:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007938:	d004      	beq.n	8007944 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800793a:	e02c      	b.n	8007996 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 800793c:	f7fd fdce 	bl	80054dc <HAL_RCC_GetPCLK2Freq>
 8007940:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007942:	e188      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007944:	f7fd fc94 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 8007948:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800794a:	e184      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800794c:	4b36      	ldr	r3, [pc, #216]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007954:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007958:	d102      	bne.n	8007960 <HAL_RCCEx_GetPeriphCLKFreq+0xf44>
        {
          frequency = HSI_VALUE;
 800795a:	4b34      	ldr	r3, [pc, #208]	; (8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 800795c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800795e:	e17a      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8007960:	2300      	movs	r3, #0
 8007962:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007964:	e177      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI1CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007966:	4b30      	ldr	r3, [pc, #192]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007968:	689b      	ldr	r3, [r3, #8]
 800796a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d005      	beq.n	800797e <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
 8007972:	4b2d      	ldr	r3, [pc, #180]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	0e1b      	lsrs	r3, r3, #24
 8007978:	f003 030f 	and.w	r3, r3, #15
 800797c:	e006      	b.n	800798c <HAL_RCCEx_GetPeriphCLKFreq+0xf70>
 800797e:	4b2a      	ldr	r3, [pc, #168]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007980:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007984:	041b      	lsls	r3, r3, #16
 8007986:	0e1b      	lsrs	r3, r3, #24
 8007988:	f003 030f 	and.w	r3, r3, #15
 800798c:	4a28      	ldr	r2, [pc, #160]	; (8007a30 <HAL_RCCEx_GetPeriphCLKFreq+0x1014>)
 800798e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007992:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007994:	e15f      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007996:	2300      	movs	r3, #0
 8007998:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800799a:	e15c      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800799c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079a0:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 80079a4:	430b      	orrs	r3, r1
 80079a6:	d154      	bne.n	8007a52 <HAL_RCCEx_GetPeriphCLKFreq+0x1036>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 80079a8:	4b1f      	ldr	r3, [pc, #124]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80079aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80079ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80079b2:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80079b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80079ba:	d028      	beq.n	8007a0e <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 80079bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80079c2:	d843      	bhi.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 80079c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079ca:	d013      	beq.n	80079f4 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 80079cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80079d2:	d83b      	bhi.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
 80079d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d004      	beq.n	80079e4 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 80079da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079e0:	d004      	beq.n	80079ec <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 80079e2:	e033      	b.n	8007a4c <HAL_RCCEx_GetPeriphCLKFreq+0x1030>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 80079e4:	f7fd fd66 	bl	80054b4 <HAL_RCC_GetPCLK1Freq>
 80079e8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80079ea:	e134      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 80079ec:	f7fd fc40 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 80079f0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80079f2:	e130      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80079f4:	4b0c      	ldr	r3, [pc, #48]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a00:	d102      	bne.n	8007a08 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8007a02:	4b0a      	ldr	r3, [pc, #40]	; (8007a2c <HAL_RCCEx_GetPeriphCLKFreq+0x1010>)
 8007a04:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007a06:	e126      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a0c:	e123      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI2CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007a0e:	4b06      	ldr	r3, [pc, #24]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007a10:	689b      	ldr	r3, [r3, #8]
 8007a12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00c      	beq.n	8007a34 <HAL_RCCEx_GetPeriphCLKFreq+0x1018>
 8007a1a:	4b03      	ldr	r3, [pc, #12]	; (8007a28 <HAL_RCCEx_GetPeriphCLKFreq+0x100c>)
 8007a1c:	689b      	ldr	r3, [r3, #8]
 8007a1e:	0e1b      	lsrs	r3, r3, #24
 8007a20:	f003 030f 	and.w	r3, r3, #15
 8007a24:	e00d      	b.n	8007a42 <HAL_RCCEx_GetPeriphCLKFreq+0x1026>
 8007a26:	bf00      	nop
 8007a28:	46020c00 	.word	0x46020c00
 8007a2c:	00f42400 	.word	0x00f42400
 8007a30:	0800ab20 	.word	0x0800ab20
 8007a34:	4b8a      	ldr	r3, [pc, #552]	; (8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007a36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007a3a:	041b      	lsls	r3, r3, #16
 8007a3c:	0e1b      	lsrs	r3, r3, #24
 8007a3e:	f003 030f 	and.w	r3, r3, #15
 8007a42:	4a88      	ldr	r2, [pc, #544]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8007a44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a48:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a4a:	e104      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007a50:	e101      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 8007a52:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a56:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 8007a5a:	430b      	orrs	r3, r1
 8007a5c:	d16e      	bne.n	8007b3c <HAL_RCCEx_GetPeriphCLKFreq+0x1120>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 8007a5e:	4b80      	ldr	r3, [pc, #512]	; (8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007a60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007a64:	f003 0318 	and.w	r3, r3, #24
 8007a68:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8007a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6c:	2b18      	cmp	r3, #24
 8007a6e:	d862      	bhi.n	8007b36 <HAL_RCCEx_GetPeriphCLKFreq+0x111a>
 8007a70:	a201      	add	r2, pc, #4	; (adr r2, 8007a78 <HAL_RCCEx_GetPeriphCLKFreq+0x105c>)
 8007a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a76:	bf00      	nop
 8007a78:	08007add 	.word	0x08007add
 8007a7c:	08007b37 	.word	0x08007b37
 8007a80:	08007b37 	.word	0x08007b37
 8007a84:	08007b37 	.word	0x08007b37
 8007a88:	08007b37 	.word	0x08007b37
 8007a8c:	08007b37 	.word	0x08007b37
 8007a90:	08007b37 	.word	0x08007b37
 8007a94:	08007b37 	.word	0x08007b37
 8007a98:	08007ae5 	.word	0x08007ae5
 8007a9c:	08007b37 	.word	0x08007b37
 8007aa0:	08007b37 	.word	0x08007b37
 8007aa4:	08007b37 	.word	0x08007b37
 8007aa8:	08007b37 	.word	0x08007b37
 8007aac:	08007b37 	.word	0x08007b37
 8007ab0:	08007b37 	.word	0x08007b37
 8007ab4:	08007b37 	.word	0x08007b37
 8007ab8:	08007aed 	.word	0x08007aed
 8007abc:	08007b37 	.word	0x08007b37
 8007ac0:	08007b37 	.word	0x08007b37
 8007ac4:	08007b37 	.word	0x08007b37
 8007ac8:	08007b37 	.word	0x08007b37
 8007acc:	08007b37 	.word	0x08007b37
 8007ad0:	08007b37 	.word	0x08007b37
 8007ad4:	08007b37 	.word	0x08007b37
 8007ad8:	08007b07 	.word	0x08007b07
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 8007adc:	f7fd fd12 	bl	8005504 <HAL_RCC_GetPCLK3Freq>
 8007ae0:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007ae2:	e0b8      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007ae4:	f7fd fbc4 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 8007ae8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007aea:	e0b4      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007aec:	4b5c      	ldr	r3, [pc, #368]	; (8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007af8:	d102      	bne.n	8007b00 <HAL_RCCEx_GetPeriphCLKFreq+0x10e4>
        {
          frequency = HSI_VALUE;
 8007afa:	4b5b      	ldr	r3, [pc, #364]	; (8007c68 <HAL_RCCEx_GetPeriphCLKFreq+0x124c>)
 8007afc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8007afe:	e0aa      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
          frequency = 0U;
 8007b00:	2300      	movs	r3, #0
 8007b02:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b04:	e0a7      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_SPI3CLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007b06:	4b56      	ldr	r3, [pc, #344]	; (8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d005      	beq.n	8007b1e <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
 8007b12:	4b53      	ldr	r3, [pc, #332]	; (8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	0e1b      	lsrs	r3, r3, #24
 8007b18:	f003 030f 	and.w	r3, r3, #15
 8007b1c:	e006      	b.n	8007b2c <HAL_RCCEx_GetPeriphCLKFreq+0x1110>
 8007b1e:	4b50      	ldr	r3, [pc, #320]	; (8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007b20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b24:	041b      	lsls	r3, r3, #16
 8007b26:	0e1b      	lsrs	r3, r3, #24
 8007b28:	f003 030f 	and.w	r3, r3, #15
 8007b2c:	4a4d      	ldr	r2, [pc, #308]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8007b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b32:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b34:	e08f      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007b36:	2300      	movs	r3, #0
 8007b38:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b3a:	e08c      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 8007b3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007b40:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 8007b44:	430b      	orrs	r3, r1
 8007b46:	d14c      	bne.n	8007be2 <HAL_RCCEx_GetPeriphCLKFreq+0x11c6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 8007b48:	4b45      	ldr	r3, [pc, #276]	; (8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007b4a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007b4e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007b52:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8007b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b5a:	d013      	beq.n	8007b84 <HAL_RCCEx_GetPeriphCLKFreq+0x1168>
 8007b5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b5e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007b62:	d83b      	bhi.n	8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8007b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b6a:	d013      	beq.n	8007b94 <HAL_RCCEx_GetPeriphCLKFreq+0x1178>
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007b72:	d833      	bhi.n	8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
 8007b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d014      	beq.n	8007ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x1188>
 8007b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b80:	d014      	beq.n	8007bac <HAL_RCCEx_GetPeriphCLKFreq+0x1190>
 8007b82:	e02b      	b.n	8007bdc <HAL_RCCEx_GetPeriphCLKFreq+0x11c0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007b84:	f107 0318 	add.w	r3, r7, #24
 8007b88:	4618      	mov	r0, r3
 8007b8a:	f7fe fc7b 	bl	8006484 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8007b8e:	69fb      	ldr	r3, [r7, #28]
 8007b90:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007b92:	e060      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7fe fb0d 	bl	80061b8 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8007b9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ba0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007ba2:	e058      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8007ba4:	f7fd fb64 	bl	8005270 <HAL_RCC_GetSysClockFreq>
 8007ba8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8007baa:	e054      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      case RCC_OSPICLKSOURCE_MSIK:

        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8007bac:	4b2c      	ldr	r3, [pc, #176]	; (8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d005      	beq.n	8007bc4 <HAL_RCCEx_GetPeriphCLKFreq+0x11a8>
 8007bb8:	4b29      	ldr	r3, [pc, #164]	; (8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	0e1b      	lsrs	r3, r3, #24
 8007bbe:	f003 030f 	and.w	r3, r3, #15
 8007bc2:	e006      	b.n	8007bd2 <HAL_RCCEx_GetPeriphCLKFreq+0x11b6>
 8007bc4:	4b26      	ldr	r3, [pc, #152]	; (8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007bc6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007bca:	041b      	lsls	r3, r3, #16
 8007bcc:	0e1b      	lsrs	r3, r3, #24
 8007bce:	f003 030f 	and.w	r3, r3, #15
 8007bd2:	4a24      	ldr	r2, [pc, #144]	; (8007c64 <HAL_RCCEx_GetPeriphCLKFreq+0x1248>)
 8007bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bd8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007bda:	e03c      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>

      default:

        frequency = 0U;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007be0:	e039      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8007be2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007be6:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 8007bea:	430b      	orrs	r3, r1
 8007bec:	d131      	bne.n	8007c52 <HAL_RCCEx_GetPeriphCLKFreq+0x1236>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8007bee:	4b1c      	ldr	r3, [pc, #112]	; (8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007bf0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007bf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bf8:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 8007bfa:	4b19      	ldr	r3, [pc, #100]	; (8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007bfc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c00:	f003 0302 	and.w	r3, r3, #2
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d106      	bne.n	8007c16 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
 8007c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d103      	bne.n	8007c16 <HAL_RCCEx_GetPeriphCLKFreq+0x11fa>
    {
      frequency = LSE_VALUE;
 8007c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c12:	637b      	str	r3, [r7, #52]	; 0x34
 8007c14:	e01f      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 8007c16:	4b12      	ldr	r3, [pc, #72]	; (8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007c18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c24:	d112      	bne.n	8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
 8007c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c2c:	d10e      	bne.n	8007c4c <HAL_RCCEx_GetPeriphCLKFreq+0x1230>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007c2e:	4b0c      	ldr	r3, [pc, #48]	; (8007c60 <HAL_RCCEx_GetPeriphCLKFreq+0x1244>)
 8007c30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007c34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c3c:	d102      	bne.n	8007c44 <HAL_RCCEx_GetPeriphCLKFreq+0x1228>
      {
        frequency = LSI_VALUE / 128U;
 8007c3e:	23fa      	movs	r3, #250	; 0xfa
 8007c40:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007c42:	e008      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
      else
      {
        frequency = LSI_VALUE;
 8007c44:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007c48:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8007c4a:	e004      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8007c50:	e001      	b.n	8007c56 <HAL_RCCEx_GetPeriphCLKFreq+0x123a>
    }

  }
  else
  {
    frequency = 0;
 8007c52:	2300      	movs	r3, #0
 8007c54:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8007c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3738      	adds	r7, #56	; 0x38
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	46020c00 	.word	0x46020c00
 8007c64:	0800ab20 	.word	0x0800ab20
 8007c68:	00f42400 	.word	0x00f42400

08007c6c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b084      	sub	sp, #16
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 8007c74:	4b47      	ldr	r3, [pc, #284]	; (8007d94 <RCCEx_PLL2_Config+0x128>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a46      	ldr	r2, [pc, #280]	; (8007d94 <RCCEx_PLL2_Config+0x128>)
 8007c7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007c7e:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007c80:	f7fa fa02 	bl	8002088 <HAL_GetTick>
 8007c84:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c86:	e008      	b.n	8007c9a <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007c88:	f7fa f9fe 	bl	8002088 <HAL_GetTick>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	1ad3      	subs	r3, r2, r3
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	d901      	bls.n	8007c9a <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007c96:	2303      	movs	r3, #3
 8007c98:	e077      	b.n	8007d8a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007c9a:	4b3e      	ldr	r3, [pc, #248]	; (8007d94 <RCCEx_PLL2_Config+0x128>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d1f0      	bne.n	8007c88 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 8007ca6:	4b3b      	ldr	r3, [pc, #236]	; (8007d94 <RCCEx_PLL2_Config+0x128>)
 8007ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007caa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007cae:	f023 0303 	bic.w	r3, r3, #3
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	6811      	ldr	r1, [r2, #0]
 8007cb6:	687a      	ldr	r2, [r7, #4]
 8007cb8:	6852      	ldr	r2, [r2, #4]
 8007cba:	3a01      	subs	r2, #1
 8007cbc:	0212      	lsls	r2, r2, #8
 8007cbe:	430a      	orrs	r2, r1
 8007cc0:	4934      	ldr	r1, [pc, #208]	; (8007d94 <RCCEx_PLL2_Config+0x128>)
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	62cb      	str	r3, [r1, #44]	; 0x2c
 8007cc6:	4b33      	ldr	r3, [pc, #204]	; (8007d94 <RCCEx_PLL2_Config+0x128>)
 8007cc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007cca:	4b33      	ldr	r3, [pc, #204]	; (8007d98 <RCCEx_PLL2_Config+0x12c>)
 8007ccc:	4013      	ands	r3, r2
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	6892      	ldr	r2, [r2, #8]
 8007cd2:	3a01      	subs	r2, #1
 8007cd4:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	68d2      	ldr	r2, [r2, #12]
 8007cdc:	3a01      	subs	r2, #1
 8007cde:	0252      	lsls	r2, r2, #9
 8007ce0:	b292      	uxth	r2, r2
 8007ce2:	4311      	orrs	r1, r2
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	6912      	ldr	r2, [r2, #16]
 8007ce8:	3a01      	subs	r2, #1
 8007cea:	0412      	lsls	r2, r2, #16
 8007cec:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007cf0:	4311      	orrs	r1, r2
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	6952      	ldr	r2, [r2, #20]
 8007cf6:	3a01      	subs	r2, #1
 8007cf8:	0612      	lsls	r2, r2, #24
 8007cfa:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007cfe:	430a      	orrs	r2, r1
 8007d00:	4924      	ldr	r1, [pc, #144]	; (8007d94 <RCCEx_PLL2_Config+0x128>)
 8007d02:	4313      	orrs	r3, r2
 8007d04:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 8007d06:	4b23      	ldr	r3, [pc, #140]	; (8007d94 <RCCEx_PLL2_Config+0x128>)
 8007d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0a:	f023 020c 	bic.w	r2, r3, #12
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	699b      	ldr	r3, [r3, #24]
 8007d12:	4920      	ldr	r1, [pc, #128]	; (8007d94 <RCCEx_PLL2_Config+0x128>)
 8007d14:	4313      	orrs	r3, r2
 8007d16:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8007d18:	4b1e      	ldr	r3, [pc, #120]	; (8007d94 <RCCEx_PLL2_Config+0x128>)
 8007d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6a1b      	ldr	r3, [r3, #32]
 8007d20:	491c      	ldr	r1, [pc, #112]	; (8007d94 <RCCEx_PLL2_Config+0x128>)
 8007d22:	4313      	orrs	r3, r2
 8007d24:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 8007d26:	4b1b      	ldr	r3, [pc, #108]	; (8007d94 <RCCEx_PLL2_Config+0x128>)
 8007d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2a:	4a1a      	ldr	r2, [pc, #104]	; (8007d94 <RCCEx_PLL2_Config+0x128>)
 8007d2c:	f023 0310 	bic.w	r3, r3, #16
 8007d30:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007d32:	4b18      	ldr	r3, [pc, #96]	; (8007d94 <RCCEx_PLL2_Config+0x128>)
 8007d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d3a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	69d2      	ldr	r2, [r2, #28]
 8007d42:	00d2      	lsls	r2, r2, #3
 8007d44:	4913      	ldr	r1, [pc, #76]	; (8007d94 <RCCEx_PLL2_Config+0x128>)
 8007d46:	4313      	orrs	r3, r2
 8007d48:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8007d4a:	4b12      	ldr	r3, [pc, #72]	; (8007d94 <RCCEx_PLL2_Config+0x128>)
 8007d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d4e:	4a11      	ldr	r2, [pc, #68]	; (8007d94 <RCCEx_PLL2_Config+0x128>)
 8007d50:	f043 0310 	orr.w	r3, r3, #16
 8007d54:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 8007d56:	4b0f      	ldr	r3, [pc, #60]	; (8007d94 <RCCEx_PLL2_Config+0x128>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a0e      	ldr	r2, [pc, #56]	; (8007d94 <RCCEx_PLL2_Config+0x128>)
 8007d5c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007d60:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007d62:	f7fa f991 	bl	8002088 <HAL_GetTick>
 8007d66:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d68:	e008      	b.n	8007d7c <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007d6a:	f7fa f98d 	bl	8002088 <HAL_GetTick>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	2b02      	cmp	r3, #2
 8007d76:	d901      	bls.n	8007d7c <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007d78:	2303      	movs	r3, #3
 8007d7a:	e006      	b.n	8007d8a <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007d7c:	4b05      	ldr	r3, [pc, #20]	; (8007d94 <RCCEx_PLL2_Config+0x128>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d0f0      	beq.n	8007d6a <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8007d88:	2300      	movs	r3, #0

}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	46020c00 	.word	0x46020c00
 8007d98:	80800000 	.word	0x80800000

08007d9c <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 8007da4:	4b47      	ldr	r3, [pc, #284]	; (8007ec4 <RCCEx_PLL3_Config+0x128>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a46      	ldr	r2, [pc, #280]	; (8007ec4 <RCCEx_PLL3_Config+0x128>)
 8007daa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007dae:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007db0:	f7fa f96a 	bl	8002088 <HAL_GetTick>
 8007db4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007db6:	e008      	b.n	8007dca <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007db8:	f7fa f966 	bl	8002088 <HAL_GetTick>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	2b02      	cmp	r3, #2
 8007dc4:	d901      	bls.n	8007dca <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 8007dc6:	2303      	movs	r3, #3
 8007dc8:	e077      	b.n	8007eba <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007dca:	4b3e      	ldr	r3, [pc, #248]	; (8007ec4 <RCCEx_PLL3_Config+0x128>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d1f0      	bne.n	8007db8 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 8007dd6:	4b3b      	ldr	r3, [pc, #236]	; (8007ec4 <RCCEx_PLL3_Config+0x128>)
 8007dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dda:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007dde:	f023 0303 	bic.w	r3, r3, #3
 8007de2:	687a      	ldr	r2, [r7, #4]
 8007de4:	6811      	ldr	r1, [r2, #0]
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	6852      	ldr	r2, [r2, #4]
 8007dea:	3a01      	subs	r2, #1
 8007dec:	0212      	lsls	r2, r2, #8
 8007dee:	430a      	orrs	r2, r1
 8007df0:	4934      	ldr	r1, [pc, #208]	; (8007ec4 <RCCEx_PLL3_Config+0x128>)
 8007df2:	4313      	orrs	r3, r2
 8007df4:	630b      	str	r3, [r1, #48]	; 0x30
 8007df6:	4b33      	ldr	r3, [pc, #204]	; (8007ec4 <RCCEx_PLL3_Config+0x128>)
 8007df8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dfa:	4b33      	ldr	r3, [pc, #204]	; (8007ec8 <RCCEx_PLL3_Config+0x12c>)
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	6892      	ldr	r2, [r2, #8]
 8007e02:	3a01      	subs	r2, #1
 8007e04:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8007e08:	687a      	ldr	r2, [r7, #4]
 8007e0a:	68d2      	ldr	r2, [r2, #12]
 8007e0c:	3a01      	subs	r2, #1
 8007e0e:	0252      	lsls	r2, r2, #9
 8007e10:	b292      	uxth	r2, r2
 8007e12:	4311      	orrs	r1, r2
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	6912      	ldr	r2, [r2, #16]
 8007e18:	3a01      	subs	r2, #1
 8007e1a:	0412      	lsls	r2, r2, #16
 8007e1c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007e20:	4311      	orrs	r1, r2
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	6952      	ldr	r2, [r2, #20]
 8007e26:	3a01      	subs	r2, #1
 8007e28:	0612      	lsls	r2, r2, #24
 8007e2a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007e2e:	430a      	orrs	r2, r1
 8007e30:	4924      	ldr	r1, [pc, #144]	; (8007ec4 <RCCEx_PLL3_Config+0x128>)
 8007e32:	4313      	orrs	r3, r2
 8007e34:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 8007e36:	4b23      	ldr	r3, [pc, #140]	; (8007ec4 <RCCEx_PLL3_Config+0x128>)
 8007e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e3a:	f023 020c 	bic.w	r2, r3, #12
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	699b      	ldr	r3, [r3, #24]
 8007e42:	4920      	ldr	r1, [pc, #128]	; (8007ec4 <RCCEx_PLL3_Config+0x128>)
 8007e44:	4313      	orrs	r3, r2
 8007e46:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8007e48:	4b1e      	ldr	r3, [pc, #120]	; (8007ec4 <RCCEx_PLL3_Config+0x128>)
 8007e4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a1b      	ldr	r3, [r3, #32]
 8007e50:	491c      	ldr	r1, [pc, #112]	; (8007ec4 <RCCEx_PLL3_Config+0x128>)
 8007e52:	4313      	orrs	r3, r2
 8007e54:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 8007e56:	4b1b      	ldr	r3, [pc, #108]	; (8007ec4 <RCCEx_PLL3_Config+0x128>)
 8007e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e5a:	4a1a      	ldr	r2, [pc, #104]	; (8007ec4 <RCCEx_PLL3_Config+0x128>)
 8007e5c:	f023 0310 	bic.w	r3, r3, #16
 8007e60:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007e62:	4b18      	ldr	r3, [pc, #96]	; (8007ec4 <RCCEx_PLL3_Config+0x128>)
 8007e64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e6a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	69d2      	ldr	r2, [r2, #28]
 8007e72:	00d2      	lsls	r2, r2, #3
 8007e74:	4913      	ldr	r1, [pc, #76]	; (8007ec4 <RCCEx_PLL3_Config+0x128>)
 8007e76:	4313      	orrs	r3, r2
 8007e78:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 8007e7a:	4b12      	ldr	r3, [pc, #72]	; (8007ec4 <RCCEx_PLL3_Config+0x128>)
 8007e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e7e:	4a11      	ldr	r2, [pc, #68]	; (8007ec4 <RCCEx_PLL3_Config+0x128>)
 8007e80:	f043 0310 	orr.w	r3, r3, #16
 8007e84:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 8007e86:	4b0f      	ldr	r3, [pc, #60]	; (8007ec4 <RCCEx_PLL3_Config+0x128>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a0e      	ldr	r2, [pc, #56]	; (8007ec4 <RCCEx_PLL3_Config+0x128>)
 8007e8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e90:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8007e92:	f7fa f8f9 	bl	8002088 <HAL_GetTick>
 8007e96:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007e98:	e008      	b.n	8007eac <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007e9a:	f7fa f8f5 	bl	8002088 <HAL_GetTick>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	1ad3      	subs	r3, r2, r3
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	d901      	bls.n	8007eac <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8007ea8:	2303      	movs	r3, #3
 8007eaa:	e006      	b.n	8007eba <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007eac:	4b05      	ldr	r3, [pc, #20]	; (8007ec4 <RCCEx_PLL3_Config+0x128>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d0f0      	beq.n	8007e9a <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
 8007ec2:	bf00      	nop
 8007ec4:	46020c00 	.word	0x46020c00
 8007ec8:	80800000 	.word	0x80800000

08007ecc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d101      	bne.n	8007ede <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
 8007edc:	e0dd      	b.n	800809a <HAL_SPI_Init+0x1ce>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a70      	ldr	r2, [pc, #448]	; (80080a4 <HAL_SPI_Init+0x1d8>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d004      	beq.n	8007ef2 <HAL_SPI_Init+0x26>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a6e      	ldr	r2, [pc, #440]	; (80080a8 <HAL_SPI_Init+0x1dc>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	e000      	b.n	8007ef4 <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 8007ef2:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	629a      	str	r2, [r3, #40]	; 0x28

  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4a69      	ldr	r2, [pc, #420]	; (80080a4 <HAL_SPI_Init+0x1d8>)
 8007f00:	4293      	cmp	r3, r2
 8007f02:	d004      	beq.n	8007f0e <HAL_SPI_Init+0x42>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a67      	ldr	r2, [pc, #412]	; (80080a8 <HAL_SPI_Init+0x1dc>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d105      	bne.n	8007f1a <HAL_SPI_Init+0x4e>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	2b0f      	cmp	r3, #15
 8007f14:	d901      	bls.n	8007f1a <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 8007f16:	2301      	movs	r3, #1
 8007f18:	e0bf      	b.n	800809a <HAL_SPI_Init+0x1ce>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 f8ce 	bl	80080bc <SPI_GetPacketSize>
 8007f20:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a5f      	ldr	r2, [pc, #380]	; (80080a4 <HAL_SPI_Init+0x1d8>)
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	d004      	beq.n	8007f36 <HAL_SPI_Init+0x6a>
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	4a5d      	ldr	r2, [pc, #372]	; (80080a8 <HAL_SPI_Init+0x1dc>)
 8007f32:	4293      	cmp	r3, r2
 8007f34:	d102      	bne.n	8007f3c <HAL_SPI_Init+0x70>
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	2b08      	cmp	r3, #8
 8007f3a:	d816      	bhi.n	8007f6a <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007f40:	4a5a      	ldr	r2, [pc, #360]	; (80080ac <HAL_SPI_Init+0x1e0>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d00e      	beq.n	8007f64 <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a59      	ldr	r2, [pc, #356]	; (80080b0 <HAL_SPI_Init+0x1e4>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d009      	beq.n	8007f64 <HAL_SPI_Init+0x98>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	4a57      	ldr	r2, [pc, #348]	; (80080b4 <HAL_SPI_Init+0x1e8>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d004      	beq.n	8007f64 <HAL_SPI_Init+0x98>
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a56      	ldr	r2, [pc, #344]	; (80080b8 <HAL_SPI_Init+0x1ec>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d104      	bne.n	8007f6e <HAL_SPI_Init+0xa2>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2b10      	cmp	r3, #16
 8007f68:	d901      	bls.n	8007f6e <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e095      	b.n	800809a <HAL_SPI_Init+0x1ce>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d106      	bne.n	8007f88 <HAL_SPI_Init+0xbc>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f7f9 fd3c 	bl	8001a00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2202      	movs	r2, #2
 8007f8c:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f022 0201 	bic.w	r2, r2, #1
 8007f9e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	689b      	ldr	r3, [r3, #8]
 8007fa6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007faa:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	699b      	ldr	r3, [r3, #24]
 8007fb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007fb4:	d119      	bne.n	8007fea <HAL_SPI_Init+0x11e>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007fbe:	d103      	bne.n	8007fc8 <HAL_SPI_Init+0xfc>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d008      	beq.n	8007fda <HAL_SPI_Init+0x10e>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d10c      	bne.n	8007fea <HAL_SPI_Init+0x11e>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007fd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fd8:	d107      	bne.n	8007fea <HAL_SPI_Init+0x11e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	681a      	ldr	r2, [r3, #0]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007fe8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	69da      	ldr	r2, [r3, #28]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ff2:	431a      	orrs	r2, r3
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	431a      	orrs	r2, r3
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ffc:	ea42 0103 	orr.w	r1, r2, r3
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	68da      	ldr	r2, [r3, #12]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	430a      	orrs	r2, r1
 800800a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008014:	431a      	orrs	r2, r3
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800801a:	431a      	orrs	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	699b      	ldr	r3, [r3, #24]
 8008020:	431a      	orrs	r2, r3
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	431a      	orrs	r2, r3
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	695b      	ldr	r3, [r3, #20]
 800802c:	431a      	orrs	r2, r3
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	6a1b      	ldr	r3, [r3, #32]
 8008032:	431a      	orrs	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	431a      	orrs	r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800803e:	431a      	orrs	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	431a      	orrs	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800804a:	431a      	orrs	r2, r3
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008050:	431a      	orrs	r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008056:	ea42 0103 	orr.w	r1, r2, r3
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	430a      	orrs	r2, r1
 8008064:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800806e:	2b00      	cmp	r3, #0
 8008070:	d00a      	beq.n	8008088 <HAL_SPI_Init+0x1bc>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	430a      	orrs	r2, r1
 8008086:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2201      	movs	r2, #1
 8008094:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

  return HAL_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
 80080a2:	bf00      	nop
 80080a4:	46002000 	.word	0x46002000
 80080a8:	56002000 	.word	0x56002000
 80080ac:	40013000 	.word	0x40013000
 80080b0:	50013000 	.word	0x50013000
 80080b4:	40003800 	.word	0x40003800
 80080b8:	50003800 	.word	0x50003800

080080bc <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80080bc:	b480      	push	{r7}
 80080be:	b085      	sub	sp, #20
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080c8:	095b      	lsrs	r3, r3, #5
 80080ca:	3301      	adds	r3, #1
 80080cc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	3301      	adds	r3, #1
 80080d4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	3307      	adds	r3, #7
 80080da:	08db      	lsrs	r3, r3, #3
 80080dc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	fb02 f303 	mul.w	r3, r2, r3
}
 80080e6:	4618      	mov	r0, r3
 80080e8:	3714      	adds	r7, #20
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr

080080f2 <HAL_SPIEx_SetConfigAutonomousMode>:
  * @param  sConfig Pointer to a SPI_HandleTypeDef structure that contains
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi, SPI_AutonomousModeConfTypeDef *sConfig)
{
 80080f2:	b480      	push	{r7}
 80080f4:	b083      	sub	sp, #12
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
 80080fa:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f893 3089 	ldrb.w	r3, [r3, #137]	; 0x89
 8008102:	b2db      	uxtb	r3, r3
 8008104:	2b01      	cmp	r3, #1
 8008106:	d12e      	bne.n	8008166 <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800810e:	2b01      	cmp	r3, #1
 8008110:	d101      	bne.n	8008116 <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8008112:	2302      	movs	r3, #2
 8008114:	e028      	b.n	8008168 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2202      	movs	r2, #2
 8008122:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));

    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f022 0201 	bic.w	r2, r2, #1
 8008134:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8008142:	ea42 0103 	orr.w	r1, r2, r3
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	689a      	ldr	r2, [r3, #8]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	430a      	orrs	r2, r1
 8008150:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2201      	movs	r2, #1
 8008156:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8008162:	2300      	movs	r3, #0
 8008164:	e000      	b.n	8008168 <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 8008166:	2301      	movs	r3, #1
  }
}
 8008168:	4618      	mov	r0, r3
 800816a:	370c      	adds	r7, #12
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008174:	b480      	push	{r7}
 8008176:	b085      	sub	sp, #20
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008182:	b2db      	uxtb	r3, r3
 8008184:	2b01      	cmp	r3, #1
 8008186:	d001      	beq.n	800818c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008188:	2301      	movs	r3, #1
 800818a:	e06a      	b.n	8008262 <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2202      	movs	r2, #2
 8008190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	4a35      	ldr	r2, [pc, #212]	; (8008270 <HAL_TIM_Base_Start+0xfc>)
 800819a:	4293      	cmp	r3, r2
 800819c:	d040      	beq.n	8008220 <HAL_TIM_Base_Start+0xac>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	4a34      	ldr	r2, [pc, #208]	; (8008274 <HAL_TIM_Base_Start+0x100>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d03b      	beq.n	8008220 <HAL_TIM_Base_Start+0xac>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081b0:	d036      	beq.n	8008220 <HAL_TIM_Base_Start+0xac>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081ba:	d031      	beq.n	8008220 <HAL_TIM_Base_Start+0xac>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a2d      	ldr	r2, [pc, #180]	; (8008278 <HAL_TIM_Base_Start+0x104>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d02c      	beq.n	8008220 <HAL_TIM_Base_Start+0xac>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a2c      	ldr	r2, [pc, #176]	; (800827c <HAL_TIM_Base_Start+0x108>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d027      	beq.n	8008220 <HAL_TIM_Base_Start+0xac>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a2a      	ldr	r2, [pc, #168]	; (8008280 <HAL_TIM_Base_Start+0x10c>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d022      	beq.n	8008220 <HAL_TIM_Base_Start+0xac>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a29      	ldr	r2, [pc, #164]	; (8008284 <HAL_TIM_Base_Start+0x110>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d01d      	beq.n	8008220 <HAL_TIM_Base_Start+0xac>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a27      	ldr	r2, [pc, #156]	; (8008288 <HAL_TIM_Base_Start+0x114>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d018      	beq.n	8008220 <HAL_TIM_Base_Start+0xac>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a26      	ldr	r2, [pc, #152]	; (800828c <HAL_TIM_Base_Start+0x118>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d013      	beq.n	8008220 <HAL_TIM_Base_Start+0xac>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a24      	ldr	r2, [pc, #144]	; (8008290 <HAL_TIM_Base_Start+0x11c>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d00e      	beq.n	8008220 <HAL_TIM_Base_Start+0xac>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a23      	ldr	r2, [pc, #140]	; (8008294 <HAL_TIM_Base_Start+0x120>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d009      	beq.n	8008220 <HAL_TIM_Base_Start+0xac>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a21      	ldr	r2, [pc, #132]	; (8008298 <HAL_TIM_Base_Start+0x124>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d004      	beq.n	8008220 <HAL_TIM_Base_Start+0xac>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a20      	ldr	r2, [pc, #128]	; (800829c <HAL_TIM_Base_Start+0x128>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d115      	bne.n	800824c <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	689a      	ldr	r2, [r3, #8]
 8008226:	4b1e      	ldr	r3, [pc, #120]	; (80082a0 <HAL_TIM_Base_Start+0x12c>)
 8008228:	4013      	ands	r3, r2
 800822a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2b06      	cmp	r3, #6
 8008230:	d015      	beq.n	800825e <HAL_TIM_Base_Start+0xea>
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008238:	d011      	beq.n	800825e <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f042 0201 	orr.w	r2, r2, #1
 8008248:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800824a:	e008      	b.n	800825e <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	681a      	ldr	r2, [r3, #0]
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f042 0201 	orr.w	r2, r2, #1
 800825a:	601a      	str	r2, [r3, #0]
 800825c:	e000      	b.n	8008260 <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800825e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3714      	adds	r7, #20
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	40012c00 	.word	0x40012c00
 8008274:	50012c00 	.word	0x50012c00
 8008278:	40000400 	.word	0x40000400
 800827c:	50000400 	.word	0x50000400
 8008280:	40000800 	.word	0x40000800
 8008284:	50000800 	.word	0x50000800
 8008288:	40000c00 	.word	0x40000c00
 800828c:	50000c00 	.word	0x50000c00
 8008290:	40013400 	.word	0x40013400
 8008294:	50013400 	.word	0x50013400
 8008298:	40014000 	.word	0x40014000
 800829c:	50014000 	.word	0x50014000
 80082a0:	00010007 	.word	0x00010007

080082a4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	b082      	sub	sp, #8
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d101      	bne.n	80082b6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e049      	b.n	800834a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d106      	bne.n	80082d0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2200      	movs	r2, #0
 80082c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f7f9 fc28 	bl	8001b20 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2202      	movs	r2, #2
 80082d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	3304      	adds	r3, #4
 80082e0:	4619      	mov	r1, r3
 80082e2:	4610      	mov	r0, r2
 80082e4:	f000 fc4e 	bl	8008b84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2201      	movs	r2, #1
 8008304:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2201      	movs	r2, #1
 800830c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	3708      	adds	r7, #8
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
	...

08008354 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d109      	bne.n	8008378 <HAL_TIM_PWM_Start+0x24>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800836a:	b2db      	uxtb	r3, r3
 800836c:	2b01      	cmp	r3, #1
 800836e:	bf14      	ite	ne
 8008370:	2301      	movne	r3, #1
 8008372:	2300      	moveq	r3, #0
 8008374:	b2db      	uxtb	r3, r3
 8008376:	e03c      	b.n	80083f2 <HAL_TIM_PWM_Start+0x9e>
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	2b04      	cmp	r3, #4
 800837c:	d109      	bne.n	8008392 <HAL_TIM_PWM_Start+0x3e>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008384:	b2db      	uxtb	r3, r3
 8008386:	2b01      	cmp	r3, #1
 8008388:	bf14      	ite	ne
 800838a:	2301      	movne	r3, #1
 800838c:	2300      	moveq	r3, #0
 800838e:	b2db      	uxtb	r3, r3
 8008390:	e02f      	b.n	80083f2 <HAL_TIM_PWM_Start+0x9e>
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	2b08      	cmp	r3, #8
 8008396:	d109      	bne.n	80083ac <HAL_TIM_PWM_Start+0x58>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800839e:	b2db      	uxtb	r3, r3
 80083a0:	2b01      	cmp	r3, #1
 80083a2:	bf14      	ite	ne
 80083a4:	2301      	movne	r3, #1
 80083a6:	2300      	moveq	r3, #0
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	e022      	b.n	80083f2 <HAL_TIM_PWM_Start+0x9e>
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	2b0c      	cmp	r3, #12
 80083b0:	d109      	bne.n	80083c6 <HAL_TIM_PWM_Start+0x72>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	bf14      	ite	ne
 80083be:	2301      	movne	r3, #1
 80083c0:	2300      	moveq	r3, #0
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	e015      	b.n	80083f2 <HAL_TIM_PWM_Start+0x9e>
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	2b10      	cmp	r3, #16
 80083ca:	d109      	bne.n	80083e0 <HAL_TIM_PWM_Start+0x8c>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	bf14      	ite	ne
 80083d8:	2301      	movne	r3, #1
 80083da:	2300      	moveq	r3, #0
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	e008      	b.n	80083f2 <HAL_TIM_PWM_Start+0x9e>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	bf14      	ite	ne
 80083ec:	2301      	movne	r3, #1
 80083ee:	2300      	moveq	r3, #0
 80083f0:	b2db      	uxtb	r3, r3
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d001      	beq.n	80083fa <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80083f6:	2301      	movs	r3, #1
 80083f8:	e0d8      	b.n	80085ac <HAL_TIM_PWM_Start+0x258>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d104      	bne.n	800840a <HAL_TIM_PWM_Start+0xb6>
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2202      	movs	r2, #2
 8008404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008408:	e023      	b.n	8008452 <HAL_TIM_PWM_Start+0xfe>
 800840a:	683b      	ldr	r3, [r7, #0]
 800840c:	2b04      	cmp	r3, #4
 800840e:	d104      	bne.n	800841a <HAL_TIM_PWM_Start+0xc6>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2202      	movs	r2, #2
 8008414:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008418:	e01b      	b.n	8008452 <HAL_TIM_PWM_Start+0xfe>
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	2b08      	cmp	r3, #8
 800841e:	d104      	bne.n	800842a <HAL_TIM_PWM_Start+0xd6>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2202      	movs	r2, #2
 8008424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008428:	e013      	b.n	8008452 <HAL_TIM_PWM_Start+0xfe>
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	2b0c      	cmp	r3, #12
 800842e:	d104      	bne.n	800843a <HAL_TIM_PWM_Start+0xe6>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2202      	movs	r2, #2
 8008434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008438:	e00b      	b.n	8008452 <HAL_TIM_PWM_Start+0xfe>
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	2b10      	cmp	r3, #16
 800843e:	d104      	bne.n	800844a <HAL_TIM_PWM_Start+0xf6>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	2202      	movs	r2, #2
 8008444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008448:	e003      	b.n	8008452 <HAL_TIM_PWM_Start+0xfe>
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2202      	movs	r2, #2
 800844e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	2201      	movs	r2, #1
 8008458:	6839      	ldr	r1, [r7, #0]
 800845a:	4618      	mov	r0, r3
 800845c:	f001 f862 	bl	8009524 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a53      	ldr	r2, [pc, #332]	; (80085b4 <HAL_TIM_PWM_Start+0x260>)
 8008466:	4293      	cmp	r3, r2
 8008468:	d02c      	beq.n	80084c4 <HAL_TIM_PWM_Start+0x170>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a52      	ldr	r2, [pc, #328]	; (80085b8 <HAL_TIM_PWM_Start+0x264>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d027      	beq.n	80084c4 <HAL_TIM_PWM_Start+0x170>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a50      	ldr	r2, [pc, #320]	; (80085bc <HAL_TIM_PWM_Start+0x268>)
 800847a:	4293      	cmp	r3, r2
 800847c:	d022      	beq.n	80084c4 <HAL_TIM_PWM_Start+0x170>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	4a4f      	ldr	r2, [pc, #316]	; (80085c0 <HAL_TIM_PWM_Start+0x26c>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d01d      	beq.n	80084c4 <HAL_TIM_PWM_Start+0x170>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	4a4d      	ldr	r2, [pc, #308]	; (80085c4 <HAL_TIM_PWM_Start+0x270>)
 800848e:	4293      	cmp	r3, r2
 8008490:	d018      	beq.n	80084c4 <HAL_TIM_PWM_Start+0x170>
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	4a4c      	ldr	r2, [pc, #304]	; (80085c8 <HAL_TIM_PWM_Start+0x274>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d013      	beq.n	80084c4 <HAL_TIM_PWM_Start+0x170>
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a4a      	ldr	r2, [pc, #296]	; (80085cc <HAL_TIM_PWM_Start+0x278>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d00e      	beq.n	80084c4 <HAL_TIM_PWM_Start+0x170>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a49      	ldr	r2, [pc, #292]	; (80085d0 <HAL_TIM_PWM_Start+0x27c>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d009      	beq.n	80084c4 <HAL_TIM_PWM_Start+0x170>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a47      	ldr	r2, [pc, #284]	; (80085d4 <HAL_TIM_PWM_Start+0x280>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d004      	beq.n	80084c4 <HAL_TIM_PWM_Start+0x170>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a46      	ldr	r2, [pc, #280]	; (80085d8 <HAL_TIM_PWM_Start+0x284>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d101      	bne.n	80084c8 <HAL_TIM_PWM_Start+0x174>
 80084c4:	2301      	movs	r3, #1
 80084c6:	e000      	b.n	80084ca <HAL_TIM_PWM_Start+0x176>
 80084c8:	2300      	movs	r3, #0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d007      	beq.n	80084de <HAL_TIM_PWM_Start+0x18a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084dc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a34      	ldr	r2, [pc, #208]	; (80085b4 <HAL_TIM_PWM_Start+0x260>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d040      	beq.n	800856a <HAL_TIM_PWM_Start+0x216>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a32      	ldr	r2, [pc, #200]	; (80085b8 <HAL_TIM_PWM_Start+0x264>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d03b      	beq.n	800856a <HAL_TIM_PWM_Start+0x216>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084fa:	d036      	beq.n	800856a <HAL_TIM_PWM_Start+0x216>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008504:	d031      	beq.n	800856a <HAL_TIM_PWM_Start+0x216>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a34      	ldr	r2, [pc, #208]	; (80085dc <HAL_TIM_PWM_Start+0x288>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d02c      	beq.n	800856a <HAL_TIM_PWM_Start+0x216>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a32      	ldr	r2, [pc, #200]	; (80085e0 <HAL_TIM_PWM_Start+0x28c>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d027      	beq.n	800856a <HAL_TIM_PWM_Start+0x216>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a31      	ldr	r2, [pc, #196]	; (80085e4 <HAL_TIM_PWM_Start+0x290>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d022      	beq.n	800856a <HAL_TIM_PWM_Start+0x216>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a2f      	ldr	r2, [pc, #188]	; (80085e8 <HAL_TIM_PWM_Start+0x294>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d01d      	beq.n	800856a <HAL_TIM_PWM_Start+0x216>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a2e      	ldr	r2, [pc, #184]	; (80085ec <HAL_TIM_PWM_Start+0x298>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d018      	beq.n	800856a <HAL_TIM_PWM_Start+0x216>
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	4a2c      	ldr	r2, [pc, #176]	; (80085f0 <HAL_TIM_PWM_Start+0x29c>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d013      	beq.n	800856a <HAL_TIM_PWM_Start+0x216>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4a1d      	ldr	r2, [pc, #116]	; (80085bc <HAL_TIM_PWM_Start+0x268>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d00e      	beq.n	800856a <HAL_TIM_PWM_Start+0x216>
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a1b      	ldr	r2, [pc, #108]	; (80085c0 <HAL_TIM_PWM_Start+0x26c>)
 8008552:	4293      	cmp	r3, r2
 8008554:	d009      	beq.n	800856a <HAL_TIM_PWM_Start+0x216>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	4a1a      	ldr	r2, [pc, #104]	; (80085c4 <HAL_TIM_PWM_Start+0x270>)
 800855c:	4293      	cmp	r3, r2
 800855e:	d004      	beq.n	800856a <HAL_TIM_PWM_Start+0x216>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a18      	ldr	r2, [pc, #96]	; (80085c8 <HAL_TIM_PWM_Start+0x274>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d115      	bne.n	8008596 <HAL_TIM_PWM_Start+0x242>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	689a      	ldr	r2, [r3, #8]
 8008570:	4b20      	ldr	r3, [pc, #128]	; (80085f4 <HAL_TIM_PWM_Start+0x2a0>)
 8008572:	4013      	ands	r3, r2
 8008574:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2b06      	cmp	r3, #6
 800857a:	d015      	beq.n	80085a8 <HAL_TIM_PWM_Start+0x254>
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008582:	d011      	beq.n	80085a8 <HAL_TIM_PWM_Start+0x254>
    {
      __HAL_TIM_ENABLE(htim);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f042 0201 	orr.w	r2, r2, #1
 8008592:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008594:	e008      	b.n	80085a8 <HAL_TIM_PWM_Start+0x254>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f042 0201 	orr.w	r2, r2, #1
 80085a4:	601a      	str	r2, [r3, #0]
 80085a6:	e000      	b.n	80085aa <HAL_TIM_PWM_Start+0x256>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3710      	adds	r7, #16
 80085b0:	46bd      	mov	sp, r7
 80085b2:	bd80      	pop	{r7, pc}
 80085b4:	40012c00 	.word	0x40012c00
 80085b8:	50012c00 	.word	0x50012c00
 80085bc:	40013400 	.word	0x40013400
 80085c0:	50013400 	.word	0x50013400
 80085c4:	40014000 	.word	0x40014000
 80085c8:	50014000 	.word	0x50014000
 80085cc:	40014400 	.word	0x40014400
 80085d0:	50014400 	.word	0x50014400
 80085d4:	40014800 	.word	0x40014800
 80085d8:	50014800 	.word	0x50014800
 80085dc:	40000400 	.word	0x40000400
 80085e0:	50000400 	.word	0x50000400
 80085e4:	40000800 	.word	0x40000800
 80085e8:	50000800 	.word	0x50000800
 80085ec:	40000c00 	.word	0x40000c00
 80085f0:	50000c00 	.word	0x50000c00
 80085f4:	00010007 	.word	0x00010007

080085f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80085f8:	b580      	push	{r7, lr}
 80085fa:	b082      	sub	sp, #8
 80085fc:	af00      	add	r7, sp, #0
 80085fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	691b      	ldr	r3, [r3, #16]
 8008606:	f003 0302 	and.w	r3, r3, #2
 800860a:	2b02      	cmp	r3, #2
 800860c:	d122      	bne.n	8008654 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	68db      	ldr	r3, [r3, #12]
 8008614:	f003 0302 	and.w	r3, r3, #2
 8008618:	2b02      	cmp	r3, #2
 800861a:	d11b      	bne.n	8008654 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f06f 0202 	mvn.w	r2, #2
 8008624:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2201      	movs	r2, #1
 800862a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	699b      	ldr	r3, [r3, #24]
 8008632:	f003 0303 	and.w	r3, r3, #3
 8008636:	2b00      	cmp	r3, #0
 8008638:	d003      	beq.n	8008642 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 fa84 	bl	8008b48 <HAL_TIM_IC_CaptureCallback>
 8008640:	e005      	b.n	800864e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 fa76 	bl	8008b34 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 fa87 	bl	8008b5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2200      	movs	r2, #0
 8008652:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	691b      	ldr	r3, [r3, #16]
 800865a:	f003 0304 	and.w	r3, r3, #4
 800865e:	2b04      	cmp	r3, #4
 8008660:	d122      	bne.n	80086a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	f003 0304 	and.w	r3, r3, #4
 800866c:	2b04      	cmp	r3, #4
 800866e:	d11b      	bne.n	80086a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f06f 0204 	mvn.w	r2, #4
 8008678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2202      	movs	r2, #2
 800867e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	699b      	ldr	r3, [r3, #24]
 8008686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800868a:	2b00      	cmp	r3, #0
 800868c:	d003      	beq.n	8008696 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800868e:	6878      	ldr	r0, [r7, #4]
 8008690:	f000 fa5a 	bl	8008b48 <HAL_TIM_IC_CaptureCallback>
 8008694:	e005      	b.n	80086a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fa4c 	bl	8008b34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 fa5d 	bl	8008b5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	2200      	movs	r2, #0
 80086a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	691b      	ldr	r3, [r3, #16]
 80086ae:	f003 0308 	and.w	r3, r3, #8
 80086b2:	2b08      	cmp	r3, #8
 80086b4:	d122      	bne.n	80086fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68db      	ldr	r3, [r3, #12]
 80086bc:	f003 0308 	and.w	r3, r3, #8
 80086c0:	2b08      	cmp	r3, #8
 80086c2:	d11b      	bne.n	80086fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f06f 0208 	mvn.w	r2, #8
 80086cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	2204      	movs	r2, #4
 80086d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	69db      	ldr	r3, [r3, #28]
 80086da:	f003 0303 	and.w	r3, r3, #3
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d003      	beq.n	80086ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 fa30 	bl	8008b48 <HAL_TIM_IC_CaptureCallback>
 80086e8:	e005      	b.n	80086f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fa22 	bl	8008b34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 fa33 	bl	8008b5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2200      	movs	r2, #0
 80086fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	691b      	ldr	r3, [r3, #16]
 8008702:	f003 0310 	and.w	r3, r3, #16
 8008706:	2b10      	cmp	r3, #16
 8008708:	d122      	bne.n	8008750 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68db      	ldr	r3, [r3, #12]
 8008710:	f003 0310 	and.w	r3, r3, #16
 8008714:	2b10      	cmp	r3, #16
 8008716:	d11b      	bne.n	8008750 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f06f 0210 	mvn.w	r2, #16
 8008720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2208      	movs	r2, #8
 8008726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	69db      	ldr	r3, [r3, #28]
 800872e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008732:	2b00      	cmp	r3, #0
 8008734:	d003      	beq.n	800873e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 fa06 	bl	8008b48 <HAL_TIM_IC_CaptureCallback>
 800873c:	e005      	b.n	800874a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 f9f8 	bl	8008b34 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 fa09 	bl	8008b5c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	f003 0301 	and.w	r3, r3, #1
 800875a:	2b01      	cmp	r3, #1
 800875c:	d10e      	bne.n	800877c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	68db      	ldr	r3, [r3, #12]
 8008764:	f003 0301 	and.w	r3, r3, #1
 8008768:	2b01      	cmp	r3, #1
 800876a:	d107      	bne.n	800877c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f06f 0201 	mvn.w	r2, #1
 8008774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f9d2 	bl	8008b20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	691b      	ldr	r3, [r3, #16]
 8008782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008786:	2b80      	cmp	r3, #128	; 0x80
 8008788:	d10e      	bne.n	80087a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008794:	2b80      	cmp	r3, #128	; 0x80
 8008796:	d107      	bne.n	80087a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80087a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f000 ffb0 	bl	8009708 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	691b      	ldr	r3, [r3, #16]
 80087ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087b6:	d10e      	bne.n	80087d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087c2:	2b80      	cmp	r3, #128	; 0x80
 80087c4:	d107      	bne.n	80087d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80087ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 ffa3 	bl	800971c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	691b      	ldr	r3, [r3, #16]
 80087dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087e0:	2b40      	cmp	r3, #64	; 0x40
 80087e2:	d10e      	bne.n	8008802 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ee:	2b40      	cmp	r3, #64	; 0x40
 80087f0:	d107      	bne.n	8008802 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80087fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80087fc:	6878      	ldr	r0, [r7, #4]
 80087fe:	f000 f9b7 	bl	8008b70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	691b      	ldr	r3, [r3, #16]
 8008808:	f003 0320 	and.w	r3, r3, #32
 800880c:	2b20      	cmp	r3, #32
 800880e:	d10e      	bne.n	800882e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	f003 0320 	and.w	r3, r3, #32
 800881a:	2b20      	cmp	r3, #32
 800881c:	d107      	bne.n	800882e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f06f 0220 	mvn.w	r2, #32
 8008826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f000 ff63 	bl	80096f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	691b      	ldr	r3, [r3, #16]
 8008834:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008838:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800883c:	d10f      	bne.n	800885e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008848:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800884c:	d107      	bne.n	800885e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8008856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 ff69 	bl	8009730 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008868:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800886c:	d10f      	bne.n	800888e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008878:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800887c:	d107      	bne.n	800888e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8008886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 ff5b 	bl	8009744 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	691b      	ldr	r3, [r3, #16]
 8008894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008898:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800889c:	d10f      	bne.n	80088be <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	68db      	ldr	r3, [r3, #12]
 80088a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088ac:	d107      	bne.n	80088be <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80088b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 ff4d 	bl	8009758 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80088cc:	d10f      	bne.n	80088ee <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	68db      	ldr	r3, [r3, #12]
 80088d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80088dc:	d107      	bne.n	80088ee <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80088e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 ff3f 	bl	800976c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088ee:	bf00      	nop
 80088f0:	3708      	adds	r7, #8
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
	...

080088f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b086      	sub	sp, #24
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	60f8      	str	r0, [r7, #12]
 8008900:	60b9      	str	r1, [r7, #8]
 8008902:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008904:	2300      	movs	r3, #0
 8008906:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800890e:	2b01      	cmp	r3, #1
 8008910:	d101      	bne.n	8008916 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008912:	2302      	movs	r3, #2
 8008914:	e0ff      	b.n	8008b16 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2201      	movs	r2, #1
 800891a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2b14      	cmp	r3, #20
 8008922:	f200 80f0 	bhi.w	8008b06 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008926:	a201      	add	r2, pc, #4	; (adr r2, 800892c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800892c:	08008981 	.word	0x08008981
 8008930:	08008b07 	.word	0x08008b07
 8008934:	08008b07 	.word	0x08008b07
 8008938:	08008b07 	.word	0x08008b07
 800893c:	080089c1 	.word	0x080089c1
 8008940:	08008b07 	.word	0x08008b07
 8008944:	08008b07 	.word	0x08008b07
 8008948:	08008b07 	.word	0x08008b07
 800894c:	08008a03 	.word	0x08008a03
 8008950:	08008b07 	.word	0x08008b07
 8008954:	08008b07 	.word	0x08008b07
 8008958:	08008b07 	.word	0x08008b07
 800895c:	08008a43 	.word	0x08008a43
 8008960:	08008b07 	.word	0x08008b07
 8008964:	08008b07 	.word	0x08008b07
 8008968:	08008b07 	.word	0x08008b07
 800896c:	08008a85 	.word	0x08008a85
 8008970:	08008b07 	.word	0x08008b07
 8008974:	08008b07 	.word	0x08008b07
 8008978:	08008b07 	.word	0x08008b07
 800897c:	08008ac5 	.word	0x08008ac5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	68b9      	ldr	r1, [r7, #8]
 8008986:	4618      	mov	r0, r3
 8008988:	f000 f9f6 	bl	8008d78 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	699a      	ldr	r2, [r3, #24]
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f042 0208 	orr.w	r2, r2, #8
 800899a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	699a      	ldr	r2, [r3, #24]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f022 0204 	bic.w	r2, r2, #4
 80089aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	6999      	ldr	r1, [r3, #24]
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	691a      	ldr	r2, [r3, #16]
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	430a      	orrs	r2, r1
 80089bc:	619a      	str	r2, [r3, #24]
      break;
 80089be:	e0a5      	b.n	8008b0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	68b9      	ldr	r1, [r7, #8]
 80089c6:	4618      	mov	r0, r3
 80089c8:	f000 fa98 	bl	8008efc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	699a      	ldr	r2, [r3, #24]
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	699a      	ldr	r2, [r3, #24]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	6999      	ldr	r1, [r3, #24]
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	691b      	ldr	r3, [r3, #16]
 80089f6:	021a      	lsls	r2, r3, #8
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	430a      	orrs	r2, r1
 80089fe:	619a      	str	r2, [r3, #24]
      break;
 8008a00:	e084      	b.n	8008b0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68b9      	ldr	r1, [r7, #8]
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f000 fb27 	bl	800905c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	69da      	ldr	r2, [r3, #28]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f042 0208 	orr.w	r2, r2, #8
 8008a1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	69da      	ldr	r2, [r3, #28]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f022 0204 	bic.w	r2, r2, #4
 8008a2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	69d9      	ldr	r1, [r3, #28]
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	691a      	ldr	r2, [r3, #16]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	430a      	orrs	r2, r1
 8008a3e:	61da      	str	r2, [r3, #28]
      break;
 8008a40:	e064      	b.n	8008b0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	68b9      	ldr	r1, [r7, #8]
 8008a48:	4618      	mov	r0, r3
 8008a4a:	f000 fbb5 	bl	80091b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	69da      	ldr	r2, [r3, #28]
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	69da      	ldr	r2, [r3, #28]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	69d9      	ldr	r1, [r3, #28]
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	691b      	ldr	r3, [r3, #16]
 8008a78:	021a      	lsls	r2, r3, #8
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	430a      	orrs	r2, r1
 8008a80:	61da      	str	r2, [r3, #28]
      break;
 8008a82:	e043      	b.n	8008b0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	68b9      	ldr	r1, [r7, #8]
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f000 fc44 	bl	8009318 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	f042 0208 	orr.w	r2, r2, #8
 8008a9e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f022 0204 	bic.w	r2, r2, #4
 8008aae:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	691a      	ldr	r2, [r3, #16]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	430a      	orrs	r2, r1
 8008ac0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008ac2:	e023      	b.n	8008b0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	68b9      	ldr	r1, [r7, #8]
 8008aca:	4618      	mov	r0, r3
 8008acc:	f000 fca6 	bl	800941c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ade:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008aee:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	021a      	lsls	r2, r3, #8
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	430a      	orrs	r2, r1
 8008b02:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8008b04:	e002      	b.n	8008b0c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008b06:	2301      	movs	r3, #1
 8008b08:	75fb      	strb	r3, [r7, #23]
      break;
 8008b0a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b16:	4618      	mov	r0, r3
 8008b18:	3718      	adds	r7, #24
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}
 8008b1e:	bf00      	nop

08008b20 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008b28:	bf00      	nop
 8008b2a:	370c      	adds	r7, #12
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008b3c:	bf00      	nop
 8008b3e:	370c      	adds	r7, #12
 8008b40:	46bd      	mov	sp, r7
 8008b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b46:	4770      	bx	lr

08008b48 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008b50:	bf00      	nop
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008b64:	bf00      	nop
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008b78:	bf00      	nop
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b085      	sub	sp, #20
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4a68      	ldr	r2, [pc, #416]	; (8008d38 <TIM_Base_SetConfig+0x1b4>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d02b      	beq.n	8008bf4 <TIM_Base_SetConfig+0x70>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a67      	ldr	r2, [pc, #412]	; (8008d3c <TIM_Base_SetConfig+0x1b8>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d027      	beq.n	8008bf4 <TIM_Base_SetConfig+0x70>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008baa:	d023      	beq.n	8008bf4 <TIM_Base_SetConfig+0x70>
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bb2:	d01f      	beq.n	8008bf4 <TIM_Base_SetConfig+0x70>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4a62      	ldr	r2, [pc, #392]	; (8008d40 <TIM_Base_SetConfig+0x1bc>)
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d01b      	beq.n	8008bf4 <TIM_Base_SetConfig+0x70>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	4a61      	ldr	r2, [pc, #388]	; (8008d44 <TIM_Base_SetConfig+0x1c0>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d017      	beq.n	8008bf4 <TIM_Base_SetConfig+0x70>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4a60      	ldr	r2, [pc, #384]	; (8008d48 <TIM_Base_SetConfig+0x1c4>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d013      	beq.n	8008bf4 <TIM_Base_SetConfig+0x70>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	4a5f      	ldr	r2, [pc, #380]	; (8008d4c <TIM_Base_SetConfig+0x1c8>)
 8008bd0:	4293      	cmp	r3, r2
 8008bd2:	d00f      	beq.n	8008bf4 <TIM_Base_SetConfig+0x70>
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	4a5e      	ldr	r2, [pc, #376]	; (8008d50 <TIM_Base_SetConfig+0x1cc>)
 8008bd8:	4293      	cmp	r3, r2
 8008bda:	d00b      	beq.n	8008bf4 <TIM_Base_SetConfig+0x70>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	4a5d      	ldr	r2, [pc, #372]	; (8008d54 <TIM_Base_SetConfig+0x1d0>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d007      	beq.n	8008bf4 <TIM_Base_SetConfig+0x70>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	4a5c      	ldr	r2, [pc, #368]	; (8008d58 <TIM_Base_SetConfig+0x1d4>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d003      	beq.n	8008bf4 <TIM_Base_SetConfig+0x70>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4a5b      	ldr	r2, [pc, #364]	; (8008d5c <TIM_Base_SetConfig+0x1d8>)
 8008bf0:	4293      	cmp	r3, r2
 8008bf2:	d108      	bne.n	8008c06 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008bfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	68fa      	ldr	r2, [r7, #12]
 8008c02:	4313      	orrs	r3, r2
 8008c04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a4b      	ldr	r2, [pc, #300]	; (8008d38 <TIM_Base_SetConfig+0x1b4>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d043      	beq.n	8008c96 <TIM_Base_SetConfig+0x112>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a4a      	ldr	r2, [pc, #296]	; (8008d3c <TIM_Base_SetConfig+0x1b8>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d03f      	beq.n	8008c96 <TIM_Base_SetConfig+0x112>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c1c:	d03b      	beq.n	8008c96 <TIM_Base_SetConfig+0x112>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008c24:	d037      	beq.n	8008c96 <TIM_Base_SetConfig+0x112>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a45      	ldr	r2, [pc, #276]	; (8008d40 <TIM_Base_SetConfig+0x1bc>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d033      	beq.n	8008c96 <TIM_Base_SetConfig+0x112>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	4a44      	ldr	r2, [pc, #272]	; (8008d44 <TIM_Base_SetConfig+0x1c0>)
 8008c32:	4293      	cmp	r3, r2
 8008c34:	d02f      	beq.n	8008c96 <TIM_Base_SetConfig+0x112>
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	4a43      	ldr	r2, [pc, #268]	; (8008d48 <TIM_Base_SetConfig+0x1c4>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d02b      	beq.n	8008c96 <TIM_Base_SetConfig+0x112>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	4a42      	ldr	r2, [pc, #264]	; (8008d4c <TIM_Base_SetConfig+0x1c8>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d027      	beq.n	8008c96 <TIM_Base_SetConfig+0x112>
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	4a41      	ldr	r2, [pc, #260]	; (8008d50 <TIM_Base_SetConfig+0x1cc>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d023      	beq.n	8008c96 <TIM_Base_SetConfig+0x112>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	4a40      	ldr	r2, [pc, #256]	; (8008d54 <TIM_Base_SetConfig+0x1d0>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d01f      	beq.n	8008c96 <TIM_Base_SetConfig+0x112>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4a3f      	ldr	r2, [pc, #252]	; (8008d58 <TIM_Base_SetConfig+0x1d4>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d01b      	beq.n	8008c96 <TIM_Base_SetConfig+0x112>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	4a3e      	ldr	r2, [pc, #248]	; (8008d5c <TIM_Base_SetConfig+0x1d8>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d017      	beq.n	8008c96 <TIM_Base_SetConfig+0x112>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	4a3d      	ldr	r2, [pc, #244]	; (8008d60 <TIM_Base_SetConfig+0x1dc>)
 8008c6a:	4293      	cmp	r3, r2
 8008c6c:	d013      	beq.n	8008c96 <TIM_Base_SetConfig+0x112>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	4a3c      	ldr	r2, [pc, #240]	; (8008d64 <TIM_Base_SetConfig+0x1e0>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d00f      	beq.n	8008c96 <TIM_Base_SetConfig+0x112>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a3b      	ldr	r2, [pc, #236]	; (8008d68 <TIM_Base_SetConfig+0x1e4>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d00b      	beq.n	8008c96 <TIM_Base_SetConfig+0x112>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a3a      	ldr	r2, [pc, #232]	; (8008d6c <TIM_Base_SetConfig+0x1e8>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d007      	beq.n	8008c96 <TIM_Base_SetConfig+0x112>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a39      	ldr	r2, [pc, #228]	; (8008d70 <TIM_Base_SetConfig+0x1ec>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d003      	beq.n	8008c96 <TIM_Base_SetConfig+0x112>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a38      	ldr	r2, [pc, #224]	; (8008d74 <TIM_Base_SetConfig+0x1f0>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d108      	bne.n	8008ca8 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	68db      	ldr	r3, [r3, #12]
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	4313      	orrs	r3, r2
 8008ca6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	695b      	ldr	r3, [r3, #20]
 8008cb2:	4313      	orrs	r3, r2
 8008cb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	689a      	ldr	r2, [r3, #8]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	4a1a      	ldr	r2, [pc, #104]	; (8008d38 <TIM_Base_SetConfig+0x1b4>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d023      	beq.n	8008d1c <TIM_Base_SetConfig+0x198>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	4a19      	ldr	r2, [pc, #100]	; (8008d3c <TIM_Base_SetConfig+0x1b8>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d01f      	beq.n	8008d1c <TIM_Base_SetConfig+0x198>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	4a1e      	ldr	r2, [pc, #120]	; (8008d58 <TIM_Base_SetConfig+0x1d4>)
 8008ce0:	4293      	cmp	r3, r2
 8008ce2:	d01b      	beq.n	8008d1c <TIM_Base_SetConfig+0x198>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	4a1d      	ldr	r2, [pc, #116]	; (8008d5c <TIM_Base_SetConfig+0x1d8>)
 8008ce8:	4293      	cmp	r3, r2
 8008cea:	d017      	beq.n	8008d1c <TIM_Base_SetConfig+0x198>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a1c      	ldr	r2, [pc, #112]	; (8008d60 <TIM_Base_SetConfig+0x1dc>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d013      	beq.n	8008d1c <TIM_Base_SetConfig+0x198>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a1b      	ldr	r2, [pc, #108]	; (8008d64 <TIM_Base_SetConfig+0x1e0>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d00f      	beq.n	8008d1c <TIM_Base_SetConfig+0x198>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	4a1a      	ldr	r2, [pc, #104]	; (8008d68 <TIM_Base_SetConfig+0x1e4>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d00b      	beq.n	8008d1c <TIM_Base_SetConfig+0x198>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a19      	ldr	r2, [pc, #100]	; (8008d6c <TIM_Base_SetConfig+0x1e8>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d007      	beq.n	8008d1c <TIM_Base_SetConfig+0x198>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a18      	ldr	r2, [pc, #96]	; (8008d70 <TIM_Base_SetConfig+0x1ec>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d003      	beq.n	8008d1c <TIM_Base_SetConfig+0x198>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	4a17      	ldr	r2, [pc, #92]	; (8008d74 <TIM_Base_SetConfig+0x1f0>)
 8008d18:	4293      	cmp	r3, r2
 8008d1a:	d103      	bne.n	8008d24 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	691a      	ldr	r2, [r3, #16]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	615a      	str	r2, [r3, #20]
}
 8008d2a:	bf00      	nop
 8008d2c:	3714      	adds	r7, #20
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d34:	4770      	bx	lr
 8008d36:	bf00      	nop
 8008d38:	40012c00 	.word	0x40012c00
 8008d3c:	50012c00 	.word	0x50012c00
 8008d40:	40000400 	.word	0x40000400
 8008d44:	50000400 	.word	0x50000400
 8008d48:	40000800 	.word	0x40000800
 8008d4c:	50000800 	.word	0x50000800
 8008d50:	40000c00 	.word	0x40000c00
 8008d54:	50000c00 	.word	0x50000c00
 8008d58:	40013400 	.word	0x40013400
 8008d5c:	50013400 	.word	0x50013400
 8008d60:	40014000 	.word	0x40014000
 8008d64:	50014000 	.word	0x50014000
 8008d68:	40014400 	.word	0x40014400
 8008d6c:	50014400 	.word	0x50014400
 8008d70:	40014800 	.word	0x40014800
 8008d74:	50014800 	.word	0x50014800

08008d78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b087      	sub	sp, #28
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
 8008d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	6a1b      	ldr	r3, [r3, #32]
 8008d86:	f023 0201 	bic.w	r2, r3, #1
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a1b      	ldr	r3, [r3, #32]
 8008d92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	699b      	ldr	r3, [r3, #24]
 8008d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f023 0303 	bic.w	r3, r3, #3
 8008db2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68fa      	ldr	r2, [r7, #12]
 8008dba:	4313      	orrs	r3, r2
 8008dbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	f023 0302 	bic.w	r3, r3, #2
 8008dc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008dc6:	683b      	ldr	r3, [r7, #0]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	697a      	ldr	r2, [r7, #20]
 8008dcc:	4313      	orrs	r3, r2
 8008dce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	4a40      	ldr	r2, [pc, #256]	; (8008ed4 <TIM_OC1_SetConfig+0x15c>)
 8008dd4:	4293      	cmp	r3, r2
 8008dd6:	d023      	beq.n	8008e20 <TIM_OC1_SetConfig+0xa8>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a3f      	ldr	r2, [pc, #252]	; (8008ed8 <TIM_OC1_SetConfig+0x160>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d01f      	beq.n	8008e20 <TIM_OC1_SetConfig+0xa8>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a3e      	ldr	r2, [pc, #248]	; (8008edc <TIM_OC1_SetConfig+0x164>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d01b      	beq.n	8008e20 <TIM_OC1_SetConfig+0xa8>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	4a3d      	ldr	r2, [pc, #244]	; (8008ee0 <TIM_OC1_SetConfig+0x168>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d017      	beq.n	8008e20 <TIM_OC1_SetConfig+0xa8>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	4a3c      	ldr	r2, [pc, #240]	; (8008ee4 <TIM_OC1_SetConfig+0x16c>)
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d013      	beq.n	8008e20 <TIM_OC1_SetConfig+0xa8>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	4a3b      	ldr	r2, [pc, #236]	; (8008ee8 <TIM_OC1_SetConfig+0x170>)
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d00f      	beq.n	8008e20 <TIM_OC1_SetConfig+0xa8>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	4a3a      	ldr	r2, [pc, #232]	; (8008eec <TIM_OC1_SetConfig+0x174>)
 8008e04:	4293      	cmp	r3, r2
 8008e06:	d00b      	beq.n	8008e20 <TIM_OC1_SetConfig+0xa8>
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	4a39      	ldr	r2, [pc, #228]	; (8008ef0 <TIM_OC1_SetConfig+0x178>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d007      	beq.n	8008e20 <TIM_OC1_SetConfig+0xa8>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	4a38      	ldr	r2, [pc, #224]	; (8008ef4 <TIM_OC1_SetConfig+0x17c>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d003      	beq.n	8008e20 <TIM_OC1_SetConfig+0xa8>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	4a37      	ldr	r2, [pc, #220]	; (8008ef8 <TIM_OC1_SetConfig+0x180>)
 8008e1c:	4293      	cmp	r3, r2
 8008e1e:	d10c      	bne.n	8008e3a <TIM_OC1_SetConfig+0xc2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	f023 0308 	bic.w	r3, r3, #8
 8008e26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	697a      	ldr	r2, [r7, #20]
 8008e2e:	4313      	orrs	r3, r2
 8008e30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	f023 0304 	bic.w	r3, r3, #4
 8008e38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	4a25      	ldr	r2, [pc, #148]	; (8008ed4 <TIM_OC1_SetConfig+0x15c>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d023      	beq.n	8008e8a <TIM_OC1_SetConfig+0x112>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	4a24      	ldr	r2, [pc, #144]	; (8008ed8 <TIM_OC1_SetConfig+0x160>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d01f      	beq.n	8008e8a <TIM_OC1_SetConfig+0x112>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	4a23      	ldr	r2, [pc, #140]	; (8008edc <TIM_OC1_SetConfig+0x164>)
 8008e4e:	4293      	cmp	r3, r2
 8008e50:	d01b      	beq.n	8008e8a <TIM_OC1_SetConfig+0x112>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	4a22      	ldr	r2, [pc, #136]	; (8008ee0 <TIM_OC1_SetConfig+0x168>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d017      	beq.n	8008e8a <TIM_OC1_SetConfig+0x112>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4a21      	ldr	r2, [pc, #132]	; (8008ee4 <TIM_OC1_SetConfig+0x16c>)
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	d013      	beq.n	8008e8a <TIM_OC1_SetConfig+0x112>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4a20      	ldr	r2, [pc, #128]	; (8008ee8 <TIM_OC1_SetConfig+0x170>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d00f      	beq.n	8008e8a <TIM_OC1_SetConfig+0x112>
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	4a1f      	ldr	r2, [pc, #124]	; (8008eec <TIM_OC1_SetConfig+0x174>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d00b      	beq.n	8008e8a <TIM_OC1_SetConfig+0x112>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	4a1e      	ldr	r2, [pc, #120]	; (8008ef0 <TIM_OC1_SetConfig+0x178>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d007      	beq.n	8008e8a <TIM_OC1_SetConfig+0x112>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	4a1d      	ldr	r2, [pc, #116]	; (8008ef4 <TIM_OC1_SetConfig+0x17c>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d003      	beq.n	8008e8a <TIM_OC1_SetConfig+0x112>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	4a1c      	ldr	r2, [pc, #112]	; (8008ef8 <TIM_OC1_SetConfig+0x180>)
 8008e86:	4293      	cmp	r3, r2
 8008e88:	d111      	bne.n	8008eae <TIM_OC1_SetConfig+0x136>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	695b      	ldr	r3, [r3, #20]
 8008e9e:	693a      	ldr	r2, [r7, #16]
 8008ea0:	4313      	orrs	r3, r2
 8008ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	699b      	ldr	r3, [r3, #24]
 8008ea8:	693a      	ldr	r2, [r7, #16]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	693a      	ldr	r2, [r7, #16]
 8008eb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	68fa      	ldr	r2, [r7, #12]
 8008eb8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	685a      	ldr	r2, [r3, #4]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	697a      	ldr	r2, [r7, #20]
 8008ec6:	621a      	str	r2, [r3, #32]
}
 8008ec8:	bf00      	nop
 8008eca:	371c      	adds	r7, #28
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr
 8008ed4:	40012c00 	.word	0x40012c00
 8008ed8:	50012c00 	.word	0x50012c00
 8008edc:	40013400 	.word	0x40013400
 8008ee0:	50013400 	.word	0x50013400
 8008ee4:	40014000 	.word	0x40014000
 8008ee8:	50014000 	.word	0x50014000
 8008eec:	40014400 	.word	0x40014400
 8008ef0:	50014400 	.word	0x50014400
 8008ef4:	40014800 	.word	0x40014800
 8008ef8:	50014800 	.word	0x50014800

08008efc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b087      	sub	sp, #28
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6a1b      	ldr	r3, [r3, #32]
 8008f0a:	f023 0210 	bic.w	r2, r3, #16
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6a1b      	ldr	r3, [r3, #32]
 8008f16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	685b      	ldr	r3, [r3, #4]
 8008f1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	699b      	ldr	r3, [r3, #24]
 8008f22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008f2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	021b      	lsls	r3, r3, #8
 8008f3e:	68fa      	ldr	r2, [r7, #12]
 8008f40:	4313      	orrs	r3, r2
 8008f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	f023 0320 	bic.w	r3, r3, #32
 8008f4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	011b      	lsls	r3, r3, #4
 8008f52:	697a      	ldr	r2, [r7, #20]
 8008f54:	4313      	orrs	r3, r2
 8008f56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	4a36      	ldr	r2, [pc, #216]	; (8009034 <TIM_OC2_SetConfig+0x138>)
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	d00b      	beq.n	8008f78 <TIM_OC2_SetConfig+0x7c>
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	4a35      	ldr	r2, [pc, #212]	; (8009038 <TIM_OC2_SetConfig+0x13c>)
 8008f64:	4293      	cmp	r3, r2
 8008f66:	d007      	beq.n	8008f78 <TIM_OC2_SetConfig+0x7c>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	4a34      	ldr	r2, [pc, #208]	; (800903c <TIM_OC2_SetConfig+0x140>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d003      	beq.n	8008f78 <TIM_OC2_SetConfig+0x7c>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	4a33      	ldr	r2, [pc, #204]	; (8009040 <TIM_OC2_SetConfig+0x144>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d10d      	bne.n	8008f94 <TIM_OC2_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	011b      	lsls	r3, r3, #4
 8008f86:	697a      	ldr	r2, [r7, #20]
 8008f88:	4313      	orrs	r3, r2
 8008f8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f8c:	697b      	ldr	r3, [r7, #20]
 8008f8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	4a27      	ldr	r2, [pc, #156]	; (8009034 <TIM_OC2_SetConfig+0x138>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d023      	beq.n	8008fe4 <TIM_OC2_SetConfig+0xe8>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	4a26      	ldr	r2, [pc, #152]	; (8009038 <TIM_OC2_SetConfig+0x13c>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d01f      	beq.n	8008fe4 <TIM_OC2_SetConfig+0xe8>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	4a25      	ldr	r2, [pc, #148]	; (800903c <TIM_OC2_SetConfig+0x140>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d01b      	beq.n	8008fe4 <TIM_OC2_SetConfig+0xe8>
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	4a24      	ldr	r2, [pc, #144]	; (8009040 <TIM_OC2_SetConfig+0x144>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d017      	beq.n	8008fe4 <TIM_OC2_SetConfig+0xe8>
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4a23      	ldr	r2, [pc, #140]	; (8009044 <TIM_OC2_SetConfig+0x148>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d013      	beq.n	8008fe4 <TIM_OC2_SetConfig+0xe8>
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	4a22      	ldr	r2, [pc, #136]	; (8009048 <TIM_OC2_SetConfig+0x14c>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d00f      	beq.n	8008fe4 <TIM_OC2_SetConfig+0xe8>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	4a21      	ldr	r2, [pc, #132]	; (800904c <TIM_OC2_SetConfig+0x150>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d00b      	beq.n	8008fe4 <TIM_OC2_SetConfig+0xe8>
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	4a20      	ldr	r2, [pc, #128]	; (8009050 <TIM_OC2_SetConfig+0x154>)
 8008fd0:	4293      	cmp	r3, r2
 8008fd2:	d007      	beq.n	8008fe4 <TIM_OC2_SetConfig+0xe8>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	4a1f      	ldr	r2, [pc, #124]	; (8009054 <TIM_OC2_SetConfig+0x158>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d003      	beq.n	8008fe4 <TIM_OC2_SetConfig+0xe8>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	4a1e      	ldr	r2, [pc, #120]	; (8009058 <TIM_OC2_SetConfig+0x15c>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d113      	bne.n	800900c <TIM_OC2_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008fea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ff2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	695b      	ldr	r3, [r3, #20]
 8008ff8:	009b      	lsls	r3, r3, #2
 8008ffa:	693a      	ldr	r2, [r7, #16]
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	699b      	ldr	r3, [r3, #24]
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	693a      	ldr	r2, [r7, #16]
 8009008:	4313      	orrs	r3, r2
 800900a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	693a      	ldr	r2, [r7, #16]
 8009010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	68fa      	ldr	r2, [r7, #12]
 8009016:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	697a      	ldr	r2, [r7, #20]
 8009024:	621a      	str	r2, [r3, #32]
}
 8009026:	bf00      	nop
 8009028:	371c      	adds	r7, #28
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	40012c00 	.word	0x40012c00
 8009038:	50012c00 	.word	0x50012c00
 800903c:	40013400 	.word	0x40013400
 8009040:	50013400 	.word	0x50013400
 8009044:	40014000 	.word	0x40014000
 8009048:	50014000 	.word	0x50014000
 800904c:	40014400 	.word	0x40014400
 8009050:	50014400 	.word	0x50014400
 8009054:	40014800 	.word	0x40014800
 8009058:	50014800 	.word	0x50014800

0800905c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800905c:	b480      	push	{r7}
 800905e:	b087      	sub	sp, #28
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
 8009064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a1b      	ldr	r3, [r3, #32]
 800906a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6a1b      	ldr	r3, [r3, #32]
 8009076:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	69db      	ldr	r3, [r3, #28]
 8009082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800908a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800908e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f023 0303 	bic.w	r3, r3, #3
 8009096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	68fa      	ldr	r2, [r7, #12]
 800909e:	4313      	orrs	r3, r2
 80090a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80090a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	689b      	ldr	r3, [r3, #8]
 80090ae:	021b      	lsls	r3, r3, #8
 80090b0:	697a      	ldr	r2, [r7, #20]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4a35      	ldr	r2, [pc, #212]	; (8009190 <TIM_OC3_SetConfig+0x134>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d00b      	beq.n	80090d6 <TIM_OC3_SetConfig+0x7a>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	4a34      	ldr	r2, [pc, #208]	; (8009194 <TIM_OC3_SetConfig+0x138>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d007      	beq.n	80090d6 <TIM_OC3_SetConfig+0x7a>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	4a33      	ldr	r2, [pc, #204]	; (8009198 <TIM_OC3_SetConfig+0x13c>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d003      	beq.n	80090d6 <TIM_OC3_SetConfig+0x7a>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	4a32      	ldr	r2, [pc, #200]	; (800919c <TIM_OC3_SetConfig+0x140>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d10d      	bne.n	80090f2 <TIM_OC3_SetConfig+0x96>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80090d6:	697b      	ldr	r3, [r7, #20]
 80090d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80090dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	68db      	ldr	r3, [r3, #12]
 80090e2:	021b      	lsls	r3, r3, #8
 80090e4:	697a      	ldr	r2, [r7, #20]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80090f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	4a26      	ldr	r2, [pc, #152]	; (8009190 <TIM_OC3_SetConfig+0x134>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d023      	beq.n	8009142 <TIM_OC3_SetConfig+0xe6>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4a25      	ldr	r2, [pc, #148]	; (8009194 <TIM_OC3_SetConfig+0x138>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d01f      	beq.n	8009142 <TIM_OC3_SetConfig+0xe6>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	4a24      	ldr	r2, [pc, #144]	; (8009198 <TIM_OC3_SetConfig+0x13c>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d01b      	beq.n	8009142 <TIM_OC3_SetConfig+0xe6>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4a23      	ldr	r2, [pc, #140]	; (800919c <TIM_OC3_SetConfig+0x140>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d017      	beq.n	8009142 <TIM_OC3_SetConfig+0xe6>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4a22      	ldr	r2, [pc, #136]	; (80091a0 <TIM_OC3_SetConfig+0x144>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d013      	beq.n	8009142 <TIM_OC3_SetConfig+0xe6>
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	4a21      	ldr	r2, [pc, #132]	; (80091a4 <TIM_OC3_SetConfig+0x148>)
 800911e:	4293      	cmp	r3, r2
 8009120:	d00f      	beq.n	8009142 <TIM_OC3_SetConfig+0xe6>
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	4a20      	ldr	r2, [pc, #128]	; (80091a8 <TIM_OC3_SetConfig+0x14c>)
 8009126:	4293      	cmp	r3, r2
 8009128:	d00b      	beq.n	8009142 <TIM_OC3_SetConfig+0xe6>
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4a1f      	ldr	r2, [pc, #124]	; (80091ac <TIM_OC3_SetConfig+0x150>)
 800912e:	4293      	cmp	r3, r2
 8009130:	d007      	beq.n	8009142 <TIM_OC3_SetConfig+0xe6>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	4a1e      	ldr	r2, [pc, #120]	; (80091b0 <TIM_OC3_SetConfig+0x154>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d003      	beq.n	8009142 <TIM_OC3_SetConfig+0xe6>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	4a1d      	ldr	r2, [pc, #116]	; (80091b4 <TIM_OC3_SetConfig+0x158>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d113      	bne.n	800916a <TIM_OC3_SetConfig+0x10e>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	695b      	ldr	r3, [r3, #20]
 8009156:	011b      	lsls	r3, r3, #4
 8009158:	693a      	ldr	r2, [r7, #16]
 800915a:	4313      	orrs	r3, r2
 800915c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	699b      	ldr	r3, [r3, #24]
 8009162:	011b      	lsls	r3, r3, #4
 8009164:	693a      	ldr	r2, [r7, #16]
 8009166:	4313      	orrs	r3, r2
 8009168:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	693a      	ldr	r2, [r7, #16]
 800916e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	68fa      	ldr	r2, [r7, #12]
 8009174:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	685a      	ldr	r2, [r3, #4]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	697a      	ldr	r2, [r7, #20]
 8009182:	621a      	str	r2, [r3, #32]
}
 8009184:	bf00      	nop
 8009186:	371c      	adds	r7, #28
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr
 8009190:	40012c00 	.word	0x40012c00
 8009194:	50012c00 	.word	0x50012c00
 8009198:	40013400 	.word	0x40013400
 800919c:	50013400 	.word	0x50013400
 80091a0:	40014000 	.word	0x40014000
 80091a4:	50014000 	.word	0x50014000
 80091a8:	40014400 	.word	0x40014400
 80091ac:	50014400 	.word	0x50014400
 80091b0:	40014800 	.word	0x40014800
 80091b4:	50014800 	.word	0x50014800

080091b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80091b8:	b480      	push	{r7}
 80091ba:	b087      	sub	sp, #28
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6a1b      	ldr	r3, [r3, #32]
 80091c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6a1b      	ldr	r3, [r3, #32]
 80091d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	69db      	ldr	r3, [r3, #28]
 80091de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80091e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80091ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	021b      	lsls	r3, r3, #8
 80091fa:	68fa      	ldr	r2, [r7, #12]
 80091fc:	4313      	orrs	r3, r2
 80091fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009200:	697b      	ldr	r3, [r7, #20]
 8009202:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009206:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	689b      	ldr	r3, [r3, #8]
 800920c:	031b      	lsls	r3, r3, #12
 800920e:	697a      	ldr	r2, [r7, #20]
 8009210:	4313      	orrs	r3, r2
 8009212:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	4a36      	ldr	r2, [pc, #216]	; (80092f0 <TIM_OC4_SetConfig+0x138>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d00b      	beq.n	8009234 <TIM_OC4_SetConfig+0x7c>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	4a35      	ldr	r2, [pc, #212]	; (80092f4 <TIM_OC4_SetConfig+0x13c>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d007      	beq.n	8009234 <TIM_OC4_SetConfig+0x7c>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	4a34      	ldr	r2, [pc, #208]	; (80092f8 <TIM_OC4_SetConfig+0x140>)
 8009228:	4293      	cmp	r3, r2
 800922a:	d003      	beq.n	8009234 <TIM_OC4_SetConfig+0x7c>
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	4a33      	ldr	r2, [pc, #204]	; (80092fc <TIM_OC4_SetConfig+0x144>)
 8009230:	4293      	cmp	r3, r2
 8009232:	d10d      	bne.n	8009250 <TIM_OC4_SetConfig+0x98>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800923a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	68db      	ldr	r3, [r3, #12]
 8009240:	031b      	lsls	r3, r3, #12
 8009242:	697a      	ldr	r2, [r7, #20]
 8009244:	4313      	orrs	r3, r2
 8009246:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800924e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	4a27      	ldr	r2, [pc, #156]	; (80092f0 <TIM_OC4_SetConfig+0x138>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d023      	beq.n	80092a0 <TIM_OC4_SetConfig+0xe8>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4a26      	ldr	r2, [pc, #152]	; (80092f4 <TIM_OC4_SetConfig+0x13c>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d01f      	beq.n	80092a0 <TIM_OC4_SetConfig+0xe8>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	4a25      	ldr	r2, [pc, #148]	; (80092f8 <TIM_OC4_SetConfig+0x140>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d01b      	beq.n	80092a0 <TIM_OC4_SetConfig+0xe8>
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	4a24      	ldr	r2, [pc, #144]	; (80092fc <TIM_OC4_SetConfig+0x144>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d017      	beq.n	80092a0 <TIM_OC4_SetConfig+0xe8>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4a23      	ldr	r2, [pc, #140]	; (8009300 <TIM_OC4_SetConfig+0x148>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d013      	beq.n	80092a0 <TIM_OC4_SetConfig+0xe8>
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	4a22      	ldr	r2, [pc, #136]	; (8009304 <TIM_OC4_SetConfig+0x14c>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d00f      	beq.n	80092a0 <TIM_OC4_SetConfig+0xe8>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	4a21      	ldr	r2, [pc, #132]	; (8009308 <TIM_OC4_SetConfig+0x150>)
 8009284:	4293      	cmp	r3, r2
 8009286:	d00b      	beq.n	80092a0 <TIM_OC4_SetConfig+0xe8>
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	4a20      	ldr	r2, [pc, #128]	; (800930c <TIM_OC4_SetConfig+0x154>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d007      	beq.n	80092a0 <TIM_OC4_SetConfig+0xe8>
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	4a1f      	ldr	r2, [pc, #124]	; (8009310 <TIM_OC4_SetConfig+0x158>)
 8009294:	4293      	cmp	r3, r2
 8009296:	d003      	beq.n	80092a0 <TIM_OC4_SetConfig+0xe8>
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	4a1e      	ldr	r2, [pc, #120]	; (8009314 <TIM_OC4_SetConfig+0x15c>)
 800929c:	4293      	cmp	r3, r2
 800929e:	d113      	bne.n	80092c8 <TIM_OC4_SetConfig+0x110>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80092a6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80092ae:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80092b0:	683b      	ldr	r3, [r7, #0]
 80092b2:	695b      	ldr	r3, [r3, #20]
 80092b4:	019b      	lsls	r3, r3, #6
 80092b6:	693a      	ldr	r2, [r7, #16]
 80092b8:	4313      	orrs	r3, r2
 80092ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	699b      	ldr	r3, [r3, #24]
 80092c0:	019b      	lsls	r3, r3, #6
 80092c2:	693a      	ldr	r2, [r7, #16]
 80092c4:	4313      	orrs	r3, r2
 80092c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	693a      	ldr	r2, [r7, #16]
 80092cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	685a      	ldr	r2, [r3, #4]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	697a      	ldr	r2, [r7, #20]
 80092e0:	621a      	str	r2, [r3, #32]
}
 80092e2:	bf00      	nop
 80092e4:	371c      	adds	r7, #28
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr
 80092ee:	bf00      	nop
 80092f0:	40012c00 	.word	0x40012c00
 80092f4:	50012c00 	.word	0x50012c00
 80092f8:	40013400 	.word	0x40013400
 80092fc:	50013400 	.word	0x50013400
 8009300:	40014000 	.word	0x40014000
 8009304:	50014000 	.word	0x50014000
 8009308:	40014400 	.word	0x40014400
 800930c:	50014400 	.word	0x50014400
 8009310:	40014800 	.word	0x40014800
 8009314:	50014800 	.word	0x50014800

08009318 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009318:	b480      	push	{r7}
 800931a:	b087      	sub	sp, #28
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6a1b      	ldr	r3, [r3, #32]
 8009326:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6a1b      	ldr	r3, [r3, #32]
 8009332:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	685b      	ldr	r3, [r3, #4]
 8009338:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800933e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800934a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	68fa      	ldr	r2, [r7, #12]
 8009352:	4313      	orrs	r3, r2
 8009354:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800935c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	689b      	ldr	r3, [r3, #8]
 8009362:	041b      	lsls	r3, r3, #16
 8009364:	693a      	ldr	r2, [r7, #16]
 8009366:	4313      	orrs	r3, r2
 8009368:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	4a21      	ldr	r2, [pc, #132]	; (80093f4 <TIM_OC5_SetConfig+0xdc>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d023      	beq.n	80093ba <TIM_OC5_SetConfig+0xa2>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4a20      	ldr	r2, [pc, #128]	; (80093f8 <TIM_OC5_SetConfig+0xe0>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d01f      	beq.n	80093ba <TIM_OC5_SetConfig+0xa2>
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	4a1f      	ldr	r2, [pc, #124]	; (80093fc <TIM_OC5_SetConfig+0xe4>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d01b      	beq.n	80093ba <TIM_OC5_SetConfig+0xa2>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	4a1e      	ldr	r2, [pc, #120]	; (8009400 <TIM_OC5_SetConfig+0xe8>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d017      	beq.n	80093ba <TIM_OC5_SetConfig+0xa2>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	4a1d      	ldr	r2, [pc, #116]	; (8009404 <TIM_OC5_SetConfig+0xec>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d013      	beq.n	80093ba <TIM_OC5_SetConfig+0xa2>
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4a1c      	ldr	r2, [pc, #112]	; (8009408 <TIM_OC5_SetConfig+0xf0>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d00f      	beq.n	80093ba <TIM_OC5_SetConfig+0xa2>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	4a1b      	ldr	r2, [pc, #108]	; (800940c <TIM_OC5_SetConfig+0xf4>)
 800939e:	4293      	cmp	r3, r2
 80093a0:	d00b      	beq.n	80093ba <TIM_OC5_SetConfig+0xa2>
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	4a1a      	ldr	r2, [pc, #104]	; (8009410 <TIM_OC5_SetConfig+0xf8>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d007      	beq.n	80093ba <TIM_OC5_SetConfig+0xa2>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	4a19      	ldr	r2, [pc, #100]	; (8009414 <TIM_OC5_SetConfig+0xfc>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d003      	beq.n	80093ba <TIM_OC5_SetConfig+0xa2>
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	4a18      	ldr	r2, [pc, #96]	; (8009418 <TIM_OC5_SetConfig+0x100>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d109      	bne.n	80093ce <TIM_OC5_SetConfig+0xb6>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80093ba:	697b      	ldr	r3, [r7, #20]
 80093bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	695b      	ldr	r3, [r3, #20]
 80093c6:	021b      	lsls	r3, r3, #8
 80093c8:	697a      	ldr	r2, [r7, #20]
 80093ca:	4313      	orrs	r3, r2
 80093cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	697a      	ldr	r2, [r7, #20]
 80093d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	68fa      	ldr	r2, [r7, #12]
 80093d8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	685a      	ldr	r2, [r3, #4]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	693a      	ldr	r2, [r7, #16]
 80093e6:	621a      	str	r2, [r3, #32]
}
 80093e8:	bf00      	nop
 80093ea:	371c      	adds	r7, #28
 80093ec:	46bd      	mov	sp, r7
 80093ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f2:	4770      	bx	lr
 80093f4:	40012c00 	.word	0x40012c00
 80093f8:	50012c00 	.word	0x50012c00
 80093fc:	40013400 	.word	0x40013400
 8009400:	50013400 	.word	0x50013400
 8009404:	40014000 	.word	0x40014000
 8009408:	50014000 	.word	0x50014000
 800940c:	40014400 	.word	0x40014400
 8009410:	50014400 	.word	0x50014400
 8009414:	40014800 	.word	0x40014800
 8009418:	50014800 	.word	0x50014800

0800941c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800941c:	b480      	push	{r7}
 800941e:	b087      	sub	sp, #28
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6a1b      	ldr	r3, [r3, #32]
 800942a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a1b      	ldr	r3, [r3, #32]
 8009436:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	685b      	ldr	r3, [r3, #4]
 800943c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800944a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800944e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	021b      	lsls	r3, r3, #8
 8009456:	68fa      	ldr	r2, [r7, #12]
 8009458:	4313      	orrs	r3, r2
 800945a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009462:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	051b      	lsls	r3, r3, #20
 800946a:	693a      	ldr	r2, [r7, #16]
 800946c:	4313      	orrs	r3, r2
 800946e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	4a22      	ldr	r2, [pc, #136]	; (80094fc <TIM_OC6_SetConfig+0xe0>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d023      	beq.n	80094c0 <TIM_OC6_SetConfig+0xa4>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	4a21      	ldr	r2, [pc, #132]	; (8009500 <TIM_OC6_SetConfig+0xe4>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d01f      	beq.n	80094c0 <TIM_OC6_SetConfig+0xa4>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	4a20      	ldr	r2, [pc, #128]	; (8009504 <TIM_OC6_SetConfig+0xe8>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d01b      	beq.n	80094c0 <TIM_OC6_SetConfig+0xa4>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	4a1f      	ldr	r2, [pc, #124]	; (8009508 <TIM_OC6_SetConfig+0xec>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d017      	beq.n	80094c0 <TIM_OC6_SetConfig+0xa4>
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	4a1e      	ldr	r2, [pc, #120]	; (800950c <TIM_OC6_SetConfig+0xf0>)
 8009494:	4293      	cmp	r3, r2
 8009496:	d013      	beq.n	80094c0 <TIM_OC6_SetConfig+0xa4>
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	4a1d      	ldr	r2, [pc, #116]	; (8009510 <TIM_OC6_SetConfig+0xf4>)
 800949c:	4293      	cmp	r3, r2
 800949e:	d00f      	beq.n	80094c0 <TIM_OC6_SetConfig+0xa4>
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	4a1c      	ldr	r2, [pc, #112]	; (8009514 <TIM_OC6_SetConfig+0xf8>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d00b      	beq.n	80094c0 <TIM_OC6_SetConfig+0xa4>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	4a1b      	ldr	r2, [pc, #108]	; (8009518 <TIM_OC6_SetConfig+0xfc>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d007      	beq.n	80094c0 <TIM_OC6_SetConfig+0xa4>
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	4a1a      	ldr	r2, [pc, #104]	; (800951c <TIM_OC6_SetConfig+0x100>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d003      	beq.n	80094c0 <TIM_OC6_SetConfig+0xa4>
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	4a19      	ldr	r2, [pc, #100]	; (8009520 <TIM_OC6_SetConfig+0x104>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d109      	bne.n	80094d4 <TIM_OC6_SetConfig+0xb8>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80094c6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	695b      	ldr	r3, [r3, #20]
 80094cc:	029b      	lsls	r3, r3, #10
 80094ce:	697a      	ldr	r2, [r7, #20]
 80094d0:	4313      	orrs	r3, r2
 80094d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	697a      	ldr	r2, [r7, #20]
 80094d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80094e0:	683b      	ldr	r3, [r7, #0]
 80094e2:	685a      	ldr	r2, [r3, #4]
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	693a      	ldr	r2, [r7, #16]
 80094ec:	621a      	str	r2, [r3, #32]
}
 80094ee:	bf00      	nop
 80094f0:	371c      	adds	r7, #28
 80094f2:	46bd      	mov	sp, r7
 80094f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f8:	4770      	bx	lr
 80094fa:	bf00      	nop
 80094fc:	40012c00 	.word	0x40012c00
 8009500:	50012c00 	.word	0x50012c00
 8009504:	40013400 	.word	0x40013400
 8009508:	50013400 	.word	0x50013400
 800950c:	40014000 	.word	0x40014000
 8009510:	50014000 	.word	0x50014000
 8009514:	40014400 	.word	0x40014400
 8009518:	50014400 	.word	0x50014400
 800951c:	40014800 	.word	0x40014800
 8009520:	50014800 	.word	0x50014800

08009524 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009524:	b480      	push	{r7}
 8009526:	b087      	sub	sp, #28
 8009528:	af00      	add	r7, sp, #0
 800952a:	60f8      	str	r0, [r7, #12]
 800952c:	60b9      	str	r1, [r7, #8]
 800952e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	f003 031f 	and.w	r3, r3, #31
 8009536:	2201      	movs	r2, #1
 8009538:	fa02 f303 	lsl.w	r3, r2, r3
 800953c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	6a1a      	ldr	r2, [r3, #32]
 8009542:	697b      	ldr	r3, [r7, #20]
 8009544:	43db      	mvns	r3, r3
 8009546:	401a      	ands	r2, r3
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	6a1a      	ldr	r2, [r3, #32]
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	f003 031f 	and.w	r3, r3, #31
 8009556:	6879      	ldr	r1, [r7, #4]
 8009558:	fa01 f303 	lsl.w	r3, r1, r3
 800955c:	431a      	orrs	r2, r3
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	621a      	str	r2, [r3, #32]
}
 8009562:	bf00      	nop
 8009564:	371c      	adds	r7, #28
 8009566:	46bd      	mov	sp, r7
 8009568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956c:	4770      	bx	lr
	...

08009570 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009570:	b480      	push	{r7}
 8009572:	b085      	sub	sp, #20
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009580:	2b01      	cmp	r3, #1
 8009582:	d101      	bne.n	8009588 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009584:	2302      	movs	r3, #2
 8009586:	e097      	b.n	80096b8 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2201      	movs	r2, #1
 800958c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2202      	movs	r2, #2
 8009594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	689b      	ldr	r3, [r3, #8]
 80095a6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	4a45      	ldr	r2, [pc, #276]	; (80096c4 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d00e      	beq.n	80095d0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a44      	ldr	r2, [pc, #272]	; (80096c8 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d009      	beq.n	80095d0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a42      	ldr	r2, [pc, #264]	; (80096cc <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d004      	beq.n	80095d0 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a41      	ldr	r2, [pc, #260]	; (80096d0 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d108      	bne.n	80095e2 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80095d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	68fa      	ldr	r2, [r7, #12]
 80095de:	4313      	orrs	r3, r2
 80095e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80095e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095ec:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	68fa      	ldr	r2, [r7, #12]
 80095f4:	4313      	orrs	r3, r2
 80095f6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	68fa      	ldr	r2, [r7, #12]
 80095fe:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	4a2f      	ldr	r2, [pc, #188]	; (80096c4 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d040      	beq.n	800968c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	4a2e      	ldr	r2, [pc, #184]	; (80096c8 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 8009610:	4293      	cmp	r3, r2
 8009612:	d03b      	beq.n	800968c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800961c:	d036      	beq.n	800968c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009626:	d031      	beq.n	800968c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a29      	ldr	r2, [pc, #164]	; (80096d4 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d02c      	beq.n	800968c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a28      	ldr	r2, [pc, #160]	; (80096d8 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d027      	beq.n	800968c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a26      	ldr	r2, [pc, #152]	; (80096dc <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d022      	beq.n	800968c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a25      	ldr	r2, [pc, #148]	; (80096e0 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d01d      	beq.n	800968c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a23      	ldr	r2, [pc, #140]	; (80096e4 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d018      	beq.n	800968c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a22      	ldr	r2, [pc, #136]	; (80096e8 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d013      	beq.n	800968c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a18      	ldr	r2, [pc, #96]	; (80096cc <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d00e      	beq.n	800968c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a17      	ldr	r2, [pc, #92]	; (80096d0 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d009      	beq.n	800968c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a1b      	ldr	r2, [pc, #108]	; (80096ec <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d004      	beq.n	800968c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a1a      	ldr	r2, [pc, #104]	; (80096f0 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d10c      	bne.n	80096a6 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800968c:	68bb      	ldr	r3, [r7, #8]
 800968e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009692:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	68ba      	ldr	r2, [r7, #8]
 800969a:	4313      	orrs	r3, r2
 800969c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	68ba      	ldr	r2, [r7, #8]
 80096a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2201      	movs	r2, #1
 80096aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3714      	adds	r7, #20
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr
 80096c4:	40012c00 	.word	0x40012c00
 80096c8:	50012c00 	.word	0x50012c00
 80096cc:	40013400 	.word	0x40013400
 80096d0:	50013400 	.word	0x50013400
 80096d4:	40000400 	.word	0x40000400
 80096d8:	50000400 	.word	0x50000400
 80096dc:	40000800 	.word	0x40000800
 80096e0:	50000800 	.word	0x50000800
 80096e4:	40000c00 	.word	0x40000c00
 80096e8:	50000c00 	.word	0x50000c00
 80096ec:	40014000 	.word	0x40014000
 80096f0:	50014000 	.word	0x50014000

080096f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096fc:	bf00      	nop
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009708:	b480      	push	{r7}
 800970a:	b083      	sub	sp, #12
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009710:	bf00      	nop
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800971c:	b480      	push	{r7}
 800971e:	b083      	sub	sp, #12
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009724:	bf00      	nop
 8009726:	370c      	adds	r7, #12
 8009728:	46bd      	mov	sp, r7
 800972a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972e:	4770      	bx	lr

08009730 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8009730:	b480      	push	{r7}
 8009732:	b083      	sub	sp, #12
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8009738:	bf00      	nop
 800973a:	370c      	adds	r7, #12
 800973c:	46bd      	mov	sp, r7
 800973e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009742:	4770      	bx	lr

08009744 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8009744:	b480      	push	{r7}
 8009746:	b083      	sub	sp, #12
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800974c:	bf00      	nop
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr

08009758 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8009760:	bf00      	nop
 8009762:	370c      	adds	r7, #12
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800976c:	b480      	push	{r7}
 800976e:	b083      	sub	sp, #12
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8009774:	bf00      	nop
 8009776:	370c      	adds	r7, #12
 8009778:	46bd      	mov	sp, r7
 800977a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977e:	4770      	bx	lr

08009780 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d101      	bne.n	8009792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	e042      	b.n	8009818 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009798:	2b00      	cmp	r3, #0
 800979a:	d106      	bne.n	80097aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f7f8 fa1d 	bl	8001be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2224      	movs	r2, #36	; 0x24
 80097ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	681a      	ldr	r2, [r3, #0]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f022 0201 	bic.w	r2, r2, #1
 80097c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80097c2:	6878      	ldr	r0, [r7, #4]
 80097c4:	f000 f82c 	bl	8009820 <UART_SetConfig>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d101      	bne.n	80097d2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	e022      	b.n	8009818 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d002      	beq.n	80097e0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	f000 f9c2 	bl	8009b64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	685a      	ldr	r2, [r3, #4]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80097ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	689a      	ldr	r2, [r3, #8]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80097fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f042 0201 	orr.w	r2, r2, #1
 800980e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f000 fa49 	bl	8009ca8 <UART_CheckIdleState>
 8009816:	4603      	mov	r3, r0
}
 8009818:	4618      	mov	r0, r3
 800981a:	3708      	adds	r7, #8
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009824:	b094      	sub	sp, #80	; 0x50
 8009826:	af00      	add	r7, sp, #0
 8009828:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800982a:	2300      	movs	r3, #0
 800982c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8009830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009832:	681a      	ldr	r2, [r3, #0]
 8009834:	4b7e      	ldr	r3, [pc, #504]	; (8009a30 <UART_SetConfig+0x210>)
 8009836:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983a:	689a      	ldr	r2, [r3, #8]
 800983c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800983e:	691b      	ldr	r3, [r3, #16]
 8009840:	431a      	orrs	r2, r3
 8009842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009844:	695b      	ldr	r3, [r3, #20]
 8009846:	431a      	orrs	r2, r3
 8009848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800984a:	69db      	ldr	r3, [r3, #28]
 800984c:	4313      	orrs	r3, r2
 800984e:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009850:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	4977      	ldr	r1, [pc, #476]	; (8009a34 <UART_SetConfig+0x214>)
 8009858:	4019      	ands	r1, r3
 800985a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009860:	430b      	orrs	r3, r1
 8009862:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800986e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009870:	68d9      	ldr	r1, [r3, #12]
 8009872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	ea40 0301 	orr.w	r3, r0, r1
 800987a:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800987c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800987e:	699b      	ldr	r3, [r3, #24]
 8009880:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	4b6a      	ldr	r3, [pc, #424]	; (8009a30 <UART_SetConfig+0x210>)
 8009888:	429a      	cmp	r2, r3
 800988a:	d009      	beq.n	80098a0 <UART_SetConfig+0x80>
 800988c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	4b69      	ldr	r3, [pc, #420]	; (8009a38 <UART_SetConfig+0x218>)
 8009892:	429a      	cmp	r2, r3
 8009894:	d004      	beq.n	80098a0 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009898:	6a1a      	ldr	r2, [r3, #32]
 800989a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800989c:	4313      	orrs	r3, r2
 800989e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80098a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	689b      	ldr	r3, [r3, #8]
 80098a6:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 80098aa:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80098ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098b4:	430b      	orrs	r3, r1
 80098b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80098b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098be:	f023 000f 	bic.w	r0, r3, #15
 80098c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80098c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	ea40 0301 	orr.w	r3, r0, r1
 80098ce:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80098d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098d2:	681a      	ldr	r2, [r3, #0]
 80098d4:	4b59      	ldr	r3, [pc, #356]	; (8009a3c <UART_SetConfig+0x21c>)
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d102      	bne.n	80098e0 <UART_SetConfig+0xc0>
 80098da:	2301      	movs	r3, #1
 80098dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80098de:	e029      	b.n	8009934 <UART_SetConfig+0x114>
 80098e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	4b56      	ldr	r3, [pc, #344]	; (8009a40 <UART_SetConfig+0x220>)
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d102      	bne.n	80098f0 <UART_SetConfig+0xd0>
 80098ea:	2302      	movs	r3, #2
 80098ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80098ee:	e021      	b.n	8009934 <UART_SetConfig+0x114>
 80098f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	4b53      	ldr	r3, [pc, #332]	; (8009a44 <UART_SetConfig+0x224>)
 80098f6:	429a      	cmp	r2, r3
 80098f8:	d102      	bne.n	8009900 <UART_SetConfig+0xe0>
 80098fa:	2304      	movs	r3, #4
 80098fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80098fe:	e019      	b.n	8009934 <UART_SetConfig+0x114>
 8009900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	4b50      	ldr	r3, [pc, #320]	; (8009a48 <UART_SetConfig+0x228>)
 8009906:	429a      	cmp	r2, r3
 8009908:	d102      	bne.n	8009910 <UART_SetConfig+0xf0>
 800990a:	2308      	movs	r3, #8
 800990c:	64bb      	str	r3, [r7, #72]	; 0x48
 800990e:	e011      	b.n	8009934 <UART_SetConfig+0x114>
 8009910:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	4b4d      	ldr	r3, [pc, #308]	; (8009a4c <UART_SetConfig+0x22c>)
 8009916:	429a      	cmp	r2, r3
 8009918:	d102      	bne.n	8009920 <UART_SetConfig+0x100>
 800991a:	2310      	movs	r3, #16
 800991c:	64bb      	str	r3, [r7, #72]	; 0x48
 800991e:	e009      	b.n	8009934 <UART_SetConfig+0x114>
 8009920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009922:	681a      	ldr	r2, [r3, #0]
 8009924:	4b42      	ldr	r3, [pc, #264]	; (8009a30 <UART_SetConfig+0x210>)
 8009926:	429a      	cmp	r2, r3
 8009928:	d102      	bne.n	8009930 <UART_SetConfig+0x110>
 800992a:	2320      	movs	r3, #32
 800992c:	64bb      	str	r3, [r7, #72]	; 0x48
 800992e:	e001      	b.n	8009934 <UART_SetConfig+0x114>
 8009930:	2300      	movs	r3, #0
 8009932:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009934:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	4b3d      	ldr	r3, [pc, #244]	; (8009a30 <UART_SetConfig+0x210>)
 800993a:	429a      	cmp	r2, r3
 800993c:	d005      	beq.n	800994a <UART_SetConfig+0x12a>
 800993e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	4b3d      	ldr	r3, [pc, #244]	; (8009a38 <UART_SetConfig+0x218>)
 8009944:	429a      	cmp	r2, r3
 8009946:	f040 8085 	bne.w	8009a54 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800994a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800994c:	2200      	movs	r2, #0
 800994e:	623b      	str	r3, [r7, #32]
 8009950:	627a      	str	r2, [r7, #36]	; 0x24
 8009952:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8009956:	f7fd f861 	bl	8006a1c <HAL_RCCEx_GetPeriphCLKFreq>
 800995a:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800995c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800995e:	2b00      	cmp	r3, #0
 8009960:	f000 80e8 	beq.w	8009b34 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009968:	4a39      	ldr	r2, [pc, #228]	; (8009a50 <UART_SetConfig+0x230>)
 800996a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800996e:	461a      	mov	r2, r3
 8009970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009972:	fbb3 f3f2 	udiv	r3, r3, r2
 8009976:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800997a:	685a      	ldr	r2, [r3, #4]
 800997c:	4613      	mov	r3, r2
 800997e:	005b      	lsls	r3, r3, #1
 8009980:	4413      	add	r3, r2
 8009982:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009984:	429a      	cmp	r2, r3
 8009986:	d305      	bcc.n	8009994 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800998a:	685b      	ldr	r3, [r3, #4]
 800998c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800998e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009990:	429a      	cmp	r2, r3
 8009992:	d903      	bls.n	800999c <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 8009994:	2301      	movs	r3, #1
 8009996:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800999a:	e048      	b.n	8009a2e <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800999c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800999e:	2200      	movs	r2, #0
 80099a0:	61bb      	str	r3, [r7, #24]
 80099a2:	61fa      	str	r2, [r7, #28]
 80099a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099a8:	4a29      	ldr	r2, [pc, #164]	; (8009a50 <UART_SetConfig+0x230>)
 80099aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	2200      	movs	r2, #0
 80099b2:	613b      	str	r3, [r7, #16]
 80099b4:	617a      	str	r2, [r7, #20]
 80099b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80099ba:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80099be:	f7f6 fc59 	bl	8000274 <__aeabi_uldivmod>
 80099c2:	4602      	mov	r2, r0
 80099c4:	460b      	mov	r3, r1
 80099c6:	4610      	mov	r0, r2
 80099c8:	4619      	mov	r1, r3
 80099ca:	f04f 0200 	mov.w	r2, #0
 80099ce:	f04f 0300 	mov.w	r3, #0
 80099d2:	020b      	lsls	r3, r1, #8
 80099d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80099d8:	0202      	lsls	r2, r0, #8
 80099da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80099dc:	6849      	ldr	r1, [r1, #4]
 80099de:	0849      	lsrs	r1, r1, #1
 80099e0:	2000      	movs	r0, #0
 80099e2:	460c      	mov	r4, r1
 80099e4:	4605      	mov	r5, r0
 80099e6:	eb12 0804 	adds.w	r8, r2, r4
 80099ea:	eb43 0905 	adc.w	r9, r3, r5
 80099ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	60bb      	str	r3, [r7, #8]
 80099f6:	60fa      	str	r2, [r7, #12]
 80099f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80099fc:	4640      	mov	r0, r8
 80099fe:	4649      	mov	r1, r9
 8009a00:	f7f6 fc38 	bl	8000274 <__aeabi_uldivmod>
 8009a04:	4602      	mov	r2, r0
 8009a06:	460b      	mov	r3, r1
 8009a08:	4613      	mov	r3, r2
 8009a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a12:	d308      	bcc.n	8009a26 <UART_SetConfig+0x206>
 8009a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a1a:	d204      	bcs.n	8009a26 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 8009a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009a22:	60da      	str	r2, [r3, #12]
 8009a24:	e003      	b.n	8009a2e <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 8009a26:	2301      	movs	r3, #1
 8009a28:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 8009a2c:	e082      	b.n	8009b34 <UART_SetConfig+0x314>
 8009a2e:	e081      	b.n	8009b34 <UART_SetConfig+0x314>
 8009a30:	46002400 	.word	0x46002400
 8009a34:	cfff69f3 	.word	0xcfff69f3
 8009a38:	56002400 	.word	0x56002400
 8009a3c:	40013800 	.word	0x40013800
 8009a40:	40004400 	.word	0x40004400
 8009a44:	40004800 	.word	0x40004800
 8009a48:	40004c00 	.word	0x40004c00
 8009a4c:	40005000 	.word	0x40005000
 8009a50:	0800abe0 	.word	0x0800abe0
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a56:	69db      	ldr	r3, [r3, #28]
 8009a58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a5c:	d13c      	bne.n	8009ad8 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a60:	2200      	movs	r2, #0
 8009a62:	603b      	str	r3, [r7, #0]
 8009a64:	607a      	str	r2, [r7, #4]
 8009a66:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009a6a:	f7fc ffd7 	bl	8006a1c <HAL_RCCEx_GetPeriphCLKFreq>
 8009a6e:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009a70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d05e      	beq.n	8009b34 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a7a:	4a39      	ldr	r2, [pc, #228]	; (8009b60 <UART_SetConfig+0x340>)
 8009a7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a80:	461a      	mov	r2, r3
 8009a82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009a84:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a88:	005a      	lsls	r2, r3, #1
 8009a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	085b      	lsrs	r3, r3, #1
 8009a90:	441a      	add	r2, r3
 8009a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a9e:	2b0f      	cmp	r3, #15
 8009aa0:	d916      	bls.n	8009ad0 <UART_SetConfig+0x2b0>
 8009aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009aa8:	d212      	bcs.n	8009ad0 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aac:	b29b      	uxth	r3, r3
 8009aae:	f023 030f 	bic.w	r3, r3, #15
 8009ab2:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ab4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ab6:	085b      	lsrs	r3, r3, #1
 8009ab8:	b29b      	uxth	r3, r3
 8009aba:	f003 0307 	and.w	r3, r3, #7
 8009abe:	b29a      	uxth	r2, r3
 8009ac0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009ac2:	4313      	orrs	r3, r2
 8009ac4:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 8009ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8009acc:	60da      	str	r2, [r3, #12]
 8009ace:	e031      	b.n	8009b34 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8009ad6:	e02d      	b.n	8009b34 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 8009ad8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009ada:	2200      	movs	r2, #0
 8009adc:	469a      	mov	sl, r3
 8009ade:	4693      	mov	fp, r2
 8009ae0:	4650      	mov	r0, sl
 8009ae2:	4659      	mov	r1, fp
 8009ae4:	f7fc ff9a 	bl	8006a1c <HAL_RCCEx_GetPeriphCLKFreq>
 8009ae8:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 8009aea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d021      	beq.n	8009b34 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af4:	4a1a      	ldr	r2, [pc, #104]	; (8009b60 <UART_SetConfig+0x340>)
 8009af6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009afa:	461a      	mov	r2, r3
 8009afc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009afe:	fbb3 f2f2 	udiv	r2, r3, r2
 8009b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b04:	685b      	ldr	r3, [r3, #4]
 8009b06:	085b      	lsrs	r3, r3, #1
 8009b08:	441a      	add	r2, r3
 8009b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b0c:	685b      	ldr	r3, [r3, #4]
 8009b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009b12:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b16:	2b0f      	cmp	r3, #15
 8009b18:	d909      	bls.n	8009b2e <UART_SetConfig+0x30e>
 8009b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009b20:	d205      	bcs.n	8009b2e <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b24:	b29a      	uxth	r2, r3
 8009b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	60da      	str	r2, [r3, #12]
 8009b2c:	e002      	b.n	8009b34 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b36:	2201      	movs	r2, #1
 8009b38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b46:	2200      	movs	r2, #0
 8009b48:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8009b50:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8009b54:	4618      	mov	r0, r3
 8009b56:	3750      	adds	r7, #80	; 0x50
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009b5e:	bf00      	nop
 8009b60:	0800abe0 	.word	0x0800abe0

08009b64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b70:	f003 0301 	and.w	r3, r3, #1
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d00a      	beq.n	8009b8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	430a      	orrs	r2, r1
 8009b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b92:	f003 0302 	and.w	r3, r3, #2
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d00a      	beq.n	8009bb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	430a      	orrs	r2, r1
 8009bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bb4:	f003 0304 	and.w	r3, r3, #4
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d00a      	beq.n	8009bd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	430a      	orrs	r2, r1
 8009bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd6:	f003 0308 	and.w	r3, r3, #8
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d00a      	beq.n	8009bf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	430a      	orrs	r2, r1
 8009bf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bf8:	f003 0310 	and.w	r3, r3, #16
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d00a      	beq.n	8009c16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	689b      	ldr	r3, [r3, #8]
 8009c06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	430a      	orrs	r2, r1
 8009c14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c1a:	f003 0320 	and.w	r3, r3, #32
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d00a      	beq.n	8009c38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	430a      	orrs	r2, r1
 8009c36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d01a      	beq.n	8009c7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	430a      	orrs	r2, r1
 8009c58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c62:	d10a      	bne.n	8009c7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	430a      	orrs	r2, r1
 8009c78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d00a      	beq.n	8009c9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	430a      	orrs	r2, r1
 8009c9a:	605a      	str	r2, [r3, #4]
  }
}
 8009c9c:	bf00      	nop
 8009c9e:	370c      	adds	r7, #12
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr

08009ca8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b086      	sub	sp, #24
 8009cac:	af02      	add	r7, sp, #8
 8009cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009cb8:	f7f8 f9e6 	bl	8002088 <HAL_GetTick>
 8009cbc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	f003 0308 	and.w	r3, r3, #8
 8009cc8:	2b08      	cmp	r3, #8
 8009cca:	d10e      	bne.n	8009cea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009ccc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009cd0:	9300      	str	r3, [sp, #0]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 f82f 	bl	8009d3e <UART_WaitOnFlagUntilTimeout>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d001      	beq.n	8009cea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ce6:	2303      	movs	r3, #3
 8009ce8:	e025      	b.n	8009d36 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f003 0304 	and.w	r3, r3, #4
 8009cf4:	2b04      	cmp	r3, #4
 8009cf6:	d10e      	bne.n	8009d16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009cf8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009cfc:	9300      	str	r3, [sp, #0]
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	2200      	movs	r2, #0
 8009d02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 f819 	bl	8009d3e <UART_WaitOnFlagUntilTimeout>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d001      	beq.n	8009d16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009d12:	2303      	movs	r3, #3
 8009d14:	e00f      	b.n	8009d36 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2220      	movs	r2, #32
 8009d1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	2220      	movs	r2, #32
 8009d22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	2200      	movs	r2, #0
 8009d2a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	2200      	movs	r2, #0
 8009d30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b09c      	sub	sp, #112	; 0x70
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	60f8      	str	r0, [r7, #12]
 8009d46:	60b9      	str	r1, [r7, #8]
 8009d48:	603b      	str	r3, [r7, #0]
 8009d4a:	4613      	mov	r3, r2
 8009d4c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d4e:	e0a9      	b.n	8009ea4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d56:	f000 80a5 	beq.w	8009ea4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d5a:	f7f8 f995 	bl	8002088 <HAL_GetTick>
 8009d5e:	4602      	mov	r2, r0
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	1ad3      	subs	r3, r2, r3
 8009d64:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d302      	bcc.n	8009d70 <UART_WaitOnFlagUntilTimeout+0x32>
 8009d6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d140      	bne.n	8009df2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d78:	e853 3f00 	ldrex	r3, [r3]
 8009d7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009d7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d80:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009d84:	667b      	str	r3, [r7, #100]	; 0x64
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009d8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009d90:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d92:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009d94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009d96:	e841 2300 	strex	r3, r2, [r1]
 8009d9a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009d9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d1e6      	bne.n	8009d70 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	3308      	adds	r3, #8
 8009da8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009dac:	e853 3f00 	ldrex	r3, [r3]
 8009db0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009db4:	f023 0301 	bic.w	r3, r3, #1
 8009db8:	663b      	str	r3, [r7, #96]	; 0x60
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	3308      	adds	r3, #8
 8009dc0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009dc2:	64ba      	str	r2, [r7, #72]	; 0x48
 8009dc4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dc6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009dc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009dca:	e841 2300 	strex	r3, r2, [r1]
 8009dce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d1e5      	bne.n	8009da2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	2220      	movs	r2, #32
 8009dda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2220      	movs	r2, #32
 8009de2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	2200      	movs	r2, #0
 8009dea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009dee:	2303      	movs	r3, #3
 8009df0:	e069      	b.n	8009ec6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	f003 0304 	and.w	r3, r3, #4
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d051      	beq.n	8009ea4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	69db      	ldr	r3, [r3, #28]
 8009e06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e0e:	d149      	bne.n	8009ea4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009e18:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e22:	e853 3f00 	ldrex	r3, [r3]
 8009e26:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009e2e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	461a      	mov	r2, r3
 8009e36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e38:	637b      	str	r3, [r7, #52]	; 0x34
 8009e3a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009e3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009e40:	e841 2300 	strex	r3, r2, [r1]
 8009e44:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d1e6      	bne.n	8009e1a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	3308      	adds	r3, #8
 8009e52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e54:	697b      	ldr	r3, [r7, #20]
 8009e56:	e853 3f00 	ldrex	r3, [r3]
 8009e5a:	613b      	str	r3, [r7, #16]
   return(result);
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	f023 0301 	bic.w	r3, r3, #1
 8009e62:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	3308      	adds	r3, #8
 8009e6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009e6c:	623a      	str	r2, [r7, #32]
 8009e6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e70:	69f9      	ldr	r1, [r7, #28]
 8009e72:	6a3a      	ldr	r2, [r7, #32]
 8009e74:	e841 2300 	strex	r3, r2, [r1]
 8009e78:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e7a:	69bb      	ldr	r3, [r7, #24]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d1e5      	bne.n	8009e4c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	2220      	movs	r2, #32
 8009e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2220      	movs	r2, #32
 8009e8c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	2220      	movs	r2, #32
 8009e94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009ea0:	2303      	movs	r3, #3
 8009ea2:	e010      	b.n	8009ec6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	69da      	ldr	r2, [r3, #28]
 8009eaa:	68bb      	ldr	r3, [r7, #8]
 8009eac:	4013      	ands	r3, r2
 8009eae:	68ba      	ldr	r2, [r7, #8]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	bf0c      	ite	eq
 8009eb4:	2301      	moveq	r3, #1
 8009eb6:	2300      	movne	r3, #0
 8009eb8:	b2db      	uxtb	r3, r3
 8009eba:	461a      	mov	r2, r3
 8009ebc:	79fb      	ldrb	r3, [r7, #7]
 8009ebe:	429a      	cmp	r2, r3
 8009ec0:	f43f af46 	beq.w	8009d50 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3770      	adds	r7, #112	; 0x70
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009ece:	b480      	push	{r7}
 8009ed0:	b085      	sub	sp, #20
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d101      	bne.n	8009ee4 <HAL_UARTEx_DisableFifoMode+0x16>
 8009ee0:	2302      	movs	r3, #2
 8009ee2:	e027      	b.n	8009f34 <HAL_UARTEx_DisableFifoMode+0x66>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2224      	movs	r2, #36	; 0x24
 8009ef0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f022 0201 	bic.w	r2, r2, #1
 8009f0a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009f12:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	2200      	movs	r2, #0
 8009f18:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	68fa      	ldr	r2, [r7, #12]
 8009f20:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2220      	movs	r2, #32
 8009f26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009f32:	2300      	movs	r3, #0
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3714      	adds	r7, #20
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d101      	bne.n	8009f58 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009f54:	2302      	movs	r3, #2
 8009f56:	e02d      	b.n	8009fb4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	2224      	movs	r2, #36	; 0x24
 8009f64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f022 0201 	bic.w	r2, r2, #1
 8009f7e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	683a      	ldr	r2, [r7, #0]
 8009f90:	430a      	orrs	r2, r1
 8009f92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 f84f 	bl	800a038 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	68fa      	ldr	r2, [r7, #12]
 8009fa0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2220      	movs	r2, #32
 8009fa6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2200      	movs	r2, #0
 8009fae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009fb2:	2300      	movs	r3, #0
}
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	3710      	adds	r7, #16
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	bd80      	pop	{r7, pc}

08009fbc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b084      	sub	sp, #16
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d101      	bne.n	8009fd4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009fd0:	2302      	movs	r3, #2
 8009fd2:	e02d      	b.n	800a030 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2224      	movs	r2, #36	; 0x24
 8009fe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	681a      	ldr	r2, [r3, #0]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f022 0201 	bic.w	r2, r2, #1
 8009ffa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	683a      	ldr	r2, [r7, #0]
 800a00c:	430a      	orrs	r2, r1
 800a00e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 f811 	bl	800a038 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	68fa      	ldr	r2, [r7, #12]
 800a01c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2220      	movs	r2, #32
 800a022:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2200      	movs	r2, #0
 800a02a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a02e:	2300      	movs	r3, #0
}
 800a030:	4618      	mov	r0, r3
 800a032:	3710      	adds	r7, #16
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a038:	b480      	push	{r7}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a044:	2b00      	cmp	r3, #0
 800a046:	d108      	bne.n	800a05a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2201      	movs	r2, #1
 800a04c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2201      	movs	r2, #1
 800a054:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a058:	e031      	b.n	800a0be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a05a:	2308      	movs	r3, #8
 800a05c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a05e:	2308      	movs	r3, #8
 800a060:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	689b      	ldr	r3, [r3, #8]
 800a068:	0e5b      	lsrs	r3, r3, #25
 800a06a:	b2db      	uxtb	r3, r3
 800a06c:	f003 0307 	and.w	r3, r3, #7
 800a070:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	0f5b      	lsrs	r3, r3, #29
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	f003 0307 	and.w	r3, r3, #7
 800a080:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a082:	7bbb      	ldrb	r3, [r7, #14]
 800a084:	7b3a      	ldrb	r2, [r7, #12]
 800a086:	4911      	ldr	r1, [pc, #68]	; (800a0cc <UARTEx_SetNbDataToProcess+0x94>)
 800a088:	5c8a      	ldrb	r2, [r1, r2]
 800a08a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a08e:	7b3a      	ldrb	r2, [r7, #12]
 800a090:	490f      	ldr	r1, [pc, #60]	; (800a0d0 <UARTEx_SetNbDataToProcess+0x98>)
 800a092:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a094:	fb93 f3f2 	sdiv	r3, r3, r2
 800a098:	b29a      	uxth	r2, r3
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a0a0:	7bfb      	ldrb	r3, [r7, #15]
 800a0a2:	7b7a      	ldrb	r2, [r7, #13]
 800a0a4:	4909      	ldr	r1, [pc, #36]	; (800a0cc <UARTEx_SetNbDataToProcess+0x94>)
 800a0a6:	5c8a      	ldrb	r2, [r1, r2]
 800a0a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a0ac:	7b7a      	ldrb	r2, [r7, #13]
 800a0ae:	4908      	ldr	r1, [pc, #32]	; (800a0d0 <UARTEx_SetNbDataToProcess+0x98>)
 800a0b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a0b2:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0b6:	b29a      	uxth	r2, r3
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a0be:	bf00      	nop
 800a0c0:	3714      	adds	r7, #20
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c8:	4770      	bx	lr
 800a0ca:	bf00      	nop
 800a0cc:	0800abf8 	.word	0x0800abf8
 800a0d0:	0800ac00 	.word	0x0800ac00

0800a0d4 <LL_DLYB_SetDelay>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: the Delay value is set.
  *          - ERROR: the Delay value is not set.
  */
void LL_DLYB_SetDelay(DLYB_TypeDef *DLYBx, LL_DLYB_CfgTypeDef  *pdlyb_cfg)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
  /* Check the DelayBlock instance */
  assert_param(IS_DLYB_ALL_INSTANCE(DLYBx));

  /* Enable the length sampling */
  SET_BIT(DLYBx->CR, DLYB_CR_SEN);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f043 0202 	orr.w	r2, r3, #2
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	601a      	str	r2, [r3, #0]

  /* Update the UNIT and SEL field */
  DLYBx->CFGR = (pdlyb_cfg->PhaseSel) | ((pdlyb_cfg->Units) << DLYB_CFGR_UNIT_Pos);
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	685a      	ldr	r2, [r3, #4]
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	021b      	lsls	r3, r3, #8
 800a0f4:	431a      	orrs	r2, r3
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	605a      	str	r2, [r3, #4]

  /* Disable the length sampling */
  CLEAR_BIT(DLYBx->CR, DLYB_CR_SEN);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f023 0202 	bic.w	r2, r3, #2
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	601a      	str	r2, [r3, #0]
}
 800a106:	bf00      	nop
 800a108:	370c      	adds	r7, #12
 800a10a:	46bd      	mov	sp, r7
 800a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a110:	4770      	bx	lr

0800a112 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800a112:	b480      	push	{r7}
 800a114:	b08b      	sub	sp, #44	; 0x2c
 800a116:	af00      	add	r7, sp, #0
 800a118:	60f8      	str	r0, [r7, #12]
 800a11a:	60b9      	str	r1, [r7, #8]
 800a11c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681a      	ldr	r2, [r3, #0]
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a126:	697b      	ldr	r3, [r7, #20]
 800a128:	fa93 f3a3 	rbit	r3, r3
 800a12c:	613b      	str	r3, [r7, #16]
  return result;
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a132:	69bb      	ldr	r3, [r7, #24]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d101      	bne.n	800a13c <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800a138:	2320      	movs	r3, #32
 800a13a:	e003      	b.n	800a144 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800a13c:	69bb      	ldr	r3, [r7, #24]
 800a13e:	fab3 f383 	clz	r3, r3
 800a142:	b2db      	uxtb	r3, r3
 800a144:	005b      	lsls	r3, r3, #1
 800a146:	2103      	movs	r1, #3
 800a148:	fa01 f303 	lsl.w	r3, r1, r3
 800a14c:	43db      	mvns	r3, r3
 800a14e:	401a      	ands	r2, r3
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a154:	6a3b      	ldr	r3, [r7, #32]
 800a156:	fa93 f3a3 	rbit	r3, r3
 800a15a:	61fb      	str	r3, [r7, #28]
  return result;
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a162:	2b00      	cmp	r3, #0
 800a164:	d101      	bne.n	800a16a <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800a166:	2320      	movs	r3, #32
 800a168:	e003      	b.n	800a172 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800a16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16c:	fab3 f383 	clz	r3, r3
 800a170:	b2db      	uxtb	r3, r3
 800a172:	005b      	lsls	r3, r3, #1
 800a174:	6879      	ldr	r1, [r7, #4]
 800a176:	fa01 f303 	lsl.w	r3, r1, r3
 800a17a:	431a      	orrs	r2, r3
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	601a      	str	r2, [r3, #0]
}
 800a180:	bf00      	nop
 800a182:	372c      	adds	r7, #44	; 0x2c
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b085      	sub	sp, #20
 800a190:	af00      	add	r7, sp, #0
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	60b9      	str	r1, [r7, #8]
 800a196:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	685a      	ldr	r2, [r3, #4]
 800a19c:	68bb      	ldr	r3, [r7, #8]
 800a19e:	43db      	mvns	r3, r3
 800a1a0:	401a      	ands	r2, r3
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	6879      	ldr	r1, [r7, #4]
 800a1a6:	fb01 f303 	mul.w	r3, r1, r3
 800a1aa:	431a      	orrs	r2, r3
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	605a      	str	r2, [r3, #4]
}
 800a1b0:	bf00      	nop
 800a1b2:	3714      	adds	r7, #20
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr

0800a1bc <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b08b      	sub	sp, #44	; 0x2c
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	60f8      	str	r0, [r7, #12]
 800a1c4:	60b9      	str	r1, [r7, #8]
 800a1c6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	689a      	ldr	r2, [r3, #8]
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	fa93 f3a3 	rbit	r3, r3
 800a1d6:	613b      	str	r3, [r7, #16]
  return result;
 800a1d8:	693b      	ldr	r3, [r7, #16]
 800a1da:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a1dc:	69bb      	ldr	r3, [r7, #24]
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d101      	bne.n	800a1e6 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800a1e2:	2320      	movs	r3, #32
 800a1e4:	e003      	b.n	800a1ee <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	fab3 f383 	clz	r3, r3
 800a1ec:	b2db      	uxtb	r3, r3
 800a1ee:	005b      	lsls	r3, r3, #1
 800a1f0:	2103      	movs	r1, #3
 800a1f2:	fa01 f303 	lsl.w	r3, r1, r3
 800a1f6:	43db      	mvns	r3, r3
 800a1f8:	401a      	ands	r2, r3
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a1fe:	6a3b      	ldr	r3, [r7, #32]
 800a200:	fa93 f3a3 	rbit	r3, r3
 800a204:	61fb      	str	r3, [r7, #28]
  return result;
 800a206:	69fb      	ldr	r3, [r7, #28]
 800a208:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d101      	bne.n	800a214 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800a210:	2320      	movs	r3, #32
 800a212:	e003      	b.n	800a21c <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800a214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a216:	fab3 f383 	clz	r3, r3
 800a21a:	b2db      	uxtb	r3, r3
 800a21c:	005b      	lsls	r3, r3, #1
 800a21e:	6879      	ldr	r1, [r7, #4]
 800a220:	fa01 f303 	lsl.w	r3, r1, r3
 800a224:	431a      	orrs	r2, r3
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800a22a:	bf00      	nop
 800a22c:	372c      	adds	r7, #44	; 0x2c
 800a22e:	46bd      	mov	sp, r7
 800a230:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a234:	4770      	bx	lr

0800a236 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800a236:	b480      	push	{r7}
 800a238:	b08b      	sub	sp, #44	; 0x2c
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	60f8      	str	r0, [r7, #12]
 800a23e:	60b9      	str	r1, [r7, #8]
 800a240:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	68da      	ldr	r2, [r3, #12]
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	fa93 f3a3 	rbit	r3, r3
 800a250:	613b      	str	r3, [r7, #16]
  return result;
 800a252:	693b      	ldr	r3, [r7, #16]
 800a254:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d101      	bne.n	800a260 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800a25c:	2320      	movs	r3, #32
 800a25e:	e003      	b.n	800a268 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800a260:	69bb      	ldr	r3, [r7, #24]
 800a262:	fab3 f383 	clz	r3, r3
 800a266:	b2db      	uxtb	r3, r3
 800a268:	005b      	lsls	r3, r3, #1
 800a26a:	2103      	movs	r1, #3
 800a26c:	fa01 f303 	lsl.w	r3, r1, r3
 800a270:	43db      	mvns	r3, r3
 800a272:	401a      	ands	r2, r3
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a278:	6a3b      	ldr	r3, [r7, #32]
 800a27a:	fa93 f3a3 	rbit	r3, r3
 800a27e:	61fb      	str	r3, [r7, #28]
  return result;
 800a280:	69fb      	ldr	r3, [r7, #28]
 800a282:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a286:	2b00      	cmp	r3, #0
 800a288:	d101      	bne.n	800a28e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800a28a:	2320      	movs	r3, #32
 800a28c:	e003      	b.n	800a296 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800a28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a290:	fab3 f383 	clz	r3, r3
 800a294:	b2db      	uxtb	r3, r3
 800a296:	005b      	lsls	r3, r3, #1
 800a298:	6879      	ldr	r1, [r7, #4]
 800a29a:	fa01 f303 	lsl.w	r3, r1, r3
 800a29e:	431a      	orrs	r2, r3
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	60da      	str	r2, [r3, #12]
}
 800a2a4:	bf00      	nop
 800a2a6:	372c      	adds	r7, #44	; 0x2c
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ae:	4770      	bx	lr

0800a2b0 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b08b      	sub	sp, #44	; 0x2c
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	6a1a      	ldr	r2, [r3, #32]
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2c4:	697b      	ldr	r3, [r7, #20]
 800a2c6:	fa93 f3a3 	rbit	r3, r3
 800a2ca:	613b      	str	r3, [r7, #16]
  return result;
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a2d0:	69bb      	ldr	r3, [r7, #24]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d101      	bne.n	800a2da <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800a2d6:	2320      	movs	r3, #32
 800a2d8:	e003      	b.n	800a2e2 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800a2da:	69bb      	ldr	r3, [r7, #24]
 800a2dc:	fab3 f383 	clz	r3, r3
 800a2e0:	b2db      	uxtb	r3, r3
 800a2e2:	009b      	lsls	r3, r3, #2
 800a2e4:	210f      	movs	r1, #15
 800a2e6:	fa01 f303 	lsl.w	r3, r1, r3
 800a2ea:	43db      	mvns	r3, r3
 800a2ec:	401a      	ands	r2, r3
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a2f2:	6a3b      	ldr	r3, [r7, #32]
 800a2f4:	fa93 f3a3 	rbit	r3, r3
 800a2f8:	61fb      	str	r3, [r7, #28]
  return result;
 800a2fa:	69fb      	ldr	r3, [r7, #28]
 800a2fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a300:	2b00      	cmp	r3, #0
 800a302:	d101      	bne.n	800a308 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800a304:	2320      	movs	r3, #32
 800a306:	e003      	b.n	800a310 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800a308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30a:	fab3 f383 	clz	r3, r3
 800a30e:	b2db      	uxtb	r3, r3
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	6879      	ldr	r1, [r7, #4]
 800a314:	fa01 f303 	lsl.w	r3, r1, r3
 800a318:	431a      	orrs	r2, r3
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800a31e:	bf00      	nop
 800a320:	372c      	adds	r7, #44	; 0x2c
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr

0800a32a <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a32a:	b480      	push	{r7}
 800a32c:	b08b      	sub	sp, #44	; 0x2c
 800a32e:	af00      	add	r7, sp, #0
 800a330:	60f8      	str	r0, [r7, #12]
 800a332:	60b9      	str	r1, [r7, #8]
 800a334:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	0a1b      	lsrs	r3, r3, #8
 800a33e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	fa93 f3a3 	rbit	r3, r3
 800a346:	613b      	str	r3, [r7, #16]
  return result;
 800a348:	693b      	ldr	r3, [r7, #16]
 800a34a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a34c:	69bb      	ldr	r3, [r7, #24]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d101      	bne.n	800a356 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800a352:	2320      	movs	r3, #32
 800a354:	e003      	b.n	800a35e <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800a356:	69bb      	ldr	r3, [r7, #24]
 800a358:	fab3 f383 	clz	r3, r3
 800a35c:	b2db      	uxtb	r3, r3
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	210f      	movs	r1, #15
 800a362:	fa01 f303 	lsl.w	r3, r1, r3
 800a366:	43db      	mvns	r3, r3
 800a368:	401a      	ands	r2, r3
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	0a1b      	lsrs	r3, r3, #8
 800a36e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a370:	6a3b      	ldr	r3, [r7, #32]
 800a372:	fa93 f3a3 	rbit	r3, r3
 800a376:	61fb      	str	r3, [r7, #28]
  return result;
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a37c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d101      	bne.n	800a386 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800a382:	2320      	movs	r3, #32
 800a384:	e003      	b.n	800a38e <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800a386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a388:	fab3 f383 	clz	r3, r3
 800a38c:	b2db      	uxtb	r3, r3
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	6879      	ldr	r1, [r7, #4]
 800a392:	fa01 f303 	lsl.w	r3, r1, r3
 800a396:	431a      	orrs	r2, r3
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800a39c:	bf00      	nop
 800a39e:	372c      	adds	r7, #44	; 0x2c
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a6:	4770      	bx	lr

0800a3a8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b08a      	sub	sp, #40	; 0x28
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3b8:	69bb      	ldr	r3, [r7, #24]
 800a3ba:	fa93 f3a3 	rbit	r3, r3
 800a3be:	617b      	str	r3, [r7, #20]
  return result;
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 800a3c4:	69fb      	ldr	r3, [r7, #28]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d101      	bne.n	800a3ce <LL_GPIO_Init+0x26>
    return 32U;
 800a3ca:	2320      	movs	r3, #32
 800a3cc:	e003      	b.n	800a3d6 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800a3ce:	69fb      	ldr	r3, [r7, #28]
 800a3d0:	fab3 f383 	clz	r3, r3
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800a3d8:	e050      	b.n	800a47c <LL_GPIO_Init+0xd4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	681a      	ldr	r2, [r3, #0]
 800a3de:	2101      	movs	r1, #1
 800a3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e2:	fa01 f303 	lsl.w	r3, r1, r3
 800a3e6:	4013      	ands	r3, r2
 800a3e8:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 800a3ea:	6a3b      	ldr	r3, [r7, #32]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d042      	beq.n	800a476 <LL_GPIO_Init+0xce>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	685b      	ldr	r3, [r3, #4]
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	6a39      	ldr	r1, [r7, #32]
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f7ff fe8a 	bl	800a112 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	2b01      	cmp	r3, #1
 800a404:	d003      	beq.n	800a40e <LL_GPIO_Init+0x66>
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	2b02      	cmp	r3, #2
 800a40c:	d106      	bne.n	800a41c <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	689b      	ldr	r3, [r3, #8]
 800a412:	461a      	mov	r2, r3
 800a414:	6a39      	ldr	r1, [r7, #32]
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f7ff fed0 	bl	800a1bc <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	691b      	ldr	r3, [r3, #16]
 800a420:	461a      	mov	r2, r3
 800a422:	6a39      	ldr	r1, [r7, #32]
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f7ff ff06 	bl	800a236 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	2b02      	cmp	r3, #2
 800a430:	d121      	bne.n	800a476 <LL_GPIO_Init+0xce>
 800a432:	6a3b      	ldr	r3, [r7, #32]
 800a434:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	fa93 f3a3 	rbit	r3, r3
 800a43c:	60bb      	str	r3, [r7, #8]
  return result;
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	2b00      	cmp	r3, #0
 800a446:	d101      	bne.n	800a44c <LL_GPIO_Init+0xa4>
    return 32U;
 800a448:	2320      	movs	r3, #32
 800a44a:	e003      	b.n	800a454 <LL_GPIO_Init+0xac>
  return __builtin_clz(value);
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	fab3 f383 	clz	r3, r3
 800a452:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 800a454:	2b07      	cmp	r3, #7
 800a456:	d807      	bhi.n	800a468 <LL_GPIO_Init+0xc0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a458:	683b      	ldr	r3, [r7, #0]
 800a45a:	695b      	ldr	r3, [r3, #20]
 800a45c:	461a      	mov	r2, r3
 800a45e:	6a39      	ldr	r1, [r7, #32]
 800a460:	6878      	ldr	r0, [r7, #4]
 800a462:	f7ff ff25 	bl	800a2b0 <LL_GPIO_SetAFPin_0_7>
 800a466:	e006      	b.n	800a476 <LL_GPIO_Init+0xce>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	695b      	ldr	r3, [r3, #20]
 800a46c:	461a      	mov	r2, r3
 800a46e:	6a39      	ldr	r1, [r7, #32]
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f7ff ff5a 	bl	800a32a <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800a476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a478:	3301      	adds	r3, #1
 800a47a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 800a47c:	683b      	ldr	r3, [r7, #0]
 800a47e:	681a      	ldr	r2, [r3, #0]
 800a480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a482:	fa22 f303 	lsr.w	r3, r2, r3
 800a486:	2b00      	cmp	r3, #0
 800a488:	d1a7      	bne.n	800a3da <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	685b      	ldr	r3, [r3, #4]
 800a48e:	2b01      	cmp	r3, #1
 800a490:	d003      	beq.n	800a49a <LL_GPIO_Init+0xf2>
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	2b02      	cmp	r3, #2
 800a498:	d107      	bne.n	800a4aa <LL_GPIO_Init+0x102>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	6819      	ldr	r1, [r3, #0]
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	68db      	ldr	r3, [r3, #12]
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	6878      	ldr	r0, [r7, #4]
 800a4a6:	f7ff fe71 	bl	800a18c <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800a4aa:	2300      	movs	r3, #0
}
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	3728      	adds	r7, #40	; 0x28
 800a4b0:	46bd      	mov	sp, r7
 800a4b2:	bd80      	pop	{r7, pc}

0800a4b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a4b4:	b084      	sub	sp, #16
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b084      	sub	sp, #16
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
 800a4be:	f107 001c 	add.w	r0, r7, #28
 800a4c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	68db      	ldr	r3, [r3, #12]
 800a4ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800a4d2:	6878      	ldr	r0, [r7, #4]
 800a4d4:	f000 fa72 	bl	800a9bc <USB_CoreReset>
 800a4d8:	4603      	mov	r3, r0
 800a4da:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800a4dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d106      	bne.n	800a4f0 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	639a      	str	r2, [r3, #56]	; 0x38
 800a4ee:	e005      	b.n	800a4fc <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

  return ret;
 800a4fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3710      	adds	r7, #16
 800a502:	46bd      	mov	sp, r7
 800a504:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a508:	b004      	add	sp, #16
 800a50a:	4770      	bx	lr

0800a50c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b083      	sub	sp, #12
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	f023 0201 	bic.w	r2, r3, #1
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a520:	2300      	movs	r3, #0
}
 800a522:	4618      	mov	r0, r3
 800a524:	370c      	adds	r7, #12
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr

0800a52e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a52e:	b580      	push	{r7, lr}
 800a530:	b084      	sub	sp, #16
 800a532:	af00      	add	r7, sp, #0
 800a534:	6078      	str	r0, [r7, #4]
 800a536:	460b      	mov	r3, r1
 800a538:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a53a:	2300      	movs	r3, #0
 800a53c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	68db      	ldr	r3, [r3, #12]
 800a542:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a54a:	78fb      	ldrb	r3, [r7, #3]
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	d115      	bne.n	800a57c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	68db      	ldr	r3, [r3, #12]
 800a554:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a55c:	2001      	movs	r0, #1
 800a55e:	f7f7 fd9f 	bl	80020a0 <HAL_Delay>
      ms++;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	3301      	adds	r3, #1
 800a566:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f000 fa19 	bl	800a9a0 <USB_GetMode>
 800a56e:	4603      	mov	r3, r0
 800a570:	2b01      	cmp	r3, #1
 800a572:	d01e      	beq.n	800a5b2 <USB_SetCurrentMode+0x84>
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2b31      	cmp	r3, #49	; 0x31
 800a578:	d9f0      	bls.n	800a55c <USB_SetCurrentMode+0x2e>
 800a57a:	e01a      	b.n	800a5b2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a57c:	78fb      	ldrb	r3, [r7, #3]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d115      	bne.n	800a5ae <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	68db      	ldr	r3, [r3, #12]
 800a586:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a58e:	2001      	movs	r0, #1
 800a590:	f7f7 fd86 	bl	80020a0 <HAL_Delay>
      ms++;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	3301      	adds	r3, #1
 800a598:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a59a:	6878      	ldr	r0, [r7, #4]
 800a59c:	f000 fa00 	bl	800a9a0 <USB_GetMode>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d005      	beq.n	800a5b2 <USB_SetCurrentMode+0x84>
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2b31      	cmp	r3, #49	; 0x31
 800a5aa:	d9f0      	bls.n	800a58e <USB_SetCurrentMode+0x60>
 800a5ac:	e001      	b.n	800a5b2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	e005      	b.n	800a5be <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2b32      	cmp	r3, #50	; 0x32
 800a5b6:	d101      	bne.n	800a5bc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	e000      	b.n	800a5be <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a5bc:	2300      	movs	r3, #0
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3710      	adds	r7, #16
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}
	...

0800a5c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a5c8:	b084      	sub	sp, #16
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b086      	sub	sp, #24
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
 800a5d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a5d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	613b      	str	r3, [r7, #16]
 800a5e6:	e009      	b.n	800a5fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a5e8:	687a      	ldr	r2, [r7, #4]
 800a5ea:	693b      	ldr	r3, [r7, #16]
 800a5ec:	3340      	adds	r3, #64	; 0x40
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	4413      	add	r3, r2
 800a5f2:	2200      	movs	r2, #0
 800a5f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a5f6:	693b      	ldr	r3, [r7, #16]
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	613b      	str	r3, [r7, #16]
 800a5fc:	693b      	ldr	r3, [r7, #16]
 800a5fe:	2b0e      	cmp	r3, #14
 800a600:	d9f2      	bls.n	800a5e8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a602:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a604:	2b00      	cmp	r3, #0
 800a606:	d11c      	bne.n	800a642 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a60e:	685b      	ldr	r3, [r3, #4]
 800a610:	68fa      	ldr	r2, [r7, #12]
 800a612:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a616:	f043 0302 	orr.w	r3, r3, #2
 800a61a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a620:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	639a      	str	r2, [r3, #56]	; 0x38
    /* B-peripheral session valid override enable */
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	601a      	str	r2, [r3, #0]
 800a640:	e005      	b.n	800a64e <USB_DevInit+0x86>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a646:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a654:	461a      	mov	r2, r3
 800a656:	2300      	movs	r3, #0
 800a658:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a660:	4619      	mov	r1, r3
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a668:	461a      	mov	r2, r3
 800a66a:	680b      	ldr	r3, [r1, #0]
 800a66c:	6013      	str	r3, [r2, #0]
  }
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a66e:	2103      	movs	r1, #3
 800a670:	6878      	ldr	r0, [r7, #4]
 800a672:	f000 f95b 	bl	800a92c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a676:	2110      	movs	r1, #16
 800a678:	6878      	ldr	r0, [r7, #4]
 800a67a:	f000 f8f3 	bl	800a864 <USB_FlushTxFifo>
 800a67e:	4603      	mov	r3, r0
 800a680:	2b00      	cmp	r3, #0
 800a682:	d001      	beq.n	800a688 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800a684:	2301      	movs	r3, #1
 800a686:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 f91f 	bl	800a8cc <USB_FlushRxFifo>
 800a68e:	4603      	mov	r3, r0
 800a690:	2b00      	cmp	r3, #0
 800a692:	d001      	beq.n	800a698 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800a694:	2301      	movs	r3, #1
 800a696:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a69e:	461a      	mov	r2, r3
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6b6:	461a      	mov	r2, r3
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a6bc:	2300      	movs	r3, #0
 800a6be:	613b      	str	r3, [r7, #16]
 800a6c0:	e043      	b.n	800a74a <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	015a      	lsls	r2, r3, #5
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	4413      	add	r3, r2
 800a6ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a6d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a6d8:	d118      	bne.n	800a70c <USB_DevInit+0x144>
    {
      if (i == 0U)
 800a6da:	693b      	ldr	r3, [r7, #16]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d10a      	bne.n	800a6f6 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	015a      	lsls	r2, r3, #5
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a6f2:	6013      	str	r3, [r2, #0]
 800a6f4:	e013      	b.n	800a71e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	015a      	lsls	r2, r3, #5
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	4413      	add	r3, r2
 800a6fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a702:	461a      	mov	r2, r3
 800a704:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a708:	6013      	str	r3, [r2, #0]
 800a70a:	e008      	b.n	800a71e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	015a      	lsls	r2, r3, #5
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	4413      	add	r3, r2
 800a714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a718:	461a      	mov	r2, r3
 800a71a:	2300      	movs	r3, #0
 800a71c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a71e:	693b      	ldr	r3, [r7, #16]
 800a720:	015a      	lsls	r2, r3, #5
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	4413      	add	r3, r2
 800a726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a72a:	461a      	mov	r2, r3
 800a72c:	2300      	movs	r3, #0
 800a72e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	015a      	lsls	r2, r3, #5
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	4413      	add	r3, r2
 800a738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a73c:	461a      	mov	r2, r3
 800a73e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a742:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	3301      	adds	r3, #1
 800a748:	613b      	str	r3, [r7, #16]
 800a74a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a74c:	693a      	ldr	r2, [r7, #16]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d3b7      	bcc.n	800a6c2 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a752:	2300      	movs	r3, #0
 800a754:	613b      	str	r3, [r7, #16]
 800a756:	e043      	b.n	800a7e0 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	015a      	lsls	r2, r3, #5
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	4413      	add	r3, r2
 800a760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a76a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a76e:	d118      	bne.n	800a7a2 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d10a      	bne.n	800a78c <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	015a      	lsls	r2, r3, #5
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	4413      	add	r3, r2
 800a77e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a782:	461a      	mov	r2, r3
 800a784:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a788:	6013      	str	r3, [r2, #0]
 800a78a:	e013      	b.n	800a7b4 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a78c:	693b      	ldr	r3, [r7, #16]
 800a78e:	015a      	lsls	r2, r3, #5
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	4413      	add	r3, r2
 800a794:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a798:	461a      	mov	r2, r3
 800a79a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a79e:	6013      	str	r3, [r2, #0]
 800a7a0:	e008      	b.n	800a7b4 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	015a      	lsls	r2, r3, #5
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	4413      	add	r3, r2
 800a7aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	015a      	lsls	r2, r3, #5
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	4413      	add	r3, r2
 800a7bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	015a      	lsls	r2, r3, #5
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	4413      	add	r3, r2
 800a7ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7d2:	461a      	mov	r2, r3
 800a7d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a7d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	3301      	adds	r3, #1
 800a7de:	613b      	str	r3, [r7, #16]
 800a7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e2:	693a      	ldr	r2, [r7, #16]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d3b7      	bcc.n	800a758 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7ee:	691b      	ldr	r3, [r3, #16]
 800a7f0:	68fa      	ldr	r2, [r7, #12]
 800a7f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a7f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a7fa:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2200      	movs	r2, #0
 800a800:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a808:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d105      	bne.n	800a81c <USB_DevInit+0x254>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	699b      	ldr	r3, [r3, #24]
 800a814:	f043 0210 	orr.w	r2, r3, #16
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	699a      	ldr	r2, [r3, #24]
 800a820:	4b0f      	ldr	r3, [pc, #60]	; (800a860 <USB_DevInit+0x298>)
 800a822:	4313      	orrs	r3, r2
 800a824:	687a      	ldr	r2, [r7, #4]
 800a826:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d005      	beq.n	800a83a <USB_DevInit+0x272>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	699b      	ldr	r3, [r3, #24]
 800a832:	f043 0208 	orr.w	r2, r3, #8
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a83a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a83c:	2b01      	cmp	r3, #1
 800a83e:	d107      	bne.n	800a850 <USB_DevInit+0x288>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	699b      	ldr	r3, [r3, #24]
 800a844:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a848:	f043 0304 	orr.w	r3, r3, #4
 800a84c:	687a      	ldr	r2, [r7, #4]
 800a84e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a850:	7dfb      	ldrb	r3, [r7, #23]
}
 800a852:	4618      	mov	r0, r3
 800a854:	3718      	adds	r7, #24
 800a856:	46bd      	mov	sp, r7
 800a858:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a85c:	b004      	add	sp, #16
 800a85e:	4770      	bx	lr
 800a860:	803c3800 	.word	0x803c3800

0800a864 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a864:	b480      	push	{r7}
 800a866:	b085      	sub	sp, #20
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a86e:	2300      	movs	r3, #0
 800a870:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	3301      	adds	r3, #1
 800a876:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	4a13      	ldr	r2, [pc, #76]	; (800a8c8 <USB_FlushTxFifo+0x64>)
 800a87c:	4293      	cmp	r3, r2
 800a87e:	d901      	bls.n	800a884 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a880:	2303      	movs	r3, #3
 800a882:	e01b      	b.n	800a8bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	691b      	ldr	r3, [r3, #16]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	daf2      	bge.n	800a872 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a88c:	2300      	movs	r3, #0
 800a88e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	019b      	lsls	r3, r3, #6
 800a894:	f043 0220 	orr.w	r2, r3, #32
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	3301      	adds	r3, #1
 800a8a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	4a08      	ldr	r2, [pc, #32]	; (800a8c8 <USB_FlushTxFifo+0x64>)
 800a8a6:	4293      	cmp	r3, r2
 800a8a8:	d901      	bls.n	800a8ae <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a8aa:	2303      	movs	r3, #3
 800a8ac:	e006      	b.n	800a8bc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	691b      	ldr	r3, [r3, #16]
 800a8b2:	f003 0320 	and.w	r3, r3, #32
 800a8b6:	2b20      	cmp	r3, #32
 800a8b8:	d0f0      	beq.n	800a89c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a8ba:	2300      	movs	r3, #0
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3714      	adds	r7, #20
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c6:	4770      	bx	lr
 800a8c8:	00030d40 	.word	0x00030d40

0800a8cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b085      	sub	sp, #20
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	3301      	adds	r3, #1
 800a8dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	4a11      	ldr	r2, [pc, #68]	; (800a928 <USB_FlushRxFifo+0x5c>)
 800a8e2:	4293      	cmp	r3, r2
 800a8e4:	d901      	bls.n	800a8ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a8e6:	2303      	movs	r3, #3
 800a8e8:	e018      	b.n	800a91c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	691b      	ldr	r3, [r3, #16]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	daf2      	bge.n	800a8d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	2210      	movs	r2, #16
 800a8fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	3301      	adds	r3, #1
 800a900:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	4a08      	ldr	r2, [pc, #32]	; (800a928 <USB_FlushRxFifo+0x5c>)
 800a906:	4293      	cmp	r3, r2
 800a908:	d901      	bls.n	800a90e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a90a:	2303      	movs	r3, #3
 800a90c:	e006      	b.n	800a91c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	691b      	ldr	r3, [r3, #16]
 800a912:	f003 0310 	and.w	r3, r3, #16
 800a916:	2b10      	cmp	r3, #16
 800a918:	d0f0      	beq.n	800a8fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a91a:	2300      	movs	r3, #0
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	3714      	adds	r7, #20
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr
 800a928:	00030d40 	.word	0x00030d40

0800a92c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a92c:	b480      	push	{r7}
 800a92e:	b085      	sub	sp, #20
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	460b      	mov	r3, r1
 800a936:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a942:	681a      	ldr	r2, [r3, #0]
 800a944:	78fb      	ldrb	r3, [r7, #3]
 800a946:	68f9      	ldr	r1, [r7, #12]
 800a948:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a94c:	4313      	orrs	r3, r2
 800a94e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a950:	2300      	movs	r3, #0
}
 800a952:	4618      	mov	r0, r3
 800a954:	3714      	adds	r7, #20
 800a956:	46bd      	mov	sp, r7
 800a958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95c:	4770      	bx	lr

0800a95e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a95e:	b480      	push	{r7}
 800a960:	b085      	sub	sp, #20
 800a962:	af00      	add	r7, sp, #0
 800a964:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	68fa      	ldr	r2, [r7, #12]
 800a974:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a978:	f023 0303 	bic.w	r3, r3, #3
 800a97c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a984:	685b      	ldr	r3, [r3, #4]
 800a986:	68fa      	ldr	r2, [r7, #12]
 800a988:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a98c:	f043 0302 	orr.w	r3, r3, #2
 800a990:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a992:	2300      	movs	r3, #0
}
 800a994:	4618      	mov	r0, r3
 800a996:	3714      	adds	r7, #20
 800a998:	46bd      	mov	sp, r7
 800a99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99e:	4770      	bx	lr

0800a9a0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b083      	sub	sp, #12
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	695b      	ldr	r3, [r3, #20]
 800a9ac:	f003 0301 	and.w	r3, r3, #1
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	370c      	adds	r7, #12
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr

0800a9bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b085      	sub	sp, #20
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	3301      	adds	r3, #1
 800a9cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	4a13      	ldr	r2, [pc, #76]	; (800aa20 <USB_CoreReset+0x64>)
 800a9d2:	4293      	cmp	r3, r2
 800a9d4:	d901      	bls.n	800a9da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a9d6:	2303      	movs	r3, #3
 800a9d8:	e01b      	b.n	800aa12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	691b      	ldr	r3, [r3, #16]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	daf2      	bge.n	800a9c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	691b      	ldr	r3, [r3, #16]
 800a9ea:	f043 0201 	orr.w	r2, r3, #1
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	3301      	adds	r3, #1
 800a9f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	4a09      	ldr	r2, [pc, #36]	; (800aa20 <USB_CoreReset+0x64>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d901      	bls.n	800aa04 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aa00:	2303      	movs	r3, #3
 800aa02:	e006      	b.n	800aa12 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	691b      	ldr	r3, [r3, #16]
 800aa08:	f003 0301 	and.w	r3, r3, #1
 800aa0c:	2b01      	cmp	r3, #1
 800aa0e:	d0f0      	beq.n	800a9f2 <USB_CoreReset+0x36>

  return HAL_OK;
 800aa10:	2300      	movs	r3, #0
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	3714      	adds	r7, #20
 800aa16:	46bd      	mov	sp, r7
 800aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1c:	4770      	bx	lr
 800aa1e:	bf00      	nop
 800aa20:	00030d40 	.word	0x00030d40

0800aa24 <__libc_init_array>:
 800aa24:	b570      	push	{r4, r5, r6, lr}
 800aa26:	4d0d      	ldr	r5, [pc, #52]	; (800aa5c <__libc_init_array+0x38>)
 800aa28:	2600      	movs	r6, #0
 800aa2a:	4c0d      	ldr	r4, [pc, #52]	; (800aa60 <__libc_init_array+0x3c>)
 800aa2c:	1b64      	subs	r4, r4, r5
 800aa2e:	10a4      	asrs	r4, r4, #2
 800aa30:	42a6      	cmp	r6, r4
 800aa32:	d109      	bne.n	800aa48 <__libc_init_array+0x24>
 800aa34:	4d0b      	ldr	r5, [pc, #44]	; (800aa64 <__libc_init_array+0x40>)
 800aa36:	2600      	movs	r6, #0
 800aa38:	4c0b      	ldr	r4, [pc, #44]	; (800aa68 <__libc_init_array+0x44>)
 800aa3a:	f000 f81f 	bl	800aa7c <_init>
 800aa3e:	1b64      	subs	r4, r4, r5
 800aa40:	10a4      	asrs	r4, r4, #2
 800aa42:	42a6      	cmp	r6, r4
 800aa44:	d105      	bne.n	800aa52 <__libc_init_array+0x2e>
 800aa46:	bd70      	pop	{r4, r5, r6, pc}
 800aa48:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa4c:	3601      	adds	r6, #1
 800aa4e:	4798      	blx	r3
 800aa50:	e7ee      	b.n	800aa30 <__libc_init_array+0xc>
 800aa52:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa56:	3601      	adds	r6, #1
 800aa58:	4798      	blx	r3
 800aa5a:	e7f2      	b.n	800aa42 <__libc_init_array+0x1e>
 800aa5c:	0800ac10 	.word	0x0800ac10
 800aa60:	0800ac10 	.word	0x0800ac10
 800aa64:	0800ac10 	.word	0x0800ac10
 800aa68:	0800ac14 	.word	0x0800ac14

0800aa6c <memset>:
 800aa6c:	4402      	add	r2, r0
 800aa6e:	4603      	mov	r3, r0
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d100      	bne.n	800aa76 <memset+0xa>
 800aa74:	4770      	bx	lr
 800aa76:	f803 1b01 	strb.w	r1, [r3], #1
 800aa7a:	e7f9      	b.n	800aa70 <memset+0x4>

0800aa7c <_init>:
 800aa7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa7e:	bf00      	nop
 800aa80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa82:	bc08      	pop	{r3}
 800aa84:	469e      	mov	lr, r3
 800aa86:	4770      	bx	lr

0800aa88 <_fini>:
 800aa88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa8a:	bf00      	nop
 800aa8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa8e:	bc08      	pop	{r3}
 800aa90:	469e      	mov	lr, r3
 800aa92:	4770      	bx	lr
